# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AuditTrackFiltersArgs',
    'AuditTrackFiltersResourceFieldArgs',
    'AuditTrackStorageArgs',
]

@pulumi.input_type
class AuditTrackFiltersArgs:
    def __init__(__self__, *,
                 resource_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AuditTrackFiltersResourceFieldArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AuditTrackFiltersResourceFieldArgs']]] resource_fields: Resource filtering conditions.
        """
        if resource_fields is not None:
            pulumi.set(__self__, "resource_fields", resource_fields)

    @property
    @pulumi.getter(name="resourceFields")
    def resource_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuditTrackFiltersResourceFieldArgs']]]]:
        """
        Resource filtering conditions.
        """
        return pulumi.get(self, "resource_fields")

    @resource_fields.setter
    def resource_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuditTrackFiltersResourceFieldArgs']]]]):
        pulumi.set(self, "resource_fields", value)


@pulumi.input_type
class AuditTrackFiltersResourceFieldArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 event_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resource_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action_type: Tracking set event type (`Read`: Read; `Write`: Write; `*`: All).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_names: The list of API names of tracking set events. When `ResourceType` is `*`, the value of `EventNames` must be `*`. When `ResourceType` is a specified product, the value of `EventNames` can be `*`. When `ResourceType` is `cos` or `cls`, up to 10 APIs are supported.
        :param pulumi.Input[str] resource_type: The product to which the tracking set event belongs. The value can be a single product such as `cos`, or `*` that indicates all products.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "event_names", event_names)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        """
        Tracking set event type (`Read`: Read; `Write`: Write; `*`: All).
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="eventNames")
    def event_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of API names of tracking set events. When `ResourceType` is `*`, the value of `EventNames` must be `*`. When `ResourceType` is a specified product, the value of `EventNames` can be `*`. When `ResourceType` is `cos` or `cls`, up to 10 APIs are supported.
        """
        return pulumi.get(self, "event_names")

    @event_names.setter
    def event_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "event_names", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        The product to which the tracking set event belongs. The value can be a single product such as `cos`, or `*` that indicates all products.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class AuditTrackStorageArgs:
    def __init__(__self__, *,
                 storage_name: pulumi.Input[str],
                 storage_prefix: pulumi.Input[str],
                 storage_region: pulumi.Input[str],
                 storage_type: pulumi.Input[str],
                 storage_account_id: Optional[pulumi.Input[str]] = None,
                 storage_app_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] storage_name: Storage name. For COS, the storage name is the custom bucket name, which can contain up to 50 lowercase letters, digits, and hyphens. It cannot contain "-APPID" and cannot start or end with a hyphen. For CLS, the storage name is the log topic ID, which can contain 1-50 characters.
        :param pulumi.Input[str] storage_prefix: Storage directory prefix. The COS log file prefix can only contain 3-40 letters and digits.
        :param pulumi.Input[str] storage_region: StorageRegion *string `json:'StorageRegion,omitnil,omitempty' name: 'StorageRegion'`.
        :param pulumi.Input[str] storage_type: Storage type (Valid values: cos, cls).
        :param pulumi.Input[str] storage_account_id: Designated to store user ID.
        :param pulumi.Input[str] storage_app_id: Designated to store user app ID.
        """
        pulumi.set(__self__, "storage_name", storage_name)
        pulumi.set(__self__, "storage_prefix", storage_prefix)
        pulumi.set(__self__, "storage_region", storage_region)
        pulumi.set(__self__, "storage_type", storage_type)
        if storage_account_id is not None:
            pulumi.set(__self__, "storage_account_id", storage_account_id)
        if storage_app_id is not None:
            pulumi.set(__self__, "storage_app_id", storage_app_id)

    @property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> pulumi.Input[str]:
        """
        Storage name. For COS, the storage name is the custom bucket name, which can contain up to 50 lowercase letters, digits, and hyphens. It cannot contain "-APPID" and cannot start or end with a hyphen. For CLS, the storage name is the log topic ID, which can contain 1-50 characters.
        """
        return pulumi.get(self, "storage_name")

    @storage_name.setter
    def storage_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_name", value)

    @property
    @pulumi.getter(name="storagePrefix")
    def storage_prefix(self) -> pulumi.Input[str]:
        """
        Storage directory prefix. The COS log file prefix can only contain 3-40 letters and digits.
        """
        return pulumi.get(self, "storage_prefix")

    @storage_prefix.setter
    def storage_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_prefix", value)

    @property
    @pulumi.getter(name="storageRegion")
    def storage_region(self) -> pulumi.Input[str]:
        """
        StorageRegion *string `json:'StorageRegion,omitnil,omitempty' name: 'StorageRegion'`.
        """
        return pulumi.get(self, "storage_region")

    @storage_region.setter
    def storage_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_region", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Input[str]:
        """
        Storage type (Valid values: cos, cls).
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="storageAccountId")
    def storage_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Designated to store user ID.
        """
        return pulumi.get(self, "storage_account_id")

    @storage_account_id.setter
    def storage_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_id", value)

    @property
    @pulumi.getter(name="storageAppId")
    def storage_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        Designated to store user app ID.
        """
        return pulumi.get(self, "storage_app_id")

    @storage_app_id.setter
    def storage_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_app_id", value)


