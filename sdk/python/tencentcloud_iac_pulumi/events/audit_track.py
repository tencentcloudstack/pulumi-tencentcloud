# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AuditTrackArgs', 'AuditTrack']

@pulumi.input_type
class AuditTrackArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input['AuditTrackFiltersArgs'],
                 status: pulumi.Input[int],
                 storage: pulumi.Input['AuditTrackStorageArgs'],
                 name: Optional[pulumi.Input[str]] = None,
                 track_for_all_members: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a AuditTrack resource.
        :param pulumi.Input['AuditTrackFiltersArgs'] filters: Data filtering criteria.
        :param pulumi.Input[int] status: Tracking set status (0: Not enabled; 1: Enabled).
        :param pulumi.Input['AuditTrackStorageArgs'] storage: Storage type of shipped data. Valid values: `cos`, `cls`.
        :param pulumi.Input[str] name: Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
        :param pulumi.Input[int] track_for_all_members: Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
        """
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage", storage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if track_for_all_members is not None:
            pulumi.set(__self__, "track_for_all_members", track_for_all_members)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input['AuditTrackFiltersArgs']:
        """
        Data filtering criteria.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input['AuditTrackFiltersArgs']):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[int]:
        """
        Tracking set status (0: Not enabled; 1: Enabled).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[int]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input['AuditTrackStorageArgs']:
        """
        Storage type of shipped data. Valid values: `cos`, `cls`.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input['AuditTrackStorageArgs']):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="trackForAllMembers")
    def track_for_all_members(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
        """
        return pulumi.get(self, "track_for_all_members")

    @track_for_all_members.setter
    def track_for_all_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "track_for_all_members", value)


@pulumi.input_type
class _AuditTrackState:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input['AuditTrackFiltersArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input['AuditTrackStorageArgs']] = None,
                 track_for_all_members: Optional[pulumi.Input[int]] = None,
                 track_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AuditTrack resources.
        :param pulumi.Input['AuditTrackFiltersArgs'] filters: Data filtering criteria.
        :param pulumi.Input[str] name: Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
        :param pulumi.Input[int] status: Tracking set status (0: Not enabled; 1: Enabled).
        :param pulumi.Input['AuditTrackStorageArgs'] storage: Storage type of shipped data. Valid values: `cos`, `cls`.
        :param pulumi.Input[int] track_for_all_members: Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
        :param pulumi.Input[int] track_id: Whether the log list has come to an end. `true`: Yes. Pagination is not required.
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if track_for_all_members is not None:
            pulumi.set(__self__, "track_for_all_members", track_for_all_members)
        if track_id is not None:
            pulumi.set(__self__, "track_id", track_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input['AuditTrackFiltersArgs']]:
        """
        Data filtering criteria.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input['AuditTrackFiltersArgs']]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Tracking set status (0: Not enabled; 1: Enabled).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['AuditTrackStorageArgs']]:
        """
        Storage type of shipped data. Valid values: `cos`, `cls`.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['AuditTrackStorageArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="trackForAllMembers")
    def track_for_all_members(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
        """
        return pulumi.get(self, "track_for_all_members")

    @track_for_all_members.setter
    def track_for_all_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "track_for_all_members", value)

    @property
    @pulumi.getter(name="trackId")
    def track_id(self) -> Optional[pulumi.Input[int]]:
        """
        Whether the log list has come to an end. `true`: Yes. Pagination is not required.
        """
        return pulumi.get(self, "track_id")

    @track_id.setter
    def track_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "track_id", value)


class AuditTrack(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 filters: Optional[pulumi.Input[pulumi.InputType['AuditTrackFiltersArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['AuditTrackStorageArgs']]] = None,
                 track_for_all_members: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create events audit track

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.events.AuditTrack("example",
            filters=tencentcloud.events.AuditTrackFiltersArgs(
                resource_fields=[
                    tencentcloud.events.AuditTrackFiltersResourceFieldArgs(
                        action_type="*",
                        event_names=[
                            "AddSubAccount",
                            "AddSubAccountCheckingMFA",
                        ],
                        resource_type="cam",
                    ),
                    tencentcloud.events.AuditTrackFiltersResourceFieldArgs(
                        action_type="*",
                        event_names=["*"],
                        resource_type="cvm",
                    ),
                    tencentcloud.events.AuditTrackFiltersResourceFieldArgs(
                        action_type="*",
                        event_names=["*"],
                        resource_type="tke",
                    ),
                ],
            ),
            status=1,
            storage=tencentcloud.events.AuditTrackStorageArgs(
                storage_name="393953ac-5c1b-457d-911d-376271b1b4f2",
                storage_prefix="cloudaudit",
                storage_region="ap-guangzhou",
                storage_type="cls",
            ),
            track_for_all_members=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        events audit track can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Events/auditTrack:AuditTrack example 24283
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AuditTrackFiltersArgs']] filters: Data filtering criteria.
        :param pulumi.Input[str] name: Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
        :param pulumi.Input[int] status: Tracking set status (0: Not enabled; 1: Enabled).
        :param pulumi.Input[pulumi.InputType['AuditTrackStorageArgs']] storage: Storage type of shipped data. Valid values: `cos`, `cls`.
        :param pulumi.Input[int] track_for_all_members: Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuditTrackArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create events audit track

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.events.AuditTrack("example",
            filters=tencentcloud.events.AuditTrackFiltersArgs(
                resource_fields=[
                    tencentcloud.events.AuditTrackFiltersResourceFieldArgs(
                        action_type="*",
                        event_names=[
                            "AddSubAccount",
                            "AddSubAccountCheckingMFA",
                        ],
                        resource_type="cam",
                    ),
                    tencentcloud.events.AuditTrackFiltersResourceFieldArgs(
                        action_type="*",
                        event_names=["*"],
                        resource_type="cvm",
                    ),
                    tencentcloud.events.AuditTrackFiltersResourceFieldArgs(
                        action_type="*",
                        event_names=["*"],
                        resource_type="tke",
                    ),
                ],
            ),
            status=1,
            storage=tencentcloud.events.AuditTrackStorageArgs(
                storage_name="393953ac-5c1b-457d-911d-376271b1b4f2",
                storage_prefix="cloudaudit",
                storage_region="ap-guangzhou",
                storage_type="cls",
            ),
            track_for_all_members=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        events audit track can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Events/auditTrack:AuditTrack example 24283
        ```

        :param str resource_name: The name of the resource.
        :param AuditTrackArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuditTrackArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 filters: Optional[pulumi.Input[pulumi.InputType['AuditTrackFiltersArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['AuditTrackStorageArgs']]] = None,
                 track_for_all_members: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuditTrackArgs.__new__(AuditTrackArgs)

            if filters is None and not opts.urn:
                raise TypeError("Missing required property 'filters'")
            __props__.__dict__["filters"] = filters
            __props__.__dict__["name"] = name
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["track_for_all_members"] = track_for_all_members
            __props__.__dict__["track_id"] = None
        super(AuditTrack, __self__).__init__(
            'tencentcloud:Events/auditTrack:AuditTrack',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            filters: Optional[pulumi.Input[pulumi.InputType['AuditTrackFiltersArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            storage: Optional[pulumi.Input[pulumi.InputType['AuditTrackStorageArgs']]] = None,
            track_for_all_members: Optional[pulumi.Input[int]] = None,
            track_id: Optional[pulumi.Input[int]] = None) -> 'AuditTrack':
        """
        Get an existing AuditTrack resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AuditTrackFiltersArgs']] filters: Data filtering criteria.
        :param pulumi.Input[str] name: Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
        :param pulumi.Input[int] status: Tracking set status (0: Not enabled; 1: Enabled).
        :param pulumi.Input[pulumi.InputType['AuditTrackStorageArgs']] storage: Storage type of shipped data. Valid values: `cos`, `cls`.
        :param pulumi.Input[int] track_for_all_members: Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
        :param pulumi.Input[int] track_id: Whether the log list has come to an end. `true`: Yes. Pagination is not required.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuditTrackState.__new__(_AuditTrackState)

        __props__.__dict__["filters"] = filters
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["storage"] = storage
        __props__.__dict__["track_for_all_members"] = track_for_all_members
        __props__.__dict__["track_id"] = track_id
        return AuditTrack(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Output['outputs.AuditTrackFilters']:
        """
        Data filtering criteria.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Tracking set status (0: Not enabled; 1: Enabled).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output['outputs.AuditTrackStorage']:
        """
        Storage type of shipped data. Valid values: `cos`, `cls`.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="trackForAllMembers")
    def track_for_all_members(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
        """
        return pulumi.get(self, "track_for_all_members")

    @property
    @pulumi.getter(name="trackId")
    def track_id(self) -> pulumi.Output[int]:
        """
        Whether the log list has come to an end. `true`: Yes. Pagination is not required.
        """
        return pulumi.get(self, "track_id")

