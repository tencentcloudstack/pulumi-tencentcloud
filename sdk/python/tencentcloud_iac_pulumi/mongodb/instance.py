# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 available_zone: pulumi.Input[str],
                 engine_version: pulumi.Input[str],
                 instance_name: pulumi.Input[str],
                 machine_type: pulumi.Input[str],
                 memory: pulumi.Input[int],
                 volume: pulumi.Input[int],
                 add_node_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddNodeListArgs']]]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 hidden_zone: Optional[pulumi.Input[str]] = None,
                 maintenance_end: Optional[pulumi.Input[str]] = None,
                 maintenance_start: Optional[pulumi.Input[str]] = None,
                 node_num: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 remove_node_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceRemoveNodeListArgs']]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] available_zone: The available zone of the Mongodb.
        :param pulumi.Input[str] engine_version: Version of the Mongodb, and available values include `MONGO_36_WT` (MongoDB 3.6 WiredTiger Edition), `MONGO_40_WT` (MongoDB 4.0 WiredTiger Edition) and `MONGO_42_WT`  (MongoDB 4.2 WiredTiger Edition). NOTE: `MONGO_3_WT` (MongoDB 3.2 WiredTiger Edition) and `MONGO_3_ROCKS` (MongoDB 3.2 RocksDB Edition) will deprecated.
        :param pulumi.Input[str] instance_name: Name of the Mongodb instance.
        :param pulumi.Input[str] machine_type: Type of Mongodb instance, and available values include `HIO`(or `GIO` which will be deprecated, represents high IO) and `HIO10G`(or `TGIO` which will be deprecated, represents 10-gigabit high IO).
        :param pulumi.Input[int] memory: Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        :param pulumi.Input[int] volume: Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceAddNodeListArgs']]] add_node_lists: Add node attribute list.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zone_lists: A list of nodes deployed in multiple availability zones. For more information, please use the API DescribeSpecInfo.
               - Multi-availability zone deployment nodes can only be deployed in 3 different availability zones. It is not supported to deploy most nodes of the cluster in the same availability zone. For example, a 3-node cluster does not support the deployment of 2 nodes in the same zone.
               - Version 4.2 and above are not supported.
               - Read-only disaster recovery instances are not supported.
               - Basic network cannot be selected.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
        :param pulumi.Input[str] hidden_zone: The availability zone to which the Hidden node belongs. This parameter must be configured to deploy instances across availability zones.
        :param pulumi.Input[str] maintenance_end: Maintenance window end time.
               - The value range is any full point or half point from `00:00-23:00`, and the maintenance time duration is at least 30 minutes and at most 3 hours.
               - The end time must be based on the start time backwards.
        :param pulumi.Input[str] maintenance_start: Maintenance window start time. The value range is any full point or half point from `00:00-23:00`, such as 00:00 or 00:30.
        :param pulumi.Input[int] node_num: The number of nodes in each replica set. Default value: 3.
        :param pulumi.Input[str] password: Password of this Mongodb account.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[int] project_id: ID of the project which the instance belongs.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceRemoveNodeListArgs']]] remove_node_lists: Add node attribute list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of the security group.
        :param pulumi.Input[str] subnet_id: ID of the subnet within this VPC. The value is required if `vpc_id` is set.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the Mongodb. Key name `project` is system reserved and can't be used.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        """
        pulumi.set(__self__, "available_zone", available_zone)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "volume", volume)
        if add_node_lists is not None:
            pulumi.set(__self__, "add_node_lists", add_node_lists)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if availability_zone_lists is not None:
            pulumi.set(__self__, "availability_zone_lists", availability_zone_lists)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if hidden_zone is not None:
            pulumi.set(__self__, "hidden_zone", hidden_zone)
        if maintenance_end is not None:
            pulumi.set(__self__, "maintenance_end", maintenance_end)
        if maintenance_start is not None:
            pulumi.set(__self__, "maintenance_start", maintenance_start)
        if node_num is not None:
            pulumi.set(__self__, "node_num", node_num)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if remove_node_lists is not None:
            pulumi.set(__self__, "remove_node_lists", remove_node_lists)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> pulumi.Input[str]:
        """
        The available zone of the Mongodb.
        """
        return pulumi.get(self, "available_zone")

    @available_zone.setter
    def available_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "available_zone", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Input[str]:
        """
        Version of the Mongodb, and available values include `MONGO_36_WT` (MongoDB 3.6 WiredTiger Edition), `MONGO_40_WT` (MongoDB 4.0 WiredTiger Edition) and `MONGO_42_WT`  (MongoDB 4.2 WiredTiger Edition). NOTE: `MONGO_3_WT` (MongoDB 3.2 WiredTiger Edition) and `MONGO_3_ROCKS` (MongoDB 3.2 RocksDB Edition) will deprecated.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        Name of the Mongodb instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[str]:
        """
        Type of Mongodb instance, and available values include `HIO`(or `GIO` which will be deprecated, represents high IO) and `HIO10G`(or `TGIO` which will be deprecated, represents 10-gigabit high IO).
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        """
        Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Input[int]:
        """
        Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="addNodeLists")
    def add_node_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddNodeListArgs']]]]:
        """
        Add node attribute list.
        """
        return pulumi.get(self, "add_node_lists")

    @add_node_lists.setter
    def add_node_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddNodeListArgs']]]]):
        pulumi.set(self, "add_node_lists", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="availabilityZoneLists")
    def availability_zone_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of nodes deployed in multiple availability zones. For more information, please use the API DescribeSpecInfo.
        - Multi-availability zone deployment nodes can only be deployed in 3 different availability zones. It is not supported to deploy most nodes of the cluster in the same availability zone. For example, a 3-node cluster does not support the deployment of 2 nodes in the same zone.
        - Version 4.2 and above are not supported.
        - Read-only disaster recovery instances are not supported.
        - Basic network cannot be selected.
        """
        return pulumi.get(self, "availability_zone_lists")

    @availability_zone_lists.setter
    def availability_zone_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "availability_zone_lists", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="hiddenZone")
    def hidden_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The availability zone to which the Hidden node belongs. This parameter must be configured to deploy instances across availability zones.
        """
        return pulumi.get(self, "hidden_zone")

    @hidden_zone.setter
    def hidden_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hidden_zone", value)

    @property
    @pulumi.getter(name="maintenanceEnd")
    def maintenance_end(self) -> Optional[pulumi.Input[str]]:
        """
        Maintenance window end time.
        - The value range is any full point or half point from `00:00-23:00`, and the maintenance time duration is at least 30 minutes and at most 3 hours.
        - The end time must be based on the start time backwards.
        """
        return pulumi.get(self, "maintenance_end")

    @maintenance_end.setter
    def maintenance_end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_end", value)

    @property
    @pulumi.getter(name="maintenanceStart")
    def maintenance_start(self) -> Optional[pulumi.Input[str]]:
        """
        Maintenance window start time. The value range is any full point or half point from `00:00-23:00`, such as 00:00 or 00:30.
        """
        return pulumi.get(self, "maintenance_start")

    @maintenance_start.setter
    def maintenance_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_start", value)

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes in each replica set. Default value: 3.
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_num", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of this Mongodb account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the project which the instance belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="removeNodeLists")
    def remove_node_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceRemoveNodeListArgs']]]]:
        """
        Add node attribute list.
        """
        return pulumi.get(self, "remove_node_lists")

    @remove_node_lists.setter
    def remove_node_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceRemoveNodeListArgs']]]]):
        pulumi.set(self, "remove_node_lists", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID of the security group.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the subnet within this VPC. The value is required if `vpc_id` is set.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of the Mongodb. Key name `project` is system reserved and can't be used.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 add_node_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddNodeListArgs']]]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 available_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 hidden_zone: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 maintenance_end: Optional[pulumi.Input[str]] = None,
                 maintenance_start: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 node_num: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 remove_node_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceRemoveNodeListArgs']]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 standby_instance_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceStandbyInstanceListArgs']]]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceAddNodeListArgs']]] add_node_lists: Add node attribute list.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zone_lists: A list of nodes deployed in multiple availability zones. For more information, please use the API DescribeSpecInfo.
               - Multi-availability zone deployment nodes can only be deployed in 3 different availability zones. It is not supported to deploy most nodes of the cluster in the same availability zone. For example, a 3-node cluster does not support the deployment of 2 nodes in the same zone.
               - Version 4.2 and above are not supported.
               - Read-only disaster recovery instances are not supported.
               - Basic network cannot be selected.
        :param pulumi.Input[str] available_zone: The available zone of the Mongodb.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
        :param pulumi.Input[str] create_time: Creation time of the Mongodb instance.
        :param pulumi.Input[str] engine_version: Version of the Mongodb, and available values include `MONGO_36_WT` (MongoDB 3.6 WiredTiger Edition), `MONGO_40_WT` (MongoDB 4.0 WiredTiger Edition) and `MONGO_42_WT`  (MongoDB 4.2 WiredTiger Edition). NOTE: `MONGO_3_WT` (MongoDB 3.2 WiredTiger Edition) and `MONGO_3_ROCKS` (MongoDB 3.2 RocksDB Edition) will deprecated.
        :param pulumi.Input[str] hidden_zone: The availability zone to which the Hidden node belongs. This parameter must be configured to deploy instances across availability zones.
        :param pulumi.Input[str] instance_name: Name of the Mongodb instance.
        :param pulumi.Input[str] machine_type: Type of Mongodb instance, and available values include `HIO`(or `GIO` which will be deprecated, represents high IO) and `HIO10G`(or `TGIO` which will be deprecated, represents 10-gigabit high IO).
        :param pulumi.Input[str] maintenance_end: Maintenance window end time.
               - The value range is any full point or half point from `00:00-23:00`, and the maintenance time duration is at least 30 minutes and at most 3 hours.
               - The end time must be based on the start time backwards.
        :param pulumi.Input[str] maintenance_start: Maintenance window start time. The value range is any full point or half point from `00:00-23:00`, such as 00:00 or 00:30.
        :param pulumi.Input[int] memory: Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        :param pulumi.Input[int] node_num: The number of nodes in each replica set. Default value: 3.
        :param pulumi.Input[str] password: Password of this Mongodb account.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[int] project_id: ID of the project which the instance belongs.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceRemoveNodeListArgs']]] remove_node_lists: Add node attribute list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of the security group.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceStandbyInstanceListArgs']]] standby_instance_lists: List of standby instances' info.
        :param pulumi.Input[int] status: Status of the Mongodb instance, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
        :param pulumi.Input[str] subnet_id: ID of the subnet within this VPC. The value is required if `vpc_id` is set.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the Mongodb. Key name `project` is system reserved and can't be used.
        :param pulumi.Input[str] vip: IP of the Mongodb instance.
        :param pulumi.Input[int] volume: Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        :param pulumi.Input[int] vport: IP port of the Mongodb instance.
        """
        if add_node_lists is not None:
            pulumi.set(__self__, "add_node_lists", add_node_lists)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if availability_zone_lists is not None:
            pulumi.set(__self__, "availability_zone_lists", availability_zone_lists)
        if available_zone is not None:
            pulumi.set(__self__, "available_zone", available_zone)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if hidden_zone is not None:
            pulumi.set(__self__, "hidden_zone", hidden_zone)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if maintenance_end is not None:
            pulumi.set(__self__, "maintenance_end", maintenance_end)
        if maintenance_start is not None:
            pulumi.set(__self__, "maintenance_start", maintenance_start)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if node_num is not None:
            pulumi.set(__self__, "node_num", node_num)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if remove_node_lists is not None:
            pulumi.set(__self__, "remove_node_lists", remove_node_lists)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if standby_instance_lists is not None:
            pulumi.set(__self__, "standby_instance_lists", standby_instance_lists)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="addNodeLists")
    def add_node_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddNodeListArgs']]]]:
        """
        Add node attribute list.
        """
        return pulumi.get(self, "add_node_lists")

    @add_node_lists.setter
    def add_node_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddNodeListArgs']]]]):
        pulumi.set(self, "add_node_lists", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="availabilityZoneLists")
    def availability_zone_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of nodes deployed in multiple availability zones. For more information, please use the API DescribeSpecInfo.
        - Multi-availability zone deployment nodes can only be deployed in 3 different availability zones. It is not supported to deploy most nodes of the cluster in the same availability zone. For example, a 3-node cluster does not support the deployment of 2 nodes in the same zone.
        - Version 4.2 and above are not supported.
        - Read-only disaster recovery instances are not supported.
        - Basic network cannot be selected.
        """
        return pulumi.get(self, "availability_zone_lists")

    @availability_zone_lists.setter
    def availability_zone_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "availability_zone_lists", value)

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The available zone of the Mongodb.
        """
        return pulumi.get(self, "available_zone")

    @available_zone.setter
    def available_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "available_zone", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of the Mongodb instance.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the Mongodb, and available values include `MONGO_36_WT` (MongoDB 3.6 WiredTiger Edition), `MONGO_40_WT` (MongoDB 4.0 WiredTiger Edition) and `MONGO_42_WT`  (MongoDB 4.2 WiredTiger Edition). NOTE: `MONGO_3_WT` (MongoDB 3.2 WiredTiger Edition) and `MONGO_3_ROCKS` (MongoDB 3.2 RocksDB Edition) will deprecated.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="hiddenZone")
    def hidden_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The availability zone to which the Hidden node belongs. This parameter must be configured to deploy instances across availability zones.
        """
        return pulumi.get(self, "hidden_zone")

    @hidden_zone.setter
    def hidden_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hidden_zone", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Mongodb instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Mongodb instance, and available values include `HIO`(or `GIO` which will be deprecated, represents high IO) and `HIO10G`(or `TGIO` which will be deprecated, represents 10-gigabit high IO).
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="maintenanceEnd")
    def maintenance_end(self) -> Optional[pulumi.Input[str]]:
        """
        Maintenance window end time.
        - The value range is any full point or half point from `00:00-23:00`, and the maintenance time duration is at least 30 minutes and at most 3 hours.
        - The end time must be based on the start time backwards.
        """
        return pulumi.get(self, "maintenance_end")

    @maintenance_end.setter
    def maintenance_end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_end", value)

    @property
    @pulumi.getter(name="maintenanceStart")
    def maintenance_start(self) -> Optional[pulumi.Input[str]]:
        """
        Maintenance window start time. The value range is any full point or half point from `00:00-23:00`, such as 00:00 or 00:30.
        """
        return pulumi.get(self, "maintenance_start")

    @maintenance_start.setter
    def maintenance_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_start", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes in each replica set. Default value: 3.
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_num", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of this Mongodb account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the project which the instance belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="removeNodeLists")
    def remove_node_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceRemoveNodeListArgs']]]]:
        """
        Add node attribute list.
        """
        return pulumi.get(self, "remove_node_lists")

    @remove_node_lists.setter
    def remove_node_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceRemoveNodeListArgs']]]]):
        pulumi.set(self, "remove_node_lists", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID of the security group.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="standbyInstanceLists")
    def standby_instance_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceStandbyInstanceListArgs']]]]:
        """
        List of standby instances' info.
        """
        return pulumi.get(self, "standby_instance_lists")

    @standby_instance_lists.setter
    def standby_instance_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceStandbyInstanceListArgs']]]]):
        pulumi.set(self, "standby_instance_lists", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Status of the Mongodb instance, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the subnet within this VPC. The value is required if `vpc_id` is set.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of the Mongodb. Key name `project` is system reserved and can't be used.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        IP of the Mongodb instance.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[int]]:
        """
        Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[int]]:
        """
        IP port of the Mongodb instance.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vport", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceAddNodeListArgs']]]]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 available_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 hidden_zone: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 maintenance_end: Optional[pulumi.Input[str]] = None,
                 maintenance_start: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 node_num: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 remove_node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceRemoveNodeListArgs']]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 volume: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to create a Mongodb instance.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        mongodb = tencentcloud.mongodb.Instance("mongodb",
            available_zone="ap-guangzhou-2",
            engine_version="MONGO_36_WT",
            instance_name="mongodb",
            machine_type="HIO10G",
            memory=4,
            password="password1234",
            project_id=0,
            subnet_id="subnet-xxxxxx",
            volume=100,
            vpc_id="vpc-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Mongodb instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mongodb/instance:Instance mongodb cmgo-41s6jwy4
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceAddNodeListArgs']]]] add_node_lists: Add node attribute list.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zone_lists: A list of nodes deployed in multiple availability zones. For more information, please use the API DescribeSpecInfo.
               - Multi-availability zone deployment nodes can only be deployed in 3 different availability zones. It is not supported to deploy most nodes of the cluster in the same availability zone. For example, a 3-node cluster does not support the deployment of 2 nodes in the same zone.
               - Version 4.2 and above are not supported.
               - Read-only disaster recovery instances are not supported.
               - Basic network cannot be selected.
        :param pulumi.Input[str] available_zone: The available zone of the Mongodb.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
        :param pulumi.Input[str] engine_version: Version of the Mongodb, and available values include `MONGO_36_WT` (MongoDB 3.6 WiredTiger Edition), `MONGO_40_WT` (MongoDB 4.0 WiredTiger Edition) and `MONGO_42_WT`  (MongoDB 4.2 WiredTiger Edition). NOTE: `MONGO_3_WT` (MongoDB 3.2 WiredTiger Edition) and `MONGO_3_ROCKS` (MongoDB 3.2 RocksDB Edition) will deprecated.
        :param pulumi.Input[str] hidden_zone: The availability zone to which the Hidden node belongs. This parameter must be configured to deploy instances across availability zones.
        :param pulumi.Input[str] instance_name: Name of the Mongodb instance.
        :param pulumi.Input[str] machine_type: Type of Mongodb instance, and available values include `HIO`(or `GIO` which will be deprecated, represents high IO) and `HIO10G`(or `TGIO` which will be deprecated, represents 10-gigabit high IO).
        :param pulumi.Input[str] maintenance_end: Maintenance window end time.
               - The value range is any full point or half point from `00:00-23:00`, and the maintenance time duration is at least 30 minutes and at most 3 hours.
               - The end time must be based on the start time backwards.
        :param pulumi.Input[str] maintenance_start: Maintenance window start time. The value range is any full point or half point from `00:00-23:00`, such as 00:00 or 00:30.
        :param pulumi.Input[int] memory: Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        :param pulumi.Input[int] node_num: The number of nodes in each replica set. Default value: 3.
        :param pulumi.Input[str] password: Password of this Mongodb account.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[int] project_id: ID of the project which the instance belongs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceRemoveNodeListArgs']]]] remove_node_lists: Add node attribute list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of the security group.
        :param pulumi.Input[str] subnet_id: ID of the subnet within this VPC. The value is required if `vpc_id` is set.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the Mongodb. Key name `project` is system reserved and can't be used.
        :param pulumi.Input[int] volume: Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a Mongodb instance.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        mongodb = tencentcloud.mongodb.Instance("mongodb",
            available_zone="ap-guangzhou-2",
            engine_version="MONGO_36_WT",
            instance_name="mongodb",
            machine_type="HIO10G",
            memory=4,
            password="password1234",
            project_id=0,
            subnet_id="subnet-xxxxxx",
            volume=100,
            vpc_id="vpc-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Mongodb instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mongodb/instance:Instance mongodb cmgo-41s6jwy4
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceAddNodeListArgs']]]]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 available_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 hidden_zone: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 maintenance_end: Optional[pulumi.Input[str]] = None,
                 maintenance_start: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 node_num: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 remove_node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceRemoveNodeListArgs']]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 volume: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["add_node_lists"] = add_node_lists
            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            __props__.__dict__["availability_zone_lists"] = availability_zone_lists
            if available_zone is None and not opts.urn:
                raise TypeError("Missing required property 'available_zone'")
            __props__.__dict__["available_zone"] = available_zone
            __props__.__dict__["charge_type"] = charge_type
            if engine_version is None and not opts.urn:
                raise TypeError("Missing required property 'engine_version'")
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["hidden_zone"] = hidden_zone
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            if machine_type is None and not opts.urn:
                raise TypeError("Missing required property 'machine_type'")
            __props__.__dict__["machine_type"] = machine_type
            __props__.__dict__["maintenance_end"] = maintenance_end
            __props__.__dict__["maintenance_start"] = maintenance_start
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            __props__.__dict__["node_num"] = node_num
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["prepaid_period"] = prepaid_period
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["remove_node_lists"] = remove_node_lists
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if volume is None and not opts.urn:
                raise TypeError("Missing required property 'volume'")
            __props__.__dict__["volume"] = volume
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["standby_instance_lists"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vip"] = None
            __props__.__dict__["vport"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'tencentcloud:Mongodb/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceAddNodeListArgs']]]]] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            availability_zone_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            available_zone: Optional[pulumi.Input[str]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            engine_version: Optional[pulumi.Input[str]] = None,
            hidden_zone: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            machine_type: Optional[pulumi.Input[str]] = None,
            maintenance_end: Optional[pulumi.Input[str]] = None,
            maintenance_start: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            node_num: Optional[pulumi.Input[int]] = None,
            password: Optional[pulumi.Input[str]] = None,
            prepaid_period: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            remove_node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceRemoveNodeListArgs']]]]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            standby_instance_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceStandbyInstanceListArgs']]]]] = None,
            status: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            volume: Optional[pulumi.Input[int]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vport: Optional[pulumi.Input[int]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceAddNodeListArgs']]]] add_node_lists: Add node attribute list.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zone_lists: A list of nodes deployed in multiple availability zones. For more information, please use the API DescribeSpecInfo.
               - Multi-availability zone deployment nodes can only be deployed in 3 different availability zones. It is not supported to deploy most nodes of the cluster in the same availability zone. For example, a 3-node cluster does not support the deployment of 2 nodes in the same zone.
               - Version 4.2 and above are not supported.
               - Read-only disaster recovery instances are not supported.
               - Basic network cannot be selected.
        :param pulumi.Input[str] available_zone: The available zone of the Mongodb.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
        :param pulumi.Input[str] create_time: Creation time of the Mongodb instance.
        :param pulumi.Input[str] engine_version: Version of the Mongodb, and available values include `MONGO_36_WT` (MongoDB 3.6 WiredTiger Edition), `MONGO_40_WT` (MongoDB 4.0 WiredTiger Edition) and `MONGO_42_WT`  (MongoDB 4.2 WiredTiger Edition). NOTE: `MONGO_3_WT` (MongoDB 3.2 WiredTiger Edition) and `MONGO_3_ROCKS` (MongoDB 3.2 RocksDB Edition) will deprecated.
        :param pulumi.Input[str] hidden_zone: The availability zone to which the Hidden node belongs. This parameter must be configured to deploy instances across availability zones.
        :param pulumi.Input[str] instance_name: Name of the Mongodb instance.
        :param pulumi.Input[str] machine_type: Type of Mongodb instance, and available values include `HIO`(or `GIO` which will be deprecated, represents high IO) and `HIO10G`(or `TGIO` which will be deprecated, represents 10-gigabit high IO).
        :param pulumi.Input[str] maintenance_end: Maintenance window end time.
               - The value range is any full point or half point from `00:00-23:00`, and the maintenance time duration is at least 30 minutes and at most 3 hours.
               - The end time must be based on the start time backwards.
        :param pulumi.Input[str] maintenance_start: Maintenance window start time. The value range is any full point or half point from `00:00-23:00`, such as 00:00 or 00:30.
        :param pulumi.Input[int] memory: Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        :param pulumi.Input[int] node_num: The number of nodes in each replica set. Default value: 3.
        :param pulumi.Input[str] password: Password of this Mongodb account.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[int] project_id: ID of the project which the instance belongs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceRemoveNodeListArgs']]]] remove_node_lists: Add node attribute list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of the security group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceStandbyInstanceListArgs']]]] standby_instance_lists: List of standby instances' info.
        :param pulumi.Input[int] status: Status of the Mongodb instance, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
        :param pulumi.Input[str] subnet_id: ID of the subnet within this VPC. The value is required if `vpc_id` is set.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the Mongodb. Key name `project` is system reserved and can't be used.
        :param pulumi.Input[str] vip: IP of the Mongodb instance.
        :param pulumi.Input[int] volume: Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        :param pulumi.Input[int] vport: IP port of the Mongodb instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["add_node_lists"] = add_node_lists
        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["availability_zone_lists"] = availability_zone_lists
        __props__.__dict__["available_zone"] = available_zone
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["hidden_zone"] = hidden_zone
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["machine_type"] = machine_type
        __props__.__dict__["maintenance_end"] = maintenance_end
        __props__.__dict__["maintenance_start"] = maintenance_start
        __props__.__dict__["memory"] = memory
        __props__.__dict__["node_num"] = node_num
        __props__.__dict__["password"] = password
        __props__.__dict__["prepaid_period"] = prepaid_period
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["remove_node_lists"] = remove_node_lists
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["standby_instance_lists"] = standby_instance_lists
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vip"] = vip
        __props__.__dict__["volume"] = volume
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vport"] = vport
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addNodeLists")
    def add_node_lists(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceAddNodeList']]]:
        """
        Add node attribute list.
        """
        return pulumi.get(self, "add_node_lists")

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="availabilityZoneLists")
    def availability_zone_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of nodes deployed in multiple availability zones. For more information, please use the API DescribeSpecInfo.
        - Multi-availability zone deployment nodes can only be deployed in 3 different availability zones. It is not supported to deploy most nodes of the cluster in the same availability zone. For example, a 3-node cluster does not support the deployment of 2 nodes in the same zone.
        - Version 4.2 and above are not supported.
        - Read-only disaster recovery instances are not supported.
        - Basic network cannot be selected.
        """
        return pulumi.get(self, "availability_zone_lists")

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> pulumi.Output[str]:
        """
        The available zone of the Mongodb.
        """
        return pulumi.get(self, "available_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time of the Mongodb instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[str]:
        """
        Version of the Mongodb, and available values include `MONGO_36_WT` (MongoDB 3.6 WiredTiger Edition), `MONGO_40_WT` (MongoDB 4.0 WiredTiger Edition) and `MONGO_42_WT`  (MongoDB 4.2 WiredTiger Edition). NOTE: `MONGO_3_WT` (MongoDB 3.2 WiredTiger Edition) and `MONGO_3_ROCKS` (MongoDB 3.2 RocksDB Edition) will deprecated.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="hiddenZone")
    def hidden_zone(self) -> pulumi.Output[str]:
        """
        The availability zone to which the Hidden node belongs. This parameter must be configured to deploy instances across availability zones.
        """
        return pulumi.get(self, "hidden_zone")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Name of the Mongodb instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[str]:
        """
        Type of Mongodb instance, and available values include `HIO`(or `GIO` which will be deprecated, represents high IO) and `HIO10G`(or `TGIO` which will be deprecated, represents 10-gigabit high IO).
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="maintenanceEnd")
    def maintenance_end(self) -> pulumi.Output[str]:
        """
        Maintenance window end time.
        - The value range is any full point or half point from `00:00-23:00`, and the maintenance time duration is at least 30 minutes and at most 3 hours.
        - The end time must be based on the start time backwards.
        """
        return pulumi.get(self, "maintenance_end")

    @property
    @pulumi.getter(name="maintenanceStart")
    def maintenance_start(self) -> pulumi.Output[str]:
        """
        Maintenance window start time. The value range is any full point or half point from `00:00-23:00`, such as 00:00 or 00:30.
        """
        return pulumi.get(self, "maintenance_start")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> pulumi.Output[int]:
        """
        The number of nodes in each replica set. Default value: 3.
        """
        return pulumi.get(self, "node_num")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password of this Mongodb account.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> pulumi.Output[Optional[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "prepaid_period")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the project which the instance belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="removeNodeLists")
    def remove_node_lists(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceRemoveNodeList']]]:
        """
        Add node attribute list.
        """
        return pulumi.get(self, "remove_node_lists")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ID of the security group.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="standbyInstanceLists")
    def standby_instance_lists(self) -> pulumi.Output[Sequence['outputs.InstanceStandbyInstanceList']]:
        """
        List of standby instances' info.
        """
        return pulumi.get(self, "standby_instance_lists")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Status of the Mongodb instance, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the subnet within this VPC. The value is required if `vpc_id` is set.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The tags of the Mongodb. Key name `project` is system reserved and can't be used.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        IP of the Mongodb instance.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Output[int]:
        """
        Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
        """
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> pulumi.Output[int]:
        """
        IP port of the Mongodb instance.
        """
        return pulumi.get(self, "vport")

