# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDedicatedClustersResult',
    'AwaitableGetDedicatedClustersResult',
    'get_dedicated_clusters',
    'get_dedicated_clusters_output',
]

@pulumi.output_type
class GetDedicatedClustersResult:
    """
    A collection of values returned by getDedicatedClusters.
    """
    def __init__(__self__, dedicated_cluster_sets=None, filters=None, id=None, result_output_file=None):
        if dedicated_cluster_sets and not isinstance(dedicated_cluster_sets, list):
            raise TypeError("Expected argument 'dedicated_cluster_sets' to be a list")
        pulumi.set(__self__, "dedicated_cluster_sets", dedicated_cluster_sets)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="dedicatedClusterSets")
    def dedicated_cluster_sets(self) -> Sequence['outputs.GetDedicatedClustersDedicatedClusterSetResult']:
        """
        Dedicated cluster set info.
        """
        return pulumi.get(self, "dedicated_cluster_sets")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetDedicatedClustersFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetDedicatedClustersResult(GetDedicatedClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDedicatedClustersResult(
            dedicated_cluster_sets=self.dedicated_cluster_sets,
            filters=self.filters,
            id=self.id,
            result_output_file=self.result_output_file)


def get_dedicated_clusters(filters: Optional[Sequence[pulumi.InputType['GetDedicatedClustersFilterArgs']]] = None,
                           result_output_file: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDedicatedClustersResult:
    """
    Use this data source to query detailed information of Postgresql dedicated clusters

    ## Example Usage

    ### Query all instances

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Postgresql.get_dedicated_clusters()
    ```
    <!--End PulumiCodeChooser -->

    ### Query instances by filters

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Postgresql.get_dedicated_clusters(filters=[tencentcloud.postgresql.GetDedicatedClustersFilterArgs(
        name="dedicated-cluster-id",
        values=["cluster-262n63e8"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetDedicatedClustersFilterArgs']] filters: Querying based on one or more filtering criteria, the currently supported filtering criteria are: dedicated-cluster-id: filtering by dedicated cluster ID.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Postgresql/getDedicatedClusters:getDedicatedClusters', __args__, opts=opts, typ=GetDedicatedClustersResult).value

    return AwaitableGetDedicatedClustersResult(
        dedicated_cluster_sets=pulumi.get(__ret__, 'dedicated_cluster_sets'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_dedicated_clusters)
def get_dedicated_clusters_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetDedicatedClustersFilterArgs']]]]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDedicatedClustersResult]:
    """
    Use this data source to query detailed information of Postgresql dedicated clusters

    ## Example Usage

    ### Query all instances

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Postgresql.get_dedicated_clusters()
    ```
    <!--End PulumiCodeChooser -->

    ### Query instances by filters

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Postgresql.get_dedicated_clusters(filters=[tencentcloud.postgresql.GetDedicatedClustersFilterArgs(
        name="dedicated-cluster-id",
        values=["cluster-262n63e8"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetDedicatedClustersFilterArgs']] filters: Querying based on one or more filtering criteria, the currently supported filtering criteria are: dedicated-cluster-id: filtering by dedicated cluster ID.
    :param str result_output_file: Used to save results.
    """
    ...
