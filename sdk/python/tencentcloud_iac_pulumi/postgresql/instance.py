# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[str],
                 memory: pulumi.Input[int],
                 root_password: pulumi.Input[str],
                 storage: pulumi.Input[int],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 backup_plan: Optional[pulumi.Input['InstanceBackupPlanArgs']] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_kernel_version: Optional[pulumi.Input[str]] = None,
                 db_major_version: Optional[pulumi.Input[str]] = None,
                 db_major_vesion: Optional[pulumi.Input[str]] = None,
                 db_node_sets: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDbNodeSetArgs']]]] = None,
                 delete_protection: Optional[pulumi.Input[bool]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 kms_region: Optional[pulumi.Input[str]] = None,
                 max_standby_archive_delay: Optional[pulumi.Input[int]] = None,
                 max_standby_streaming_delay: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_support_tde: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 public_access_switch: Optional[pulumi.Input[bool]] = None,
                 root_user: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] availability_zone: Availability zone. NOTE: This field could not be modified, please use `db_node_set` instead of modification. The changes on this field will be suppressed when using the `db_node_set`.
        :param pulumi.Input[int] memory: Memory size(in GB). Allowed value must be larger than `memory` that data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] root_password: Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        :param pulumi.Input[int] storage: Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] subnet_id: ID of subnet.
        :param pulumi.Input[str] vpc_id: ID of VPC.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
        :param pulumi.Input[int] auto_voucher: Whether to use voucher, `1` for enabled.
        :param pulumi.Input['InstanceBackupPlanArgs'] backup_plan: Specify DB backup plan.
        :param pulumi.Input[str] charge_type: Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
        :param pulumi.Input[str] charset: Charset of the root account. Valid values are `UTF8`,`LATIN1`.
        :param pulumi.Input[int] cpu: Number of CPU cores. Allowed value must be equal `cpu` that data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] db_kernel_version: PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
        :param pulumi.Input[str] db_major_version: PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        :param pulumi.Input[str] db_major_vesion: `db_major_vesion` will be deprecated, use `db_major_version` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceDbNodeSetArgs']]] db_node_sets: Specify instance node info for disaster migration.
        :param pulumi.Input[bool] delete_protection: Whether to enable instance deletion protection. Default: false.
        :param pulumi.Input[str] engine_version: Version of the postgresql database engine. Valid values: `10.4`, `10.17`, `10.23`, `11.8`, `11.12`, `11.22`, `12.4`, `12.7`, `12.18`, `13.3`, `14.2`, `14.11`, `15.1`, `16.0`.
        :param pulumi.Input[str] kms_key_id: KeyId of the custom key.
        :param pulumi.Input[str] kms_region: Region of the custom key.
        :param pulumi.Input[int] max_standby_archive_delay: max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
        :param pulumi.Input[int] max_standby_streaming_delay: max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
        :param pulumi.Input[str] name: Name of the postgresql instance.
        :param pulumi.Input[int] need_support_tde: Whether to support data transparent encryption, 1: yes, 0: no (default).
        :param pulumi.Input[int] period: Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
        :param pulumi.Input[int] project_id: Project id, default value is `0`.
        :param pulumi.Input[bool] public_access_switch: Indicates whether to enable the access to an instance from public network or not.
        :param pulumi.Input[str] root_user: Instance root account name. This parameter is optional, Default value is `root`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this postgresql.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Specify Voucher Ids if `auto_voucher` was `1`, only support using 1 vouchers for now.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "root_password", root_password)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if backup_plan is not None:
            pulumi.set(__self__, "backup_plan", backup_plan)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if charset is not None:
            pulumi.set(__self__, "charset", charset)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if db_kernel_version is not None:
            pulumi.set(__self__, "db_kernel_version", db_kernel_version)
        if db_major_version is not None:
            pulumi.set(__self__, "db_major_version", db_major_version)
        if db_major_vesion is not None:
            warnings.warn("""`db_major_vesion` will be deprecated, use `db_major_version` instead.""", DeprecationWarning)
            pulumi.log.warn("""db_major_vesion is deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.""")
        if db_major_vesion is not None:
            pulumi.set(__self__, "db_major_vesion", db_major_vesion)
        if db_node_sets is not None:
            pulumi.set(__self__, "db_node_sets", db_node_sets)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if kms_region is not None:
            pulumi.set(__self__, "kms_region", kms_region)
        if max_standby_archive_delay is not None:
            pulumi.set(__self__, "max_standby_archive_delay", max_standby_archive_delay)
        if max_standby_streaming_delay is not None:
            pulumi.set(__self__, "max_standby_streaming_delay", max_standby_streaming_delay)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_support_tde is not None:
            pulumi.set(__self__, "need_support_tde", need_support_tde)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if public_access_switch is not None:
            pulumi.set(__self__, "public_access_switch", public_access_switch)
        if root_user is not None:
            pulumi.set(__self__, "root_user", root_user)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if voucher_ids is not None:
            pulumi.set(__self__, "voucher_ids", voucher_ids)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[str]:
        """
        Availability zone. NOTE: This field could not be modified, please use `db_node_set` instead of modification. The changes on this field will be suppressed when using the `db_node_set`.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        """
        Memory size(in GB). Allowed value must be larger than `memory` that data source `postgresql_get_specinfos` provides.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> pulumi.Input[str]:
        """
        Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[int]:
        """
        Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `postgresql_get_specinfos` provides.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        ID of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        ID of VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to use voucher, `1` for enabled.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="backupPlan")
    def backup_plan(self) -> Optional[pulumi.Input['InstanceBackupPlanArgs']]:
        """
        Specify DB backup plan.
        """
        return pulumi.get(self, "backup_plan")

    @backup_plan.setter
    def backup_plan(self, value: Optional[pulumi.Input['InstanceBackupPlanArgs']]):
        pulumi.set(self, "backup_plan", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def charset(self) -> Optional[pulumi.Input[str]]:
        """
        Charset of the root account. Valid values are `UTF8`,`LATIN1`.
        """
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charset", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Number of CPU cores. Allowed value must be equal `cpu` that data source `postgresql_get_specinfos` provides.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="dbKernelVersion")
    def db_kernel_version(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
        """
        return pulumi.get(self, "db_kernel_version")

    @db_kernel_version.setter
    def db_kernel_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_kernel_version", value)

    @property
    @pulumi.getter(name="dbMajorVersion")
    def db_major_version(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        """
        return pulumi.get(self, "db_major_version")

    @db_major_version.setter
    def db_major_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_major_version", value)

    @property
    @pulumi.getter(name="dbMajorVesion")
    def db_major_vesion(self) -> Optional[pulumi.Input[str]]:
        """
        `db_major_vesion` will be deprecated, use `db_major_version` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        """
        warnings.warn("""`db_major_vesion` will be deprecated, use `db_major_version` instead.""", DeprecationWarning)
        pulumi.log.warn("""db_major_vesion is deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.""")

        return pulumi.get(self, "db_major_vesion")

    @db_major_vesion.setter
    def db_major_vesion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_major_vesion", value)

    @property
    @pulumi.getter(name="dbNodeSets")
    def db_node_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDbNodeSetArgs']]]]:
        """
        Specify instance node info for disaster migration.
        """
        return pulumi.get(self, "db_node_sets")

    @db_node_sets.setter
    def db_node_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDbNodeSetArgs']]]]):
        pulumi.set(self, "db_node_sets", value)

    @property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable instance deletion protection. Default: false.
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_protection", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the postgresql database engine. Valid values: `10.4`, `10.17`, `10.23`, `11.8`, `11.12`, `11.22`, `12.4`, `12.7`, `12.18`, `13.3`, `14.2`, `14.11`, `15.1`, `16.0`.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        KeyId of the custom key.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="kmsRegion")
    def kms_region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the custom key.
        """
        return pulumi.get(self, "kms_region")

    @kms_region.setter
    def kms_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_region", value)

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> Optional[pulumi.Input[int]]:
        """
        max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
        """
        return pulumi.get(self, "max_standby_archive_delay")

    @max_standby_archive_delay.setter
    def max_standby_archive_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_standby_archive_delay", value)

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> Optional[pulumi.Input[int]]:
        """
        max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
        """
        return pulumi.get(self, "max_standby_streaming_delay")

    @max_standby_streaming_delay.setter
    def max_standby_streaming_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_standby_streaming_delay", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the postgresql instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="needSupportTde")
    def need_support_tde(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to support data transparent encryption, 1: yes, 0: no (default).
        """
        return pulumi.get(self, "need_support_tde")

    @need_support_tde.setter
    def need_support_tde(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "need_support_tde", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project id, default value is `0`.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="publicAccessSwitch")
    def public_access_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to enable the access to an instance from public network or not.
        """
        return pulumi.get(self, "public_access_switch")

    @public_access_switch.setter
    def public_access_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_access_switch", value)

    @property
    @pulumi.getter(name="rootUser")
    def root_user(self) -> Optional[pulumi.Input[str]]:
        """
        Instance root account name. This parameter is optional, Default value is `root`.
        """
        return pulumi.get(self, "root_user")

    @root_user.setter
    def root_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_user", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The available tags within this postgresql.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify Voucher Ids if `auto_voucher` was `1`, only support using 1 vouchers for now.
        """
        return pulumi.get(self, "voucher_ids")

    @voucher_ids.setter
    def voucher_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "voucher_ids", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_plan: Optional[pulumi.Input['InstanceBackupPlanArgs']] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 db_kernel_version: Optional[pulumi.Input[str]] = None,
                 db_major_version: Optional[pulumi.Input[str]] = None,
                 db_major_vesion: Optional[pulumi.Input[str]] = None,
                 db_node_sets: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDbNodeSetArgs']]]] = None,
                 delete_protection: Optional[pulumi.Input[bool]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 kms_region: Optional[pulumi.Input[str]] = None,
                 max_standby_archive_delay: Optional[pulumi.Input[int]] = None,
                 max_standby_streaming_delay: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_support_tde: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 private_access_ip: Optional[pulumi.Input[str]] = None,
                 private_access_port: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 public_access_host: Optional[pulumi.Input[str]] = None,
                 public_access_port: Optional[pulumi.Input[int]] = None,
                 public_access_switch: Optional[pulumi.Input[bool]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 root_user: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 uid: Optional[pulumi.Input[int]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
        :param pulumi.Input[int] auto_voucher: Whether to use voucher, `1` for enabled.
        :param pulumi.Input[str] availability_zone: Availability zone. NOTE: This field could not be modified, please use `db_node_set` instead of modification. The changes on this field will be suppressed when using the `db_node_set`.
        :param pulumi.Input['InstanceBackupPlanArgs'] backup_plan: Specify DB backup plan.
        :param pulumi.Input[str] charge_type: Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
        :param pulumi.Input[str] charset: Charset of the root account. Valid values are `UTF8`,`LATIN1`.
        :param pulumi.Input[int] cpu: Number of CPU cores. Allowed value must be equal `cpu` that data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] create_time: Create time of the postgresql instance.
        :param pulumi.Input[str] db_kernel_version: PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
        :param pulumi.Input[str] db_major_version: PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        :param pulumi.Input[str] db_major_vesion: `db_major_vesion` will be deprecated, use `db_major_version` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceDbNodeSetArgs']]] db_node_sets: Specify instance node info for disaster migration.
        :param pulumi.Input[bool] delete_protection: Whether to enable instance deletion protection. Default: false.
        :param pulumi.Input[str] engine_version: Version of the postgresql database engine. Valid values: `10.4`, `10.17`, `10.23`, `11.8`, `11.12`, `11.22`, `12.4`, `12.7`, `12.18`, `13.3`, `14.2`, `14.11`, `15.1`, `16.0`.
        :param pulumi.Input[str] kms_key_id: KeyId of the custom key.
        :param pulumi.Input[str] kms_region: Region of the custom key.
        :param pulumi.Input[int] max_standby_archive_delay: max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
        :param pulumi.Input[int] max_standby_streaming_delay: max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
        :param pulumi.Input[int] memory: Memory size(in GB). Allowed value must be larger than `memory` that data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] name: Name of the postgresql instance.
        :param pulumi.Input[int] need_support_tde: Whether to support data transparent encryption, 1: yes, 0: no (default).
        :param pulumi.Input[int] period: Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
        :param pulumi.Input[str] private_access_ip: IP for private access.
        :param pulumi.Input[int] private_access_port: Port for private access.
        :param pulumi.Input[int] project_id: Project id, default value is `0`.
        :param pulumi.Input[str] public_access_host: Host for public access.
        :param pulumi.Input[int] public_access_port: Port for public access.
        :param pulumi.Input[bool] public_access_switch: Indicates whether to enable the access to an instance from public network or not.
        :param pulumi.Input[str] root_password: Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        :param pulumi.Input[str] root_user: Instance root account name. This parameter is optional, Default value is `root`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        :param pulumi.Input[int] storage: Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] subnet_id: ID of subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this postgresql.
        :param pulumi.Input[int] uid: Uid of the postgresql instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Specify Voucher Ids if `auto_voucher` was `1`, only support using 1 vouchers for now.
        :param pulumi.Input[str] vpc_id: ID of VPC.
        """
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if backup_plan is not None:
            pulumi.set(__self__, "backup_plan", backup_plan)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if charset is not None:
            pulumi.set(__self__, "charset", charset)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if db_kernel_version is not None:
            pulumi.set(__self__, "db_kernel_version", db_kernel_version)
        if db_major_version is not None:
            pulumi.set(__self__, "db_major_version", db_major_version)
        if db_major_vesion is not None:
            warnings.warn("""`db_major_vesion` will be deprecated, use `db_major_version` instead.""", DeprecationWarning)
            pulumi.log.warn("""db_major_vesion is deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.""")
        if db_major_vesion is not None:
            pulumi.set(__self__, "db_major_vesion", db_major_vesion)
        if db_node_sets is not None:
            pulumi.set(__self__, "db_node_sets", db_node_sets)
        if delete_protection is not None:
            pulumi.set(__self__, "delete_protection", delete_protection)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if kms_region is not None:
            pulumi.set(__self__, "kms_region", kms_region)
        if max_standby_archive_delay is not None:
            pulumi.set(__self__, "max_standby_archive_delay", max_standby_archive_delay)
        if max_standby_streaming_delay is not None:
            pulumi.set(__self__, "max_standby_streaming_delay", max_standby_streaming_delay)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_support_tde is not None:
            pulumi.set(__self__, "need_support_tde", need_support_tde)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if private_access_ip is not None:
            pulumi.set(__self__, "private_access_ip", private_access_ip)
        if private_access_port is not None:
            pulumi.set(__self__, "private_access_port", private_access_port)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if public_access_host is not None:
            pulumi.set(__self__, "public_access_host", public_access_host)
        if public_access_port is not None:
            pulumi.set(__self__, "public_access_port", public_access_port)
        if public_access_switch is not None:
            pulumi.set(__self__, "public_access_switch", public_access_switch)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if root_user is not None:
            pulumi.set(__self__, "root_user", root_user)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if voucher_ids is not None:
            pulumi.set(__self__, "voucher_ids", voucher_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to use voucher, `1` for enabled.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone. NOTE: This field could not be modified, please use `db_node_set` instead of modification. The changes on this field will be suppressed when using the `db_node_set`.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="backupPlan")
    def backup_plan(self) -> Optional[pulumi.Input['InstanceBackupPlanArgs']]:
        """
        Specify DB backup plan.
        """
        return pulumi.get(self, "backup_plan")

    @backup_plan.setter
    def backup_plan(self, value: Optional[pulumi.Input['InstanceBackupPlanArgs']]):
        pulumi.set(self, "backup_plan", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def charset(self) -> Optional[pulumi.Input[str]]:
        """
        Charset of the root account. Valid values are `UTF8`,`LATIN1`.
        """
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charset", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Number of CPU cores. Allowed value must be equal `cpu` that data source `postgresql_get_specinfos` provides.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the postgresql instance.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dbKernelVersion")
    def db_kernel_version(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
        """
        return pulumi.get(self, "db_kernel_version")

    @db_kernel_version.setter
    def db_kernel_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_kernel_version", value)

    @property
    @pulumi.getter(name="dbMajorVersion")
    def db_major_version(self) -> Optional[pulumi.Input[str]]:
        """
        PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        """
        return pulumi.get(self, "db_major_version")

    @db_major_version.setter
    def db_major_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_major_version", value)

    @property
    @pulumi.getter(name="dbMajorVesion")
    def db_major_vesion(self) -> Optional[pulumi.Input[str]]:
        """
        `db_major_vesion` will be deprecated, use `db_major_version` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        """
        warnings.warn("""`db_major_vesion` will be deprecated, use `db_major_version` instead.""", DeprecationWarning)
        pulumi.log.warn("""db_major_vesion is deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.""")

        return pulumi.get(self, "db_major_vesion")

    @db_major_vesion.setter
    def db_major_vesion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_major_vesion", value)

    @property
    @pulumi.getter(name="dbNodeSets")
    def db_node_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDbNodeSetArgs']]]]:
        """
        Specify instance node info for disaster migration.
        """
        return pulumi.get(self, "db_node_sets")

    @db_node_sets.setter
    def db_node_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDbNodeSetArgs']]]]):
        pulumi.set(self, "db_node_sets", value)

    @property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable instance deletion protection. Default: false.
        """
        return pulumi.get(self, "delete_protection")

    @delete_protection.setter
    def delete_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_protection", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the postgresql database engine. Valid values: `10.4`, `10.17`, `10.23`, `11.8`, `11.12`, `11.22`, `12.4`, `12.7`, `12.18`, `13.3`, `14.2`, `14.11`, `15.1`, `16.0`.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        KeyId of the custom key.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="kmsRegion")
    def kms_region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the custom key.
        """
        return pulumi.get(self, "kms_region")

    @kms_region.setter
    def kms_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_region", value)

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> Optional[pulumi.Input[int]]:
        """
        max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
        """
        return pulumi.get(self, "max_standby_archive_delay")

    @max_standby_archive_delay.setter
    def max_standby_archive_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_standby_archive_delay", value)

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> Optional[pulumi.Input[int]]:
        """
        max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
        """
        return pulumi.get(self, "max_standby_streaming_delay")

    @max_standby_streaming_delay.setter
    def max_standby_streaming_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_standby_streaming_delay", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size(in GB). Allowed value must be larger than `memory` that data source `postgresql_get_specinfos` provides.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the postgresql instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="needSupportTde")
    def need_support_tde(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to support data transparent encryption, 1: yes, 0: no (default).
        """
        return pulumi.get(self, "need_support_tde")

    @need_support_tde.setter
    def need_support_tde(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "need_support_tde", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="privateAccessIp")
    def private_access_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP for private access.
        """
        return pulumi.get(self, "private_access_ip")

    @private_access_ip.setter
    def private_access_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_access_ip", value)

    @property
    @pulumi.getter(name="privateAccessPort")
    def private_access_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for private access.
        """
        return pulumi.get(self, "private_access_port")

    @private_access_port.setter
    def private_access_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "private_access_port", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project id, default value is `0`.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="publicAccessHost")
    def public_access_host(self) -> Optional[pulumi.Input[str]]:
        """
        Host for public access.
        """
        return pulumi.get(self, "public_access_host")

    @public_access_host.setter
    def public_access_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_access_host", value)

    @property
    @pulumi.getter(name="publicAccessPort")
    def public_access_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for public access.
        """
        return pulumi.get(self, "public_access_port")

    @public_access_port.setter
    def public_access_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "public_access_port", value)

    @property
    @pulumi.getter(name="publicAccessSwitch")
    def public_access_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to enable the access to an instance from public network or not.
        """
        return pulumi.get(self, "public_access_switch")

    @public_access_switch.setter
    def public_access_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_access_switch", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="rootUser")
    def root_user(self) -> Optional[pulumi.Input[str]]:
        """
        Instance root account name. This parameter is optional, Default value is `root`.
        """
        return pulumi.get(self, "root_user")

    @root_user.setter
    def root_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_user", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        """
        Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `postgresql_get_specinfos` provides.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The available tags within this postgresql.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[int]]:
        """
        Uid of the postgresql instance.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify Voucher Ids if `auto_voucher` was `1`, only support using 1 vouchers for now.
        """
        return pulumi.get(self, "voucher_ids")

    @voucher_ids.setter
    def voucher_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "voucher_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_plan: Optional[pulumi.Input[pulumi.InputType['InstanceBackupPlanArgs']]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_kernel_version: Optional[pulumi.Input[str]] = None,
                 db_major_version: Optional[pulumi.Input[str]] = None,
                 db_major_vesion: Optional[pulumi.Input[str]] = None,
                 db_node_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceDbNodeSetArgs']]]]] = None,
                 delete_protection: Optional[pulumi.Input[bool]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 kms_region: Optional[pulumi.Input[str]] = None,
                 max_standby_archive_delay: Optional[pulumi.Input[int]] = None,
                 max_standby_streaming_delay: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_support_tde: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 public_access_switch: Optional[pulumi.Input[bool]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 root_user: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to create postgresql instance.

        > **Note:** To update the charge type, please update the `charge_type` and specify the `period` for the charging period. It only supports updating from `POSTPAID_BY_HOUR` to `PREPAID`, and the `period` field only valid in that upgrading case.

        > **Note:** If no values are set for the two parameters: `db_major_version` and `engine_version`, then `engine_version` is set to `10.4` by default. Suggest using parameter `db_major_version` to create an instance

        ## Example Usage

        ### Create a postgresql instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create postgresql
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_major_version="10",
            engine_version="10.23",
            root_user="root123",
            root_password="Root123$",
            charset="UTF8",
            project_id=0,
            cpu=1,
            memory=2,
            storage=10,
            tags={
                "test": "tf",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a postgresql instance with delete protection

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create postgresql
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_major_version="10",
            engine_version="10.23",
            root_user="root123",
            root_password="Root123$",
            charset="UTF8",
            project_id=0,
            cpu=1,
            memory=2,
            storage=10,
            delete_protection=True,
            tags={
                "test": "tf",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a multi available zone postgresql instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        standby_availability_zone = config.get("standbyAvailabilityZone")
        if standby_availability_zone is None:
            standby_availability_zone = "ap-guangzhou-7"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create postgresql
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_major_version="10",
            root_user="root123",
            root_password="Root123$",
            charset="UTF8",
            project_id=0,
            memory=2,
            cpu=1,
            storage=10,
            db_node_sets=[
                tencentcloud.postgresql.InstanceDbNodeSetArgs(
                    role="Primary",
                    zone=availability_zone,
                ),
                tencentcloud.postgresql.InstanceDbNodeSetArgs(
                    zone=standby_availability_zone,
                ),
            ],
            tags={
                "test": "tf",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a multi available zone postgresql instance of CDC

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create postgresql
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_major_version="10",
            root_user="root123",
            root_password="Root123$",
            charset="UTF8",
            project_id=0,
            memory=2,
            cpu=1,
            storage=10,
            db_node_sets=[
                tencentcloud.postgresql.InstanceDbNodeSetArgs(
                    role="Primary",
                    zone=availability_zone,
                    dedicated_cluster_id="cluster-262n63e8",
                ),
                tencentcloud.postgresql.InstanceDbNodeSetArgs(
                    zone=availability_zone,
                    dedicated_cluster_id="cluster-262n63e8",
                ),
            ],
            tags={
                "CreateBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create pgsql with kms key

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id="vpc-86v957zb",
            subnet_id="subnet-enm92y0m",
            db_major_version="11",
            engine_version="11.12",
            db_kernel_version="v11.12_r1.3",
            need_support_tde=1,
            kms_key_id="788c606a-c7b7-11ec-82d1-5254001e5c4e",
            kms_region="ap-guangzhou",
            root_password="Root123$",
            charset="LATIN1",
            project_id=0,
            memory=4,
            storage=100,
            backup_plan=tencentcloud.postgresql.InstanceBackupPlanArgs(
                min_backup_start_time="00:10:11",
                max_backup_start_time="01:10:11",
                base_backup_retention_period=7,
                backup_periods=[
                    "tuesday",
                    "wednesday",
                ],
            ),
            tags={
                "tf": "test",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Upgrade kernel version

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id="vpc-86v957zb",
            subnet_id="subnet-enm92y0m",
            engine_version="13.3",
            root_password="Root123$",
            charset="LATIN1",
            project_id=0,
            public_access_switch=False,
            security_groups=["sg-cm7fbbf3"],
            memory=4,
            storage=250,
            backup_plan=tencentcloud.postgresql.InstanceBackupPlanArgs(
                min_backup_start_time="01:10:11",
                max_backup_start_time="02:10:11",
                base_backup_retention_period=5,
                backup_periods=[
                    "monday",
                    "thursday",
                    "sunday",
                ],
            ),
            db_kernel_version="v13.3_r1.4",
            tags={
                "tf": "test",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        postgresql instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Postgresql/instance:Instance example postgres-cda1iex1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
        :param pulumi.Input[int] auto_voucher: Whether to use voucher, `1` for enabled.
        :param pulumi.Input[str] availability_zone: Availability zone. NOTE: This field could not be modified, please use `db_node_set` instead of modification. The changes on this field will be suppressed when using the `db_node_set`.
        :param pulumi.Input[pulumi.InputType['InstanceBackupPlanArgs']] backup_plan: Specify DB backup plan.
        :param pulumi.Input[str] charge_type: Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
        :param pulumi.Input[str] charset: Charset of the root account. Valid values are `UTF8`,`LATIN1`.
        :param pulumi.Input[int] cpu: Number of CPU cores. Allowed value must be equal `cpu` that data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] db_kernel_version: PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
        :param pulumi.Input[str] db_major_version: PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        :param pulumi.Input[str] db_major_vesion: `db_major_vesion` will be deprecated, use `db_major_version` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceDbNodeSetArgs']]]] db_node_sets: Specify instance node info for disaster migration.
        :param pulumi.Input[bool] delete_protection: Whether to enable instance deletion protection. Default: false.
        :param pulumi.Input[str] engine_version: Version of the postgresql database engine. Valid values: `10.4`, `10.17`, `10.23`, `11.8`, `11.12`, `11.22`, `12.4`, `12.7`, `12.18`, `13.3`, `14.2`, `14.11`, `15.1`, `16.0`.
        :param pulumi.Input[str] kms_key_id: KeyId of the custom key.
        :param pulumi.Input[str] kms_region: Region of the custom key.
        :param pulumi.Input[int] max_standby_archive_delay: max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
        :param pulumi.Input[int] max_standby_streaming_delay: max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
        :param pulumi.Input[int] memory: Memory size(in GB). Allowed value must be larger than `memory` that data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] name: Name of the postgresql instance.
        :param pulumi.Input[int] need_support_tde: Whether to support data transparent encryption, 1: yes, 0: no (default).
        :param pulumi.Input[int] period: Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
        :param pulumi.Input[int] project_id: Project id, default value is `0`.
        :param pulumi.Input[bool] public_access_switch: Indicates whether to enable the access to an instance from public network or not.
        :param pulumi.Input[str] root_password: Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        :param pulumi.Input[str] root_user: Instance root account name. This parameter is optional, Default value is `root`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        :param pulumi.Input[int] storage: Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] subnet_id: ID of subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this postgresql.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Specify Voucher Ids if `auto_voucher` was `1`, only support using 1 vouchers for now.
        :param pulumi.Input[str] vpc_id: ID of VPC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create postgresql instance.

        > **Note:** To update the charge type, please update the `charge_type` and specify the `period` for the charging period. It only supports updating from `POSTPAID_BY_HOUR` to `PREPAID`, and the `period` field only valid in that upgrading case.

        > **Note:** If no values are set for the two parameters: `db_major_version` and `engine_version`, then `engine_version` is set to `10.4` by default. Suggest using parameter `db_major_version` to create an instance

        ## Example Usage

        ### Create a postgresql instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create postgresql
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_major_version="10",
            engine_version="10.23",
            root_user="root123",
            root_password="Root123$",
            charset="UTF8",
            project_id=0,
            cpu=1,
            memory=2,
            storage=10,
            tags={
                "test": "tf",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a postgresql instance with delete protection

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create postgresql
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_major_version="10",
            engine_version="10.23",
            root_user="root123",
            root_password="Root123$",
            charset="UTF8",
            project_id=0,
            cpu=1,
            memory=2,
            storage=10,
            delete_protection=True,
            tags={
                "test": "tf",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a multi available zone postgresql instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        standby_availability_zone = config.get("standbyAvailabilityZone")
        if standby_availability_zone is None:
            standby_availability_zone = "ap-guangzhou-7"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create postgresql
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_major_version="10",
            root_user="root123",
            root_password="Root123$",
            charset="UTF8",
            project_id=0,
            memory=2,
            cpu=1,
            storage=10,
            db_node_sets=[
                tencentcloud.postgresql.InstanceDbNodeSetArgs(
                    role="Primary",
                    zone=availability_zone,
                ),
                tencentcloud.postgresql.InstanceDbNodeSetArgs(
                    zone=standby_availability_zone,
                ),
            ],
            tags={
                "test": "tf",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a multi available zone postgresql instance of CDC

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create postgresql
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_major_version="10",
            root_user="root123",
            root_password="Root123$",
            charset="UTF8",
            project_id=0,
            memory=2,
            cpu=1,
            storage=10,
            db_node_sets=[
                tencentcloud.postgresql.InstanceDbNodeSetArgs(
                    role="Primary",
                    zone=availability_zone,
                    dedicated_cluster_id="cluster-262n63e8",
                ),
                tencentcloud.postgresql.InstanceDbNodeSetArgs(
                    zone=availability_zone,
                    dedicated_cluster_id="cluster-262n63e8",
                ),
            ],
            tags={
                "CreateBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create pgsql with kms key

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id="vpc-86v957zb",
            subnet_id="subnet-enm92y0m",
            db_major_version="11",
            engine_version="11.12",
            db_kernel_version="v11.12_r1.3",
            need_support_tde=1,
            kms_key_id="788c606a-c7b7-11ec-82d1-5254001e5c4e",
            kms_region="ap-guangzhou",
            root_password="Root123$",
            charset="LATIN1",
            project_id=0,
            memory=4,
            storage=100,
            backup_plan=tencentcloud.postgresql.InstanceBackupPlanArgs(
                min_backup_start_time="00:10:11",
                max_backup_start_time="01:10:11",
                base_backup_retention_period=7,
                backup_periods=[
                    "tuesday",
                    "wednesday",
                ],
            ),
            tags={
                "tf": "test",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Upgrade kernel version

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        example = tencentcloud.postgresql.Instance("example",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id="vpc-86v957zb",
            subnet_id="subnet-enm92y0m",
            engine_version="13.3",
            root_password="Root123$",
            charset="LATIN1",
            project_id=0,
            public_access_switch=False,
            security_groups=["sg-cm7fbbf3"],
            memory=4,
            storage=250,
            backup_plan=tencentcloud.postgresql.InstanceBackupPlanArgs(
                min_backup_start_time="01:10:11",
                max_backup_start_time="02:10:11",
                base_backup_retention_period=5,
                backup_periods=[
                    "monday",
                    "thursday",
                    "sunday",
                ],
            ),
            db_kernel_version="v13.3_r1.4",
            tags={
                "tf": "test",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        postgresql instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Postgresql/instance:Instance example postgres-cda1iex1
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_plan: Optional[pulumi.Input[pulumi.InputType['InstanceBackupPlanArgs']]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_kernel_version: Optional[pulumi.Input[str]] = None,
                 db_major_version: Optional[pulumi.Input[str]] = None,
                 db_major_vesion: Optional[pulumi.Input[str]] = None,
                 db_node_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceDbNodeSetArgs']]]]] = None,
                 delete_protection: Optional[pulumi.Input[bool]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 kms_region: Optional[pulumi.Input[str]] = None,
                 max_standby_archive_delay: Optional[pulumi.Input[int]] = None,
                 max_standby_streaming_delay: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_support_tde: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 public_access_switch: Optional[pulumi.Input[bool]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 root_user: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            __props__.__dict__["auto_voucher"] = auto_voucher
            if availability_zone is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone'")
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["backup_plan"] = backup_plan
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["charset"] = charset
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["db_kernel_version"] = db_kernel_version
            __props__.__dict__["db_major_version"] = db_major_version
            __props__.__dict__["db_major_vesion"] = db_major_vesion
            __props__.__dict__["db_node_sets"] = db_node_sets
            __props__.__dict__["delete_protection"] = delete_protection
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["kms_key_id"] = kms_key_id
            __props__.__dict__["kms_region"] = kms_region
            __props__.__dict__["max_standby_archive_delay"] = max_standby_archive_delay
            __props__.__dict__["max_standby_streaming_delay"] = max_standby_streaming_delay
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            __props__.__dict__["name"] = name
            __props__.__dict__["need_support_tde"] = need_support_tde
            __props__.__dict__["period"] = period
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["public_access_switch"] = public_access_switch
            if root_password is None and not opts.urn:
                raise TypeError("Missing required property 'root_password'")
            __props__.__dict__["root_password"] = None if root_password is None else pulumi.Output.secret(root_password)
            __props__.__dict__["root_user"] = root_user
            __props__.__dict__["security_groups"] = security_groups
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["voucher_ids"] = voucher_ids
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["private_access_ip"] = None
            __props__.__dict__["private_access_port"] = None
            __props__.__dict__["public_access_host"] = None
            __props__.__dict__["public_access_port"] = None
            __props__.__dict__["uid"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["rootPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'tencentcloud:Postgresql/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            auto_voucher: Optional[pulumi.Input[int]] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            backup_plan: Optional[pulumi.Input[pulumi.InputType['InstanceBackupPlanArgs']]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            charset: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            db_kernel_version: Optional[pulumi.Input[str]] = None,
            db_major_version: Optional[pulumi.Input[str]] = None,
            db_major_vesion: Optional[pulumi.Input[str]] = None,
            db_node_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceDbNodeSetArgs']]]]] = None,
            delete_protection: Optional[pulumi.Input[bool]] = None,
            engine_version: Optional[pulumi.Input[str]] = None,
            kms_key_id: Optional[pulumi.Input[str]] = None,
            kms_region: Optional[pulumi.Input[str]] = None,
            max_standby_archive_delay: Optional[pulumi.Input[int]] = None,
            max_standby_streaming_delay: Optional[pulumi.Input[int]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            need_support_tde: Optional[pulumi.Input[int]] = None,
            period: Optional[pulumi.Input[int]] = None,
            private_access_ip: Optional[pulumi.Input[str]] = None,
            private_access_port: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            public_access_host: Optional[pulumi.Input[str]] = None,
            public_access_port: Optional[pulumi.Input[int]] = None,
            public_access_switch: Optional[pulumi.Input[bool]] = None,
            root_password: Optional[pulumi.Input[str]] = None,
            root_user: Optional[pulumi.Input[str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            storage: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            uid: Optional[pulumi.Input[int]] = None,
            voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
        :param pulumi.Input[int] auto_voucher: Whether to use voucher, `1` for enabled.
        :param pulumi.Input[str] availability_zone: Availability zone. NOTE: This field could not be modified, please use `db_node_set` instead of modification. The changes on this field will be suppressed when using the `db_node_set`.
        :param pulumi.Input[pulumi.InputType['InstanceBackupPlanArgs']] backup_plan: Specify DB backup plan.
        :param pulumi.Input[str] charge_type: Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
        :param pulumi.Input[str] charset: Charset of the root account. Valid values are `UTF8`,`LATIN1`.
        :param pulumi.Input[int] cpu: Number of CPU cores. Allowed value must be equal `cpu` that data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] create_time: Create time of the postgresql instance.
        :param pulumi.Input[str] db_kernel_version: PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
        :param pulumi.Input[str] db_major_version: PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        :param pulumi.Input[str] db_major_vesion: `db_major_vesion` will be deprecated, use `db_major_version` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceDbNodeSetArgs']]]] db_node_sets: Specify instance node info for disaster migration.
        :param pulumi.Input[bool] delete_protection: Whether to enable instance deletion protection. Default: false.
        :param pulumi.Input[str] engine_version: Version of the postgresql database engine. Valid values: `10.4`, `10.17`, `10.23`, `11.8`, `11.12`, `11.22`, `12.4`, `12.7`, `12.18`, `13.3`, `14.2`, `14.11`, `15.1`, `16.0`.
        :param pulumi.Input[str] kms_key_id: KeyId of the custom key.
        :param pulumi.Input[str] kms_region: Region of the custom key.
        :param pulumi.Input[int] max_standby_archive_delay: max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
        :param pulumi.Input[int] max_standby_streaming_delay: max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
        :param pulumi.Input[int] memory: Memory size(in GB). Allowed value must be larger than `memory` that data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] name: Name of the postgresql instance.
        :param pulumi.Input[int] need_support_tde: Whether to support data transparent encryption, 1: yes, 0: no (default).
        :param pulumi.Input[int] period: Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
        :param pulumi.Input[str] private_access_ip: IP for private access.
        :param pulumi.Input[int] private_access_port: Port for private access.
        :param pulumi.Input[int] project_id: Project id, default value is `0`.
        :param pulumi.Input[str] public_access_host: Host for public access.
        :param pulumi.Input[int] public_access_port: Port for public access.
        :param pulumi.Input[bool] public_access_switch: Indicates whether to enable the access to an instance from public network or not.
        :param pulumi.Input[str] root_password: Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        :param pulumi.Input[str] root_user: Instance root account name. This parameter is optional, Default value is `root`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        :param pulumi.Input[int] storage: Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `postgresql_get_specinfos` provides.
        :param pulumi.Input[str] subnet_id: ID of subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this postgresql.
        :param pulumi.Input[int] uid: Uid of the postgresql instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Specify Voucher Ids if `auto_voucher` was `1`, only support using 1 vouchers for now.
        :param pulumi.Input[str] vpc_id: ID of VPC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["auto_voucher"] = auto_voucher
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["backup_plan"] = backup_plan
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["charset"] = charset
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["db_kernel_version"] = db_kernel_version
        __props__.__dict__["db_major_version"] = db_major_version
        __props__.__dict__["db_major_vesion"] = db_major_vesion
        __props__.__dict__["db_node_sets"] = db_node_sets
        __props__.__dict__["delete_protection"] = delete_protection
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["kms_key_id"] = kms_key_id
        __props__.__dict__["kms_region"] = kms_region
        __props__.__dict__["max_standby_archive_delay"] = max_standby_archive_delay
        __props__.__dict__["max_standby_streaming_delay"] = max_standby_streaming_delay
        __props__.__dict__["memory"] = memory
        __props__.__dict__["name"] = name
        __props__.__dict__["need_support_tde"] = need_support_tde
        __props__.__dict__["period"] = period
        __props__.__dict__["private_access_ip"] = private_access_ip
        __props__.__dict__["private_access_port"] = private_access_port
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["public_access_host"] = public_access_host
        __props__.__dict__["public_access_port"] = public_access_port
        __props__.__dict__["public_access_switch"] = public_access_switch
        __props__.__dict__["root_password"] = root_password
        __props__.__dict__["root_user"] = root_user
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["storage"] = storage
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["uid"] = uid
        __props__.__dict__["voucher_ids"] = voucher_ids
        __props__.__dict__["vpc_id"] = vpc_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to use voucher, `1` for enabled.
        """
        return pulumi.get(self, "auto_voucher")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        """
        Availability zone. NOTE: This field could not be modified, please use `db_node_set` instead of modification. The changes on this field will be suppressed when using the `db_node_set`.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="backupPlan")
    def backup_plan(self) -> pulumi.Output['outputs.InstanceBackupPlan']:
        """
        Specify DB backup plan.
        """
        return pulumi.get(self, "backup_plan")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def charset(self) -> pulumi.Output[Optional[str]]:
        """
        Charset of the root account. Valid values are `UTF8`,`LATIN1`.
        """
        return pulumi.get(self, "charset")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        Number of CPU cores. Allowed value must be equal `cpu` that data source `postgresql_get_specinfos` provides.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of the postgresql instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbKernelVersion")
    def db_kernel_version(self) -> pulumi.Output[str]:
        """
        PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
        """
        return pulumi.get(self, "db_kernel_version")

    @property
    @pulumi.getter(name="dbMajorVersion")
    def db_major_version(self) -> pulumi.Output[str]:
        """
        PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        """
        return pulumi.get(self, "db_major_version")

    @property
    @pulumi.getter(name="dbMajorVesion")
    def db_major_vesion(self) -> pulumi.Output[str]:
        """
        `db_major_vesion` will be deprecated, use `db_major_version` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13, 14, 15, 16. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
        """
        warnings.warn("""`db_major_vesion` will be deprecated, use `db_major_version` instead.""", DeprecationWarning)
        pulumi.log.warn("""db_major_vesion is deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.""")

        return pulumi.get(self, "db_major_vesion")

    @property
    @pulumi.getter(name="dbNodeSets")
    def db_node_sets(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceDbNodeSet']]]:
        """
        Specify instance node info for disaster migration.
        """
        return pulumi.get(self, "db_node_sets")

    @property
    @pulumi.getter(name="deleteProtection")
    def delete_protection(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable instance deletion protection. Default: false.
        """
        return pulumi.get(self, "delete_protection")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[str]:
        """
        Version of the postgresql database engine. Valid values: `10.4`, `10.17`, `10.23`, `11.8`, `11.12`, `11.22`, `12.4`, `12.7`, `12.18`, `13.3`, `14.2`, `14.11`, `15.1`, `16.0`.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[str]:
        """
        KeyId of the custom key.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="kmsRegion")
    def kms_region(self) -> pulumi.Output[str]:
        """
        Region of the custom key.
        """
        return pulumi.get(self, "kms_region")

    @property
    @pulumi.getter(name="maxStandbyArchiveDelay")
    def max_standby_archive_delay(self) -> pulumi.Output[int]:
        """
        max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
        """
        return pulumi.get(self, "max_standby_archive_delay")

    @property
    @pulumi.getter(name="maxStandbyStreamingDelay")
    def max_standby_streaming_delay(self) -> pulumi.Output[int]:
        """
        max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
        """
        return pulumi.get(self, "max_standby_streaming_delay")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        Memory size(in GB). Allowed value must be larger than `memory` that data source `postgresql_get_specinfos` provides.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the postgresql instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="needSupportTde")
    def need_support_tde(self) -> pulumi.Output[int]:
        """
        Whether to support data transparent encryption, 1: yes, 0: no (default).
        """
        return pulumi.get(self, "need_support_tde")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="privateAccessIp")
    def private_access_ip(self) -> pulumi.Output[str]:
        """
        IP for private access.
        """
        return pulumi.get(self, "private_access_ip")

    @property
    @pulumi.getter(name="privateAccessPort")
    def private_access_port(self) -> pulumi.Output[int]:
        """
        Port for private access.
        """
        return pulumi.get(self, "private_access_port")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        Project id, default value is `0`.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="publicAccessHost")
    def public_access_host(self) -> pulumi.Output[str]:
        """
        Host for public access.
        """
        return pulumi.get(self, "public_access_host")

    @property
    @pulumi.getter(name="publicAccessPort")
    def public_access_port(self) -> pulumi.Output[int]:
        """
        Port for public access.
        """
        return pulumi.get(self, "public_access_port")

    @property
    @pulumi.getter(name="publicAccessSwitch")
    def public_access_switch(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether to enable the access to an instance from public network or not.
        """
        return pulumi.get(self, "public_access_switch")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> pulumi.Output[str]:
        """
        Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        """
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter(name="rootUser")
    def root_user(self) -> pulumi.Output[Optional[str]]:
        """
        Instance root account name. This parameter is optional, Default value is `root`.
        """
        return pulumi.get(self, "root_user")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[int]:
        """
        Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `postgresql_get_specinfos` provides.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        ID of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The available tags within this postgresql.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[int]:
        """
        Uid of the postgresql instance.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specify Voucher Ids if `auto_voucher` was `1`, only support using 1 vouchers for now.
        """
        return pulumi.get(self, "voucher_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of VPC.
        """
        return pulumi.get(self, "vpc_id")

