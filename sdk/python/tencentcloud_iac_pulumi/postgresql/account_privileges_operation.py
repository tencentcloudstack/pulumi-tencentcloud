# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccountPrivilegesOperationArgs', 'AccountPrivilegesOperation']

@pulumi.input_type
class AccountPrivilegesOperationArgs:
    def __init__(__self__, *,
                 db_instance_id: pulumi.Input[str],
                 modify_privilege_sets: pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetArgs']]],
                 user_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a AccountPrivilegesOperation resource.
        :param pulumi.Input[str] db_instance_id: Instance ID in the format of postgres-4wdeb0zv.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetArgs']]] modify_privilege_sets: Privileges to modify. Batch modification supported, up to 50 entries at a time.
        :param pulumi.Input[str] user_name: Instance username.
        """
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        pulumi.set(__self__, "modify_privilege_sets", modify_privilege_sets)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID in the format of postgres-4wdeb0zv.
        """
        return pulumi.get(self, "db_instance_id")

    @db_instance_id.setter
    def db_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_instance_id", value)

    @property
    @pulumi.getter(name="modifyPrivilegeSets")
    def modify_privilege_sets(self) -> pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetArgs']]]:
        """
        Privileges to modify. Batch modification supported, up to 50 entries at a time.
        """
        return pulumi.get(self, "modify_privilege_sets")

    @modify_privilege_sets.setter
    def modify_privilege_sets(self, value: pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetArgs']]]):
        pulumi.set(self, "modify_privilege_sets", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        Instance username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class _AccountPrivilegesOperationState:
    def __init__(__self__, *,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 modify_privilege_sets: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetArgs']]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AccountPrivilegesOperation resources.
        :param pulumi.Input[str] db_instance_id: Instance ID in the format of postgres-4wdeb0zv.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetArgs']]] modify_privilege_sets: Privileges to modify. Batch modification supported, up to 50 entries at a time.
        :param pulumi.Input[str] user_name: Instance username.
        """
        if db_instance_id is not None:
            pulumi.set(__self__, "db_instance_id", db_instance_id)
        if modify_privilege_sets is not None:
            pulumi.set(__self__, "modify_privilege_sets", modify_privilege_sets)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID in the format of postgres-4wdeb0zv.
        """
        return pulumi.get(self, "db_instance_id")

    @db_instance_id.setter
    def db_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_instance_id", value)

    @property
    @pulumi.getter(name="modifyPrivilegeSets")
    def modify_privilege_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetArgs']]]]:
        """
        Privileges to modify. Batch modification supported, up to 50 entries at a time.
        """
        return pulumi.get(self, "modify_privilege_sets")

    @modify_privilege_sets.setter
    def modify_privilege_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetArgs']]]]):
        pulumi.set(self, "modify_privilege_sets", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


class AccountPrivilegesOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 modify_privilege_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesOperationModifyPrivilegeSetArgs']]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create postgresql account privileges

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create postgresql
        example_instance = tencentcloud.postgresql.Instance("exampleInstance",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_major_version="10",
            engine_version="10.23",
            root_user="root123",
            root_password="Root123$",
            charset="UTF8",
            project_id=0,
            cpu=1,
            memory=2,
            storage=10,
            tags={
                "test": "tf",
            })
        # create account
        example_account = tencentcloud.postgresql.Account("exampleAccount",
            db_instance_id=example_instance.id,
            user_name="tf_example",
            password="Password@123",
            type="normal",
            remark="remark",
            lock_status=False)
        # create account privileges
        example_account_privileges_operation = tencentcloud.postgresql.AccountPrivilegesOperation("exampleAccountPrivilegesOperation",
            db_instance_id=example_instance.id,
            user_name=example_account.user_name,
            modify_privilege_sets=[tencentcloud.postgresql.AccountPrivilegesOperationModifyPrivilegeSetArgs(
                database_privilege=tencentcloud.postgresql.AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeArgs(
                    object=tencentcloud.postgresql.AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeObjectArgs(
                        object_name="postgres",
                        object_type="database",
                    ),
                    privilege_sets=[
                        "CONNECT",
                        "TEMPORARY",
                        "CREATE",
                    ],
                ),
                modify_type="grantObject",
                is_cascade=False,
            )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_instance_id: Instance ID in the format of postgres-4wdeb0zv.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesOperationModifyPrivilegeSetArgs']]]] modify_privilege_sets: Privileges to modify. Batch modification supported, up to 50 entries at a time.
        :param pulumi.Input[str] user_name: Instance username.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountPrivilegesOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create postgresql account privileges

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create postgresql
        example_instance = tencentcloud.postgresql.Instance("exampleInstance",
            availability_zone=availability_zone,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_major_version="10",
            engine_version="10.23",
            root_user="root123",
            root_password="Root123$",
            charset="UTF8",
            project_id=0,
            cpu=1,
            memory=2,
            storage=10,
            tags={
                "test": "tf",
            })
        # create account
        example_account = tencentcloud.postgresql.Account("exampleAccount",
            db_instance_id=example_instance.id,
            user_name="tf_example",
            password="Password@123",
            type="normal",
            remark="remark",
            lock_status=False)
        # create account privileges
        example_account_privileges_operation = tencentcloud.postgresql.AccountPrivilegesOperation("exampleAccountPrivilegesOperation",
            db_instance_id=example_instance.id,
            user_name=example_account.user_name,
            modify_privilege_sets=[tencentcloud.postgresql.AccountPrivilegesOperationModifyPrivilegeSetArgs(
                database_privilege=tencentcloud.postgresql.AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeArgs(
                    object=tencentcloud.postgresql.AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeObjectArgs(
                        object_name="postgres",
                        object_type="database",
                    ),
                    privilege_sets=[
                        "CONNECT",
                        "TEMPORARY",
                        "CREATE",
                    ],
                ),
                modify_type="grantObject",
                is_cascade=False,
            )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param AccountPrivilegesOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountPrivilegesOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 modify_privilege_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesOperationModifyPrivilegeSetArgs']]]]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountPrivilegesOperationArgs.__new__(AccountPrivilegesOperationArgs)

            if db_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'db_instance_id'")
            __props__.__dict__["db_instance_id"] = db_instance_id
            if modify_privilege_sets is None and not opts.urn:
                raise TypeError("Missing required property 'modify_privilege_sets'")
            __props__.__dict__["modify_privilege_sets"] = modify_privilege_sets
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
        super(AccountPrivilegesOperation, __self__).__init__(
            'tencentcloud:Postgresql/accountPrivilegesOperation:AccountPrivilegesOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            db_instance_id: Optional[pulumi.Input[str]] = None,
            modify_privilege_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesOperationModifyPrivilegeSetArgs']]]]] = None,
            user_name: Optional[pulumi.Input[str]] = None) -> 'AccountPrivilegesOperation':
        """
        Get an existing AccountPrivilegesOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_instance_id: Instance ID in the format of postgres-4wdeb0zv.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesOperationModifyPrivilegeSetArgs']]]] modify_privilege_sets: Privileges to modify. Batch modification supported, up to 50 entries at a time.
        :param pulumi.Input[str] user_name: Instance username.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountPrivilegesOperationState.__new__(_AccountPrivilegesOperationState)

        __props__.__dict__["db_instance_id"] = db_instance_id
        __props__.__dict__["modify_privilege_sets"] = modify_privilege_sets
        __props__.__dict__["user_name"] = user_name
        return AccountPrivilegesOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID in the format of postgres-4wdeb0zv.
        """
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="modifyPrivilegeSets")
    def modify_privilege_sets(self) -> pulumi.Output[Sequence['outputs.AccountPrivilegesOperationModifyPrivilegeSet']]:
        """
        Privileges to modify. Batch modification supported, up to 50 entries at a time.
        """
        return pulumi.get(self, "modify_privilege_sets")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        Instance username.
        """
        return pulumi.get(self, "user_name")

