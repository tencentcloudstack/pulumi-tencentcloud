# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccountPrivilegesOperationModifyPrivilegeSetArgs',
    'AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeArgs',
    'AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeObjectArgs',
    'CloneDbInstanceDbNodeSetArgs',
    'CloneDbInstanceTagListArgs',
    'InstanceBackupPlanArgs',
    'InstanceDbNodeSetArgs',
    'ParameterTemplateModifyParamEntrySetArgs',
    'ReadonlyGroupNetInfoListArgs',
    'GetAccountPrivilegesDatabaseObjectSetArgs',
    'GetBackupDownloadUrlsBackupDownloadRestrictionArgs',
    'GetBaseBackupsFilterArgs',
    'GetDedicatedClustersFilterArgs',
    'GetLogBackupsFilterArgs',
    'GetParameterTemplatesFilterArgs',
    'GetReadonlyGroupsFilterArgs',
]

@pulumi.input_type
class AccountPrivilegesOperationModifyPrivilegeSetArgs:
    def __init__(__self__, *,
                 database_privilege: Optional[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeArgs']] = None,
                 is_cascade: Optional[pulumi.Input[bool]] = None,
                 modify_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeArgs'] database_privilege: Database objects and the user permissions on these objects. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[bool] is_cascade: Required only when ModifyType is revokeObject. When the parameter is true, revoking permissions will cascade. The default value is false.
        :param pulumi.Input[str] modify_type: Supported modification method: grantObject, revokeObject, alterRole. grantObject represents granting permissions on object, revokeObject represents revoking permissions on object, and alterRole represents modifying the account type.
        """
        if database_privilege is not None:
            pulumi.set(__self__, "database_privilege", database_privilege)
        if is_cascade is not None:
            pulumi.set(__self__, "is_cascade", is_cascade)
        if modify_type is not None:
            pulumi.set(__self__, "modify_type", modify_type)

    @property
    @pulumi.getter(name="databasePrivilege")
    def database_privilege(self) -> Optional[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeArgs']]:
        """
        Database objects and the user permissions on these objects. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "database_privilege")

    @database_privilege.setter
    def database_privilege(self, value: Optional[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeArgs']]):
        pulumi.set(self, "database_privilege", value)

    @property
    @pulumi.getter(name="isCascade")
    def is_cascade(self) -> Optional[pulumi.Input[bool]]:
        """
        Required only when ModifyType is revokeObject. When the parameter is true, revoking permissions will cascade. The default value is false.
        """
        return pulumi.get(self, "is_cascade")

    @is_cascade.setter
    def is_cascade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cascade", value)

    @property
    @pulumi.getter(name="modifyType")
    def modify_type(self) -> Optional[pulumi.Input[str]]:
        """
        Supported modification method: grantObject, revokeObject, alterRole. grantObject represents granting permissions on object, revokeObject represents revoking permissions on object, and alterRole represents modifying the account type.
        """
        return pulumi.get(self, "modify_type")

    @modify_type.setter
    def modify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modify_type", value)


@pulumi.input_type
class AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeArgs:
    def __init__(__self__, *,
                 object: Optional[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeObjectArgs']] = None,
                 privilege_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeObjectArgs'] object: Database object.If ObjectType is database, DatabaseName/SchemaName/TableName can be null.If ObjectType is schema, SchemaName/TableName can be null.If ObjectType is table, TableName can be null.If ObjectType is column, DatabaseName/SchemaName/TableName can&amp;#39;t be null.In all other cases, DatabaseName/SchemaName/TableName can be null. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] privilege_sets: Privileges the specific account has on database object. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if object is not None:
            pulumi.set(__self__, "object", object)
        if privilege_sets is not None:
            pulumi.set(__self__, "privilege_sets", privilege_sets)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeObjectArgs']]:
        """
        Database object.If ObjectType is database, DatabaseName/SchemaName/TableName can be null.If ObjectType is schema, SchemaName/TableName can be null.If ObjectType is table, TableName can be null.If ObjectType is column, DatabaseName/SchemaName/TableName can&amp;#39;t be null.In all other cases, DatabaseName/SchemaName/TableName can be null. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input['AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeObjectArgs']]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="privilegeSets")
    def privilege_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Privileges the specific account has on database object. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "privilege_sets")

    @privilege_sets.setter
    def privilege_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "privilege_sets", value)


@pulumi.input_type
class AccountPrivilegesOperationModifyPrivilegeSetDatabasePrivilegeObjectArgs:
    def __init__(__self__, *,
                 object_name: pulumi.Input[str],
                 object_type: pulumi.Input[str],
                 database_name: Optional[pulumi.Input[str]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_name: Database object Name. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] object_type: Supported database object types: account, database, schema, sequence, procedure, type, function, table, view, matview, column. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] database_name: Database name to which the database object belongs. This parameter is mandatory when ObjectType is not database. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] schema_name: Schema name to which the database object belongs. This parameter is mandatory when ObjectType is not database or schema. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] table_name: Table name to which the database object belongs. This parameter is mandatory when ObjectType is column. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "object_name", object_name)
        pulumi.set(__self__, "object_type", object_type)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> pulumi.Input[str]:
        """
        Database object Name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "object_name")

    @object_name.setter
    def object_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_name", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[str]:
        """
        Supported database object types: account, database, schema, sequence, procedure, type, function, table, view, matview, column. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database name to which the database object belongs. This parameter is mandatory when ObjectType is not database. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        Schema name to which the database object belongs. This parameter is mandatory when ObjectType is not database or schema. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        """
        Table name to which the database object belongs. This parameter is mandatory when ObjectType is column. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class CloneDbInstanceDbNodeSetArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 zone: pulumi.Input[str],
                 dedicated_cluster_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role: Node type. Valid values:
               `Primary`;
               `Standby`.
        :param pulumi.Input[str] zone: AZ where the node resides, such as ap-guangzhou-1.
        :param pulumi.Input[str] dedicated_cluster_id: Dedicated cluster ID.
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "zone", zone)
        if dedicated_cluster_id is not None:
            pulumi.set(__self__, "dedicated_cluster_id", dedicated_cluster_id)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        Node type. Valid values:
        `Primary`;
        `Standby`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        AZ where the node resides, such as ap-guangzhou-1.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="dedicatedClusterId")
    def dedicated_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated cluster ID.
        """
        return pulumi.get(self, "dedicated_cluster_id")

    @dedicated_cluster_id.setter
    def dedicated_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_cluster_id", value)


@pulumi.input_type
class CloneDbInstanceTagListArgs:
    def __init__(__self__, *,
                 tag_key: pulumi.Input[str],
                 tag_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] tag_key: Tag key.
        :param pulumi.Input[str] tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> pulumi.Input[str]:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> pulumi.Input[str]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class InstanceBackupPlanArgs:
    def __init__(__self__, *,
                 backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 base_backup_retention_period: Optional[pulumi.Input[int]] = None,
                 max_backup_start_time: Optional[pulumi.Input[str]] = None,
                 min_backup_start_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_periods: List of backup period per week, available values: `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`. NOTE: At least specify two days.
        :param pulumi.Input[int] base_backup_retention_period: Specify days of the retention.
        :param pulumi.Input[str] max_backup_start_time: Specify latest backup start time, format `hh:mm:ss`.
        :param pulumi.Input[str] min_backup_start_time: Specify earliest backup start time, format `hh:mm:ss`.
        """
        if backup_periods is not None:
            pulumi.set(__self__, "backup_periods", backup_periods)
        if base_backup_retention_period is not None:
            pulumi.set(__self__, "base_backup_retention_period", base_backup_retention_period)
        if max_backup_start_time is not None:
            pulumi.set(__self__, "max_backup_start_time", max_backup_start_time)
        if min_backup_start_time is not None:
            pulumi.set(__self__, "min_backup_start_time", min_backup_start_time)

    @property
    @pulumi.getter(name="backupPeriods")
    def backup_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of backup period per week, available values: `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`. NOTE: At least specify two days.
        """
        return pulumi.get(self, "backup_periods")

    @backup_periods.setter
    def backup_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_periods", value)

    @property
    @pulumi.getter(name="baseBackupRetentionPeriod")
    def base_backup_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Specify days of the retention.
        """
        return pulumi.get(self, "base_backup_retention_period")

    @base_backup_retention_period.setter
    def base_backup_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_backup_retention_period", value)

    @property
    @pulumi.getter(name="maxBackupStartTime")
    def max_backup_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Specify latest backup start time, format `hh:mm:ss`.
        """
        return pulumi.get(self, "max_backup_start_time")

    @max_backup_start_time.setter
    def max_backup_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_backup_start_time", value)

    @property
    @pulumi.getter(name="minBackupStartTime")
    def min_backup_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Specify earliest backup start time, format `hh:mm:ss`.
        """
        return pulumi.get(self, "min_backup_start_time")

    @min_backup_start_time.setter
    def min_backup_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_backup_start_time", value)


@pulumi.input_type
class InstanceDbNodeSetArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[str],
                 dedicated_cluster_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] zone: Indicates the node available zone.
        :param pulumi.Input[str] dedicated_cluster_id: Dedicated cluster ID.
        :param pulumi.Input[str] role: Indicates node type, available values:`Primary`, `Standby`. Default: `Standby`.
        """
        pulumi.set(__self__, "zone", zone)
        if dedicated_cluster_id is not None:
            pulumi.set(__self__, "dedicated_cluster_id", dedicated_cluster_id)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Indicates the node available zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="dedicatedClusterId")
    def dedicated_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated cluster ID.
        """
        return pulumi.get(self, "dedicated_cluster_id")

    @dedicated_cluster_id.setter
    def dedicated_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_cluster_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates node type, available values:`Primary`, `Standby`. Default: `Standby`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class ParameterTemplateModifyParamEntrySetArgs:
    def __init__(__self__, *,
                 expected_value: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expected_value: Modify the parameter value. The input parameters are passed in the form of strings, for example: decimal `0.1`, integer `1000`, enumeration `replica`.
        :param pulumi.Input[str] name: The parameter name.
        """
        pulumi.set(__self__, "expected_value", expected_value)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="expectedValue")
    def expected_value(self) -> pulumi.Input[str]:
        """
        Modify the parameter value. The input parameters are passed in the form of strings, for example: decimal `0.1`, integer `1000`, enumeration `replica`.
        """
        return pulumi.get(self, "expected_value")

    @expected_value.setter
    def expected_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "expected_value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ReadonlyGroupNetInfoListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] ip: Ip address of the net info.
        :param pulumi.Input[int] port: Port of the net info.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ip address of the net info.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the net info.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class GetAccountPrivilegesDatabaseObjectSetArgs:
    def __init__(__self__, *,
                 object_name: str,
                 object_type: str,
                 database_name: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 table_name: Optional[str] = None):
        """
        :param str object_name: Database object Name.Note: This field may return null, indicating that no valid value can be obtained.
        :param str object_type: Supported database object types: account, database, schema, sequence, procedure, type, function, table, view, matview, column. Note: This field may return null, indicating that no valid value can be obtained.
        :param str database_name: Database name to which the database object belongs. This parameter is mandatory when ObjectType is not database.Note: This field may return null, indicating that no valid value can be obtained.
        :param str schema_name: Schema name to which the database object belongs. This parameter is mandatory when ObjectType is not database or schema.Note: This field may return null, indicating that no valid value can be obtained.
        :param str table_name: Table name to which the database object belongs. This parameter is mandatory when ObjectType is column.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "object_name", object_name)
        pulumi.set(__self__, "object_type", object_type)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> str:
        """
        Database object Name.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "object_name")

    @object_name.setter
    def object_name(self, value: str):
        pulumi.set(self, "object_name", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        Supported database object types: account, database, schema, sequence, procedure, type, function, table, view, matview, column. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: str):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        Database name to which the database object belongs. This parameter is mandatory when ObjectType is not database.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        """
        Schema name to which the database object belongs. This parameter is mandatory when ObjectType is not database or schema.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[str]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        """
        Table name to which the database object belongs. This parameter is mandatory when ObjectType is column.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[str]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class GetBackupDownloadUrlsBackupDownloadRestrictionArgs:
    def __init__(__self__, *,
                 ip_restriction_effect: Optional[str] = None,
                 ip_sets: Optional[Sequence[str]] = None,
                 restriction_type: Optional[str] = None,
                 vpc_id_sets: Optional[Sequence[str]] = None,
                 vpc_restriction_effect: Optional[str] = None):
        """
        :param str ip_restriction_effect: Whether IP is allowed. Valid values: `ALLOW` (allow), `DENY` (deny).
        :param Sequence[str] ip_sets: Whether it is allowed to download IP list of the backup files.
        :param str restriction_type: Type of the network restrictions for downloading backup files. Valid values: `NONE` (backups can be downloaded over both private and public networks), `INTRANET` (backups can only be downloaded over the private network), `CUSTOMIZE` (backups can be downloaded over specified VPCs or at specified IPs).
        :param Sequence[str] vpc_id_sets: Whether it is allowed to download the VPC ID list of the backup files.
        :param str vpc_restriction_effect: Whether VPC is allowed. Valid values: `ALLOW` (allow), `DENY` (deny).
        """
        if ip_restriction_effect is not None:
            pulumi.set(__self__, "ip_restriction_effect", ip_restriction_effect)
        if ip_sets is not None:
            pulumi.set(__self__, "ip_sets", ip_sets)
        if restriction_type is not None:
            pulumi.set(__self__, "restriction_type", restriction_type)
        if vpc_id_sets is not None:
            pulumi.set(__self__, "vpc_id_sets", vpc_id_sets)
        if vpc_restriction_effect is not None:
            pulumi.set(__self__, "vpc_restriction_effect", vpc_restriction_effect)

    @property
    @pulumi.getter(name="ipRestrictionEffect")
    def ip_restriction_effect(self) -> Optional[str]:
        """
        Whether IP is allowed. Valid values: `ALLOW` (allow), `DENY` (deny).
        """
        return pulumi.get(self, "ip_restriction_effect")

    @ip_restriction_effect.setter
    def ip_restriction_effect(self, value: Optional[str]):
        pulumi.set(self, "ip_restriction_effect", value)

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Optional[Sequence[str]]:
        """
        Whether it is allowed to download IP list of the backup files.
        """
        return pulumi.get(self, "ip_sets")

    @ip_sets.setter
    def ip_sets(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "ip_sets", value)

    @property
    @pulumi.getter(name="restrictionType")
    def restriction_type(self) -> Optional[str]:
        """
        Type of the network restrictions for downloading backup files. Valid values: `NONE` (backups can be downloaded over both private and public networks), `INTRANET` (backups can only be downloaded over the private network), `CUSTOMIZE` (backups can be downloaded over specified VPCs or at specified IPs).
        """
        return pulumi.get(self, "restriction_type")

    @restriction_type.setter
    def restriction_type(self, value: Optional[str]):
        pulumi.set(self, "restriction_type", value)

    @property
    @pulumi.getter(name="vpcIdSets")
    def vpc_id_sets(self) -> Optional[Sequence[str]]:
        """
        Whether it is allowed to download the VPC ID list of the backup files.
        """
        return pulumi.get(self, "vpc_id_sets")

    @vpc_id_sets.setter
    def vpc_id_sets(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "vpc_id_sets", value)

    @property
    @pulumi.getter(name="vpcRestrictionEffect")
    def vpc_restriction_effect(self) -> Optional[str]:
        """
        Whether VPC is allowed. Valid values: `ALLOW` (allow), `DENY` (deny).
        """
        return pulumi.get(self, "vpc_restriction_effect")

    @vpc_restriction_effect.setter
    def vpc_restriction_effect(self, value: Optional[str]):
        pulumi.set(self, "vpc_restriction_effect", value)


@pulumi.input_type
class GetBaseBackupsFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter name.
        :param Sequence[str] values: One or more filter values.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        One or more filter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetDedicatedClustersFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter values.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Filter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetLogBackupsFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter name.
        :param Sequence[str] values: One or more filter values.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        One or more filter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetParameterTemplatesFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter name.
        :param Sequence[str] values: One or more filter values.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        One or more filter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetReadonlyGroupsFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter name.
        :param Sequence[str] values: One or more filter values.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        One or more filter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


