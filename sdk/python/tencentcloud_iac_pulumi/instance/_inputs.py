# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceDataDiskArgs',
    'GetTypesFilterArgs',
]

@pulumi.input_type
class InstanceDataDiskArgs:
    def __init__(__self__, *,
                 data_disk_size: pulumi.Input[int],
                 data_disk_type: pulumi.Input[str],
                 data_disk_id: Optional[pulumi.Input[str]] = None,
                 data_disk_snapshot_id: Optional[pulumi.Input[str]] = None,
                 delete_with_instance: Optional[pulumi.Input[bool]] = None,
                 delete_with_instance_prepaid: Optional[pulumi.Input[bool]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 throughput_performance: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] data_disk_size: Size of the data disk, and unit is GB.
        :param pulumi.Input[str] data_disk_type: Data disk type. For more information about limits on different data disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: LOCAL_BASIC: local disk, LOCAL_SSD: local SSD disk, LOCAL_NVME: local NVME disk, specified in the InstanceType, LOCAL_PRO: local HDD disk, specified in the InstanceType, CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD, CLOUD_BSSD: Balanced SSD.
        :param pulumi.Input[str] data_disk_id: Data disk ID used to initialize the data disk. When data disk type is `LOCAL_BASIC` and `LOCAL_SSD`, disk id is not supported.
        :param pulumi.Input[str] data_disk_snapshot_id: Snapshot ID of the data disk. The selected data disk snapshot size must be smaller than the data disk size.
        :param pulumi.Input[bool] delete_with_instance: Decides whether the disk is deleted with instance(only applied to `CLOUD_BASIC`, `CLOUD_SSD` and `CLOUD_PREMIUM` disk with `POSTPAID_BY_HOUR` instance), default is true.
        :param pulumi.Input[bool] delete_with_instance_prepaid: Decides whether the disk is deleted with instance(only applied to `CLOUD_BASIC`, `CLOUD_SSD` and `CLOUD_PREMIUM` disk with `PREPAID` instance), default is false.
        :param pulumi.Input[bool] encrypt: Decides whether the disk is encrypted. Default is `false`.
        :param pulumi.Input[int] throughput_performance: Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
        """
        pulumi.set(__self__, "data_disk_size", data_disk_size)
        pulumi.set(__self__, "data_disk_type", data_disk_type)
        if data_disk_id is not None:
            pulumi.set(__self__, "data_disk_id", data_disk_id)
        if data_disk_snapshot_id is not None:
            pulumi.set(__self__, "data_disk_snapshot_id", data_disk_snapshot_id)
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if delete_with_instance_prepaid is not None:
            pulumi.set(__self__, "delete_with_instance_prepaid", delete_with_instance_prepaid)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="dataDiskSize")
    def data_disk_size(self) -> pulumi.Input[int]:
        """
        Size of the data disk, and unit is GB.
        """
        return pulumi.get(self, "data_disk_size")

    @data_disk_size.setter
    def data_disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "data_disk_size", value)

    @property
    @pulumi.getter(name="dataDiskType")
    def data_disk_type(self) -> pulumi.Input[str]:
        """
        Data disk type. For more information about limits on different data disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: LOCAL_BASIC: local disk, LOCAL_SSD: local SSD disk, LOCAL_NVME: local NVME disk, specified in the InstanceType, LOCAL_PRO: local HDD disk, specified in the InstanceType, CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD, CLOUD_BSSD: Balanced SSD.
        """
        return pulumi.get(self, "data_disk_type")

    @data_disk_type.setter
    def data_disk_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_disk_type", value)

    @property
    @pulumi.getter(name="dataDiskId")
    def data_disk_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data disk ID used to initialize the data disk. When data disk type is `LOCAL_BASIC` and `LOCAL_SSD`, disk id is not supported.
        """
        return pulumi.get(self, "data_disk_id")

    @data_disk_id.setter
    def data_disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_disk_id", value)

    @property
    @pulumi.getter(name="dataDiskSnapshotId")
    def data_disk_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Snapshot ID of the data disk. The selected data disk snapshot size must be smaller than the data disk size.
        """
        return pulumi.get(self, "data_disk_snapshot_id")

    @data_disk_snapshot_id.setter
    def data_disk_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_disk_snapshot_id", value)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Decides whether the disk is deleted with instance(only applied to `CLOUD_BASIC`, `CLOUD_SSD` and `CLOUD_PREMIUM` disk with `POSTPAID_BY_HOUR` instance), default is true.
        """
        return pulumi.get(self, "delete_with_instance")

    @delete_with_instance.setter
    def delete_with_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_with_instance", value)

    @property
    @pulumi.getter(name="deleteWithInstancePrepaid")
    def delete_with_instance_prepaid(self) -> Optional[pulumi.Input[bool]]:
        """
        Decides whether the disk is deleted with instance(only applied to `CLOUD_BASIC`, `CLOUD_SSD` and `CLOUD_PREMIUM` disk with `PREPAID` instance), default is false.
        """
        return pulumi.get(self, "delete_with_instance_prepaid")

    @delete_with_instance_prepaid.setter
    def delete_with_instance_prepaid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_with_instance_prepaid", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        """
        Decides whether the disk is encrypted. Default is `false`.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[pulumi.Input[int]]:
        """
        Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
        """
        return pulumi.get(self, "throughput_performance")

    @throughput_performance.setter
    def throughput_performance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throughput_performance", value)


@pulumi.input_type
class GetTypesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: The filter name. Valid values: `zone`, `instance-family` and `instance-charge-type`.
        :param Sequence[str] values: The filter values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The filter name. Valid values: `zone`, `instance-family` and `instance-charge-type`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The filter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


