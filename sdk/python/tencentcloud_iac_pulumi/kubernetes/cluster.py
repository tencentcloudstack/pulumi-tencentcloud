# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 vpc_id: pulumi.Input[str],
                 acquire_cluster_admin_role: Optional[pulumi.Input[bool]] = None,
                 auth_options: Optional[pulumi.Input['ClusterAuthOptionsArgs']] = None,
                 auto_upgrade_cluster_level: Optional[pulumi.Input[bool]] = None,
                 base_pod_num: Optional[pulumi.Input[int]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 claim_expired_seconds: Optional[pulumi.Input[int]] = None,
                 cluster_audit: Optional[pulumi.Input['ClusterClusterAuditArgs']] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_deploy_type: Optional[pulumi.Input[str]] = None,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_extra_args: Optional[pulumi.Input['ClusterClusterExtraArgsArgs']] = None,
                 cluster_internet: Optional[pulumi.Input[bool]] = None,
                 cluster_internet_domain: Optional[pulumi.Input[str]] = None,
                 cluster_internet_security_group: Optional[pulumi.Input[str]] = None,
                 cluster_intranet: Optional[pulumi.Input[bool]] = None,
                 cluster_intranet_domain: Optional[pulumi.Input[str]] = None,
                 cluster_intranet_subnet_id: Optional[pulumi.Input[str]] = None,
                 cluster_ipvs: Optional[pulumi.Input[bool]] = None,
                 cluster_level: Optional[pulumi.Input[str]] = None,
                 cluster_max_pod_num: Optional[pulumi.Input[int]] = None,
                 cluster_max_service_num: Optional[pulumi.Input[int]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_os: Optional[pulumi.Input[str]] = None,
                 cluster_os_type: Optional[pulumi.Input[str]] = None,
                 cluster_subnet_id: Optional[pulumi.Input[str]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 container_runtime: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 enable_customized_pod_cidr: Optional[pulumi.Input[bool]] = None,
                 eni_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_persistence: Optional[pulumi.Input['ClusterEventPersistenceArgs']] = None,
                 exist_instances: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceArgs']]]] = None,
                 extension_addons: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExtensionAddonArgs']]]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 globe_desired_pod_num: Optional[pulumi.Input[int]] = None,
                 ignore_cluster_cidr_conflict: Optional[pulumi.Input[bool]] = None,
                 ignore_service_cidr_conflict: Optional[pulumi.Input[bool]] = None,
                 instance_delete_mode: Optional[pulumi.Input[str]] = None,
                 is_non_static_ip_mode: Optional[pulumi.Input[bool]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 log_agent: Optional[pulumi.Input['ClusterLogAgentArgs']] = None,
                 managed_cluster_internet_security_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 master_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigArgs']]]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 node_name_type: Optional[pulumi.Input[str]] = None,
                 node_pool_global_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNodePoolGlobalConfigArgs']]]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_delete_options: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceDeleteOptionArgs']]]] = None,
                 runtime_version: Optional[pulumi.Input[str]] = None,
                 service_cidr: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 upgrade_instances_follow_cluster: Optional[pulumi.Input[bool]] = None,
                 vpc_cni_type: Optional[pulumi.Input[str]] = None,
                 worker_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigArgs']]]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] vpc_id: Vpc Id of the cluster.
        :param pulumi.Input[bool] acquire_cluster_admin_role: If set to true, it will acquire the ClusterRole tke:admin. NOTE: this arguments cannot revoke to `false` after acquired.
        :param pulumi.Input['ClusterAuthOptionsArgs'] auth_options: Specify cluster authentication configuration. Only available for managed cluster and `cluster_version` >= 1.20.
        :param pulumi.Input[bool] auto_upgrade_cluster_level: Whether the cluster level auto upgraded, valid for managed cluster.
        :param pulumi.Input[int] base_pod_num: The number of basic pods. valid when enable_customized_pod_cidr=true.
        :param pulumi.Input[str] cdc_id: CDC ID.
        :param pulumi.Input[int] claim_expired_seconds: Claim expired seconds to recycle ENI. This field can only set when field `network_type` is 'VPC-CNI'. `claim_expired_seconds` must greater or equal than 300 and less than 15768000.
        :param pulumi.Input['ClusterClusterAuditArgs'] cluster_audit: Specify Cluster Audit config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        :param pulumi.Input[str] cluster_cidr: A network address block of the cluster. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        :param pulumi.Input[str] cluster_deploy_type: Deployment type of the cluster, the available values include: 'MANAGED_CLUSTER' and 'INDEPENDENT_CLUSTER'. Default is 'MANAGED_CLUSTER'.
        :param pulumi.Input[str] cluster_desc: Description of the cluster.
        :param pulumi.Input['ClusterClusterExtraArgsArgs'] cluster_extra_args: Customized parameters for master component,such as kube-apiserver, kube-controller-manager, kube-scheduler.
        :param pulumi.Input[bool] cluster_internet: Open internet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        :param pulumi.Input[str] cluster_internet_domain: Domain name for cluster Kube-apiserver internet access. Be careful if you modify value of this parameter, the cluster_external_endpoint value may be changed automatically too.
        :param pulumi.Input[str] cluster_internet_security_group: Specify security group, NOTE: This argument must not be empty if cluster internet enabled.
        :param pulumi.Input[bool] cluster_intranet: Open intranet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        :param pulumi.Input[str] cluster_intranet_domain: Domain name for cluster Kube-apiserver intranet access. Be careful if you modify value of this parameter, the pgw_endpoint value may be changed automatically too.
        :param pulumi.Input[str] cluster_intranet_subnet_id: Subnet id who can access this independent cluster, this field must and can only set  when `cluster_intranet` is true. `cluster_intranet_subnet_id` can not modify once be set.
        :param pulumi.Input[bool] cluster_ipvs: Indicates whether `ipvs` is enabled. Default is true. False means `iptables` is enabled.
        :param pulumi.Input[str] cluster_level: Specify cluster level, valid for managed cluster, use data source `kubernetes_get_cluster_levels` to query available levels. Available value examples `L5`, `L20`, `L50`, `L100`, etc.
        :param pulumi.Input[int] cluster_max_pod_num: The maximum number of Pods per node in the cluster. Default is 256. The minimum value is 4. When its power unequal to 2, it will round upward to the closest power of 2.
        :param pulumi.Input[int] cluster_max_service_num: The maximum number of services in the cluster. Default is 256. The range is from 32 to 32768. When its power unequal to 2, it will round upward to the closest power of 2.
        :param pulumi.Input[str] cluster_name: Name of the cluster.
        :param pulumi.Input[str] cluster_os: Cluster operating system, supports setting public images (the field passes the corresponding image Name) and custom images (the field passes the corresponding image ID). For details, please refer to: https://cloud.tencent.com/document/product/457/68289.
        :param pulumi.Input[str] cluster_os_type: Image type of the cluster os, the available values include: 'GENERAL'. Default is 'GENERAL'.
        :param pulumi.Input[str] cluster_subnet_id: Subnet ID of the cluster, such as: subnet-b3p7d7q5.
        :param pulumi.Input[str] cluster_version: Version of the cluster. Use `kubernetes_get_available_cluster_versions` to get the upgradable cluster version.
        :param pulumi.Input[str] container_runtime: Runtime type of the cluster, the available values include: 'docker' and 'containerd'.The Kubernetes v1.24 has removed dockershim, so please use containerd in v1.24 or higher.Default is 'docker'.
        :param pulumi.Input[bool] deletion_protection: Indicates whether cluster deletion protection is enabled. Default is false.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[bool] enable_customized_pod_cidr: Whether to enable the custom mode of node podCIDR size. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] eni_subnet_ids: Subnet Ids for cluster with VPC-CNI network mode. This field can only set when field `network_type` is 'VPC-CNI'. `eni_subnet_ids` can not empty once be set.
        :param pulumi.Input['ClusterEventPersistenceArgs'] event_persistence: Specify cluster Event Persistence config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceArgs']]] exist_instances: create tke cluster by existed instances.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterExtensionAddonArgs']]] extension_addons: Information of the add-on to be installed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input[int] globe_desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it takes effect for all nodes.
        :param pulumi.Input[bool] ignore_cluster_cidr_conflict: Indicates whether to ignore the cluster cidr conflict error. Default is false.
        :param pulumi.Input[bool] ignore_service_cidr_conflict: Indicates whether to ignore the service cidr conflict error. Only valid in `VPC-CNI` mode.
        :param pulumi.Input[str] instance_delete_mode: The strategy for deleting cluster instances: terminate (destroy instances, only support pay as you go cloud host instances) retain (remove only, keep instances), Default is terminate.
        :param pulumi.Input[bool] is_non_static_ip_mode: Indicates whether non-static ip mode is enabled. Default is false.
        :param pulumi.Input[str] kube_proxy_mode: Cluster kube-proxy mode, the available values include: 'kube-proxy-bpf'. Default is not set.When set to kube-proxy-bpf, cluster version greater than 1.14 and with Tencent Linux 2.4 is required.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of tke cluster nodes.
        :param pulumi.Input['ClusterLogAgentArgs'] log_agent: Specify cluster log agent config.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] managed_cluster_internet_security_policies: this argument was deprecated, use `cluster_internet_security_group` instead. Security policies for managed cluster internet, like:'192.168.1.0/24' or '113.116.51.27', '0.0.0.0/0' means all. This field can only set when field `cluster_deploy_type` is 'MANAGED_CLUSTER' and `cluster_internet` is true. `managed_cluster_internet_security_policies` can not delete or empty once be set.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigArgs']]] master_configs: Deploy the machine configuration information of the 'MASTER_ETCD' service, and create <=7 units for common users.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] network_type: Cluster network type, the available values include: 'GR' and 'VPC-CNI' and 'CiliumOverlay'. Default is GR.
        :param pulumi.Input[str] node_name_type: Node name type of Cluster, the available values include: 'lan-ip' and 'hostname', Default is 'lan-ip'.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterNodePoolGlobalConfigArgs']]] node_pool_global_configs: Global config effective for all node pools.
        :param pulumi.Input[str] pre_start_user_script: Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceDeleteOptionArgs']]] resource_delete_options: The resource deletion policy when the cluster is deleted. Currently, CBS is supported (CBS is retained by default). Only valid when deleting cluster.
        :param pulumi.Input[str] runtime_version: Container Runtime version.
        :param pulumi.Input[str] service_cidr: A network address block of the service. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the cluster.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        :param pulumi.Input[bool] upgrade_instances_follow_cluster: Indicates whether upgrade all instances when cluster_version change. Default is false.
        :param pulumi.Input[str] vpc_cni_type: Distinguish between shared network card multi-IP mode and independent network card mode. Fill in `tke-route-eni` for shared network card multi-IP mode and `tke-direct-eni` for independent network card mode. The default is shared network card mode. When it is necessary to turn off the vpc-cni container network capability, both `eni_subnet_ids` and `vpc_cni_type` must be set to empty.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigArgs']]] worker_configs: Deploy the machine configuration information of the 'WORKER' service, and create <=20 units for common users. The other 'WORK' service are added by 'tencentcloud_kubernetes_scale_worker'.
        """
        pulumi.set(__self__, "vpc_id", vpc_id)
        if acquire_cluster_admin_role is not None:
            pulumi.set(__self__, "acquire_cluster_admin_role", acquire_cluster_admin_role)
        if auth_options is not None:
            pulumi.set(__self__, "auth_options", auth_options)
        if auto_upgrade_cluster_level is not None:
            pulumi.set(__self__, "auto_upgrade_cluster_level", auto_upgrade_cluster_level)
        if base_pod_num is not None:
            pulumi.set(__self__, "base_pod_num", base_pod_num)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if claim_expired_seconds is not None:
            pulumi.set(__self__, "claim_expired_seconds", claim_expired_seconds)
        if cluster_audit is not None:
            pulumi.set(__self__, "cluster_audit", cluster_audit)
        if cluster_cidr is not None:
            pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        if cluster_deploy_type is not None:
            pulumi.set(__self__, "cluster_deploy_type", cluster_deploy_type)
        if cluster_desc is not None:
            pulumi.set(__self__, "cluster_desc", cluster_desc)
        if cluster_extra_args is not None:
            pulumi.set(__self__, "cluster_extra_args", cluster_extra_args)
        if cluster_internet is not None:
            pulumi.set(__self__, "cluster_internet", cluster_internet)
        if cluster_internet_domain is not None:
            pulumi.set(__self__, "cluster_internet_domain", cluster_internet_domain)
        if cluster_internet_security_group is not None:
            pulumi.set(__self__, "cluster_internet_security_group", cluster_internet_security_group)
        if cluster_intranet is not None:
            pulumi.set(__self__, "cluster_intranet", cluster_intranet)
        if cluster_intranet_domain is not None:
            pulumi.set(__self__, "cluster_intranet_domain", cluster_intranet_domain)
        if cluster_intranet_subnet_id is not None:
            pulumi.set(__self__, "cluster_intranet_subnet_id", cluster_intranet_subnet_id)
        if cluster_ipvs is not None:
            pulumi.set(__self__, "cluster_ipvs", cluster_ipvs)
        if cluster_level is not None:
            pulumi.set(__self__, "cluster_level", cluster_level)
        if cluster_max_pod_num is not None:
            pulumi.set(__self__, "cluster_max_pod_num", cluster_max_pod_num)
        if cluster_max_service_num is not None:
            pulumi.set(__self__, "cluster_max_service_num", cluster_max_service_num)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_os is not None:
            pulumi.set(__self__, "cluster_os", cluster_os)
        if cluster_os_type is not None:
            pulumi.set(__self__, "cluster_os_type", cluster_os_type)
        if cluster_subnet_id is not None:
            pulumi.set(__self__, "cluster_subnet_id", cluster_subnet_id)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if container_runtime is not None:
            pulumi.set(__self__, "container_runtime", container_runtime)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if enable_customized_pod_cidr is not None:
            pulumi.set(__self__, "enable_customized_pod_cidr", enable_customized_pod_cidr)
        if eni_subnet_ids is not None:
            pulumi.set(__self__, "eni_subnet_ids", eni_subnet_ids)
        if event_persistence is not None:
            pulumi.set(__self__, "event_persistence", event_persistence)
        if exist_instances is not None:
            pulumi.set(__self__, "exist_instances", exist_instances)
        if extension_addons is not None:
            pulumi.set(__self__, "extension_addons", extension_addons)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if globe_desired_pod_num is not None:
            pulumi.set(__self__, "globe_desired_pod_num", globe_desired_pod_num)
        if ignore_cluster_cidr_conflict is not None:
            pulumi.set(__self__, "ignore_cluster_cidr_conflict", ignore_cluster_cidr_conflict)
        if ignore_service_cidr_conflict is not None:
            pulumi.set(__self__, "ignore_service_cidr_conflict", ignore_service_cidr_conflict)
        if instance_delete_mode is not None:
            pulumi.set(__self__, "instance_delete_mode", instance_delete_mode)
        if is_non_static_ip_mode is not None:
            pulumi.set(__self__, "is_non_static_ip_mode", is_non_static_ip_mode)
        if kube_proxy_mode is not None:
            pulumi.set(__self__, "kube_proxy_mode", kube_proxy_mode)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if log_agent is not None:
            pulumi.set(__self__, "log_agent", log_agent)
        if managed_cluster_internet_security_policies is not None:
            warnings.warn("""this argument was deprecated, use `cluster_internet_security_group` instead.""", DeprecationWarning)
            pulumi.log.warn("""managed_cluster_internet_security_policies is deprecated: this argument was deprecated, use `cluster_internet_security_group` instead.""")
        if managed_cluster_internet_security_policies is not None:
            pulumi.set(__self__, "managed_cluster_internet_security_policies", managed_cluster_internet_security_policies)
        if master_configs is not None:
            pulumi.set(__self__, "master_configs", master_configs)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if node_name_type is not None:
            pulumi.set(__self__, "node_name_type", node_name_type)
        if node_pool_global_configs is not None:
            pulumi.set(__self__, "node_pool_global_configs", node_pool_global_configs)
        if pre_start_user_script is not None:
            pulumi.set(__self__, "pre_start_user_script", pre_start_user_script)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_delete_options is not None:
            pulumi.set(__self__, "resource_delete_options", resource_delete_options)
        if runtime_version is not None:
            pulumi.set(__self__, "runtime_version", runtime_version)
        if service_cidr is not None:
            pulumi.set(__self__, "service_cidr", service_cidr)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)
        if upgrade_instances_follow_cluster is not None:
            pulumi.set(__self__, "upgrade_instances_follow_cluster", upgrade_instances_follow_cluster)
        if vpc_cni_type is not None:
            pulumi.set(__self__, "vpc_cni_type", vpc_cni_type)
        if worker_configs is not None:
            pulumi.set(__self__, "worker_configs", worker_configs)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        Vpc Id of the cluster.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="acquireClusterAdminRole")
    def acquire_cluster_admin_role(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, it will acquire the ClusterRole tke:admin. NOTE: this arguments cannot revoke to `false` after acquired.
        """
        return pulumi.get(self, "acquire_cluster_admin_role")

    @acquire_cluster_admin_role.setter
    def acquire_cluster_admin_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acquire_cluster_admin_role", value)

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> Optional[pulumi.Input['ClusterAuthOptionsArgs']]:
        """
        Specify cluster authentication configuration. Only available for managed cluster and `cluster_version` >= 1.20.
        """
        return pulumi.get(self, "auth_options")

    @auth_options.setter
    def auth_options(self, value: Optional[pulumi.Input['ClusterAuthOptionsArgs']]):
        pulumi.set(self, "auth_options", value)

    @property
    @pulumi.getter(name="autoUpgradeClusterLevel")
    def auto_upgrade_cluster_level(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the cluster level auto upgraded, valid for managed cluster.
        """
        return pulumi.get(self, "auto_upgrade_cluster_level")

    @auto_upgrade_cluster_level.setter
    def auto_upgrade_cluster_level(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_upgrade_cluster_level", value)

    @property
    @pulumi.getter(name="basePodNum")
    def base_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of basic pods. valid when enable_customized_pod_cidr=true.
        """
        return pulumi.get(self, "base_pod_num")

    @base_pod_num.setter
    def base_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_pod_num", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        CDC ID.
        """
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="claimExpiredSeconds")
    def claim_expired_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Claim expired seconds to recycle ENI. This field can only set when field `network_type` is 'VPC-CNI'. `claim_expired_seconds` must greater or equal than 300 and less than 15768000.
        """
        return pulumi.get(self, "claim_expired_seconds")

    @claim_expired_seconds.setter
    def claim_expired_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "claim_expired_seconds", value)

    @property
    @pulumi.getter(name="clusterAudit")
    def cluster_audit(self) -> Optional[pulumi.Input['ClusterClusterAuditArgs']]:
        """
        Specify Cluster Audit config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        """
        return pulumi.get(self, "cluster_audit")

    @cluster_audit.setter
    def cluster_audit(self, value: Optional[pulumi.Input['ClusterClusterAuditArgs']]):
        pulumi.set(self, "cluster_audit", value)

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A network address block of the cluster. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        """
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="clusterDeployType")
    def cluster_deploy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment type of the cluster, the available values include: 'MANAGED_CLUSTER' and 'INDEPENDENT_CLUSTER'. Default is 'MANAGED_CLUSTER'.
        """
        return pulumi.get(self, "cluster_deploy_type")

    @cluster_deploy_type.setter
    def cluster_deploy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_deploy_type", value)

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the cluster.
        """
        return pulumi.get(self, "cluster_desc")

    @cluster_desc.setter
    def cluster_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_desc", value)

    @property
    @pulumi.getter(name="clusterExtraArgs")
    def cluster_extra_args(self) -> Optional[pulumi.Input['ClusterClusterExtraArgsArgs']]:
        """
        Customized parameters for master component,such as kube-apiserver, kube-controller-manager, kube-scheduler.
        """
        return pulumi.get(self, "cluster_extra_args")

    @cluster_extra_args.setter
    def cluster_extra_args(self, value: Optional[pulumi.Input['ClusterClusterExtraArgsArgs']]):
        pulumi.set(self, "cluster_extra_args", value)

    @property
    @pulumi.getter(name="clusterInternet")
    def cluster_internet(self) -> Optional[pulumi.Input[bool]]:
        """
        Open internet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        """
        return pulumi.get(self, "cluster_internet")

    @cluster_internet.setter
    def cluster_internet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_internet", value)

    @property
    @pulumi.getter(name="clusterInternetDomain")
    def cluster_internet_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name for cluster Kube-apiserver internet access. Be careful if you modify value of this parameter, the cluster_external_endpoint value may be changed automatically too.
        """
        return pulumi.get(self, "cluster_internet_domain")

    @cluster_internet_domain.setter
    def cluster_internet_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_internet_domain", value)

    @property
    @pulumi.getter(name="clusterInternetSecurityGroup")
    def cluster_internet_security_group(self) -> Optional[pulumi.Input[str]]:
        """
        Specify security group, NOTE: This argument must not be empty if cluster internet enabled.
        """
        return pulumi.get(self, "cluster_internet_security_group")

    @cluster_internet_security_group.setter
    def cluster_internet_security_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_internet_security_group", value)

    @property
    @pulumi.getter(name="clusterIntranet")
    def cluster_intranet(self) -> Optional[pulumi.Input[bool]]:
        """
        Open intranet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        """
        return pulumi.get(self, "cluster_intranet")

    @cluster_intranet.setter
    def cluster_intranet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_intranet", value)

    @property
    @pulumi.getter(name="clusterIntranetDomain")
    def cluster_intranet_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name for cluster Kube-apiserver intranet access. Be careful if you modify value of this parameter, the pgw_endpoint value may be changed automatically too.
        """
        return pulumi.get(self, "cluster_intranet_domain")

    @cluster_intranet_domain.setter
    def cluster_intranet_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_intranet_domain", value)

    @property
    @pulumi.getter(name="clusterIntranetSubnetId")
    def cluster_intranet_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet id who can access this independent cluster, this field must and can only set  when `cluster_intranet` is true. `cluster_intranet_subnet_id` can not modify once be set.
        """
        return pulumi.get(self, "cluster_intranet_subnet_id")

    @cluster_intranet_subnet_id.setter
    def cluster_intranet_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_intranet_subnet_id", value)

    @property
    @pulumi.getter(name="clusterIpvs")
    def cluster_ipvs(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether `ipvs` is enabled. Default is true. False means `iptables` is enabled.
        """
        return pulumi.get(self, "cluster_ipvs")

    @cluster_ipvs.setter
    def cluster_ipvs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_ipvs", value)

    @property
    @pulumi.getter(name="clusterLevel")
    def cluster_level(self) -> Optional[pulumi.Input[str]]:
        """
        Specify cluster level, valid for managed cluster, use data source `kubernetes_get_cluster_levels` to query available levels. Available value examples `L5`, `L20`, `L50`, `L100`, etc.
        """
        return pulumi.get(self, "cluster_level")

    @cluster_level.setter
    def cluster_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_level", value)

    @property
    @pulumi.getter(name="clusterMaxPodNum")
    def cluster_max_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of Pods per node in the cluster. Default is 256. The minimum value is 4. When its power unequal to 2, it will round upward to the closest power of 2.
        """
        return pulumi.get(self, "cluster_max_pod_num")

    @cluster_max_pod_num.setter
    def cluster_max_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cluster_max_pod_num", value)

    @property
    @pulumi.getter(name="clusterMaxServiceNum")
    def cluster_max_service_num(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of services in the cluster. Default is 256. The range is from 32 to 32768. When its power unequal to 2, it will round upward to the closest power of 2.
        """
        return pulumi.get(self, "cluster_max_service_num")

    @cluster_max_service_num.setter
    def cluster_max_service_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cluster_max_service_num", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterOs")
    def cluster_os(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster operating system, supports setting public images (the field passes the corresponding image Name) and custom images (the field passes the corresponding image ID). For details, please refer to: https://cloud.tencent.com/document/product/457/68289.
        """
        return pulumi.get(self, "cluster_os")

    @cluster_os.setter
    def cluster_os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_os", value)

    @property
    @pulumi.getter(name="clusterOsType")
    def cluster_os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Image type of the cluster os, the available values include: 'GENERAL'. Default is 'GENERAL'.
        """
        return pulumi.get(self, "cluster_os_type")

    @cluster_os_type.setter
    def cluster_os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_os_type", value)

    @property
    @pulumi.getter(name="clusterSubnetId")
    def cluster_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet ID of the cluster, such as: subnet-b3p7d7q5.
        """
        return pulumi.get(self, "cluster_subnet_id")

    @cluster_subnet_id.setter
    def cluster_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_subnet_id", value)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the cluster. Use `kubernetes_get_available_cluster_versions` to get the upgradable cluster version.
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="containerRuntime")
    def container_runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Runtime type of the cluster, the available values include: 'docker' and 'containerd'.The Kubernetes v1.24 has removed dockershim, so please use containerd in v1.24 or higher.Default is 'docker'.
        """
        return pulumi.get(self, "container_runtime")

    @container_runtime.setter
    def container_runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_runtime", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether cluster deletion protection is enabled. Default is false.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="enableCustomizedPodCidr")
    def enable_customized_pod_cidr(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the custom mode of node podCIDR size. Default is false.
        """
        return pulumi.get(self, "enable_customized_pod_cidr")

    @enable_customized_pod_cidr.setter
    def enable_customized_pod_cidr(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_customized_pod_cidr", value)

    @property
    @pulumi.getter(name="eniSubnetIds")
    def eni_subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Subnet Ids for cluster with VPC-CNI network mode. This field can only set when field `network_type` is 'VPC-CNI'. `eni_subnet_ids` can not empty once be set.
        """
        return pulumi.get(self, "eni_subnet_ids")

    @eni_subnet_ids.setter
    def eni_subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "eni_subnet_ids", value)

    @property
    @pulumi.getter(name="eventPersistence")
    def event_persistence(self) -> Optional[pulumi.Input['ClusterEventPersistenceArgs']]:
        """
        Specify cluster Event Persistence config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        """
        return pulumi.get(self, "event_persistence")

    @event_persistence.setter
    def event_persistence(self, value: Optional[pulumi.Input['ClusterEventPersistenceArgs']]):
        pulumi.set(self, "event_persistence", value)

    @property
    @pulumi.getter(name="existInstances")
    def exist_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceArgs']]]]:
        """
        create tke cluster by existed instances.
        """
        return pulumi.get(self, "exist_instances")

    @exist_instances.setter
    def exist_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceArgs']]]]):
        pulumi.set(self, "exist_instances", value)

    @property
    @pulumi.getter(name="extensionAddons")
    def extension_addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExtensionAddonArgs']]]]:
        """
        Information of the add-on to be installed.
        """
        return pulumi.get(self, "extension_addons")

    @extension_addons.setter
    def extension_addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExtensionAddonArgs']]]]):
        pulumi.set(self, "extension_addons", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="globeDesiredPodNum")
    def globe_desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it takes effect for all nodes.
        """
        return pulumi.get(self, "globe_desired_pod_num")

    @globe_desired_pod_num.setter
    def globe_desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "globe_desired_pod_num", value)

    @property
    @pulumi.getter(name="ignoreClusterCidrConflict")
    def ignore_cluster_cidr_conflict(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to ignore the cluster cidr conflict error. Default is false.
        """
        return pulumi.get(self, "ignore_cluster_cidr_conflict")

    @ignore_cluster_cidr_conflict.setter
    def ignore_cluster_cidr_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_cluster_cidr_conflict", value)

    @property
    @pulumi.getter(name="ignoreServiceCidrConflict")
    def ignore_service_cidr_conflict(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to ignore the service cidr conflict error. Only valid in `VPC-CNI` mode.
        """
        return pulumi.get(self, "ignore_service_cidr_conflict")

    @ignore_service_cidr_conflict.setter
    def ignore_service_cidr_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_service_cidr_conflict", value)

    @property
    @pulumi.getter(name="instanceDeleteMode")
    def instance_delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The strategy for deleting cluster instances: terminate (destroy instances, only support pay as you go cloud host instances) retain (remove only, keep instances), Default is terminate.
        """
        return pulumi.get(self, "instance_delete_mode")

    @instance_delete_mode.setter
    def instance_delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_delete_mode", value)

    @property
    @pulumi.getter(name="isNonStaticIpMode")
    def is_non_static_ip_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether non-static ip mode is enabled. Default is false.
        """
        return pulumi.get(self, "is_non_static_ip_mode")

    @is_non_static_ip_mode.setter
    def is_non_static_ip_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_non_static_ip_mode", value)

    @property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster kube-proxy mode, the available values include: 'kube-proxy-bpf'. Default is not set.When set to kube-proxy-bpf, cluster version greater than 1.14 and with Tencent Linux 2.4 is required.
        """
        return pulumi.get(self, "kube_proxy_mode")

    @kube_proxy_mode.setter
    def kube_proxy_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_proxy_mode", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels of tke cluster nodes.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="logAgent")
    def log_agent(self) -> Optional[pulumi.Input['ClusterLogAgentArgs']]:
        """
        Specify cluster log agent config.
        """
        return pulumi.get(self, "log_agent")

    @log_agent.setter
    def log_agent(self, value: Optional[pulumi.Input['ClusterLogAgentArgs']]):
        pulumi.set(self, "log_agent", value)

    @property
    @pulumi.getter(name="managedClusterInternetSecurityPolicies")
    def managed_cluster_internet_security_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        this argument was deprecated, use `cluster_internet_security_group` instead. Security policies for managed cluster internet, like:'192.168.1.0/24' or '113.116.51.27', '0.0.0.0/0' means all. This field can only set when field `cluster_deploy_type` is 'MANAGED_CLUSTER' and `cluster_internet` is true. `managed_cluster_internet_security_policies` can not delete or empty once be set.
        """
        warnings.warn("""this argument was deprecated, use `cluster_internet_security_group` instead.""", DeprecationWarning)
        pulumi.log.warn("""managed_cluster_internet_security_policies is deprecated: this argument was deprecated, use `cluster_internet_security_group` instead.""")

        return pulumi.get(self, "managed_cluster_internet_security_policies")

    @managed_cluster_internet_security_policies.setter
    def managed_cluster_internet_security_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "managed_cluster_internet_security_policies", value)

    @property
    @pulumi.getter(name="masterConfigs")
    def master_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigArgs']]]]:
        """
        Deploy the machine configuration information of the 'MASTER_ETCD' service, and create <=7 units for common users.
        """
        return pulumi.get(self, "master_configs")

    @master_configs.setter
    def master_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigArgs']]]]):
        pulumi.set(self, "master_configs", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster network type, the available values include: 'GR' and 'VPC-CNI' and 'CiliumOverlay'. Default is GR.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="nodeNameType")
    def node_name_type(self) -> Optional[pulumi.Input[str]]:
        """
        Node name type of Cluster, the available values include: 'lan-ip' and 'hostname', Default is 'lan-ip'.
        """
        return pulumi.get(self, "node_name_type")

    @node_name_type.setter
    def node_name_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_name_type", value)

    @property
    @pulumi.getter(name="nodePoolGlobalConfigs")
    def node_pool_global_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNodePoolGlobalConfigArgs']]]]:
        """
        Global config effective for all node pools.
        """
        return pulumi.get(self, "node_pool_global_configs")

    @node_pool_global_configs.setter
    def node_pool_global_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNodePoolGlobalConfigArgs']]]]):
        pulumi.set(self, "node_pool_global_configs", value)

    @property
    @pulumi.getter(name="preStartUserScript")
    def pre_start_user_script(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        """
        return pulumi.get(self, "pre_start_user_script")

    @pre_start_user_script.setter
    def pre_start_user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_start_user_script", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceDeleteOptions")
    def resource_delete_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceDeleteOptionArgs']]]]:
        """
        The resource deletion policy when the cluster is deleted. Currently, CBS is supported (CBS is retained by default). Only valid when deleting cluster.
        """
        return pulumi.get(self, "resource_delete_options")

    @resource_delete_options.setter
    def resource_delete_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceDeleteOptionArgs']]]]):
        pulumi.set(self, "resource_delete_options", value)

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> Optional[pulumi.Input[str]]:
        """
        Container Runtime version.
        """
        return pulumi.get(self, "runtime_version")

    @runtime_version.setter
    def runtime_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_version", value)

    @property
    @pulumi.getter(name="serviceCidr")
    def service_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A network address block of the service. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        """
        return pulumi.get(self, "service_cidr")

    @service_cidr.setter
    def service_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_cidr", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of the cluster.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)

    @property
    @pulumi.getter(name="upgradeInstancesFollowCluster")
    def upgrade_instances_follow_cluster(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether upgrade all instances when cluster_version change. Default is false.
        """
        return pulumi.get(self, "upgrade_instances_follow_cluster")

    @upgrade_instances_follow_cluster.setter
    def upgrade_instances_follow_cluster(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_instances_follow_cluster", value)

    @property
    @pulumi.getter(name="vpcCniType")
    def vpc_cni_type(self) -> Optional[pulumi.Input[str]]:
        """
        Distinguish between shared network card multi-IP mode and independent network card mode. Fill in `tke-route-eni` for shared network card multi-IP mode and `tke-direct-eni` for independent network card mode. The default is shared network card mode. When it is necessary to turn off the vpc-cni container network capability, both `eni_subnet_ids` and `vpc_cni_type` must be set to empty.
        """
        return pulumi.get(self, "vpc_cni_type")

    @vpc_cni_type.setter
    def vpc_cni_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_cni_type", value)

    @property
    @pulumi.getter(name="workerConfigs")
    def worker_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigArgs']]]]:
        """
        Deploy the machine configuration information of the 'WORKER' service, and create <=20 units for common users. The other 'WORK' service are added by 'tencentcloud_kubernetes_scale_worker'.
        """
        return pulumi.get(self, "worker_configs")

    @worker_configs.setter
    def worker_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigArgs']]]]):
        pulumi.set(self, "worker_configs", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 acquire_cluster_admin_role: Optional[pulumi.Input[bool]] = None,
                 auth_options: Optional[pulumi.Input['ClusterAuthOptionsArgs']] = None,
                 auto_upgrade_cluster_level: Optional[pulumi.Input[bool]] = None,
                 base_pod_num: Optional[pulumi.Input[int]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 certification_authority: Optional[pulumi.Input[str]] = None,
                 claim_expired_seconds: Optional[pulumi.Input[int]] = None,
                 cluster_as_enabled: Optional[pulumi.Input[bool]] = None,
                 cluster_audit: Optional[pulumi.Input['ClusterClusterAuditArgs']] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_deploy_type: Optional[pulumi.Input[str]] = None,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_external_endpoint: Optional[pulumi.Input[str]] = None,
                 cluster_extra_args: Optional[pulumi.Input['ClusterClusterExtraArgsArgs']] = None,
                 cluster_internet: Optional[pulumi.Input[bool]] = None,
                 cluster_internet_domain: Optional[pulumi.Input[str]] = None,
                 cluster_internet_security_group: Optional[pulumi.Input[str]] = None,
                 cluster_intranet: Optional[pulumi.Input[bool]] = None,
                 cluster_intranet_domain: Optional[pulumi.Input[str]] = None,
                 cluster_intranet_subnet_id: Optional[pulumi.Input[str]] = None,
                 cluster_ipvs: Optional[pulumi.Input[bool]] = None,
                 cluster_level: Optional[pulumi.Input[str]] = None,
                 cluster_max_pod_num: Optional[pulumi.Input[int]] = None,
                 cluster_max_service_num: Optional[pulumi.Input[int]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_node_num: Optional[pulumi.Input[int]] = None,
                 cluster_os: Optional[pulumi.Input[str]] = None,
                 cluster_os_type: Optional[pulumi.Input[str]] = None,
                 cluster_subnet_id: Optional[pulumi.Input[str]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 container_runtime: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enable_customized_pod_cidr: Optional[pulumi.Input[bool]] = None,
                 eni_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_persistence: Optional[pulumi.Input['ClusterEventPersistenceArgs']] = None,
                 exist_instances: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceArgs']]]] = None,
                 extension_addons: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExtensionAddonArgs']]]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 globe_desired_pod_num: Optional[pulumi.Input[int]] = None,
                 ignore_cluster_cidr_conflict: Optional[pulumi.Input[bool]] = None,
                 ignore_service_cidr_conflict: Optional[pulumi.Input[bool]] = None,
                 instance_delete_mode: Optional[pulumi.Input[str]] = None,
                 is_non_static_ip_mode: Optional[pulumi.Input[bool]] = None,
                 kube_config: Optional[pulumi.Input[str]] = None,
                 kube_config_intranet: Optional[pulumi.Input[str]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 log_agent: Optional[pulumi.Input['ClusterLogAgentArgs']] = None,
                 managed_cluster_internet_security_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 master_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigArgs']]]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 node_name_type: Optional[pulumi.Input[str]] = None,
                 node_pool_global_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNodePoolGlobalConfigArgs']]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pgw_endpoint: Optional[pulumi.Input[str]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_delete_options: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceDeleteOptionArgs']]]] = None,
                 runtime_version: Optional[pulumi.Input[str]] = None,
                 security_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_cidr: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 upgrade_instances_follow_cluster: Optional[pulumi.Input[bool]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 vpc_cni_type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 worker_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigArgs']]]] = None,
                 worker_instances_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerInstancesListArgs']]]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[bool] acquire_cluster_admin_role: If set to true, it will acquire the ClusterRole tke:admin. NOTE: this arguments cannot revoke to `false` after acquired.
        :param pulumi.Input['ClusterAuthOptionsArgs'] auth_options: Specify cluster authentication configuration. Only available for managed cluster and `cluster_version` >= 1.20.
        :param pulumi.Input[bool] auto_upgrade_cluster_level: Whether the cluster level auto upgraded, valid for managed cluster.
        :param pulumi.Input[int] base_pod_num: The number of basic pods. valid when enable_customized_pod_cidr=true.
        :param pulumi.Input[str] cdc_id: CDC ID.
        :param pulumi.Input[str] certification_authority: The certificate used for access.
        :param pulumi.Input[int] claim_expired_seconds: Claim expired seconds to recycle ENI. This field can only set when field `network_type` is 'VPC-CNI'. `claim_expired_seconds` must greater or equal than 300 and less than 15768000.
        :param pulumi.Input[bool] cluster_as_enabled: (**Deprecated**) This argument is deprecated because the TKE auto-scaling group was no longer available. Indicates whether to enable cluster node auto scaling. Default is false.
        :param pulumi.Input['ClusterClusterAuditArgs'] cluster_audit: Specify Cluster Audit config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        :param pulumi.Input[str] cluster_cidr: A network address block of the cluster. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        :param pulumi.Input[str] cluster_deploy_type: Deployment type of the cluster, the available values include: 'MANAGED_CLUSTER' and 'INDEPENDENT_CLUSTER'. Default is 'MANAGED_CLUSTER'.
        :param pulumi.Input[str] cluster_desc: Description of the cluster.
        :param pulumi.Input[str] cluster_external_endpoint: External network address to access.
        :param pulumi.Input['ClusterClusterExtraArgsArgs'] cluster_extra_args: Customized parameters for master component,such as kube-apiserver, kube-controller-manager, kube-scheduler.
        :param pulumi.Input[bool] cluster_internet: Open internet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        :param pulumi.Input[str] cluster_internet_domain: Domain name for cluster Kube-apiserver internet access. Be careful if you modify value of this parameter, the cluster_external_endpoint value may be changed automatically too.
        :param pulumi.Input[str] cluster_internet_security_group: Specify security group, NOTE: This argument must not be empty if cluster internet enabled.
        :param pulumi.Input[bool] cluster_intranet: Open intranet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        :param pulumi.Input[str] cluster_intranet_domain: Domain name for cluster Kube-apiserver intranet access. Be careful if you modify value of this parameter, the pgw_endpoint value may be changed automatically too.
        :param pulumi.Input[str] cluster_intranet_subnet_id: Subnet id who can access this independent cluster, this field must and can only set  when `cluster_intranet` is true. `cluster_intranet_subnet_id` can not modify once be set.
        :param pulumi.Input[bool] cluster_ipvs: Indicates whether `ipvs` is enabled. Default is true. False means `iptables` is enabled.
        :param pulumi.Input[str] cluster_level: Specify cluster level, valid for managed cluster, use data source `kubernetes_get_cluster_levels` to query available levels. Available value examples `L5`, `L20`, `L50`, `L100`, etc.
        :param pulumi.Input[int] cluster_max_pod_num: The maximum number of Pods per node in the cluster. Default is 256. The minimum value is 4. When its power unequal to 2, it will round upward to the closest power of 2.
        :param pulumi.Input[int] cluster_max_service_num: The maximum number of services in the cluster. Default is 256. The range is from 32 to 32768. When its power unequal to 2, it will round upward to the closest power of 2.
        :param pulumi.Input[str] cluster_name: Name of the cluster.
        :param pulumi.Input[int] cluster_node_num: Number of nodes in the cluster.
        :param pulumi.Input[str] cluster_os: Cluster operating system, supports setting public images (the field passes the corresponding image Name) and custom images (the field passes the corresponding image ID). For details, please refer to: https://cloud.tencent.com/document/product/457/68289.
        :param pulumi.Input[str] cluster_os_type: Image type of the cluster os, the available values include: 'GENERAL'. Default is 'GENERAL'.
        :param pulumi.Input[str] cluster_subnet_id: Subnet ID of the cluster, such as: subnet-b3p7d7q5.
        :param pulumi.Input[str] cluster_version: Version of the cluster. Use `kubernetes_get_available_cluster_versions` to get the upgradable cluster version.
        :param pulumi.Input[str] container_runtime: Runtime type of the cluster, the available values include: 'docker' and 'containerd'.The Kubernetes v1.24 has removed dockershim, so please use containerd in v1.24 or higher.Default is 'docker'.
        :param pulumi.Input[bool] deletion_protection: Indicates whether cluster deletion protection is enabled. Default is false.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[str] domain: Domain name for access.
        :param pulumi.Input[bool] enable_customized_pod_cidr: Whether to enable the custom mode of node podCIDR size. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] eni_subnet_ids: Subnet Ids for cluster with VPC-CNI network mode. This field can only set when field `network_type` is 'VPC-CNI'. `eni_subnet_ids` can not empty once be set.
        :param pulumi.Input['ClusterEventPersistenceArgs'] event_persistence: Specify cluster Event Persistence config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceArgs']]] exist_instances: create tke cluster by existed instances.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterExtensionAddonArgs']]] extension_addons: Information of the add-on to be installed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input[int] globe_desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it takes effect for all nodes.
        :param pulumi.Input[bool] ignore_cluster_cidr_conflict: Indicates whether to ignore the cluster cidr conflict error. Default is false.
        :param pulumi.Input[bool] ignore_service_cidr_conflict: Indicates whether to ignore the service cidr conflict error. Only valid in `VPC-CNI` mode.
        :param pulumi.Input[str] instance_delete_mode: The strategy for deleting cluster instances: terminate (destroy instances, only support pay as you go cloud host instances) retain (remove only, keep instances), Default is terminate.
        :param pulumi.Input[bool] is_non_static_ip_mode: Indicates whether non-static ip mode is enabled. Default is false.
        :param pulumi.Input[str] kube_config: Kubernetes config.
        :param pulumi.Input[str] kube_config_intranet: Kubernetes config of private network.
        :param pulumi.Input[str] kube_proxy_mode: Cluster kube-proxy mode, the available values include: 'kube-proxy-bpf'. Default is not set.When set to kube-proxy-bpf, cluster version greater than 1.14 and with Tencent Linux 2.4 is required.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of tke cluster nodes.
        :param pulumi.Input['ClusterLogAgentArgs'] log_agent: Specify cluster log agent config.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] managed_cluster_internet_security_policies: this argument was deprecated, use `cluster_internet_security_group` instead. Security policies for managed cluster internet, like:'192.168.1.0/24' or '113.116.51.27', '0.0.0.0/0' means all. This field can only set when field `cluster_deploy_type` is 'MANAGED_CLUSTER' and `cluster_internet` is true. `managed_cluster_internet_security_policies` can not delete or empty once be set.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigArgs']]] master_configs: Deploy the machine configuration information of the 'MASTER_ETCD' service, and create <=7 units for common users.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] network_type: Cluster network type, the available values include: 'GR' and 'VPC-CNI' and 'CiliumOverlay'. Default is GR.
        :param pulumi.Input[str] node_name_type: Node name type of Cluster, the available values include: 'lan-ip' and 'hostname', Default is 'lan-ip'.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterNodePoolGlobalConfigArgs']]] node_pool_global_configs: Global config effective for all node pools.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[str] pgw_endpoint: The Intranet address used for access.
        :param pulumi.Input[str] pre_start_user_script: Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceDeleteOptionArgs']]] resource_delete_options: The resource deletion policy when the cluster is deleted. Currently, CBS is supported (CBS is retained by default). Only valid when deleting cluster.
        :param pulumi.Input[str] runtime_version: Container Runtime version.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_policies: Access policy.
        :param pulumi.Input[str] service_cidr: A network address block of the service. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the cluster.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        :param pulumi.Input[bool] upgrade_instances_follow_cluster: Indicates whether upgrade all instances when cluster_version change. Default is false.
        :param pulumi.Input[str] user_name: User name of account.
        :param pulumi.Input[str] vpc_cni_type: Distinguish between shared network card multi-IP mode and independent network card mode. Fill in `tke-route-eni` for shared network card multi-IP mode and `tke-direct-eni` for independent network card mode. The default is shared network card mode. When it is necessary to turn off the vpc-cni container network capability, both `eni_subnet_ids` and `vpc_cni_type` must be set to empty.
        :param pulumi.Input[str] vpc_id: Vpc Id of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigArgs']]] worker_configs: Deploy the machine configuration information of the 'WORKER' service, and create <=20 units for common users. The other 'WORK' service are added by 'tencentcloud_kubernetes_scale_worker'.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterWorkerInstancesListArgs']]] worker_instances_lists: An information list of cvm within the 'WORKER' clusters. Each element contains the following attributes:
        """
        if acquire_cluster_admin_role is not None:
            pulumi.set(__self__, "acquire_cluster_admin_role", acquire_cluster_admin_role)
        if auth_options is not None:
            pulumi.set(__self__, "auth_options", auth_options)
        if auto_upgrade_cluster_level is not None:
            pulumi.set(__self__, "auto_upgrade_cluster_level", auto_upgrade_cluster_level)
        if base_pod_num is not None:
            pulumi.set(__self__, "base_pod_num", base_pod_num)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if certification_authority is not None:
            pulumi.set(__self__, "certification_authority", certification_authority)
        if claim_expired_seconds is not None:
            pulumi.set(__self__, "claim_expired_seconds", claim_expired_seconds)
        if cluster_as_enabled is not None:
            warnings.warn("""This argument is deprecated because the TKE auto-scaling group was no longer available.""", DeprecationWarning)
            pulumi.log.warn("""cluster_as_enabled is deprecated: This argument is deprecated because the TKE auto-scaling group was no longer available.""")
        if cluster_as_enabled is not None:
            pulumi.set(__self__, "cluster_as_enabled", cluster_as_enabled)
        if cluster_audit is not None:
            pulumi.set(__self__, "cluster_audit", cluster_audit)
        if cluster_cidr is not None:
            pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        if cluster_deploy_type is not None:
            pulumi.set(__self__, "cluster_deploy_type", cluster_deploy_type)
        if cluster_desc is not None:
            pulumi.set(__self__, "cluster_desc", cluster_desc)
        if cluster_external_endpoint is not None:
            pulumi.set(__self__, "cluster_external_endpoint", cluster_external_endpoint)
        if cluster_extra_args is not None:
            pulumi.set(__self__, "cluster_extra_args", cluster_extra_args)
        if cluster_internet is not None:
            pulumi.set(__self__, "cluster_internet", cluster_internet)
        if cluster_internet_domain is not None:
            pulumi.set(__self__, "cluster_internet_domain", cluster_internet_domain)
        if cluster_internet_security_group is not None:
            pulumi.set(__self__, "cluster_internet_security_group", cluster_internet_security_group)
        if cluster_intranet is not None:
            pulumi.set(__self__, "cluster_intranet", cluster_intranet)
        if cluster_intranet_domain is not None:
            pulumi.set(__self__, "cluster_intranet_domain", cluster_intranet_domain)
        if cluster_intranet_subnet_id is not None:
            pulumi.set(__self__, "cluster_intranet_subnet_id", cluster_intranet_subnet_id)
        if cluster_ipvs is not None:
            pulumi.set(__self__, "cluster_ipvs", cluster_ipvs)
        if cluster_level is not None:
            pulumi.set(__self__, "cluster_level", cluster_level)
        if cluster_max_pod_num is not None:
            pulumi.set(__self__, "cluster_max_pod_num", cluster_max_pod_num)
        if cluster_max_service_num is not None:
            pulumi.set(__self__, "cluster_max_service_num", cluster_max_service_num)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_node_num is not None:
            pulumi.set(__self__, "cluster_node_num", cluster_node_num)
        if cluster_os is not None:
            pulumi.set(__self__, "cluster_os", cluster_os)
        if cluster_os_type is not None:
            pulumi.set(__self__, "cluster_os_type", cluster_os_type)
        if cluster_subnet_id is not None:
            pulumi.set(__self__, "cluster_subnet_id", cluster_subnet_id)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if container_runtime is not None:
            pulumi.set(__self__, "container_runtime", container_runtime)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enable_customized_pod_cidr is not None:
            pulumi.set(__self__, "enable_customized_pod_cidr", enable_customized_pod_cidr)
        if eni_subnet_ids is not None:
            pulumi.set(__self__, "eni_subnet_ids", eni_subnet_ids)
        if event_persistence is not None:
            pulumi.set(__self__, "event_persistence", event_persistence)
        if exist_instances is not None:
            pulumi.set(__self__, "exist_instances", exist_instances)
        if extension_addons is not None:
            pulumi.set(__self__, "extension_addons", extension_addons)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if globe_desired_pod_num is not None:
            pulumi.set(__self__, "globe_desired_pod_num", globe_desired_pod_num)
        if ignore_cluster_cidr_conflict is not None:
            pulumi.set(__self__, "ignore_cluster_cidr_conflict", ignore_cluster_cidr_conflict)
        if ignore_service_cidr_conflict is not None:
            pulumi.set(__self__, "ignore_service_cidr_conflict", ignore_service_cidr_conflict)
        if instance_delete_mode is not None:
            pulumi.set(__self__, "instance_delete_mode", instance_delete_mode)
        if is_non_static_ip_mode is not None:
            pulumi.set(__self__, "is_non_static_ip_mode", is_non_static_ip_mode)
        if kube_config is not None:
            pulumi.set(__self__, "kube_config", kube_config)
        if kube_config_intranet is not None:
            pulumi.set(__self__, "kube_config_intranet", kube_config_intranet)
        if kube_proxy_mode is not None:
            pulumi.set(__self__, "kube_proxy_mode", kube_proxy_mode)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if log_agent is not None:
            pulumi.set(__self__, "log_agent", log_agent)
        if managed_cluster_internet_security_policies is not None:
            warnings.warn("""this argument was deprecated, use `cluster_internet_security_group` instead.""", DeprecationWarning)
            pulumi.log.warn("""managed_cluster_internet_security_policies is deprecated: this argument was deprecated, use `cluster_internet_security_group` instead.""")
        if managed_cluster_internet_security_policies is not None:
            pulumi.set(__self__, "managed_cluster_internet_security_policies", managed_cluster_internet_security_policies)
        if master_configs is not None:
            pulumi.set(__self__, "master_configs", master_configs)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if node_name_type is not None:
            pulumi.set(__self__, "node_name_type", node_name_type)
        if node_pool_global_configs is not None:
            pulumi.set(__self__, "node_pool_global_configs", node_pool_global_configs)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pgw_endpoint is not None:
            pulumi.set(__self__, "pgw_endpoint", pgw_endpoint)
        if pre_start_user_script is not None:
            pulumi.set(__self__, "pre_start_user_script", pre_start_user_script)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_delete_options is not None:
            pulumi.set(__self__, "resource_delete_options", resource_delete_options)
        if runtime_version is not None:
            pulumi.set(__self__, "runtime_version", runtime_version)
        if security_policies is not None:
            pulumi.set(__self__, "security_policies", security_policies)
        if service_cidr is not None:
            pulumi.set(__self__, "service_cidr", service_cidr)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)
        if upgrade_instances_follow_cluster is not None:
            pulumi.set(__self__, "upgrade_instances_follow_cluster", upgrade_instances_follow_cluster)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if vpc_cni_type is not None:
            pulumi.set(__self__, "vpc_cni_type", vpc_cni_type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if worker_configs is not None:
            pulumi.set(__self__, "worker_configs", worker_configs)
        if worker_instances_lists is not None:
            pulumi.set(__self__, "worker_instances_lists", worker_instances_lists)

    @property
    @pulumi.getter(name="acquireClusterAdminRole")
    def acquire_cluster_admin_role(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, it will acquire the ClusterRole tke:admin. NOTE: this arguments cannot revoke to `false` after acquired.
        """
        return pulumi.get(self, "acquire_cluster_admin_role")

    @acquire_cluster_admin_role.setter
    def acquire_cluster_admin_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acquire_cluster_admin_role", value)

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> Optional[pulumi.Input['ClusterAuthOptionsArgs']]:
        """
        Specify cluster authentication configuration. Only available for managed cluster and `cluster_version` >= 1.20.
        """
        return pulumi.get(self, "auth_options")

    @auth_options.setter
    def auth_options(self, value: Optional[pulumi.Input['ClusterAuthOptionsArgs']]):
        pulumi.set(self, "auth_options", value)

    @property
    @pulumi.getter(name="autoUpgradeClusterLevel")
    def auto_upgrade_cluster_level(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the cluster level auto upgraded, valid for managed cluster.
        """
        return pulumi.get(self, "auto_upgrade_cluster_level")

    @auto_upgrade_cluster_level.setter
    def auto_upgrade_cluster_level(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_upgrade_cluster_level", value)

    @property
    @pulumi.getter(name="basePodNum")
    def base_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of basic pods. valid when enable_customized_pod_cidr=true.
        """
        return pulumi.get(self, "base_pod_num")

    @base_pod_num.setter
    def base_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_pod_num", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        CDC ID.
        """
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="certificationAuthority")
    def certification_authority(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate used for access.
        """
        return pulumi.get(self, "certification_authority")

    @certification_authority.setter
    def certification_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certification_authority", value)

    @property
    @pulumi.getter(name="claimExpiredSeconds")
    def claim_expired_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Claim expired seconds to recycle ENI. This field can only set when field `network_type` is 'VPC-CNI'. `claim_expired_seconds` must greater or equal than 300 and less than 15768000.
        """
        return pulumi.get(self, "claim_expired_seconds")

    @claim_expired_seconds.setter
    def claim_expired_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "claim_expired_seconds", value)

    @property
    @pulumi.getter(name="clusterAsEnabled")
    def cluster_as_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (**Deprecated**) This argument is deprecated because the TKE auto-scaling group was no longer available. Indicates whether to enable cluster node auto scaling. Default is false.
        """
        warnings.warn("""This argument is deprecated because the TKE auto-scaling group was no longer available.""", DeprecationWarning)
        pulumi.log.warn("""cluster_as_enabled is deprecated: This argument is deprecated because the TKE auto-scaling group was no longer available.""")

        return pulumi.get(self, "cluster_as_enabled")

    @cluster_as_enabled.setter
    def cluster_as_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_as_enabled", value)

    @property
    @pulumi.getter(name="clusterAudit")
    def cluster_audit(self) -> Optional[pulumi.Input['ClusterClusterAuditArgs']]:
        """
        Specify Cluster Audit config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        """
        return pulumi.get(self, "cluster_audit")

    @cluster_audit.setter
    def cluster_audit(self, value: Optional[pulumi.Input['ClusterClusterAuditArgs']]):
        pulumi.set(self, "cluster_audit", value)

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A network address block of the cluster. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        """
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="clusterDeployType")
    def cluster_deploy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment type of the cluster, the available values include: 'MANAGED_CLUSTER' and 'INDEPENDENT_CLUSTER'. Default is 'MANAGED_CLUSTER'.
        """
        return pulumi.get(self, "cluster_deploy_type")

    @cluster_deploy_type.setter
    def cluster_deploy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_deploy_type", value)

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the cluster.
        """
        return pulumi.get(self, "cluster_desc")

    @cluster_desc.setter
    def cluster_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_desc", value)

    @property
    @pulumi.getter(name="clusterExternalEndpoint")
    def cluster_external_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        External network address to access.
        """
        return pulumi.get(self, "cluster_external_endpoint")

    @cluster_external_endpoint.setter
    def cluster_external_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_external_endpoint", value)

    @property
    @pulumi.getter(name="clusterExtraArgs")
    def cluster_extra_args(self) -> Optional[pulumi.Input['ClusterClusterExtraArgsArgs']]:
        """
        Customized parameters for master component,such as kube-apiserver, kube-controller-manager, kube-scheduler.
        """
        return pulumi.get(self, "cluster_extra_args")

    @cluster_extra_args.setter
    def cluster_extra_args(self, value: Optional[pulumi.Input['ClusterClusterExtraArgsArgs']]):
        pulumi.set(self, "cluster_extra_args", value)

    @property
    @pulumi.getter(name="clusterInternet")
    def cluster_internet(self) -> Optional[pulumi.Input[bool]]:
        """
        Open internet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        """
        return pulumi.get(self, "cluster_internet")

    @cluster_internet.setter
    def cluster_internet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_internet", value)

    @property
    @pulumi.getter(name="clusterInternetDomain")
    def cluster_internet_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name for cluster Kube-apiserver internet access. Be careful if you modify value of this parameter, the cluster_external_endpoint value may be changed automatically too.
        """
        return pulumi.get(self, "cluster_internet_domain")

    @cluster_internet_domain.setter
    def cluster_internet_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_internet_domain", value)

    @property
    @pulumi.getter(name="clusterInternetSecurityGroup")
    def cluster_internet_security_group(self) -> Optional[pulumi.Input[str]]:
        """
        Specify security group, NOTE: This argument must not be empty if cluster internet enabled.
        """
        return pulumi.get(self, "cluster_internet_security_group")

    @cluster_internet_security_group.setter
    def cluster_internet_security_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_internet_security_group", value)

    @property
    @pulumi.getter(name="clusterIntranet")
    def cluster_intranet(self) -> Optional[pulumi.Input[bool]]:
        """
        Open intranet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        """
        return pulumi.get(self, "cluster_intranet")

    @cluster_intranet.setter
    def cluster_intranet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_intranet", value)

    @property
    @pulumi.getter(name="clusterIntranetDomain")
    def cluster_intranet_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name for cluster Kube-apiserver intranet access. Be careful if you modify value of this parameter, the pgw_endpoint value may be changed automatically too.
        """
        return pulumi.get(self, "cluster_intranet_domain")

    @cluster_intranet_domain.setter
    def cluster_intranet_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_intranet_domain", value)

    @property
    @pulumi.getter(name="clusterIntranetSubnetId")
    def cluster_intranet_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet id who can access this independent cluster, this field must and can only set  when `cluster_intranet` is true. `cluster_intranet_subnet_id` can not modify once be set.
        """
        return pulumi.get(self, "cluster_intranet_subnet_id")

    @cluster_intranet_subnet_id.setter
    def cluster_intranet_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_intranet_subnet_id", value)

    @property
    @pulumi.getter(name="clusterIpvs")
    def cluster_ipvs(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether `ipvs` is enabled. Default is true. False means `iptables` is enabled.
        """
        return pulumi.get(self, "cluster_ipvs")

    @cluster_ipvs.setter
    def cluster_ipvs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_ipvs", value)

    @property
    @pulumi.getter(name="clusterLevel")
    def cluster_level(self) -> Optional[pulumi.Input[str]]:
        """
        Specify cluster level, valid for managed cluster, use data source `kubernetes_get_cluster_levels` to query available levels. Available value examples `L5`, `L20`, `L50`, `L100`, etc.
        """
        return pulumi.get(self, "cluster_level")

    @cluster_level.setter
    def cluster_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_level", value)

    @property
    @pulumi.getter(name="clusterMaxPodNum")
    def cluster_max_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of Pods per node in the cluster. Default is 256. The minimum value is 4. When its power unequal to 2, it will round upward to the closest power of 2.
        """
        return pulumi.get(self, "cluster_max_pod_num")

    @cluster_max_pod_num.setter
    def cluster_max_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cluster_max_pod_num", value)

    @property
    @pulumi.getter(name="clusterMaxServiceNum")
    def cluster_max_service_num(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of services in the cluster. Default is 256. The range is from 32 to 32768. When its power unequal to 2, it will round upward to the closest power of 2.
        """
        return pulumi.get(self, "cluster_max_service_num")

    @cluster_max_service_num.setter
    def cluster_max_service_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cluster_max_service_num", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterNodeNum")
    def cluster_node_num(self) -> Optional[pulumi.Input[int]]:
        """
        Number of nodes in the cluster.
        """
        return pulumi.get(self, "cluster_node_num")

    @cluster_node_num.setter
    def cluster_node_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cluster_node_num", value)

    @property
    @pulumi.getter(name="clusterOs")
    def cluster_os(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster operating system, supports setting public images (the field passes the corresponding image Name) and custom images (the field passes the corresponding image ID). For details, please refer to: https://cloud.tencent.com/document/product/457/68289.
        """
        return pulumi.get(self, "cluster_os")

    @cluster_os.setter
    def cluster_os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_os", value)

    @property
    @pulumi.getter(name="clusterOsType")
    def cluster_os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Image type of the cluster os, the available values include: 'GENERAL'. Default is 'GENERAL'.
        """
        return pulumi.get(self, "cluster_os_type")

    @cluster_os_type.setter
    def cluster_os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_os_type", value)

    @property
    @pulumi.getter(name="clusterSubnetId")
    def cluster_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet ID of the cluster, such as: subnet-b3p7d7q5.
        """
        return pulumi.get(self, "cluster_subnet_id")

    @cluster_subnet_id.setter
    def cluster_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_subnet_id", value)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the cluster. Use `kubernetes_get_available_cluster_versions` to get the upgradable cluster version.
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="containerRuntime")
    def container_runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Runtime type of the cluster, the available values include: 'docker' and 'containerd'.The Kubernetes v1.24 has removed dockershim, so please use containerd in v1.24 or higher.Default is 'docker'.
        """
        return pulumi.get(self, "container_runtime")

    @container_runtime.setter
    def container_runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_runtime", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether cluster deletion protection is enabled. Default is false.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name for access.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="enableCustomizedPodCidr")
    def enable_customized_pod_cidr(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the custom mode of node podCIDR size. Default is false.
        """
        return pulumi.get(self, "enable_customized_pod_cidr")

    @enable_customized_pod_cidr.setter
    def enable_customized_pod_cidr(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_customized_pod_cidr", value)

    @property
    @pulumi.getter(name="eniSubnetIds")
    def eni_subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Subnet Ids for cluster with VPC-CNI network mode. This field can only set when field `network_type` is 'VPC-CNI'. `eni_subnet_ids` can not empty once be set.
        """
        return pulumi.get(self, "eni_subnet_ids")

    @eni_subnet_ids.setter
    def eni_subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "eni_subnet_ids", value)

    @property
    @pulumi.getter(name="eventPersistence")
    def event_persistence(self) -> Optional[pulumi.Input['ClusterEventPersistenceArgs']]:
        """
        Specify cluster Event Persistence config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        """
        return pulumi.get(self, "event_persistence")

    @event_persistence.setter
    def event_persistence(self, value: Optional[pulumi.Input['ClusterEventPersistenceArgs']]):
        pulumi.set(self, "event_persistence", value)

    @property
    @pulumi.getter(name="existInstances")
    def exist_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceArgs']]]]:
        """
        create tke cluster by existed instances.
        """
        return pulumi.get(self, "exist_instances")

    @exist_instances.setter
    def exist_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceArgs']]]]):
        pulumi.set(self, "exist_instances", value)

    @property
    @pulumi.getter(name="extensionAddons")
    def extension_addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExtensionAddonArgs']]]]:
        """
        Information of the add-on to be installed.
        """
        return pulumi.get(self, "extension_addons")

    @extension_addons.setter
    def extension_addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExtensionAddonArgs']]]]):
        pulumi.set(self, "extension_addons", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="globeDesiredPodNum")
    def globe_desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it takes effect for all nodes.
        """
        return pulumi.get(self, "globe_desired_pod_num")

    @globe_desired_pod_num.setter
    def globe_desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "globe_desired_pod_num", value)

    @property
    @pulumi.getter(name="ignoreClusterCidrConflict")
    def ignore_cluster_cidr_conflict(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to ignore the cluster cidr conflict error. Default is false.
        """
        return pulumi.get(self, "ignore_cluster_cidr_conflict")

    @ignore_cluster_cidr_conflict.setter
    def ignore_cluster_cidr_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_cluster_cidr_conflict", value)

    @property
    @pulumi.getter(name="ignoreServiceCidrConflict")
    def ignore_service_cidr_conflict(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to ignore the service cidr conflict error. Only valid in `VPC-CNI` mode.
        """
        return pulumi.get(self, "ignore_service_cidr_conflict")

    @ignore_service_cidr_conflict.setter
    def ignore_service_cidr_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_service_cidr_conflict", value)

    @property
    @pulumi.getter(name="instanceDeleteMode")
    def instance_delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The strategy for deleting cluster instances: terminate (destroy instances, only support pay as you go cloud host instances) retain (remove only, keep instances), Default is terminate.
        """
        return pulumi.get(self, "instance_delete_mode")

    @instance_delete_mode.setter
    def instance_delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_delete_mode", value)

    @property
    @pulumi.getter(name="isNonStaticIpMode")
    def is_non_static_ip_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether non-static ip mode is enabled. Default is false.
        """
        return pulumi.get(self, "is_non_static_ip_mode")

    @is_non_static_ip_mode.setter
    def is_non_static_ip_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_non_static_ip_mode", value)

    @property
    @pulumi.getter(name="kubeConfig")
    def kube_config(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes config.
        """
        return pulumi.get(self, "kube_config")

    @kube_config.setter
    def kube_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_config", value)

    @property
    @pulumi.getter(name="kubeConfigIntranet")
    def kube_config_intranet(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes config of private network.
        """
        return pulumi.get(self, "kube_config_intranet")

    @kube_config_intranet.setter
    def kube_config_intranet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_config_intranet", value)

    @property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster kube-proxy mode, the available values include: 'kube-proxy-bpf'. Default is not set.When set to kube-proxy-bpf, cluster version greater than 1.14 and with Tencent Linux 2.4 is required.
        """
        return pulumi.get(self, "kube_proxy_mode")

    @kube_proxy_mode.setter
    def kube_proxy_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_proxy_mode", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels of tke cluster nodes.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="logAgent")
    def log_agent(self) -> Optional[pulumi.Input['ClusterLogAgentArgs']]:
        """
        Specify cluster log agent config.
        """
        return pulumi.get(self, "log_agent")

    @log_agent.setter
    def log_agent(self, value: Optional[pulumi.Input['ClusterLogAgentArgs']]):
        pulumi.set(self, "log_agent", value)

    @property
    @pulumi.getter(name="managedClusterInternetSecurityPolicies")
    def managed_cluster_internet_security_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        this argument was deprecated, use `cluster_internet_security_group` instead. Security policies for managed cluster internet, like:'192.168.1.0/24' or '113.116.51.27', '0.0.0.0/0' means all. This field can only set when field `cluster_deploy_type` is 'MANAGED_CLUSTER' and `cluster_internet` is true. `managed_cluster_internet_security_policies` can not delete or empty once be set.
        """
        warnings.warn("""this argument was deprecated, use `cluster_internet_security_group` instead.""", DeprecationWarning)
        pulumi.log.warn("""managed_cluster_internet_security_policies is deprecated: this argument was deprecated, use `cluster_internet_security_group` instead.""")

        return pulumi.get(self, "managed_cluster_internet_security_policies")

    @managed_cluster_internet_security_policies.setter
    def managed_cluster_internet_security_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "managed_cluster_internet_security_policies", value)

    @property
    @pulumi.getter(name="masterConfigs")
    def master_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigArgs']]]]:
        """
        Deploy the machine configuration information of the 'MASTER_ETCD' service, and create <=7 units for common users.
        """
        return pulumi.get(self, "master_configs")

    @master_configs.setter
    def master_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigArgs']]]]):
        pulumi.set(self, "master_configs", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster network type, the available values include: 'GR' and 'VPC-CNI' and 'CiliumOverlay'. Default is GR.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="nodeNameType")
    def node_name_type(self) -> Optional[pulumi.Input[str]]:
        """
        Node name type of Cluster, the available values include: 'lan-ip' and 'hostname', Default is 'lan-ip'.
        """
        return pulumi.get(self, "node_name_type")

    @node_name_type.setter
    def node_name_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_name_type", value)

    @property
    @pulumi.getter(name="nodePoolGlobalConfigs")
    def node_pool_global_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNodePoolGlobalConfigArgs']]]]:
        """
        Global config effective for all node pools.
        """
        return pulumi.get(self, "node_pool_global_configs")

    @node_pool_global_configs.setter
    def node_pool_global_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterNodePoolGlobalConfigArgs']]]]):
        pulumi.set(self, "node_pool_global_configs", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pgwEndpoint")
    def pgw_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The Intranet address used for access.
        """
        return pulumi.get(self, "pgw_endpoint")

    @pgw_endpoint.setter
    def pgw_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pgw_endpoint", value)

    @property
    @pulumi.getter(name="preStartUserScript")
    def pre_start_user_script(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        """
        return pulumi.get(self, "pre_start_user_script")

    @pre_start_user_script.setter
    def pre_start_user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_start_user_script", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceDeleteOptions")
    def resource_delete_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceDeleteOptionArgs']]]]:
        """
        The resource deletion policy when the cluster is deleted. Currently, CBS is supported (CBS is retained by default). Only valid when deleting cluster.
        """
        return pulumi.get(self, "resource_delete_options")

    @resource_delete_options.setter
    def resource_delete_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceDeleteOptionArgs']]]]):
        pulumi.set(self, "resource_delete_options", value)

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> Optional[pulumi.Input[str]]:
        """
        Container Runtime version.
        """
        return pulumi.get(self, "runtime_version")

    @runtime_version.setter
    def runtime_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_version", value)

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Access policy.
        """
        return pulumi.get(self, "security_policies")

    @security_policies.setter
    def security_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_policies", value)

    @property
    @pulumi.getter(name="serviceCidr")
    def service_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A network address block of the service. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        """
        return pulumi.get(self, "service_cidr")

    @service_cidr.setter
    def service_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_cidr", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of the cluster.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)

    @property
    @pulumi.getter(name="upgradeInstancesFollowCluster")
    def upgrade_instances_follow_cluster(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether upgrade all instances when cluster_version change. Default is false.
        """
        return pulumi.get(self, "upgrade_instances_follow_cluster")

    @upgrade_instances_follow_cluster.setter
    def upgrade_instances_follow_cluster(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_instances_follow_cluster", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name of account.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="vpcCniType")
    def vpc_cni_type(self) -> Optional[pulumi.Input[str]]:
        """
        Distinguish between shared network card multi-IP mode and independent network card mode. Fill in `tke-route-eni` for shared network card multi-IP mode and `tke-direct-eni` for independent network card mode. The default is shared network card mode. When it is necessary to turn off the vpc-cni container network capability, both `eni_subnet_ids` and `vpc_cni_type` must be set to empty.
        """
        return pulumi.get(self, "vpc_cni_type")

    @vpc_cni_type.setter
    def vpc_cni_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_cni_type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc Id of the cluster.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="workerConfigs")
    def worker_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigArgs']]]]:
        """
        Deploy the machine configuration information of the 'WORKER' service, and create <=20 units for common users. The other 'WORK' service are added by 'tencentcloud_kubernetes_scale_worker'.
        """
        return pulumi.get(self, "worker_configs")

    @worker_configs.setter
    def worker_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigArgs']]]]):
        pulumi.set(self, "worker_configs", value)

    @property
    @pulumi.getter(name="workerInstancesLists")
    def worker_instances_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerInstancesListArgs']]]]:
        """
        An information list of cvm within the 'WORKER' clusters. Each element contains the following attributes:
        """
        return pulumi.get(self, "worker_instances_lists")

    @worker_instances_lists.setter
    def worker_instances_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerInstancesListArgs']]]]):
        pulumi.set(self, "worker_instances_lists", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acquire_cluster_admin_role: Optional[pulumi.Input[bool]] = None,
                 auth_options: Optional[pulumi.Input[pulumi.InputType['ClusterAuthOptionsArgs']]] = None,
                 auto_upgrade_cluster_level: Optional[pulumi.Input[bool]] = None,
                 base_pod_num: Optional[pulumi.Input[int]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 claim_expired_seconds: Optional[pulumi.Input[int]] = None,
                 cluster_audit: Optional[pulumi.Input[pulumi.InputType['ClusterClusterAuditArgs']]] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_deploy_type: Optional[pulumi.Input[str]] = None,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_extra_args: Optional[pulumi.Input[pulumi.InputType['ClusterClusterExtraArgsArgs']]] = None,
                 cluster_internet: Optional[pulumi.Input[bool]] = None,
                 cluster_internet_domain: Optional[pulumi.Input[str]] = None,
                 cluster_internet_security_group: Optional[pulumi.Input[str]] = None,
                 cluster_intranet: Optional[pulumi.Input[bool]] = None,
                 cluster_intranet_domain: Optional[pulumi.Input[str]] = None,
                 cluster_intranet_subnet_id: Optional[pulumi.Input[str]] = None,
                 cluster_ipvs: Optional[pulumi.Input[bool]] = None,
                 cluster_level: Optional[pulumi.Input[str]] = None,
                 cluster_max_pod_num: Optional[pulumi.Input[int]] = None,
                 cluster_max_service_num: Optional[pulumi.Input[int]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_os: Optional[pulumi.Input[str]] = None,
                 cluster_os_type: Optional[pulumi.Input[str]] = None,
                 cluster_subnet_id: Optional[pulumi.Input[str]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 container_runtime: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 enable_customized_pod_cidr: Optional[pulumi.Input[bool]] = None,
                 eni_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_persistence: Optional[pulumi.Input[pulumi.InputType['ClusterEventPersistenceArgs']]] = None,
                 exist_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterExistInstanceArgs']]]]] = None,
                 extension_addons: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterExtensionAddonArgs']]]]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 globe_desired_pod_num: Optional[pulumi.Input[int]] = None,
                 ignore_cluster_cidr_conflict: Optional[pulumi.Input[bool]] = None,
                 ignore_service_cidr_conflict: Optional[pulumi.Input[bool]] = None,
                 instance_delete_mode: Optional[pulumi.Input[str]] = None,
                 is_non_static_ip_mode: Optional[pulumi.Input[bool]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 log_agent: Optional[pulumi.Input[pulumi.InputType['ClusterLogAgentArgs']]] = None,
                 managed_cluster_internet_security_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 master_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMasterConfigArgs']]]]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 node_name_type: Optional[pulumi.Input[str]] = None,
                 node_pool_global_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterNodePoolGlobalConfigArgs']]]]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_delete_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterResourceDeleteOptionArgs']]]]] = None,
                 runtime_version: Optional[pulumi.Input[str]] = None,
                 service_cidr: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 upgrade_instances_follow_cluster: Optional[pulumi.Input[bool]] = None,
                 vpc_cni_type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 worker_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterWorkerConfigArgs']]]]] = None,
                 __props__=None):
        """
        ## Example Usage

        ### Use node pool global config

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        vpc = config.get("vpc")
        if vpc is None:
            vpc = "vpc-dk8zmwuf"
        subnet = config.get("subnet")
        if subnet is None:
            subnet = "subnet-pqfek0t8"
        default_instance_type = config.get("defaultInstanceType")
        if default_instance_type is None:
            default_instance_type = "SA1.LARGE8"
        test_node_pool_global_config = tencentcloud.kubernetes.Cluster("testNodePoolGlobalConfig",
            vpc_id=vpc,
            cluster_cidr="10.1.0.0/16",
            cluster_max_pod_num=32,
            cluster_name="test",
            cluster_desc="test cluster desc",
            cluster_max_service_num=32,
            cluster_internet=True,
            cluster_deploy_type="MANAGED_CLUSTER",
            worker_configs=[tencentcloud.kubernetes.ClusterWorkerConfigArgs(
                count=1,
                availability_zone=availability_zone,
                instance_type=default_instance_type,
                system_disk_type="CLOUD_SSD",
                system_disk_size=60,
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=100,
                public_ip_assigned=True,
                subnet_id=subnet,
                data_disks=[tencentcloud.kubernetes.ClusterWorkerConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                user_data="dGVzdA==",
                key_ids="skey-11112222",
            )],
            node_pool_global_configs=[tencentcloud.kubernetes.ClusterNodePoolGlobalConfigArgs(
                is_scale_in_enabled=True,
                expander="random",
                ignore_daemon_sets_utilization=True,
                max_concurrent_scale_in=5,
                scale_in_delay=15,
                scale_in_unneeded_time=15,
                scale_in_utilization_threshold=30,
                skip_nodes_with_local_storage=False,
                skip_nodes_with_system_pods=True,
            )],
            labels={
                "test1": "test1",
                "test2": "test2",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Using VPC-CNI network type

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-1"
        vpc = config.get("vpc")
        if vpc is None:
            vpc = "vpc-r1m1fyx5"
        default_instance_type = config.get("defaultInstanceType")
        if default_instance_type is None:
            default_instance_type = "SA2.SMALL2"
        managed_cluster = tencentcloud.kubernetes.Cluster("managedCluster",
            vpc_id=vpc,
            cluster_max_pod_num=32,
            cluster_name="test",
            cluster_desc="test cluster desc",
            cluster_max_service_num=256,
            cluster_internet=True,
            cluster_deploy_type="MANAGED_CLUSTER",
            network_type="VPC-CNI",
            eni_subnet_ids=["subnet-bk1etlyu"],
            service_cidr="10.1.0.0/24",
            worker_configs=[tencentcloud.kubernetes.ClusterWorkerConfigArgs(
                count=1,
                availability_zone=availability_zone,
                instance_type=default_instance_type,
                system_disk_type="CLOUD_PREMIUM",
                system_disk_size=60,
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=100,
                public_ip_assigned=True,
                subnet_id="subnet-t5dv27rs",
                data_disks=[tencentcloud.kubernetes.ClusterWorkerConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                user_data="dGVzdA==",
                key_ids="skey-11112222",
            )],
            labels={
                "test1": "test1",
                "test2": "test2",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Using ops options

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        managed_cluster = tencentcloud.kubernetes.Cluster("managedCluster",
            cluster_audit=tencentcloud.kubernetes.ClusterClusterAuditArgs(
                enabled=True,
                log_set_id="",
                topic_id="",
            ),
            event_persistence=tencentcloud.kubernetes.ClusterEventPersistenceArgs(
                enabled=True,
                log_set_id="",
                topic_id="",
            ),
            log_agent=tencentcloud.kubernetes.ClusterLogAgentArgs(
                enabled=True,
                kubelet_root_dir="",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Use delete options to delete CBS when deleting the Cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.kubernetes.Cluster("example",
            vpc_id=local["first_vpc_id"],
            cluster_cidr=var["example_cluster_cidr"],
            cluster_max_pod_num=32,
            cluster_name="example",
            cluster_desc="example for tke cluster",
            cluster_max_service_num=32,
            cluster_level="L50",
            auto_upgrade_cluster_level=True,
            cluster_internet=False,
            cluster_version="1.30.0",
            cluster_os="tlinux2.2(tkernel3)x86_64",
            cluster_deploy_type="MANAGED_CLUSTER",
            container_runtime="containerd",
            docker_graph_path="/var/lib/containerd",
            tags={
                "demo": "test",
            },
            worker_configs=[tencentcloud.kubernetes.ClusterWorkerConfigArgs(
                count=1,
                availability_zone=var["availability_zone_first"],
                instance_type="SA2.MEDIUM2",
                system_disk_type="CLOUD_SSD",
                system_disk_size=60,
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=100,
                public_ip_assigned=True,
                subnet_id=local["first_subnet_id"],
                data_disks=[tencentcloud.kubernetes.ClusterWorkerConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                user_data="dGVzdA==",
                disaster_recover_group_ids=[],
                security_group_ids=[],
                key_ids=[],
                cam_role_name="CVM_QcsRole",
                password="ZZXXccvv1212",
            )],
            resource_delete_options=[tencentcloud.kubernetes.ClusterResourceDeleteOptionArgs(
                resource_type="CBS",
                delete_mode="terminate",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tke cluster can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Kubernetes/cluster:Cluster example cls-n2h4jbtk
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acquire_cluster_admin_role: If set to true, it will acquire the ClusterRole tke:admin. NOTE: this arguments cannot revoke to `false` after acquired.
        :param pulumi.Input[pulumi.InputType['ClusterAuthOptionsArgs']] auth_options: Specify cluster authentication configuration. Only available for managed cluster and `cluster_version` >= 1.20.
        :param pulumi.Input[bool] auto_upgrade_cluster_level: Whether the cluster level auto upgraded, valid for managed cluster.
        :param pulumi.Input[int] base_pod_num: The number of basic pods. valid when enable_customized_pod_cidr=true.
        :param pulumi.Input[str] cdc_id: CDC ID.
        :param pulumi.Input[int] claim_expired_seconds: Claim expired seconds to recycle ENI. This field can only set when field `network_type` is 'VPC-CNI'. `claim_expired_seconds` must greater or equal than 300 and less than 15768000.
        :param pulumi.Input[pulumi.InputType['ClusterClusterAuditArgs']] cluster_audit: Specify Cluster Audit config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        :param pulumi.Input[str] cluster_cidr: A network address block of the cluster. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        :param pulumi.Input[str] cluster_deploy_type: Deployment type of the cluster, the available values include: 'MANAGED_CLUSTER' and 'INDEPENDENT_CLUSTER'. Default is 'MANAGED_CLUSTER'.
        :param pulumi.Input[str] cluster_desc: Description of the cluster.
        :param pulumi.Input[pulumi.InputType['ClusterClusterExtraArgsArgs']] cluster_extra_args: Customized parameters for master component,such as kube-apiserver, kube-controller-manager, kube-scheduler.
        :param pulumi.Input[bool] cluster_internet: Open internet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        :param pulumi.Input[str] cluster_internet_domain: Domain name for cluster Kube-apiserver internet access. Be careful if you modify value of this parameter, the cluster_external_endpoint value may be changed automatically too.
        :param pulumi.Input[str] cluster_internet_security_group: Specify security group, NOTE: This argument must not be empty if cluster internet enabled.
        :param pulumi.Input[bool] cluster_intranet: Open intranet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        :param pulumi.Input[str] cluster_intranet_domain: Domain name for cluster Kube-apiserver intranet access. Be careful if you modify value of this parameter, the pgw_endpoint value may be changed automatically too.
        :param pulumi.Input[str] cluster_intranet_subnet_id: Subnet id who can access this independent cluster, this field must and can only set  when `cluster_intranet` is true. `cluster_intranet_subnet_id` can not modify once be set.
        :param pulumi.Input[bool] cluster_ipvs: Indicates whether `ipvs` is enabled. Default is true. False means `iptables` is enabled.
        :param pulumi.Input[str] cluster_level: Specify cluster level, valid for managed cluster, use data source `kubernetes_get_cluster_levels` to query available levels. Available value examples `L5`, `L20`, `L50`, `L100`, etc.
        :param pulumi.Input[int] cluster_max_pod_num: The maximum number of Pods per node in the cluster. Default is 256. The minimum value is 4. When its power unequal to 2, it will round upward to the closest power of 2.
        :param pulumi.Input[int] cluster_max_service_num: The maximum number of services in the cluster. Default is 256. The range is from 32 to 32768. When its power unequal to 2, it will round upward to the closest power of 2.
        :param pulumi.Input[str] cluster_name: Name of the cluster.
        :param pulumi.Input[str] cluster_os: Cluster operating system, supports setting public images (the field passes the corresponding image Name) and custom images (the field passes the corresponding image ID). For details, please refer to: https://cloud.tencent.com/document/product/457/68289.
        :param pulumi.Input[str] cluster_os_type: Image type of the cluster os, the available values include: 'GENERAL'. Default is 'GENERAL'.
        :param pulumi.Input[str] cluster_subnet_id: Subnet ID of the cluster, such as: subnet-b3p7d7q5.
        :param pulumi.Input[str] cluster_version: Version of the cluster. Use `kubernetes_get_available_cluster_versions` to get the upgradable cluster version.
        :param pulumi.Input[str] container_runtime: Runtime type of the cluster, the available values include: 'docker' and 'containerd'.The Kubernetes v1.24 has removed dockershim, so please use containerd in v1.24 or higher.Default is 'docker'.
        :param pulumi.Input[bool] deletion_protection: Indicates whether cluster deletion protection is enabled. Default is false.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[bool] enable_customized_pod_cidr: Whether to enable the custom mode of node podCIDR size. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] eni_subnet_ids: Subnet Ids for cluster with VPC-CNI network mode. This field can only set when field `network_type` is 'VPC-CNI'. `eni_subnet_ids` can not empty once be set.
        :param pulumi.Input[pulumi.InputType['ClusterEventPersistenceArgs']] event_persistence: Specify cluster Event Persistence config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterExistInstanceArgs']]]] exist_instances: create tke cluster by existed instances.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterExtensionAddonArgs']]]] extension_addons: Information of the add-on to be installed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input[int] globe_desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it takes effect for all nodes.
        :param pulumi.Input[bool] ignore_cluster_cidr_conflict: Indicates whether to ignore the cluster cidr conflict error. Default is false.
        :param pulumi.Input[bool] ignore_service_cidr_conflict: Indicates whether to ignore the service cidr conflict error. Only valid in `VPC-CNI` mode.
        :param pulumi.Input[str] instance_delete_mode: The strategy for deleting cluster instances: terminate (destroy instances, only support pay as you go cloud host instances) retain (remove only, keep instances), Default is terminate.
        :param pulumi.Input[bool] is_non_static_ip_mode: Indicates whether non-static ip mode is enabled. Default is false.
        :param pulumi.Input[str] kube_proxy_mode: Cluster kube-proxy mode, the available values include: 'kube-proxy-bpf'. Default is not set.When set to kube-proxy-bpf, cluster version greater than 1.14 and with Tencent Linux 2.4 is required.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of tke cluster nodes.
        :param pulumi.Input[pulumi.InputType['ClusterLogAgentArgs']] log_agent: Specify cluster log agent config.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] managed_cluster_internet_security_policies: this argument was deprecated, use `cluster_internet_security_group` instead. Security policies for managed cluster internet, like:'192.168.1.0/24' or '113.116.51.27', '0.0.0.0/0' means all. This field can only set when field `cluster_deploy_type` is 'MANAGED_CLUSTER' and `cluster_internet` is true. `managed_cluster_internet_security_policies` can not delete or empty once be set.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMasterConfigArgs']]]] master_configs: Deploy the machine configuration information of the 'MASTER_ETCD' service, and create <=7 units for common users.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] network_type: Cluster network type, the available values include: 'GR' and 'VPC-CNI' and 'CiliumOverlay'. Default is GR.
        :param pulumi.Input[str] node_name_type: Node name type of Cluster, the available values include: 'lan-ip' and 'hostname', Default is 'lan-ip'.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterNodePoolGlobalConfigArgs']]]] node_pool_global_configs: Global config effective for all node pools.
        :param pulumi.Input[str] pre_start_user_script: Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterResourceDeleteOptionArgs']]]] resource_delete_options: The resource deletion policy when the cluster is deleted. Currently, CBS is supported (CBS is retained by default). Only valid when deleting cluster.
        :param pulumi.Input[str] runtime_version: Container Runtime version.
        :param pulumi.Input[str] service_cidr: A network address block of the service. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the cluster.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        :param pulumi.Input[bool] upgrade_instances_follow_cluster: Indicates whether upgrade all instances when cluster_version change. Default is false.
        :param pulumi.Input[str] vpc_cni_type: Distinguish between shared network card multi-IP mode and independent network card mode. Fill in `tke-route-eni` for shared network card multi-IP mode and `tke-direct-eni` for independent network card mode. The default is shared network card mode. When it is necessary to turn off the vpc-cni container network capability, both `eni_subnet_ids` and `vpc_cni_type` must be set to empty.
        :param pulumi.Input[str] vpc_id: Vpc Id of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterWorkerConfigArgs']]]] worker_configs: Deploy the machine configuration information of the 'WORKER' service, and create <=20 units for common users. The other 'WORK' service are added by 'tencentcloud_kubernetes_scale_worker'.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ### Use node pool global config

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        vpc = config.get("vpc")
        if vpc is None:
            vpc = "vpc-dk8zmwuf"
        subnet = config.get("subnet")
        if subnet is None:
            subnet = "subnet-pqfek0t8"
        default_instance_type = config.get("defaultInstanceType")
        if default_instance_type is None:
            default_instance_type = "SA1.LARGE8"
        test_node_pool_global_config = tencentcloud.kubernetes.Cluster("testNodePoolGlobalConfig",
            vpc_id=vpc,
            cluster_cidr="10.1.0.0/16",
            cluster_max_pod_num=32,
            cluster_name="test",
            cluster_desc="test cluster desc",
            cluster_max_service_num=32,
            cluster_internet=True,
            cluster_deploy_type="MANAGED_CLUSTER",
            worker_configs=[tencentcloud.kubernetes.ClusterWorkerConfigArgs(
                count=1,
                availability_zone=availability_zone,
                instance_type=default_instance_type,
                system_disk_type="CLOUD_SSD",
                system_disk_size=60,
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=100,
                public_ip_assigned=True,
                subnet_id=subnet,
                data_disks=[tencentcloud.kubernetes.ClusterWorkerConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                user_data="dGVzdA==",
                key_ids="skey-11112222",
            )],
            node_pool_global_configs=[tencentcloud.kubernetes.ClusterNodePoolGlobalConfigArgs(
                is_scale_in_enabled=True,
                expander="random",
                ignore_daemon_sets_utilization=True,
                max_concurrent_scale_in=5,
                scale_in_delay=15,
                scale_in_unneeded_time=15,
                scale_in_utilization_threshold=30,
                skip_nodes_with_local_storage=False,
                skip_nodes_with_system_pods=True,
            )],
            labels={
                "test1": "test1",
                "test2": "test2",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Using VPC-CNI network type

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-1"
        vpc = config.get("vpc")
        if vpc is None:
            vpc = "vpc-r1m1fyx5"
        default_instance_type = config.get("defaultInstanceType")
        if default_instance_type is None:
            default_instance_type = "SA2.SMALL2"
        managed_cluster = tencentcloud.kubernetes.Cluster("managedCluster",
            vpc_id=vpc,
            cluster_max_pod_num=32,
            cluster_name="test",
            cluster_desc="test cluster desc",
            cluster_max_service_num=256,
            cluster_internet=True,
            cluster_deploy_type="MANAGED_CLUSTER",
            network_type="VPC-CNI",
            eni_subnet_ids=["subnet-bk1etlyu"],
            service_cidr="10.1.0.0/24",
            worker_configs=[tencentcloud.kubernetes.ClusterWorkerConfigArgs(
                count=1,
                availability_zone=availability_zone,
                instance_type=default_instance_type,
                system_disk_type="CLOUD_PREMIUM",
                system_disk_size=60,
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=100,
                public_ip_assigned=True,
                subnet_id="subnet-t5dv27rs",
                data_disks=[tencentcloud.kubernetes.ClusterWorkerConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                user_data="dGVzdA==",
                key_ids="skey-11112222",
            )],
            labels={
                "test1": "test1",
                "test2": "test2",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Using ops options

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        managed_cluster = tencentcloud.kubernetes.Cluster("managedCluster",
            cluster_audit=tencentcloud.kubernetes.ClusterClusterAuditArgs(
                enabled=True,
                log_set_id="",
                topic_id="",
            ),
            event_persistence=tencentcloud.kubernetes.ClusterEventPersistenceArgs(
                enabled=True,
                log_set_id="",
                topic_id="",
            ),
            log_agent=tencentcloud.kubernetes.ClusterLogAgentArgs(
                enabled=True,
                kubelet_root_dir="",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Use delete options to delete CBS when deleting the Cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.kubernetes.Cluster("example",
            vpc_id=local["first_vpc_id"],
            cluster_cidr=var["example_cluster_cidr"],
            cluster_max_pod_num=32,
            cluster_name="example",
            cluster_desc="example for tke cluster",
            cluster_max_service_num=32,
            cluster_level="L50",
            auto_upgrade_cluster_level=True,
            cluster_internet=False,
            cluster_version="1.30.0",
            cluster_os="tlinux2.2(tkernel3)x86_64",
            cluster_deploy_type="MANAGED_CLUSTER",
            container_runtime="containerd",
            docker_graph_path="/var/lib/containerd",
            tags={
                "demo": "test",
            },
            worker_configs=[tencentcloud.kubernetes.ClusterWorkerConfigArgs(
                count=1,
                availability_zone=var["availability_zone_first"],
                instance_type="SA2.MEDIUM2",
                system_disk_type="CLOUD_SSD",
                system_disk_size=60,
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=100,
                public_ip_assigned=True,
                subnet_id=local["first_subnet_id"],
                data_disks=[tencentcloud.kubernetes.ClusterWorkerConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                user_data="dGVzdA==",
                disaster_recover_group_ids=[],
                security_group_ids=[],
                key_ids=[],
                cam_role_name="CVM_QcsRole",
                password="ZZXXccvv1212",
            )],
            resource_delete_options=[tencentcloud.kubernetes.ClusterResourceDeleteOptionArgs(
                resource_type="CBS",
                delete_mode="terminate",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tke cluster can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Kubernetes/cluster:Cluster example cls-n2h4jbtk
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acquire_cluster_admin_role: Optional[pulumi.Input[bool]] = None,
                 auth_options: Optional[pulumi.Input[pulumi.InputType['ClusterAuthOptionsArgs']]] = None,
                 auto_upgrade_cluster_level: Optional[pulumi.Input[bool]] = None,
                 base_pod_num: Optional[pulumi.Input[int]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 claim_expired_seconds: Optional[pulumi.Input[int]] = None,
                 cluster_audit: Optional[pulumi.Input[pulumi.InputType['ClusterClusterAuditArgs']]] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_deploy_type: Optional[pulumi.Input[str]] = None,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_extra_args: Optional[pulumi.Input[pulumi.InputType['ClusterClusterExtraArgsArgs']]] = None,
                 cluster_internet: Optional[pulumi.Input[bool]] = None,
                 cluster_internet_domain: Optional[pulumi.Input[str]] = None,
                 cluster_internet_security_group: Optional[pulumi.Input[str]] = None,
                 cluster_intranet: Optional[pulumi.Input[bool]] = None,
                 cluster_intranet_domain: Optional[pulumi.Input[str]] = None,
                 cluster_intranet_subnet_id: Optional[pulumi.Input[str]] = None,
                 cluster_ipvs: Optional[pulumi.Input[bool]] = None,
                 cluster_level: Optional[pulumi.Input[str]] = None,
                 cluster_max_pod_num: Optional[pulumi.Input[int]] = None,
                 cluster_max_service_num: Optional[pulumi.Input[int]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_os: Optional[pulumi.Input[str]] = None,
                 cluster_os_type: Optional[pulumi.Input[str]] = None,
                 cluster_subnet_id: Optional[pulumi.Input[str]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 container_runtime: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 enable_customized_pod_cidr: Optional[pulumi.Input[bool]] = None,
                 eni_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_persistence: Optional[pulumi.Input[pulumi.InputType['ClusterEventPersistenceArgs']]] = None,
                 exist_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterExistInstanceArgs']]]]] = None,
                 extension_addons: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterExtensionAddonArgs']]]]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 globe_desired_pod_num: Optional[pulumi.Input[int]] = None,
                 ignore_cluster_cidr_conflict: Optional[pulumi.Input[bool]] = None,
                 ignore_service_cidr_conflict: Optional[pulumi.Input[bool]] = None,
                 instance_delete_mode: Optional[pulumi.Input[str]] = None,
                 is_non_static_ip_mode: Optional[pulumi.Input[bool]] = None,
                 kube_proxy_mode: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 log_agent: Optional[pulumi.Input[pulumi.InputType['ClusterLogAgentArgs']]] = None,
                 managed_cluster_internet_security_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 master_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMasterConfigArgs']]]]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 node_name_type: Optional[pulumi.Input[str]] = None,
                 node_pool_global_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterNodePoolGlobalConfigArgs']]]]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_delete_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterResourceDeleteOptionArgs']]]]] = None,
                 runtime_version: Optional[pulumi.Input[str]] = None,
                 service_cidr: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 upgrade_instances_follow_cluster: Optional[pulumi.Input[bool]] = None,
                 vpc_cni_type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 worker_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterWorkerConfigArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["acquire_cluster_admin_role"] = acquire_cluster_admin_role
            __props__.__dict__["auth_options"] = auth_options
            __props__.__dict__["auto_upgrade_cluster_level"] = auto_upgrade_cluster_level
            __props__.__dict__["base_pod_num"] = base_pod_num
            __props__.__dict__["cdc_id"] = cdc_id
            __props__.__dict__["claim_expired_seconds"] = claim_expired_seconds
            __props__.__dict__["cluster_audit"] = cluster_audit
            __props__.__dict__["cluster_cidr"] = cluster_cidr
            __props__.__dict__["cluster_deploy_type"] = cluster_deploy_type
            __props__.__dict__["cluster_desc"] = cluster_desc
            __props__.__dict__["cluster_extra_args"] = cluster_extra_args
            __props__.__dict__["cluster_internet"] = cluster_internet
            __props__.__dict__["cluster_internet_domain"] = cluster_internet_domain
            __props__.__dict__["cluster_internet_security_group"] = cluster_internet_security_group
            __props__.__dict__["cluster_intranet"] = cluster_intranet
            __props__.__dict__["cluster_intranet_domain"] = cluster_intranet_domain
            __props__.__dict__["cluster_intranet_subnet_id"] = cluster_intranet_subnet_id
            __props__.__dict__["cluster_ipvs"] = cluster_ipvs
            __props__.__dict__["cluster_level"] = cluster_level
            __props__.__dict__["cluster_max_pod_num"] = cluster_max_pod_num
            __props__.__dict__["cluster_max_service_num"] = cluster_max_service_num
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["cluster_os"] = cluster_os
            __props__.__dict__["cluster_os_type"] = cluster_os_type
            __props__.__dict__["cluster_subnet_id"] = cluster_subnet_id
            __props__.__dict__["cluster_version"] = cluster_version
            __props__.__dict__["container_runtime"] = container_runtime
            __props__.__dict__["deletion_protection"] = deletion_protection
            __props__.__dict__["docker_graph_path"] = docker_graph_path
            __props__.__dict__["enable_customized_pod_cidr"] = enable_customized_pod_cidr
            __props__.__dict__["eni_subnet_ids"] = eni_subnet_ids
            __props__.__dict__["event_persistence"] = event_persistence
            __props__.__dict__["exist_instances"] = exist_instances
            __props__.__dict__["extension_addons"] = extension_addons
            __props__.__dict__["extra_args"] = extra_args
            __props__.__dict__["globe_desired_pod_num"] = globe_desired_pod_num
            __props__.__dict__["ignore_cluster_cidr_conflict"] = ignore_cluster_cidr_conflict
            __props__.__dict__["ignore_service_cidr_conflict"] = ignore_service_cidr_conflict
            __props__.__dict__["instance_delete_mode"] = instance_delete_mode
            __props__.__dict__["is_non_static_ip_mode"] = is_non_static_ip_mode
            __props__.__dict__["kube_proxy_mode"] = kube_proxy_mode
            __props__.__dict__["labels"] = labels
            __props__.__dict__["log_agent"] = log_agent
            __props__.__dict__["managed_cluster_internet_security_policies"] = managed_cluster_internet_security_policies
            __props__.__dict__["master_configs"] = master_configs
            __props__.__dict__["mount_target"] = mount_target
            __props__.__dict__["network_type"] = network_type
            __props__.__dict__["node_name_type"] = node_name_type
            __props__.__dict__["node_pool_global_configs"] = node_pool_global_configs
            __props__.__dict__["pre_start_user_script"] = pre_start_user_script
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["resource_delete_options"] = resource_delete_options
            __props__.__dict__["runtime_version"] = runtime_version
            __props__.__dict__["service_cidr"] = service_cidr
            __props__.__dict__["tags"] = tags
            __props__.__dict__["unschedulable"] = unschedulable
            __props__.__dict__["upgrade_instances_follow_cluster"] = upgrade_instances_follow_cluster
            __props__.__dict__["vpc_cni_type"] = vpc_cni_type
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["worker_configs"] = worker_configs
            __props__.__dict__["certification_authority"] = None
            __props__.__dict__["cluster_as_enabled"] = None
            __props__.__dict__["cluster_external_endpoint"] = None
            __props__.__dict__["cluster_node_num"] = None
            __props__.__dict__["domain"] = None
            __props__.__dict__["kube_config"] = None
            __props__.__dict__["kube_config_intranet"] = None
            __props__.__dict__["password"] = None
            __props__.__dict__["pgw_endpoint"] = None
            __props__.__dict__["security_policies"] = None
            __props__.__dict__["user_name"] = None
            __props__.__dict__["worker_instances_lists"] = None
        super(Cluster, __self__).__init__(
            'tencentcloud:Kubernetes/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acquire_cluster_admin_role: Optional[pulumi.Input[bool]] = None,
            auth_options: Optional[pulumi.Input[pulumi.InputType['ClusterAuthOptionsArgs']]] = None,
            auto_upgrade_cluster_level: Optional[pulumi.Input[bool]] = None,
            base_pod_num: Optional[pulumi.Input[int]] = None,
            cdc_id: Optional[pulumi.Input[str]] = None,
            certification_authority: Optional[pulumi.Input[str]] = None,
            claim_expired_seconds: Optional[pulumi.Input[int]] = None,
            cluster_as_enabled: Optional[pulumi.Input[bool]] = None,
            cluster_audit: Optional[pulumi.Input[pulumi.InputType['ClusterClusterAuditArgs']]] = None,
            cluster_cidr: Optional[pulumi.Input[str]] = None,
            cluster_deploy_type: Optional[pulumi.Input[str]] = None,
            cluster_desc: Optional[pulumi.Input[str]] = None,
            cluster_external_endpoint: Optional[pulumi.Input[str]] = None,
            cluster_extra_args: Optional[pulumi.Input[pulumi.InputType['ClusterClusterExtraArgsArgs']]] = None,
            cluster_internet: Optional[pulumi.Input[bool]] = None,
            cluster_internet_domain: Optional[pulumi.Input[str]] = None,
            cluster_internet_security_group: Optional[pulumi.Input[str]] = None,
            cluster_intranet: Optional[pulumi.Input[bool]] = None,
            cluster_intranet_domain: Optional[pulumi.Input[str]] = None,
            cluster_intranet_subnet_id: Optional[pulumi.Input[str]] = None,
            cluster_ipvs: Optional[pulumi.Input[bool]] = None,
            cluster_level: Optional[pulumi.Input[str]] = None,
            cluster_max_pod_num: Optional[pulumi.Input[int]] = None,
            cluster_max_service_num: Optional[pulumi.Input[int]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            cluster_node_num: Optional[pulumi.Input[int]] = None,
            cluster_os: Optional[pulumi.Input[str]] = None,
            cluster_os_type: Optional[pulumi.Input[str]] = None,
            cluster_subnet_id: Optional[pulumi.Input[str]] = None,
            cluster_version: Optional[pulumi.Input[str]] = None,
            container_runtime: Optional[pulumi.Input[str]] = None,
            deletion_protection: Optional[pulumi.Input[bool]] = None,
            docker_graph_path: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            enable_customized_pod_cidr: Optional[pulumi.Input[bool]] = None,
            eni_subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            event_persistence: Optional[pulumi.Input[pulumi.InputType['ClusterEventPersistenceArgs']]] = None,
            exist_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterExistInstanceArgs']]]]] = None,
            extension_addons: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterExtensionAddonArgs']]]]] = None,
            extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            globe_desired_pod_num: Optional[pulumi.Input[int]] = None,
            ignore_cluster_cidr_conflict: Optional[pulumi.Input[bool]] = None,
            ignore_service_cidr_conflict: Optional[pulumi.Input[bool]] = None,
            instance_delete_mode: Optional[pulumi.Input[str]] = None,
            is_non_static_ip_mode: Optional[pulumi.Input[bool]] = None,
            kube_config: Optional[pulumi.Input[str]] = None,
            kube_config_intranet: Optional[pulumi.Input[str]] = None,
            kube_proxy_mode: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            log_agent: Optional[pulumi.Input[pulumi.InputType['ClusterLogAgentArgs']]] = None,
            managed_cluster_internet_security_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            master_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMasterConfigArgs']]]]] = None,
            mount_target: Optional[pulumi.Input[str]] = None,
            network_type: Optional[pulumi.Input[str]] = None,
            node_name_type: Optional[pulumi.Input[str]] = None,
            node_pool_global_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterNodePoolGlobalConfigArgs']]]]] = None,
            password: Optional[pulumi.Input[str]] = None,
            pgw_endpoint: Optional[pulumi.Input[str]] = None,
            pre_start_user_script: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            resource_delete_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterResourceDeleteOptionArgs']]]]] = None,
            runtime_version: Optional[pulumi.Input[str]] = None,
            security_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            service_cidr: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            unschedulable: Optional[pulumi.Input[int]] = None,
            upgrade_instances_follow_cluster: Optional[pulumi.Input[bool]] = None,
            user_name: Optional[pulumi.Input[str]] = None,
            vpc_cni_type: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            worker_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterWorkerConfigArgs']]]]] = None,
            worker_instances_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterWorkerInstancesListArgs']]]]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acquire_cluster_admin_role: If set to true, it will acquire the ClusterRole tke:admin. NOTE: this arguments cannot revoke to `false` after acquired.
        :param pulumi.Input[pulumi.InputType['ClusterAuthOptionsArgs']] auth_options: Specify cluster authentication configuration. Only available for managed cluster and `cluster_version` >= 1.20.
        :param pulumi.Input[bool] auto_upgrade_cluster_level: Whether the cluster level auto upgraded, valid for managed cluster.
        :param pulumi.Input[int] base_pod_num: The number of basic pods. valid when enable_customized_pod_cidr=true.
        :param pulumi.Input[str] cdc_id: CDC ID.
        :param pulumi.Input[str] certification_authority: The certificate used for access.
        :param pulumi.Input[int] claim_expired_seconds: Claim expired seconds to recycle ENI. This field can only set when field `network_type` is 'VPC-CNI'. `claim_expired_seconds` must greater or equal than 300 and less than 15768000.
        :param pulumi.Input[bool] cluster_as_enabled: (**Deprecated**) This argument is deprecated because the TKE auto-scaling group was no longer available. Indicates whether to enable cluster node auto scaling. Default is false.
        :param pulumi.Input[pulumi.InputType['ClusterClusterAuditArgs']] cluster_audit: Specify Cluster Audit config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        :param pulumi.Input[str] cluster_cidr: A network address block of the cluster. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        :param pulumi.Input[str] cluster_deploy_type: Deployment type of the cluster, the available values include: 'MANAGED_CLUSTER' and 'INDEPENDENT_CLUSTER'. Default is 'MANAGED_CLUSTER'.
        :param pulumi.Input[str] cluster_desc: Description of the cluster.
        :param pulumi.Input[str] cluster_external_endpoint: External network address to access.
        :param pulumi.Input[pulumi.InputType['ClusterClusterExtraArgsArgs']] cluster_extra_args: Customized parameters for master component,such as kube-apiserver, kube-controller-manager, kube-scheduler.
        :param pulumi.Input[bool] cluster_internet: Open internet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        :param pulumi.Input[str] cluster_internet_domain: Domain name for cluster Kube-apiserver internet access. Be careful if you modify value of this parameter, the cluster_external_endpoint value may be changed automatically too.
        :param pulumi.Input[str] cluster_internet_security_group: Specify security group, NOTE: This argument must not be empty if cluster internet enabled.
        :param pulumi.Input[bool] cluster_intranet: Open intranet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        :param pulumi.Input[str] cluster_intranet_domain: Domain name for cluster Kube-apiserver intranet access. Be careful if you modify value of this parameter, the pgw_endpoint value may be changed automatically too.
        :param pulumi.Input[str] cluster_intranet_subnet_id: Subnet id who can access this independent cluster, this field must and can only set  when `cluster_intranet` is true. `cluster_intranet_subnet_id` can not modify once be set.
        :param pulumi.Input[bool] cluster_ipvs: Indicates whether `ipvs` is enabled. Default is true. False means `iptables` is enabled.
        :param pulumi.Input[str] cluster_level: Specify cluster level, valid for managed cluster, use data source `kubernetes_get_cluster_levels` to query available levels. Available value examples `L5`, `L20`, `L50`, `L100`, etc.
        :param pulumi.Input[int] cluster_max_pod_num: The maximum number of Pods per node in the cluster. Default is 256. The minimum value is 4. When its power unequal to 2, it will round upward to the closest power of 2.
        :param pulumi.Input[int] cluster_max_service_num: The maximum number of services in the cluster. Default is 256. The range is from 32 to 32768. When its power unequal to 2, it will round upward to the closest power of 2.
        :param pulumi.Input[str] cluster_name: Name of the cluster.
        :param pulumi.Input[int] cluster_node_num: Number of nodes in the cluster.
        :param pulumi.Input[str] cluster_os: Cluster operating system, supports setting public images (the field passes the corresponding image Name) and custom images (the field passes the corresponding image ID). For details, please refer to: https://cloud.tencent.com/document/product/457/68289.
        :param pulumi.Input[str] cluster_os_type: Image type of the cluster os, the available values include: 'GENERAL'. Default is 'GENERAL'.
        :param pulumi.Input[str] cluster_subnet_id: Subnet ID of the cluster, such as: subnet-b3p7d7q5.
        :param pulumi.Input[str] cluster_version: Version of the cluster. Use `kubernetes_get_available_cluster_versions` to get the upgradable cluster version.
        :param pulumi.Input[str] container_runtime: Runtime type of the cluster, the available values include: 'docker' and 'containerd'.The Kubernetes v1.24 has removed dockershim, so please use containerd in v1.24 or higher.Default is 'docker'.
        :param pulumi.Input[bool] deletion_protection: Indicates whether cluster deletion protection is enabled. Default is false.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[str] domain: Domain name for access.
        :param pulumi.Input[bool] enable_customized_pod_cidr: Whether to enable the custom mode of node podCIDR size. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] eni_subnet_ids: Subnet Ids for cluster with VPC-CNI network mode. This field can only set when field `network_type` is 'VPC-CNI'. `eni_subnet_ids` can not empty once be set.
        :param pulumi.Input[pulumi.InputType['ClusterEventPersistenceArgs']] event_persistence: Specify cluster Event Persistence config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterExistInstanceArgs']]]] exist_instances: create tke cluster by existed instances.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterExtensionAddonArgs']]]] extension_addons: Information of the add-on to be installed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input[int] globe_desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it takes effect for all nodes.
        :param pulumi.Input[bool] ignore_cluster_cidr_conflict: Indicates whether to ignore the cluster cidr conflict error. Default is false.
        :param pulumi.Input[bool] ignore_service_cidr_conflict: Indicates whether to ignore the service cidr conflict error. Only valid in `VPC-CNI` mode.
        :param pulumi.Input[str] instance_delete_mode: The strategy for deleting cluster instances: terminate (destroy instances, only support pay as you go cloud host instances) retain (remove only, keep instances), Default is terminate.
        :param pulumi.Input[bool] is_non_static_ip_mode: Indicates whether non-static ip mode is enabled. Default is false.
        :param pulumi.Input[str] kube_config: Kubernetes config.
        :param pulumi.Input[str] kube_config_intranet: Kubernetes config of private network.
        :param pulumi.Input[str] kube_proxy_mode: Cluster kube-proxy mode, the available values include: 'kube-proxy-bpf'. Default is not set.When set to kube-proxy-bpf, cluster version greater than 1.14 and with Tencent Linux 2.4 is required.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of tke cluster nodes.
        :param pulumi.Input[pulumi.InputType['ClusterLogAgentArgs']] log_agent: Specify cluster log agent config.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] managed_cluster_internet_security_policies: this argument was deprecated, use `cluster_internet_security_group` instead. Security policies for managed cluster internet, like:'192.168.1.0/24' or '113.116.51.27', '0.0.0.0/0' means all. This field can only set when field `cluster_deploy_type` is 'MANAGED_CLUSTER' and `cluster_internet` is true. `managed_cluster_internet_security_policies` can not delete or empty once be set.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMasterConfigArgs']]]] master_configs: Deploy the machine configuration information of the 'MASTER_ETCD' service, and create <=7 units for common users.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] network_type: Cluster network type, the available values include: 'GR' and 'VPC-CNI' and 'CiliumOverlay'. Default is GR.
        :param pulumi.Input[str] node_name_type: Node name type of Cluster, the available values include: 'lan-ip' and 'hostname', Default is 'lan-ip'.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterNodePoolGlobalConfigArgs']]]] node_pool_global_configs: Global config effective for all node pools.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[str] pgw_endpoint: The Intranet address used for access.
        :param pulumi.Input[str] pre_start_user_script: Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterResourceDeleteOptionArgs']]]] resource_delete_options: The resource deletion policy when the cluster is deleted. Currently, CBS is supported (CBS is retained by default). Only valid when deleting cluster.
        :param pulumi.Input[str] runtime_version: Container Runtime version.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_policies: Access policy.
        :param pulumi.Input[str] service_cidr: A network address block of the service. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the cluster.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        :param pulumi.Input[bool] upgrade_instances_follow_cluster: Indicates whether upgrade all instances when cluster_version change. Default is false.
        :param pulumi.Input[str] user_name: User name of account.
        :param pulumi.Input[str] vpc_cni_type: Distinguish between shared network card multi-IP mode and independent network card mode. Fill in `tke-route-eni` for shared network card multi-IP mode and `tke-direct-eni` for independent network card mode. The default is shared network card mode. When it is necessary to turn off the vpc-cni container network capability, both `eni_subnet_ids` and `vpc_cni_type` must be set to empty.
        :param pulumi.Input[str] vpc_id: Vpc Id of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterWorkerConfigArgs']]]] worker_configs: Deploy the machine configuration information of the 'WORKER' service, and create <=20 units for common users. The other 'WORK' service are added by 'tencentcloud_kubernetes_scale_worker'.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterWorkerInstancesListArgs']]]] worker_instances_lists: An information list of cvm within the 'WORKER' clusters. Each element contains the following attributes:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["acquire_cluster_admin_role"] = acquire_cluster_admin_role
        __props__.__dict__["auth_options"] = auth_options
        __props__.__dict__["auto_upgrade_cluster_level"] = auto_upgrade_cluster_level
        __props__.__dict__["base_pod_num"] = base_pod_num
        __props__.__dict__["cdc_id"] = cdc_id
        __props__.__dict__["certification_authority"] = certification_authority
        __props__.__dict__["claim_expired_seconds"] = claim_expired_seconds
        __props__.__dict__["cluster_as_enabled"] = cluster_as_enabled
        __props__.__dict__["cluster_audit"] = cluster_audit
        __props__.__dict__["cluster_cidr"] = cluster_cidr
        __props__.__dict__["cluster_deploy_type"] = cluster_deploy_type
        __props__.__dict__["cluster_desc"] = cluster_desc
        __props__.__dict__["cluster_external_endpoint"] = cluster_external_endpoint
        __props__.__dict__["cluster_extra_args"] = cluster_extra_args
        __props__.__dict__["cluster_internet"] = cluster_internet
        __props__.__dict__["cluster_internet_domain"] = cluster_internet_domain
        __props__.__dict__["cluster_internet_security_group"] = cluster_internet_security_group
        __props__.__dict__["cluster_intranet"] = cluster_intranet
        __props__.__dict__["cluster_intranet_domain"] = cluster_intranet_domain
        __props__.__dict__["cluster_intranet_subnet_id"] = cluster_intranet_subnet_id
        __props__.__dict__["cluster_ipvs"] = cluster_ipvs
        __props__.__dict__["cluster_level"] = cluster_level
        __props__.__dict__["cluster_max_pod_num"] = cluster_max_pod_num
        __props__.__dict__["cluster_max_service_num"] = cluster_max_service_num
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cluster_node_num"] = cluster_node_num
        __props__.__dict__["cluster_os"] = cluster_os
        __props__.__dict__["cluster_os_type"] = cluster_os_type
        __props__.__dict__["cluster_subnet_id"] = cluster_subnet_id
        __props__.__dict__["cluster_version"] = cluster_version
        __props__.__dict__["container_runtime"] = container_runtime
        __props__.__dict__["deletion_protection"] = deletion_protection
        __props__.__dict__["docker_graph_path"] = docker_graph_path
        __props__.__dict__["domain"] = domain
        __props__.__dict__["enable_customized_pod_cidr"] = enable_customized_pod_cidr
        __props__.__dict__["eni_subnet_ids"] = eni_subnet_ids
        __props__.__dict__["event_persistence"] = event_persistence
        __props__.__dict__["exist_instances"] = exist_instances
        __props__.__dict__["extension_addons"] = extension_addons
        __props__.__dict__["extra_args"] = extra_args
        __props__.__dict__["globe_desired_pod_num"] = globe_desired_pod_num
        __props__.__dict__["ignore_cluster_cidr_conflict"] = ignore_cluster_cidr_conflict
        __props__.__dict__["ignore_service_cidr_conflict"] = ignore_service_cidr_conflict
        __props__.__dict__["instance_delete_mode"] = instance_delete_mode
        __props__.__dict__["is_non_static_ip_mode"] = is_non_static_ip_mode
        __props__.__dict__["kube_config"] = kube_config
        __props__.__dict__["kube_config_intranet"] = kube_config_intranet
        __props__.__dict__["kube_proxy_mode"] = kube_proxy_mode
        __props__.__dict__["labels"] = labels
        __props__.__dict__["log_agent"] = log_agent
        __props__.__dict__["managed_cluster_internet_security_policies"] = managed_cluster_internet_security_policies
        __props__.__dict__["master_configs"] = master_configs
        __props__.__dict__["mount_target"] = mount_target
        __props__.__dict__["network_type"] = network_type
        __props__.__dict__["node_name_type"] = node_name_type
        __props__.__dict__["node_pool_global_configs"] = node_pool_global_configs
        __props__.__dict__["password"] = password
        __props__.__dict__["pgw_endpoint"] = pgw_endpoint
        __props__.__dict__["pre_start_user_script"] = pre_start_user_script
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["resource_delete_options"] = resource_delete_options
        __props__.__dict__["runtime_version"] = runtime_version
        __props__.__dict__["security_policies"] = security_policies
        __props__.__dict__["service_cidr"] = service_cidr
        __props__.__dict__["tags"] = tags
        __props__.__dict__["unschedulable"] = unschedulable
        __props__.__dict__["upgrade_instances_follow_cluster"] = upgrade_instances_follow_cluster
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["vpc_cni_type"] = vpc_cni_type
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["worker_configs"] = worker_configs
        __props__.__dict__["worker_instances_lists"] = worker_instances_lists
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acquireClusterAdminRole")
    def acquire_cluster_admin_role(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to true, it will acquire the ClusterRole tke:admin. NOTE: this arguments cannot revoke to `false` after acquired.
        """
        return pulumi.get(self, "acquire_cluster_admin_role")

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> pulumi.Output[Optional['outputs.ClusterAuthOptions']]:
        """
        Specify cluster authentication configuration. Only available for managed cluster and `cluster_version` >= 1.20.
        """
        return pulumi.get(self, "auth_options")

    @property
    @pulumi.getter(name="autoUpgradeClusterLevel")
    def auto_upgrade_cluster_level(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the cluster level auto upgraded, valid for managed cluster.
        """
        return pulumi.get(self, "auto_upgrade_cluster_level")

    @property
    @pulumi.getter(name="basePodNum")
    def base_pod_num(self) -> pulumi.Output[Optional[int]]:
        """
        The number of basic pods. valid when enable_customized_pod_cidr=true.
        """
        return pulumi.get(self, "base_pod_num")

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> pulumi.Output[Optional[str]]:
        """
        CDC ID.
        """
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="certificationAuthority")
    def certification_authority(self) -> pulumi.Output[str]:
        """
        The certificate used for access.
        """
        return pulumi.get(self, "certification_authority")

    @property
    @pulumi.getter(name="claimExpiredSeconds")
    def claim_expired_seconds(self) -> pulumi.Output[int]:
        """
        Claim expired seconds to recycle ENI. This field can only set when field `network_type` is 'VPC-CNI'. `claim_expired_seconds` must greater or equal than 300 and less than 15768000.
        """
        return pulumi.get(self, "claim_expired_seconds")

    @property
    @pulumi.getter(name="clusterAsEnabled")
    def cluster_as_enabled(self) -> pulumi.Output[bool]:
        """
        (**Deprecated**) This argument is deprecated because the TKE auto-scaling group was no longer available. Indicates whether to enable cluster node auto scaling. Default is false.
        """
        warnings.warn("""This argument is deprecated because the TKE auto-scaling group was no longer available.""", DeprecationWarning)
        pulumi.log.warn("""cluster_as_enabled is deprecated: This argument is deprecated because the TKE auto-scaling group was no longer available.""")

        return pulumi.get(self, "cluster_as_enabled")

    @property
    @pulumi.getter(name="clusterAudit")
    def cluster_audit(self) -> pulumi.Output[Optional['outputs.ClusterClusterAudit']]:
        """
        Specify Cluster Audit config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        """
        return pulumi.get(self, "cluster_audit")

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> pulumi.Output[Optional[str]]:
        """
        A network address block of the cluster. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        """
        return pulumi.get(self, "cluster_cidr")

    @property
    @pulumi.getter(name="clusterDeployType")
    def cluster_deploy_type(self) -> pulumi.Output[Optional[str]]:
        """
        Deployment type of the cluster, the available values include: 'MANAGED_CLUSTER' and 'INDEPENDENT_CLUSTER'. Default is 'MANAGED_CLUSTER'.
        """
        return pulumi.get(self, "cluster_deploy_type")

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the cluster.
        """
        return pulumi.get(self, "cluster_desc")

    @property
    @pulumi.getter(name="clusterExternalEndpoint")
    def cluster_external_endpoint(self) -> pulumi.Output[str]:
        """
        External network address to access.
        """
        return pulumi.get(self, "cluster_external_endpoint")

    @property
    @pulumi.getter(name="clusterExtraArgs")
    def cluster_extra_args(self) -> pulumi.Output[Optional['outputs.ClusterClusterExtraArgs']]:
        """
        Customized parameters for master component,such as kube-apiserver, kube-controller-manager, kube-scheduler.
        """
        return pulumi.get(self, "cluster_extra_args")

    @property
    @pulumi.getter(name="clusterInternet")
    def cluster_internet(self) -> pulumi.Output[Optional[bool]]:
        """
        Open internet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        """
        return pulumi.get(self, "cluster_internet")

    @property
    @pulumi.getter(name="clusterInternetDomain")
    def cluster_internet_domain(self) -> pulumi.Output[Optional[str]]:
        """
        Domain name for cluster Kube-apiserver internet access. Be careful if you modify value of this parameter, the cluster_external_endpoint value may be changed automatically too.
        """
        return pulumi.get(self, "cluster_internet_domain")

    @property
    @pulumi.getter(name="clusterInternetSecurityGroup")
    def cluster_internet_security_group(self) -> pulumi.Output[str]:
        """
        Specify security group, NOTE: This argument must not be empty if cluster internet enabled.
        """
        return pulumi.get(self, "cluster_internet_security_group")

    @property
    @pulumi.getter(name="clusterIntranet")
    def cluster_intranet(self) -> pulumi.Output[Optional[bool]]:
        """
        Open intranet access or not. If this field is set 'true', the field below `worker_config` must be set. Because only cluster with node is allowed enable access endpoint. You may open it through `Kubernetes.ClusterEndpoint`.
        """
        return pulumi.get(self, "cluster_intranet")

    @property
    @pulumi.getter(name="clusterIntranetDomain")
    def cluster_intranet_domain(self) -> pulumi.Output[Optional[str]]:
        """
        Domain name for cluster Kube-apiserver intranet access. Be careful if you modify value of this parameter, the pgw_endpoint value may be changed automatically too.
        """
        return pulumi.get(self, "cluster_intranet_domain")

    @property
    @pulumi.getter(name="clusterIntranetSubnetId")
    def cluster_intranet_subnet_id(self) -> pulumi.Output[str]:
        """
        Subnet id who can access this independent cluster, this field must and can only set  when `cluster_intranet` is true. `cluster_intranet_subnet_id` can not modify once be set.
        """
        return pulumi.get(self, "cluster_intranet_subnet_id")

    @property
    @pulumi.getter(name="clusterIpvs")
    def cluster_ipvs(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether `ipvs` is enabled. Default is true. False means `iptables` is enabled.
        """
        return pulumi.get(self, "cluster_ipvs")

    @property
    @pulumi.getter(name="clusterLevel")
    def cluster_level(self) -> pulumi.Output[str]:
        """
        Specify cluster level, valid for managed cluster, use data source `kubernetes_get_cluster_levels` to query available levels. Available value examples `L5`, `L20`, `L50`, `L100`, etc.
        """
        return pulumi.get(self, "cluster_level")

    @property
    @pulumi.getter(name="clusterMaxPodNum")
    def cluster_max_pod_num(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum number of Pods per node in the cluster. Default is 256. The minimum value is 4. When its power unequal to 2, it will round upward to the closest power of 2.
        """
        return pulumi.get(self, "cluster_max_pod_num")

    @property
    @pulumi.getter(name="clusterMaxServiceNum")
    def cluster_max_service_num(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum number of services in the cluster. Default is 256. The range is from 32 to 32768. When its power unequal to 2, it will round upward to the closest power of 2.
        """
        return pulumi.get(self, "cluster_max_service_num")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterNodeNum")
    def cluster_node_num(self) -> pulumi.Output[int]:
        """
        Number of nodes in the cluster.
        """
        return pulumi.get(self, "cluster_node_num")

    @property
    @pulumi.getter(name="clusterOs")
    def cluster_os(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster operating system, supports setting public images (the field passes the corresponding image Name) and custom images (the field passes the corresponding image ID). For details, please refer to: https://cloud.tencent.com/document/product/457/68289.
        """
        return pulumi.get(self, "cluster_os")

    @property
    @pulumi.getter(name="clusterOsType")
    def cluster_os_type(self) -> pulumi.Output[Optional[str]]:
        """
        Image type of the cluster os, the available values include: 'GENERAL'. Default is 'GENERAL'.
        """
        return pulumi.get(self, "cluster_os_type")

    @property
    @pulumi.getter(name="clusterSubnetId")
    def cluster_subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        Subnet ID of the cluster, such as: subnet-b3p7d7q5.
        """
        return pulumi.get(self, "cluster_subnet_id")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Output[str]:
        """
        Version of the cluster. Use `kubernetes_get_available_cluster_versions` to get the upgradable cluster version.
        """
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="containerRuntime")
    def container_runtime(self) -> pulumi.Output[Optional[str]]:
        """
        Runtime type of the cluster, the available values include: 'docker' and 'containerd'.The Kubernetes v1.24 has removed dockershim, so please use containerd in v1.24 or higher.Default is 'docker'.
        """
        return pulumi.get(self, "container_runtime")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether cluster deletion protection is enabled. Default is false.
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> pulumi.Output[Optional[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name for access.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="enableCustomizedPodCidr")
    def enable_customized_pod_cidr(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable the custom mode of node podCIDR size. Default is false.
        """
        return pulumi.get(self, "enable_customized_pod_cidr")

    @property
    @pulumi.getter(name="eniSubnetIds")
    def eni_subnet_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Subnet Ids for cluster with VPC-CNI network mode. This field can only set when field `network_type` is 'VPC-CNI'. `eni_subnet_ids` can not empty once be set.
        """
        return pulumi.get(self, "eni_subnet_ids")

    @property
    @pulumi.getter(name="eventPersistence")
    def event_persistence(self) -> pulumi.Output[Optional['outputs.ClusterEventPersistence']]:
        """
        Specify cluster Event Persistence config. NOTE: Please make sure your TKE CamRole have permission to access CLS service.
        """
        return pulumi.get(self, "event_persistence")

    @property
    @pulumi.getter(name="existInstances")
    def exist_instances(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterExistInstance']]]:
        """
        create tke cluster by existed instances.
        """
        return pulumi.get(self, "exist_instances")

    @property
    @pulumi.getter(name="extensionAddons")
    def extension_addons(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterExtensionAddon']]]:
        """
        Information of the add-on to be installed.
        """
        return pulumi.get(self, "extension_addons")

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Custom parameter information related to the node.
        """
        return pulumi.get(self, "extra_args")

    @property
    @pulumi.getter(name="globeDesiredPodNum")
    def globe_desired_pod_num(self) -> pulumi.Output[Optional[int]]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it takes effect for all nodes.
        """
        return pulumi.get(self, "globe_desired_pod_num")

    @property
    @pulumi.getter(name="ignoreClusterCidrConflict")
    def ignore_cluster_cidr_conflict(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether to ignore the cluster cidr conflict error. Default is false.
        """
        return pulumi.get(self, "ignore_cluster_cidr_conflict")

    @property
    @pulumi.getter(name="ignoreServiceCidrConflict")
    def ignore_service_cidr_conflict(self) -> pulumi.Output[bool]:
        """
        Indicates whether to ignore the service cidr conflict error. Only valid in `VPC-CNI` mode.
        """
        return pulumi.get(self, "ignore_service_cidr_conflict")

    @property
    @pulumi.getter(name="instanceDeleteMode")
    def instance_delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        The strategy for deleting cluster instances: terminate (destroy instances, only support pay as you go cloud host instances) retain (remove only, keep instances), Default is terminate.
        """
        return pulumi.get(self, "instance_delete_mode")

    @property
    @pulumi.getter(name="isNonStaticIpMode")
    def is_non_static_ip_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether non-static ip mode is enabled. Default is false.
        """
        return pulumi.get(self, "is_non_static_ip_mode")

    @property
    @pulumi.getter(name="kubeConfig")
    def kube_config(self) -> pulumi.Output[str]:
        """
        Kubernetes config.
        """
        return pulumi.get(self, "kube_config")

    @property
    @pulumi.getter(name="kubeConfigIntranet")
    def kube_config_intranet(self) -> pulumi.Output[str]:
        """
        Kubernetes config of private network.
        """
        return pulumi.get(self, "kube_config_intranet")

    @property
    @pulumi.getter(name="kubeProxyMode")
    def kube_proxy_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster kube-proxy mode, the available values include: 'kube-proxy-bpf'. Default is not set.When set to kube-proxy-bpf, cluster version greater than 1.14 and with Tencent Linux 2.4 is required.
        """
        return pulumi.get(self, "kube_proxy_mode")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Labels of tke cluster nodes.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="logAgent")
    def log_agent(self) -> pulumi.Output[Optional['outputs.ClusterLogAgent']]:
        """
        Specify cluster log agent config.
        """
        return pulumi.get(self, "log_agent")

    @property
    @pulumi.getter(name="managedClusterInternetSecurityPolicies")
    def managed_cluster_internet_security_policies(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        this argument was deprecated, use `cluster_internet_security_group` instead. Security policies for managed cluster internet, like:'192.168.1.0/24' or '113.116.51.27', '0.0.0.0/0' means all. This field can only set when field `cluster_deploy_type` is 'MANAGED_CLUSTER' and `cluster_internet` is true. `managed_cluster_internet_security_policies` can not delete or empty once be set.
        """
        warnings.warn("""this argument was deprecated, use `cluster_internet_security_group` instead.""", DeprecationWarning)
        pulumi.log.warn("""managed_cluster_internet_security_policies is deprecated: this argument was deprecated, use `cluster_internet_security_group` instead.""")

        return pulumi.get(self, "managed_cluster_internet_security_policies")

    @property
    @pulumi.getter(name="masterConfigs")
    def master_configs(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterMasterConfig']]]:
        """
        Deploy the machine configuration information of the 'MASTER_ETCD' service, and create <=7 units for common users.
        """
        return pulumi.get(self, "master_configs")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> pulumi.Output[Optional[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster network type, the available values include: 'GR' and 'VPC-CNI' and 'CiliumOverlay'. Default is GR.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="nodeNameType")
    def node_name_type(self) -> pulumi.Output[Optional[str]]:
        """
        Node name type of Cluster, the available values include: 'lan-ip' and 'hostname', Default is 'lan-ip'.
        """
        return pulumi.get(self, "node_name_type")

    @property
    @pulumi.getter(name="nodePoolGlobalConfigs")
    def node_pool_global_configs(self) -> pulumi.Output[Sequence['outputs.ClusterNodePoolGlobalConfig']]:
        """
        Global config effective for all node pools.
        """
        return pulumi.get(self, "node_pool_global_configs")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pgwEndpoint")
    def pgw_endpoint(self) -> pulumi.Output[str]:
        """
        The Intranet address used for access.
        """
        return pulumi.get(self, "pgw_endpoint")

    @property
    @pulumi.getter(name="preStartUserScript")
    def pre_start_user_script(self) -> pulumi.Output[Optional[str]]:
        """
        Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        """
        return pulumi.get(self, "pre_start_user_script")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resourceDeleteOptions")
    def resource_delete_options(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterResourceDeleteOption']]]:
        """
        The resource deletion policy when the cluster is deleted. Currently, CBS is supported (CBS is retained by default). Only valid when deleting cluster.
        """
        return pulumi.get(self, "resource_delete_options")

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> pulumi.Output[Optional[str]]:
        """
        Container Runtime version.
        """
        return pulumi.get(self, "runtime_version")

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> pulumi.Output[Sequence[str]]:
        """
        Access policy.
        """
        return pulumi.get(self, "security_policies")

    @property
    @pulumi.getter(name="serviceCidr")
    def service_cidr(self) -> pulumi.Output[Optional[str]]:
        """
        A network address block of the service. Different from vpc cidr and cidr of other clusters within this vpc. Must be in  10./192.168/172.[16-31] segments.
        """
        return pulumi.get(self, "service_cidr")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The tags of the cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def unschedulable(self) -> pulumi.Output[Optional[int]]:
        """
        Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @property
    @pulumi.getter(name="upgradeInstancesFollowCluster")
    def upgrade_instances_follow_cluster(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether upgrade all instances when cluster_version change. Default is false.
        """
        return pulumi.get(self, "upgrade_instances_follow_cluster")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        User name of account.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="vpcCniType")
    def vpc_cni_type(self) -> pulumi.Output[str]:
        """
        Distinguish between shared network card multi-IP mode and independent network card mode. Fill in `tke-route-eni` for shared network card multi-IP mode and `tke-direct-eni` for independent network card mode. The default is shared network card mode. When it is necessary to turn off the vpc-cni container network capability, both `eni_subnet_ids` and `vpc_cni_type` must be set to empty.
        """
        return pulumi.get(self, "vpc_cni_type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Vpc Id of the cluster.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="workerConfigs")
    def worker_configs(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterWorkerConfig']]]:
        """
        Deploy the machine configuration information of the 'WORKER' service, and create <=20 units for common users. The other 'WORK' service are added by 'tencentcloud_kubernetes_scale_worker'.
        """
        return pulumi.get(self, "worker_configs")

    @property
    @pulumi.getter(name="workerInstancesLists")
    def worker_instances_lists(self) -> pulumi.Output[Sequence['outputs.ClusterWorkerInstancesList']]:
        """
        An information list of cvm within the 'WORKER' clusters. Each element contains the following attributes:
        """
        return pulumi.get(self, "worker_instances_lists")

