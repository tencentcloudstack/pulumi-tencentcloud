# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScaleWorkerArgs', 'ScaleWorker']

@pulumi.input_type
class ScaleWorkerArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 worker_config: pulumi.Input['ScaleWorkerWorkerConfigArgs'],
                 create_result_output_file: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_args: Optional[pulumi.Input['ScaleWorkerGpuArgsArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerTaintArgs']]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 user_script: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ScaleWorker resource.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input['ScaleWorkerWorkerConfigArgs'] worker_config: Deploy the machine configuration information of the 'WORK' service, and create <=20 units for common users.
        :param pulumi.Input[str] create_result_output_file: Used to save results of CVMs creation error messages.
        :param pulumi.Input[Sequence[pulumi.Input['ScaleWorkerDataDiskArgs']]] data_disks: Configurations of tke data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in current node. Valid when the cluster enable customized pod cidr.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input['ScaleWorkerGpuArgsArgs'] gpu_args: GPU driver parameters.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes scale worker created nodes.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] pre_start_user_script: Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[Sequence[pulumi.Input['ScaleWorkerTaintArgs']]] taints: Node taint.
        :param pulumi.Input[int] unschedulable: Set whether the added node participates in scheduling. The default value is 0, which means participating in scheduling; non-0 means not participating in scheduling. After the node initialization is completed, you can execute kubectl uncordon nodename to join the node in scheduling.
        :param pulumi.Input[str] user_script: Base64 encoded user script, this script will be executed after the k8s component is run. The user needs to ensure that the script is reentrant and retry logic. The script and its generated log files can be viewed in the /data/ccs_userscript/ path of the node, if required. The node needs to be initialized before it can be added to the schedule. It can be used with the unschedulable parameter. After the final initialization of userScript is completed, add the kubectl uncordon nodename --kubeconfig=/root/.kube/config command to add the node to the schedule.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "worker_config", worker_config)
        if create_result_output_file is not None:
            pulumi.set(__self__, "create_result_output_file", create_result_output_file)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if gpu_args is not None:
            pulumi.set(__self__, "gpu_args", gpu_args)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if pre_start_user_script is not None:
            pulumi.set(__self__, "pre_start_user_script", pre_start_user_script)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)
        if user_script is not None:
            pulumi.set(__self__, "user_script", user_script)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="workerConfig")
    def worker_config(self) -> pulumi.Input['ScaleWorkerWorkerConfigArgs']:
        """
        Deploy the machine configuration information of the 'WORK' service, and create <=20 units for common users.
        """
        return pulumi.get(self, "worker_config")

    @worker_config.setter
    def worker_config(self, value: pulumi.Input['ScaleWorkerWorkerConfigArgs']):
        pulumi.set(self, "worker_config", value)

    @property
    @pulumi.getter(name="createResultOutputFile")
    def create_result_output_file(self) -> Optional[pulumi.Input[str]]:
        """
        Used to save results of CVMs creation error messages.
        """
        return pulumi.get(self, "create_result_output_file")

    @create_result_output_file.setter
    def create_result_output_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_result_output_file", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerDataDiskArgs']]]]:
        """
        Configurations of tke data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in current node. Valid when the cluster enable customized pod cidr.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="gpuArgs")
    def gpu_args(self) -> Optional[pulumi.Input['ScaleWorkerGpuArgsArgs']]:
        """
        GPU driver parameters.
        """
        return pulumi.get(self, "gpu_args")

    @gpu_args.setter
    def gpu_args(self, value: Optional[pulumi.Input['ScaleWorkerGpuArgsArgs']]):
        pulumi.set(self, "gpu_args", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels of kubernetes scale worker created nodes.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="preStartUserScript")
    def pre_start_user_script(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        """
        return pulumi.get(self, "pre_start_user_script")

    @pre_start_user_script.setter
    def pre_start_user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_start_user_script", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerTaintArgs']]]]:
        """
        Node taint.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Set whether the added node participates in scheduling. The default value is 0, which means participating in scheduling; non-0 means not participating in scheduling. After the node initialization is completed, you can execute kubectl uncordon nodename to join the node in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)

    @property
    @pulumi.getter(name="userScript")
    def user_script(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded user script, this script will be executed after the k8s component is run. The user needs to ensure that the script is reentrant and retry logic. The script and its generated log files can be viewed in the /data/ccs_userscript/ path of the node, if required. The node needs to be initialized before it can be added to the schedule. It can be used with the unschedulable parameter. After the final initialization of userScript is completed, add the kubectl uncordon nodename --kubeconfig=/root/.kube/config command to add the node to the schedule.
        """
        return pulumi.get(self, "user_script")

    @user_script.setter
    def user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_script", value)


@pulumi.input_type
class _ScaleWorkerState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 create_result_output_file: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_args: Optional[pulumi.Input['ScaleWorkerGpuArgsArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerTaintArgs']]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 user_script: Optional[pulumi.Input[str]] = None,
                 worker_config: Optional[pulumi.Input['ScaleWorkerWorkerConfigArgs']] = None,
                 worker_instances_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerInstancesListArgs']]]] = None):
        """
        Input properties used for looking up and filtering ScaleWorker resources.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[str] create_result_output_file: Used to save results of CVMs creation error messages.
        :param pulumi.Input[Sequence[pulumi.Input['ScaleWorkerDataDiskArgs']]] data_disks: Configurations of tke data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in current node. Valid when the cluster enable customized pod cidr.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input['ScaleWorkerGpuArgsArgs'] gpu_args: GPU driver parameters.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes scale worker created nodes.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] pre_start_user_script: Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[Sequence[pulumi.Input['ScaleWorkerTaintArgs']]] taints: Node taint.
        :param pulumi.Input[int] unschedulable: Set whether the added node participates in scheduling. The default value is 0, which means participating in scheduling; non-0 means not participating in scheduling. After the node initialization is completed, you can execute kubectl uncordon nodename to join the node in scheduling.
        :param pulumi.Input[str] user_script: Base64 encoded user script, this script will be executed after the k8s component is run. The user needs to ensure that the script is reentrant and retry logic. The script and its generated log files can be viewed in the /data/ccs_userscript/ path of the node, if required. The node needs to be initialized before it can be added to the schedule. It can be used with the unschedulable parameter. After the final initialization of userScript is completed, add the kubectl uncordon nodename --kubeconfig=/root/.kube/config command to add the node to the schedule.
        :param pulumi.Input['ScaleWorkerWorkerConfigArgs'] worker_config: Deploy the machine configuration information of the 'WORK' service, and create <=20 units for common users.
        :param pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerInstancesListArgs']]] worker_instances_lists: An information list of kubernetes cluster 'WORKER'. Each element contains the following attributes:
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if create_result_output_file is not None:
            pulumi.set(__self__, "create_result_output_file", create_result_output_file)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if gpu_args is not None:
            pulumi.set(__self__, "gpu_args", gpu_args)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if pre_start_user_script is not None:
            pulumi.set(__self__, "pre_start_user_script", pre_start_user_script)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)
        if user_script is not None:
            pulumi.set(__self__, "user_script", user_script)
        if worker_config is not None:
            pulumi.set(__self__, "worker_config", worker_config)
        if worker_instances_lists is not None:
            pulumi.set(__self__, "worker_instances_lists", worker_instances_lists)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createResultOutputFile")
    def create_result_output_file(self) -> Optional[pulumi.Input[str]]:
        """
        Used to save results of CVMs creation error messages.
        """
        return pulumi.get(self, "create_result_output_file")

    @create_result_output_file.setter
    def create_result_output_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_result_output_file", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerDataDiskArgs']]]]:
        """
        Configurations of tke data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in current node. Valid when the cluster enable customized pod cidr.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="gpuArgs")
    def gpu_args(self) -> Optional[pulumi.Input['ScaleWorkerGpuArgsArgs']]:
        """
        GPU driver parameters.
        """
        return pulumi.get(self, "gpu_args")

    @gpu_args.setter
    def gpu_args(self, value: Optional[pulumi.Input['ScaleWorkerGpuArgsArgs']]):
        pulumi.set(self, "gpu_args", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels of kubernetes scale worker created nodes.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="preStartUserScript")
    def pre_start_user_script(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        """
        return pulumi.get(self, "pre_start_user_script")

    @pre_start_user_script.setter
    def pre_start_user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_start_user_script", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerTaintArgs']]]]:
        """
        Node taint.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Set whether the added node participates in scheduling. The default value is 0, which means participating in scheduling; non-0 means not participating in scheduling. After the node initialization is completed, you can execute kubectl uncordon nodename to join the node in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)

    @property
    @pulumi.getter(name="userScript")
    def user_script(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded user script, this script will be executed after the k8s component is run. The user needs to ensure that the script is reentrant and retry logic. The script and its generated log files can be viewed in the /data/ccs_userscript/ path of the node, if required. The node needs to be initialized before it can be added to the schedule. It can be used with the unschedulable parameter. After the final initialization of userScript is completed, add the kubectl uncordon nodename --kubeconfig=/root/.kube/config command to add the node to the schedule.
        """
        return pulumi.get(self, "user_script")

    @user_script.setter
    def user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_script", value)

    @property
    @pulumi.getter(name="workerConfig")
    def worker_config(self) -> Optional[pulumi.Input['ScaleWorkerWorkerConfigArgs']]:
        """
        Deploy the machine configuration information of the 'WORK' service, and create <=20 units for common users.
        """
        return pulumi.get(self, "worker_config")

    @worker_config.setter
    def worker_config(self, value: Optional[pulumi.Input['ScaleWorkerWorkerConfigArgs']]):
        pulumi.set(self, "worker_config", value)

    @property
    @pulumi.getter(name="workerInstancesLists")
    def worker_instances_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerInstancesListArgs']]]]:
        """
        An information list of kubernetes cluster 'WORKER'. Each element contains the following attributes:
        """
        return pulumi.get(self, "worker_instances_lists")

    @worker_instances_lists.setter
    def worker_instances_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerInstancesListArgs']]]]):
        pulumi.set(self, "worker_instances_lists", value)


class ScaleWorker(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 create_result_output_file: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerDataDiskArgs']]]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_args: Optional[pulumi.Input[pulumi.InputType['ScaleWorkerGpuArgsArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerTaintArgs']]]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 user_script: Optional[pulumi.Input[str]] = None,
                 worker_config: Optional[pulumi.Input[pulumi.InputType['ScaleWorkerWorkerConfigArgs']]] = None,
                 __props__=None):
        """
        Provide a resource to increase instance to cluster

        > **NOTE:** To use the custom Kubernetes component startup parameter function (parameter `extra_args`), you need to submit a ticket for application.

        > **NOTE:** Import Node: Currently, only one node can be imported at a time.

        > **NOTE:** If you need to view error messages during instance creation, you can use parameter `create_result_output_file` to set the file save path

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        subnet = config.get("subnet")
        if subnet is None:
            subnet = "subnet-pqfek0t8"
        scale_instance_type = config.get("scaleInstanceType")
        if scale_instance_type is None:
            scale_instance_type = "S2.LARGE16"
        example = tencentcloud.kubernetes.ScaleWorker("example",
            cluster_id="cls-godovr32",
            desired_pod_num=16,
            labels={
                "test1": "test1",
                "test2": "test2",
            },
            worker_config=tencentcloud.kubernetes.ScaleWorkerWorkerConfigArgs(
                count=3,
                availability_zone=availability_zone,
                instance_type=scale_instance_type,
                subnet_id=subnet,
                system_disk_type="CLOUD_SSD",
                system_disk_size=50,
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=100,
                public_ip_assigned=True,
                data_disks=[tencentcloud.kubernetes.ScaleWorkerWorkerConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                user_data="dGVzdA==",
                password="AABBccdd1122",
            ),
            create_result_output_file="my_output_file_path")
        ```
        <!--End PulumiCodeChooser -->

        ### Use Kubelet

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        subnet = config.get("subnet")
        if subnet is None:
            subnet = "subnet-pqfek0t8"
        scale_instance_type = config.get("scaleInstanceType")
        if scale_instance_type is None:
            scale_instance_type = "S2.LARGE16"
        example = tencentcloud.kubernetes.ScaleWorker("example",
            cluster_id="cls-godovr32",
            extra_args=["root-dir=/var/lib/kubelet"],
            labels={
                "test1": "test1",
                "test2": "test2",
            },
            worker_config=tencentcloud.kubernetes.ScaleWorkerWorkerConfigArgs(
                count=3,
                availability_zone=availability_zone,
                instance_type=scale_instance_type,
                subnet_id=subnet,
                system_disk_type="CLOUD_SSD",
                system_disk_size=50,
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=100,
                public_ip_assigned=True,
                data_disks=[tencentcloud.kubernetes.ScaleWorkerWorkerConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                user_data="dGVzdA==",
                password="AABBccdd1122",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tke scale worker can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Kubernetes/scaleWorker:ScaleWorker example cls-mij6c2pq#ins-n6esjkdi
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[str] create_result_output_file: Used to save results of CVMs creation error messages.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerDataDiskArgs']]]] data_disks: Configurations of tke data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in current node. Valid when the cluster enable customized pod cidr.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input[pulumi.InputType['ScaleWorkerGpuArgsArgs']] gpu_args: GPU driver parameters.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes scale worker created nodes.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] pre_start_user_script: Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerTaintArgs']]]] taints: Node taint.
        :param pulumi.Input[int] unschedulable: Set whether the added node participates in scheduling. The default value is 0, which means participating in scheduling; non-0 means not participating in scheduling. After the node initialization is completed, you can execute kubectl uncordon nodename to join the node in scheduling.
        :param pulumi.Input[str] user_script: Base64 encoded user script, this script will be executed after the k8s component is run. The user needs to ensure that the script is reentrant and retry logic. The script and its generated log files can be viewed in the /data/ccs_userscript/ path of the node, if required. The node needs to be initialized before it can be added to the schedule. It can be used with the unschedulable parameter. After the final initialization of userScript is completed, add the kubectl uncordon nodename --kubeconfig=/root/.kube/config command to add the node to the schedule.
        :param pulumi.Input[pulumi.InputType['ScaleWorkerWorkerConfigArgs']] worker_config: Deploy the machine configuration information of the 'WORK' service, and create <=20 units for common users.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScaleWorkerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to increase instance to cluster

        > **NOTE:** To use the custom Kubernetes component startup parameter function (parameter `extra_args`), you need to submit a ticket for application.

        > **NOTE:** Import Node: Currently, only one node can be imported at a time.

        > **NOTE:** If you need to view error messages during instance creation, you can use parameter `create_result_output_file` to set the file save path

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        subnet = config.get("subnet")
        if subnet is None:
            subnet = "subnet-pqfek0t8"
        scale_instance_type = config.get("scaleInstanceType")
        if scale_instance_type is None:
            scale_instance_type = "S2.LARGE16"
        example = tencentcloud.kubernetes.ScaleWorker("example",
            cluster_id="cls-godovr32",
            desired_pod_num=16,
            labels={
                "test1": "test1",
                "test2": "test2",
            },
            worker_config=tencentcloud.kubernetes.ScaleWorkerWorkerConfigArgs(
                count=3,
                availability_zone=availability_zone,
                instance_type=scale_instance_type,
                subnet_id=subnet,
                system_disk_type="CLOUD_SSD",
                system_disk_size=50,
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=100,
                public_ip_assigned=True,
                data_disks=[tencentcloud.kubernetes.ScaleWorkerWorkerConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                user_data="dGVzdA==",
                password="AABBccdd1122",
            ),
            create_result_output_file="my_output_file_path")
        ```
        <!--End PulumiCodeChooser -->

        ### Use Kubelet

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        subnet = config.get("subnet")
        if subnet is None:
            subnet = "subnet-pqfek0t8"
        scale_instance_type = config.get("scaleInstanceType")
        if scale_instance_type is None:
            scale_instance_type = "S2.LARGE16"
        example = tencentcloud.kubernetes.ScaleWorker("example",
            cluster_id="cls-godovr32",
            extra_args=["root-dir=/var/lib/kubelet"],
            labels={
                "test1": "test1",
                "test2": "test2",
            },
            worker_config=tencentcloud.kubernetes.ScaleWorkerWorkerConfigArgs(
                count=3,
                availability_zone=availability_zone,
                instance_type=scale_instance_type,
                subnet_id=subnet,
                system_disk_type="CLOUD_SSD",
                system_disk_size=50,
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=100,
                public_ip_assigned=True,
                data_disks=[tencentcloud.kubernetes.ScaleWorkerWorkerConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                user_data="dGVzdA==",
                password="AABBccdd1122",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tke scale worker can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Kubernetes/scaleWorker:ScaleWorker example cls-mij6c2pq#ins-n6esjkdi
        ```

        :param str resource_name: The name of the resource.
        :param ScaleWorkerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScaleWorkerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 create_result_output_file: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerDataDiskArgs']]]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_args: Optional[pulumi.Input[pulumi.InputType['ScaleWorkerGpuArgsArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerTaintArgs']]]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 user_script: Optional[pulumi.Input[str]] = None,
                 worker_config: Optional[pulumi.Input[pulumi.InputType['ScaleWorkerWorkerConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScaleWorkerArgs.__new__(ScaleWorkerArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["create_result_output_file"] = create_result_output_file
            __props__.__dict__["data_disks"] = data_disks
            __props__.__dict__["desired_pod_num"] = desired_pod_num
            __props__.__dict__["docker_graph_path"] = docker_graph_path
            __props__.__dict__["extra_args"] = extra_args
            __props__.__dict__["gpu_args"] = gpu_args
            __props__.__dict__["labels"] = labels
            __props__.__dict__["mount_target"] = mount_target
            __props__.__dict__["pre_start_user_script"] = pre_start_user_script
            __props__.__dict__["taints"] = taints
            __props__.__dict__["unschedulable"] = unschedulable
            __props__.__dict__["user_script"] = user_script
            if worker_config is None and not opts.urn:
                raise TypeError("Missing required property 'worker_config'")
            __props__.__dict__["worker_config"] = worker_config
            __props__.__dict__["worker_instances_lists"] = None
        super(ScaleWorker, __self__).__init__(
            'tencentcloud:Kubernetes/scaleWorker:ScaleWorker',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            create_result_output_file: Optional[pulumi.Input[str]] = None,
            data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerDataDiskArgs']]]]] = None,
            desired_pod_num: Optional[pulumi.Input[int]] = None,
            docker_graph_path: Optional[pulumi.Input[str]] = None,
            extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            gpu_args: Optional[pulumi.Input[pulumi.InputType['ScaleWorkerGpuArgsArgs']]] = None,
            labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            mount_target: Optional[pulumi.Input[str]] = None,
            pre_start_user_script: Optional[pulumi.Input[str]] = None,
            taints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerTaintArgs']]]]] = None,
            unschedulable: Optional[pulumi.Input[int]] = None,
            user_script: Optional[pulumi.Input[str]] = None,
            worker_config: Optional[pulumi.Input[pulumi.InputType['ScaleWorkerWorkerConfigArgs']]] = None,
            worker_instances_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerWorkerInstancesListArgs']]]]] = None) -> 'ScaleWorker':
        """
        Get an existing ScaleWorker resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[str] create_result_output_file: Used to save results of CVMs creation error messages.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerDataDiskArgs']]]] data_disks: Configurations of tke data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in current node. Valid when the cluster enable customized pod cidr.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input[pulumi.InputType['ScaleWorkerGpuArgsArgs']] gpu_args: GPU driver parameters.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes scale worker created nodes.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] pre_start_user_script: Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerTaintArgs']]]] taints: Node taint.
        :param pulumi.Input[int] unschedulable: Set whether the added node participates in scheduling. The default value is 0, which means participating in scheduling; non-0 means not participating in scheduling. After the node initialization is completed, you can execute kubectl uncordon nodename to join the node in scheduling.
        :param pulumi.Input[str] user_script: Base64 encoded user script, this script will be executed after the k8s component is run. The user needs to ensure that the script is reentrant and retry logic. The script and its generated log files can be viewed in the /data/ccs_userscript/ path of the node, if required. The node needs to be initialized before it can be added to the schedule. It can be used with the unschedulable parameter. After the final initialization of userScript is completed, add the kubectl uncordon nodename --kubeconfig=/root/.kube/config command to add the node to the schedule.
        :param pulumi.Input[pulumi.InputType['ScaleWorkerWorkerConfigArgs']] worker_config: Deploy the machine configuration information of the 'WORK' service, and create <=20 units for common users.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScaleWorkerWorkerInstancesListArgs']]]] worker_instances_lists: An information list of kubernetes cluster 'WORKER'. Each element contains the following attributes:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScaleWorkerState.__new__(_ScaleWorkerState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["create_result_output_file"] = create_result_output_file
        __props__.__dict__["data_disks"] = data_disks
        __props__.__dict__["desired_pod_num"] = desired_pod_num
        __props__.__dict__["docker_graph_path"] = docker_graph_path
        __props__.__dict__["extra_args"] = extra_args
        __props__.__dict__["gpu_args"] = gpu_args
        __props__.__dict__["labels"] = labels
        __props__.__dict__["mount_target"] = mount_target
        __props__.__dict__["pre_start_user_script"] = pre_start_user_script
        __props__.__dict__["taints"] = taints
        __props__.__dict__["unschedulable"] = unschedulable
        __props__.__dict__["user_script"] = user_script
        __props__.__dict__["worker_config"] = worker_config
        __props__.__dict__["worker_instances_lists"] = worker_instances_lists
        return ScaleWorker(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createResultOutputFile")
    def create_result_output_file(self) -> pulumi.Output[Optional[str]]:
        """
        Used to save results of CVMs creation error messages.
        """
        return pulumi.get(self, "create_result_output_file")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> pulumi.Output[Optional[Sequence['outputs.ScaleWorkerDataDisk']]]:
        """
        Configurations of tke data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> pulumi.Output[Optional[int]]:
        """
        Indicate to set desired pod number in current node. Valid when the cluster enable customized pod cidr.
        """
        return pulumi.get(self, "desired_pod_num")

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> pulumi.Output[Optional[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Custom parameter information related to the node.
        """
        return pulumi.get(self, "extra_args")

    @property
    @pulumi.getter(name="gpuArgs")
    def gpu_args(self) -> pulumi.Output[Optional['outputs.ScaleWorkerGpuArgs']]:
        """
        GPU driver parameters.
        """
        return pulumi.get(self, "gpu_args")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Labels of kubernetes scale worker created nodes.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> pulumi.Output[Optional[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @property
    @pulumi.getter(name="preStartUserScript")
    def pre_start_user_script(self) -> pulumi.Output[Optional[str]]:
        """
        Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        """
        return pulumi.get(self, "pre_start_user_script")

    @property
    @pulumi.getter
    def taints(self) -> pulumi.Output[Optional[Sequence['outputs.ScaleWorkerTaint']]]:
        """
        Node taint.
        """
        return pulumi.get(self, "taints")

    @property
    @pulumi.getter
    def unschedulable(self) -> pulumi.Output[Optional[int]]:
        """
        Set whether the added node participates in scheduling. The default value is 0, which means participating in scheduling; non-0 means not participating in scheduling. After the node initialization is completed, you can execute kubectl uncordon nodename to join the node in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @property
    @pulumi.getter(name="userScript")
    def user_script(self) -> pulumi.Output[Optional[str]]:
        """
        Base64 encoded user script, this script will be executed after the k8s component is run. The user needs to ensure that the script is reentrant and retry logic. The script and its generated log files can be viewed in the /data/ccs_userscript/ path of the node, if required. The node needs to be initialized before it can be added to the schedule. It can be used with the unschedulable parameter. After the final initialization of userScript is completed, add the kubectl uncordon nodename --kubeconfig=/root/.kube/config command to add the node to the schedule.
        """
        return pulumi.get(self, "user_script")

    @property
    @pulumi.getter(name="workerConfig")
    def worker_config(self) -> pulumi.Output['outputs.ScaleWorkerWorkerConfig']:
        """
        Deploy the machine configuration information of the 'WORK' service, and create <=20 units for common users.
        """
        return pulumi.get(self, "worker_config")

    @property
    @pulumi.getter(name="workerInstancesLists")
    def worker_instances_lists(self) -> pulumi.Output[Sequence['outputs.ScaleWorkerWorkerInstancesList']]:
        """
        An information list of kubernetes cluster 'WORKER'. Each element contains the following attributes:
        """
        return pulumi.get(self, "worker_instances_lists")

