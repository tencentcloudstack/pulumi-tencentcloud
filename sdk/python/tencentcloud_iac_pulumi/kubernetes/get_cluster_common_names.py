# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetClusterCommonNamesResult',
    'AwaitableGetClusterCommonNamesResult',
    'get_cluster_common_names',
    'get_cluster_common_names_output',
]

@pulumi.output_type
class GetClusterCommonNamesResult:
    """
    A collection of values returned by getClusterCommonNames.
    """
    def __init__(__self__, cluster_id=None, id=None, lists=None, result_output_file=None, role_ids=None, subaccount_uins=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if role_ids and not isinstance(role_ids, list):
            raise TypeError("Expected argument 'role_ids' to be a list")
        pulumi.set(__self__, "role_ids", role_ids)
        if subaccount_uins and not isinstance(subaccount_uins, list):
            raise TypeError("Expected argument 'subaccount_uins' to be a list")
        pulumi.set(__self__, "subaccount_uins", subaccount_uins)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetClusterCommonNamesListResult']:
        """
        List of the CommonName in the certificate of the client corresponding to the sub-account UIN.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="roleIds")
    def role_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "role_ids")

    @property
    @pulumi.getter(name="subaccountUins")
    def subaccount_uins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subaccount_uins")


class AwaitableGetClusterCommonNamesResult(GetClusterCommonNamesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterCommonNamesResult(
            cluster_id=self.cluster_id,
            id=self.id,
            lists=self.lists,
            result_output_file=self.result_output_file,
            role_ids=self.role_ids,
            subaccount_uins=self.subaccount_uins)


def get_cluster_common_names(cluster_id: Optional[str] = None,
                             result_output_file: Optional[str] = None,
                             role_ids: Optional[Sequence[str]] = None,
                             subaccount_uins: Optional[Sequence[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterCommonNamesResult:
    """
    Provide a datasource to query cluster CommonNames.

    ## Example Usage

    ### Query common names by subaccount uins

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Kubernetes.get_cluster_common_names(cluster_id="cls-fdy7hm1q",
        subaccount_uins=[
            "100037718139",
            "100031340176",
        ])
    ```
    <!--End PulumiCodeChooser -->

    ### Query common names by role ids

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Kubernetes.get_cluster_common_names(cluster_id="cls-fdy7hm1q",
        role_ids=["4611686018441060141"])
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster ID.
    :param str result_output_file: Used to save results.
    :param Sequence[str] role_ids: List of Role ID. Up to 50 sub-accounts can be passed in at a time.
    :param Sequence[str] subaccount_uins: List of sub-account. Up to 50 sub-accounts can be passed in at a time.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['resultOutputFile'] = result_output_file
    __args__['roleIds'] = role_ids
    __args__['subaccountUins'] = subaccount_uins
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Kubernetes/getClusterCommonNames:getClusterCommonNames', __args__, opts=opts, typ=GetClusterCommonNamesResult).value

    return AwaitableGetClusterCommonNamesResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        lists=pulumi.get(__ret__, 'lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        role_ids=pulumi.get(__ret__, 'role_ids'),
        subaccount_uins=pulumi.get(__ret__, 'subaccount_uins'))


@_utilities.lift_output_func(get_cluster_common_names)
def get_cluster_common_names_output(cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                    role_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    subaccount_uins: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterCommonNamesResult]:
    """
    Provide a datasource to query cluster CommonNames.

    ## Example Usage

    ### Query common names by subaccount uins

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Kubernetes.get_cluster_common_names(cluster_id="cls-fdy7hm1q",
        subaccount_uins=[
            "100037718139",
            "100031340176",
        ])
    ```
    <!--End PulumiCodeChooser -->

    ### Query common names by role ids

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Kubernetes.get_cluster_common_names(cluster_id="cls-fdy7hm1q",
        role_ids=["4611686018441060141"])
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster ID.
    :param str result_output_file: Used to save results.
    :param Sequence[str] role_ids: List of Role ID. Up to 50 sub-accounts can be passed in at a time.
    :param Sequence[str] subaccount_uins: List of sub-account. Up to 50 sub-accounts can be passed in at a time.
    """
    ...
