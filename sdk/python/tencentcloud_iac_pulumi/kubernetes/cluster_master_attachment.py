# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterMasterAttachmentArgs', 'ClusterMasterAttachment']

@pulumi.input_type
class ClusterMasterAttachmentArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 node_role: pulumi.Input[str],
                 desired_pod_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enhanced_automation_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 extra_args: Optional[pulumi.Input['ClusterMasterAttachmentExtraArgsArgs']] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 key_ids: Optional[pulumi.Input[str]] = None,
                 master_config: Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigArgs']] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ClusterMasterAttachment resource.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[str] instance_id: ID of the CVM instance, this cvm will reinstall the system.
        :param pulumi.Input[str] node_role: Node role, values: MASTER_ETCD, WORKER. MASTER_ETCD needs to be specified only when creating an INDEPENDENT_CLUSTER independent cluster. The number of MASTER_ETCD nodes is 3-7, and it is recommended to have an odd number. The minimum configuration for MASTER_ETCD is 4C8G.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] desired_pod_numbers: When the node belongs to the podCIDR size customization mode, the maximum number of pods running on the node can be specified.
        :param pulumi.Input[bool] enhanced_automation_service: Activate TencentCloud Automation Tools (TAT) service. If this parameter is not specified, the public image will default to enabling the Cloud Automation Assistant service, while other images will default to not enabling the Cloud Automation Assistant service.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input['ClusterMasterAttachmentExtraArgsArgs'] extra_args: Custom parameters for cluster master component.
        :param pulumi.Input[str] host_name: When reinstalling the system, you can specify the HostName of the instance to be modified (this parameter must be passed when the cluster is in HostName mode, and the rule name should be consistent with the HostName of the CVM instance creation interface except that uppercase characters are not supported).
        :param pulumi.Input[str] key_ids: The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
        :param pulumi.Input['ClusterMasterAttachmentMasterConfigArgs'] master_config: Advanced Node Settings. commonly used to attach existing instances.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group to which the instance belongs. This parameter can be obtained by calling the sgId field in the return value of DescribeSecureGroups. If this parameter is not specified, the default security group will be bound.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "node_role", node_role)
        if desired_pod_numbers is not None:
            pulumi.set(__self__, "desired_pod_numbers", desired_pod_numbers)
        if enhanced_automation_service is not None:
            pulumi.set(__self__, "enhanced_automation_service", enhanced_automation_service)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if master_config is not None:
            pulumi.set(__self__, "master_config", master_config)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        ID of the CVM instance, this cvm will reinstall the system.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> pulumi.Input[str]:
        """
        Node role, values: MASTER_ETCD, WORKER. MASTER_ETCD needs to be specified only when creating an INDEPENDENT_CLUSTER independent cluster. The number of MASTER_ETCD nodes is 3-7, and it is recommended to have an odd number. The minimum configuration for MASTER_ETCD is 4C8G.
        """
        return pulumi.get(self, "node_role")

    @node_role.setter
    def node_role(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_role", value)

    @property
    @pulumi.getter(name="desiredPodNumbers")
    def desired_pod_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        When the node belongs to the podCIDR size customization mode, the maximum number of pods running on the node can be specified.
        """
        return pulumi.get(self, "desired_pod_numbers")

    @desired_pod_numbers.setter
    def desired_pod_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "desired_pod_numbers", value)

    @property
    @pulumi.getter(name="enhancedAutomationService")
    def enhanced_automation_service(self) -> Optional[pulumi.Input[bool]]:
        """
        Activate TencentCloud Automation Tools (TAT) service. If this parameter is not specified, the public image will default to enabling the Cloud Automation Assistant service, while other images will default to not enabling the Cloud Automation Assistant service.
        """
        return pulumi.get(self, "enhanced_automation_service")

    @enhanced_automation_service.setter
    def enhanced_automation_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_automation_service", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input['ClusterMasterAttachmentExtraArgsArgs']]:
        """
        Custom parameters for cluster master component.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input['ClusterMasterAttachmentExtraArgsArgs']]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        When reinstalling the system, you can specify the HostName of the instance to be modified (this parameter must be passed when the cluster is in HostName mode, and the rule name should be consistent with the HostName of the CVM instance creation interface except that uppercase characters are not supported).
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[str]]:
        """
        The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter(name="masterConfig")
    def master_config(self) -> Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigArgs']]:
        """
        Advanced Node Settings. commonly used to attach existing instances.
        """
        return pulumi.get(self, "master_config")

    @master_config.setter
    def master_config(self, value: Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigArgs']]):
        pulumi.set(self, "master_config", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security group to which the instance belongs. This parameter can be obtained by calling the sgId field in the return value of DescribeSecureGroups. If this parameter is not specified, the default security group will be bound.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)


@pulumi.input_type
class _ClusterMasterAttachmentState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 desired_pod_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enhanced_automation_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 extra_args: Optional[pulumi.Input['ClusterMasterAttachmentExtraArgsArgs']] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 key_ids: Optional[pulumi.Input[str]] = None,
                 master_config: Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigArgs']] = None,
                 node_role: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ClusterMasterAttachment resources.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] desired_pod_numbers: When the node belongs to the podCIDR size customization mode, the maximum number of pods running on the node can be specified.
        :param pulumi.Input[bool] enhanced_automation_service: Activate TencentCloud Automation Tools (TAT) service. If this parameter is not specified, the public image will default to enabling the Cloud Automation Assistant service, while other images will default to not enabling the Cloud Automation Assistant service.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input['ClusterMasterAttachmentExtraArgsArgs'] extra_args: Custom parameters for cluster master component.
        :param pulumi.Input[str] host_name: When reinstalling the system, you can specify the HostName of the instance to be modified (this parameter must be passed when the cluster is in HostName mode, and the rule name should be consistent with the HostName of the CVM instance creation interface except that uppercase characters are not supported).
        :param pulumi.Input[str] instance_id: ID of the CVM instance, this cvm will reinstall the system.
        :param pulumi.Input[str] key_ids: The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
        :param pulumi.Input['ClusterMasterAttachmentMasterConfigArgs'] master_config: Advanced Node Settings. commonly used to attach existing instances.
        :param pulumi.Input[str] node_role: Node role, values: MASTER_ETCD, WORKER. MASTER_ETCD needs to be specified only when creating an INDEPENDENT_CLUSTER independent cluster. The number of MASTER_ETCD nodes is 3-7, and it is recommended to have an odd number. The minimum configuration for MASTER_ETCD is 4C8G.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group to which the instance belongs. This parameter can be obtained by calling the sgId field in the return value of DescribeSecureGroups. If this parameter is not specified, the default security group will be bound.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if desired_pod_numbers is not None:
            pulumi.set(__self__, "desired_pod_numbers", desired_pod_numbers)
        if enhanced_automation_service is not None:
            pulumi.set(__self__, "enhanced_automation_service", enhanced_automation_service)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if master_config is not None:
            pulumi.set(__self__, "master_config", master_config)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="desiredPodNumbers")
    def desired_pod_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        When the node belongs to the podCIDR size customization mode, the maximum number of pods running on the node can be specified.
        """
        return pulumi.get(self, "desired_pod_numbers")

    @desired_pod_numbers.setter
    def desired_pod_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "desired_pod_numbers", value)

    @property
    @pulumi.getter(name="enhancedAutomationService")
    def enhanced_automation_service(self) -> Optional[pulumi.Input[bool]]:
        """
        Activate TencentCloud Automation Tools (TAT) service. If this parameter is not specified, the public image will default to enabling the Cloud Automation Assistant service, while other images will default to not enabling the Cloud Automation Assistant service.
        """
        return pulumi.get(self, "enhanced_automation_service")

    @enhanced_automation_service.setter
    def enhanced_automation_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_automation_service", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input['ClusterMasterAttachmentExtraArgsArgs']]:
        """
        Custom parameters for cluster master component.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input['ClusterMasterAttachmentExtraArgsArgs']]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        When reinstalling the system, you can specify the HostName of the instance to be modified (this parameter must be passed when the cluster is in HostName mode, and the rule name should be consistent with the HostName of the CVM instance creation interface except that uppercase characters are not supported).
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the CVM instance, this cvm will reinstall the system.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[str]]:
        """
        The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter(name="masterConfig")
    def master_config(self) -> Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigArgs']]:
        """
        Advanced Node Settings. commonly used to attach existing instances.
        """
        return pulumi.get(self, "master_config")

    @master_config.setter
    def master_config(self, value: Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigArgs']]):
        pulumi.set(self, "master_config", value)

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[pulumi.Input[str]]:
        """
        Node role, values: MASTER_ETCD, WORKER. MASTER_ETCD needs to be specified only when creating an INDEPENDENT_CLUSTER independent cluster. The number of MASTER_ETCD nodes is 3-7, and it is recommended to have an odd number. The minimum configuration for MASTER_ETCD is 4C8G.
        """
        return pulumi.get(self, "node_role")

    @node_role.setter
    def node_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_role", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security group to which the instance belongs. This parameter can be obtained by calling the sgId field in the return value of DescribeSecureGroups. If this parameter is not specified, the default security group will be bound.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)


class ClusterMasterAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 desired_pod_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enhanced_automation_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 extra_args: Optional[pulumi.Input[pulumi.InputType['ClusterMasterAttachmentExtraArgsArgs']]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 key_ids: Optional[pulumi.Input[str]] = None,
                 master_config: Optional[pulumi.Input[pulumi.InputType['ClusterMasterAttachmentMasterConfigArgs']]] = None,
                 node_role: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a tke kubernetes cluster master attachment

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] desired_pod_numbers: When the node belongs to the podCIDR size customization mode, the maximum number of pods running on the node can be specified.
        :param pulumi.Input[bool] enhanced_automation_service: Activate TencentCloud Automation Tools (TAT) service. If this parameter is not specified, the public image will default to enabling the Cloud Automation Assistant service, while other images will default to not enabling the Cloud Automation Assistant service.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[pulumi.InputType['ClusterMasterAttachmentExtraArgsArgs']] extra_args: Custom parameters for cluster master component.
        :param pulumi.Input[str] host_name: When reinstalling the system, you can specify the HostName of the instance to be modified (this parameter must be passed when the cluster is in HostName mode, and the rule name should be consistent with the HostName of the CVM instance creation interface except that uppercase characters are not supported).
        :param pulumi.Input[str] instance_id: ID of the CVM instance, this cvm will reinstall the system.
        :param pulumi.Input[str] key_ids: The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
        :param pulumi.Input[pulumi.InputType['ClusterMasterAttachmentMasterConfigArgs']] master_config: Advanced Node Settings. commonly used to attach existing instances.
        :param pulumi.Input[str] node_role: Node role, values: MASTER_ETCD, WORKER. MASTER_ETCD needs to be specified only when creating an INDEPENDENT_CLUSTER independent cluster. The number of MASTER_ETCD nodes is 3-7, and it is recommended to have an odd number. The minimum configuration for MASTER_ETCD is 4C8G.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group to which the instance belongs. This parameter can be obtained by calling the sgId field in the return value of DescribeSecureGroups. If this parameter is not specified, the default security group will be bound.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterMasterAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tke kubernetes cluster master attachment

        :param str resource_name: The name of the resource.
        :param ClusterMasterAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterMasterAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 desired_pod_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enhanced_automation_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 extra_args: Optional[pulumi.Input[pulumi.InputType['ClusterMasterAttachmentExtraArgsArgs']]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 key_ids: Optional[pulumi.Input[str]] = None,
                 master_config: Optional[pulumi.Input[pulumi.InputType['ClusterMasterAttachmentMasterConfigArgs']]] = None,
                 node_role: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterMasterAttachmentArgs.__new__(ClusterMasterAttachmentArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["desired_pod_numbers"] = desired_pod_numbers
            __props__.__dict__["enhanced_automation_service"] = enhanced_automation_service
            __props__.__dict__["enhanced_monitor_service"] = enhanced_monitor_service
            __props__.__dict__["enhanced_security_service"] = enhanced_security_service
            __props__.__dict__["extra_args"] = extra_args
            __props__.__dict__["host_name"] = host_name
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["key_ids"] = key_ids
            __props__.__dict__["master_config"] = master_config
            if node_role is None and not opts.urn:
                raise TypeError("Missing required property 'node_role'")
            __props__.__dict__["node_role"] = node_role
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["security_group_ids"] = security_group_ids
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ClusterMasterAttachment, __self__).__init__(
            'tencentcloud:Kubernetes/clusterMasterAttachment:ClusterMasterAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            desired_pod_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            enhanced_automation_service: Optional[pulumi.Input[bool]] = None,
            enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
            enhanced_security_service: Optional[pulumi.Input[bool]] = None,
            extra_args: Optional[pulumi.Input[pulumi.InputType['ClusterMasterAttachmentExtraArgsArgs']]] = None,
            host_name: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            key_ids: Optional[pulumi.Input[str]] = None,
            master_config: Optional[pulumi.Input[pulumi.InputType['ClusterMasterAttachmentMasterConfigArgs']]] = None,
            node_role: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'ClusterMasterAttachment':
        """
        Get an existing ClusterMasterAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] desired_pod_numbers: When the node belongs to the podCIDR size customization mode, the maximum number of pods running on the node can be specified.
        :param pulumi.Input[bool] enhanced_automation_service: Activate TencentCloud Automation Tools (TAT) service. If this parameter is not specified, the public image will default to enabling the Cloud Automation Assistant service, while other images will default to not enabling the Cloud Automation Assistant service.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[pulumi.InputType['ClusterMasterAttachmentExtraArgsArgs']] extra_args: Custom parameters for cluster master component.
        :param pulumi.Input[str] host_name: When reinstalling the system, you can specify the HostName of the instance to be modified (this parameter must be passed when the cluster is in HostName mode, and the rule name should be consistent with the HostName of the CVM instance creation interface except that uppercase characters are not supported).
        :param pulumi.Input[str] instance_id: ID of the CVM instance, this cvm will reinstall the system.
        :param pulumi.Input[str] key_ids: The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
        :param pulumi.Input[pulumi.InputType['ClusterMasterAttachmentMasterConfigArgs']] master_config: Advanced Node Settings. commonly used to attach existing instances.
        :param pulumi.Input[str] node_role: Node role, values: MASTER_ETCD, WORKER. MASTER_ETCD needs to be specified only when creating an INDEPENDENT_CLUSTER independent cluster. The number of MASTER_ETCD nodes is 3-7, and it is recommended to have an odd number. The minimum configuration for MASTER_ETCD is 4C8G.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group to which the instance belongs. This parameter can be obtained by calling the sgId field in the return value of DescribeSecureGroups. If this parameter is not specified, the default security group will be bound.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterMasterAttachmentState.__new__(_ClusterMasterAttachmentState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["desired_pod_numbers"] = desired_pod_numbers
        __props__.__dict__["enhanced_automation_service"] = enhanced_automation_service
        __props__.__dict__["enhanced_monitor_service"] = enhanced_monitor_service
        __props__.__dict__["enhanced_security_service"] = enhanced_security_service
        __props__.__dict__["extra_args"] = extra_args
        __props__.__dict__["host_name"] = host_name
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["key_ids"] = key_ids
        __props__.__dict__["master_config"] = master_config
        __props__.__dict__["node_role"] = node_role
        __props__.__dict__["password"] = password
        __props__.__dict__["security_group_ids"] = security_group_ids
        return ClusterMasterAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="desiredPodNumbers")
    def desired_pod_numbers(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        When the node belongs to the podCIDR size customization mode, the maximum number of pods running on the node can be specified.
        """
        return pulumi.get(self, "desired_pod_numbers")

    @property
    @pulumi.getter(name="enhancedAutomationService")
    def enhanced_automation_service(self) -> pulumi.Output[Optional[bool]]:
        """
        Activate TencentCloud Automation Tools (TAT) service. If this parameter is not specified, the public image will default to enabling the Cloud Automation Assistant service, while other images will default to not enabling the Cloud Automation Assistant service.
        """
        return pulumi.get(self, "enhanced_automation_service")

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> pulumi.Output[Optional[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> pulumi.Output[Optional[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> pulumi.Output[Optional['outputs.ClusterMasterAttachmentExtraArgs']]:
        """
        Custom parameters for cluster master component.
        """
        return pulumi.get(self, "extra_args")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[Optional[str]]:
        """
        When reinstalling the system, you can specify the HostName of the instance to be modified (this parameter must be passed when the cluster is in HostName mode, and the rule name should be consistent with the HostName of the CVM instance creation interface except that uppercase characters are not supported).
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        ID of the CVM instance, this cvm will reinstall the system.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> pulumi.Output[Optional[str]]:
        """
        The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter(name="masterConfig")
    def master_config(self) -> pulumi.Output[Optional['outputs.ClusterMasterAttachmentMasterConfig']]:
        """
        Advanced Node Settings. commonly used to attach existing instances.
        """
        return pulumi.get(self, "master_config")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> pulumi.Output[str]:
        """
        Node role, values: MASTER_ETCD, WORKER. MASTER_ETCD needs to be specified only when creating an INDEPENDENT_CLUSTER independent cluster. The number of MASTER_ETCD nodes is 3-7, and it is recommended to have an odd number. The minimum configuration for MASTER_ETCD is 4C8G.
        """
        return pulumi.get(self, "node_role")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The security group to which the instance belongs. This parameter can be obtained by calling the sgId field in the return value of DescribeSecureGroups. If this parameter is not specified, the default security group will be bound.
        """
        return pulumi.get(self, "security_group_ids")

