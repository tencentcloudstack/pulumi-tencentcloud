# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HealthCheckPolicyArgs', 'HealthCheckPolicy']

@pulumi.input_type
class HealthCheckPolicyArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 rules: pulumi.Input[Sequence[pulumi.Input['HealthCheckPolicyRuleArgs']]],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a HealthCheckPolicy resource.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['HealthCheckPolicyRuleArgs']]] rules: Health check policy rule list.
        :param pulumi.Input[str] name: Health Check Policy Name.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "rules", rules)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['HealthCheckPolicyRuleArgs']]]:
        """
        Health check policy rule list.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['HealthCheckPolicyRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health Check Policy Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _HealthCheckPolicyState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['HealthCheckPolicyRuleArgs']]]] = None):
        """
        Input properties used for looking up and filtering HealthCheckPolicy resources.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[str] name: Health Check Policy Name.
        :param pulumi.Input[Sequence[pulumi.Input['HealthCheckPolicyRuleArgs']]] rules: Health check policy rule list.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health Check Policy Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HealthCheckPolicyRuleArgs']]]]:
        """
        Health check policy rule list.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HealthCheckPolicyRuleArgs']]]]):
        pulumi.set(self, "rules", value)


class HealthCheckPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HealthCheckPolicyRuleArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a tke kubernetes_health_check_policy

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        kubernetes_health_check_policy = tencentcloud.kubernetes.HealthCheckPolicy("kubernetesHealthCheckPolicy",
            cluster_id="cls-xxxxx",
            rules=[
                tencentcloud.kubernetes.HealthCheckPolicyRuleArgs(
                    auto_repair_enabled=True,
                    enabled=True,
                    name="OOMKilling",
                ),
                tencentcloud.kubernetes.HealthCheckPolicyRuleArgs(
                    auto_repair_enabled=True,
                    enabled=True,
                    name="KubeletUnhealthy",
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tke kubernetes_health_check_policy can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Kubernetes/healthCheckPolicy:HealthCheckPolicy kubernetes_health_check_policy cls-xxxxx#healthcheckpolicyname
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[str] name: Health Check Policy Name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HealthCheckPolicyRuleArgs']]]] rules: Health check policy rule list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HealthCheckPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tke kubernetes_health_check_policy

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        kubernetes_health_check_policy = tencentcloud.kubernetes.HealthCheckPolicy("kubernetesHealthCheckPolicy",
            cluster_id="cls-xxxxx",
            rules=[
                tencentcloud.kubernetes.HealthCheckPolicyRuleArgs(
                    auto_repair_enabled=True,
                    enabled=True,
                    name="OOMKilling",
                ),
                tencentcloud.kubernetes.HealthCheckPolicyRuleArgs(
                    auto_repair_enabled=True,
                    enabled=True,
                    name="KubeletUnhealthy",
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tke kubernetes_health_check_policy can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Kubernetes/healthCheckPolicy:HealthCheckPolicy kubernetes_health_check_policy cls-xxxxx#healthcheckpolicyname
        ```

        :param str resource_name: The name of the resource.
        :param HealthCheckPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HealthCheckPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HealthCheckPolicyRuleArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HealthCheckPolicyArgs.__new__(HealthCheckPolicyArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["name"] = name
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
        super(HealthCheckPolicy, __self__).__init__(
            'tencentcloud:Kubernetes/healthCheckPolicy:HealthCheckPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HealthCheckPolicyRuleArgs']]]]] = None) -> 'HealthCheckPolicy':
        """
        Get an existing HealthCheckPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[str] name: Health Check Policy Name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HealthCheckPolicyRuleArgs']]]] rules: Health check policy rule list.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HealthCheckPolicyState.__new__(_HealthCheckPolicyState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["name"] = name
        __props__.__dict__["rules"] = rules
        return HealthCheckPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Health Check Policy Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.HealthCheckPolicyRule']]:
        """
        Health check policy rule list.
        """
        return pulumi.get(self, "rules")

