# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ClusterAttachmentWorkerConfigArgs',
    'ClusterAttachmentWorkerConfigDataDiskArgs',
    'ClusterAttachmentWorkerConfigGpuArgsArgs',
    'ClusterAttachmentWorkerConfigOverridesArgs',
    'ClusterAttachmentWorkerConfigOverridesDataDiskArgs',
    'ClusterAttachmentWorkerConfigOverridesGpuArgsArgs',
    'ClusterAttachmentWorkerConfigTaintArgs',
    'ClusterAuthOptionsArgs',
    'ClusterClusterAuditArgs',
    'ClusterClusterExtraArgsArgs',
    'ClusterEventPersistenceArgs',
    'ClusterExistInstanceArgs',
    'ClusterExistInstanceInstancesParaArgs',
    'ClusterExistInstanceInstancesParaMasterConfigArgs',
    'ClusterExistInstanceInstancesParaMasterConfigDataDiskArgs',
    'ClusterExistInstanceInstancesParaMasterConfigExtraArgsArgs',
    'ClusterExistInstanceInstancesParaMasterConfigGpuArgsArgs',
    'ClusterExistInstanceInstancesParaMasterConfigLabelArgs',
    'ClusterExistInstanceInstancesParaMasterConfigTaintArgs',
    'ClusterExtensionAddonArgs',
    'ClusterLogAgentArgs',
    'ClusterMasterAttachmentExtraArgsArgs',
    'ClusterMasterAttachmentMasterConfigArgs',
    'ClusterMasterAttachmentMasterConfigDataDiskArgs',
    'ClusterMasterAttachmentMasterConfigExtraArgsArgs',
    'ClusterMasterAttachmentMasterConfigGpuArgsArgs',
    'ClusterMasterAttachmentMasterConfigLabelArgs',
    'ClusterMasterAttachmentMasterConfigTaintArgs',
    'ClusterMasterConfigArgs',
    'ClusterMasterConfigDataDiskArgs',
    'ClusterNodePoolGlobalConfigArgs',
    'ClusterResourceDeleteOptionArgs',
    'ClusterWorkerConfigArgs',
    'ClusterWorkerConfigDataDiskArgs',
    'ClusterWorkerInstancesListArgs',
    'EncryptionProtectionKmsConfigurationArgs',
    'HealthCheckPolicyRuleArgs',
    'NativeNodePoolAnnotationArgs',
    'NativeNodePoolLabelArgs',
    'NativeNodePoolNativeArgs',
    'NativeNodePoolNativeDataDiskArgs',
    'NativeNodePoolNativeInstanceChargePrepaidArgs',
    'NativeNodePoolNativeInternetAccessibleArgs',
    'NativeNodePoolNativeLifecycleArgs',
    'NativeNodePoolNativeManagementArgs',
    'NativeNodePoolNativeScalingArgs',
    'NativeNodePoolNativeSystemDiskArgs',
    'NativeNodePoolTagArgs',
    'NativeNodePoolTagTagArgs',
    'NativeNodePoolTaintArgs',
    'NodePoolAnnotationArgs',
    'NodePoolAutoScalingConfigArgs',
    'NodePoolAutoScalingConfigDataDiskArgs',
    'NodePoolNodeConfigArgs',
    'NodePoolNodeConfigDataDiskArgs',
    'NodePoolNodeConfigGpuArgsArgs',
    'NodePoolTaintArgs',
    'ScaleWorkerDataDiskArgs',
    'ScaleWorkerGpuArgsArgs',
    'ScaleWorkerTaintArgs',
    'ScaleWorkerWorkerConfigArgs',
    'ScaleWorkerWorkerConfigDataDiskArgs',
    'ScaleWorkerWorkerInstancesListArgs',
    'ServerlessNodePoolServerlessNodeArgs',
    'ServerlessNodePoolTaintArgs',
    'GetClusterInstancesFilterArgs',
    'GetClusterNativeNodePoolsFilterArgs',
    'GetClusterNodePoolsFilterArgs',
]

@pulumi.input_type
class ClusterAttachmentWorkerConfigArgs:
    def __init__(__self__, *,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_args: Optional[pulumi.Input['ClusterAttachmentWorkerConfigGpuArgsArgs']] = None,
                 is_schedule: Optional[pulumi.Input[bool]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigTaintArgs']]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node. This is a white-list parameter.
        :param pulumi.Input['ClusterAttachmentWorkerConfigGpuArgsArgs'] gpu_args: GPU driver parameters.
        :param pulumi.Input[bool] is_schedule: This argument was deprecated, use `unschedulable` instead. Indicate to schedule the adding node or not. Default is true.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] pre_start_user_script: Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigTaintArgs']]] taints: Node taint.
        :param pulumi.Input[str] user_data: Base64-encoded User Data text, the length limit is 16KB.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if gpu_args is not None:
            pulumi.set(__self__, "gpu_args", gpu_args)
        if is_schedule is not None:
            warnings.warn("""This argument was deprecated, use `unschedulable` instead.""", DeprecationWarning)
            pulumi.log.warn("""is_schedule is deprecated: This argument was deprecated, use `unschedulable` instead.""")
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if pre_start_user_script is not None:
            pulumi.set(__self__, "pre_start_user_script", pre_start_user_script)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node. This is a white-list parameter.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="gpuArgs")
    def gpu_args(self) -> Optional[pulumi.Input['ClusterAttachmentWorkerConfigGpuArgsArgs']]:
        """
        GPU driver parameters.
        """
        return pulumi.get(self, "gpu_args")

    @gpu_args.setter
    def gpu_args(self, value: Optional[pulumi.Input['ClusterAttachmentWorkerConfigGpuArgsArgs']]):
        pulumi.set(self, "gpu_args", value)

    @property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[pulumi.Input[bool]]:
        """
        This argument was deprecated, use `unschedulable` instead. Indicate to schedule the adding node or not. Default is true.
        """
        warnings.warn("""This argument was deprecated, use `unschedulable` instead.""", DeprecationWarning)
        pulumi.log.warn("""is_schedule is deprecated: This argument was deprecated, use `unschedulable` instead.""")

        return pulumi.get(self, "is_schedule")

    @is_schedule.setter
    def is_schedule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_schedule", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="preStartUserScript")
    def pre_start_user_script(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        """
        return pulumi.get(self, "pre_start_user_script")

    @pre_start_user_script.setter
    def pre_start_user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_start_user_script", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigTaintArgs']]]]:
        """
        Node taint.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ClusterAttachmentWorkerConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class ClusterAttachmentWorkerConfigGpuArgsArgs:
    def __init__(__self__, *,
                 cuda: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cudnn: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 custom_driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mig_enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] cuda: CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[Mapping[str, Any]] cudnn: cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        :param pulumi.Input[Mapping[str, Any]] custom_driver: Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        :param pulumi.Input[Mapping[str, Any]] driver: GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[bool] mig_enable: Whether to enable MIG.
        """
        if cuda is not None:
            pulumi.set(__self__, "cuda", cuda)
        if cudnn is not None:
            pulumi.set(__self__, "cudnn", cudnn)
        if custom_driver is not None:
            pulumi.set(__self__, "custom_driver", custom_driver)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if mig_enable is not None:
            pulumi.set(__self__, "mig_enable", mig_enable)

    @property
    @pulumi.getter
    def cuda(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "cuda")

    @cuda.setter
    def cuda(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cuda", value)

    @property
    @pulumi.getter
    def cudnn(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        """
        return pulumi.get(self, "cudnn")

    @cudnn.setter
    def cudnn(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cudnn", value)

    @property
    @pulumi.getter(name="customDriver")
    def custom_driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        """
        return pulumi.get(self, "custom_driver")

    @custom_driver.setter
    def custom_driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_driver", value)

    @property
    @pulumi.getter
    def driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="migEnable")
    def mig_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable MIG.
        """
        return pulumi.get(self, "mig_enable")

    @mig_enable.setter
    def mig_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mig_enable", value)


@pulumi.input_type
class ClusterAttachmentWorkerConfigOverridesArgs:
    def __init__(__self__, *,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigOverridesDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_args: Optional[pulumi.Input['ClusterAttachmentWorkerConfigOverridesGpuArgsArgs']] = None,
                 is_schedule: Optional[pulumi.Input[bool]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigOverridesDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param pulumi.Input[str] docker_graph_path: This argument was no longer supported by TencentCloud TKE. Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: This argument was no longer supported by TencentCloud TKE. Custom parameter information related to the node. This is a white-list parameter.
        :param pulumi.Input['ClusterAttachmentWorkerConfigOverridesGpuArgsArgs'] gpu_args: GPU driver parameters.
        :param pulumi.Input[bool] is_schedule: This argument was deprecated, use `unschedulable` instead. Indicate to schedule the adding node or not. Default is true.
        :param pulumi.Input[str] mount_target: This argument was no longer supported by TencentCloud TKE. Mount target. Default is not mounting.
        :param pulumi.Input[str] pre_start_user_script: This argument was no longer supported by TencentCloud TKE. Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[str] user_data: This argument was no longer supported by TencentCloud TKE. Base64-encoded User Data text, the length limit is 16KB.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            warnings.warn("""This argument was no longer supported by TencentCloud TKE.""", DeprecationWarning)
            pulumi.log.warn("""docker_graph_path is deprecated: This argument was no longer supported by TencentCloud TKE.""")
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            warnings.warn("""This argument was no longer supported by TencentCloud TKE.""", DeprecationWarning)
            pulumi.log.warn("""extra_args is deprecated: This argument was no longer supported by TencentCloud TKE.""")
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if gpu_args is not None:
            pulumi.set(__self__, "gpu_args", gpu_args)
        if is_schedule is not None:
            warnings.warn("""This argument was deprecated, use `unschedulable` instead.""", DeprecationWarning)
            pulumi.log.warn("""is_schedule is deprecated: This argument was deprecated, use `unschedulable` instead.""")
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if mount_target is not None:
            warnings.warn("""This argument was no longer supported by TencentCloud TKE.""", DeprecationWarning)
            pulumi.log.warn("""mount_target is deprecated: This argument was no longer supported by TencentCloud TKE.""")
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if pre_start_user_script is not None:
            warnings.warn("""This argument was no longer supported by TencentCloud TKE.""", DeprecationWarning)
            pulumi.log.warn("""pre_start_user_script is deprecated: This argument was no longer supported by TencentCloud TKE.""")
        if pre_start_user_script is not None:
            pulumi.set(__self__, "pre_start_user_script", pre_start_user_script)
        if user_data is not None:
            warnings.warn("""This argument was no longer supported by TencentCloud TKE.""", DeprecationWarning)
            pulumi.log.warn("""user_data is deprecated: This argument was no longer supported by TencentCloud TKE.""")
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigOverridesDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentWorkerConfigOverridesDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        This argument was no longer supported by TencentCloud TKE. Docker graph path. Default is `/var/lib/docker`.
        """
        warnings.warn("""This argument was no longer supported by TencentCloud TKE.""", DeprecationWarning)
        pulumi.log.warn("""docker_graph_path is deprecated: This argument was no longer supported by TencentCloud TKE.""")

        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        This argument was no longer supported by TencentCloud TKE. Custom parameter information related to the node. This is a white-list parameter.
        """
        warnings.warn("""This argument was no longer supported by TencentCloud TKE.""", DeprecationWarning)
        pulumi.log.warn("""extra_args is deprecated: This argument was no longer supported by TencentCloud TKE.""")

        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="gpuArgs")
    def gpu_args(self) -> Optional[pulumi.Input['ClusterAttachmentWorkerConfigOverridesGpuArgsArgs']]:
        """
        GPU driver parameters.
        """
        return pulumi.get(self, "gpu_args")

    @gpu_args.setter
    def gpu_args(self, value: Optional[pulumi.Input['ClusterAttachmentWorkerConfigOverridesGpuArgsArgs']]):
        pulumi.set(self, "gpu_args", value)

    @property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[pulumi.Input[bool]]:
        """
        This argument was deprecated, use `unschedulable` instead. Indicate to schedule the adding node or not. Default is true.
        """
        warnings.warn("""This argument was deprecated, use `unschedulable` instead.""", DeprecationWarning)
        pulumi.log.warn("""is_schedule is deprecated: This argument was deprecated, use `unschedulable` instead.""")

        return pulumi.get(self, "is_schedule")

    @is_schedule.setter
    def is_schedule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_schedule", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        This argument was no longer supported by TencentCloud TKE. Mount target. Default is not mounting.
        """
        warnings.warn("""This argument was no longer supported by TencentCloud TKE.""", DeprecationWarning)
        pulumi.log.warn("""mount_target is deprecated: This argument was no longer supported by TencentCloud TKE.""")

        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="preStartUserScript")
    def pre_start_user_script(self) -> Optional[pulumi.Input[str]]:
        """
        This argument was no longer supported by TencentCloud TKE. Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        """
        warnings.warn("""This argument was no longer supported by TencentCloud TKE.""", DeprecationWarning)
        pulumi.log.warn("""pre_start_user_script is deprecated: This argument was no longer supported by TencentCloud TKE.""")

        return pulumi.get(self, "pre_start_user_script")

    @pre_start_user_script.setter
    def pre_start_user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_start_user_script", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        This argument was no longer supported by TencentCloud TKE. Base64-encoded User Data text, the length limit is 16KB.
        """
        warnings.warn("""This argument was no longer supported by TencentCloud TKE.""", DeprecationWarning)
        pulumi.log.warn("""user_data is deprecated: This argument was no longer supported by TencentCloud TKE.""")

        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ClusterAttachmentWorkerConfigOverridesDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class ClusterAttachmentWorkerConfigOverridesGpuArgsArgs:
    def __init__(__self__, *,
                 cuda: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cudnn: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 custom_driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mig_enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] cuda: CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[Mapping[str, Any]] cudnn: cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        :param pulumi.Input[Mapping[str, Any]] custom_driver: Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        :param pulumi.Input[Mapping[str, Any]] driver: GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[bool] mig_enable: Whether to enable MIG.
        """
        if cuda is not None:
            pulumi.set(__self__, "cuda", cuda)
        if cudnn is not None:
            pulumi.set(__self__, "cudnn", cudnn)
        if custom_driver is not None:
            pulumi.set(__self__, "custom_driver", custom_driver)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if mig_enable is not None:
            pulumi.set(__self__, "mig_enable", mig_enable)

    @property
    @pulumi.getter
    def cuda(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "cuda")

    @cuda.setter
    def cuda(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cuda", value)

    @property
    @pulumi.getter
    def cudnn(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        """
        return pulumi.get(self, "cudnn")

    @cudnn.setter
    def cudnn(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cudnn", value)

    @property
    @pulumi.getter(name="customDriver")
    def custom_driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        """
        return pulumi.get(self, "custom_driver")

    @custom_driver.setter
    def custom_driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_driver", value)

    @property
    @pulumi.getter
    def driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="migEnable")
    def mig_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable MIG.
        """
        return pulumi.get(self, "mig_enable")

    @mig_enable.setter
    def mig_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mig_enable", value)


@pulumi.input_type
class ClusterAttachmentWorkerConfigTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Effect of the taint.
        :param pulumi.Input[str] key: Key of the taint.
        :param pulumi.Input[str] value: Value of the taint.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect of the taint.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the taint.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the taint.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterAuthOptionsArgs:
    def __init__(__self__, *,
                 auto_create_discovery_anonymous_auth: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 jwks_uri: Optional[pulumi.Input[str]] = None,
                 use_tke_default: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] auto_create_discovery_anonymous_auth: If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
        :param pulumi.Input[str] issuer: Specify service-account-issuer. If use_tke_default is set to `true`, please do not set this field, it will be ignored anyway.
        :param pulumi.Input[str] jwks_uri: Specify service-account-jwks-uri. If use_tke_default is set to `true`, please do not set this field, it will be ignored anyway.
        :param pulumi.Input[bool] use_tke_default: If set to `true`, the issuer and jwks_uri will be generated automatically by tke, please do not set issuer and jwks_uri, and they will be ignored.
        """
        if auto_create_discovery_anonymous_auth is not None:
            pulumi.set(__self__, "auto_create_discovery_anonymous_auth", auto_create_discovery_anonymous_auth)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if jwks_uri is not None:
            pulumi.set(__self__, "jwks_uri", jwks_uri)
        if use_tke_default is not None:
            pulumi.set(__self__, "use_tke_default", use_tke_default)

    @property
    @pulumi.getter(name="autoCreateDiscoveryAnonymousAuth")
    def auto_create_discovery_anonymous_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
        """
        return pulumi.get(self, "auto_create_discovery_anonymous_auth")

    @auto_create_discovery_anonymous_auth.setter
    def auto_create_discovery_anonymous_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_discovery_anonymous_auth", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        Specify service-account-issuer. If use_tke_default is set to `true`, please do not set this field, it will be ignored anyway.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="jwksUri")
    def jwks_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Specify service-account-jwks-uri. If use_tke_default is set to `true`, please do not set this field, it will be ignored anyway.
        """
        return pulumi.get(self, "jwks_uri")

    @jwks_uri.setter
    def jwks_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwks_uri", value)

    @property
    @pulumi.getter(name="useTkeDefault")
    def use_tke_default(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, the issuer and jwks_uri will be generated automatically by tke, please do not set issuer and jwks_uri, and they will be ignored.
        """
        return pulumi.get(self, "use_tke_default")

    @use_tke_default.setter
    def use_tke_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_tke_default", value)


@pulumi.input_type
class ClusterClusterAuditArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 delete_audit_log_and_topic: Optional[pulumi.Input[bool]] = None,
                 log_set_id: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Specify weather the Cluster Audit enabled. NOTE: Enable Cluster Audit will also auto install Log Agent.
        :param pulumi.Input[bool] delete_audit_log_and_topic: when you want to close the cluster audit log or delete the cluster, you can use this parameter to determine whether the audit log set and topic created by default will be deleted.
        :param pulumi.Input[str] log_set_id: Specify id of existing CLS log set, or auto create a new set by leave it empty.
        :param pulumi.Input[str] topic_id: Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        pulumi.set(__self__, "enabled", enabled)
        if delete_audit_log_and_topic is not None:
            pulumi.set(__self__, "delete_audit_log_and_topic", delete_audit_log_and_topic)
        if log_set_id is not None:
            pulumi.set(__self__, "log_set_id", log_set_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Specify weather the Cluster Audit enabled. NOTE: Enable Cluster Audit will also auto install Log Agent.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="deleteAuditLogAndTopic")
    def delete_audit_log_and_topic(self) -> Optional[pulumi.Input[bool]]:
        """
        when you want to close the cluster audit log or delete the cluster, you can use this parameter to determine whether the audit log set and topic created by default will be deleted.
        """
        return pulumi.get(self, "delete_audit_log_and_topic")

    @delete_audit_log_and_topic.setter
    def delete_audit_log_and_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_audit_log_and_topic", value)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify id of existing CLS log set, or auto create a new set by leave it empty.
        """
        return pulumi.get(self, "log_set_id")

    @log_set_id.setter
    def log_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_set_id", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class ClusterClusterExtraArgsArgs:
    def __init__(__self__, *,
                 kube_apiservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_controller_managers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_schedulers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kube_apiservers: The customized parameters for kube-apiserver.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kube_controller_managers: The customized parameters for kube-controller-manager.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kube_schedulers: The customized parameters for kube-scheduler.
        """
        if kube_apiservers is not None:
            pulumi.set(__self__, "kube_apiservers", kube_apiservers)
        if kube_controller_managers is not None:
            pulumi.set(__self__, "kube_controller_managers", kube_controller_managers)
        if kube_schedulers is not None:
            pulumi.set(__self__, "kube_schedulers", kube_schedulers)

    @property
    @pulumi.getter(name="kubeApiservers")
    def kube_apiservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The customized parameters for kube-apiserver.
        """
        return pulumi.get(self, "kube_apiservers")

    @kube_apiservers.setter
    def kube_apiservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_apiservers", value)

    @property
    @pulumi.getter(name="kubeControllerManagers")
    def kube_controller_managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The customized parameters for kube-controller-manager.
        """
        return pulumi.get(self, "kube_controller_managers")

    @kube_controller_managers.setter
    def kube_controller_managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_controller_managers", value)

    @property
    @pulumi.getter(name="kubeSchedulers")
    def kube_schedulers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The customized parameters for kube-scheduler.
        """
        return pulumi.get(self, "kube_schedulers")

    @kube_schedulers.setter
    def kube_schedulers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_schedulers", value)


@pulumi.input_type
class ClusterEventPersistenceArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 delete_event_log_and_topic: Optional[pulumi.Input[bool]] = None,
                 log_set_id: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Specify weather the Event Persistence enabled.
        :param pulumi.Input[bool] delete_event_log_and_topic: when you want to close the cluster event persistence or delete the cluster, you can use this parameter to determine whether the event persistence log set and topic created by default will be deleted.
        :param pulumi.Input[str] log_set_id: Specify id of existing CLS log set, or auto create a new set by leave it empty.
        :param pulumi.Input[str] topic_id: Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        pulumi.set(__self__, "enabled", enabled)
        if delete_event_log_and_topic is not None:
            pulumi.set(__self__, "delete_event_log_and_topic", delete_event_log_and_topic)
        if log_set_id is not None:
            pulumi.set(__self__, "log_set_id", log_set_id)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Specify weather the Event Persistence enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="deleteEventLogAndTopic")
    def delete_event_log_and_topic(self) -> Optional[pulumi.Input[bool]]:
        """
        when you want to close the cluster event persistence or delete the cluster, you can use this parameter to determine whether the event persistence log set and topic created by default will be deleted.
        """
        return pulumi.get(self, "delete_event_log_and_topic")

    @delete_event_log_and_topic.setter
    def delete_event_log_and_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_event_log_and_topic", value)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify id of existing CLS log set, or auto create a new set by leave it empty.
        """
        return pulumi.get(self, "log_set_id")

    @log_set_id.setter
    def log_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_set_id", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify id of existing CLS log topic, or auto create a new topic by leave it empty.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class ClusterExistInstanceArgs:
    def __init__(__self__, *,
                 desired_pod_numbers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 instances_para: Optional[pulumi.Input['ClusterExistInstanceInstancesParaArgs']] = None,
                 node_role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] desired_pod_numbers: Custom mode cluster, you can specify the number of pods for each node. corresponding to the existed_instances_para.instance_ids parameter.
        :param pulumi.Input['ClusterExistInstanceInstancesParaArgs'] instances_para: Reinstallation parameters of an existing instance.
        :param pulumi.Input[str] node_role: Role of existed node. value:MASTER_ETCD or WORKER.
        """
        if desired_pod_numbers is not None:
            pulumi.set(__self__, "desired_pod_numbers", desired_pod_numbers)
        if instances_para is not None:
            pulumi.set(__self__, "instances_para", instances_para)
        if node_role is not None:
            pulumi.set(__self__, "node_role", node_role)

    @property
    @pulumi.getter(name="desiredPodNumbers")
    def desired_pod_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Custom mode cluster, you can specify the number of pods for each node. corresponding to the existed_instances_para.instance_ids parameter.
        """
        return pulumi.get(self, "desired_pod_numbers")

    @desired_pod_numbers.setter
    def desired_pod_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "desired_pod_numbers", value)

    @property
    @pulumi.getter(name="instancesPara")
    def instances_para(self) -> Optional[pulumi.Input['ClusterExistInstanceInstancesParaArgs']]:
        """
        Reinstallation parameters of an existing instance.
        """
        return pulumi.get(self, "instances_para")

    @instances_para.setter
    def instances_para(self, value: Optional[pulumi.Input['ClusterExistInstanceInstancesParaArgs']]):
        pulumi.set(self, "instances_para", value)

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[pulumi.Input[str]]:
        """
        Role of existed node. value:MASTER_ETCD or WORKER.
        """
        return pulumi.get(self, "node_role")

    @node_role.setter
    def node_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_role", value)


@pulumi.input_type
class ClusterExistInstanceInstancesParaArgs:
    def __init__(__self__, *,
                 instance_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 master_config: Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigArgs']] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_ids: Cluster IDs.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ids: ID list of keys, should be set if `password` not set.
        :param pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigArgs'] master_config: Advanced Node Settings. commonly used to attach existing instances.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        """
        pulumi.set(__self__, "instance_ids", instance_ids)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if master_config is not None:
            pulumi.set(__self__, "master_config", master_config)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Cluster IDs.
        """
        return pulumi.get(self, "instance_ids")

    @instance_ids.setter
    def instance_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "instance_ids", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of keys, should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter(name="masterConfig")
    def master_config(self) -> Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigArgs']]:
        """
        Advanced Node Settings. commonly used to attach existing instances.
        """
        return pulumi.get(self, "master_config")

    @master_config.setter
    def master_config(self, value: Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigArgs']]):
        pulumi.set(self, "master_config", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)


@pulumi.input_type
class ClusterExistInstanceInstancesParaMasterConfigArgs:
    def __init__(__self__, *,
                 data_disk: Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigDataDiskArgs']] = None,
                 desired_pod_number: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigExtraArgsArgs']] = None,
                 gpu_args: Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigGpuArgsArgs']] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigLabelArgs']]]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigTaintArgs']]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 user_script: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigDataDiskArgs'] data_disk: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_number: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigExtraArgsArgs'] extra_args: Custom parameter information related to the node. This is a white-list parameter.
        :param pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigGpuArgsArgs'] gpu_args: GPU driver parameters.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigLabelArgs']]] labels: Node label list.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigTaintArgs']]] taints: Node taint.
        :param pulumi.Input[int] unschedulable: Set whether the joined nodes participate in scheduling, with a default value of 0, indicating participation in scheduling; Non 0 means not participating in scheduling.
        :param pulumi.Input[str] user_script: User script encoded in base64, which will be executed after the k8s component runs. The user needs to ensure the script's reentrant and retry logic. The script and its generated log files can be viewed in the node path /data/ccs_userscript/. If the node needs to be initialized before joining the schedule, it can be used in conjunction with the `unschedulable` parameter. After the final initialization of the userScript is completed, add the command "kubectl uncordon nodename --kubeconfig=/root/.kube/config" to add the node to the schedule.
        """
        if data_disk is not None:
            pulumi.set(__self__, "data_disk", data_disk)
        if desired_pod_number is not None:
            pulumi.set(__self__, "desired_pod_number", desired_pod_number)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if gpu_args is not None:
            pulumi.set(__self__, "gpu_args", gpu_args)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)
        if user_script is not None:
            pulumi.set(__self__, "user_script", user_script)

    @property
    @pulumi.getter(name="dataDisk")
    def data_disk(self) -> Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigDataDiskArgs']]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disk")

    @data_disk.setter
    def data_disk(self, value: Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigDataDiskArgs']]):
        pulumi.set(self, "data_disk", value)

    @property
    @pulumi.getter(name="desiredPodNumber")
    def desired_pod_number(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_number")

    @desired_pod_number.setter
    def desired_pod_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_number", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigExtraArgsArgs']]:
        """
        Custom parameter information related to the node. This is a white-list parameter.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigExtraArgsArgs']]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="gpuArgs")
    def gpu_args(self) -> Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigGpuArgsArgs']]:
        """
        GPU driver parameters.
        """
        return pulumi.get(self, "gpu_args")

    @gpu_args.setter
    def gpu_args(self, value: Optional[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigGpuArgsArgs']]):
        pulumi.set(self, "gpu_args", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigLabelArgs']]]]:
        """
        Node label list.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigTaintArgs']]]]:
        """
        Node taint.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterExistInstanceInstancesParaMasterConfigTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Set whether the joined nodes participate in scheduling, with a default value of 0, indicating participation in scheduling; Non 0 means not participating in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)

    @property
    @pulumi.getter(name="userScript")
    def user_script(self) -> Optional[pulumi.Input[str]]:
        """
        User script encoded in base64, which will be executed after the k8s component runs. The user needs to ensure the script's reentrant and retry logic. The script and its generated log files can be viewed in the node path /data/ccs_userscript/. If the node needs to be initialized before joining the schedule, it can be used in conjunction with the `unschedulable` parameter. After the final initialization of the userScript is completed, add the command "kubectl uncordon nodename --kubeconfig=/root/.kube/config" to add the node to the schedule.
        """
        return pulumi.get(self, "user_script")

    @user_script.setter
    def user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_script", value)


@pulumi.input_type
class ClusterExistInstanceInstancesParaMasterConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class ClusterExistInstanceInstancesParaMasterConfigExtraArgsArgs:
    def __init__(__self__, *,
                 kubelets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kubelets: Kubelet custom parameter. The parameter format is ["k1=v1", "k1=v2"].
        """
        if kubelets is not None:
            pulumi.set(__self__, "kubelets", kubelets)

    @property
    @pulumi.getter
    def kubelets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Kubelet custom parameter. The parameter format is ["k1=v1", "k1=v2"].
        """
        return pulumi.get(self, "kubelets")

    @kubelets.setter
    def kubelets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kubelets", value)


@pulumi.input_type
class ClusterExistInstanceInstancesParaMasterConfigGpuArgsArgs:
    def __init__(__self__, *,
                 cuda: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cudnn: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 custom_driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mig_enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] cuda: CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[Mapping[str, Any]] cudnn: cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        :param pulumi.Input[Mapping[str, Any]] custom_driver: Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        :param pulumi.Input[Mapping[str, Any]] driver: GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[bool] mig_enable: Whether to enable MIG.
        """
        if cuda is not None:
            pulumi.set(__self__, "cuda", cuda)
        if cudnn is not None:
            pulumi.set(__self__, "cudnn", cudnn)
        if custom_driver is not None:
            pulumi.set(__self__, "custom_driver", custom_driver)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if mig_enable is not None:
            pulumi.set(__self__, "mig_enable", mig_enable)

    @property
    @pulumi.getter
    def cuda(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "cuda")

    @cuda.setter
    def cuda(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cuda", value)

    @property
    @pulumi.getter
    def cudnn(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        """
        return pulumi.get(self, "cudnn")

    @cudnn.setter
    def cudnn(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cudnn", value)

    @property
    @pulumi.getter(name="customDriver")
    def custom_driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        """
        return pulumi.get(self, "custom_driver")

    @custom_driver.setter
    def custom_driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_driver", value)

    @property
    @pulumi.getter
    def driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="migEnable")
    def mig_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable MIG.
        """
        return pulumi.get(self, "mig_enable")

    @mig_enable.setter
    def mig_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mig_enable", value)


@pulumi.input_type
class ClusterExistInstanceInstancesParaMasterConfigLabelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of map.
        :param pulumi.Input[str] value: Value of map.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of map.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of map.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterExistInstanceInstancesParaMasterConfigTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Effect of the taint.
        :param pulumi.Input[str] key: Key of the taint.
        :param pulumi.Input[str] value: Value of the taint.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect of the taint.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the taint.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the taint.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterExtensionAddonArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 param: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Add-on name.
        :param pulumi.Input[str] param: Parameter of the add-on resource object in JSON string format, please check the example at the top of page for reference.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "param", param)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Add-on name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def param(self) -> pulumi.Input[str]:
        """
        Parameter of the add-on resource object in JSON string format, please check the example at the top of page for reference.
        """
        return pulumi.get(self, "param")

    @param.setter
    def param(self, value: pulumi.Input[str]):
        pulumi.set(self, "param", value)


@pulumi.input_type
class ClusterLogAgentArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 kubelet_root_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether the log agent enabled.
        :param pulumi.Input[str] kubelet_root_dir: Kubelet root directory as the literal.
        """
        pulumi.set(__self__, "enabled", enabled)
        if kubelet_root_dir is not None:
            pulumi.set(__self__, "kubelet_root_dir", kubelet_root_dir)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Whether the log agent enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="kubeletRootDir")
    def kubelet_root_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Kubelet root directory as the literal.
        """
        return pulumi.get(self, "kubelet_root_dir")

    @kubelet_root_dir.setter
    def kubelet_root_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubelet_root_dir", value)


@pulumi.input_type
class ClusterMasterAttachmentExtraArgsArgs:
    def __init__(__self__, *,
                 etcds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_api_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_controller_managers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kube_schedulers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] etcds: etcd custom parameters. Only supports independent clusters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kube_api_servers: Kube apiserver custom parameters. The parameter format is ["k1=v1", "k1=v2"].
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kube_controller_managers: Kube controller manager custom parameters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kube_schedulers: kube scheduler custom parameters.
        """
        if etcds is not None:
            pulumi.set(__self__, "etcds", etcds)
        if kube_api_servers is not None:
            pulumi.set(__self__, "kube_api_servers", kube_api_servers)
        if kube_controller_managers is not None:
            pulumi.set(__self__, "kube_controller_managers", kube_controller_managers)
        if kube_schedulers is not None:
            pulumi.set(__self__, "kube_schedulers", kube_schedulers)

    @property
    @pulumi.getter
    def etcds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        etcd custom parameters. Only supports independent clusters.
        """
        return pulumi.get(self, "etcds")

    @etcds.setter
    def etcds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "etcds", value)

    @property
    @pulumi.getter(name="kubeApiServers")
    def kube_api_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Kube apiserver custom parameters. The parameter format is ["k1=v1", "k1=v2"].
        """
        return pulumi.get(self, "kube_api_servers")

    @kube_api_servers.setter
    def kube_api_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_api_servers", value)

    @property
    @pulumi.getter(name="kubeControllerManagers")
    def kube_controller_managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Kube controller manager custom parameters.
        """
        return pulumi.get(self, "kube_controller_managers")

    @kube_controller_managers.setter
    def kube_controller_managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_controller_managers", value)

    @property
    @pulumi.getter(name="kubeSchedulers")
    def kube_schedulers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        kube scheduler custom parameters.
        """
        return pulumi.get(self, "kube_schedulers")

    @kube_schedulers.setter
    def kube_schedulers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kube_schedulers", value)


@pulumi.input_type
class ClusterMasterAttachmentMasterConfigArgs:
    def __init__(__self__, *,
                 data_disk: Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigDataDiskArgs']] = None,
                 desired_pod_number: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigExtraArgsArgs']] = None,
                 gpu_args: Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigGpuArgsArgs']] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterAttachmentMasterConfigLabelArgs']]]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterAttachmentMasterConfigTaintArgs']]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 user_script: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ClusterMasterAttachmentMasterConfigDataDiskArgs'] data_disk: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_number: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input['ClusterMasterAttachmentMasterConfigExtraArgsArgs'] extra_args: Custom parameter information related to the node. This is a white-list parameter.
        :param pulumi.Input['ClusterMasterAttachmentMasterConfigGpuArgsArgs'] gpu_args: GPU driver parameters.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterMasterAttachmentMasterConfigLabelArgs']]] labels: Node label list.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterMasterAttachmentMasterConfigTaintArgs']]] taints: Node taint.
        :param pulumi.Input[int] unschedulable: Set whether the joined nodes participate in scheduling, with a default value of 0, indicating participation in scheduling; Non 0 means not participating in scheduling.
        :param pulumi.Input[str] user_script: User script encoded in base64, which will be executed after the k8s component runs. The user needs to ensure the script's reentrant and retry logic. The script and its generated log files can be viewed in the node path /data/ccs_userscript/. If the node needs to be initialized before joining the schedule, it can be used in conjunction with the `unschedulable` parameter. After the final initialization of the userScript is completed, add the command "kubectl uncordon nodename --kubeconfig=/root/.kube/config" to add the node to the schedule.
        """
        if data_disk is not None:
            pulumi.set(__self__, "data_disk", data_disk)
        if desired_pod_number is not None:
            pulumi.set(__self__, "desired_pod_number", desired_pod_number)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if gpu_args is not None:
            pulumi.set(__self__, "gpu_args", gpu_args)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)
        if user_script is not None:
            pulumi.set(__self__, "user_script", user_script)

    @property
    @pulumi.getter(name="dataDisk")
    def data_disk(self) -> Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigDataDiskArgs']]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disk")

    @data_disk.setter
    def data_disk(self, value: Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigDataDiskArgs']]):
        pulumi.set(self, "data_disk", value)

    @property
    @pulumi.getter(name="desiredPodNumber")
    def desired_pod_number(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_number")

    @desired_pod_number.setter
    def desired_pod_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_number", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigExtraArgsArgs']]:
        """
        Custom parameter information related to the node. This is a white-list parameter.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigExtraArgsArgs']]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="gpuArgs")
    def gpu_args(self) -> Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigGpuArgsArgs']]:
        """
        GPU driver parameters.
        """
        return pulumi.get(self, "gpu_args")

    @gpu_args.setter
    def gpu_args(self, value: Optional[pulumi.Input['ClusterMasterAttachmentMasterConfigGpuArgsArgs']]):
        pulumi.set(self, "gpu_args", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterAttachmentMasterConfigLabelArgs']]]]:
        """
        Node label list.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterAttachmentMasterConfigLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterAttachmentMasterConfigTaintArgs']]]]:
        """
        Node taint.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterAttachmentMasterConfigTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Set whether the joined nodes participate in scheduling, with a default value of 0, indicating participation in scheduling; Non 0 means not participating in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)

    @property
    @pulumi.getter(name="userScript")
    def user_script(self) -> Optional[pulumi.Input[str]]:
        """
        User script encoded in base64, which will be executed after the k8s component runs. The user needs to ensure the script's reentrant and retry logic. The script and its generated log files can be viewed in the node path /data/ccs_userscript/. If the node needs to be initialized before joining the schedule, it can be used in conjunction with the `unschedulable` parameter. After the final initialization of the userScript is completed, add the command "kubectl uncordon nodename --kubeconfig=/root/.kube/config" to add the node to the schedule.
        """
        return pulumi.get(self, "user_script")

    @user_script.setter
    def user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_script", value)


@pulumi.input_type
class ClusterMasterAttachmentMasterConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class ClusterMasterAttachmentMasterConfigExtraArgsArgs:
    def __init__(__self__, *,
                 kubelets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kubelets: Kubelet custom parameter. The parameter format is ["k1=v1", "k1=v2"].
        """
        if kubelets is not None:
            pulumi.set(__self__, "kubelets", kubelets)

    @property
    @pulumi.getter
    def kubelets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Kubelet custom parameter. The parameter format is ["k1=v1", "k1=v2"].
        """
        return pulumi.get(self, "kubelets")

    @kubelets.setter
    def kubelets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kubelets", value)


@pulumi.input_type
class ClusterMasterAttachmentMasterConfigGpuArgsArgs:
    def __init__(__self__, *,
                 cuda: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cudnn: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 custom_driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mig_enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] cuda: CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[Mapping[str, Any]] cudnn: cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        :param pulumi.Input[Mapping[str, Any]] custom_driver: Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        :param pulumi.Input[Mapping[str, Any]] driver: GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[bool] mig_enable: Whether to enable MIG.
        """
        if cuda is not None:
            pulumi.set(__self__, "cuda", cuda)
        if cudnn is not None:
            pulumi.set(__self__, "cudnn", cudnn)
        if custom_driver is not None:
            pulumi.set(__self__, "custom_driver", custom_driver)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if mig_enable is not None:
            pulumi.set(__self__, "mig_enable", mig_enable)

    @property
    @pulumi.getter
    def cuda(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "cuda")

    @cuda.setter
    def cuda(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cuda", value)

    @property
    @pulumi.getter
    def cudnn(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        """
        return pulumi.get(self, "cudnn")

    @cudnn.setter
    def cudnn(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cudnn", value)

    @property
    @pulumi.getter(name="customDriver")
    def custom_driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        """
        return pulumi.get(self, "custom_driver")

    @custom_driver.setter
    def custom_driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_driver", value)

    @property
    @pulumi.getter
    def driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="migEnable")
    def mig_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable MIG.
        """
        return pulumi.get(self, "mig_enable")

    @mig_enable.setter
    def mig_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mig_enable", value)


@pulumi.input_type
class ClusterMasterAttachmentMasterConfigLabelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name of map.
        :param pulumi.Input[str] value: Value of map.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of map.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of map.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterMasterAttachmentMasterConfigTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Effect of the taint.
        :param pulumi.Input[str] key: Key of the taint.
        :param pulumi.Input[str] value: Value of the taint.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect of the taint.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the taint.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the taint.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterMasterConfigArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 disaster_recover_group_ids: Optional[pulumi.Input[str]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 img_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 key_ids: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: Specified types of CVM instance.
        :param pulumi.Input[str] subnet_id: Private network ID.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[int] count: Number of cvm.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        :param pulumi.Input[str] disaster_recover_group_ids: Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[str] hostname: The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        :param pulumi.Input[str] hpc_cluster_id: Id of cvm hpc cluster.
        :param pulumi.Input[str] img_id: The valid image id, format of img-xxx. Note: `img_id` will be replaced with the image corresponding to TKE `cluster_os`.
        :param pulumi.Input[str] instance_charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input[str] instance_name: Name of the CVMs.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is 0.
        :param pulumi.Input[str] key_ids: ID list of keys, should be set if `password` not set.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        :param pulumi.Input[str] user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hpc_cluster_id is not None:
            pulumi.set(__self__, "hpc_cluster_id", hpc_cluster_id)
        if img_id is not None:
            pulumi.set(__self__, "img_id", img_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Private network ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cvm.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMasterConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @disaster_recover_group_ids.setter
    def disaster_recover_group_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disaster_recover_group_ids", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of cvm hpc cluster.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @hpc_cluster_id.setter
    def hpc_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hpc_cluster_id", value)

    @property
    @pulumi.getter(name="imgId")
    def img_id(self) -> Optional[pulumi.Input[str]]:
        """
        The valid image id, format of img-xxx. Note: `img_id` will be replaced with the image corresponding to TKE `cluster_os`.
        """
        return pulumi.get(self, "img_id")

    @img_id.setter
    def img_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_id", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @instance_charge_type_prepaid_period.setter
    def instance_charge_type_prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_charge_type_prepaid_period", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @instance_charge_type_prepaid_renew_flag.setter
    def instance_charge_type_prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type_prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CVMs.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is 0.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[str]]:
        """
        ID list of keys, should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ClusterMasterConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param pulumi.Input[bool] encrypt: Indicates whether to encrypt data disk, default `false`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] kms_key_id: ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        :param pulumi.Input[str] mount_target: Mount target.
        :param pulumi.Input[str] snapshot_id: Data disk snapshot ID.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to encrypt data disk, default `false`.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class ClusterNodePoolGlobalConfigArgs:
    def __init__(__self__, *,
                 expander: Optional[pulumi.Input[str]] = None,
                 ignore_daemon_sets_utilization: Optional[pulumi.Input[bool]] = None,
                 is_scale_in_enabled: Optional[pulumi.Input[bool]] = None,
                 max_concurrent_scale_in: Optional[pulumi.Input[int]] = None,
                 scale_in_delay: Optional[pulumi.Input[int]] = None,
                 scale_in_unneeded_time: Optional[pulumi.Input[int]] = None,
                 scale_in_utilization_threshold: Optional[pulumi.Input[int]] = None,
                 skip_nodes_with_local_storage: Optional[pulumi.Input[bool]] = None,
                 skip_nodes_with_system_pods: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] expander: Indicates which scale-out method will be used when there are multiple scaling groups. Valid values: `random` - select a random scaling group, `most-pods` - select the scaling group that can schedule the most pods, `least-waste` - select the scaling group that can ensure the fewest remaining resources after Pod scheduling.
        :param pulumi.Input[bool] ignore_daemon_sets_utilization: Whether to ignore DaemonSet pods by default when calculating resource usage.
        :param pulumi.Input[bool] is_scale_in_enabled: Indicates whether to enable scale-in.
        :param pulumi.Input[int] max_concurrent_scale_in: Max concurrent scale-in volume.
        :param pulumi.Input[int] scale_in_delay: Number of minutes after cluster scale-out when the system starts judging whether to perform scale-in.
        :param pulumi.Input[int] scale_in_unneeded_time: Number of consecutive minutes of idleness after which the node is subject to scale-in.
        :param pulumi.Input[int] scale_in_utilization_threshold: Percentage of node resource usage below which the node is considered to be idle.
        :param pulumi.Input[bool] skip_nodes_with_local_storage: During scale-in, ignore nodes with local storage pods.
        :param pulumi.Input[bool] skip_nodes_with_system_pods: During scale-in, ignore nodes with pods in the kube-system namespace that are not managed by DaemonSet.
        """
        if expander is not None:
            pulumi.set(__self__, "expander", expander)
        if ignore_daemon_sets_utilization is not None:
            pulumi.set(__self__, "ignore_daemon_sets_utilization", ignore_daemon_sets_utilization)
        if is_scale_in_enabled is not None:
            pulumi.set(__self__, "is_scale_in_enabled", is_scale_in_enabled)
        if max_concurrent_scale_in is not None:
            pulumi.set(__self__, "max_concurrent_scale_in", max_concurrent_scale_in)
        if scale_in_delay is not None:
            pulumi.set(__self__, "scale_in_delay", scale_in_delay)
        if scale_in_unneeded_time is not None:
            pulumi.set(__self__, "scale_in_unneeded_time", scale_in_unneeded_time)
        if scale_in_utilization_threshold is not None:
            pulumi.set(__self__, "scale_in_utilization_threshold", scale_in_utilization_threshold)
        if skip_nodes_with_local_storage is not None:
            pulumi.set(__self__, "skip_nodes_with_local_storage", skip_nodes_with_local_storage)
        if skip_nodes_with_system_pods is not None:
            pulumi.set(__self__, "skip_nodes_with_system_pods", skip_nodes_with_system_pods)

    @property
    @pulumi.getter
    def expander(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which scale-out method will be used when there are multiple scaling groups. Valid values: `random` - select a random scaling group, `most-pods` - select the scaling group that can schedule the most pods, `least-waste` - select the scaling group that can ensure the fewest remaining resources after Pod scheduling.
        """
        return pulumi.get(self, "expander")

    @expander.setter
    def expander(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expander", value)

    @property
    @pulumi.getter(name="ignoreDaemonSetsUtilization")
    def ignore_daemon_sets_utilization(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to ignore DaemonSet pods by default when calculating resource usage.
        """
        return pulumi.get(self, "ignore_daemon_sets_utilization")

    @ignore_daemon_sets_utilization.setter
    def ignore_daemon_sets_utilization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_daemon_sets_utilization", value)

    @property
    @pulumi.getter(name="isScaleInEnabled")
    def is_scale_in_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to enable scale-in.
        """
        return pulumi.get(self, "is_scale_in_enabled")

    @is_scale_in_enabled.setter
    def is_scale_in_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_scale_in_enabled", value)

    @property
    @pulumi.getter(name="maxConcurrentScaleIn")
    def max_concurrent_scale_in(self) -> Optional[pulumi.Input[int]]:
        """
        Max concurrent scale-in volume.
        """
        return pulumi.get(self, "max_concurrent_scale_in")

    @max_concurrent_scale_in.setter
    def max_concurrent_scale_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_scale_in", value)

    @property
    @pulumi.getter(name="scaleInDelay")
    def scale_in_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Number of minutes after cluster scale-out when the system starts judging whether to perform scale-in.
        """
        return pulumi.get(self, "scale_in_delay")

    @scale_in_delay.setter
    def scale_in_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_in_delay", value)

    @property
    @pulumi.getter(name="scaleInUnneededTime")
    def scale_in_unneeded_time(self) -> Optional[pulumi.Input[int]]:
        """
        Number of consecutive minutes of idleness after which the node is subject to scale-in.
        """
        return pulumi.get(self, "scale_in_unneeded_time")

    @scale_in_unneeded_time.setter
    def scale_in_unneeded_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_in_unneeded_time", value)

    @property
    @pulumi.getter(name="scaleInUtilizationThreshold")
    def scale_in_utilization_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage of node resource usage below which the node is considered to be idle.
        """
        return pulumi.get(self, "scale_in_utilization_threshold")

    @scale_in_utilization_threshold.setter
    def scale_in_utilization_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_in_utilization_threshold", value)

    @property
    @pulumi.getter(name="skipNodesWithLocalStorage")
    def skip_nodes_with_local_storage(self) -> Optional[pulumi.Input[bool]]:
        """
        During scale-in, ignore nodes with local storage pods.
        """
        return pulumi.get(self, "skip_nodes_with_local_storage")

    @skip_nodes_with_local_storage.setter
    def skip_nodes_with_local_storage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_nodes_with_local_storage", value)

    @property
    @pulumi.getter(name="skipNodesWithSystemPods")
    def skip_nodes_with_system_pods(self) -> Optional[pulumi.Input[bool]]:
        """
        During scale-in, ignore nodes with pods in the kube-system namespace that are not managed by DaemonSet.
        """
        return pulumi.get(self, "skip_nodes_with_system_pods")

    @skip_nodes_with_system_pods.setter
    def skip_nodes_with_system_pods(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_nodes_with_system_pods", value)


@pulumi.input_type
class ClusterResourceDeleteOptionArgs:
    def __init__(__self__, *,
                 delete_mode: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 skip_deletion_protection: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] delete_mode: The deletion mode of CBS resources when the cluster is deleted, `terminate` (destroy), `retain` (retain). Other resources are deleted by default.
        :param pulumi.Input[str] resource_type: Resource type, valid values are `CBS`, `CLB`, and `CVM`.
        :param pulumi.Input[bool] skip_deletion_protection: Whether to skip resources with deletion protection enabled, the default is false.
        """
        pulumi.set(__self__, "delete_mode", delete_mode)
        pulumi.set(__self__, "resource_type", resource_type)
        if skip_deletion_protection is not None:
            pulumi.set(__self__, "skip_deletion_protection", skip_deletion_protection)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Input[str]:
        """
        The deletion mode of CBS resources when the cluster is deleted, `terminate` (destroy), `retain` (retain). Other resources are deleted by default.
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Resource type, valid values are `CBS`, `CLB`, and `CVM`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="skipDeletionProtection")
    def skip_deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to skip resources with deletion protection enabled, the default is false.
        """
        return pulumi.get(self, "skip_deletion_protection")

    @skip_deletion_protection.setter
    def skip_deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_deletion_protection", value)


@pulumi.input_type
class ClusterWorkerConfigArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 disaster_recover_group_ids: Optional[pulumi.Input[str]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 img_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 key_ids: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: Specified types of CVM instance.
        :param pulumi.Input[str] subnet_id: Private network ID.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[int] count: Number of cvm.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        :param pulumi.Input[str] disaster_recover_group_ids: Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[str] hostname: The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        :param pulumi.Input[str] hpc_cluster_id: Id of cvm hpc cluster.
        :param pulumi.Input[str] img_id: The valid image id, format of img-xxx. Note: `img_id` will be replaced with the image corresponding to TKE `cluster_os`.
        :param pulumi.Input[str] instance_charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input[str] instance_name: Name of the CVMs.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is 0.
        :param pulumi.Input[str] key_ids: ID list of keys, should be set if `password` not set.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        :param pulumi.Input[str] user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hpc_cluster_id is not None:
            pulumi.set(__self__, "hpc_cluster_id", hpc_cluster_id)
        if img_id is not None:
            pulumi.set(__self__, "img_id", img_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Private network ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cvm.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterWorkerConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @disaster_recover_group_ids.setter
    def disaster_recover_group_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disaster_recover_group_ids", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of cvm hpc cluster.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @hpc_cluster_id.setter
    def hpc_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hpc_cluster_id", value)

    @property
    @pulumi.getter(name="imgId")
    def img_id(self) -> Optional[pulumi.Input[str]]:
        """
        The valid image id, format of img-xxx. Note: `img_id` will be replaced with the image corresponding to TKE `cluster_os`.
        """
        return pulumi.get(self, "img_id")

    @img_id.setter
    def img_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_id", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @instance_charge_type_prepaid_period.setter
    def instance_charge_type_prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_charge_type_prepaid_period", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @instance_charge_type_prepaid_renew_flag.setter
    def instance_charge_type_prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type_prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CVMs.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is 0.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[str]]:
        """
        ID list of keys, should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ClusterWorkerConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param pulumi.Input[bool] encrypt: Indicates whether to encrypt data disk, default `false`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] kms_key_id: ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        :param pulumi.Input[str] mount_target: Mount target.
        :param pulumi.Input[str] snapshot_id: Data disk snapshot ID.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to encrypt data disk, default `false`.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class ClusterWorkerInstancesListArgs:
    def __init__(__self__, *,
                 failed_reason: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_role: Optional[pulumi.Input[str]] = None,
                 instance_state: Optional[pulumi.Input[str]] = None,
                 lan_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] failed_reason: Information of the cvm when it is failed.
        :param pulumi.Input[str] instance_id: ID of the cvm.
        :param pulumi.Input[str] instance_role: Role of the cvm.
        :param pulumi.Input[str] instance_state: State of the cvm.
        :param pulumi.Input[str] lan_ip: LAN IP of the cvm.
        """
        if failed_reason is not None:
            pulumi.set(__self__, "failed_reason", failed_reason)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_role is not None:
            pulumi.set(__self__, "instance_role", instance_role)
        if instance_state is not None:
            pulumi.set(__self__, "instance_state", instance_state)
        if lan_ip is not None:
            pulumi.set(__self__, "lan_ip", lan_ip)

    @property
    @pulumi.getter(name="failedReason")
    def failed_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Information of the cvm when it is failed.
        """
        return pulumi.get(self, "failed_reason")

    @failed_reason.setter
    def failed_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_reason", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the cvm.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> Optional[pulumi.Input[str]]:
        """
        Role of the cvm.
        """
        return pulumi.get(self, "instance_role")

    @instance_role.setter
    def instance_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_role", value)

    @property
    @pulumi.getter(name="instanceState")
    def instance_state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the cvm.
        """
        return pulumi.get(self, "instance_state")

    @instance_state.setter
    def instance_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_state", value)

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> Optional[pulumi.Input[str]]:
        """
        LAN IP of the cvm.
        """
        return pulumi.get(self, "lan_ip")

    @lan_ip.setter
    def lan_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_ip", value)


@pulumi.input_type
class EncryptionProtectionKmsConfigurationArgs:
    def __init__(__self__, *,
                 key_id: Optional[pulumi.Input[str]] = None,
                 kms_region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key_id: kms id.
        :param pulumi.Input[str] kms_region: kms region.
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if kms_region is not None:
            pulumi.set(__self__, "kms_region", kms_region)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        kms id.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="kmsRegion")
    def kms_region(self) -> Optional[pulumi.Input[str]]:
        """
        kms region.
        """
        return pulumi.get(self, "kms_region")

    @kms_region.setter
    def kms_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_region", value)


@pulumi.input_type
class HealthCheckPolicyRuleArgs:
    def __init__(__self__, *,
                 auto_repair_enabled: pulumi.Input[bool],
                 enabled: pulumi.Input[bool],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[bool] auto_repair_enabled: Enable repair or not.
        :param pulumi.Input[bool] enabled: Enable detection of this project or not.
        :param pulumi.Input[str] name: Health check rule details.
        """
        pulumi.set(__self__, "auto_repair_enabled", auto_repair_enabled)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="autoRepairEnabled")
    def auto_repair_enabled(self) -> pulumi.Input[bool]:
        """
        Enable repair or not.
        """
        return pulumi.get(self, "auto_repair_enabled")

    @auto_repair_enabled.setter
    def auto_repair_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "auto_repair_enabled", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enable detection of this project or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Health check rule details.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class NativeNodePoolAnnotationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name in the map table.
        :param pulumi.Input[str] value: Value in the map table.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name in the map table.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value in the map table.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NativeNodePoolLabelArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name in the map table.
        :param pulumi.Input[str] value: Value in map table.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name in the map table.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value in map table.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NativeNodePoolNativeArgs:
    def __init__(__self__, *,
                 instance_charge_type: pulumi.Input[str],
                 instance_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 system_disk: pulumi.Input['NativeNodePoolNativeSystemDiskArgs'],
                 auto_repair: Optional[pulumi.Input[bool]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NativeNodePoolNativeDataDiskArgs']]]] = None,
                 enable_autoscaling: Optional[pulumi.Input[bool]] = None,
                 health_check_policy_name: Optional[pulumi.Input[str]] = None,
                 host_name_pattern: Optional[pulumi.Input[str]] = None,
                 instance_charge_prepaid: Optional[pulumi.Input['NativeNodePoolNativeInstanceChargePrepaidArgs']] = None,
                 internet_accessible: Optional[pulumi.Input['NativeNodePoolNativeInternetAccessibleArgs']] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubelet_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 lifecycle: Optional[pulumi.Input['NativeNodePoolNativeLifecycleArgs']] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 management: Optional[pulumi.Input['NativeNodePoolNativeManagementArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 runtime_root_dir: Optional[pulumi.Input[str]] = None,
                 scaling: Optional[pulumi.Input['NativeNodePoolNativeScalingArgs']] = None):
        """
        :param pulumi.Input[str] instance_charge_type: Node billing type. `PREPAID` is a yearly and monthly subscription, `POSTPAID_BY_HOUR` is a pay-as-you-go plan. The default is `POSTPAID_BY_HOUR`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_types: Model list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet list.
        :param pulumi.Input['NativeNodePoolNativeSystemDiskArgs'] system_disk: System disk configuration.
        :param pulumi.Input[bool] auto_repair: Whether to enable self-healing ability.
        :param pulumi.Input[Sequence[pulumi.Input['NativeNodePoolNativeDataDiskArgs']]] data_disks: Native node pool data disk list.
        :param pulumi.Input[bool] enable_autoscaling: Whether to enable elastic scaling.
        :param pulumi.Input[str] health_check_policy_name: Fault self-healing rule name.
        :param pulumi.Input[str] host_name_pattern: Native node pool hostName pattern string.
        :param pulumi.Input['NativeNodePoolNativeInstanceChargePrepaidArgs'] instance_charge_prepaid: Billing configuration for yearly and monthly models.
        :param pulumi.Input['NativeNodePoolNativeInternetAccessibleArgs'] internet_accessible: Public network bandwidth settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ids: Node pool ssh public key id array.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kubelet_args: Kubelet custom parameters.
        :param pulumi.Input['NativeNodePoolNativeLifecycleArgs'] lifecycle: Predefined scripts.
        :param pulumi.Input[str] machine_type: Node pool type. Example value: `NativeCVM` or `Native`. Default is `Native`.
        :param pulumi.Input['NativeNodePoolNativeManagementArgs'] management: Node pool management parameter settings.
        :param pulumi.Input[int] replicas: Desired number of nodes.
        :param pulumi.Input[str] runtime_root_dir: Runtime root directory.
        :param pulumi.Input['NativeNodePoolNativeScalingArgs'] scaling: Node pool scaling configuration.
        """
        pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        pulumi.set(__self__, "instance_types", instance_types)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "system_disk", system_disk)
        if auto_repair is not None:
            pulumi.set(__self__, "auto_repair", auto_repair)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if enable_autoscaling is not None:
            pulumi.set(__self__, "enable_autoscaling", enable_autoscaling)
        if health_check_policy_name is not None:
            pulumi.set(__self__, "health_check_policy_name", health_check_policy_name)
        if host_name_pattern is not None:
            pulumi.set(__self__, "host_name_pattern", host_name_pattern)
        if instance_charge_prepaid is not None:
            pulumi.set(__self__, "instance_charge_prepaid", instance_charge_prepaid)
        if internet_accessible is not None:
            pulumi.set(__self__, "internet_accessible", internet_accessible)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if kubelet_args is not None:
            pulumi.set(__self__, "kubelet_args", kubelet_args)
        if lifecycle is not None:
            pulumi.set(__self__, "lifecycle", lifecycle)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if management is not None:
            pulumi.set(__self__, "management", management)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if runtime_root_dir is not None:
            pulumi.set(__self__, "runtime_root_dir", runtime_root_dir)
        if scaling is not None:
            pulumi.set(__self__, "scaling", scaling)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> pulumi.Input[str]:
        """
        Node billing type. `PREPAID` is a yearly and monthly subscription, `POSTPAID_BY_HOUR` is a pay-as-you-go plan. The default is `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Model list.
        """
        return pulumi.get(self, "instance_types")

    @instance_types.setter
    def instance_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "instance_types", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Security group list.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Subnet list.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="systemDisk")
    def system_disk(self) -> pulumi.Input['NativeNodePoolNativeSystemDiskArgs']:
        """
        System disk configuration.
        """
        return pulumi.get(self, "system_disk")

    @system_disk.setter
    def system_disk(self, value: pulumi.Input['NativeNodePoolNativeSystemDiskArgs']):
        pulumi.set(self, "system_disk", value)

    @property
    @pulumi.getter(name="autoRepair")
    def auto_repair(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable self-healing ability.
        """
        return pulumi.get(self, "auto_repair")

    @auto_repair.setter
    def auto_repair(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_repair", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NativeNodePoolNativeDataDiskArgs']]]]:
        """
        Native node pool data disk list.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NativeNodePoolNativeDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="enableAutoscaling")
    def enable_autoscaling(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable elastic scaling.
        """
        return pulumi.get(self, "enable_autoscaling")

    @enable_autoscaling.setter
    def enable_autoscaling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_autoscaling", value)

    @property
    @pulumi.getter(name="healthCheckPolicyName")
    def health_check_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Fault self-healing rule name.
        """
        return pulumi.get(self, "health_check_policy_name")

    @health_check_policy_name.setter
    def health_check_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_policy_name", value)

    @property
    @pulumi.getter(name="hostNamePattern")
    def host_name_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Native node pool hostName pattern string.
        """
        return pulumi.get(self, "host_name_pattern")

    @host_name_pattern.setter
    def host_name_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name_pattern", value)

    @property
    @pulumi.getter(name="instanceChargePrepaid")
    def instance_charge_prepaid(self) -> Optional[pulumi.Input['NativeNodePoolNativeInstanceChargePrepaidArgs']]:
        """
        Billing configuration for yearly and monthly models.
        """
        return pulumi.get(self, "instance_charge_prepaid")

    @instance_charge_prepaid.setter
    def instance_charge_prepaid(self, value: Optional[pulumi.Input['NativeNodePoolNativeInstanceChargePrepaidArgs']]):
        pulumi.set(self, "instance_charge_prepaid", value)

    @property
    @pulumi.getter(name="internetAccessible")
    def internet_accessible(self) -> Optional[pulumi.Input['NativeNodePoolNativeInternetAccessibleArgs']]:
        """
        Public network bandwidth settings.
        """
        return pulumi.get(self, "internet_accessible")

    @internet_accessible.setter
    def internet_accessible(self, value: Optional[pulumi.Input['NativeNodePoolNativeInternetAccessibleArgs']]):
        pulumi.set(self, "internet_accessible", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Node pool ssh public key id array.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter(name="kubeletArgs")
    def kubelet_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Kubelet custom parameters.
        """
        return pulumi.get(self, "kubelet_args")

    @kubelet_args.setter
    def kubelet_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kubelet_args", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['NativeNodePoolNativeLifecycleArgs']]:
        """
        Predefined scripts.
        """
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['NativeNodePoolNativeLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool type. Example value: `NativeCVM` or `Native`. Default is `Native`.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def management(self) -> Optional[pulumi.Input['NativeNodePoolNativeManagementArgs']]:
        """
        Node pool management parameter settings.
        """
        return pulumi.get(self, "management")

    @management.setter
    def management(self, value: Optional[pulumi.Input['NativeNodePoolNativeManagementArgs']]):
        pulumi.set(self, "management", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Desired number of nodes.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter(name="runtimeRootDir")
    def runtime_root_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Runtime root directory.
        """
        return pulumi.get(self, "runtime_root_dir")

    @runtime_root_dir.setter
    def runtime_root_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_root_dir", value)

    @property
    @pulumi.getter
    def scaling(self) -> Optional[pulumi.Input['NativeNodePoolNativeScalingArgs']]:
        """
        Node pool scaling configuration.
        """
        return pulumi.get(self, "scaling")

    @scaling.setter
    def scaling(self, value: Optional[pulumi.Input['NativeNodePoolNativeScalingArgs']]):
        pulumi.set(self, "scaling", value)


@pulumi.input_type
class NativeNodePoolNativeDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: pulumi.Input[bool],
                 disk_size: pulumi.Input[int],
                 disk_type: pulumi.Input[str],
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 throughput_performance: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Whether to automatically format the disk and mount it.
        :param pulumi.Input[int] disk_size: Cloud disk size (G).
        :param pulumi.Input[str] disk_type: Cloud disk type. Valid values: `CLOUD_PREMIUM`: Premium Cloud Storage, `CLOUD_SSD`: cloud SSD disk, `CLOUD_BSSD`: Basic SSD, `CLOUD_HSSD`: Enhanced SSD, `CLOUD_TSSD`: Tremendous SSD, `LOCAL_NVME`: local NVME disk.
        :param pulumi.Input[str] disk_partition: Mount device name or partition name.
        :param pulumi.Input[str] encrypt: Pass in this parameter to create an encrypted cloud disk. The value is fixed to `ENCRYPT`.
        :param pulumi.Input[str] file_system: File system (ext3/ext4/xfs).
        :param pulumi.Input[str] kms_key_id: Customize the key when purchasing an encrypted disk. When this parameter is passed in, the Encrypt parameter is not empty.
        :param pulumi.Input[str] mount_target: Mount directory.
        :param pulumi.Input[str] snapshot_id: Snapshot ID. If passed in, the cloud disk will be created based on this snapshot. The snapshot type must be a data disk snapshot.
        :param pulumi.Input[int] throughput_performance: Cloud disk performance, unit: MB/s. Use this parameter to purchase additional performance for the cloud disk.
        """
        pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> pulumi.Input[bool]:
        """
        Whether to automatically format the disk and mount it.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: pulumi.Input[bool]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Input[int]:
        """
        Cloud disk size (G).
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input[str]:
        """
        Cloud disk type. Valid values: `CLOUD_PREMIUM`: Premium Cloud Storage, `CLOUD_SSD`: cloud SSD disk, `CLOUD_BSSD`: Basic SSD, `CLOUD_HSSD`: Enhanced SSD, `CLOUD_TSSD`: Tremendous SSD, `LOCAL_NVME`: local NVME disk.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        Mount device name or partition name.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[str]]:
        """
        Pass in this parameter to create an encrypted cloud disk. The value is fixed to `ENCRYPT`.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system (ext3/ext4/xfs).
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Customize the key when purchasing an encrypted disk. When this parameter is passed in, the Encrypt parameter is not empty.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount directory.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Snapshot ID. If passed in, the cloud disk will be created based on this snapshot. The snapshot type must be a data disk snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[pulumi.Input[int]]:
        """
        Cloud disk performance, unit: MB/s. Use this parameter to purchase additional performance for the cloud disk.
        """
        return pulumi.get(self, "throughput_performance")

    @throughput_performance.setter
    def throughput_performance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throughput_performance", value)


@pulumi.input_type
class NativeNodePoolNativeInstanceChargePrepaidArgs:
    def __init__(__self__, *,
                 period: pulumi.Input[int],
                 renew_flag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] period: Postpaid billing cycle, unit (month): 1, 2, 3, 4, 5,, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
        :param pulumi.Input[str] renew_flag: Prepaid renewal method:
        """
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[int]:
        """
        Postpaid billing cycle, unit (month): 1, 2, 3, 4, 5,, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[int]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Prepaid renewal method:
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_flag", value)


@pulumi.input_type
class NativeNodePoolNativeInternetAccessibleArgs:
    def __init__(__self__, *,
                 charge_type: pulumi.Input[str],
                 max_bandwidth_out: pulumi.Input[int],
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] charge_type: Network billing method. Optional value is `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[int] max_bandwidth_out: Maximum bandwidth output. Note: When chargeType is `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_POSTPAID_BY_HOUR`, the valid range is 1~100. When chargeType is `BANDWIDTH_PACKAG`, the valid range is 1~2000.
        :param pulumi.Input[str] bandwidth_package_id: Bandwidth package ID. Note: When ChargeType is BANDWIDTH_PACKAG, the value cannot be empty; otherwise, the value must be empty.
        """
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "max_bandwidth_out", max_bandwidth_out)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Input[str]:
        """
        Network billing method. Optional value is `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="maxBandwidthOut")
    def max_bandwidth_out(self) -> pulumi.Input[int]:
        """
        Maximum bandwidth output. Note: When chargeType is `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_POSTPAID_BY_HOUR`, the valid range is 1~100. When chargeType is `BANDWIDTH_PACKAG`, the valid range is 1~2000.
        """
        return pulumi.get(self, "max_bandwidth_out")

    @max_bandwidth_out.setter
    def max_bandwidth_out(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_bandwidth_out", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        Bandwidth package ID. Note: When ChargeType is BANDWIDTH_PACKAG, the value cannot be empty; otherwise, the value must be empty.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)


@pulumi.input_type
class NativeNodePoolNativeLifecycleArgs:
    def __init__(__self__, *,
                 post_init: Optional[pulumi.Input[str]] = None,
                 pre_init: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] post_init: Custom script after node initialization.
        :param pulumi.Input[str] pre_init: Custom script before node initialization.
        """
        if post_init is not None:
            pulumi.set(__self__, "post_init", post_init)
        if pre_init is not None:
            pulumi.set(__self__, "pre_init", pre_init)

    @property
    @pulumi.getter(name="postInit")
    def post_init(self) -> Optional[pulumi.Input[str]]:
        """
        Custom script after node initialization.
        """
        return pulumi.get(self, "post_init")

    @post_init.setter
    def post_init(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_init", value)

    @property
    @pulumi.getter(name="preInit")
    def pre_init(self) -> Optional[pulumi.Input[str]]:
        """
        Custom script before node initialization.
        """
        return pulumi.get(self, "pre_init")

    @pre_init.setter
    def pre_init(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_init", value)


@pulumi.input_type
class NativeNodePoolNativeManagementArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kernel_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: Hosts configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kernel_args: Kernel parameter configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers: Dns configuration.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if kernel_args is not None:
            pulumi.set(__self__, "kernel_args", kernel_args)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Hosts configuration.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="kernelArgs")
    def kernel_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Kernel parameter configuration.
        """
        return pulumi.get(self, "kernel_args")

    @kernel_args.setter
    def kernel_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kernel_args", value)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Dns configuration.
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers", value)


@pulumi.input_type
class NativeNodePoolNativeScalingArgs:
    def __init__(__self__, *,
                 create_policy: Optional[pulumi.Input[str]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] create_policy: Node pool expansion strategy. `ZoneEquality`: multiple availability zones are broken up; `ZonePriority`: the preferred availability zone takes precedence.
        :param pulumi.Input[int] max_replicas: Maximum number of replicas in node pool.
        :param pulumi.Input[int] min_replicas: Minimum number of replicas in node pool.
        """
        if create_policy is not None:
            pulumi.set(__self__, "create_policy", create_policy)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)

    @property
    @pulumi.getter(name="createPolicy")
    def create_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Node pool expansion strategy. `ZoneEquality`: multiple availability zones are broken up; `ZonePriority`: the preferred availability zone takes precedence.
        """
        return pulumi.get(self, "create_policy")

    @create_policy.setter
    def create_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_policy", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of replicas in node pool.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of replicas in node pool.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)


@pulumi.input_type
class NativeNodePoolNativeSystemDiskArgs:
    def __init__(__self__, *,
                 disk_size: pulumi.Input[int],
                 disk_type: pulumi.Input[str]):
        """
        :param pulumi.Input[int] disk_size: Cloud disk size (G).
        :param pulumi.Input[str] disk_type: Cloud disk type. Valid values: `CLOUD_PREMIUM`: Premium Cloud Storage, `CLOUD_SSD`: cloud SSD disk, `CLOUD_BSSD`: Basic SSD, `CLOUD_HSSD`: Enhanced SSD.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Input[int]:
        """
        Cloud disk size (G).
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input[str]:
        """
        Cloud disk type. Valid values: `CLOUD_PREMIUM`: Premium Cloud Storage, `CLOUD_SSD`: cloud SSD disk, `CLOUD_BSSD`: Basic SSD, `CLOUD_HSSD`: Enhanced SSD.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_type", value)


@pulumi.input_type
class NativeNodePoolTagArgs:
    def __init__(__self__, *,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NativeNodePoolTagTagArgs']]]] = None):
        """
        :param pulumi.Input[str] resource_type: The resource type bound to the label.
        :param pulumi.Input[Sequence[pulumi.Input['NativeNodePoolTagTagArgs']]] tags: Tag pair list.
        """
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The resource type bound to the label.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NativeNodePoolTagTagArgs']]]]:
        """
        Tag pair list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NativeNodePoolTagTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class NativeNodePoolTagTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Tag Key.
        :param pulumi.Input[str] value: Tag Value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Tag Key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Tag Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NativeNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Effect of the taint.
        :param pulumi.Input[str] key: Key of the taint.
        :param pulumi.Input[str] value: Value of the taint.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect of the taint.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the taint.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the taint.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NodePoolAnnotationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Name in the map table.
        :param pulumi.Input[str] value: Value in the map table.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name in the map table.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value in the map table.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NodePoolAutoScalingConfigArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 backup_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAutoScalingConfigDataDiskArgs']]]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 host_name_style: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_name_style: Optional[pulumi.Input[str]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 orderly_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spot_instance_type: Optional[pulumi.Input[str]] = None,
                 spot_max_price: Optional[pulumi.Input[str]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: Specified types of CVM instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_instance_types: Backup CVM instance types if specified instance type sold out or mismatch.
        :param pulumi.Input[str] bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param pulumi.Input[str] cam_role_name: Name of cam role.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolAutoScalingConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[str] host_name: The hostname of the cloud server, dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows instances are not supported. Examples of other types (Linux, etc.): The character length is [2, 40], multiple periods are allowed, and there is a paragraph between the dots, and each paragraph is allowed to consist of letters (unlimited case), numbers and dashes (-). Pure numbers are not allowed. For usage, refer to `HostNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
        :param pulumi.Input[str] host_name_style: The style of the host name of the cloud server, the value range includes ORIGINAL and UNIQUE, and the default is ORIGINAL. For usage, refer to `HostNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
        :param pulumi.Input[str] instance_charge_type: Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input[str] instance_name: Instance name, no more than 60 characters. For usage, refer to `InstanceNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
        :param pulumi.Input[str] instance_name_style: Type of CVM instance name. Valid values: `ORIGINAL` and `UNIQUE`. Default value: `ORIGINAL`. For usage, refer to `InstanceNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is `0`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ids: ID list of keys.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] orderly_security_group_ids: Ordered security groups to which a CVM instance belongs.
        :param pulumi.Input[str] password: Password to access.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The order of elements in this field cannot be guaranteed. Use `orderly_security_group_ids` instead. Security groups to which a CVM instance belongs.
        :param pulumi.Input[str] spot_instance_type: Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[str] spot_max_price: Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: Type of a CVM disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`. Default is `CLOUD_PREMIUM`.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        if backup_instance_types is not None:
            pulumi.set(__self__, "backup_instance_types", backup_instance_types)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if host_name_style is not None:
            pulumi.set(__self__, "host_name_style", host_name_style)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_name_style is not None:
            pulumi.set(__self__, "instance_name_style", instance_name_style)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if orderly_security_group_ids is not None:
            pulumi.set(__self__, "orderly_security_group_ids", orderly_security_group_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            warnings.warn("""The order of elements in this field cannot be guaranteed. Use `orderly_security_group_ids` instead.""", DeprecationWarning)
            pulumi.log.warn("""security_group_ids is deprecated: The order of elements in this field cannot be guaranteed. Use `orderly_security_group_ids` instead.""")
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if spot_instance_type is not None:
            pulumi.set(__self__, "spot_instance_type", spot_instance_type)
        if spot_max_price is not None:
            pulumi.set(__self__, "spot_max_price", spot_max_price)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="backupInstanceTypes")
    def backup_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Backup CVM instance types if specified instance type sold out or mismatch.
        """
        return pulumi.get(self, "backup_instance_types")

    @backup_instance_types.setter
    def backup_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_instance_types", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of cam role.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAutoScalingConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAutoScalingConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname of the cloud server, dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows instances are not supported. Examples of other types (Linux, etc.): The character length is [2, 40], multiple periods are allowed, and there is a paragraph between the dots, and each paragraph is allowed to consist of letters (unlimited case), numbers and dashes (-). Pure numbers are not allowed. For usage, refer to `HostNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="hostNameStyle")
    def host_name_style(self) -> Optional[pulumi.Input[str]]:
        """
        The style of the host name of the cloud server, the value range includes ORIGINAL and UNIQUE, and the default is ORIGINAL. For usage, refer to `HostNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
        """
        return pulumi.get(self, "host_name_style")

    @host_name_style.setter
    def host_name_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name_style", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @instance_charge_type_prepaid_period.setter
    def instance_charge_type_prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_charge_type_prepaid_period", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @instance_charge_type_prepaid_renew_flag.setter
    def instance_charge_type_prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type_prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name, no more than 60 characters. For usage, refer to `InstanceNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceNameStyle")
    def instance_name_style(self) -> Optional[pulumi.Input[str]]:
        """
        Type of CVM instance name. Valid values: `ORIGINAL` and `UNIQUE`. Default value: `ORIGINAL`. For usage, refer to `InstanceNameSettings` in https://www.tencentcloud.com/document/product/377/31001.
        """
        return pulumi.get(self, "instance_name_style")

    @instance_name_style.setter
    def instance_name_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name_style", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Valid value: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is `0`.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of keys.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter(name="orderlySecurityGroupIds")
    def orderly_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ordered security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "orderly_security_group_ids")

    @orderly_security_group_ids.setter
    def orderly_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "orderly_security_group_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The order of elements in this field cannot be guaranteed. Use `orderly_security_group_ids` instead. Security groups to which a CVM instance belongs.
        """
        warnings.warn("""The order of elements in this field cannot be guaranteed. Use `orderly_security_group_ids` instead.""", DeprecationWarning)
        pulumi.log.warn("""security_group_ids is deprecated: The order of elements in this field cannot be guaranteed. Use `orderly_security_group_ids` instead.""")

        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_instance_type")

    @spot_instance_type.setter
    def spot_instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_instance_type", value)

    @property
    @pulumi.getter(name="spotMaxPrice")
    def spot_max_price(self) -> Optional[pulumi.Input[str]]:
        """
        Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_max_price")

    @spot_max_price.setter
    def spot_max_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_max_price", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of a CVM disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`. Default is `CLOUD_PREMIUM`.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)


@pulumi.input_type
class NodePoolAutoScalingConfigDataDiskArgs:
    def __init__(__self__, *,
                 delete_with_instance: Optional[pulumi.Input[bool]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 throughput_performance: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] delete_with_instance: Indicates whether the disk remove after instance terminated. Default is `false`.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
        :param pulumi.Input[bool] encrypt: Specify whether to encrypt data disk, default: false. NOTE: Make sure the instance type is offering and the cam role `QcloudKMSAccessForCVMRole` was provided.
        :param pulumi.Input[str] snapshot_id: Data disk snapshot ID.
        :param pulumi.Input[int] throughput_performance: Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD` and `data_size` > 460GB.
        """
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the disk remove after instance terminated. Default is `false`.
        """
        return pulumi.get(self, "delete_with_instance")

    @delete_with_instance.setter
    def delete_with_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_with_instance", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to encrypt data disk, default: false. NOTE: Make sure the instance type is offering and the cam role `QcloudKMSAccessForCVMRole` was provided.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[pulumi.Input[int]]:
        """
        Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD` and `data_size` > 460GB.
        """
        return pulumi.get(self, "throughput_performance")

    @throughput_performance.setter
    def throughput_performance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throughput_performance", value)


@pulumi.input_type
class NodePoolNodeConfigArgs:
    def __init__(__self__, *,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_args: Optional[pulumi.Input['NodePoolNodeConfigGpuArgsArgs']] = None,
                 is_schedule: Optional[pulumi.Input[bool]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 pre_start_user_script: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        :param pulumi.Input[str] docker_graph_path: Docker graph path. Default is `/var/lib/docker`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node. This is a white-list parameter.
        :param pulumi.Input['NodePoolNodeConfigGpuArgsArgs'] gpu_args: GPU driver parameters.
        :param pulumi.Input[bool] is_schedule: Indicate to schedule the adding node or not. Default is true.
        :param pulumi.Input[str] mount_target: Mount target. Default is not mounting.
        :param pulumi.Input[str] pre_start_user_script: Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        :param pulumi.Input[str] user_data: Base64-encoded User Data text, the length limit is 16KB.
        """
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if gpu_args is not None:
            pulumi.set(__self__, "gpu_args", gpu_args)
        if is_schedule is not None:
            pulumi.set(__self__, "is_schedule", is_schedule)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if pre_start_user_script is not None:
            pulumi.set(__self__, "pre_start_user_script", pre_start_user_script)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when the cluster is podCIDR.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        Docker graph path. Default is `/var/lib/docker`.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node. This is a white-list parameter.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="gpuArgs")
    def gpu_args(self) -> Optional[pulumi.Input['NodePoolNodeConfigGpuArgsArgs']]:
        """
        GPU driver parameters.
        """
        return pulumi.get(self, "gpu_args")

    @gpu_args.setter
    def gpu_args(self, value: Optional[pulumi.Input['NodePoolNodeConfigGpuArgsArgs']]):
        pulumi.set(self, "gpu_args", value)

    @property
    @pulumi.getter(name="isSchedule")
    def is_schedule(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate to schedule the adding node or not. Default is true.
        """
        return pulumi.get(self, "is_schedule")

    @is_schedule.setter
    def is_schedule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_schedule", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target. Default is not mounting.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="preStartUserScript")
    def pre_start_user_script(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
        """
        return pulumi.get(self, "pre_start_user_script")

    @pre_start_user_script.setter
    def pre_start_user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_start_user_script", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class NodePoolNodeConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount. NOTE: this argument doesn't support setting in node pool, or will leads to mount error.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk. Valid value: `LOCAL_BASIC`, `LOCAL_SSD`, `CLOUD_BASIC`, `CLOUD_PREMIUM`, `CLOUD_SSD`, `CLOUD_HSSD`, `CLOUD_TSSD` and `CLOUD_BSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class NodePoolNodeConfigGpuArgsArgs:
    def __init__(__self__, *,
                 cuda: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cudnn: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 custom_driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mig_enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] cuda: CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[Mapping[str, Any]] cudnn: cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        :param pulumi.Input[Mapping[str, Any]] custom_driver: Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        :param pulumi.Input[Mapping[str, Any]] driver: GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[bool] mig_enable: Whether to enable MIG.
        """
        if cuda is not None:
            pulumi.set(__self__, "cuda", cuda)
        if cudnn is not None:
            pulumi.set(__self__, "cudnn", cudnn)
        if custom_driver is not None:
            pulumi.set(__self__, "custom_driver", custom_driver)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if mig_enable is not None:
            pulumi.set(__self__, "mig_enable", mig_enable)

    @property
    @pulumi.getter
    def cuda(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "cuda")

    @cuda.setter
    def cuda(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cuda", value)

    @property
    @pulumi.getter
    def cudnn(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        """
        return pulumi.get(self, "cudnn")

    @cudnn.setter
    def cudnn(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cudnn", value)

    @property
    @pulumi.getter(name="customDriver")
    def custom_driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        """
        return pulumi.get(self, "custom_driver")

    @custom_driver.setter
    def custom_driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_driver", value)

    @property
    @pulumi.getter
    def driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="migEnable")
    def mig_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable MIG.
        """
        return pulumi.get(self, "mig_enable")

    @mig_enable.setter
    def mig_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mig_enable", value)


@pulumi.input_type
class NodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] effect: Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
        :param pulumi.Input[str] key: Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        :param pulumi.Input[str] value: Value of the taint.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> pulumi.Input[str]:
        """
        Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of the taint.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ScaleWorkerDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] mount_target: Mount target.
        """
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount.
        """
        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class ScaleWorkerGpuArgsArgs:
    def __init__(__self__, *,
                 cuda: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cudnn: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 custom_driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 driver: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 mig_enable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] cuda: CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[Mapping[str, Any]] cudnn: cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        :param pulumi.Input[Mapping[str, Any]] custom_driver: Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        :param pulumi.Input[Mapping[str, Any]] driver: GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        :param pulumi.Input[bool] mig_enable: Whether to enable MIG.
        """
        if cuda is not None:
            pulumi.set(__self__, "cuda", cuda)
        if cudnn is not None:
            pulumi.set(__self__, "cudnn", cudnn)
        if custom_driver is not None:
            pulumi.set(__self__, "custom_driver", custom_driver)
        if driver is not None:
            pulumi.set(__self__, "driver", driver)
        if mig_enable is not None:
            pulumi.set(__self__, "mig_enable", mig_enable)

    @property
    @pulumi.getter
    def cuda(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        CUDA  version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "cuda")

    @cuda.setter
    def cuda(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cuda", value)

    @property
    @pulumi.getter
    def cudnn(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        cuDNN version. Format like: `{ version: String, name: String, doc_name: String, dev_name: String }`. `version`: cuDNN version; `name`: cuDNN name; `doc_name`: Doc name of cuDNN; `dev_name`: Dev name of cuDNN.
        """
        return pulumi.get(self, "cudnn")

    @cudnn.setter
    def cudnn(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "cudnn", value)

    @property
    @pulumi.getter(name="customDriver")
    def custom_driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom GPU driver. Format like: `{address: String}`. `address`: URL of custom GPU driver address.
        """
        return pulumi.get(self, "custom_driver")

    @custom_driver.setter
    def custom_driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_driver", value)

    @property
    @pulumi.getter
    def driver(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        GPU driver version. Format like: `{ version: String, name: String }`. `version`: Version of GPU driver or CUDA; `name`: Name of GPU driver or CUDA.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="migEnable")
    def mig_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable MIG.
        """
        return pulumi.get(self, "mig_enable")

    @mig_enable.setter
    def mig_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mig_enable", value)


@pulumi.input_type
class ScaleWorkerTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: Effect of the taint.
        :param pulumi.Input[str] key: Key of the taint.
        :param pulumi.Input[str] value: Value of the taint.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect of the taint.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the taint.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the taint.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ScaleWorkerWorkerConfigArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerConfigDataDiskArgs']]]] = None,
                 desired_pod_num: Optional[pulumi.Input[int]] = None,
                 disaster_recover_group_ids: Optional[pulumi.Input[str]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 img_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 key_ids: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_type: Specified types of CVM instance.
        :param pulumi.Input[str] subnet_id: Private network ID.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] bandwidth_package_id: bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[int] count: Number of cvm.
        :param pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerConfigDataDiskArgs']]] data_disks: Configurations of cvm data disk.
        :param pulumi.Input[int] desired_pod_num: Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        :param pulumi.Input[str] disaster_recover_group_ids: Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is TRUE.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is TRUE.
        :param pulumi.Input[str] hostname: The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        :param pulumi.Input[str] hpc_cluster_id: Id of cvm hpc cluster.
        :param pulumi.Input[str] img_id: The valid image id, format of img-xxx.
        :param pulumi.Input[str] instance_charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input[str] instance_name: Name of the CVMs.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is 0.
        :param pulumi.Input[str] key_ids: ID list of keys, should be set if `password` not set.
        :param pulumi.Input[str] password: Password to access, should be set if `key_ids` not set.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        :param pulumi.Input[str] user_data: User data provided to instances, needs to be encoded in base64, and the maximum supported data size is 16KB.
        """
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if desired_pod_num is not None:
            pulumi.set(__self__, "desired_pod_num", desired_pod_num)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hpc_cluster_id is not None:
            pulumi.set(__self__, "hpc_cluster_id", hpc_cluster_id)
        if img_id is not None:
            pulumi.set(__self__, "img_id", img_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Specified types of CVM instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Private network ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        bandwidth package id. if user is standard user, then the bandwidth_package_id is needed, or default has bandwidth_package_id.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cvm.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerConfigDataDiskArgs']]]]:
        """
        Configurations of cvm data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleWorkerWorkerConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="desiredPodNum")
    def desired_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate to set desired pod number in node. valid when enable_customized_pod_cidr=true, and it override `[globe_]desired_pod_num` for current node. Either all the fields `desired_pod_num` or none.
        """
        return pulumi.get(self, "desired_pod_num")

    @desired_pod_num.setter
    def desired_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_pod_num", value)

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[pulumi.Input[str]]:
        """
        Disaster recover groups to which a CVM instance belongs. Only support maximum 1.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @disaster_recover_group_ids.setter
    def disaster_recover_group_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disaster_recover_group_ids", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is TRUE.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of cvm hpc cluster.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @hpc_cluster_id.setter
    def hpc_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hpc_cluster_id", value)

    @property
    @pulumi.getter(name="imgId")
    def img_id(self) -> Optional[pulumi.Input[str]]:
        """
        The valid image id, format of img-xxx.
        """
        return pulumi.get(self, "img_id")

    @img_id.setter
    def img_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_id", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`, `PREPAID` instance will not terminated after cluster deleted, and may not allow to delete before expired.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @instance_charge_type_prepaid_period.setter
    def instance_charge_type_prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_charge_type_prepaid_period", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @instance_charge_type_prepaid_renew_flag.setter
    def instance_charge_type_prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type_prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CVMs.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Available values include `TRAFFIC_POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is 0.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[str]]:
        """
        ID list of keys, should be set if `password` not set.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access, should be set if `key_ids` not set.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        System disk type. For more information on limits of system disk types, see [Storage Overview](https://intl.cloud.tencent.com/document/product/213/4952). Valid values: `LOCAL_BASIC`: local disk, `LOCAL_SSD`: local SSD disk, `CLOUD_SSD`: SSD, `CLOUD_PREMIUM`: Premium Cloud Storage. NOTE: `CLOUD_BASIC`, `LOCAL_BASIC` and `LOCAL_SSD` are deprecated.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        User data provided to instances, needs to be encoded in base64, and the maximum supported data size is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ScaleWorkerWorkerConfigDataDiskArgs:
    def __init__(__self__, *,
                 auto_format_and_mount: Optional[pulumi.Input[bool]] = None,
                 disk_partition: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 file_system: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] auto_format_and_mount: Indicate whether to auto format and mount or not. Default is `false`.
        :param pulumi.Input[str] disk_partition: The name of the device or partition to mount.
        :param pulumi.Input[int] disk_size: Volume of disk in GB. Default is `0`.
        :param pulumi.Input[str] disk_type: Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        :param pulumi.Input[bool] encrypt: Indicates whether to encrypt data disk, default `false`.
        :param pulumi.Input[str] file_system: File system, e.g. `ext3/ext4/xfs`.
        :param pulumi.Input[str] kms_key_id: ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        :param pulumi.Input[str] mount_target: Mount target.
        :param pulumi.Input[str] snapshot_id: Data disk snapshot ID.
        """
        if auto_format_and_mount is not None:
            warnings.warn("""This argument was deprecated, use `data_disk` instead.""", DeprecationWarning)
            pulumi.log.warn("""auto_format_and_mount is deprecated: This argument was deprecated, use `data_disk` instead.""")
        if auto_format_and_mount is not None:
            pulumi.set(__self__, "auto_format_and_mount", auto_format_and_mount)
        if disk_partition is not None:
            warnings.warn("""This argument was deprecated, use `data_disk` instead.""", DeprecationWarning)
            pulumi.log.warn("""disk_partition is deprecated: This argument was deprecated, use `data_disk` instead.""")
        if disk_partition is not None:
            pulumi.set(__self__, "disk_partition", disk_partition)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if file_system is not None:
            warnings.warn("""This argument was deprecated, use `data_disk` instead.""", DeprecationWarning)
            pulumi.log.warn("""file_system is deprecated: This argument was deprecated, use `data_disk` instead.""")
        if file_system is not None:
            pulumi.set(__self__, "file_system", file_system)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if mount_target is not None:
            warnings.warn("""This argument was deprecated, use `data_disk` instead.""", DeprecationWarning)
            pulumi.log.warn("""mount_target is deprecated: This argument was deprecated, use `data_disk` instead.""")
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="autoFormatAndMount")
    def auto_format_and_mount(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to auto format and mount or not. Default is `false`.
        """
        warnings.warn("""This argument was deprecated, use `data_disk` instead.""", DeprecationWarning)
        pulumi.log.warn("""auto_format_and_mount is deprecated: This argument was deprecated, use `data_disk` instead.""")

        return pulumi.get(self, "auto_format_and_mount")

    @auto_format_and_mount.setter
    def auto_format_and_mount(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_format_and_mount", value)

    @property
    @pulumi.getter(name="diskPartition")
    def disk_partition(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the device or partition to mount.
        """
        warnings.warn("""This argument was deprecated, use `data_disk` instead.""", DeprecationWarning)
        pulumi.log.warn("""disk_partition is deprecated: This argument was deprecated, use `data_disk` instead.""")

        return pulumi.get(self, "disk_partition")

    @disk_partition.setter
    def disk_partition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_partition", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Types of disk, available values: `CLOUD_PREMIUM` and `CLOUD_SSD` and `CLOUD_HSSD` and `CLOUD_TSSD`.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to encrypt data disk, default `false`.
        """
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="fileSystem")
    def file_system(self) -> Optional[pulumi.Input[str]]:
        """
        File system, e.g. `ext3/ext4/xfs`.
        """
        warnings.warn("""This argument was deprecated, use `data_disk` instead.""", DeprecationWarning)
        pulumi.log.warn("""file_system is deprecated: This argument was deprecated, use `data_disk` instead.""")

        return pulumi.get(self, "file_system")

    @file_system.setter
    def file_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the custom CMK in the format of UUID or `kms-abcd1234`. This parameter is used to encrypt cloud disks.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        Mount target.
        """
        warnings.warn("""This argument was deprecated, use `data_disk` instead.""", DeprecationWarning)
        pulumi.log.warn("""mount_target is deprecated: This argument was deprecated, use `data_disk` instead.""")

        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)


@pulumi.input_type
class ScaleWorkerWorkerInstancesListArgs:
    def __init__(__self__, *,
                 failed_reason: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_role: Optional[pulumi.Input[str]] = None,
                 instance_state: Optional[pulumi.Input[str]] = None,
                 lan_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] failed_reason: Information of the cvm when it is failed.
        :param pulumi.Input[str] instance_id: ID of the cvm.
        :param pulumi.Input[str] instance_role: Role of the cvm.
        :param pulumi.Input[str] instance_state: State of the cvm.
        :param pulumi.Input[str] lan_ip: LAN IP of the cvm.
        """
        if failed_reason is not None:
            pulumi.set(__self__, "failed_reason", failed_reason)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_role is not None:
            pulumi.set(__self__, "instance_role", instance_role)
        if instance_state is not None:
            pulumi.set(__self__, "instance_state", instance_state)
        if lan_ip is not None:
            pulumi.set(__self__, "lan_ip", lan_ip)

    @property
    @pulumi.getter(name="failedReason")
    def failed_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Information of the cvm when it is failed.
        """
        return pulumi.get(self, "failed_reason")

    @failed_reason.setter
    def failed_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_reason", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the cvm.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> Optional[pulumi.Input[str]]:
        """
        Role of the cvm.
        """
        return pulumi.get(self, "instance_role")

    @instance_role.setter
    def instance_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_role", value)

    @property
    @pulumi.getter(name="instanceState")
    def instance_state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the cvm.
        """
        return pulumi.get(self, "instance_state")

    @instance_state.setter
    def instance_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_state", value)

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> Optional[pulumi.Input[str]]:
        """
        LAN IP of the cvm.
        """
        return pulumi.get(self, "lan_ip")

    @lan_ip.setter
    def lan_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_ip", value)


@pulumi.input_type
class ServerlessNodePoolServerlessNodeArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet_id: subnet id of serverless node.
        :param pulumi.Input[str] display_name: display name of serverless node.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        subnet id of serverless node.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        display name of serverless node.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class ServerlessNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] effect: Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
        :param pulumi.Input[str] key: Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        :param pulumi.Input[str] value: Value of the taint.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> pulumi.Input[str]:
        """
        Effect of the taint. Valid values are: `NoSchedule`, `PreferNoSchedule`, `NoExecute`.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Key of the taint. The taint key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value of the taint.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetClusterInstancesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: The attribute name, if there are multiple filters, the relationship between the filters is a logical AND relationship.
        :param Sequence[str] values: Attribute values, if there are multiple values in the same filter, the relationship between values under the same filter is a logical OR relationship.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The attribute name, if there are multiple filters, the relationship between the filters is a logical AND relationship.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Attribute values, if there are multiple values in the same filter, the relationship between values under the same filter is a logical OR relationship.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetClusterNativeNodePoolsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: The attribute name, if there are multiple filters, the relationship between the filters is a logical AND relationship.
        :param Sequence[str] values: Attribute values, if there are multiple values in the same filter, the relationship between values under the same filter is a logical OR relationship.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The attribute name, if there are multiple filters, the relationship between the filters is a logical AND relationship.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Attribute values, if there are multiple values in the same filter, the relationship between values under the same filter is a logical OR relationship.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetClusterNodePoolsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: The attribute name, if there are multiple filters, the relationship between the filters is a logical AND relationship.
        :param Sequence[str] values: Attribute values, if there are multiple values in the same filter, the relationship between values under the same filter is a logical OR relationship.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The attribute name, if there are multiple filters, the relationship between the filters is a logical AND relationship.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Attribute values, if there are multiple values in the same filter, the relationship between values under the same filter is a logical OR relationship.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


