# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AddonConfigArgs', 'AddonConfig']

@pulumi.input_type
class AddonConfigArgs:
    def __init__(__self__, *,
                 addon_name: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 addon_version: Optional[pulumi.Input[str]] = None,
                 raw_values: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AddonConfig resource.
        :param pulumi.Input[str] addon_name: Name of addon.
        :param pulumi.Input[str] cluster_id: ID of cluster.
        :param pulumi.Input[str] addon_version: Version of addon.
        :param pulumi.Input[str] raw_values: Params of addon, base64 encoded json format.
        """
        pulumi.set(__self__, "addon_name", addon_name)
        pulumi.set(__self__, "cluster_id", cluster_id)
        if addon_version is not None:
            pulumi.set(__self__, "addon_version", addon_version)
        if raw_values is not None:
            pulumi.set(__self__, "raw_values", raw_values)

    @property
    @pulumi.getter(name="addonName")
    def addon_name(self) -> pulumi.Input[str]:
        """
        Name of addon.
        """
        return pulumi.get(self, "addon_name")

    @addon_name.setter
    def addon_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "addon_name", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="addonVersion")
    def addon_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of addon.
        """
        return pulumi.get(self, "addon_version")

    @addon_version.setter
    def addon_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addon_version", value)

    @property
    @pulumi.getter(name="rawValues")
    def raw_values(self) -> Optional[pulumi.Input[str]]:
        """
        Params of addon, base64 encoded json format.
        """
        return pulumi.get(self, "raw_values")

    @raw_values.setter
    def raw_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_values", value)


@pulumi.input_type
class _AddonConfigState:
    def __init__(__self__, *,
                 addon_name: Optional[pulumi.Input[str]] = None,
                 addon_version: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 raw_values: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AddonConfig resources.
        :param pulumi.Input[str] addon_name: Name of addon.
        :param pulumi.Input[str] addon_version: Version of addon.
        :param pulumi.Input[str] cluster_id: ID of cluster.
        :param pulumi.Input[str] phase: Status of addon.
        :param pulumi.Input[str] raw_values: Params of addon, base64 encoded json format.
        :param pulumi.Input[str] reason: Reason of addon failed.
        """
        if addon_name is not None:
            pulumi.set(__self__, "addon_name", addon_name)
        if addon_version is not None:
            pulumi.set(__self__, "addon_version", addon_version)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if raw_values is not None:
            pulumi.set(__self__, "raw_values", raw_values)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="addonName")
    def addon_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of addon.
        """
        return pulumi.get(self, "addon_name")

    @addon_name.setter
    def addon_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addon_name", value)

    @property
    @pulumi.getter(name="addonVersion")
    def addon_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of addon.
        """
        return pulumi.get(self, "addon_version")

    @addon_version.setter
    def addon_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addon_version", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        """
        Status of addon.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter(name="rawValues")
    def raw_values(self) -> Optional[pulumi.Input[str]]:
        """
        Params of addon, base64 encoded json format.
        """
        return pulumi.get(self, "raw_values")

    @raw_values.setter
    def raw_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_values", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason of addon failed.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


class AddonConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addon_name: Optional[pulumi.Input[str]] = None,
                 addon_version: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 raw_values: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to configure addon that kubernetes comes with.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addon_name: Name of addon.
        :param pulumi.Input[str] addon_version: Version of addon.
        :param pulumi.Input[str] cluster_id: ID of cluster.
        :param pulumi.Input[str] raw_values: Params of addon, base64 encoded json format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AddonConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to configure addon that kubernetes comes with.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param AddonConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AddonConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addon_name: Optional[pulumi.Input[str]] = None,
                 addon_version: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 raw_values: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AddonConfigArgs.__new__(AddonConfigArgs)

            if addon_name is None and not opts.urn:
                raise TypeError("Missing required property 'addon_name'")
            __props__.__dict__["addon_name"] = addon_name
            __props__.__dict__["addon_version"] = addon_version
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["raw_values"] = raw_values
            __props__.__dict__["phase"] = None
            __props__.__dict__["reason"] = None
        super(AddonConfig, __self__).__init__(
            'tencentcloud:Kubernetes/addonConfig:AddonConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addon_name: Optional[pulumi.Input[str]] = None,
            addon_version: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            phase: Optional[pulumi.Input[str]] = None,
            raw_values: Optional[pulumi.Input[str]] = None,
            reason: Optional[pulumi.Input[str]] = None) -> 'AddonConfig':
        """
        Get an existing AddonConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addon_name: Name of addon.
        :param pulumi.Input[str] addon_version: Version of addon.
        :param pulumi.Input[str] cluster_id: ID of cluster.
        :param pulumi.Input[str] phase: Status of addon.
        :param pulumi.Input[str] raw_values: Params of addon, base64 encoded json format.
        :param pulumi.Input[str] reason: Reason of addon failed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AddonConfigState.__new__(_AddonConfigState)

        __props__.__dict__["addon_name"] = addon_name
        __props__.__dict__["addon_version"] = addon_version
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["phase"] = phase
        __props__.__dict__["raw_values"] = raw_values
        __props__.__dict__["reason"] = reason
        return AddonConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addonName")
    def addon_name(self) -> pulumi.Output[str]:
        """
        Name of addon.
        """
        return pulumi.get(self, "addon_name")

    @property
    @pulumi.getter(name="addonVersion")
    def addon_version(self) -> pulumi.Output[str]:
        """
        Version of addon.
        """
        return pulumi.get(self, "addon_version")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Output[str]:
        """
        Status of addon.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter(name="rawValues")
    def raw_values(self) -> pulumi.Output[str]:
        """
        Params of addon, base64 encoded json format.
        """
        return pulumi.get(self, "raw_values")

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Output[str]:
        """
        Reason of addon failed.
        """
        return pulumi.get(self, "reason")

