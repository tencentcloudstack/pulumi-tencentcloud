# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NodePoolArgs', 'NodePool']

@pulumi.input_type
class NodePoolArgs:
    def __init__(__self__, *,
                 auto_scaling_config: pulumi.Input['NodePoolAutoScalingConfigArgs'],
                 cluster_id: pulumi.Input[str],
                 max_size: pulumi.Input[int],
                 min_size: pulumi.Input[int],
                 vpc_id: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAnnotationArgs']]]] = None,
                 default_cooldown: Optional[pulumi.Input[int]] = None,
                 delete_keep_instance: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 enable_auto_scale: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 multi_zone_subnet_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input['NodePoolNodeConfigArgs']] = None,
                 node_os: Optional[pulumi.Input[str]] = None,
                 node_os_type: Optional[pulumi.Input[str]] = None,
                 retry_policy: Optional[pulumi.Input[str]] = None,
                 scaling_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_group_project_id: Optional[pulumi.Input[int]] = None,
                 scaling_mode: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolTaintArgs']]]] = None,
                 termination_policies: Optional[pulumi.Input[str]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a NodePool resource.
        :param pulumi.Input['NodePoolAutoScalingConfigArgs'] auto_scaling_config: Auto scaling config parameters.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[int] max_size: Maximum number of node.
        :param pulumi.Input[int] min_size: Minimum number of node.
        :param pulumi.Input[str] vpc_id: ID of VPC network.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolAnnotationArgs']]] annotations: Node Annotation List.
        :param pulumi.Input[int] default_cooldown: Seconds of scaling group cool down. Default value is `300`.
        :param pulumi.Input[bool] delete_keep_instance: Indicate to keep the CVM instance when delete the node pool. Default is `true`.
        :param pulumi.Input[bool] deletion_protection: Indicates whether the node pool deletion protection is enabled.
        :param pulumi.Input[int] desired_capacity: Desired capacity of the node. If `enable_auto_scale` is set `true`, this will be a computed parameter.
        :param pulumi.Input[bool] enable_auto_scale: Indicate whether to enable auto scaling or not.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes node pool created nodes. The label key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        :param pulumi.Input[str] multi_zone_subnet_policy: Multi-availability zone/subnet policy. Valid values: PRIORITY and EQUALITY. Default value: PRIORITY.
        :param pulumi.Input[str] name: Name of the node pool. The name does not exceed 25 characters, and only supports Chinese, English, numbers, underscores, separators (`-`) and decimal points.
        :param pulumi.Input['NodePoolNodeConfigArgs'] node_config: Node config.
        :param pulumi.Input[str] node_os: Operating system of the cluster. Please refer to [TencentCloud Documentation](https://www.tencentcloud.com/document/product/457/46750?lang=en&pg=#list-of-public-images-supported-by-tke) for available values. Default is 'tlinux2.4x86_64'. This parameter will only affect new nodes, not including the existing nodes.
        :param pulumi.Input[str] node_os_type: The image version of the node. Valida values are `DOCKER_CUSTOMIZE` and `GENERAL`. Default is `GENERAL`. This parameter will only affect new nodes, not including the existing nodes.
        :param pulumi.Input[str] retry_policy: Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        :param pulumi.Input[str] scaling_group_name: Name of relative scaling group.
        :param pulumi.Input[int] scaling_group_project_id: Project ID the scaling group belongs to.
        :param pulumi.Input[str] scaling_mode: Auto scaling mode. Valid values are `CLASSIC_SCALING`(scaling by create/destroy instances), `WAKE_UP_STOPPED_SCALING`(Boot priority for expansion. When expanding the capacity, the shutdown operation is given priority to the shutdown of the instance. If the number of instances is still lower than the expected number of instances after the startup, the instance will be created, and the method of destroying the instance will still be used for shrinking).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: ID list of subnet, and for VPC it is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Node pool tag specifications, will passthroughs to the scaling instances.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolTaintArgs']]] taints: Taints of kubernetes node pool created nodes.
        :param pulumi.Input[str] termination_policies: Policy of scaling group termination. Available values: `["OLDEST_INSTANCE"]`, `["NEWEST_INSTANCE"]`.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: List of auto scaling group available zones, for Basic network it is required.
        """
        pulumi.set(__self__, "auto_scaling_config", auto_scaling_config)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if default_cooldown is not None:
            pulumi.set(__self__, "default_cooldown", default_cooldown)
        if delete_keep_instance is not None:
            pulumi.set(__self__, "delete_keep_instance", delete_keep_instance)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if desired_capacity is not None:
            pulumi.set(__self__, "desired_capacity", desired_capacity)
        if enable_auto_scale is not None:
            pulumi.set(__self__, "enable_auto_scale", enable_auto_scale)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if multi_zone_subnet_policy is not None:
            pulumi.set(__self__, "multi_zone_subnet_policy", multi_zone_subnet_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_config is not None:
            pulumi.set(__self__, "node_config", node_config)
        if node_os is not None:
            pulumi.set(__self__, "node_os", node_os)
        if node_os_type is not None:
            pulumi.set(__self__, "node_os_type", node_os_type)
        if retry_policy is not None:
            pulumi.set(__self__, "retry_policy", retry_policy)
        if scaling_group_name is not None:
            pulumi.set(__self__, "scaling_group_name", scaling_group_name)
        if scaling_group_project_id is not None:
            pulumi.set(__self__, "scaling_group_project_id", scaling_group_project_id)
        if scaling_mode is not None:
            pulumi.set(__self__, "scaling_mode", scaling_mode)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if termination_policies is not None:
            pulumi.set(__self__, "termination_policies", termination_policies)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="autoScalingConfig")
    def auto_scaling_config(self) -> pulumi.Input['NodePoolAutoScalingConfigArgs']:
        """
        Auto scaling config parameters.
        """
        return pulumi.get(self, "auto_scaling_config")

    @auto_scaling_config.setter
    def auto_scaling_config(self, value: pulumi.Input['NodePoolAutoScalingConfigArgs']):
        pulumi.set(self, "auto_scaling_config", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Input[int]:
        """
        Maximum number of node.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Input[int]:
        """
        Minimum number of node.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        ID of VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAnnotationArgs']]]]:
        """
        Node Annotation List.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAnnotationArgs']]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="defaultCooldown")
    def default_cooldown(self) -> Optional[pulumi.Input[int]]:
        """
        Seconds of scaling group cool down. Default value is `300`.
        """
        return pulumi.get(self, "default_cooldown")

    @default_cooldown.setter
    def default_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_cooldown", value)

    @property
    @pulumi.getter(name="deleteKeepInstance")
    def delete_keep_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate to keep the CVM instance when delete the node pool. Default is `true`.
        """
        return pulumi.get(self, "delete_keep_instance")

    @delete_keep_instance.setter
    def delete_keep_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_keep_instance", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the node pool deletion protection is enabled.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Desired capacity of the node. If `enable_auto_scale` is set `true`, this will be a computed parameter.
        """
        return pulumi.get(self, "desired_capacity")

    @desired_capacity.setter
    def desired_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_capacity", value)

    @property
    @pulumi.getter(name="enableAutoScale")
    def enable_auto_scale(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to enable auto scaling or not.
        """
        return pulumi.get(self, "enable_auto_scale")

    @enable_auto_scale.setter
    def enable_auto_scale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto_scale", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels of kubernetes node pool created nodes. The label key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="multiZoneSubnetPolicy")
    def multi_zone_subnet_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Multi-availability zone/subnet policy. Valid values: PRIORITY and EQUALITY. Default value: PRIORITY.
        """
        return pulumi.get(self, "multi_zone_subnet_policy")

    @multi_zone_subnet_policy.setter
    def multi_zone_subnet_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_zone_subnet_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the node pool. The name does not exceed 25 characters, and only supports Chinese, English, numbers, underscores, separators (`-`) and decimal points.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> Optional[pulumi.Input['NodePoolNodeConfigArgs']]:
        """
        Node config.
        """
        return pulumi.get(self, "node_config")

    @node_config.setter
    def node_config(self, value: Optional[pulumi.Input['NodePoolNodeConfigArgs']]):
        pulumi.set(self, "node_config", value)

    @property
    @pulumi.getter(name="nodeOs")
    def node_os(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system of the cluster. Please refer to [TencentCloud Documentation](https://www.tencentcloud.com/document/product/457/46750?lang=en&pg=#list-of-public-images-supported-by-tke) for available values. Default is 'tlinux2.4x86_64'. This parameter will only affect new nodes, not including the existing nodes.
        """
        return pulumi.get(self, "node_os")

    @node_os.setter
    def node_os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_os", value)

    @property
    @pulumi.getter(name="nodeOsType")
    def node_os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The image version of the node. Valida values are `DOCKER_CUSTOMIZE` and `GENERAL`. Default is `GENERAL`. This parameter will only affect new nodes, not including the existing nodes.
        """
        return pulumi.get(self, "node_os_type")

    @node_os_type.setter
    def node_os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_os_type", value)

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        """
        return pulumi.get(self, "retry_policy")

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retry_policy", value)

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of relative scaling group.
        """
        return pulumi.get(self, "scaling_group_name")

    @scaling_group_name.setter
    def scaling_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_group_name", value)

    @property
    @pulumi.getter(name="scalingGroupProjectId")
    def scaling_group_project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID the scaling group belongs to.
        """
        return pulumi.get(self, "scaling_group_project_id")

    @scaling_group_project_id.setter
    def scaling_group_project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scaling_group_project_id", value)

    @property
    @pulumi.getter(name="scalingMode")
    def scaling_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Auto scaling mode. Valid values are `CLASSIC_SCALING`(scaling by create/destroy instances), `WAKE_UP_STOPPED_SCALING`(Boot priority for expansion. When expanding the capacity, the shutdown operation is given priority to the shutdown of the instance. If the number of instances is still lower than the expected number of instances after the startup, the instance will be created, and the method of destroying the instance will still be used for shrinking).
        """
        return pulumi.get(self, "scaling_mode")

    @scaling_mode.setter
    def scaling_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_mode", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of subnet, and for VPC it is required.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Node pool tag specifications, will passthroughs to the scaling instances.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolTaintArgs']]]]:
        """
        Taints of kubernetes node pool created nodes.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> Optional[pulumi.Input[str]]:
        """
        Policy of scaling group termination. Available values: `["OLDEST_INSTANCE"]`, `["NEWEST_INSTANCE"]`.
        """
        return pulumi.get(self, "termination_policies")

    @termination_policies.setter
    def termination_policies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_policies", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of auto scaling group available zones, for Basic network it is required.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _NodePoolState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAnnotationArgs']]]] = None,
                 auto_scaling_config: Optional[pulumi.Input['NodePoolAutoScalingConfigArgs']] = None,
                 auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
                 autoscaling_added_total: Optional[pulumi.Input[int]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 default_cooldown: Optional[pulumi.Input[int]] = None,
                 delete_keep_instance: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 enable_auto_scale: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 launch_config_id: Optional[pulumi.Input[str]] = None,
                 manually_added_total: Optional[pulumi.Input[int]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 multi_zone_subnet_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input['NodePoolNodeConfigArgs']] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 node_os: Optional[pulumi.Input[str]] = None,
                 node_os_type: Optional[pulumi.Input[str]] = None,
                 retry_policy: Optional[pulumi.Input[str]] = None,
                 scaling_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_group_project_id: Optional[pulumi.Input[int]] = None,
                 scaling_mode: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolTaintArgs']]]] = None,
                 termination_policies: Optional[pulumi.Input[str]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering NodePool resources.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolAnnotationArgs']]] annotations: Node Annotation List.
        :param pulumi.Input['NodePoolAutoScalingConfigArgs'] auto_scaling_config: Auto scaling config parameters.
        :param pulumi.Input[str] auto_scaling_group_id: The auto scaling group ID.
        :param pulumi.Input[int] autoscaling_added_total: The total of autoscaling added node.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[int] default_cooldown: Seconds of scaling group cool down. Default value is `300`.
        :param pulumi.Input[bool] delete_keep_instance: Indicate to keep the CVM instance when delete the node pool. Default is `true`.
        :param pulumi.Input[bool] deletion_protection: Indicates whether the node pool deletion protection is enabled.
        :param pulumi.Input[int] desired_capacity: Desired capacity of the node. If `enable_auto_scale` is set `true`, this will be a computed parameter.
        :param pulumi.Input[bool] enable_auto_scale: Indicate whether to enable auto scaling or not.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes node pool created nodes. The label key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        :param pulumi.Input[str] launch_config_id: The launch config ID.
        :param pulumi.Input[int] manually_added_total: The total of manually added node.
        :param pulumi.Input[int] max_size: Maximum number of node.
        :param pulumi.Input[int] min_size: Minimum number of node.
        :param pulumi.Input[str] multi_zone_subnet_policy: Multi-availability zone/subnet policy. Valid values: PRIORITY and EQUALITY. Default value: PRIORITY.
        :param pulumi.Input[str] name: Name of the node pool. The name does not exceed 25 characters, and only supports Chinese, English, numbers, underscores, separators (`-`) and decimal points.
        :param pulumi.Input['NodePoolNodeConfigArgs'] node_config: Node config.
        :param pulumi.Input[int] node_count: The total node count.
        :param pulumi.Input[str] node_os: Operating system of the cluster. Please refer to [TencentCloud Documentation](https://www.tencentcloud.com/document/product/457/46750?lang=en&pg=#list-of-public-images-supported-by-tke) for available values. Default is 'tlinux2.4x86_64'. This parameter will only affect new nodes, not including the existing nodes.
        :param pulumi.Input[str] node_os_type: The image version of the node. Valida values are `DOCKER_CUSTOMIZE` and `GENERAL`. Default is `GENERAL`. This parameter will only affect new nodes, not including the existing nodes.
        :param pulumi.Input[str] retry_policy: Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        :param pulumi.Input[str] scaling_group_name: Name of relative scaling group.
        :param pulumi.Input[int] scaling_group_project_id: Project ID the scaling group belongs to.
        :param pulumi.Input[str] scaling_mode: Auto scaling mode. Valid values are `CLASSIC_SCALING`(scaling by create/destroy instances), `WAKE_UP_STOPPED_SCALING`(Boot priority for expansion. When expanding the capacity, the shutdown operation is given priority to the shutdown of the instance. If the number of instances is still lower than the expected number of instances after the startup, the instance will be created, and the method of destroying the instance will still be used for shrinking).
        :param pulumi.Input[str] status: Status of the node pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: ID list of subnet, and for VPC it is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Node pool tag specifications, will passthroughs to the scaling instances.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolTaintArgs']]] taints: Taints of kubernetes node pool created nodes.
        :param pulumi.Input[str] termination_policies: Policy of scaling group termination. Available values: `["OLDEST_INSTANCE"]`, `["NEWEST_INSTANCE"]`.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        :param pulumi.Input[str] vpc_id: ID of VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: List of auto scaling group available zones, for Basic network it is required.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if auto_scaling_config is not None:
            pulumi.set(__self__, "auto_scaling_config", auto_scaling_config)
        if auto_scaling_group_id is not None:
            pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        if autoscaling_added_total is not None:
            pulumi.set(__self__, "autoscaling_added_total", autoscaling_added_total)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if default_cooldown is not None:
            pulumi.set(__self__, "default_cooldown", default_cooldown)
        if delete_keep_instance is not None:
            pulumi.set(__self__, "delete_keep_instance", delete_keep_instance)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if desired_capacity is not None:
            pulumi.set(__self__, "desired_capacity", desired_capacity)
        if enable_auto_scale is not None:
            pulumi.set(__self__, "enable_auto_scale", enable_auto_scale)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if launch_config_id is not None:
            pulumi.set(__self__, "launch_config_id", launch_config_id)
        if manually_added_total is not None:
            pulumi.set(__self__, "manually_added_total", manually_added_total)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if multi_zone_subnet_policy is not None:
            pulumi.set(__self__, "multi_zone_subnet_policy", multi_zone_subnet_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_config is not None:
            pulumi.set(__self__, "node_config", node_config)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if node_os is not None:
            pulumi.set(__self__, "node_os", node_os)
        if node_os_type is not None:
            pulumi.set(__self__, "node_os_type", node_os_type)
        if retry_policy is not None:
            pulumi.set(__self__, "retry_policy", retry_policy)
        if scaling_group_name is not None:
            pulumi.set(__self__, "scaling_group_name", scaling_group_name)
        if scaling_group_project_id is not None:
            pulumi.set(__self__, "scaling_group_project_id", scaling_group_project_id)
        if scaling_mode is not None:
            pulumi.set(__self__, "scaling_mode", scaling_mode)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if termination_policies is not None:
            pulumi.set(__self__, "termination_policies", termination_policies)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAnnotationArgs']]]]:
        """
        Node Annotation List.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolAnnotationArgs']]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="autoScalingConfig")
    def auto_scaling_config(self) -> Optional[pulumi.Input['NodePoolAutoScalingConfigArgs']]:
        """
        Auto scaling config parameters.
        """
        return pulumi.get(self, "auto_scaling_config")

    @auto_scaling_config.setter
    def auto_scaling_config(self, value: Optional[pulumi.Input['NodePoolAutoScalingConfigArgs']]):
        pulumi.set(self, "auto_scaling_config", value)

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The auto scaling group ID.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @auto_scaling_group_id.setter
    def auto_scaling_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_scaling_group_id", value)

    @property
    @pulumi.getter(name="autoscalingAddedTotal")
    def autoscaling_added_total(self) -> Optional[pulumi.Input[int]]:
        """
        The total of autoscaling added node.
        """
        return pulumi.get(self, "autoscaling_added_total")

    @autoscaling_added_total.setter
    def autoscaling_added_total(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "autoscaling_added_total", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="defaultCooldown")
    def default_cooldown(self) -> Optional[pulumi.Input[int]]:
        """
        Seconds of scaling group cool down. Default value is `300`.
        """
        return pulumi.get(self, "default_cooldown")

    @default_cooldown.setter
    def default_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_cooldown", value)

    @property
    @pulumi.getter(name="deleteKeepInstance")
    def delete_keep_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate to keep the CVM instance when delete the node pool. Default is `true`.
        """
        return pulumi.get(self, "delete_keep_instance")

    @delete_keep_instance.setter
    def delete_keep_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_keep_instance", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the node pool deletion protection is enabled.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Desired capacity of the node. If `enable_auto_scale` is set `true`, this will be a computed parameter.
        """
        return pulumi.get(self, "desired_capacity")

    @desired_capacity.setter
    def desired_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_capacity", value)

    @property
    @pulumi.getter(name="enableAutoScale")
    def enable_auto_scale(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to enable auto scaling or not.
        """
        return pulumi.get(self, "enable_auto_scale")

    @enable_auto_scale.setter
    def enable_auto_scale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto_scale", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels of kubernetes node pool created nodes. The label key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="launchConfigId")
    def launch_config_id(self) -> Optional[pulumi.Input[str]]:
        """
        The launch config ID.
        """
        return pulumi.get(self, "launch_config_id")

    @launch_config_id.setter
    def launch_config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "launch_config_id", value)

    @property
    @pulumi.getter(name="manuallyAddedTotal")
    def manually_added_total(self) -> Optional[pulumi.Input[int]]:
        """
        The total of manually added node.
        """
        return pulumi.get(self, "manually_added_total")

    @manually_added_total.setter
    def manually_added_total(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "manually_added_total", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of node.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of node.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="multiZoneSubnetPolicy")
    def multi_zone_subnet_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Multi-availability zone/subnet policy. Valid values: PRIORITY and EQUALITY. Default value: PRIORITY.
        """
        return pulumi.get(self, "multi_zone_subnet_policy")

    @multi_zone_subnet_policy.setter
    def multi_zone_subnet_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_zone_subnet_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the node pool. The name does not exceed 25 characters, and only supports Chinese, English, numbers, underscores, separators (`-`) and decimal points.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> Optional[pulumi.Input['NodePoolNodeConfigArgs']]:
        """
        Node config.
        """
        return pulumi.get(self, "node_config")

    @node_config.setter
    def node_config(self, value: Optional[pulumi.Input['NodePoolNodeConfigArgs']]):
        pulumi.set(self, "node_config", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The total node count.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="nodeOs")
    def node_os(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system of the cluster. Please refer to [TencentCloud Documentation](https://www.tencentcloud.com/document/product/457/46750?lang=en&pg=#list-of-public-images-supported-by-tke) for available values. Default is 'tlinux2.4x86_64'. This parameter will only affect new nodes, not including the existing nodes.
        """
        return pulumi.get(self, "node_os")

    @node_os.setter
    def node_os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_os", value)

    @property
    @pulumi.getter(name="nodeOsType")
    def node_os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The image version of the node. Valida values are `DOCKER_CUSTOMIZE` and `GENERAL`. Default is `GENERAL`. This parameter will only affect new nodes, not including the existing nodes.
        """
        return pulumi.get(self, "node_os_type")

    @node_os_type.setter
    def node_os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_os_type", value)

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        """
        return pulumi.get(self, "retry_policy")

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retry_policy", value)

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of relative scaling group.
        """
        return pulumi.get(self, "scaling_group_name")

    @scaling_group_name.setter
    def scaling_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_group_name", value)

    @property
    @pulumi.getter(name="scalingGroupProjectId")
    def scaling_group_project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID the scaling group belongs to.
        """
        return pulumi.get(self, "scaling_group_project_id")

    @scaling_group_project_id.setter
    def scaling_group_project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scaling_group_project_id", value)

    @property
    @pulumi.getter(name="scalingMode")
    def scaling_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Auto scaling mode. Valid values are `CLASSIC_SCALING`(scaling by create/destroy instances), `WAKE_UP_STOPPED_SCALING`(Boot priority for expansion. When expanding the capacity, the shutdown operation is given priority to the shutdown of the instance. If the number of instances is still lower than the expected number of instances after the startup, the instance will be created, and the method of destroying the instance will still be used for shrinking).
        """
        return pulumi.get(self, "scaling_mode")

    @scaling_mode.setter
    def scaling_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_mode", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the node pool.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of subnet, and for VPC it is required.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Node pool tag specifications, will passthroughs to the scaling instances.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolTaintArgs']]]]:
        """
        Taints of kubernetes node pool created nodes.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> Optional[pulumi.Input[str]]:
        """
        Policy of scaling group termination. Available values: `["OLDEST_INSTANCE"]`, `["NEWEST_INSTANCE"]`.
        """
        return pulumi.get(self, "termination_policies")

    @termination_policies.setter
    def termination_policies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_policies", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of auto scaling group available zones, for Basic network it is required.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class NodePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolAnnotationArgs']]]]] = None,
                 auto_scaling_config: Optional[pulumi.Input[pulumi.InputType['NodePoolAutoScalingConfigArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 default_cooldown: Optional[pulumi.Input[int]] = None,
                 delete_keep_instance: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 enable_auto_scale: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 multi_zone_subnet_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeConfigArgs']]] = None,
                 node_os: Optional[pulumi.Input[str]] = None,
                 node_os_type: Optional[pulumi.Input[str]] = None,
                 retry_policy: Optional[pulumi.Input[str]] = None,
                 scaling_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_group_project_id: Optional[pulumi.Input[int]] = None,
                 scaling_mode: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolTaintArgs']]]]] = None,
                 termination_policies: Optional[pulumi.Input[str]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provide a resource to create an auto scaling group for kubernetes cluster.

        > **NOTE:**  We recommend the usage of one cluster with essential worker config + node pool to manage cluster and nodes. Its a more flexible way than manage worker config with tencentcloud_kubernetes_cluster, Kubernetes.ScaleWorker or exist node management of `tencentcloud_kubernetes_attachment`. Cause some unchangeable parameters of `worker_config` may cause the whole cluster resource `force new`.

        > **NOTE:**  In order to ensure the integrity of customer data, if you destroy nodepool instance, it will keep the cvm instance associate with nodepool by default. If you want to destroy together, please set `delete_keep_instance` to `false`.

        > **NOTE:**  In order to ensure the integrity of customer data, if the cvm instance was destroyed due to shrinking, it will keep the cbs associate with cvm by default. If you want to destroy together, please set `delete_with_instance` to `true`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        cluster_cidr = config.get("clusterCidr")
        if cluster_cidr is None:
            cluster_cidr = "172.31.0.0/16"
        vpc = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone)
        default_instance_type = config.get("defaultInstanceType")
        if default_instance_type is None:
            default_instance_type = "S1.SMALL1"
        #this is the cluster with empty worker config
        example_cluster = tencentcloud.kubernetes.Cluster("exampleCluster",
            vpc_id=vpc.instance_lists[0].vpc_id,
            cluster_cidr=cluster_cidr,
            cluster_max_pod_num=32,
            cluster_name="tf-tke-unit-test",
            cluster_desc="test cluster desc",
            cluster_max_service_num=32,
            cluster_version="1.18.4",
            cluster_deploy_type="MANAGED_CLUSTER")
        #this is one example of managing node using node pool
        example_node_pool = tencentcloud.kubernetes.NodePool("exampleNodePool",
            cluster_id=example_cluster.id,
            max_size=6,
            min_size=1,
            vpc_id=vpc.instance_lists[0].vpc_id,
            subnet_ids=[vpc.instance_lists[0].subnet_id],
            retry_policy="INCREMENTAL_INTERVALS",
            desired_capacity=4,
            enable_auto_scale=True,
            multi_zone_subnet_policy="EQUALITY",
            node_os="img-9qrfy1xt",
            auto_scaling_config=tencentcloud.kubernetes.NodePoolAutoScalingConfigArgs(
                instance_type=default_instance_type,
                system_disk_type="CLOUD_PREMIUM",
                system_disk_size=50,
                orderly_security_group_ids=["sg-24vswocp"],
                data_disks=[tencentcloud.kubernetes.NodePoolAutoScalingConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=10,
                public_ip_assigned=True,
                password="test123#",
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                host_name="12.123.0.0",
                host_name_style="ORIGINAL",
            ),
            labels={
                "test1": "test1",
                "test2": "test2",
            },
            taints=[
                tencentcloud.kubernetes.NodePoolTaintArgs(
                    key="test_taint",
                    value="taint_value",
                    effect="PreferNoSchedule",
                ),
                tencentcloud.kubernetes.NodePoolTaintArgs(
                    key="test_taint2",
                    value="taint_value2",
                    effect="PreferNoSchedule",
                ),
            ],
            node_config=tencentcloud.kubernetes.NodePoolNodeConfigArgs(
                docker_graph_path="/var/lib/docker",
                extra_args=["root-dir=/var/lib/kubelet"],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Using Spot CVM Instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.kubernetes.NodePool("example",
            cluster_id=tencentcloud_kubernetes_cluster["managed_cluster"]["id"],
            max_size=6,
            min_size=1,
            vpc_id=data["tencentcloud_vpc_subnets"]["vpc"]["instance_list"][0]["vpc_id"],
            subnet_ids=[data["tencentcloud_vpc_subnets"]["vpc"]["instance_list"][0]["subnet_id"]],
            retry_policy="INCREMENTAL_INTERVALS",
            desired_capacity=4,
            enable_auto_scale=True,
            multi_zone_subnet_policy="EQUALITY",
            auto_scaling_config=tencentcloud.kubernetes.NodePoolAutoScalingConfigArgs(
                instance_type=var["default_instance_type"],
                system_disk_type="CLOUD_PREMIUM",
                system_disk_size=50,
                orderly_security_group_ids=[
                    "sg-24vswocp",
                    "sg-3qntci2v",
                    "sg-7y1t2wax",
                ],
                instance_charge_type="SPOTPAID",
                spot_instance_type="one-time",
                spot_max_price="1000",
                data_disks=[tencentcloud.kubernetes.NodePoolAutoScalingConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=10,
                public_ip_assigned=True,
                password="test123#",
                enhanced_security_service=False,
                enhanced_monitor_service=False,
            ),
            labels={
                "test1": "test1",
                "test2": "test2",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tke node pool can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Kubernetes/nodePool:NodePool example cls-d2xdg3io#np-380ay1o8
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolAnnotationArgs']]]] annotations: Node Annotation List.
        :param pulumi.Input[pulumi.InputType['NodePoolAutoScalingConfigArgs']] auto_scaling_config: Auto scaling config parameters.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[int] default_cooldown: Seconds of scaling group cool down. Default value is `300`.
        :param pulumi.Input[bool] delete_keep_instance: Indicate to keep the CVM instance when delete the node pool. Default is `true`.
        :param pulumi.Input[bool] deletion_protection: Indicates whether the node pool deletion protection is enabled.
        :param pulumi.Input[int] desired_capacity: Desired capacity of the node. If `enable_auto_scale` is set `true`, this will be a computed parameter.
        :param pulumi.Input[bool] enable_auto_scale: Indicate whether to enable auto scaling or not.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes node pool created nodes. The label key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        :param pulumi.Input[int] max_size: Maximum number of node.
        :param pulumi.Input[int] min_size: Minimum number of node.
        :param pulumi.Input[str] multi_zone_subnet_policy: Multi-availability zone/subnet policy. Valid values: PRIORITY and EQUALITY. Default value: PRIORITY.
        :param pulumi.Input[str] name: Name of the node pool. The name does not exceed 25 characters, and only supports Chinese, English, numbers, underscores, separators (`-`) and decimal points.
        :param pulumi.Input[pulumi.InputType['NodePoolNodeConfigArgs']] node_config: Node config.
        :param pulumi.Input[str] node_os: Operating system of the cluster. Please refer to [TencentCloud Documentation](https://www.tencentcloud.com/document/product/457/46750?lang=en&pg=#list-of-public-images-supported-by-tke) for available values. Default is 'tlinux2.4x86_64'. This parameter will only affect new nodes, not including the existing nodes.
        :param pulumi.Input[str] node_os_type: The image version of the node. Valida values are `DOCKER_CUSTOMIZE` and `GENERAL`. Default is `GENERAL`. This parameter will only affect new nodes, not including the existing nodes.
        :param pulumi.Input[str] retry_policy: Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        :param pulumi.Input[str] scaling_group_name: Name of relative scaling group.
        :param pulumi.Input[int] scaling_group_project_id: Project ID the scaling group belongs to.
        :param pulumi.Input[str] scaling_mode: Auto scaling mode. Valid values are `CLASSIC_SCALING`(scaling by create/destroy instances), `WAKE_UP_STOPPED_SCALING`(Boot priority for expansion. When expanding the capacity, the shutdown operation is given priority to the shutdown of the instance. If the number of instances is still lower than the expected number of instances after the startup, the instance will be created, and the method of destroying the instance will still be used for shrinking).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: ID list of subnet, and for VPC it is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Node pool tag specifications, will passthroughs to the scaling instances.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolTaintArgs']]]] taints: Taints of kubernetes node pool created nodes.
        :param pulumi.Input[str] termination_policies: Policy of scaling group termination. Available values: `["OLDEST_INSTANCE"]`, `["NEWEST_INSTANCE"]`.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        :param pulumi.Input[str] vpc_id: ID of VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: List of auto scaling group available zones, for Basic network it is required.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NodePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create an auto scaling group for kubernetes cluster.

        > **NOTE:**  We recommend the usage of one cluster with essential worker config + node pool to manage cluster and nodes. Its a more flexible way than manage worker config with tencentcloud_kubernetes_cluster, Kubernetes.ScaleWorker or exist node management of `tencentcloud_kubernetes_attachment`. Cause some unchangeable parameters of `worker_config` may cause the whole cluster resource `force new`.

        > **NOTE:**  In order to ensure the integrity of customer data, if you destroy nodepool instance, it will keep the cvm instance associate with nodepool by default. If you want to destroy together, please set `delete_keep_instance` to `false`.

        > **NOTE:**  In order to ensure the integrity of customer data, if the cvm instance was destroyed due to shrinking, it will keep the cbs associate with cvm by default. If you want to destroy together, please set `delete_with_instance` to `true`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        cluster_cidr = config.get("clusterCidr")
        if cluster_cidr is None:
            cluster_cidr = "172.31.0.0/16"
        vpc = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone)
        default_instance_type = config.get("defaultInstanceType")
        if default_instance_type is None:
            default_instance_type = "S1.SMALL1"
        #this is the cluster with empty worker config
        example_cluster = tencentcloud.kubernetes.Cluster("exampleCluster",
            vpc_id=vpc.instance_lists[0].vpc_id,
            cluster_cidr=cluster_cidr,
            cluster_max_pod_num=32,
            cluster_name="tf-tke-unit-test",
            cluster_desc="test cluster desc",
            cluster_max_service_num=32,
            cluster_version="1.18.4",
            cluster_deploy_type="MANAGED_CLUSTER")
        #this is one example of managing node using node pool
        example_node_pool = tencentcloud.kubernetes.NodePool("exampleNodePool",
            cluster_id=example_cluster.id,
            max_size=6,
            min_size=1,
            vpc_id=vpc.instance_lists[0].vpc_id,
            subnet_ids=[vpc.instance_lists[0].subnet_id],
            retry_policy="INCREMENTAL_INTERVALS",
            desired_capacity=4,
            enable_auto_scale=True,
            multi_zone_subnet_policy="EQUALITY",
            node_os="img-9qrfy1xt",
            auto_scaling_config=tencentcloud.kubernetes.NodePoolAutoScalingConfigArgs(
                instance_type=default_instance_type,
                system_disk_type="CLOUD_PREMIUM",
                system_disk_size=50,
                orderly_security_group_ids=["sg-24vswocp"],
                data_disks=[tencentcloud.kubernetes.NodePoolAutoScalingConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=10,
                public_ip_assigned=True,
                password="test123#",
                enhanced_security_service=False,
                enhanced_monitor_service=False,
                host_name="12.123.0.0",
                host_name_style="ORIGINAL",
            ),
            labels={
                "test1": "test1",
                "test2": "test2",
            },
            taints=[
                tencentcloud.kubernetes.NodePoolTaintArgs(
                    key="test_taint",
                    value="taint_value",
                    effect="PreferNoSchedule",
                ),
                tencentcloud.kubernetes.NodePoolTaintArgs(
                    key="test_taint2",
                    value="taint_value2",
                    effect="PreferNoSchedule",
                ),
            ],
            node_config=tencentcloud.kubernetes.NodePoolNodeConfigArgs(
                docker_graph_path="/var/lib/docker",
                extra_args=["root-dir=/var/lib/kubelet"],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Using Spot CVM Instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.kubernetes.NodePool("example",
            cluster_id=tencentcloud_kubernetes_cluster["managed_cluster"]["id"],
            max_size=6,
            min_size=1,
            vpc_id=data["tencentcloud_vpc_subnets"]["vpc"]["instance_list"][0]["vpc_id"],
            subnet_ids=[data["tencentcloud_vpc_subnets"]["vpc"]["instance_list"][0]["subnet_id"]],
            retry_policy="INCREMENTAL_INTERVALS",
            desired_capacity=4,
            enable_auto_scale=True,
            multi_zone_subnet_policy="EQUALITY",
            auto_scaling_config=tencentcloud.kubernetes.NodePoolAutoScalingConfigArgs(
                instance_type=var["default_instance_type"],
                system_disk_type="CLOUD_PREMIUM",
                system_disk_size=50,
                orderly_security_group_ids=[
                    "sg-24vswocp",
                    "sg-3qntci2v",
                    "sg-7y1t2wax",
                ],
                instance_charge_type="SPOTPAID",
                spot_instance_type="one-time",
                spot_max_price="1000",
                data_disks=[tencentcloud.kubernetes.NodePoolAutoScalingConfigDataDiskArgs(
                    disk_type="CLOUD_PREMIUM",
                    disk_size=50,
                )],
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=10,
                public_ip_assigned=True,
                password="test123#",
                enhanced_security_service=False,
                enhanced_monitor_service=False,
            ),
            labels={
                "test1": "test1",
                "test2": "test2",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tke node pool can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Kubernetes/nodePool:NodePool example cls-d2xdg3io#np-380ay1o8
        ```

        :param str resource_name: The name of the resource.
        :param NodePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolAnnotationArgs']]]]] = None,
                 auto_scaling_config: Optional[pulumi.Input[pulumi.InputType['NodePoolAutoScalingConfigArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 default_cooldown: Optional[pulumi.Input[int]] = None,
                 delete_keep_instance: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 enable_auto_scale: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 multi_zone_subnet_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeConfigArgs']]] = None,
                 node_os: Optional[pulumi.Input[str]] = None,
                 node_os_type: Optional[pulumi.Input[str]] = None,
                 retry_policy: Optional[pulumi.Input[str]] = None,
                 scaling_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_group_project_id: Optional[pulumi.Input[int]] = None,
                 scaling_mode: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolTaintArgs']]]]] = None,
                 termination_policies: Optional[pulumi.Input[str]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodePoolArgs.__new__(NodePoolArgs)

            __props__.__dict__["annotations"] = annotations
            if auto_scaling_config is None and not opts.urn:
                raise TypeError("Missing required property 'auto_scaling_config'")
            __props__.__dict__["auto_scaling_config"] = auto_scaling_config
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["default_cooldown"] = default_cooldown
            __props__.__dict__["delete_keep_instance"] = delete_keep_instance
            __props__.__dict__["deletion_protection"] = deletion_protection
            __props__.__dict__["desired_capacity"] = desired_capacity
            __props__.__dict__["enable_auto_scale"] = enable_auto_scale
            __props__.__dict__["labels"] = labels
            if max_size is None and not opts.urn:
                raise TypeError("Missing required property 'max_size'")
            __props__.__dict__["max_size"] = max_size
            if min_size is None and not opts.urn:
                raise TypeError("Missing required property 'min_size'")
            __props__.__dict__["min_size"] = min_size
            __props__.__dict__["multi_zone_subnet_policy"] = multi_zone_subnet_policy
            __props__.__dict__["name"] = name
            __props__.__dict__["node_config"] = node_config
            __props__.__dict__["node_os"] = node_os
            __props__.__dict__["node_os_type"] = node_os_type
            __props__.__dict__["retry_policy"] = retry_policy
            __props__.__dict__["scaling_group_name"] = scaling_group_name
            __props__.__dict__["scaling_group_project_id"] = scaling_group_project_id
            __props__.__dict__["scaling_mode"] = scaling_mode
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["tags"] = tags
            __props__.__dict__["taints"] = taints
            __props__.__dict__["termination_policies"] = termination_policies
            __props__.__dict__["unschedulable"] = unschedulable
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["zones"] = zones
            __props__.__dict__["auto_scaling_group_id"] = None
            __props__.__dict__["autoscaling_added_total"] = None
            __props__.__dict__["launch_config_id"] = None
            __props__.__dict__["manually_added_total"] = None
            __props__.__dict__["node_count"] = None
            __props__.__dict__["status"] = None
        super(NodePool, __self__).__init__(
            'tencentcloud:Kubernetes/nodePool:NodePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolAnnotationArgs']]]]] = None,
            auto_scaling_config: Optional[pulumi.Input[pulumi.InputType['NodePoolAutoScalingConfigArgs']]] = None,
            auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
            autoscaling_added_total: Optional[pulumi.Input[int]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            default_cooldown: Optional[pulumi.Input[int]] = None,
            delete_keep_instance: Optional[pulumi.Input[bool]] = None,
            deletion_protection: Optional[pulumi.Input[bool]] = None,
            desired_capacity: Optional[pulumi.Input[int]] = None,
            enable_auto_scale: Optional[pulumi.Input[bool]] = None,
            labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            launch_config_id: Optional[pulumi.Input[str]] = None,
            manually_added_total: Optional[pulumi.Input[int]] = None,
            max_size: Optional[pulumi.Input[int]] = None,
            min_size: Optional[pulumi.Input[int]] = None,
            multi_zone_subnet_policy: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_config: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeConfigArgs']]] = None,
            node_count: Optional[pulumi.Input[int]] = None,
            node_os: Optional[pulumi.Input[str]] = None,
            node_os_type: Optional[pulumi.Input[str]] = None,
            retry_policy: Optional[pulumi.Input[str]] = None,
            scaling_group_name: Optional[pulumi.Input[str]] = None,
            scaling_group_project_id: Optional[pulumi.Input[int]] = None,
            scaling_mode: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            taints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolTaintArgs']]]]] = None,
            termination_policies: Optional[pulumi.Input[str]] = None,
            unschedulable: Optional[pulumi.Input[int]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'NodePool':
        """
        Get an existing NodePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolAnnotationArgs']]]] annotations: Node Annotation List.
        :param pulumi.Input[pulumi.InputType['NodePoolAutoScalingConfigArgs']] auto_scaling_config: Auto scaling config parameters.
        :param pulumi.Input[str] auto_scaling_group_id: The auto scaling group ID.
        :param pulumi.Input[int] autoscaling_added_total: The total of autoscaling added node.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[int] default_cooldown: Seconds of scaling group cool down. Default value is `300`.
        :param pulumi.Input[bool] delete_keep_instance: Indicate to keep the CVM instance when delete the node pool. Default is `true`.
        :param pulumi.Input[bool] deletion_protection: Indicates whether the node pool deletion protection is enabled.
        :param pulumi.Input[int] desired_capacity: Desired capacity of the node. If `enable_auto_scale` is set `true`, this will be a computed parameter.
        :param pulumi.Input[bool] enable_auto_scale: Indicate whether to enable auto scaling or not.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes node pool created nodes. The label key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        :param pulumi.Input[str] launch_config_id: The launch config ID.
        :param pulumi.Input[int] manually_added_total: The total of manually added node.
        :param pulumi.Input[int] max_size: Maximum number of node.
        :param pulumi.Input[int] min_size: Minimum number of node.
        :param pulumi.Input[str] multi_zone_subnet_policy: Multi-availability zone/subnet policy. Valid values: PRIORITY and EQUALITY. Default value: PRIORITY.
        :param pulumi.Input[str] name: Name of the node pool. The name does not exceed 25 characters, and only supports Chinese, English, numbers, underscores, separators (`-`) and decimal points.
        :param pulumi.Input[pulumi.InputType['NodePoolNodeConfigArgs']] node_config: Node config.
        :param pulumi.Input[int] node_count: The total node count.
        :param pulumi.Input[str] node_os: Operating system of the cluster. Please refer to [TencentCloud Documentation](https://www.tencentcloud.com/document/product/457/46750?lang=en&pg=#list-of-public-images-supported-by-tke) for available values. Default is 'tlinux2.4x86_64'. This parameter will only affect new nodes, not including the existing nodes.
        :param pulumi.Input[str] node_os_type: The image version of the node. Valida values are `DOCKER_CUSTOMIZE` and `GENERAL`. Default is `GENERAL`. This parameter will only affect new nodes, not including the existing nodes.
        :param pulumi.Input[str] retry_policy: Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        :param pulumi.Input[str] scaling_group_name: Name of relative scaling group.
        :param pulumi.Input[int] scaling_group_project_id: Project ID the scaling group belongs to.
        :param pulumi.Input[str] scaling_mode: Auto scaling mode. Valid values are `CLASSIC_SCALING`(scaling by create/destroy instances), `WAKE_UP_STOPPED_SCALING`(Boot priority for expansion. When expanding the capacity, the shutdown operation is given priority to the shutdown of the instance. If the number of instances is still lower than the expected number of instances after the startup, the instance will be created, and the method of destroying the instance will still be used for shrinking).
        :param pulumi.Input[str] status: Status of the node pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: ID list of subnet, and for VPC it is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Node pool tag specifications, will passthroughs to the scaling instances.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolTaintArgs']]]] taints: Taints of kubernetes node pool created nodes.
        :param pulumi.Input[str] termination_policies: Policy of scaling group termination. Available values: `["OLDEST_INSTANCE"]`, `["NEWEST_INSTANCE"]`.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        :param pulumi.Input[str] vpc_id: ID of VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: List of auto scaling group available zones, for Basic network it is required.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NodePoolState.__new__(_NodePoolState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["auto_scaling_config"] = auto_scaling_config
        __props__.__dict__["auto_scaling_group_id"] = auto_scaling_group_id
        __props__.__dict__["autoscaling_added_total"] = autoscaling_added_total
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["default_cooldown"] = default_cooldown
        __props__.__dict__["delete_keep_instance"] = delete_keep_instance
        __props__.__dict__["deletion_protection"] = deletion_protection
        __props__.__dict__["desired_capacity"] = desired_capacity
        __props__.__dict__["enable_auto_scale"] = enable_auto_scale
        __props__.__dict__["labels"] = labels
        __props__.__dict__["launch_config_id"] = launch_config_id
        __props__.__dict__["manually_added_total"] = manually_added_total
        __props__.__dict__["max_size"] = max_size
        __props__.__dict__["min_size"] = min_size
        __props__.__dict__["multi_zone_subnet_policy"] = multi_zone_subnet_policy
        __props__.__dict__["name"] = name
        __props__.__dict__["node_config"] = node_config
        __props__.__dict__["node_count"] = node_count
        __props__.__dict__["node_os"] = node_os
        __props__.__dict__["node_os_type"] = node_os_type
        __props__.__dict__["retry_policy"] = retry_policy
        __props__.__dict__["scaling_group_name"] = scaling_group_name
        __props__.__dict__["scaling_group_project_id"] = scaling_group_project_id
        __props__.__dict__["scaling_mode"] = scaling_mode
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_ids"] = subnet_ids
        __props__.__dict__["tags"] = tags
        __props__.__dict__["taints"] = taints
        __props__.__dict__["termination_policies"] = termination_policies
        __props__.__dict__["unschedulable"] = unschedulable
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zones"] = zones
        return NodePool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Sequence['outputs.NodePoolAnnotation']]:
        """
        Node Annotation List.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="autoScalingConfig")
    def auto_scaling_config(self) -> pulumi.Output['outputs.NodePoolAutoScalingConfig']:
        """
        Auto scaling config parameters.
        """
        return pulumi.get(self, "auto_scaling_config")

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> pulumi.Output[str]:
        """
        The auto scaling group ID.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter(name="autoscalingAddedTotal")
    def autoscaling_added_total(self) -> pulumi.Output[int]:
        """
        The total of autoscaling added node.
        """
        return pulumi.get(self, "autoscaling_added_total")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="defaultCooldown")
    def default_cooldown(self) -> pulumi.Output[int]:
        """
        Seconds of scaling group cool down. Default value is `300`.
        """
        return pulumi.get(self, "default_cooldown")

    @property
    @pulumi.getter(name="deleteKeepInstance")
    def delete_keep_instance(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate to keep the CVM instance when delete the node pool. Default is `true`.
        """
        return pulumi.get(self, "delete_keep_instance")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[bool]:
        """
        Indicates whether the node pool deletion protection is enabled.
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> pulumi.Output[int]:
        """
        Desired capacity of the node. If `enable_auto_scale` is set `true`, this will be a computed parameter.
        """
        return pulumi.get(self, "desired_capacity")

    @property
    @pulumi.getter(name="enableAutoScale")
    def enable_auto_scale(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate whether to enable auto scaling or not.
        """
        return pulumi.get(self, "enable_auto_scale")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Labels of kubernetes node pool created nodes. The label key name does not exceed 63 characters, only supports English, numbers,'/','-', and does not allow beginning with ('/').
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="launchConfigId")
    def launch_config_id(self) -> pulumi.Output[str]:
        """
        The launch config ID.
        """
        return pulumi.get(self, "launch_config_id")

    @property
    @pulumi.getter(name="manuallyAddedTotal")
    def manually_added_total(self) -> pulumi.Output[int]:
        """
        The total of manually added node.
        """
        return pulumi.get(self, "manually_added_total")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Output[int]:
        """
        Maximum number of node.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Output[int]:
        """
        Minimum number of node.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter(name="multiZoneSubnetPolicy")
    def multi_zone_subnet_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Multi-availability zone/subnet policy. Valid values: PRIORITY and EQUALITY. Default value: PRIORITY.
        """
        return pulumi.get(self, "multi_zone_subnet_policy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the node pool. The name does not exceed 25 characters, and only supports Chinese, English, numbers, underscores, separators (`-`) and decimal points.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> pulumi.Output[Optional['outputs.NodePoolNodeConfig']]:
        """
        Node config.
        """
        return pulumi.get(self, "node_config")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Output[int]:
        """
        The total node count.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="nodeOs")
    def node_os(self) -> pulumi.Output[Optional[str]]:
        """
        Operating system of the cluster. Please refer to [TencentCloud Documentation](https://www.tencentcloud.com/document/product/457/46750?lang=en&pg=#list-of-public-images-supported-by-tke) for available values. Default is 'tlinux2.4x86_64'. This parameter will only affect new nodes, not including the existing nodes.
        """
        return pulumi.get(self, "node_os")

    @property
    @pulumi.getter(name="nodeOsType")
    def node_os_type(self) -> pulumi.Output[Optional[str]]:
        """
        The image version of the node. Valida values are `DOCKER_CUSTOMIZE` and `GENERAL`. Default is `GENERAL`. This parameter will only affect new nodes, not including the existing nodes.
        """
        return pulumi.get(self, "node_os_type")

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Available values for retry policies include `IMMEDIATE_RETRY` and `INCREMENTAL_INTERVALS`.
        """
        return pulumi.get(self, "retry_policy")

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> pulumi.Output[str]:
        """
        Name of relative scaling group.
        """
        return pulumi.get(self, "scaling_group_name")

    @property
    @pulumi.getter(name="scalingGroupProjectId")
    def scaling_group_project_id(self) -> pulumi.Output[Optional[int]]:
        """
        Project ID the scaling group belongs to.
        """
        return pulumi.get(self, "scaling_group_project_id")

    @property
    @pulumi.getter(name="scalingMode")
    def scaling_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Auto scaling mode. Valid values are `CLASSIC_SCALING`(scaling by create/destroy instances), `WAKE_UP_STOPPED_SCALING`(Boot priority for expansion. When expanding the capacity, the shutdown operation is given priority to the shutdown of the instance. If the number of instances is still lower than the expected number of instances after the startup, the instance will be created, and the method of destroying the instance will still be used for shrinking).
        """
        return pulumi.get(self, "scaling_mode")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the node pool.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ID list of subnet, and for VPC it is required.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Node pool tag specifications, will passthroughs to the scaling instances.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def taints(self) -> pulumi.Output[Optional[Sequence['outputs.NodePoolTaint']]]:
        """
        Taints of kubernetes node pool created nodes.
        """
        return pulumi.get(self, "taints")

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> pulumi.Output[str]:
        """
        Policy of scaling group termination. Available values: `["OLDEST_INSTANCE"]`, `["NEWEST_INSTANCE"]`.
        """
        return pulumi.get(self, "termination_policies")

    @property
    @pulumi.getter
    def unschedulable(self) -> pulumi.Output[Optional[int]]:
        """
        Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of auto scaling group available zones, for Basic network it is required.
        """
        return pulumi.get(self, "zones")

