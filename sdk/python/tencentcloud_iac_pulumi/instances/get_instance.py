# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, availability_zone=None, dedicated_cluster_id=None, id=None, instance_id=None, instance_lists=None, instance_name=None, instance_set_ids=None, project_id=None, result_output_file=None, subnet_id=None, tags=None, vpc_id=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if dedicated_cluster_id and not isinstance(dedicated_cluster_id, str):
            raise TypeError("Expected argument 'dedicated_cluster_id' to be a str")
        pulumi.set(__self__, "dedicated_cluster_id", dedicated_cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_lists and not isinstance(instance_lists, list):
            raise TypeError("Expected argument 'instance_lists' to be a list")
        pulumi.set(__self__, "instance_lists", instance_lists)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if instance_set_ids and not isinstance(instance_set_ids, list):
            raise TypeError("Expected argument 'instance_set_ids' to be a list")
        pulumi.set(__self__, "instance_set_ids", instance_set_ids)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The available zone that the CVM instance locates at.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="dedicatedClusterId")
    def dedicated_cluster_id(self) -> Optional[str]:
        """
        Exclusive cluster id.
        """
        return pulumi.get(self, "dedicated_cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        ID of the instances.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceLists")
    def instance_lists(self) -> Sequence['outputs.GetInstanceInstanceListResult']:
        """
        An information list of cvm instance. Each element contains the following attributes:
        """
        return pulumi.get(self, "instance_lists")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        Name of the instances.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceSetIds")
    def instance_set_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_set_ids")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        The project CVM belongs to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        ID of a vpc subnetwork.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        """
        Tags of the instance.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            availability_zone=self.availability_zone,
            dedicated_cluster_id=self.dedicated_cluster_id,
            id=self.id,
            instance_id=self.instance_id,
            instance_lists=self.instance_lists,
            instance_name=self.instance_name,
            instance_set_ids=self.instance_set_ids,
            project_id=self.project_id,
            result_output_file=self.result_output_file,
            subnet_id=self.subnet_id,
            tags=self.tags,
            vpc_id=self.vpc_id)


def get_instance(availability_zone: Optional[str] = None,
                 dedicated_cluster_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 instance_set_ids: Optional[Sequence[str]] = None,
                 project_id: Optional[int] = None,
                 result_output_file: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 tags: Optional[Mapping[str, Any]] = None,
                 vpc_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Use this data source to query cvm instances.

    ## Example Usage

    ### Query all cvm instances

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Instances.get_instance()
    ```
    <!--End PulumiCodeChooser -->

    ### Query cvm instances by filters

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Instances.get_instance(availability_zone="ap-guangzhou-6",
        instance_id="ins-a81rnm8c",
        instance_name="tf_example",
        project_id=0,
        subnet_id="subnet-1to7t9au",
        tags={
            "tagKey": "tagValue",
        },
        vpc_id="vpc-l040hycv")
    ```
    <!--End PulumiCodeChooser -->

    ### Or by instance set id list

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Instances.get_instance(instance_set_ids=["ins-a81rnm8c"])
    ```
    <!--End PulumiCodeChooser -->


    :param str availability_zone: The available zone that the CVM instance locates at.
    :param str dedicated_cluster_id: Exclusive cluster id.
    :param str instance_id: ID of the instances to be queried.
    :param str instance_name: Name of the instances to be queried.
    :param Sequence[str] instance_set_ids: Instance set ids, max length is 100, conflict with other field.
    :param int project_id: The project CVM belongs to.
    :param str result_output_file: Used to save results.
    :param str subnet_id: ID of a vpc subnetwork.
    :param Mapping[str, Any] tags: Tags of the instance.
    :param str vpc_id: ID of the vpc to be queried.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['dedicatedClusterId'] = dedicated_cluster_id
    __args__['instanceId'] = instance_id
    __args__['instanceName'] = instance_name
    __args__['instanceSetIds'] = instance_set_ids
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    __args__['subnetId'] = subnet_id
    __args__['tags'] = tags
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Instances/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        dedicated_cluster_id=pulumi.get(__ret__, 'dedicated_cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_lists=pulumi.get(__ret__, 'instance_lists'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        instance_set_ids=pulumi.get(__ret__, 'instance_set_ids'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        tags=pulumi.get(__ret__, 'tags'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_instance)
def get_instance_output(availability_zone: Optional[pulumi.Input[Optional[str]]] = None,
                        dedicated_cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                        instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                        instance_name: Optional[pulumi.Input[Optional[str]]] = None,
                        instance_set_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                        project_id: Optional[pulumi.Input[Optional[int]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        subnet_id: Optional[pulumi.Input[Optional[str]]] = None,
                        tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                        vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Use this data source to query cvm instances.

    ## Example Usage

    ### Query all cvm instances

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Instances.get_instance()
    ```
    <!--End PulumiCodeChooser -->

    ### Query cvm instances by filters

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Instances.get_instance(availability_zone="ap-guangzhou-6",
        instance_id="ins-a81rnm8c",
        instance_name="tf_example",
        project_id=0,
        subnet_id="subnet-1to7t9au",
        tags={
            "tagKey": "tagValue",
        },
        vpc_id="vpc-l040hycv")
    ```
    <!--End PulumiCodeChooser -->

    ### Or by instance set id list

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Instances.get_instance(instance_set_ids=["ins-a81rnm8c"])
    ```
    <!--End PulumiCodeChooser -->


    :param str availability_zone: The available zone that the CVM instance locates at.
    :param str dedicated_cluster_id: Exclusive cluster id.
    :param str instance_id: ID of the instances to be queried.
    :param str instance_name: Name of the instances to be queried.
    :param Sequence[str] instance_set_ids: Instance set ids, max length is 100, conflict with other field.
    :param int project_id: The project CVM belongs to.
    :param str result_output_file: Used to save results.
    :param str subnet_id: ID of a vpc subnetwork.
    :param Mapping[str, Any] tags: Tags of the instance.
    :param str vpc_id: ID of the vpc to be queried.
    """
    ...
