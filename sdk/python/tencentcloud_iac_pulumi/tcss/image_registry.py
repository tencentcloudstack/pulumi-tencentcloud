# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImageRegistryArgs', 'ImageRegistry']

@pulumi.input_type
class ImageRegistryArgs:
    def __init__(__self__, *,
                 net_type: pulumi.Input[str],
                 password: pulumi.Input[str],
                 registry_type: pulumi.Input[str],
                 url: pulumi.Input[str],
                 username: pulumi.Input[str],
                 conn_detect_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ImageRegistryConnDetectConfigArgs']]]] = None,
                 insecure: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_scan: Optional[pulumi.Input[bool]] = None,
                 registry_region: Optional[pulumi.Input[str]] = None,
                 registry_version: Optional[pulumi.Input[str]] = None,
                 speed_limit: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ImageRegistry resource.
        :param pulumi.Input[str] net_type: Network type, which can be `public` (public network).
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] registry_type: Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
        :param pulumi.Input[str] url: Repository URL.
        :param pulumi.Input[str] username: Username.
        :param pulumi.Input[Sequence[pulumi.Input['ImageRegistryConnDetectConfigArgs']]] conn_detect_configs: Connectivity detection configuration.
        :param pulumi.Input[int] insecure: Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        :param pulumi.Input[str] name: Repository name.
        :param pulumi.Input[bool] need_scan: Whether to scan the latest image.
        :param pulumi.Input[str] registry_region: Region. Default value: `default`.
        :param pulumi.Input[str] registry_version: Repository version.
        :param pulumi.Input[int] speed_limit: Speed limit.
        """
        pulumi.set(__self__, "net_type", net_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "registry_type", registry_type)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)
        if conn_detect_configs is not None:
            pulumi.set(__self__, "conn_detect_configs", conn_detect_configs)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_scan is not None:
            pulumi.set(__self__, "need_scan", need_scan)
        if registry_region is not None:
            pulumi.set(__self__, "registry_region", registry_region)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if speed_limit is not None:
            pulumi.set(__self__, "speed_limit", speed_limit)

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> pulumi.Input[str]:
        """
        Network type, which can be `public` (public network).
        """
        return pulumi.get(self, "net_type")

    @net_type.setter
    def net_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "net_type", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="registryType")
    def registry_type(self) -> pulumi.Input[str]:
        """
        Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
        """
        return pulumi.get(self, "registry_type")

    @registry_type.setter
    def registry_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry_type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Repository URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="connDetectConfigs")
    def conn_detect_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageRegistryConnDetectConfigArgs']]]]:
        """
        Connectivity detection configuration.
        """
        return pulumi.get(self, "conn_detect_configs")

    @conn_detect_configs.setter
    def conn_detect_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageRegistryConnDetectConfigArgs']]]]):
        pulumi.set(self, "conn_detect_configs", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[int]]:
        """
        Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Repository name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="needScan")
    def need_scan(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to scan the latest image.
        """
        return pulumi.get(self, "need_scan")

    @need_scan.setter
    def need_scan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_scan", value)

    @property
    @pulumi.getter(name="registryRegion")
    def registry_region(self) -> Optional[pulumi.Input[str]]:
        """
        Region. Default value: `default`.
        """
        return pulumi.get(self, "registry_region")

    @registry_region.setter
    def registry_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_region", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[str]]:
        """
        Repository version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="speedLimit")
    def speed_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Speed limit.
        """
        return pulumi.get(self, "speed_limit")

    @speed_limit.setter
    def speed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "speed_limit", value)


@pulumi.input_type
class _ImageRegistryState:
    def __init__(__self__, *,
                 conn_detect_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ImageRegistryConnDetectConfigArgs']]]] = None,
                 insecure: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_scan: Optional[pulumi.Input[bool]] = None,
                 net_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 registry_region: Optional[pulumi.Input[str]] = None,
                 registry_type: Optional[pulumi.Input[str]] = None,
                 registry_version: Optional[pulumi.Input[str]] = None,
                 speed_limit: Optional[pulumi.Input[int]] = None,
                 sync_status: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ImageRegistry resources.
        :param pulumi.Input[Sequence[pulumi.Input['ImageRegistryConnDetectConfigArgs']]] conn_detect_configs: Connectivity detection configuration.
        :param pulumi.Input[int] insecure: Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        :param pulumi.Input[str] name: Repository name.
        :param pulumi.Input[bool] need_scan: Whether to scan the latest image.
        :param pulumi.Input[str] net_type: Network type, which can be `public` (public network).
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] registry_region: Region. Default value: `default`.
        :param pulumi.Input[str] registry_type: Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
        :param pulumi.Input[str] registry_version: Repository version.
        :param pulumi.Input[int] speed_limit: Speed limit.
        :param pulumi.Input[str] sync_status: Sync status.
        :param pulumi.Input[str] url: Repository URL.
        :param pulumi.Input[str] username: Username.
        """
        if conn_detect_configs is not None:
            pulumi.set(__self__, "conn_detect_configs", conn_detect_configs)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_scan is not None:
            pulumi.set(__self__, "need_scan", need_scan)
        if net_type is not None:
            pulumi.set(__self__, "net_type", net_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if registry_region is not None:
            pulumi.set(__self__, "registry_region", registry_region)
        if registry_type is not None:
            pulumi.set(__self__, "registry_type", registry_type)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if speed_limit is not None:
            pulumi.set(__self__, "speed_limit", speed_limit)
        if sync_status is not None:
            pulumi.set(__self__, "sync_status", sync_status)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="connDetectConfigs")
    def conn_detect_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageRegistryConnDetectConfigArgs']]]]:
        """
        Connectivity detection configuration.
        """
        return pulumi.get(self, "conn_detect_configs")

    @conn_detect_configs.setter
    def conn_detect_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageRegistryConnDetectConfigArgs']]]]):
        pulumi.set(self, "conn_detect_configs", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[int]]:
        """
        Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Repository name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="needScan")
    def need_scan(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to scan the latest image.
        """
        return pulumi.get(self, "need_scan")

    @need_scan.setter
    def need_scan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_scan", value)

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> Optional[pulumi.Input[str]]:
        """
        Network type, which can be `public` (public network).
        """
        return pulumi.get(self, "net_type")

    @net_type.setter
    def net_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="registryRegion")
    def registry_region(self) -> Optional[pulumi.Input[str]]:
        """
        Region. Default value: `default`.
        """
        return pulumi.get(self, "registry_region")

    @registry_region.setter
    def registry_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_region", value)

    @property
    @pulumi.getter(name="registryType")
    def registry_type(self) -> Optional[pulumi.Input[str]]:
        """
        Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
        """
        return pulumi.get(self, "registry_type")

    @registry_type.setter
    def registry_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_type", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[str]]:
        """
        Repository version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="speedLimit")
    def speed_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Speed limit.
        """
        return pulumi.get(self, "speed_limit")

    @speed_limit.setter
    def speed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "speed_limit", value)

    @property
    @pulumi.getter(name="syncStatus")
    def sync_status(self) -> Optional[pulumi.Input[str]]:
        """
        Sync status.
        """
        return pulumi.get(self, "sync_status")

    @sync_status.setter
    def sync_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_status", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Repository URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class ImageRegistry(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conn_detect_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageRegistryConnDetectConfigArgs']]]]] = None,
                 insecure: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_scan: Optional[pulumi.Input[bool]] = None,
                 net_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 registry_region: Optional[pulumi.Input[str]] = None,
                 registry_type: Optional[pulumi.Input[str]] = None,
                 registry_version: Optional[pulumi.Input[str]] = None,
                 speed_limit: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tcss image registry

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.tcss.ImageRegistry("example",
            conn_detect_configs=[tencentcloud.tcss.ImageRegistryConnDetectConfigArgs(
                quuid="backend",
                uuid="backend",
            )],
            need_scan=True,
            net_type="public",
            password="Password@demo",
            registry_region="default",
            registry_type="harbor",
            registry_version="V1",
            url="https://example.com",
            username="root")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageRegistryConnDetectConfigArgs']]]] conn_detect_configs: Connectivity detection configuration.
        :param pulumi.Input[int] insecure: Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        :param pulumi.Input[str] name: Repository name.
        :param pulumi.Input[bool] need_scan: Whether to scan the latest image.
        :param pulumi.Input[str] net_type: Network type, which can be `public` (public network).
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] registry_region: Region. Default value: `default`.
        :param pulumi.Input[str] registry_type: Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
        :param pulumi.Input[str] registry_version: Repository version.
        :param pulumi.Input[int] speed_limit: Speed limit.
        :param pulumi.Input[str] url: Repository URL.
        :param pulumi.Input[str] username: Username.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageRegistryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tcss image registry

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.tcss.ImageRegistry("example",
            conn_detect_configs=[tencentcloud.tcss.ImageRegistryConnDetectConfigArgs(
                quuid="backend",
                uuid="backend",
            )],
            need_scan=True,
            net_type="public",
            password="Password@demo",
            registry_region="default",
            registry_type="harbor",
            registry_version="V1",
            url="https://example.com",
            username="root")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ImageRegistryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageRegistryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conn_detect_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageRegistryConnDetectConfigArgs']]]]] = None,
                 insecure: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_scan: Optional[pulumi.Input[bool]] = None,
                 net_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 registry_region: Optional[pulumi.Input[str]] = None,
                 registry_type: Optional[pulumi.Input[str]] = None,
                 registry_version: Optional[pulumi.Input[str]] = None,
                 speed_limit: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageRegistryArgs.__new__(ImageRegistryArgs)

            __props__.__dict__["conn_detect_configs"] = conn_detect_configs
            __props__.__dict__["insecure"] = insecure
            __props__.__dict__["name"] = name
            __props__.__dict__["need_scan"] = need_scan
            if net_type is None and not opts.urn:
                raise TypeError("Missing required property 'net_type'")
            __props__.__dict__["net_type"] = net_type
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["registry_region"] = registry_region
            if registry_type is None and not opts.urn:
                raise TypeError("Missing required property 'registry_type'")
            __props__.__dict__["registry_type"] = registry_type
            __props__.__dict__["registry_version"] = registry_version
            __props__.__dict__["speed_limit"] = speed_limit
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["sync_status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ImageRegistry, __self__).__init__(
            'tencentcloud:Tcss/imageRegistry:ImageRegistry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conn_detect_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageRegistryConnDetectConfigArgs']]]]] = None,
            insecure: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            need_scan: Optional[pulumi.Input[bool]] = None,
            net_type: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            registry_region: Optional[pulumi.Input[str]] = None,
            registry_type: Optional[pulumi.Input[str]] = None,
            registry_version: Optional[pulumi.Input[str]] = None,
            speed_limit: Optional[pulumi.Input[int]] = None,
            sync_status: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'ImageRegistry':
        """
        Get an existing ImageRegistry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImageRegistryConnDetectConfigArgs']]]] conn_detect_configs: Connectivity detection configuration.
        :param pulumi.Input[int] insecure: Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        :param pulumi.Input[str] name: Repository name.
        :param pulumi.Input[bool] need_scan: Whether to scan the latest image.
        :param pulumi.Input[str] net_type: Network type, which can be `public` (public network).
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] registry_region: Region. Default value: `default`.
        :param pulumi.Input[str] registry_type: Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
        :param pulumi.Input[str] registry_version: Repository version.
        :param pulumi.Input[int] speed_limit: Speed limit.
        :param pulumi.Input[str] sync_status: Sync status.
        :param pulumi.Input[str] url: Repository URL.
        :param pulumi.Input[str] username: Username.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageRegistryState.__new__(_ImageRegistryState)

        __props__.__dict__["conn_detect_configs"] = conn_detect_configs
        __props__.__dict__["insecure"] = insecure
        __props__.__dict__["name"] = name
        __props__.__dict__["need_scan"] = need_scan
        __props__.__dict__["net_type"] = net_type
        __props__.__dict__["password"] = password
        __props__.__dict__["registry_region"] = registry_region
        __props__.__dict__["registry_type"] = registry_type
        __props__.__dict__["registry_version"] = registry_version
        __props__.__dict__["speed_limit"] = speed_limit
        __props__.__dict__["sync_status"] = sync_status
        __props__.__dict__["url"] = url
        __props__.__dict__["username"] = username
        return ImageRegistry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connDetectConfigs")
    def conn_detect_configs(self) -> pulumi.Output[Optional[Sequence['outputs.ImageRegistryConnDetectConfig']]]:
        """
        Connectivity detection configuration.
        """
        return pulumi.get(self, "conn_detect_configs")

    @property
    @pulumi.getter
    def insecure(self) -> pulumi.Output[Optional[int]]:
        """
        Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Repository name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="needScan")
    def need_scan(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to scan the latest image.
        """
        return pulumi.get(self, "need_scan")

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> pulumi.Output[str]:
        """
        Network type, which can be `public` (public network).
        """
        return pulumi.get(self, "net_type")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="registryRegion")
    def registry_region(self) -> pulumi.Output[Optional[str]]:
        """
        Region. Default value: `default`.
        """
        return pulumi.get(self, "registry_region")

    @property
    @pulumi.getter(name="registryType")
    def registry_type(self) -> pulumi.Output[str]:
        """
        Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
        """
        return pulumi.get(self, "registry_type")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> pulumi.Output[Optional[str]]:
        """
        Repository version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="speedLimit")
    def speed_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Speed limit.
        """
        return pulumi.get(self, "speed_limit")

    @property
    @pulumi.getter(name="syncStatus")
    def sync_status(self) -> pulumi.Output[str]:
        """
        Sync status.
        """
        return pulumi.get(self, "sync_status")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Repository URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username.
        """
        return pulumi.get(self, "username")

