# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SecurityIpGroupArgs', 'SecurityIpGroup']

@pulumi.input_type
class SecurityIpGroupArgs:
    def __init__(__self__, *,
                 ip_group: pulumi.Input['SecurityIpGroupIpGroupArgs'],
                 zone_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a SecurityIpGroup resource.
        :param pulumi.Input['SecurityIpGroupIpGroupArgs'] ip_group: IP group information, replace all when modifying.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        pulumi.set(__self__, "ip_group", ip_group)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="ipGroup")
    def ip_group(self) -> pulumi.Input['SecurityIpGroupIpGroupArgs']:
        """
        IP group information, replace all when modifying.
        """
        return pulumi.get(self, "ip_group")

    @ip_group.setter
    def ip_group(self, value: pulumi.Input['SecurityIpGroupIpGroupArgs']):
        pulumi.set(self, "ip_group", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class _SecurityIpGroupState:
    def __init__(__self__, *,
                 ip_group: Optional[pulumi.Input['SecurityIpGroupIpGroupArgs']] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SecurityIpGroup resources.
        :param pulumi.Input['SecurityIpGroupIpGroupArgs'] ip_group: IP group information, replace all when modifying.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        if ip_group is not None:
            pulumi.set(__self__, "ip_group", ip_group)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="ipGroup")
    def ip_group(self) -> Optional[pulumi.Input['SecurityIpGroupIpGroupArgs']]:
        """
        IP group information, replace all when modifying.
        """
        return pulumi.get(self, "ip_group")

    @ip_group.setter
    def ip_group(self, value: Optional[pulumi.Input['SecurityIpGroupIpGroupArgs']]):
        pulumi.set(self, "ip_group", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class SecurityIpGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ip_group: Optional[pulumi.Input[pulumi.InputType['SecurityIpGroupIpGroupArgs']]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SecurityIpGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SecurityIpGroupIpGroupArgs']] ip_group: IP group information, replace all when modifying.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityIpGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SecurityIpGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SecurityIpGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityIpGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ip_group: Optional[pulumi.Input[pulumi.InputType['SecurityIpGroupIpGroupArgs']]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityIpGroupArgs.__new__(SecurityIpGroupArgs)

            if ip_group is None and not opts.urn:
                raise TypeError("Missing required property 'ip_group'")
            __props__.__dict__["ip_group"] = ip_group
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
        super(SecurityIpGroup, __self__).__init__(
            'tencentcloud:Teo/securityIpGroup:SecurityIpGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ip_group: Optional[pulumi.Input[pulumi.InputType['SecurityIpGroupIpGroupArgs']]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'SecurityIpGroup':
        """
        Get an existing SecurityIpGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SecurityIpGroupIpGroupArgs']] ip_group: IP group information, replace all when modifying.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityIpGroupState.__new__(_SecurityIpGroupState)

        __props__.__dict__["ip_group"] = ip_group
        __props__.__dict__["zone_id"] = zone_id
        return SecurityIpGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ipGroup")
    def ip_group(self) -> pulumi.Output['outputs.SecurityIpGroupIpGroup']:
        """
        IP group information, replace all when modifying.
        """
        return pulumi.get(self, "ip_group")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

