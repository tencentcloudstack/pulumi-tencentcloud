# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FunctionRuntimeEnvironmentArgs', 'FunctionRuntimeEnvironment']

@pulumi.input_type
class FunctionRuntimeEnvironmentArgs:
    def __init__(__self__, *,
                 environment_variables: pulumi.Input[Sequence[pulumi.Input['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]],
                 function_id: pulumi.Input[str],
                 zone_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a FunctionRuntimeEnvironment resource.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]] environment_variables: The environment variable list.
        :param pulumi.Input[str] function_id: ID of the Function.
        :param pulumi.Input[str] zone_id: ID of the site.
        """
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "function_id", function_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Input[Sequence[pulumi.Input['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]]:
        """
        The environment variable list.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: pulumi.Input[Sequence[pulumi.Input['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Input[str]:
        """
        ID of the Function.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        ID of the site.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class _FunctionRuntimeEnvironmentState:
    def __init__(__self__, *,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FunctionRuntimeEnvironment resources.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]] environment_variables: The environment variable list.
        :param pulumi.Input[str] function_id: ID of the Function.
        :param pulumi.Input[str] zone_id: ID of the site.
        """
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]]]:
        """
        The environment variable list.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Function.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the site.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class FunctionRuntimeEnvironment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]]]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a teo teo_function_runtime_environment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        teo_function_runtime_environment = tencentcloud.teo.FunctionRuntimeEnvironment("teoFunctionRuntimeEnvironment",
            environment_variables=[
                tencentcloud.teo.FunctionRuntimeEnvironmentEnvironmentVariableArgs(
                    key="test-a",
                    type="string",
                    value="AAA",
                ),
                tencentcloud.teo.FunctionRuntimeEnvironmentEnvironmentVariableArgs(
                    key="test-b",
                    type="string",
                    value="BBB",
                ),
            ],
            function_id="ef-txx7fnua",
            zone_id="zone-2qtuhspy7cr6")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        teo teo_function_runtime_environment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Teo/functionRuntimeEnvironment:FunctionRuntimeEnvironment teo_function_runtime_environment zone_id#function_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]]] environment_variables: The environment variable list.
        :param pulumi.Input[str] function_id: ID of the Function.
        :param pulumi.Input[str] zone_id: ID of the site.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FunctionRuntimeEnvironmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a teo teo_function_runtime_environment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        teo_function_runtime_environment = tencentcloud.teo.FunctionRuntimeEnvironment("teoFunctionRuntimeEnvironment",
            environment_variables=[
                tencentcloud.teo.FunctionRuntimeEnvironmentEnvironmentVariableArgs(
                    key="test-a",
                    type="string",
                    value="AAA",
                ),
                tencentcloud.teo.FunctionRuntimeEnvironmentEnvironmentVariableArgs(
                    key="test-b",
                    type="string",
                    value="BBB",
                ),
            ],
            function_id="ef-txx7fnua",
            zone_id="zone-2qtuhspy7cr6")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        teo teo_function_runtime_environment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Teo/functionRuntimeEnvironment:FunctionRuntimeEnvironment teo_function_runtime_environment zone_id#function_id
        ```

        :param str resource_name: The name of the resource.
        :param FunctionRuntimeEnvironmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionRuntimeEnvironmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]]]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionRuntimeEnvironmentArgs.__new__(FunctionRuntimeEnvironmentArgs)

            if environment_variables is None and not opts.urn:
                raise TypeError("Missing required property 'environment_variables'")
            __props__.__dict__["environment_variables"] = environment_variables
            if function_id is None and not opts.urn:
                raise TypeError("Missing required property 'function_id'")
            __props__.__dict__["function_id"] = function_id
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
        super(FunctionRuntimeEnvironment, __self__).__init__(
            'tencentcloud:Teo/functionRuntimeEnvironment:FunctionRuntimeEnvironment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]]]] = None,
            function_id: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'FunctionRuntimeEnvironment':
        """
        Get an existing FunctionRuntimeEnvironment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionRuntimeEnvironmentEnvironmentVariableArgs']]]] environment_variables: The environment variable list.
        :param pulumi.Input[str] function_id: ID of the Function.
        :param pulumi.Input[str] zone_id: ID of the site.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FunctionRuntimeEnvironmentState.__new__(_FunctionRuntimeEnvironmentState)

        __props__.__dict__["environment_variables"] = environment_variables
        __props__.__dict__["function_id"] = function_id
        __props__.__dict__["zone_id"] = zone_id
        return FunctionRuntimeEnvironment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Output[Sequence['outputs.FunctionRuntimeEnvironmentEnvironmentVariable']]:
        """
        The environment variable list.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Output[str]:
        """
        ID of the Function.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        ID of the site.
        """
        return pulumi.get(self, "zone_id")

