# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccelerationDomainOriginInfo',
    'AccelerationDomainOriginInfoPrivateParameter',
    'ApplicationProxyIpv6',
    'CertificateConfigServerCertInfo',
    'FunctionRuleFunctionRuleCondition',
    'FunctionRuleFunctionRuleConditionRuleCondition',
    'FunctionRuntimeEnvironmentEnvironmentVariable',
    'L4ProxyDdosProtectionConfig',
    'OriginGroupRecord',
    'OriginGroupRecordPrivateParameter',
    'OriginGroupReference',
    'RealtimeLogDeliveryCls',
    'RealtimeLogDeliveryCustomEndpoint',
    'RealtimeLogDeliveryCustomEndpointHeader',
    'RealtimeLogDeliveryCustomField',
    'RealtimeLogDeliveryDeliveryCondition',
    'RealtimeLogDeliveryDeliveryConditionCondition',
    'RealtimeLogDeliveryLogFormat',
    'RealtimeLogDeliveryS3',
    'RuleEngineRule',
    'RuleEngineRuleAction',
    'RuleEngineRuleActionCodeAction',
    'RuleEngineRuleActionCodeActionParameter',
    'RuleEngineRuleActionNormalAction',
    'RuleEngineRuleActionNormalActionParameter',
    'RuleEngineRuleActionRewriteAction',
    'RuleEngineRuleActionRewriteActionParameter',
    'RuleEngineRuleOr',
    'RuleEngineRuleOrAnd',
    'RuleEngineRuleSubRule',
    'RuleEngineRuleSubRuleRule',
    'RuleEngineRuleSubRuleRuleAction',
    'RuleEngineRuleSubRuleRuleActionCodeAction',
    'RuleEngineRuleSubRuleRuleActionCodeActionParameter',
    'RuleEngineRuleSubRuleRuleActionNormalAction',
    'RuleEngineRuleSubRuleRuleActionNormalActionParameter',
    'RuleEngineRuleSubRuleRuleActionRewriteAction',
    'RuleEngineRuleSubRuleRuleActionRewriteActionParameter',
    'RuleEngineRuleSubRuleRuleOr',
    'RuleEngineRuleSubRuleRuleOrAnd',
    'SecurityIpGroupIpGroup',
    'ZoneOwnershipVerification',
    'ZoneOwnershipVerificationDnsVerification',
    'ZoneSettingCache',
    'ZoneSettingCacheCache',
    'ZoneSettingCacheFollowOrigin',
    'ZoneSettingCacheKey',
    'ZoneSettingCacheKeyQueryString',
    'ZoneSettingCacheNoCache',
    'ZoneSettingCachePrefresh',
    'ZoneSettingClientIpHeader',
    'ZoneSettingCompression',
    'ZoneSettingForceRedirect',
    'ZoneSettingHttps',
    'ZoneSettingHttpsHsts',
    'ZoneSettingIpv6',
    'ZoneSettingMaxAge',
    'ZoneSettingOfflineCache',
    'ZoneSettingOrigin',
    'ZoneSettingPostMaxSize',
    'ZoneSettingQuic',
    'ZoneSettingSmartRouting',
    'ZoneSettingUpstreamHttp2',
    'ZoneSettingWebSocket',
    'GetRuleEngineSettingsActionResult',
    'GetRuleEngineSettingsActionPropertyResult',
    'GetRuleEngineSettingsActionPropertyChoicePropertyResult',
    'GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult',
    'GetRuleEngineSettingsActionPropertyExtraParameterResult',
    'GetZoneAvailablePlansPlanInfoListResult',
]

@pulumi.output_type
class AccelerationDomainOriginInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originType":
            suggest = "origin_type"
        elif key == "backupOrigin":
            suggest = "backup_origin"
        elif key == "privateAccess":
            suggest = "private_access"
        elif key == "privateParameters":
            suggest = "private_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccelerationDomainOriginInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccelerationDomainOriginInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccelerationDomainOriginInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 origin: str,
                 origin_type: str,
                 backup_origin: Optional[str] = None,
                 private_access: Optional[str] = None,
                 private_parameters: Optional[Sequence['outputs.AccelerationDomainOriginInfoPrivateParameter']] = None):
        """
        :param str origin: The origin address. Enter the origin group ID if `OriginType=ORIGIN_GROUP`.
        :param str origin_type: The origin type. Values: `IP_DOMAIN`: IPv4/IPv6 address or domain name; `COS`: COS bucket address; `ORIGIN_GROUP`: Origin group; `AWS_S3`: AWS S3 bucket address; `SPACE`: EdgeOne Shield Space.
        :param str backup_origin: ID of the secondary origin group (valid when `OriginType=ORIGIN_GROUP`). If it is not specified, it indicates that secondary origins are not used.
        :param str private_access: Whether to authenticate access to the private object storage origin (valid when `OriginType=COS/AWS_S3`). Values: `on`: Enable private authentication; `off`: Disable private authentication. If this field is not specified, the default value `off` is used.
        :param Sequence['AccelerationDomainOriginInfoPrivateParameterArgs'] private_parameters: The private authentication parameters. This field is valid when `PrivateAccess=on`.
        """
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "origin_type", origin_type)
        if backup_origin is not None:
            pulumi.set(__self__, "backup_origin", backup_origin)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if private_parameters is not None:
            pulumi.set(__self__, "private_parameters", private_parameters)

    @property
    @pulumi.getter
    def origin(self) -> str:
        """
        The origin address. Enter the origin group ID if `OriginType=ORIGIN_GROUP`.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> str:
        """
        The origin type. Values: `IP_DOMAIN`: IPv4/IPv6 address or domain name; `COS`: COS bucket address; `ORIGIN_GROUP`: Origin group; `AWS_S3`: AWS S3 bucket address; `SPACE`: EdgeOne Shield Space.
        """
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter(name="backupOrigin")
    def backup_origin(self) -> Optional[str]:
        """
        ID of the secondary origin group (valid when `OriginType=ORIGIN_GROUP`). If it is not specified, it indicates that secondary origins are not used.
        """
        return pulumi.get(self, "backup_origin")

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[str]:
        """
        Whether to authenticate access to the private object storage origin (valid when `OriginType=COS/AWS_S3`). Values: `on`: Enable private authentication; `off`: Disable private authentication. If this field is not specified, the default value `off` is used.
        """
        return pulumi.get(self, "private_access")

    @property
    @pulumi.getter(name="privateParameters")
    def private_parameters(self) -> Optional[Sequence['outputs.AccelerationDomainOriginInfoPrivateParameter']]:
        """
        The private authentication parameters. This field is valid when `PrivateAccess=on`.
        """
        return pulumi.get(self, "private_parameters")


@pulumi.output_type
class AccelerationDomainOriginInfoPrivateParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The parameter name. Valid values: `AccessKeyId`: Access Key ID; `SecretAccessKey`: Secret Access Key.
        :param str value: The parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The parameter name. Valid values: `AccessKeyId`: Access Key ID; `SecretAccessKey`: Secret Access Key.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationProxyIpv6(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: - `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class CertificateConfigServerCertInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certId":
            suggest = "cert_id"
        elif key == "commonName":
            suggest = "common_name"
        elif key == "deployTime":
            suggest = "deploy_time"
        elif key == "expireTime":
            suggest = "expire_time"
        elif key == "signAlgo":
            suggest = "sign_algo"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CertificateConfigServerCertInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CertificateConfigServerCertInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CertificateConfigServerCertInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_id: str,
                 alias: Optional[str] = None,
                 common_name: Optional[str] = None,
                 deploy_time: Optional[str] = None,
                 expire_time: Optional[str] = None,
                 sign_algo: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str cert_id: ID of the server certificate.Note: This field may return null, indicating that no valid values can be obtained.
        :param str alias: Alias of the certificate.Note: This field may return null, indicating that no valid values can be obtained.
        :param str common_name: Domain name of the certificate. Note: This field may return `null`, indicating that no valid value can be obtained.
        :param str deploy_time: Time when the certificate is deployed. Note: This field may return null, indicating that no valid values can be obtained.
        :param str expire_time: Time when the certificate expires. Note: This field may return null, indicating that no valid values can be obtained.
        :param str sign_algo: Signature algorithm. Note: This field may return null, indicating that no valid values can be obtained.
        :param str type: Type of the certificate. Values: `default`: Default certificate; `upload`: Specified certificate; `managed`: Tencent Cloud-managed certificate. Note: This field may return `null`, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cert_id", cert_id)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if deploy_time is not None:
            pulumi.set(__self__, "deploy_time", deploy_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if sign_algo is not None:
            pulumi.set(__self__, "sign_algo", sign_algo)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> str:
        """
        ID of the server certificate.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "cert_id")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        """
        Alias of the certificate.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[str]:
        """
        Domain name of the certificate. Note: This field may return `null`, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="deployTime")
    def deploy_time(self) -> Optional[str]:
        """
        Time when the certificate is deployed. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "deploy_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[str]:
        """
        Time when the certificate expires. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="signAlgo")
    def sign_algo(self) -> Optional[str]:
        """
        Signature algorithm. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "sign_algo")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the certificate. Values: `default`: Default certificate; `upload`: Specified certificate; `managed`: Tencent Cloud-managed certificate. Note: This field may return `null`, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class FunctionRuleFunctionRuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleConditions":
            suggest = "rule_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuleFunctionRuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuleFunctionRuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuleFunctionRuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_conditions: Sequence['outputs.FunctionRuleFunctionRuleConditionRuleCondition']):
        """
        :param Sequence['FunctionRuleFunctionRuleConditionRuleConditionArgs'] rule_conditions: For edge function trigger rule conditions, if all items in the list are satisfied, then the condition is considered fulfilled.
        """
        pulumi.set(__self__, "rule_conditions", rule_conditions)

    @property
    @pulumi.getter(name="ruleConditions")
    def rule_conditions(self) -> Sequence['outputs.FunctionRuleFunctionRuleConditionRuleCondition']:
        """
        For edge function trigger rule conditions, if all items in the list are satisfied, then the condition is considered fulfilled.
        """
        return pulumi.get(self, "rule_conditions")


@pulumi.output_type
class FunctionRuleFunctionRuleConditionRuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreCase":
            suggest = "ignore_case"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionRuleFunctionRuleConditionRuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionRuleFunctionRuleConditionRuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionRuleFunctionRuleConditionRuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 target: str,
                 ignore_case: Optional[bool] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str operator: Operator. Valid values:
        :param str target: The match type. Values:
        :param bool ignore_case: Whether the parameter value is case insensitive. Default value: false.
        :param str name: The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        :param Sequence[str] values: The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
               - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
               - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
               - When `Target=all`, it indicates any site request.
               - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
               - When `Target=url`, enter the partial URL path under the current site, such as "/example".
               - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
               - When `Target=client_country`, enter the ISO-3166 country/region code.
               - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
               - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operator. Valid values:
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The match type. Values:
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[bool]:
        """
        Whether the parameter value is case insensitive. Default value: false.
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
        - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
        - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
        - When `Target=all`, it indicates any site request.
        - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
        - When `Target=url`, enter the partial URL path under the current site, such as "/example".
        - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
        - When `Target=client_country`, enter the ISO-3166 country/region code.
        - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
        - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class FunctionRuntimeEnvironmentEnvironmentVariable(dict):
    def __init__(__self__, *,
                 key: str,
                 type: str,
                 value: str):
        """
        :param str key: The name of the variable, which is limited to alphanumeric characters and the special characters `@`, `.`, `-`, and `_`. It can have a maximum of 64 bytes and should not be duplicated.
        :param str type: The type of the variable can have the following values:  - `string`: Represents a string type.  - `json`: Represents a JSON object type.
        :param str value: The value of the variable, which is limited to a maximum of 5000 bytes. The default value is empty.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The name of the variable, which is limited to alphanumeric characters and the special characters `@`, `.`, `-`, and `_`. It can have a maximum of 64 bytes and should not be duplicated.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the variable can have the following values:  - `string`: Represents a string type.  - `json`: Represents a JSON object type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the variable, which is limited to a maximum of 5000 bytes. The default value is empty.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class L4ProxyDdosProtectionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "levelMainland":
            suggest = "level_mainland"
        elif key == "levelOverseas":
            suggest = "level_overseas"
        elif key == "maxBandwidthMainland":
            suggest = "max_bandwidth_mainland"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in L4ProxyDdosProtectionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        L4ProxyDdosProtectionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        L4ProxyDdosProtectionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level_mainland: Optional[str] = None,
                 level_overseas: Optional[str] = None,
                 max_bandwidth_mainland: Optional[int] = None):
        """
        :param str level_mainland: Exclusive DDoS protection specifications in the Chinese mainland. For details, see [Dedicated DDoS Mitigation Fee (Pay-as-You-Go)] (https://intl.cloud.tencent.com/document/product/1552/94162?from_cn_redirect=1). `PLATFORM`: Default protection of the platform, i.e., Exclusive DDoS protection is not enabled; `BASE30_MAX300`: Exclusive DDoS protection enabled, providing a baseline protection bandwidth of 30 Gbps and an elastic protection bandwidth of up to 300 Gbps; `BASE60_MAX600`: Exclusive DDoS protection enabled, providing a baseline protection bandwidth of 60 Gbps and an elastic protection bandwidth of up to 600 Gbps. If no parameters are filled, the default value PLATFORM is used.
        :param str level_overseas: Exclusive DDoS protection specifications in the worldwide region (excluding the Chinese mainland). `PLATFORM`: Default protection of the platform, i.e., Exclusive DDoS protection is not enabled; `ANYCAST300`: Exclusive DDoS protection enabled, offering a total maximum protection bandwidth of 300 Gbps; `ANYCAST_ALLIN`: Exclusive DDoS protection enabled, utilizing all available protection resources for protection. When no parameters are filled, the default value PLATFORM is used.
        :param int max_bandwidth_mainland: Configuration of elastic protection bandwidth for exclusive DDoS protection in the Chinese mainland.Valid only when exclusive DDoS protection in the Chinese mainland is enabled (refer to the LevelMainland parameter configuration), and the value has the following limitations: When exclusive DDoS protection is enabled in the Chinese mainland and the 30 Gbps baseline protection bandwidth is used (the LevelMainland parameter value is BASE30_MAX300): the value range is 30 to 300 in Gbps; When exclusive DDoS protection is enabled in the Chinese mainland and the 60 Gbps baseline protection bandwidth is used (the LevelMainland parameter value is BASE60_MAX600): the value range is 60 to 600 in Gbps; When the default protection of the platform is used (the LevelMainland parameter value is PLATFORM): configuration is not supported, and the value of this parameter is invalid.
        """
        if level_mainland is not None:
            pulumi.set(__self__, "level_mainland", level_mainland)
        if level_overseas is not None:
            pulumi.set(__self__, "level_overseas", level_overseas)
        if max_bandwidth_mainland is not None:
            pulumi.set(__self__, "max_bandwidth_mainland", max_bandwidth_mainland)

    @property
    @pulumi.getter(name="levelMainland")
    def level_mainland(self) -> Optional[str]:
        """
        Exclusive DDoS protection specifications in the Chinese mainland. For details, see [Dedicated DDoS Mitigation Fee (Pay-as-You-Go)] (https://intl.cloud.tencent.com/document/product/1552/94162?from_cn_redirect=1). `PLATFORM`: Default protection of the platform, i.e., Exclusive DDoS protection is not enabled; `BASE30_MAX300`: Exclusive DDoS protection enabled, providing a baseline protection bandwidth of 30 Gbps and an elastic protection bandwidth of up to 300 Gbps; `BASE60_MAX600`: Exclusive DDoS protection enabled, providing a baseline protection bandwidth of 60 Gbps and an elastic protection bandwidth of up to 600 Gbps. If no parameters are filled, the default value PLATFORM is used.
        """
        return pulumi.get(self, "level_mainland")

    @property
    @pulumi.getter(name="levelOverseas")
    def level_overseas(self) -> Optional[str]:
        """
        Exclusive DDoS protection specifications in the worldwide region (excluding the Chinese mainland). `PLATFORM`: Default protection of the platform, i.e., Exclusive DDoS protection is not enabled; `ANYCAST300`: Exclusive DDoS protection enabled, offering a total maximum protection bandwidth of 300 Gbps; `ANYCAST_ALLIN`: Exclusive DDoS protection enabled, utilizing all available protection resources for protection. When no parameters are filled, the default value PLATFORM is used.
        """
        return pulumi.get(self, "level_overseas")

    @property
    @pulumi.getter(name="maxBandwidthMainland")
    def max_bandwidth_mainland(self) -> Optional[int]:
        """
        Configuration of elastic protection bandwidth for exclusive DDoS protection in the Chinese mainland.Valid only when exclusive DDoS protection in the Chinese mainland is enabled (refer to the LevelMainland parameter configuration), and the value has the following limitations: When exclusive DDoS protection is enabled in the Chinese mainland and the 30 Gbps baseline protection bandwidth is used (the LevelMainland parameter value is BASE30_MAX300): the value range is 30 to 300 in Gbps; When exclusive DDoS protection is enabled in the Chinese mainland and the 60 Gbps baseline protection bandwidth is used (the LevelMainland parameter value is BASE60_MAX600): the value range is 60 to 600 in Gbps; When the default protection of the platform is used (the LevelMainland parameter value is PLATFORM): configuration is not supported, and the value of this parameter is invalid.
        """
        return pulumi.get(self, "max_bandwidth_mainland")


@pulumi.output_type
class OriginGroupRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateParameters":
            suggest = "private_parameters"
        elif key == "recordId":
            suggest = "record_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OriginGroupRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OriginGroupRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OriginGroupRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 record: str,
                 private: Optional[bool] = None,
                 private_parameters: Optional[Sequence['outputs.OriginGroupRecordPrivateParameter']] = None,
                 record_id: Optional[str] = None,
                 type: Optional[str] = None,
                 weight: Optional[int] = None):
        """
        :param str record: Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
        :param bool private: Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
        :param Sequence['OriginGroupRecordPrivateParameterArgs'] private_parameters: Parameters for private authentication. Only valid when `Private` is `true`.
        :param str record_id: Origin record ID.
        :param str type: Origin site type, the values are:
        :param int weight: The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
        """
        pulumi.set(__self__, "record", record)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if private_parameters is not None:
            pulumi.set(__self__, "private_parameters", private_parameters)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def record(self) -> str:
        """
        Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
        """
        return pulumi.get(self, "record")

    @property
    @pulumi.getter
    def private(self) -> Optional[bool]:
        """
        Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
        """
        return pulumi.get(self, "private")

    @property
    @pulumi.getter(name="privateParameters")
    def private_parameters(self) -> Optional[Sequence['outputs.OriginGroupRecordPrivateParameter']]:
        """
        Parameters for private authentication. Only valid when `Private` is `true`.
        """
        return pulumi.get(self, "private_parameters")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[str]:
        """
        Origin record ID.
        """
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Origin site type, the values are:
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class OriginGroupRecordPrivateParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Private authentication parameter name, the values are:
        :param str value: Private authentication parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Private authentication parameter name, the values are:
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Private authentication parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class OriginGroupReference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "instanceType":
            suggest = "instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OriginGroupReference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OriginGroupReference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OriginGroupReference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 instance_type: Optional[str] = None):
        """
        :param str instance_id: The instance ID of the reference type.
        :param str instance_name: Instance name of the application type.
        :param str instance_type: Reference service type, the values are:
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        The instance ID of the reference type.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        Instance name of the application type.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        Reference service type, the values are:
        """
        return pulumi.get(self, "instance_type")


@pulumi.output_type
class RealtimeLogDeliveryCls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logSetId":
            suggest = "log_set_id"
        elif key == "logSetRegion":
            suggest = "log_set_region"
        elif key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RealtimeLogDeliveryCls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RealtimeLogDeliveryCls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RealtimeLogDeliveryCls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_set_id: str,
                 log_set_region: str,
                 topic_id: str):
        """
        :param str log_set_id: Tencent Cloud CLS log set ID.
        :param str log_set_region: The region where the Tencent Cloud CLS log set is located.
        :param str topic_id: Tencent Cloud CLS log topic ID.
        """
        pulumi.set(__self__, "log_set_id", log_set_id)
        pulumi.set(__self__, "log_set_region", log_set_region)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> str:
        """
        Tencent Cloud CLS log set ID.
        """
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter(name="logSetRegion")
    def log_set_region(self) -> str:
        """
        The region where the Tencent Cloud CLS log set is located.
        """
        return pulumi.get(self, "log_set_region")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        Tencent Cloud CLS log topic ID.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class RealtimeLogDeliveryCustomEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessId":
            suggest = "access_id"
        elif key == "accessKey":
            suggest = "access_key"
        elif key == "compressType":
            suggest = "compress_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RealtimeLogDeliveryCustomEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RealtimeLogDeliveryCustomEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RealtimeLogDeliveryCustomEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 access_id: Optional[str] = None,
                 access_key: Optional[str] = None,
                 compress_type: Optional[str] = None,
                 headers: Optional[Sequence['outputs.RealtimeLogDeliveryCustomEndpointHeader']] = None,
                 protocol: Optional[str] = None):
        """
        :param str url: The custom HTTP interface address for real-time log delivery. Currently, only HTTP/HTTPS protocols are supported.
        :param str access_id: Fill in a custom SecretId to generate an encrypted signature. This parameter is required if the source site requires authentication.
        :param str access_key: Fill in the custom SecretKey to generate the encrypted signature. This parameter is required if the source site requires authentication.
        :param str compress_type: Data compression type, the possible values are: `gzip`: use gzip compression. If it is not filled in, compression is not enabled.
        :param Sequence['RealtimeLogDeliveryCustomEndpointHeaderArgs'] headers: The custom request header carried when delivering logs. If the header name you fill in is the default header carried by EdgeOne log push, such as Content-Type, then the header value you fill in will overwrite the default value. The header value references a single variable ${batchSize} to obtain the number of logs included in each POST request.
        :param str protocol: When sending logs via POST request, the application layer protocol type used can be: `http`: HTTP protocol; `https`: HTTPS protocol. If not filled in, the protocol type will be parsed according to the filled in URL address.
        """
        pulumi.set(__self__, "url", url)
        if access_id is not None:
            pulumi.set(__self__, "access_id", access_id)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if compress_type is not None:
            pulumi.set(__self__, "compress_type", compress_type)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The custom HTTP interface address for real-time log delivery. Currently, only HTTP/HTTPS protocols are supported.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> Optional[str]:
        """
        Fill in a custom SecretId to generate an encrypted signature. This parameter is required if the source site requires authentication.
        """
        return pulumi.get(self, "access_id")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Fill in the custom SecretKey to generate the encrypted signature. This parameter is required if the source site requires authentication.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="compressType")
    def compress_type(self) -> Optional[str]:
        """
        Data compression type, the possible values are: `gzip`: use gzip compression. If it is not filled in, compression is not enabled.
        """
        return pulumi.get(self, "compress_type")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.RealtimeLogDeliveryCustomEndpointHeader']]:
        """
        The custom request header carried when delivering logs. If the header name you fill in is the default header carried by EdgeOne log push, such as Content-Type, then the header value you fill in will overwrite the default value. The header value references a single variable ${batchSize} to obtain the number of logs included in each POST request.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        When sending logs via POST request, the application layer protocol type used can be: `http`: HTTP protocol; `https`: HTTPS protocol. If not filled in, the protocol type will be parsed according to the filled in URL address.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class RealtimeLogDeliveryCustomEndpointHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: HTTP header name.
        :param str value: HTTP header value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        HTTP header name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        HTTP header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RealtimeLogDeliveryCustomField(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 enabled: Optional[bool] = None):
        """
        :param str name: Extract data from the specified location in the HTTP request and response. The values are: `ReqHeader`: extract the specified field value from the HTTP request header; `RspHeader`: extract the specified field value from the HTTP response header; `Cookie`: extract the specified field value from the Cookie.
        :param str value: The name of the parameter whose value needs to be extracted, for example: Accept-Language.
        :param bool enabled: Whether to deliver this field. If left blank, this field will not be delivered.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Extract data from the specified location in the HTTP request and response. The values are: `ReqHeader`: extract the specified field value from the HTTP request header; `RspHeader`: extract the specified field value from the HTTP response header; `Cookie`: extract the specified field value from the Cookie.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The name of the parameter whose value needs to be extracted, for example: Accept-Language.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether to deliver this field. If left blank, this field will not be delivered.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class RealtimeLogDeliveryDeliveryCondition(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.RealtimeLogDeliveryDeliveryConditionCondition']] = None):
        """
        :param Sequence['RealtimeLogDeliveryDeliveryConditionConditionArgs'] conditions: Log filtering conditions, the detailed filtering conditions are as follows: - `EdgeResponseStatusCode`: filter according to the status code returned by the EdgeOne node to the client. Supported operators: `equal`, `great`, `less`, `great_equal`, `less_equal`; Value range: any integer greater than or equal to 0; - `OriginResponseStatusCode`: filter according to the origin response status code. Supported operators: `equal`, `great`, `less`, `great_equal`, `less_equal`; Value range: any integer greater than or equal to -1; - `SecurityAction`: filter according to the final disposal action after the request hits the security rule. Supported operators: `equal`; Optional options are as follows: `-`: unknown/miss; `Monitor`: observe; `JSChallenge`: JavaScript challenge; `Deny`: intercept; `Allow`: allow; `BlockIP`: IP ban; `Redirect`: redirect; `ReturnCustomPage`: return to a custom page; `ManagedChallenge`: managed challenge; `Silence`: silent; `LongDelay`: respond after a long wait; `ShortDelay`: respond after a short wait; -`SecurityModule`: filter according to the name of the security module that finally handles the request. Supported operators: `equal`; Optional options: `-`: unknown/missed; `CustomRule`: Web Protection - Custom Rules; `RateLimitingCustomRule`: Web Protection - Rate Limiting Rules; `ManagedRule`: Web Protection - Managed Rules; `L7DDoS`: Web Protection - CC Attack Protection; `BotManagement`: Bot Management - Bot Basic Management; `BotClientReputation`: Bot Management - Client Profile Analysis; `BotBehaviorAnalysis`: Bot Management - Bot Intelligent Analysis; `BotCustomRule`: Bot Management - Custom Bot Rules; `BotActiveDetection`: Bot Management - Active Feature Recognition.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.RealtimeLogDeliveryDeliveryConditionCondition']]:
        """
        Log filtering conditions, the detailed filtering conditions are as follows: - `EdgeResponseStatusCode`: filter according to the status code returned by the EdgeOne node to the client. Supported operators: `equal`, `great`, `less`, `great_equal`, `less_equal`; Value range: any integer greater than or equal to 0; - `OriginResponseStatusCode`: filter according to the origin response status code. Supported operators: `equal`, `great`, `less`, `great_equal`, `less_equal`; Value range: any integer greater than or equal to -1; - `SecurityAction`: filter according to the final disposal action after the request hits the security rule. Supported operators: `equal`; Optional options are as follows: `-`: unknown/miss; `Monitor`: observe; `JSChallenge`: JavaScript challenge; `Deny`: intercept; `Allow`: allow; `BlockIP`: IP ban; `Redirect`: redirect; `ReturnCustomPage`: return to a custom page; `ManagedChallenge`: managed challenge; `Silence`: silent; `LongDelay`: respond after a long wait; `ShortDelay`: respond after a short wait; -`SecurityModule`: filter according to the name of the security module that finally handles the request. Supported operators: `equal`; Optional options: `-`: unknown/missed; `CustomRule`: Web Protection - Custom Rules; `RateLimitingCustomRule`: Web Protection - Rate Limiting Rules; `ManagedRule`: Web Protection - Managed Rules; `L7DDoS`: Web Protection - CC Attack Protection; `BotManagement`: Bot Management - Bot Basic Management; `BotClientReputation`: Bot Management - Client Profile Analysis; `BotBehaviorAnalysis`: Bot Management - Bot Intelligent Analysis; `BotCustomRule`: Bot Management - Custom Bot Rules; `BotActiveDetection`: Bot Management - Active Feature Recognition.
        """
        return pulumi.get(self, "conditions")


@pulumi.output_type
class RealtimeLogDeliveryDeliveryConditionCondition(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str key: The key of the filter condition.
        :param str operator: Query condition operator, operation types are: `equals`: equal; `notEquals`: not equal; `include`: include; `notInclude`: not include; `startWith`: start with value; `notStartWith`: not start with value; `endWith`: end with value; `notEndWith`: not end with value.
        :param Sequence[str] values: The value of the filter condition.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the filter condition.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Query condition operator, operation types are: `equals`: equal; `notEquals`: not equal; `include`: include; `notInclude`: not include; `startWith`: start with value; `notStartWith`: not start with value; `endWith`: end with value; `notEndWith`: not end with value.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The value of the filter condition.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RealtimeLogDeliveryLogFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"
        elif key == "batchPrefix":
            suggest = "batch_prefix"
        elif key == "batchSuffix":
            suggest = "batch_suffix"
        elif key == "fieldDelimiter":
            suggest = "field_delimiter"
        elif key == "recordDelimiter":
            suggest = "record_delimiter"
        elif key == "recordPrefix":
            suggest = "record_prefix"
        elif key == "recordSuffix":
            suggest = "record_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RealtimeLogDeliveryLogFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RealtimeLogDeliveryLogFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RealtimeLogDeliveryLogFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 batch_prefix: Optional[str] = None,
                 batch_suffix: Optional[str] = None,
                 field_delimiter: Optional[str] = None,
                 record_delimiter: Optional[str] = None,
                 record_prefix: Optional[str] = None,
                 record_suffix: Optional[str] = None):
        """
        :param str format_type: The default output format type for log delivery. The possible values are: `json`: Use the default log output format JSON Lines. The fields in a single log are presented as key-value pairs; `csv`: Use the default log output format csv. Only field values are presented in a single log, without field names.
        :param str batch_prefix: A string to be added before each log delivery batch. Each log delivery batch may contain multiple log records.
        :param str batch_suffix: A string to append after each log delivery batch.
        :param str field_delimiter: In a single log record, a string is inserted between fields as a separator. The possible values are: `	`: tab character; `,`: comma; `;`: semicolon.
        :param str record_delimiter: The string inserted between log records as a separator. The possible values are: `
               `: newline character; `	`: tab character; `,`: comma.
        :param str record_prefix: A string to prepend to each log record.
        :param str record_suffix: A string to append to each log record.
               
               The `s3` object supports the following:
        """
        pulumi.set(__self__, "format_type", format_type)
        if batch_prefix is not None:
            pulumi.set(__self__, "batch_prefix", batch_prefix)
        if batch_suffix is not None:
            pulumi.set(__self__, "batch_suffix", batch_suffix)
        if field_delimiter is not None:
            pulumi.set(__self__, "field_delimiter", field_delimiter)
        if record_delimiter is not None:
            pulumi.set(__self__, "record_delimiter", record_delimiter)
        if record_prefix is not None:
            pulumi.set(__self__, "record_prefix", record_prefix)
        if record_suffix is not None:
            pulumi.set(__self__, "record_suffix", record_suffix)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        """
        The default output format type for log delivery. The possible values are: `json`: Use the default log output format JSON Lines. The fields in a single log are presented as key-value pairs; `csv`: Use the default log output format csv. Only field values are presented in a single log, without field names.
        """
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="batchPrefix")
    def batch_prefix(self) -> Optional[str]:
        """
        A string to be added before each log delivery batch. Each log delivery batch may contain multiple log records.
        """
        return pulumi.get(self, "batch_prefix")

    @property
    @pulumi.getter(name="batchSuffix")
    def batch_suffix(self) -> Optional[str]:
        """
        A string to append after each log delivery batch.
        """
        return pulumi.get(self, "batch_suffix")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        """
        In a single log record, a string is inserted between fields as a separator. The possible values are: `	`: tab character; `,`: comma; `;`: semicolon.
        """
        return pulumi.get(self, "field_delimiter")

    @property
    @pulumi.getter(name="recordDelimiter")
    def record_delimiter(self) -> Optional[str]:
        """
        The string inserted between log records as a separator. The possible values are: `
        `: newline character; `	`: tab character; `,`: comma.
        """
        return pulumi.get(self, "record_delimiter")

    @property
    @pulumi.getter(name="recordPrefix")
    def record_prefix(self) -> Optional[str]:
        """
        A string to prepend to each log record.
        """
        return pulumi.get(self, "record_prefix")

    @property
    @pulumi.getter(name="recordSuffix")
    def record_suffix(self) -> Optional[str]:
        """
        A string to append to each log record.

        The `s3` object supports the following:
        """
        return pulumi.get(self, "record_suffix")


@pulumi.output_type
class RealtimeLogDeliveryS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessId":
            suggest = "access_id"
        elif key == "accessKey":
            suggest = "access_key"
        elif key == "compressType":
            suggest = "compress_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RealtimeLogDeliveryS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RealtimeLogDeliveryS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RealtimeLogDeliveryS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_id: str,
                 access_key: str,
                 bucket: str,
                 endpoint: str,
                 region: str,
                 compress_type: Optional[str] = None):
        """
        :param str access_id: Fill in a custom SecretId to generate an encrypted signature. This parameter is required if the source site requires authentication.
        :param str access_key: Fill in the custom SecretKey to generate the encrypted signature. This parameter is required if the source site requires authentication.
        :param str bucket: Bucket name and log storage directory, for example: `your_bucket_name/EO-logs/`. If this directory does not exist in the bucket, it will be created automatically.
        :param str endpoint: URLs that do not include bucket names or paths, for example: `https://storage.googleapis.com`, `https://s3.ap-northeast-2.amazonaws.com`, `https://cos.ap-nanjing.myqcloud.com`.
        :param str region: The region where the bucket is located, for example: ap-northeast-2.
        :param str compress_type: Data compression type, the possible values are: `gzip`: use gzip compression. If it is not filled in, compression is not enabled.
        """
        pulumi.set(__self__, "access_id", access_id)
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "region", region)
        if compress_type is not None:
            pulumi.set(__self__, "compress_type", compress_type)

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> str:
        """
        Fill in a custom SecretId to generate an encrypted signature. This parameter is required if the source site requires authentication.
        """
        return pulumi.get(self, "access_id")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        """
        Fill in the custom SecretKey to generate the encrypted signature. This parameter is required if the source site requires authentication.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Bucket name and log storage directory, for example: `your_bucket_name/EO-logs/`. If this directory does not exist in the bucket, it will be created automatically.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        URLs that do not include bucket names or paths, for example: `https://storage.googleapis.com`, `https://s3.ap-northeast-2.amazonaws.com`, `https://cos.ap-nanjing.myqcloud.com`.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region where the bucket is located, for example: ap-northeast-2.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="compressType")
    def compress_type(self) -> Optional[str]:
        """
        Data compression type, the possible values are: `gzip`: use gzip compression. If it is not filled in, compression is not enabled.
        """
        return pulumi.get(self, "compress_type")


@pulumi.output_type
class RuleEngineRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subRules":
            suggest = "sub_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ors: Sequence['outputs.RuleEngineRuleOr'],
                 actions: Optional[Sequence['outputs.RuleEngineRuleAction']] = None,
                 sub_rules: Optional[Sequence['outputs.RuleEngineRuleSubRule']] = None):
        """
        :param Sequence['RuleEngineRuleOrArgs'] ors: OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        :param Sequence['RuleEngineRuleActionArgs'] actions: Feature to be executed.
        :param Sequence['RuleEngineRuleSubRuleArgs'] sub_rules: The nested rule.
        """
        pulumi.set(__self__, "ors", ors)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if sub_rules is not None:
            pulumi.set(__self__, "sub_rules", sub_rules)

    @property
    @pulumi.getter
    def ors(self) -> Sequence['outputs.RuleEngineRuleOr']:
        """
        OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        """
        return pulumi.get(self, "ors")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.RuleEngineRuleAction']]:
        """
        Feature to be executed.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> Optional[Sequence['outputs.RuleEngineRuleSubRule']]:
        """
        The nested rule.
        """
        return pulumi.get(self, "sub_rules")


@pulumi.output_type
class RuleEngineRuleAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeAction":
            suggest = "code_action"
        elif key == "normalAction":
            suggest = "normal_action"
        elif key == "rewriteAction":
            suggest = "rewrite_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_action: Optional['outputs.RuleEngineRuleActionCodeAction'] = None,
                 normal_action: Optional['outputs.RuleEngineRuleActionNormalAction'] = None,
                 rewrite_action: Optional['outputs.RuleEngineRuleActionRewriteAction'] = None):
        """
        :param 'RuleEngineRuleActionCodeActionArgs' code_action: Feature operation with a status code. Features of this type include:
        :param 'RuleEngineRuleActionNormalActionArgs' normal_action: Common operation. Values:
        :param 'RuleEngineRuleActionRewriteActionArgs' rewrite_action: Feature operation with a request/response header. Features of this type include:
        """
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional['outputs.RuleEngineRuleActionCodeAction']:
        """
        Feature operation with a status code. Features of this type include:
        """
        return pulumi.get(self, "code_action")

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional['outputs.RuleEngineRuleActionNormalAction']:
        """
        Common operation. Values:
        """
        return pulumi.get(self, "normal_action")

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional['outputs.RuleEngineRuleActionRewriteAction']:
        """
        Feature operation with a request/response header. Features of this type include:
        """
        return pulumi.get(self, "rewrite_action")


@pulumi.output_type
class RuleEngineRuleActionCodeAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleActionCodeActionParameter']):
        """
        :param str action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param Sequence['RuleEngineRuleActionCodeActionParameterArgs'] parameters: Operation parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleActionCodeActionParameter']:
        """
        Operation parameter.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleActionCodeActionParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleActionCodeActionParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleActionCodeActionParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleActionCodeActionParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 status_code: int,
                 values: Sequence[str]):
        """
        :param str name: Parameter name.
        :param int status_code: The status code.
        :param Sequence[str] values: Parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        """
        The status code.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleActionNormalAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleActionNormalActionParameter']):
        """
        :param str action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param Sequence['RuleEngineRuleActionNormalActionParameterArgs'] parameters: Parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleActionNormalActionParameter']:
        """
        Parameter.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleActionNormalActionParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Parameter name.
        :param Sequence[str] values: Parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleActionRewriteAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleActionRewriteActionParameter']):
        """
        :param str action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param Sequence['RuleEngineRuleActionRewriteActionParameterArgs'] parameters: Parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleActionRewriteActionParameter']:
        """
        Parameter.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleActionRewriteActionParameter(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str action: Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
               - add: Add the HTTP header.
               - set: Rewrite the HTTP header.
               - del: Delete the HTTP header.
        :param str name: Parameter name.
        :param Sequence[str] values: Parameter value.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
        - add: Add the HTTP header.
        - set: Rewrite the HTTP header.
        - del: Delete the HTTP header.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleOr(dict):
    def __init__(__self__, *,
                 ands: Sequence['outputs.RuleEngineRuleOrAnd']):
        """
        :param Sequence['RuleEngineRuleOrAndArgs'] ands: Rule engine condition. This condition will be considered met if all items in the array are met.
        """
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> Sequence['outputs.RuleEngineRuleOrAnd']:
        """
        Rule engine condition. This condition will be considered met if all items in the array are met.
        """
        return pulumi.get(self, "ands")


@pulumi.output_type
class RuleEngineRuleOrAnd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreCase":
            suggest = "ignore_case"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleOrAnd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleOrAnd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleOrAnd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 target: str,
                 ignore_case: Optional[bool] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str operator: Operator. Valid values:
        :param str target: The match type. Values:
        :param bool ignore_case: Whether the parameter value is case insensitive. Default value: false.
        :param str name: The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        :param Sequence[str] values: The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
               - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
               - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
               - When `Target=all`, it indicates any site request.
               - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
               - When `Target=url`, enter the partial URL path under the current site, such as "/example".
               - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
               - When `Target=client_country`, enter the ISO-3166 country/region code.
               - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
               - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operator. Valid values:
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The match type. Values:
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[bool]:
        """
        Whether the parameter value is case insensitive. Default value: false.
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
        - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
        - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
        - When `Target=all`, it indicates any site request.
        - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
        - When `Target=url`, enter the partial URL path under the current site, such as "/example".
        - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
        - When `Target=client_country`, enter the ISO-3166 country/region code.
        - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
        - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleSubRule(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.RuleEngineRuleSubRuleRule'],
                 tags: Optional[Sequence[str]] = None):
        """
        :param Sequence['RuleEngineRuleSubRuleRuleArgs'] rules: Nested rule settings.
        :param Sequence[str] tags: Tag of the rule.
        """
        pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.RuleEngineRuleSubRuleRule']:
        """
        Nested rule settings.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        Tag of the rule.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class RuleEngineRuleSubRuleRule(dict):
    def __init__(__self__, *,
                 ors: Sequence['outputs.RuleEngineRuleSubRuleRuleOr'],
                 actions: Optional[Sequence['outputs.RuleEngineRuleSubRuleRuleAction']] = None):
        """
        :param Sequence['RuleEngineRuleSubRuleRuleOrArgs'] ors: OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        :param Sequence['RuleEngineRuleSubRuleRuleActionArgs'] actions: Feature to be executed.
        """
        pulumi.set(__self__, "ors", ors)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)

    @property
    @pulumi.getter
    def ors(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleOr']:
        """
        OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        """
        return pulumi.get(self, "ors")

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.RuleEngineRuleSubRuleRuleAction']]:
        """
        Feature to be executed.
        """
        return pulumi.get(self, "actions")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeAction":
            suggest = "code_action"
        elif key == "normalAction":
            suggest = "normal_action"
        elif key == "rewriteAction":
            suggest = "rewrite_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleSubRuleRuleAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleSubRuleRuleAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleSubRuleRuleAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_action: Optional['outputs.RuleEngineRuleSubRuleRuleActionCodeAction'] = None,
                 normal_action: Optional['outputs.RuleEngineRuleSubRuleRuleActionNormalAction'] = None,
                 rewrite_action: Optional['outputs.RuleEngineRuleSubRuleRuleActionRewriteAction'] = None):
        """
        :param 'RuleEngineRuleSubRuleRuleActionCodeActionArgs' code_action: Feature operation with a status code. Features of this type include:
        :param 'RuleEngineRuleSubRuleRuleActionNormalActionArgs' normal_action: Common operation. Values:
        :param 'RuleEngineRuleSubRuleRuleActionRewriteActionArgs' rewrite_action: Feature operation with a request/response header. Features of this type include:
        """
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional['outputs.RuleEngineRuleSubRuleRuleActionCodeAction']:
        """
        Feature operation with a status code. Features of this type include:
        """
        return pulumi.get(self, "code_action")

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional['outputs.RuleEngineRuleSubRuleRuleActionNormalAction']:
        """
        Common operation. Values:
        """
        return pulumi.get(self, "normal_action")

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional['outputs.RuleEngineRuleSubRuleRuleActionRewriteAction']:
        """
        Feature operation with a request/response header. Features of this type include:
        """
        return pulumi.get(self, "rewrite_action")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionCodeAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleSubRuleRuleActionCodeActionParameter']):
        """
        :param str action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param Sequence['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs'] parameters: Operation parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleActionCodeActionParameter']:
        """
        Operation parameter.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionCodeActionParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleSubRuleRuleActionCodeActionParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleSubRuleRuleActionCodeActionParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleSubRuleRuleActionCodeActionParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 status_code: int,
                 values: Sequence[str]):
        """
        :param str name: Parameter name.
        :param int status_code: The status code.
        :param Sequence[str] values: Parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        """
        The status code.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionNormalAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleSubRuleRuleActionNormalActionParameter']):
        """
        :param str action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param Sequence['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs'] parameters: Parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleActionNormalActionParameter']:
        """
        Parameter.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionNormalActionParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Parameter name.
        :param Sequence[str] values: Parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionRewriteAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleSubRuleRuleActionRewriteActionParameter']):
        """
        :param str action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param Sequence['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs'] parameters: Parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleActionRewriteActionParameter']:
        """
        Parameter.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionRewriteActionParameter(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 values: Sequence[str]):
        """
        :param str action: Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
               - add: Add the HTTP header.
               - set: Rewrite the HTTP header.
               - del: Delete the HTTP header.
        :param str name: Parameter name.
        :param Sequence[str] values: Parameter value.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
        - add: Add the HTTP header.
        - set: Rewrite the HTTP header.
        - del: Delete the HTTP header.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleOr(dict):
    def __init__(__self__, *,
                 ands: Sequence['outputs.RuleEngineRuleSubRuleRuleOrAnd']):
        """
        :param Sequence['RuleEngineRuleSubRuleRuleOrAndArgs'] ands: Rule engine condition. This condition will be considered met if all items in the array are met.
        """
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleOrAnd']:
        """
        Rule engine condition. This condition will be considered met if all items in the array are met.
        """
        return pulumi.get(self, "ands")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleOrAnd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreCase":
            suggest = "ignore_case"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleSubRuleRuleOrAnd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleSubRuleRuleOrAnd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleSubRuleRuleOrAnd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 target: str,
                 ignore_case: Optional[bool] = None,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str operator: Operator. Valid values:
        :param str target: The match type. Values:
        :param bool ignore_case: Whether the parameter value is case insensitive. Default value: false.
        :param str name: The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        :param Sequence[str] values: The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
               - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
               - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
               - When `Target=all`, it indicates any site request.
               - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
               - When `Target=url`, enter the partial URL path under the current site, such as "/example".
               - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
               - When `Target=client_country`, enter the ISO-3166 country/region code.
               - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
               - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operator. Valid values:
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The match type. Values:
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[bool]:
        """
        Whether the parameter value is case insensitive. Default value: false.
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
        - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
        - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
        - When `Target=all`, it indicates any site request.
        - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
        - When `Target=url`, enter the partial URL path under the current site, such as "/example".
        - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
        - When `Target=client_country`, enter the ISO-3166 country/region code.
        - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
        - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class SecurityIpGroupIpGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityIpGroupIpGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityIpGroupIpGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityIpGroupIpGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contents: Sequence[str],
                 name: str,
                 group_id: Optional[int] = None):
        """
        :param Sequence[str] contents: IP group content. Only supports IP and IP mask.
        :param str name: Group name.
        :param int group_id: Group ID.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "name", name)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)

    @property
    @pulumi.getter
    def contents(self) -> Sequence[str]:
        """
        IP group content. Only supports IP and IP mask.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[int]:
        """
        Group ID.
        """
        return pulumi.get(self, "group_id")


@pulumi.output_type
class ZoneOwnershipVerification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsVerifications":
            suggest = "dns_verifications"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneOwnershipVerification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneOwnershipVerification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneOwnershipVerification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_verifications: Optional[Sequence['outputs.ZoneOwnershipVerificationDnsVerification']] = None):
        """
        :param Sequence['ZoneOwnershipVerificationDnsVerificationArgs'] dns_verifications: CNAME access, using DNS to resolve the information required for authentication. For details, please refer to [Site/Domain Name Ownership Verification ](https://cloud.tencent.com/document/product/1552/70789#7af6ecf8-afca-4e35-8811-b5797ed1bde5). Note: This field may return null, indicating that no valid value can be obtained.
        """
        if dns_verifications is not None:
            pulumi.set(__self__, "dns_verifications", dns_verifications)

    @property
    @pulumi.getter(name="dnsVerifications")
    def dns_verifications(self) -> Optional[Sequence['outputs.ZoneOwnershipVerificationDnsVerification']]:
        """
        CNAME access, using DNS to resolve the information required for authentication. For details, please refer to [Site/Domain Name Ownership Verification ](https://cloud.tencent.com/document/product/1552/70789#7af6ecf8-afca-4e35-8811-b5797ed1bde5). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "dns_verifications")


@pulumi.output_type
class ZoneOwnershipVerificationDnsVerification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recordType":
            suggest = "record_type"
        elif key == "recordValue":
            suggest = "record_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneOwnershipVerificationDnsVerification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneOwnershipVerificationDnsVerification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneOwnershipVerificationDnsVerification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 record_type: Optional[str] = None,
                 record_value: Optional[str] = None,
                 subdomain: Optional[str] = None):
        """
        :param str record_type: Record type.
        :param str record_value: Record the value.
        :param str subdomain: Host record.
        """
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if record_value is not None:
            pulumi.set(__self__, "record_value", record_value)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[str]:
        """
        Record type.
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> Optional[str]:
        """
        Record the value.
        """
        return pulumi.get(self, "record_value")

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[str]:
        """
        Host record.
        """
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class ZoneSettingCache(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "followOrigin":
            suggest = "follow_origin"
        elif key == "noCache":
            suggest = "no_cache"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingCache. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingCache.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingCache.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache: Optional['outputs.ZoneSettingCacheCache'] = None,
                 follow_origin: Optional['outputs.ZoneSettingCacheFollowOrigin'] = None,
                 no_cache: Optional['outputs.ZoneSettingCacheNoCache'] = None):
        """
        :param 'ZoneSettingCacheCacheArgs' cache: Cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ZoneSettingCacheFollowOriginArgs' follow_origin: Follows the origin server configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ZoneSettingCacheNoCacheArgs' no_cache: No-cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if no_cache is not None:
            pulumi.set(__self__, "no_cache", no_cache)

    @property
    @pulumi.getter
    def cache(self) -> Optional['outputs.ZoneSettingCacheCache']:
        """
        Cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cache")

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional['outputs.ZoneSettingCacheFollowOrigin']:
        """
        Follows the origin server configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "follow_origin")

    @property
    @pulumi.getter(name="noCache")
    def no_cache(self) -> Optional['outputs.ZoneSettingCacheNoCache']:
        """
        No-cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "no_cache")


@pulumi.output_type
class ZoneSettingCacheCache(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheTime":
            suggest = "cache_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingCacheCache. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingCacheCache.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingCacheCache.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_time: Optional[int] = None,
                 switch: Optional[str] = None):
        """
        :param int cache_time: Cache expiration time settings.
               Unit: second. The maximum value is 365 days. Note: This field may return null, indicating that no valid value can be obtained.
        :param str switch: Cache configuration switch.
        """
        if cache_time is not None:
            pulumi.set(__self__, "cache_time", cache_time)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> Optional[int]:
        """
        Cache expiration time settings.
        Unit: second. The maximum value is 365 days. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cache_time")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Cache configuration switch.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingCacheFollowOrigin(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None):
        """
        :param str switch: Specifies whether to follow the origin server configuration.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Specifies whether to follow the origin server configuration.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingCacheKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullUrlCache":
            suggest = "full_url_cache"
        elif key == "ignoreCase":
            suggest = "ignore_case"
        elif key == "queryString":
            suggest = "query_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingCacheKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingCacheKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingCacheKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 full_url_cache: Optional[str] = None,
                 ignore_case: Optional[str] = None,
                 query_string: Optional['outputs.ZoneSettingCacheKeyQueryString'] = None):
        """
        :param str full_url_cache: Specifies whether to enable full-path cache.
        :param str ignore_case: Specifies whether the cache key is case-sensitive. Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ZoneSettingCacheKeyQueryStringArgs' query_string: Request parameter contained in CacheKey. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[str]:
        """
        Specifies whether to enable full-path cache.
        """
        return pulumi.get(self, "full_url_cache")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[str]:
        """
        Specifies whether the cache key is case-sensitive. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional['outputs.ZoneSettingCacheKeyQueryString']:
        """
        Request parameter contained in CacheKey. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "query_string")


@pulumi.output_type
class ZoneSettingCacheKeyQueryString(dict):
    def __init__(__self__, *,
                 switch: str,
                 action: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str switch: Whether to use QueryString as part of CacheKey.
        :param str action: `includeCustom`: Include the specified query strings.
        :param Sequence[str] values: Array of query strings used/excluded. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to use QueryString as part of CacheKey.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        `includeCustom`: Include the specified query strings.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Array of query strings used/excluded. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class ZoneSettingCacheNoCache(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None):
        """
        :param str switch: Whether to cache the configuration.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Whether to cache the configuration.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingCachePrefresh(dict):
    def __init__(__self__, *,
                 switch: str,
                 percent: Optional[int] = None):
        """
        :param str switch: Specifies whether to enable cache prefresh.
        :param int percent: Percentage of cache time before try to prefresh. Valid value range: 1-99.
        """
        pulumi.set(__self__, "switch", switch)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Specifies whether to enable cache prefresh.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def percent(self) -> Optional[int]:
        """
        Percentage of cache time before try to prefresh. Valid value range: 1-99.
        """
        return pulumi.get(self, "percent")


@pulumi.output_type
class ZoneSettingClientIpHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingClientIpHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingClientIpHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingClientIpHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 header_name: Optional[str] = None):
        """
        :param str switch: Specifies whether to enable client IP header.
        :param str header_name: Name of the origin-pull client IP request header. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Specifies whether to enable client IP header.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        """
        Name of the origin-pull client IP request header. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "header_name")


@pulumi.output_type
class ZoneSettingCompression(dict):
    def __init__(__self__, *,
                 switch: str,
                 algorithms: Optional[Sequence[str]] = None):
        """
        :param str switch: Whether to enable Smart compression.
        :param Sequence[str] algorithms: Compression algorithms to select. Valid values: `brotli`, `gzip`.
        """
        pulumi.set(__self__, "switch", switch)
        if algorithms is not None:
            pulumi.set(__self__, "algorithms", algorithms)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable Smart compression.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def algorithms(self) -> Optional[Sequence[str]]:
        """
        Compression algorithms to select. Valid values: `brotli`, `gzip`.
        """
        return pulumi.get(self, "algorithms")


@pulumi.output_type
class ZoneSettingForceRedirect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redirectStatusCode":
            suggest = "redirect_status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingForceRedirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingForceRedirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingForceRedirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 redirect_status_code: Optional[int] = None):
        """
        :param str switch: Whether to enable force redirect.
        :param int redirect_status_code: Redirection status code.
               - 301
               - 302 Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable force redirect.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[int]:
        """
        Redirection status code.
        - 301
        - 302 Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "redirect_status_code")


@pulumi.output_type
class ZoneSettingHttps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ocspStapling":
            suggest = "ocsp_stapling"
        elif key == "tlsVersions":
            suggest = "tls_versions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingHttps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingHttps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingHttps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hsts: Optional['outputs.ZoneSettingHttpsHsts'] = None,
                 http2: Optional[str] = None,
                 ocsp_stapling: Optional[str] = None,
                 tls_versions: Optional[Sequence[str]] = None):
        """
        :param 'ZoneSettingHttpsHstsArgs' hsts: HSTS Configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param str http2: HTTP2 configuration switch.
        :param str ocsp_stapling: OCSP configuration switch.
        :param Sequence[str] tls_versions: TLS version settings. Valid values: `TLSv1`, `TLSV1.1`, `TLSV1.2`, and `TLSv1.3`.
               Only consecutive versions can be enabled at the same time. Note: This field may return null, indicating that no valid value can be obtained.
               
               The `ipv6` object supports the following:
        """
        if hsts is not None:
            pulumi.set(__self__, "hsts", hsts)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)

    @property
    @pulumi.getter
    def hsts(self) -> Optional['outputs.ZoneSettingHttpsHsts']:
        """
        HSTS Configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "hsts")

    @property
    @pulumi.getter
    def http2(self) -> Optional[str]:
        """
        HTTP2 configuration switch.
        """
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[str]:
        """
        OCSP configuration switch.
        """
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[Sequence[str]]:
        """
        TLS version settings. Valid values: `TLSv1`, `TLSV1.1`, `TLSV1.2`, and `TLSv1.3`.
        Only consecutive versions can be enabled at the same time. Note: This field may return null, indicating that no valid value can be obtained.

        The `ipv6` object supports the following:
        """
        return pulumi.get(self, "tls_versions")


@pulumi.output_type
class ZoneSettingHttpsHsts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeSubDomains":
            suggest = "include_sub_domains"
        elif key == "maxAge":
            suggest = "max_age"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingHttpsHsts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingHttpsHsts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingHttpsHsts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 include_sub_domains: Optional[str] = None,
                 max_age: Optional[int] = None,
                 preload: Optional[str] = None):
        """
        :param str switch: `on`: Enable.
        :param str include_sub_domains: Specifies whether to include subdomain names. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        :param int max_age: MaxAge value in seconds, should be no more than 1 day. Note: This field may return null, indicating that no valid value can be obtained.
        :param str preload: Specifies whether to preload. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if include_sub_domains is not None:
            pulumi.set(__self__, "include_sub_domains", include_sub_domains)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        `on`: Enable.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[str]:
        """
        Specifies whether to include subdomain names. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "include_sub_domains")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        """
        MaxAge value in seconds, should be no more than 1 day. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter
    def preload(self) -> Optional[str]:
        """
        Specifies whether to preload. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "preload")


@pulumi.output_type
class ZoneSettingIpv6(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Cache configuration switch.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Cache configuration switch.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingMaxAge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "followOrigin":
            suggest = "follow_origin"
        elif key == "maxAgeTime":
            suggest = "max_age_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingMaxAge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingMaxAge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingMaxAge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 follow_origin: Optional[str] = None,
                 max_age_time: Optional[int] = None):
        """
        :param str follow_origin: Specifies whether to follow the max cache age of the origin server.
        :param int max_age_time: Specifies the max age of the cache (in seconds). The maximum value is 365 days. Note: the value 0 means not to cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if max_age_time is not None:
            pulumi.set(__self__, "max_age_time", max_age_time)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[str]:
        """
        Specifies whether to follow the max cache age of the origin server.
        """
        return pulumi.get(self, "follow_origin")

    @property
    @pulumi.getter(name="maxAgeTime")
    def max_age_time(self) -> Optional[int]:
        """
        Specifies the max age of the cache (in seconds). The maximum value is 365 days. Note: the value 0 means not to cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_age_time")


@pulumi.output_type
class ZoneSettingOfflineCache(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Whether to enable offline cache.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable offline cache.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingOrigin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupOrigins":
            suggest = "backup_origins"
        elif key == "originPullProtocol":
            suggest = "origin_pull_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingOrigin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingOrigin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingOrigin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_origins: Optional[Sequence[str]] = None,
                 origin_pull_protocol: Optional[str] = None,
                 origins: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] backup_origins: Backup origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        :param str origin_pull_protocol: Origin-pull protocol.
        :param Sequence[str] origins: Origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if backup_origins is not None:
            pulumi.set(__self__, "backup_origins", backup_origins)
        if origin_pull_protocol is not None:
            pulumi.set(__self__, "origin_pull_protocol", origin_pull_protocol)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="backupOrigins")
    def backup_origins(self) -> Optional[Sequence[str]]:
        """
        Backup origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "backup_origins")

    @property
    @pulumi.getter(name="originPullProtocol")
    def origin_pull_protocol(self) -> Optional[str]:
        """
        Origin-pull protocol.
        """
        return pulumi.get(self, "origin_pull_protocol")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence[str]]:
        """
        Origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "origins")


@pulumi.output_type
class ZoneSettingPostMaxSize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSize":
            suggest = "max_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingPostMaxSize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingPostMaxSize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingPostMaxSize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 max_size: Optional[int] = None):
        """
        :param str switch: Specifies whether to enable custom setting of the maximum file size.
        :param int max_size: Maximum size. Value range: 1-500 MB. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Specifies whether to enable custom setting of the maximum file size.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        """
        Maximum size. Value range: 1-500 MB. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_size")


@pulumi.output_type
class ZoneSettingQuic(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Whether to enable QUIC.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable QUIC.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingSmartRouting(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Whether to enable HTTP2 origin-pull.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable HTTP2 origin-pull.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingUpstreamHttp2(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Cache configuration switch.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Cache configuration switch.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingWebSocket(dict):
    def __init__(__self__, *,
                 switch: str,
                 timeout: Optional[int] = None):
        """
        :param str switch: Whether to enable custom WebSocket timeout setting. When it's off: it means to keep the default WebSocket connection timeout period, which is 15 seconds. To change the timeout period, please set it to on.
        :param int timeout: Sets timeout period in seconds. Maximum value: 120.
        """
        pulumi.set(__self__, "switch", switch)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Whether to enable custom WebSocket timeout setting. When it's off: it means to keep the default WebSocket connection timeout period, which is 15 seconds. To change the timeout period, please set it to on.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Sets timeout period in seconds. Maximum value: 120.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetRuleEngineSettingsActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 properties: Sequence['outputs.GetRuleEngineSettingsActionPropertyResult']):
        """
        :param str action: Action name.
        :param Sequence['GetRuleEngineSettingsActionPropertyArgs'] properties: Action properties.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyResult']:
        """
        Action properties.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyResult(dict):
    def __init__(__self__, *,
                 choice_properties: Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyResult'],
                 choices_values: Sequence[str],
                 extra_parameters: Sequence['outputs.GetRuleEngineSettingsActionPropertyExtraParameterResult'],
                 is_allow_empty: bool,
                 is_multiple: bool,
                 max: int,
                 min: int,
                 name: str,
                 type: str):
        """
        :param Sequence['GetRuleEngineSettingsActionPropertyChoicePropertyArgs'] choice_properties: Associative properties of this property, they are all required. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] choices_values: The choices which can be used. This list may be empty.
        :param Sequence['GetRuleEngineSettingsActionPropertyExtraParameterArgs'] extra_parameters: Special parameter. Note: This field may return null, indicating that no valid value can be obtained.
        :param bool is_allow_empty: Whether this property is allowed to set empty.
        :param bool is_multiple: Whether this property is allowed to set multiple values.
        :param int max: Max integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        :param int min: Min integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        :param str name: Property name.
        :param str type: Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        pulumi.set(__self__, "choice_properties", choice_properties)
        pulumi.set(__self__, "choices_values", choices_values)
        pulumi.set(__self__, "extra_parameters", extra_parameters)
        pulumi.set(__self__, "is_allow_empty", is_allow_empty)
        pulumi.set(__self__, "is_multiple", is_multiple)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="choiceProperties")
    def choice_properties(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyResult']:
        """
        Associative properties of this property, they are all required. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "choice_properties")

    @property
    @pulumi.getter(name="choicesValues")
    def choices_values(self) -> Sequence[str]:
        """
        The choices which can be used. This list may be empty.
        """
        return pulumi.get(self, "choices_values")

    @property
    @pulumi.getter(name="extraParameters")
    def extra_parameters(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyExtraParameterResult']:
        """
        Special parameter. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "extra_parameters")

    @property
    @pulumi.getter(name="isAllowEmpty")
    def is_allow_empty(self) -> bool:
        """
        Whether this property is allowed to set empty.
        """
        return pulumi.get(self, "is_allow_empty")

    @property
    @pulumi.getter(name="isMultiple")
    def is_multiple(self) -> bool:
        """
        Whether this property is allowed to set multiple values.
        """
        return pulumi.get(self, "is_multiple")

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        Max integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        Min integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Property name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyChoicePropertyResult(dict):
    def __init__(__self__, *,
                 choices_values: Sequence[str],
                 extra_parameters: Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult'],
                 is_allow_empty: bool,
                 is_multiple: bool,
                 max: int,
                 min: int,
                 name: str,
                 type: str):
        """
        :param Sequence[str] choices_values: The choices which can be used. This list may be empty.
        :param Sequence['GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterArgs'] extra_parameters: Special parameter. Note: This field may return null, indicating that no valid value can be obtained.
        :param bool is_allow_empty: Whether this property is allowed to set empty.
        :param bool is_multiple: Whether this property is allowed to set multiple values.
        :param int max: Max integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        :param int min: Min integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        :param str name: Property name.
        :param str type: Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        pulumi.set(__self__, "choices_values", choices_values)
        pulumi.set(__self__, "extra_parameters", extra_parameters)
        pulumi.set(__self__, "is_allow_empty", is_allow_empty)
        pulumi.set(__self__, "is_multiple", is_multiple)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="choicesValues")
    def choices_values(self) -> Sequence[str]:
        """
        The choices which can be used. This list may be empty.
        """
        return pulumi.get(self, "choices_values")

    @property
    @pulumi.getter(name="extraParameters")
    def extra_parameters(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult']:
        """
        Special parameter. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "extra_parameters")

    @property
    @pulumi.getter(name="isAllowEmpty")
    def is_allow_empty(self) -> bool:
        """
        Whether this property is allowed to set empty.
        """
        return pulumi.get(self, "is_allow_empty")

    @property
    @pulumi.getter(name="isMultiple")
    def is_multiple(self) -> bool:
        """
        Whether this property is allowed to set multiple values.
        """
        return pulumi.get(self, "is_multiple")

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        Max integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        Min integer value can bse used when property type is `CUSTOM_NUM`. When `Min` and `Max` both are 0, this field is meaningless.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Property name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult(dict):
    def __init__(__self__, *,
                 choices: Sequence[str],
                 id: str,
                 type: str):
        """
        :param Sequence[str] choices: A list of choices which can be used when `Type` is `CHOICE`.
        :param str id: Parameter name. Valid values:- `Action`: this extra parameter is required when modify HTTP header, this action should be a `RewriteAction`.- `StatusCode`: this extra parameter is required when modify HTTP status code, this action should be a `CodeAction`.- `NULL`: this action should be a `NormalAction`.
        :param str type: Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        pulumi.set(__self__, "choices", choices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def choices(self) -> Sequence[str]:
        """
        A list of choices which can be used when `Type` is `CHOICE`.
        """
        return pulumi.get(self, "choices")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Parameter name. Valid values:- `Action`: this extra parameter is required when modify HTTP header, this action should be a `RewriteAction`.- `StatusCode`: this extra parameter is required when modify HTTP status code, this action should be a `CodeAction`.- `NULL`: this action should be a `NormalAction`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyExtraParameterResult(dict):
    def __init__(__self__, *,
                 choices: Sequence[str],
                 id: str,
                 type: str):
        """
        :param Sequence[str] choices: A list of choices which can be used when `Type` is `CHOICE`.
        :param str id: Parameter name. Valid values:- `Action`: this extra parameter is required when modify HTTP header, this action should be a `RewriteAction`.- `StatusCode`: this extra parameter is required when modify HTTP status code, this action should be a `CodeAction`.- `NULL`: this action should be a `NormalAction`.
        :param str type: Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        pulumi.set(__self__, "choices", choices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def choices(self) -> Sequence[str]:
        """
        A list of choices which can be used when `Type` is `CHOICE`.
        """
        return pulumi.get(self, "choices")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Parameter name. Valid values:- `Action`: this extra parameter is required when modify HTTP header, this action should be a `RewriteAction`.- `StatusCode`: this extra parameter is required when modify HTTP status code, this action should be a `CodeAction`.- `NULL`: this action should be a `NormalAction`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Property value type. Valid values:- `CHOICE`: enum type, must select one of the value in `ChoicesValue`.- `TOGGLE`: switch type, must select one of the value in `ChoicesValue`.- `OBJECT`: object type, the `ChoiceProperties` list all properties of the object.- `CUSTOM_NUM`: integer type.- `CUSTOM_STRING`: string type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetZoneAvailablePlansPlanInfoListResult(dict):
    def __init__(__self__, *,
                 area: str,
                 currency: str,
                 flux: int,
                 frequency: str,
                 plan_type: str,
                 price: float,
                 request: int,
                 site_number: int):
        """
        :param str area: Acceleration area of the plan. Valid value: `mainland`, `overseas`.
        :param str currency: Settlement Currency Type. Valid values: `CNY`, `USD`.
        :param int flux: The number of fluxes included in the zone plan. Unit: Byte.
        :param str frequency: Billing cycle. Valid values:
        :param str plan_type: Plan type.
        :param float price: Price of the plan. Unit: cent.
        :param int request: The number of requests included in the zone plan.
        :param int site_number: The number of zones this zone plan can bind.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "flux", flux)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "plan_type", plan_type)
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "site_number", site_number)

    @property
    @pulumi.getter
    def area(self) -> str:
        """
        Acceleration area of the plan. Valid value: `mainland`, `overseas`.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def currency(self) -> str:
        """
        Settlement Currency Type. Valid values: `CNY`, `USD`.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter
    def flux(self) -> int:
        """
        The number of fluxes included in the zone plan. Unit: Byte.
        """
        return pulumi.get(self, "flux")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        Billing cycle. Valid values:
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> str:
        """
        Plan type.
        """
        return pulumi.get(self, "plan_type")

    @property
    @pulumi.getter
    def price(self) -> float:
        """
        Price of the plan. Unit: cent.
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter
    def request(self) -> int:
        """
        The number of requests included in the zone plan.
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="siteNumber")
    def site_number(self) -> int:
        """
        The number of zones this zone plan can bind.
        """
        return pulumi.get(self, "site_number")


