# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccelerationDomainOriginInfoArgs',
    'AccelerationDomainOriginInfoPrivateParameterArgs',
    'ApplicationProxyIpv6Args',
    'CertificateConfigServerCertInfoArgs',
    'FunctionRuleFunctionRuleConditionArgs',
    'FunctionRuleFunctionRuleConditionRuleConditionArgs',
    'FunctionRuntimeEnvironmentEnvironmentVariableArgs',
    'L4ProxyDdosProtectionConfigArgs',
    'OriginGroupRecordArgs',
    'OriginGroupRecordPrivateParameterArgs',
    'OriginGroupReferenceArgs',
    'RealtimeLogDeliveryClsArgs',
    'RealtimeLogDeliveryCustomEndpointArgs',
    'RealtimeLogDeliveryCustomEndpointHeaderArgs',
    'RealtimeLogDeliveryCustomFieldArgs',
    'RealtimeLogDeliveryDeliveryConditionArgs',
    'RealtimeLogDeliveryDeliveryConditionConditionArgs',
    'RealtimeLogDeliveryLogFormatArgs',
    'RealtimeLogDeliveryS3Args',
    'RuleEngineRuleArgs',
    'RuleEngineRuleActionArgs',
    'RuleEngineRuleActionCodeActionArgs',
    'RuleEngineRuleActionCodeActionParameterArgs',
    'RuleEngineRuleActionNormalActionArgs',
    'RuleEngineRuleActionNormalActionParameterArgs',
    'RuleEngineRuleActionRewriteActionArgs',
    'RuleEngineRuleActionRewriteActionParameterArgs',
    'RuleEngineRuleOrArgs',
    'RuleEngineRuleOrAndArgs',
    'RuleEngineRuleSubRuleArgs',
    'RuleEngineRuleSubRuleRuleArgs',
    'RuleEngineRuleSubRuleRuleActionArgs',
    'RuleEngineRuleSubRuleRuleActionCodeActionArgs',
    'RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs',
    'RuleEngineRuleSubRuleRuleActionNormalActionArgs',
    'RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs',
    'RuleEngineRuleSubRuleRuleActionRewriteActionArgs',
    'RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs',
    'RuleEngineRuleSubRuleRuleOrArgs',
    'RuleEngineRuleSubRuleRuleOrAndArgs',
    'SecurityIpGroupIpGroupArgs',
    'ZoneOwnershipVerificationArgs',
    'ZoneOwnershipVerificationDnsVerificationArgs',
    'ZoneSettingCacheArgs',
    'ZoneSettingCacheCacheArgs',
    'ZoneSettingCacheFollowOriginArgs',
    'ZoneSettingCacheKeyArgs',
    'ZoneSettingCacheKeyQueryStringArgs',
    'ZoneSettingCacheNoCacheArgs',
    'ZoneSettingCachePrefreshArgs',
    'ZoneSettingClientIpHeaderArgs',
    'ZoneSettingCompressionArgs',
    'ZoneSettingForceRedirectArgs',
    'ZoneSettingHttpsArgs',
    'ZoneSettingHttpsHstsArgs',
    'ZoneSettingIpv6Args',
    'ZoneSettingMaxAgeArgs',
    'ZoneSettingOfflineCacheArgs',
    'ZoneSettingOriginArgs',
    'ZoneSettingPostMaxSizeArgs',
    'ZoneSettingQuicArgs',
    'ZoneSettingSmartRoutingArgs',
    'ZoneSettingUpstreamHttp2Args',
    'ZoneSettingWebSocketArgs',
]

@pulumi.input_type
class AccelerationDomainOriginInfoArgs:
    def __init__(__self__, *,
                 origin: pulumi.Input[str],
                 origin_type: pulumi.Input[str],
                 backup_origin: Optional[pulumi.Input[str]] = None,
                 private_access: Optional[pulumi.Input[str]] = None,
                 private_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AccelerationDomainOriginInfoPrivateParameterArgs']]]] = None):
        """
        :param pulumi.Input[str] origin: The origin address. Enter the origin group ID if `OriginType=ORIGIN_GROUP`.
        :param pulumi.Input[str] origin_type: The origin type. Values: `IP_DOMAIN`: IPv4/IPv6 address or domain name; `COS`: COS bucket address; `ORIGIN_GROUP`: Origin group; `AWS_S3`: AWS S3 bucket address; `SPACE`: EdgeOne Shield Space.
        :param pulumi.Input[str] backup_origin: ID of the secondary origin group (valid when `OriginType=ORIGIN_GROUP`). If it is not specified, it indicates that secondary origins are not used.
        :param pulumi.Input[str] private_access: Whether to authenticate access to the private object storage origin (valid when `OriginType=COS/AWS_S3`). Values: `on`: Enable private authentication; `off`: Disable private authentication. If this field is not specified, the default value `off` is used.
        :param pulumi.Input[Sequence[pulumi.Input['AccelerationDomainOriginInfoPrivateParameterArgs']]] private_parameters: The private authentication parameters. This field is valid when `PrivateAccess=on`.
        """
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "origin_type", origin_type)
        if backup_origin is not None:
            pulumi.set(__self__, "backup_origin", backup_origin)
        if private_access is not None:
            pulumi.set(__self__, "private_access", private_access)
        if private_parameters is not None:
            pulumi.set(__self__, "private_parameters", private_parameters)

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Input[str]:
        """
        The origin address. Enter the origin group ID if `OriginType=ORIGIN_GROUP`.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> pulumi.Input[str]:
        """
        The origin type. Values: `IP_DOMAIN`: IPv4/IPv6 address or domain name; `COS`: COS bucket address; `ORIGIN_GROUP`: Origin group; `AWS_S3`: AWS S3 bucket address; `SPACE`: EdgeOne Shield Space.
        """
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_type", value)

    @property
    @pulumi.getter(name="backupOrigin")
    def backup_origin(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secondary origin group (valid when `OriginType=ORIGIN_GROUP`). If it is not specified, it indicates that secondary origins are not used.
        """
        return pulumi.get(self, "backup_origin")

    @backup_origin.setter
    def backup_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_origin", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to authenticate access to the private object storage origin (valid when `OriginType=COS/AWS_S3`). Values: `on`: Enable private authentication; `off`: Disable private authentication. If this field is not specified, the default value `off` is used.
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="privateParameters")
    def private_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccelerationDomainOriginInfoPrivateParameterArgs']]]]:
        """
        The private authentication parameters. This field is valid when `PrivateAccess=on`.
        """
        return pulumi.get(self, "private_parameters")

    @private_parameters.setter
    def private_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccelerationDomainOriginInfoPrivateParameterArgs']]]]):
        pulumi.set(self, "private_parameters", value)


@pulumi.input_type
class AccelerationDomainOriginInfoPrivateParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The parameter name. Valid values: `AccessKeyId`: Access Key ID; `SecretAccessKey`: Secret Access Key.
        :param pulumi.Input[str] value: The parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The parameter name. Valid values: `AccessKeyId`: Access Key ID; `SecretAccessKey`: Secret Access Key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationProxyIpv6Args:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: - `on`: Enable.- `off`: Disable.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        - `on`: Enable.- `off`: Disable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class CertificateConfigServerCertInfoArgs:
    def __init__(__self__, *,
                 cert_id: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 deploy_time: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 sign_algo: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_id: ID of the server certificate.Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[str] alias: Alias of the certificate.Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[str] common_name: Domain name of the certificate. Note: This field may return `null`, indicating that no valid value can be obtained.
        :param pulumi.Input[str] deploy_time: Time when the certificate is deployed. Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[str] expire_time: Time when the certificate expires. Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[str] sign_algo: Signature algorithm. Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[str] type: Type of the certificate. Values: `default`: Default certificate; `upload`: Specified certificate; `managed`: Tencent Cloud-managed certificate. Note: This field may return `null`, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cert_id", cert_id)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if deploy_time is not None:
            pulumi.set(__self__, "deploy_time", deploy_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if sign_algo is not None:
            pulumi.set(__self__, "sign_algo", sign_algo)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> pulumi.Input[str]:
        """
        ID of the server certificate.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "cert_id")

    @cert_id.setter
    def cert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert_id", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Alias of the certificate.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of the certificate. Note: This field may return `null`, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="deployTime")
    def deploy_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time when the certificate is deployed. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "deploy_time")

    @deploy_time.setter
    def deploy_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_time", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time when the certificate expires. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="signAlgo")
    def sign_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Signature algorithm. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "sign_algo")

    @sign_algo.setter
    def sign_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_algo", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the certificate. Values: `default`: Default certificate; `upload`: Specified certificate; `managed`: Tencent Cloud-managed certificate. Note: This field may return `null`, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FunctionRuleFunctionRuleConditionArgs:
    def __init__(__self__, *,
                 rule_conditions: pulumi.Input[Sequence[pulumi.Input['FunctionRuleFunctionRuleConditionRuleConditionArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['FunctionRuleFunctionRuleConditionRuleConditionArgs']]] rule_conditions: For edge function trigger rule conditions, if all items in the list are satisfied, then the condition is considered fulfilled.
        """
        pulumi.set(__self__, "rule_conditions", rule_conditions)

    @property
    @pulumi.getter(name="ruleConditions")
    def rule_conditions(self) -> pulumi.Input[Sequence[pulumi.Input['FunctionRuleFunctionRuleConditionRuleConditionArgs']]]:
        """
        For edge function trigger rule conditions, if all items in the list are satisfied, then the condition is considered fulfilled.
        """
        return pulumi.get(self, "rule_conditions")

    @rule_conditions.setter
    def rule_conditions(self, value: pulumi.Input[Sequence[pulumi.Input['FunctionRuleFunctionRuleConditionRuleConditionArgs']]]):
        pulumi.set(self, "rule_conditions", value)


@pulumi.input_type
class FunctionRuleFunctionRuleConditionRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 target: pulumi.Input[str],
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] operator: Operator. Valid values:
        :param pulumi.Input[str] target: The match type. Values:
        :param pulumi.Input[bool] ignore_case: Whether the parameter value is case insensitive. Default value: false.
        :param pulumi.Input[str] name: The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
               - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
               - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
               - When `Target=all`, it indicates any site request.
               - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
               - When `Target=url`, enter the partial URL path under the current site, such as "/example".
               - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
               - When `Target=client_country`, enter the ISO-3166 country/region code.
               - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
               - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Operator. Valid values:
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        The match type. Values:
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the parameter value is case insensitive. Default value: false.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
        - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
        - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
        - When `Target=all`, it indicates any site request.
        - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
        - When `Target=url`, enter the partial URL path under the current site, such as "/example".
        - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
        - When `Target=client_country`, enter the ISO-3166 country/region code.
        - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
        - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class FunctionRuntimeEnvironmentEnvironmentVariableArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The name of the variable, which is limited to alphanumeric characters and the special characters `@`, `.`, `-`, and `_`. It can have a maximum of 64 bytes and should not be duplicated.
        :param pulumi.Input[str] type: The type of the variable can have the following values:  - `string`: Represents a string type.  - `json`: Represents a JSON object type.
        :param pulumi.Input[str] value: The value of the variable, which is limited to a maximum of 5000 bytes. The default value is empty.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The name of the variable, which is limited to alphanumeric characters and the special characters `@`, `.`, `-`, and `_`. It can have a maximum of 64 bytes and should not be duplicated.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the variable can have the following values:  - `string`: Represents a string type.  - `json`: Represents a JSON object type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the variable, which is limited to a maximum of 5000 bytes. The default value is empty.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class L4ProxyDdosProtectionConfigArgs:
    def __init__(__self__, *,
                 level_mainland: Optional[pulumi.Input[str]] = None,
                 level_overseas: Optional[pulumi.Input[str]] = None,
                 max_bandwidth_mainland: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] level_mainland: Exclusive DDoS protection specifications in the Chinese mainland. For details, see [Dedicated DDoS Mitigation Fee (Pay-as-You-Go)] (https://intl.cloud.tencent.com/document/product/1552/94162?from_cn_redirect=1). `PLATFORM`: Default protection of the platform, i.e., Exclusive DDoS protection is not enabled; `BASE30_MAX300`: Exclusive DDoS protection enabled, providing a baseline protection bandwidth of 30 Gbps and an elastic protection bandwidth of up to 300 Gbps; `BASE60_MAX600`: Exclusive DDoS protection enabled, providing a baseline protection bandwidth of 60 Gbps and an elastic protection bandwidth of up to 600 Gbps. If no parameters are filled, the default value PLATFORM is used.
        :param pulumi.Input[str] level_overseas: Exclusive DDoS protection specifications in the worldwide region (excluding the Chinese mainland). `PLATFORM`: Default protection of the platform, i.e., Exclusive DDoS protection is not enabled; `ANYCAST300`: Exclusive DDoS protection enabled, offering a total maximum protection bandwidth of 300 Gbps; `ANYCAST_ALLIN`: Exclusive DDoS protection enabled, utilizing all available protection resources for protection. When no parameters are filled, the default value PLATFORM is used.
        :param pulumi.Input[int] max_bandwidth_mainland: Configuration of elastic protection bandwidth for exclusive DDoS protection in the Chinese mainland.Valid only when exclusive DDoS protection in the Chinese mainland is enabled (refer to the LevelMainland parameter configuration), and the value has the following limitations: When exclusive DDoS protection is enabled in the Chinese mainland and the 30 Gbps baseline protection bandwidth is used (the LevelMainland parameter value is BASE30_MAX300): the value range is 30 to 300 in Gbps; When exclusive DDoS protection is enabled in the Chinese mainland and the 60 Gbps baseline protection bandwidth is used (the LevelMainland parameter value is BASE60_MAX600): the value range is 60 to 600 in Gbps; When the default protection of the platform is used (the LevelMainland parameter value is PLATFORM): configuration is not supported, and the value of this parameter is invalid.
        """
        if level_mainland is not None:
            pulumi.set(__self__, "level_mainland", level_mainland)
        if level_overseas is not None:
            pulumi.set(__self__, "level_overseas", level_overseas)
        if max_bandwidth_mainland is not None:
            pulumi.set(__self__, "max_bandwidth_mainland", max_bandwidth_mainland)

    @property
    @pulumi.getter(name="levelMainland")
    def level_mainland(self) -> Optional[pulumi.Input[str]]:
        """
        Exclusive DDoS protection specifications in the Chinese mainland. For details, see [Dedicated DDoS Mitigation Fee (Pay-as-You-Go)] (https://intl.cloud.tencent.com/document/product/1552/94162?from_cn_redirect=1). `PLATFORM`: Default protection of the platform, i.e., Exclusive DDoS protection is not enabled; `BASE30_MAX300`: Exclusive DDoS protection enabled, providing a baseline protection bandwidth of 30 Gbps and an elastic protection bandwidth of up to 300 Gbps; `BASE60_MAX600`: Exclusive DDoS protection enabled, providing a baseline protection bandwidth of 60 Gbps and an elastic protection bandwidth of up to 600 Gbps. If no parameters are filled, the default value PLATFORM is used.
        """
        return pulumi.get(self, "level_mainland")

    @level_mainland.setter
    def level_mainland(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level_mainland", value)

    @property
    @pulumi.getter(name="levelOverseas")
    def level_overseas(self) -> Optional[pulumi.Input[str]]:
        """
        Exclusive DDoS protection specifications in the worldwide region (excluding the Chinese mainland). `PLATFORM`: Default protection of the platform, i.e., Exclusive DDoS protection is not enabled; `ANYCAST300`: Exclusive DDoS protection enabled, offering a total maximum protection bandwidth of 300 Gbps; `ANYCAST_ALLIN`: Exclusive DDoS protection enabled, utilizing all available protection resources for protection. When no parameters are filled, the default value PLATFORM is used.
        """
        return pulumi.get(self, "level_overseas")

    @level_overseas.setter
    def level_overseas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level_overseas", value)

    @property
    @pulumi.getter(name="maxBandwidthMainland")
    def max_bandwidth_mainland(self) -> Optional[pulumi.Input[int]]:
        """
        Configuration of elastic protection bandwidth for exclusive DDoS protection in the Chinese mainland.Valid only when exclusive DDoS protection in the Chinese mainland is enabled (refer to the LevelMainland parameter configuration), and the value has the following limitations: When exclusive DDoS protection is enabled in the Chinese mainland and the 30 Gbps baseline protection bandwidth is used (the LevelMainland parameter value is BASE30_MAX300): the value range is 30 to 300 in Gbps; When exclusive DDoS protection is enabled in the Chinese mainland and the 60 Gbps baseline protection bandwidth is used (the LevelMainland parameter value is BASE60_MAX600): the value range is 60 to 600 in Gbps; When the default protection of the platform is used (the LevelMainland parameter value is PLATFORM): configuration is not supported, and the value of this parameter is invalid.
        """
        return pulumi.get(self, "max_bandwidth_mainland")

    @max_bandwidth_mainland.setter
    def max_bandwidth_mainland(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bandwidth_mainland", value)


@pulumi.input_type
class OriginGroupRecordArgs:
    def __init__(__self__, *,
                 record: pulumi.Input[str],
                 private: Optional[pulumi.Input[bool]] = None,
                 private_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['OriginGroupRecordPrivateParameterArgs']]]] = None,
                 record_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] record: Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
        :param pulumi.Input[bool] private: Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
        :param pulumi.Input[Sequence[pulumi.Input['OriginGroupRecordPrivateParameterArgs']]] private_parameters: Parameters for private authentication. Only valid when `Private` is `true`.
        :param pulumi.Input[str] record_id: Origin record ID.
        :param pulumi.Input[str] type: Origin site type, the values are:
        :param pulumi.Input[int] weight: The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
        """
        pulumi.set(__self__, "record", record)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if private_parameters is not None:
            pulumi.set(__self__, "private_parameters", private_parameters)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def record(self) -> pulumi.Input[str]:
        """
        Origin site record value, does not include port information, can be: IPv4, IPv6, domain name format.
        """
        return pulumi.get(self, "record")

    @record.setter
    def record(self, value: pulumi.Input[str]):
        pulumi.set(self, "record", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to use private authentication, it takes effect when the origin site type RecordType=COS/AWS_S3, the values are:
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="privateParameters")
    def private_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OriginGroupRecordPrivateParameterArgs']]]]:
        """
        Parameters for private authentication. Only valid when `Private` is `true`.
        """
        return pulumi.get(self, "private_parameters")

    @private_parameters.setter
    def private_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OriginGroupRecordPrivateParameterArgs']]]]):
        pulumi.set(self, "private_parameters", value)

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[pulumi.Input[str]]:
        """
        Origin record ID.
        """
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Origin site type, the values are:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight of the origin site, the value is 0-100. If it is not filled in, it means that the weight will not be set and the system will schedule it freely. If it is filled in with 0, it means that the weight is 0 and the traffic will not be scheduled to this origin site.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class OriginGroupRecordPrivateParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Private authentication parameter name, the values are:
        :param pulumi.Input[str] value: Private authentication parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Private authentication parameter name, the values are:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Private authentication parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class OriginGroupReferenceArgs:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] instance_id: The instance ID of the reference type.
        :param pulumi.Input[str] instance_name: Instance name of the application type.
        :param pulumi.Input[str] instance_type: Reference service type, the values are:
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The instance ID of the reference type.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name of the application type.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Reference service type, the values are:
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)


@pulumi.input_type
class RealtimeLogDeliveryClsArgs:
    def __init__(__self__, *,
                 log_set_id: pulumi.Input[str],
                 log_set_region: pulumi.Input[str],
                 topic_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] log_set_id: Tencent Cloud CLS log set ID.
        :param pulumi.Input[str] log_set_region: The region where the Tencent Cloud CLS log set is located.
        :param pulumi.Input[str] topic_id: Tencent Cloud CLS log topic ID.
        """
        pulumi.set(__self__, "log_set_id", log_set_id)
        pulumi.set(__self__, "log_set_region", log_set_region)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> pulumi.Input[str]:
        """
        Tencent Cloud CLS log set ID.
        """
        return pulumi.get(self, "log_set_id")

    @log_set_id.setter
    def log_set_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_set_id", value)

    @property
    @pulumi.getter(name="logSetRegion")
    def log_set_region(self) -> pulumi.Input[str]:
        """
        The region where the Tencent Cloud CLS log set is located.
        """
        return pulumi.get(self, "log_set_region")

    @log_set_region.setter
    def log_set_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_set_region", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        """
        Tencent Cloud CLS log topic ID.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class RealtimeLogDeliveryCustomEndpointArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 access_id: Optional[pulumi.Input[str]] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 compress_type: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomEndpointHeaderArgs']]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: The custom HTTP interface address for real-time log delivery. Currently, only HTTP/HTTPS protocols are supported.
        :param pulumi.Input[str] access_id: Fill in a custom SecretId to generate an encrypted signature. This parameter is required if the source site requires authentication.
        :param pulumi.Input[str] access_key: Fill in the custom SecretKey to generate the encrypted signature. This parameter is required if the source site requires authentication.
        :param pulumi.Input[str] compress_type: Data compression type, the possible values are: `gzip`: use gzip compression. If it is not filled in, compression is not enabled.
        :param pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomEndpointHeaderArgs']]] headers: The custom request header carried when delivering logs. If the header name you fill in is the default header carried by EdgeOne log push, such as Content-Type, then the header value you fill in will overwrite the default value. The header value references a single variable ${batchSize} to obtain the number of logs included in each POST request.
        :param pulumi.Input[str] protocol: When sending logs via POST request, the application layer protocol type used can be: `http`: HTTP protocol; `https`: HTTPS protocol. If not filled in, the protocol type will be parsed according to the filled in URL address.
        """
        pulumi.set(__self__, "url", url)
        if access_id is not None:
            pulumi.set(__self__, "access_id", access_id)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if compress_type is not None:
            pulumi.set(__self__, "compress_type", compress_type)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The custom HTTP interface address for real-time log delivery. Currently, only HTTP/HTTPS protocols are supported.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> Optional[pulumi.Input[str]]:
        """
        Fill in a custom SecretId to generate an encrypted signature. This parameter is required if the source site requires authentication.
        """
        return pulumi.get(self, "access_id")

    @access_id.setter
    def access_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_id", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Fill in the custom SecretKey to generate the encrypted signature. This parameter is required if the source site requires authentication.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="compressType")
    def compress_type(self) -> Optional[pulumi.Input[str]]:
        """
        Data compression type, the possible values are: `gzip`: use gzip compression. If it is not filled in, compression is not enabled.
        """
        return pulumi.get(self, "compress_type")

    @compress_type.setter
    def compress_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compress_type", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomEndpointHeaderArgs']]]]:
        """
        The custom request header carried when delivering logs. If the header name you fill in is the default header carried by EdgeOne log push, such as Content-Type, then the header value you fill in will overwrite the default value. The header value references a single variable ${batchSize} to obtain the number of logs included in each POST request.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomEndpointHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        When sending logs via POST request, the application layer protocol type used can be: `http`: HTTP protocol; `https`: HTTPS protocol. If not filled in, the protocol type will be parsed according to the filled in URL address.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class RealtimeLogDeliveryCustomEndpointHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: HTTP header name.
        :param pulumi.Input[str] value: HTTP header value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        HTTP header name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        HTTP header value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RealtimeLogDeliveryCustomFieldArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Extract data from the specified location in the HTTP request and response. The values are: `ReqHeader`: extract the specified field value from the HTTP request header; `RspHeader`: extract the specified field value from the HTTP response header; `Cookie`: extract the specified field value from the Cookie.
        :param pulumi.Input[str] value: The name of the parameter whose value needs to be extracted, for example: Accept-Language.
        :param pulumi.Input[bool] enabled: Whether to deliver this field. If left blank, this field will not be delivered.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Extract data from the specified location in the HTTP request and response. The values are: `ReqHeader`: extract the specified field value from the HTTP request header; `RspHeader`: extract the specified field value from the HTTP response header; `Cookie`: extract the specified field value from the Cookie.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The name of the parameter whose value needs to be extracted, for example: Accept-Language.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to deliver this field. If left blank, this field will not be delivered.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class RealtimeLogDeliveryDeliveryConditionArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionConditionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionConditionArgs']]] conditions: Log filtering conditions, the detailed filtering conditions are as follows: - `EdgeResponseStatusCode`: filter according to the status code returned by the EdgeOne node to the client. Supported operators: `equal`, `great`, `less`, `great_equal`, `less_equal`; Value range: any integer greater than or equal to 0; - `OriginResponseStatusCode`: filter according to the origin response status code. Supported operators: `equal`, `great`, `less`, `great_equal`, `less_equal`; Value range: any integer greater than or equal to -1; - `SecurityAction`: filter according to the final disposal action after the request hits the security rule. Supported operators: `equal`; Optional options are as follows: `-`: unknown/miss; `Monitor`: observe; `JSChallenge`: JavaScript challenge; `Deny`: intercept; `Allow`: allow; `BlockIP`: IP ban; `Redirect`: redirect; `ReturnCustomPage`: return to a custom page; `ManagedChallenge`: managed challenge; `Silence`: silent; `LongDelay`: respond after a long wait; `ShortDelay`: respond after a short wait; -`SecurityModule`: filter according to the name of the security module that finally handles the request. Supported operators: `equal`; Optional options: `-`: unknown/missed; `CustomRule`: Web Protection - Custom Rules; `RateLimitingCustomRule`: Web Protection - Rate Limiting Rules; `ManagedRule`: Web Protection - Managed Rules; `L7DDoS`: Web Protection - CC Attack Protection; `BotManagement`: Bot Management - Bot Basic Management; `BotClientReputation`: Bot Management - Client Profile Analysis; `BotBehaviorAnalysis`: Bot Management - Bot Intelligent Analysis; `BotCustomRule`: Bot Management - Custom Bot Rules; `BotActiveDetection`: Bot Management - Active Feature Recognition.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionConditionArgs']]]]:
        """
        Log filtering conditions, the detailed filtering conditions are as follows: - `EdgeResponseStatusCode`: filter according to the status code returned by the EdgeOne node to the client. Supported operators: `equal`, `great`, `less`, `great_equal`, `less_equal`; Value range: any integer greater than or equal to 0; - `OriginResponseStatusCode`: filter according to the origin response status code. Supported operators: `equal`, `great`, `less`, `great_equal`, `less_equal`; Value range: any integer greater than or equal to -1; - `SecurityAction`: filter according to the final disposal action after the request hits the security rule. Supported operators: `equal`; Optional options are as follows: `-`: unknown/miss; `Monitor`: observe; `JSChallenge`: JavaScript challenge; `Deny`: intercept; `Allow`: allow; `BlockIP`: IP ban; `Redirect`: redirect; `ReturnCustomPage`: return to a custom page; `ManagedChallenge`: managed challenge; `Silence`: silent; `LongDelay`: respond after a long wait; `ShortDelay`: respond after a short wait; -`SecurityModule`: filter according to the name of the security module that finally handles the request. Supported operators: `equal`; Optional options: `-`: unknown/missed; `CustomRule`: Web Protection - Custom Rules; `RateLimitingCustomRule`: Web Protection - Rate Limiting Rules; `ManagedRule`: Web Protection - Managed Rules; `L7DDoS`: Web Protection - CC Attack Protection; `BotManagement`: Bot Management - Bot Basic Management; `BotClientReputation`: Bot Management - Client Profile Analysis; `BotBehaviorAnalysis`: Bot Management - Bot Intelligent Analysis; `BotCustomRule`: Bot Management - Custom Bot Rules; `BotActiveDetection`: Bot Management - Active Feature Recognition.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class RealtimeLogDeliveryDeliveryConditionConditionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] key: The key of the filter condition.
        :param pulumi.Input[str] operator: Query condition operator, operation types are: `equals`: equal; `notEquals`: not equal; `include`: include; `notInclude`: not include; `startWith`: start with value; `notStartWith`: not start with value; `endWith`: end with value; `notEndWith`: not end with value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The value of the filter condition.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the filter condition.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Query condition operator, operation types are: `equals`: equal; `notEquals`: not equal; `include`: include; `notInclude`: not include; `startWith`: start with value; `notStartWith`: not start with value; `endWith`: end with value; `notEndWith`: not end with value.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The value of the filter condition.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RealtimeLogDeliveryLogFormatArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 batch_prefix: Optional[pulumi.Input[str]] = None,
                 batch_suffix: Optional[pulumi.Input[str]] = None,
                 field_delimiter: Optional[pulumi.Input[str]] = None,
                 record_delimiter: Optional[pulumi.Input[str]] = None,
                 record_prefix: Optional[pulumi.Input[str]] = None,
                 record_suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] format_type: The default output format type for log delivery. The possible values are: `json`: Use the default log output format JSON Lines. The fields in a single log are presented as key-value pairs; `csv`: Use the default log output format csv. Only field values are presented in a single log, without field names.
        :param pulumi.Input[str] batch_prefix: A string to be added before each log delivery batch. Each log delivery batch may contain multiple log records.
        :param pulumi.Input[str] batch_suffix: A string to append after each log delivery batch.
        :param pulumi.Input[str] field_delimiter: In a single log record, a string is inserted between fields as a separator. The possible values are: `	`: tab character; `,`: comma; `;`: semicolon.
        :param pulumi.Input[str] record_delimiter: The string inserted between log records as a separator. The possible values are: `
               `: newline character; `	`: tab character; `,`: comma.
        :param pulumi.Input[str] record_prefix: A string to prepend to each log record.
        :param pulumi.Input[str] record_suffix: A string to append to each log record.
               
               The `s3` object supports the following:
        """
        pulumi.set(__self__, "format_type", format_type)
        if batch_prefix is not None:
            pulumi.set(__self__, "batch_prefix", batch_prefix)
        if batch_suffix is not None:
            pulumi.set(__self__, "batch_suffix", batch_suffix)
        if field_delimiter is not None:
            pulumi.set(__self__, "field_delimiter", field_delimiter)
        if record_delimiter is not None:
            pulumi.set(__self__, "record_delimiter", record_delimiter)
        if record_prefix is not None:
            pulumi.set(__self__, "record_prefix", record_prefix)
        if record_suffix is not None:
            pulumi.set(__self__, "record_suffix", record_suffix)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        """
        The default output format type for log delivery. The possible values are: `json`: Use the default log output format JSON Lines. The fields in a single log are presented as key-value pairs; `csv`: Use the default log output format csv. Only field values are presented in a single log, without field names.
        """
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="batchPrefix")
    def batch_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        A string to be added before each log delivery batch. Each log delivery batch may contain multiple log records.
        """
        return pulumi.get(self, "batch_prefix")

    @batch_prefix.setter
    def batch_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "batch_prefix", value)

    @property
    @pulumi.getter(name="batchSuffix")
    def batch_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        A string to append after each log delivery batch.
        """
        return pulumi.get(self, "batch_suffix")

    @batch_suffix.setter
    def batch_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "batch_suffix", value)

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        In a single log record, a string is inserted between fields as a separator. The possible values are: `	`: tab character; `,`: comma; `;`: semicolon.
        """
        return pulumi.get(self, "field_delimiter")

    @field_delimiter.setter
    def field_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_delimiter", value)

    @property
    @pulumi.getter(name="recordDelimiter")
    def record_delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        The string inserted between log records as a separator. The possible values are: `
        `: newline character; `	`: tab character; `,`: comma.
        """
        return pulumi.get(self, "record_delimiter")

    @record_delimiter.setter
    def record_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_delimiter", value)

    @property
    @pulumi.getter(name="recordPrefix")
    def record_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        A string to prepend to each log record.
        """
        return pulumi.get(self, "record_prefix")

    @record_prefix.setter
    def record_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_prefix", value)

    @property
    @pulumi.getter(name="recordSuffix")
    def record_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        A string to append to each log record.

        The `s3` object supports the following:
        """
        return pulumi.get(self, "record_suffix")

    @record_suffix.setter
    def record_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_suffix", value)


@pulumi.input_type
class RealtimeLogDeliveryS3Args:
    def __init__(__self__, *,
                 access_id: pulumi.Input[str],
                 access_key: pulumi.Input[str],
                 bucket: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 region: pulumi.Input[str],
                 compress_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_id: Fill in a custom SecretId to generate an encrypted signature. This parameter is required if the source site requires authentication.
        :param pulumi.Input[str] access_key: Fill in the custom SecretKey to generate the encrypted signature. This parameter is required if the source site requires authentication.
        :param pulumi.Input[str] bucket: Bucket name and log storage directory, for example: `your_bucket_name/EO-logs/`. If this directory does not exist in the bucket, it will be created automatically.
        :param pulumi.Input[str] endpoint: URLs that do not include bucket names or paths, for example: `https://storage.googleapis.com`, `https://s3.ap-northeast-2.amazonaws.com`, `https://cos.ap-nanjing.myqcloud.com`.
        :param pulumi.Input[str] region: The region where the bucket is located, for example: ap-northeast-2.
        :param pulumi.Input[str] compress_type: Data compression type, the possible values are: `gzip`: use gzip compression. If it is not filled in, compression is not enabled.
        """
        pulumi.set(__self__, "access_id", access_id)
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "region", region)
        if compress_type is not None:
            pulumi.set(__self__, "compress_type", compress_type)

    @property
    @pulumi.getter(name="accessId")
    def access_id(self) -> pulumi.Input[str]:
        """
        Fill in a custom SecretId to generate an encrypted signature. This parameter is required if the source site requires authentication.
        """
        return pulumi.get(self, "access_id")

    @access_id.setter
    def access_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_id", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        """
        Fill in the custom SecretKey to generate the encrypted signature. This parameter is required if the source site requires authentication.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Bucket name and log storage directory, for example: `your_bucket_name/EO-logs/`. If this directory does not exist in the bucket, it will be created automatically.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        URLs that do not include bucket names or paths, for example: `https://storage.googleapis.com`, `https://s3.ap-northeast-2.amazonaws.com`, `https://cos.ap-nanjing.myqcloud.com`.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        The region where the bucket is located, for example: ap-northeast-2.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="compressType")
    def compress_type(self) -> Optional[pulumi.Input[str]]:
        """
        Data compression type, the possible values are: `gzip`: use gzip compression. If it is not filled in, compression is not enabled.
        """
        return pulumi.get(self, "compress_type")

    @compress_type.setter
    def compress_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compress_type", value)


@pulumi.input_type
class RuleEngineRuleArgs:
    def __init__(__self__, *,
                 ors: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]]] = None,
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]] ors: OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]] actions: Feature to be executed.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]] sub_rules: The nested rule.
        """
        pulumi.set(__self__, "ors", ors)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if sub_rules is not None:
            pulumi.set(__self__, "sub_rules", sub_rules)

    @property
    @pulumi.getter
    def ors(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]]:
        """
        OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        """
        return pulumi.get(self, "ors")

    @ors.setter
    def ors(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]]):
        pulumi.set(self, "ors", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]]]:
        """
        Feature to be executed.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]]]:
        """
        The nested rule.
        """
        return pulumi.get(self, "sub_rules")

    @sub_rules.setter
    def sub_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]]]):
        pulumi.set(self, "sub_rules", value)


@pulumi.input_type
class RuleEngineRuleActionArgs:
    def __init__(__self__, *,
                 code_action: Optional[pulumi.Input['RuleEngineRuleActionCodeActionArgs']] = None,
                 normal_action: Optional[pulumi.Input['RuleEngineRuleActionNormalActionArgs']] = None,
                 rewrite_action: Optional[pulumi.Input['RuleEngineRuleActionRewriteActionArgs']] = None):
        """
        :param pulumi.Input['RuleEngineRuleActionCodeActionArgs'] code_action: Feature operation with a status code. Features of this type include:
        :param pulumi.Input['RuleEngineRuleActionNormalActionArgs'] normal_action: Common operation. Values:
        :param pulumi.Input['RuleEngineRuleActionRewriteActionArgs'] rewrite_action: Feature operation with a request/response header. Features of this type include:
        """
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional[pulumi.Input['RuleEngineRuleActionCodeActionArgs']]:
        """
        Feature operation with a status code. Features of this type include:
        """
        return pulumi.get(self, "code_action")

    @code_action.setter
    def code_action(self, value: Optional[pulumi.Input['RuleEngineRuleActionCodeActionArgs']]):
        pulumi.set(self, "code_action", value)

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional[pulumi.Input['RuleEngineRuleActionNormalActionArgs']]:
        """
        Common operation. Values:
        """
        return pulumi.get(self, "normal_action")

    @normal_action.setter
    def normal_action(self, value: Optional[pulumi.Input['RuleEngineRuleActionNormalActionArgs']]):
        pulumi.set(self, "normal_action", value)

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional[pulumi.Input['RuleEngineRuleActionRewriteActionArgs']]:
        """
        Feature operation with a request/response header. Features of this type include:
        """
        return pulumi.get(self, "rewrite_action")

    @rewrite_action.setter
    def rewrite_action(self, value: Optional[pulumi.Input['RuleEngineRuleActionRewriteActionArgs']]):
        pulumi.set(self, "rewrite_action", value)


@pulumi.input_type
class RuleEngineRuleActionCodeActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]] parameters: Operation parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]]:
        """
        Operation parameter.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleActionCodeActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 status_code: pulumi.Input[int],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[int] status_code: The status code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[int]:
        """
        The status code.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleActionNormalActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]] parameters: Parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]]:
        """
        Parameter.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleActionNormalActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleActionRewriteActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]] parameters: Parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]]:
        """
        Parameter.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleActionRewriteActionParameterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] action: Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
               - add: Add the HTTP header.
               - set: Rewrite the HTTP header.
               - del: Delete the HTTP header.
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter value.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
        - add: Add the HTTP header.
        - set: Rewrite the HTTP header.
        - del: Delete the HTTP header.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleOrArgs:
    def __init__(__self__, *,
                 ands: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]] ands: Rule engine condition. This condition will be considered met if all items in the array are met.
        """
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]]:
        """
        Rule engine condition. This condition will be considered met if all items in the array are met.
        """
        return pulumi.get(self, "ands")

    @ands.setter
    def ands(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]]):
        pulumi.set(self, "ands", value)


@pulumi.input_type
class RuleEngineRuleOrAndArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 target: pulumi.Input[str],
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] operator: Operator. Valid values:
        :param pulumi.Input[str] target: The match type. Values:
        :param pulumi.Input[bool] ignore_case: Whether the parameter value is case insensitive. Default value: false.
        :param pulumi.Input[str] name: The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
               - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
               - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
               - When `Target=all`, it indicates any site request.
               - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
               - When `Target=url`, enter the partial URL path under the current site, such as "/example".
               - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
               - When `Target=client_country`, enter the ISO-3166 country/region code.
               - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
               - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Operator. Valid values:
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        The match type. Values:
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the parameter value is case insensitive. Default value: false.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
        - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
        - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
        - When `Target=all`, it indicates any site request.
        - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
        - When `Target=url`, enter the partial URL path under the current site, such as "/example".
        - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
        - When `Target=client_country`, enter the ISO-3166 country/region code.
        - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
        - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleSubRuleArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]] rules: Nested rule settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tag of the rule.
        """
        pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]]:
        """
        Nested rule settings.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tag of the rule.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleArgs:
    def __init__(__self__, *,
                 ors: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]] ors: OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]] actions: Feature to be executed.
        """
        pulumi.set(__self__, "ors", ors)
        if actions is not None:
            pulumi.set(__self__, "actions", actions)

    @property
    @pulumi.getter
    def ors(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]]:
        """
        OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
        """
        return pulumi.get(self, "ors")

    @ors.setter
    def ors(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]]):
        pulumi.set(self, "ors", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]]]:
        """
        Feature to be executed.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]]]):
        pulumi.set(self, "actions", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionArgs:
    def __init__(__self__, *,
                 code_action: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs']] = None,
                 normal_action: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs']] = None,
                 rewrite_action: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs']] = None):
        """
        :param pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs'] code_action: Feature operation with a status code. Features of this type include:
        :param pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs'] normal_action: Common operation. Values:
        :param pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs'] rewrite_action: Feature operation with a request/response header. Features of this type include:
        """
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs']]:
        """
        Feature operation with a status code. Features of this type include:
        """
        return pulumi.get(self, "code_action")

    @code_action.setter
    def code_action(self, value: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs']]):
        pulumi.set(self, "code_action", value)

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs']]:
        """
        Common operation. Values:
        """
        return pulumi.get(self, "normal_action")

    @normal_action.setter
    def normal_action(self, value: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs']]):
        pulumi.set(self, "normal_action", value)

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs']]:
        """
        Feature operation with a request/response header. Features of this type include:
        """
        return pulumi.get(self, "rewrite_action")

    @rewrite_action.setter
    def rewrite_action(self, value: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs']]):
        pulumi.set(self, "rewrite_action", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionCodeActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]] parameters: Operation parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]]:
        """
        Operation parameter.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 status_code: pulumi.Input[int],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[int] status_code: The status code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[int]:
        """
        The status code.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionNormalActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]] parameters: Parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]]:
        """
        Parameter.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionRewriteActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]]):
        """
        :param pulumi.Input[str] action: Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]] parameters: Parameter.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Feature name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the feature name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]]:
        """
        Parameter.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] action: Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
               - add: Add the HTTP header.
               - set: Rewrite the HTTP header.
               - del: Delete the HTTP header.
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Parameter value.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Feature parameter name. You can call the [DescribeRulesSetting](https://tcloud4api.woa.com/document/product/1657/79433?!preview&!document=1) API to view the requirements for entering the parameter name, which has three values:
        - add: Add the HTTP header.
        - set: Rewrite the HTTP header.
        - del: Delete the HTTP header.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleOrArgs:
    def __init__(__self__, *,
                 ands: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]] ands: Rule engine condition. This condition will be considered met if all items in the array are met.
        """
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]]:
        """
        Rule engine condition. This condition will be considered met if all items in the array are met.
        """
        return pulumi.get(self, "ands")

    @ands.setter
    def ands(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]]):
        pulumi.set(self, "ands", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleOrAndArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 target: pulumi.Input[str],
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] operator: Operator. Valid values:
        :param pulumi.Input[str] target: The match type. Values:
        :param pulumi.Input[bool] ignore_case: Whether the parameter value is case insensitive. Default value: false.
        :param pulumi.Input[str] name: The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
               - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
               - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
               - When `Target=all`, it indicates any site request.
               - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
               - When `Target=url`, enter the partial URL path under the current site, such as "/example".
               - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
               - When `Target=client_country`, enter the ISO-3166 country/region code.
               - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
               - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Operator. Valid values:
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        The match type. Values:
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the parameter value is case insensitive. Default value: false.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The parameter name of the match type. This field is required only when `Target=query_string/request_header`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The parameter value of the match type. It can be an empty string only when `Target=query string/request header` and `Operator=exist/notexist`.
        - When `Target=extension`, enter the file extension, such as "jpg" and "txt".
        - When `Target=filename`, enter the file name, such as "foo" in "foo.jpg".
        - When `Target=all`, it indicates any site request.
        - When `Target=host`, enter the host under the current site, such as "www.maxx55.com".
        - When `Target=url`, enter the partial URL path under the current site, such as "/example".
        - When `Target=full_url`, enter the complete URL under the current site. It must contain the HTTP protocol, host, and path, such as "https://www.maxx55.cn/example".
        - When `Target=client_country`, enter the ISO-3166 country/region code.
        - When `Target=query_string`, enter the value of the query string, such as "cn" and "1" in "lang=cn&version=1".
        - When `Target=request_header`, enter the HTTP request header value, such as "zh-CN,zh;q=0.9" in the "Accept-Language:zh-CN,zh;q=0.9" header.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class SecurityIpGroupIpGroupArgs:
    def __init__(__self__, *,
                 contents: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 group_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contents: IP group content. Only supports IP and IP mask.
        :param pulumi.Input[str] name: Group name.
        :param pulumi.Input[int] group_id: Group ID.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "name", name)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)

    @property
    @pulumi.getter
    def contents(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        IP group content. Only supports IP and IP mask.
        """
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        """
        Group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)


@pulumi.input_type
class ZoneOwnershipVerificationArgs:
    def __init__(__self__, *,
                 dns_verifications: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneOwnershipVerificationDnsVerificationArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ZoneOwnershipVerificationDnsVerificationArgs']]] dns_verifications: CNAME access, using DNS to resolve the information required for authentication. For details, please refer to [Site/Domain Name Ownership Verification ](https://cloud.tencent.com/document/product/1552/70789#7af6ecf8-afca-4e35-8811-b5797ed1bde5). Note: This field may return null, indicating that no valid value can be obtained.
        """
        if dns_verifications is not None:
            pulumi.set(__self__, "dns_verifications", dns_verifications)

    @property
    @pulumi.getter(name="dnsVerifications")
    def dns_verifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneOwnershipVerificationDnsVerificationArgs']]]]:
        """
        CNAME access, using DNS to resolve the information required for authentication. For details, please refer to [Site/Domain Name Ownership Verification ](https://cloud.tencent.com/document/product/1552/70789#7af6ecf8-afca-4e35-8811-b5797ed1bde5). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "dns_verifications")

    @dns_verifications.setter
    def dns_verifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneOwnershipVerificationDnsVerificationArgs']]]]):
        pulumi.set(self, "dns_verifications", value)


@pulumi.input_type
class ZoneOwnershipVerificationDnsVerificationArgs:
    def __init__(__self__, *,
                 record_type: Optional[pulumi.Input[str]] = None,
                 record_value: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] record_type: Record type.
        :param pulumi.Input[str] record_value: Record the value.
        :param pulumi.Input[str] subdomain: Host record.
        """
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if record_value is not None:
            pulumi.set(__self__, "record_value", record_value)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[str]]:
        """
        Record type.
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> Optional[pulumi.Input[str]]:
        """
        Record the value.
        """
        return pulumi.get(self, "record_value")

    @record_value.setter
    def record_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_value", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Host record.
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)


@pulumi.input_type
class ZoneSettingCacheArgs:
    def __init__(__self__, *,
                 cache: Optional[pulumi.Input['ZoneSettingCacheCacheArgs']] = None,
                 follow_origin: Optional[pulumi.Input['ZoneSettingCacheFollowOriginArgs']] = None,
                 no_cache: Optional[pulumi.Input['ZoneSettingCacheNoCacheArgs']] = None):
        """
        :param pulumi.Input['ZoneSettingCacheCacheArgs'] cache: Cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input['ZoneSettingCacheFollowOriginArgs'] follow_origin: Follows the origin server configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input['ZoneSettingCacheNoCacheArgs'] no_cache: No-cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if no_cache is not None:
            pulumi.set(__self__, "no_cache", no_cache)

    @property
    @pulumi.getter
    def cache(self) -> Optional[pulumi.Input['ZoneSettingCacheCacheArgs']]:
        """
        Cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cache")

    @cache.setter
    def cache(self, value: Optional[pulumi.Input['ZoneSettingCacheCacheArgs']]):
        pulumi.set(self, "cache", value)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[pulumi.Input['ZoneSettingCacheFollowOriginArgs']]:
        """
        Follows the origin server configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "follow_origin")

    @follow_origin.setter
    def follow_origin(self, value: Optional[pulumi.Input['ZoneSettingCacheFollowOriginArgs']]):
        pulumi.set(self, "follow_origin", value)

    @property
    @pulumi.getter(name="noCache")
    def no_cache(self) -> Optional[pulumi.Input['ZoneSettingCacheNoCacheArgs']]:
        """
        No-cache configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "no_cache")

    @no_cache.setter
    def no_cache(self, value: Optional[pulumi.Input['ZoneSettingCacheNoCacheArgs']]):
        pulumi.set(self, "no_cache", value)


@pulumi.input_type
class ZoneSettingCacheCacheArgs:
    def __init__(__self__, *,
                 cache_time: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] cache_time: Cache expiration time settings.
               Unit: second. The maximum value is 365 days. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] switch: Cache configuration switch.
        """
        if cache_time is not None:
            pulumi.set(__self__, "cache_time", cache_time)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> Optional[pulumi.Input[int]]:
        """
        Cache expiration time settings.
        Unit: second. The maximum value is 365 days. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cache_time")

    @cache_time.setter
    def cache_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_time", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Cache configuration switch.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingCacheFollowOriginArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Specifies whether to follow the origin server configuration.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to follow the origin server configuration.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingCacheKeyArgs:
    def __init__(__self__, *,
                 full_url_cache: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[str]] = None,
                 query_string: Optional[pulumi.Input['ZoneSettingCacheKeyQueryStringArgs']] = None):
        """
        :param pulumi.Input[str] full_url_cache: Specifies whether to enable full-path cache.
        :param pulumi.Input[str] ignore_case: Specifies whether the cache key is case-sensitive. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input['ZoneSettingCacheKeyQueryStringArgs'] query_string: Request parameter contained in CacheKey. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to enable full-path cache.
        """
        return pulumi.get(self, "full_url_cache")

    @full_url_cache.setter
    def full_url_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_url_cache", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the cache key is case-sensitive. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[pulumi.Input['ZoneSettingCacheKeyQueryStringArgs']]:
        """
        Request parameter contained in CacheKey. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[pulumi.Input['ZoneSettingCacheKeyQueryStringArgs']]):
        pulumi.set(self, "query_string", value)


@pulumi.input_type
class ZoneSettingCacheKeyQueryStringArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] switch: Whether to use QueryString as part of CacheKey.
        :param pulumi.Input[str] action: `includeCustom`: Include the specified query strings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Array of query strings used/excluded. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to use QueryString as part of CacheKey.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        `includeCustom`: Include the specified query strings.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of query strings used/excluded. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ZoneSettingCacheNoCacheArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Whether to cache the configuration.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to cache the configuration.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingCachePrefreshArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 percent: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Specifies whether to enable cache prefresh.
        :param pulumi.Input[int] percent: Percentage of cache time before try to prefresh. Valid value range: 1-99.
        """
        pulumi.set(__self__, "switch", switch)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Specifies whether to enable cache prefresh.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage of cache time before try to prefresh. Valid value range: 1-99.
        """
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percent", value)


@pulumi.input_type
class ZoneSettingClientIpHeaderArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 header_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Specifies whether to enable client IP header.
        :param pulumi.Input[str] header_name: Name of the origin-pull client IP request header. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Specifies whether to enable client IP header.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the origin-pull client IP request header. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)


@pulumi.input_type
class ZoneSettingCompressionArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] switch: Whether to enable Smart compression.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] algorithms: Compression algorithms to select. Valid values: `brotli`, `gzip`.
        """
        pulumi.set(__self__, "switch", switch)
        if algorithms is not None:
            pulumi.set(__self__, "algorithms", algorithms)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable Smart compression.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Compression algorithms to select. Valid values: `brotli`, `gzip`.
        """
        return pulumi.get(self, "algorithms")

    @algorithms.setter
    def algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "algorithms", value)


@pulumi.input_type
class ZoneSettingForceRedirectArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 redirect_status_code: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Whether to enable force redirect.
        :param pulumi.Input[int] redirect_status_code: Redirection status code.
               - 301
               - 302 Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable force redirect.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[pulumi.Input[int]]:
        """
        Redirection status code.
        - 301
        - 302 Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "redirect_status_code")

    @redirect_status_code.setter
    def redirect_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redirect_status_code", value)


@pulumi.input_type
class ZoneSettingHttpsArgs:
    def __init__(__self__, *,
                 hsts: Optional[pulumi.Input['ZoneSettingHttpsHstsArgs']] = None,
                 http2: Optional[pulumi.Input[str]] = None,
                 ocsp_stapling: Optional[pulumi.Input[str]] = None,
                 tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ZoneSettingHttpsHstsArgs'] hsts: HSTS Configuration. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] http2: HTTP2 configuration switch.
        :param pulumi.Input[str] ocsp_stapling: OCSP configuration switch.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tls_versions: TLS version settings. Valid values: `TLSv1`, `TLSV1.1`, `TLSV1.2`, and `TLSv1.3`.
               Only consecutive versions can be enabled at the same time. Note: This field may return null, indicating that no valid value can be obtained.
               
               The `ipv6` object supports the following:
        """
        if hsts is not None:
            pulumi.set(__self__, "hsts", hsts)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)

    @property
    @pulumi.getter
    def hsts(self) -> Optional[pulumi.Input['ZoneSettingHttpsHstsArgs']]:
        """
        HSTS Configuration. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "hsts")

    @hsts.setter
    def hsts(self, value: Optional[pulumi.Input['ZoneSettingHttpsHstsArgs']]):
        pulumi.set(self, "hsts", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP2 configuration switch.
        """
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http2", value)

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[pulumi.Input[str]]:
        """
        OCSP configuration switch.
        """
        return pulumi.get(self, "ocsp_stapling")

    @ocsp_stapling.setter
    def ocsp_stapling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_stapling", value)

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TLS version settings. Valid values: `TLSv1`, `TLSV1.1`, `TLSV1.2`, and `TLSv1.3`.
        Only consecutive versions can be enabled at the same time. Note: This field may return null, indicating that no valid value can be obtained.

        The `ipv6` object supports the following:
        """
        return pulumi.get(self, "tls_versions")

    @tls_versions.setter
    def tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_versions", value)


@pulumi.input_type
class ZoneSettingHttpsHstsArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 include_sub_domains: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 preload: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: `on`: Enable.
        :param pulumi.Input[str] include_sub_domains: Specifies whether to include subdomain names. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] max_age: MaxAge value in seconds, should be no more than 1 day. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] preload: Specifies whether to preload. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if include_sub_domains is not None:
            pulumi.set(__self__, "include_sub_domains", include_sub_domains)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        `on`: Enable.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to include subdomain names. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "include_sub_domains")

    @include_sub_domains.setter
    def include_sub_domains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_sub_domains", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        MaxAge value in seconds, should be no more than 1 day. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def preload(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to preload. Valid values: `on` and `off`. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "preload")

    @preload.setter
    def preload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preload", value)


@pulumi.input_type
class ZoneSettingIpv6Args:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: Cache configuration switch.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Cache configuration switch.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingMaxAgeArgs:
    def __init__(__self__, *,
                 follow_origin: Optional[pulumi.Input[str]] = None,
                 max_age_time: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] follow_origin: Specifies whether to follow the max cache age of the origin server.
        :param pulumi.Input[int] max_age_time: Specifies the max age of the cache (in seconds). The maximum value is 365 days. Note: the value 0 means not to cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if max_age_time is not None:
            pulumi.set(__self__, "max_age_time", max_age_time)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to follow the max cache age of the origin server.
        """
        return pulumi.get(self, "follow_origin")

    @follow_origin.setter
    def follow_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "follow_origin", value)

    @property
    @pulumi.getter(name="maxAgeTime")
    def max_age_time(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the max age of the cache (in seconds). The maximum value is 365 days. Note: the value 0 means not to cache. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_age_time")

    @max_age_time.setter
    def max_age_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age_time", value)


@pulumi.input_type
class ZoneSettingOfflineCacheArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: Whether to enable offline cache.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable offline cache.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingOriginArgs:
    def __init__(__self__, *,
                 backup_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 origin_pull_protocol: Optional[pulumi.Input[str]] = None,
                 origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_origins: Backup origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] origin_pull_protocol: Origin-pull protocol.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] origins: Origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if backup_origins is not None:
            pulumi.set(__self__, "backup_origins", backup_origins)
        if origin_pull_protocol is not None:
            pulumi.set(__self__, "origin_pull_protocol", origin_pull_protocol)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="backupOrigins")
    def backup_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Backup origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "backup_origins")

    @backup_origins.setter
    def backup_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_origins", value)

    @property
    @pulumi.getter(name="originPullProtocol")
    def origin_pull_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Origin-pull protocol.
        """
        return pulumi.get(self, "origin_pull_protocol")

    @origin_pull_protocol.setter
    def origin_pull_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_pull_protocol", value)

    @property
    @pulumi.getter
    def origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Origin sites list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "origins", value)


@pulumi.input_type
class ZoneSettingPostMaxSizeArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 max_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Specifies whether to enable custom setting of the maximum file size.
        :param pulumi.Input[int] max_size: Maximum size. Value range: 1-500 MB. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "switch", switch)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Specifies whether to enable custom setting of the maximum file size.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size. Value range: 1-500 MB. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)


@pulumi.input_type
class ZoneSettingQuicArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: Whether to enable QUIC.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable QUIC.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingSmartRoutingArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: Whether to enable HTTP2 origin-pull.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable HTTP2 origin-pull.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingUpstreamHttp2Args:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        """
        :param pulumi.Input[str] switch: Cache configuration switch.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Cache configuration switch.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingWebSocketArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Whether to enable custom WebSocket timeout setting. When it's off: it means to keep the default WebSocket connection timeout period, which is 15 seconds. To change the timeout period, please set it to on.
        :param pulumi.Input[int] timeout: Sets timeout period in seconds. Maximum value: 120.
        """
        pulumi.set(__self__, "switch", switch)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Whether to enable custom WebSocket timeout setting. When it's off: it means to keep the default WebSocket connection timeout period, which is 15 seconds. To change the timeout period, please set it to on.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Sets timeout period in seconds. Maximum value: 120.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


