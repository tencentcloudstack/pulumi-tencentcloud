# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetStoragesSetResult',
    'AwaitableGetStoragesSetResult',
    'get_storages_set',
    'get_storages_set_output',
]

@pulumi.output_type
class GetStoragesSetResult:
    """
    A collection of values returned by getStoragesSet.
    """
    def __init__(__self__, availability_zone=None, charge_types=None, dedicated_cluster_id=None, id=None, instance_ips=None, instance_names=None, portable=None, project_id=None, result_output_file=None, storage_id=None, storage_lists=None, storage_name=None, storage_states=None, storage_type=None, storage_usage=None, tag_keys=None, tag_values=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if charge_types and not isinstance(charge_types, list):
            raise TypeError("Expected argument 'charge_types' to be a list")
        pulumi.set(__self__, "charge_types", charge_types)
        if dedicated_cluster_id and not isinstance(dedicated_cluster_id, str):
            raise TypeError("Expected argument 'dedicated_cluster_id' to be a str")
        pulumi.set(__self__, "dedicated_cluster_id", dedicated_cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_ips and not isinstance(instance_ips, list):
            raise TypeError("Expected argument 'instance_ips' to be a list")
        pulumi.set(__self__, "instance_ips", instance_ips)
        if instance_names and not isinstance(instance_names, list):
            raise TypeError("Expected argument 'instance_names' to be a list")
        pulumi.set(__self__, "instance_names", instance_names)
        if portable and not isinstance(portable, bool):
            raise TypeError("Expected argument 'portable' to be a bool")
        pulumi.set(__self__, "portable", portable)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if storage_id and not isinstance(storage_id, str):
            raise TypeError("Expected argument 'storage_id' to be a str")
        pulumi.set(__self__, "storage_id", storage_id)
        if storage_lists and not isinstance(storage_lists, list):
            raise TypeError("Expected argument 'storage_lists' to be a list")
        pulumi.set(__self__, "storage_lists", storage_lists)
        if storage_name and not isinstance(storage_name, str):
            raise TypeError("Expected argument 'storage_name' to be a str")
        pulumi.set(__self__, "storage_name", storage_name)
        if storage_states and not isinstance(storage_states, list):
            raise TypeError("Expected argument 'storage_states' to be a list")
        pulumi.set(__self__, "storage_states", storage_states)
        if storage_type and not isinstance(storage_type, str):
            raise TypeError("Expected argument 'storage_type' to be a str")
        pulumi.set(__self__, "storage_type", storage_type)
        if storage_usage and not isinstance(storage_usage, str):
            raise TypeError("Expected argument 'storage_usage' to be a str")
        pulumi.set(__self__, "storage_usage", storage_usage)
        if tag_keys and not isinstance(tag_keys, list):
            raise TypeError("Expected argument 'tag_keys' to be a list")
        pulumi.set(__self__, "tag_keys", tag_keys)
        if tag_values and not isinstance(tag_values, list):
            raise TypeError("Expected argument 'tag_values' to be a list")
        pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The zone of CBS.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeTypes")
    def charge_types(self) -> Optional[Sequence[str]]:
        """
        Pay type of the CBS instance.
        """
        return pulumi.get(self, "charge_types")

    @property
    @pulumi.getter(name="dedicatedClusterId")
    def dedicated_cluster_id(self) -> Optional[str]:
        """
        Exclusive cluster id.
        """
        return pulumi.get(self, "dedicated_cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceIps")
    def instance_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_ips")

    @property
    @pulumi.getter(name="instanceNames")
    def instance_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_names")

    @property
    @pulumi.getter
    def portable(self) -> Optional[bool]:
        return pulumi.get(self, "portable")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        ID of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> Optional[str]:
        """
        ID of CBS.
        """
        return pulumi.get(self, "storage_id")

    @property
    @pulumi.getter(name="storageLists")
    def storage_lists(self) -> Sequence['outputs.GetStoragesSetStorageListResult']:
        """
        A list of storage. Each element contains the following attributes:
        """
        return pulumi.get(self, "storage_lists")

    @property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> Optional[str]:
        """
        Name of CBS.
        """
        return pulumi.get(self, "storage_name")

    @property
    @pulumi.getter(name="storageStates")
    def storage_states(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "storage_states")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        """
        Types of storage medium.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="storageUsage")
    def storage_usage(self) -> Optional[str]:
        """
        Types of CBS.
        """
        return pulumi.get(self, "storage_usage")

    @property
    @pulumi.getter(name="tagKeys")
    def tag_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_keys")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_values")


class AwaitableGetStoragesSetResult(GetStoragesSetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStoragesSetResult(
            availability_zone=self.availability_zone,
            charge_types=self.charge_types,
            dedicated_cluster_id=self.dedicated_cluster_id,
            id=self.id,
            instance_ips=self.instance_ips,
            instance_names=self.instance_names,
            portable=self.portable,
            project_id=self.project_id,
            result_output_file=self.result_output_file,
            storage_id=self.storage_id,
            storage_lists=self.storage_lists,
            storage_name=self.storage_name,
            storage_states=self.storage_states,
            storage_type=self.storage_type,
            storage_usage=self.storage_usage,
            tag_keys=self.tag_keys,
            tag_values=self.tag_values)


def get_storages_set(availability_zone: Optional[str] = None,
                     charge_types: Optional[Sequence[str]] = None,
                     dedicated_cluster_id: Optional[str] = None,
                     instance_ips: Optional[Sequence[str]] = None,
                     instance_names: Optional[Sequence[str]] = None,
                     portable: Optional[bool] = None,
                     project_id: Optional[int] = None,
                     result_output_file: Optional[str] = None,
                     storage_id: Optional[str] = None,
                     storage_name: Optional[str] = None,
                     storage_states: Optional[Sequence[str]] = None,
                     storage_type: Optional[str] = None,
                     storage_usage: Optional[str] = None,
                     tag_keys: Optional[Sequence[str]] = None,
                     tag_values: Optional[Sequence[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStoragesSetResult:
    """
    Use this data source to query detailed information of CBS storages in parallel.

    ## Example Usage

    ### Query CBS by storage set by zone

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Cbs.get_storages_set(availability_zone="ap-guangzhou-3")
    ```
    <!--End PulumiCodeChooser -->


    :param str availability_zone: The available zone that the CBS instance locates at.
    :param Sequence[str] charge_types: List filter by disk charge type (`POSTPAID_BY_HOUR` | `PREPAID` | `CDCPAID` | `DEDICATED_CLUSTER_PAID`).
    :param str dedicated_cluster_id: Exclusive cluster id.
    :param Sequence[str] instance_ips: List filter by attached instance public or private IPs.
    :param Sequence[str] instance_names: List filter by attached instance name.
    :param bool portable: Filter by whether the disk is portable (Boolean `true` or `false`).
    :param int project_id: ID of the project with which the CBS is associated.
    :param str result_output_file: Used to save results.
    :param str storage_id: ID of the CBS to be queried.
    :param str storage_name: Name of the CBS to be queried.
    :param Sequence[str] storage_states: List filter by disk state (`UNATTACHED` | `ATTACHING` | `ATTACHED` | `DETACHING` | `EXPANDING` | `ROLLBACKING` | `TORECYCLE`).
    :param str storage_type: Filter by cloud disk media type (`CLOUD_BASIC`: HDD cloud disk | `CLOUD_PREMIUM`: Premium Cloud Storage | `CLOUD_SSD`: SSD cloud disk).
    :param str storage_usage: Filter by cloud disk type (`SYSTEM_DISK`: system disk | `DATA_DISK`: data disk).
    :param Sequence[str] tag_keys: List filter by tag keys.
    :param Sequence[str] tag_values: List filter by tag values.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['chargeTypes'] = charge_types
    __args__['dedicatedClusterId'] = dedicated_cluster_id
    __args__['instanceIps'] = instance_ips
    __args__['instanceNames'] = instance_names
    __args__['portable'] = portable
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    __args__['storageId'] = storage_id
    __args__['storageName'] = storage_name
    __args__['storageStates'] = storage_states
    __args__['storageType'] = storage_type
    __args__['storageUsage'] = storage_usage
    __args__['tagKeys'] = tag_keys
    __args__['tagValues'] = tag_values
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cbs/getStoragesSet:getStoragesSet', __args__, opts=opts, typ=GetStoragesSetResult).value

    return AwaitableGetStoragesSetResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        charge_types=pulumi.get(__ret__, 'charge_types'),
        dedicated_cluster_id=pulumi.get(__ret__, 'dedicated_cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_ips=pulumi.get(__ret__, 'instance_ips'),
        instance_names=pulumi.get(__ret__, 'instance_names'),
        portable=pulumi.get(__ret__, 'portable'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        storage_id=pulumi.get(__ret__, 'storage_id'),
        storage_lists=pulumi.get(__ret__, 'storage_lists'),
        storage_name=pulumi.get(__ret__, 'storage_name'),
        storage_states=pulumi.get(__ret__, 'storage_states'),
        storage_type=pulumi.get(__ret__, 'storage_type'),
        storage_usage=pulumi.get(__ret__, 'storage_usage'),
        tag_keys=pulumi.get(__ret__, 'tag_keys'),
        tag_values=pulumi.get(__ret__, 'tag_values'))


@_utilities.lift_output_func(get_storages_set)
def get_storages_set_output(availability_zone: Optional[pulumi.Input[Optional[str]]] = None,
                            charge_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            dedicated_cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                            instance_ips: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            instance_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            portable: Optional[pulumi.Input[Optional[bool]]] = None,
                            project_id: Optional[pulumi.Input[Optional[int]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            storage_id: Optional[pulumi.Input[Optional[str]]] = None,
                            storage_name: Optional[pulumi.Input[Optional[str]]] = None,
                            storage_states: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            storage_type: Optional[pulumi.Input[Optional[str]]] = None,
                            storage_usage: Optional[pulumi.Input[Optional[str]]] = None,
                            tag_keys: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            tag_values: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStoragesSetResult]:
    """
    Use this data source to query detailed information of CBS storages in parallel.

    ## Example Usage

    ### Query CBS by storage set by zone

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Cbs.get_storages_set(availability_zone="ap-guangzhou-3")
    ```
    <!--End PulumiCodeChooser -->


    :param str availability_zone: The available zone that the CBS instance locates at.
    :param Sequence[str] charge_types: List filter by disk charge type (`POSTPAID_BY_HOUR` | `PREPAID` | `CDCPAID` | `DEDICATED_CLUSTER_PAID`).
    :param str dedicated_cluster_id: Exclusive cluster id.
    :param Sequence[str] instance_ips: List filter by attached instance public or private IPs.
    :param Sequence[str] instance_names: List filter by attached instance name.
    :param bool portable: Filter by whether the disk is portable (Boolean `true` or `false`).
    :param int project_id: ID of the project with which the CBS is associated.
    :param str result_output_file: Used to save results.
    :param str storage_id: ID of the CBS to be queried.
    :param str storage_name: Name of the CBS to be queried.
    :param Sequence[str] storage_states: List filter by disk state (`UNATTACHED` | `ATTACHING` | `ATTACHED` | `DETACHING` | `EXPANDING` | `ROLLBACKING` | `TORECYCLE`).
    :param str storage_type: Filter by cloud disk media type (`CLOUD_BASIC`: HDD cloud disk | `CLOUD_PREMIUM`: Premium Cloud Storage | `CLOUD_SSD`: SSD cloud disk).
    :param str storage_usage: Filter by cloud disk type (`SYSTEM_DISK`: system disk | `DATA_DISK`: data disk).
    :param Sequence[str] tag_keys: List filter by tag keys.
    :param Sequence[str] tag_values: List filter by tag values.
    """
    ...
