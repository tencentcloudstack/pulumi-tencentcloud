# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ConnectionBgpConfig',
    'ConnectionHealthCheckConfig',
    'ConnectionSecurityGroupPolicy',
    'CustomerGatewayConfigurationDownloadCustomerGatewayVendor',
    'GetConnectionsConnectionListResult',
    'GetConnectionsConnectionListSecurityGroupPolicyResult',
    'GetCustomerGatewayVendorsCustomerGatewayVendorSetResult',
    'GetCustomerGatewaysGatewayListResult',
    'GetGatewayRoutesVpnGatewayRouteListResult',
    'GetGatewaysGatewayListResult',
]

@pulumi.output_type
class ConnectionBgpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localBgpIp":
            suggest = "local_bgp_ip"
        elif key == "remoteBgpIp":
            suggest = "remote_bgp_ip"
        elif key == "tunnelCidr":
            suggest = "tunnel_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionBgpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionBgpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionBgpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_bgp_ip: str,
                 remote_bgp_ip: str,
                 tunnel_cidr: str):
        """
        :param str local_bgp_ip: Cloud BGP address. It must be allocated from within the BGP tunnel network segment.
        :param str remote_bgp_ip: User side BGP address. It must be allocated from within the BGP tunnel network segment.
        :param str tunnel_cidr: BGP tunnel segment.
        """
        pulumi.set(__self__, "local_bgp_ip", local_bgp_ip)
        pulumi.set(__self__, "remote_bgp_ip", remote_bgp_ip)
        pulumi.set(__self__, "tunnel_cidr", tunnel_cidr)

    @property
    @pulumi.getter(name="localBgpIp")
    def local_bgp_ip(self) -> str:
        """
        Cloud BGP address. It must be allocated from within the BGP tunnel network segment.
        """
        return pulumi.get(self, "local_bgp_ip")

    @property
    @pulumi.getter(name="remoteBgpIp")
    def remote_bgp_ip(self) -> str:
        """
        User side BGP address. It must be allocated from within the BGP tunnel network segment.
        """
        return pulumi.get(self, "remote_bgp_ip")

    @property
    @pulumi.getter(name="tunnelCidr")
    def tunnel_cidr(self) -> str:
        """
        BGP tunnel segment.
        """
        return pulumi.get(self, "tunnel_cidr")


@pulumi.output_type
class ConnectionHealthCheckConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "probeInterval":
            suggest = "probe_interval"
        elif key == "probeThreshold":
            suggest = "probe_threshold"
        elif key == "probeTimeout":
            suggest = "probe_timeout"
        elif key == "probeType":
            suggest = "probe_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionHealthCheckConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionHealthCheckConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionHealthCheckConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 probe_interval: Optional[int] = None,
                 probe_threshold: Optional[int] = None,
                 probe_timeout: Optional[int] = None,
                 probe_type: Optional[str] = None):
        """
        :param int probe_interval: Detection interval, Tencent Cloud's interval between two health checks, range [1000-5000], Unit: ms.
        :param int probe_threshold: Detection times, perform route switching after N consecutive health check failures, range [3-8], Unit: times.
        :param int probe_timeout: Detection timeout, range [10-5000], Unit: ms.
        :param str probe_type: Detection mode, default is `NQA`, cannot be modified.
        """
        if probe_interval is not None:
            pulumi.set(__self__, "probe_interval", probe_interval)
        if probe_threshold is not None:
            pulumi.set(__self__, "probe_threshold", probe_threshold)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if probe_type is not None:
            pulumi.set(__self__, "probe_type", probe_type)

    @property
    @pulumi.getter(name="probeInterval")
    def probe_interval(self) -> Optional[int]:
        """
        Detection interval, Tencent Cloud's interval between two health checks, range [1000-5000], Unit: ms.
        """
        return pulumi.get(self, "probe_interval")

    @property
    @pulumi.getter(name="probeThreshold")
    def probe_threshold(self) -> Optional[int]:
        """
        Detection times, perform route switching after N consecutive health check failures, range [3-8], Unit: times.
        """
        return pulumi.get(self, "probe_threshold")

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[int]:
        """
        Detection timeout, range [10-5000], Unit: ms.
        """
        return pulumi.get(self, "probe_timeout")

    @property
    @pulumi.getter(name="probeType")
    def probe_type(self) -> Optional[str]:
        """
        Detection mode, default is `NQA`, cannot be modified.
        """
        return pulumi.get(self, "probe_type")


@pulumi.output_type
class ConnectionSecurityGroupPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localCidrBlock":
            suggest = "local_cidr_block"
        elif key == "remoteCidrBlocks":
            suggest = "remote_cidr_blocks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionSecurityGroupPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionSecurityGroupPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionSecurityGroupPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 local_cidr_block: str,
                 remote_cidr_blocks: Sequence[str]):
        """
        :param str local_cidr_block: Local cidr block.
        :param Sequence[str] remote_cidr_blocks: Remote cidr block list.
        """
        pulumi.set(__self__, "local_cidr_block", local_cidr_block)
        pulumi.set(__self__, "remote_cidr_blocks", remote_cidr_blocks)

    @property
    @pulumi.getter(name="localCidrBlock")
    def local_cidr_block(self) -> str:
        """
        Local cidr block.
        """
        return pulumi.get(self, "local_cidr_block")

    @property
    @pulumi.getter(name="remoteCidrBlocks")
    def remote_cidr_blocks(self) -> Sequence[str]:
        """
        Remote cidr block list.
        """
        return pulumi.get(self, "remote_cidr_blocks")


@pulumi.output_type
class CustomerGatewayConfigurationDownloadCustomerGatewayVendor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "softwareVersion":
            suggest = "software_version"
        elif key == "vendorName":
            suggest = "vendor_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomerGatewayConfigurationDownloadCustomerGatewayVendor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomerGatewayConfigurationDownloadCustomerGatewayVendor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomerGatewayConfigurationDownloadCustomerGatewayVendor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 platform: str,
                 software_version: str,
                 vendor_name: str):
        """
        :param str platform: Platform.
        :param str software_version: SoftwareVersion.
        :param str vendor_name: VendorName.
        """
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "software_version", software_version)
        pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        Platform.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> str:
        """
        SoftwareVersion.
        """
        return pulumi.get(self, "software_version")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        VendorName.
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetConnectionsConnectionListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 customer_gateway_id: str,
                 encrypt_proto: str,
                 id: str,
                 ike_dh_group_name: str,
                 ike_exchange_mode: str,
                 ike_local_address: str,
                 ike_local_fqdn_name: str,
                 ike_local_identity: str,
                 ike_proto_authen_algorithm: str,
                 ike_proto_encry_algorithm: str,
                 ike_remote_address: str,
                 ike_remote_fqdn_name: str,
                 ike_remote_identity: str,
                 ike_sa_lifetime_seconds: int,
                 ike_version: str,
                 ipsec_encrypt_algorithm: str,
                 ipsec_integrity_algorithm: str,
                 ipsec_pfs_dh_group: str,
                 ipsec_sa_lifetime_seconds: int,
                 ipsec_sa_lifetime_traffic: int,
                 name: str,
                 net_status: str,
                 pre_share_key: str,
                 route_type: str,
                 security_group_policies: Sequence['outputs.GetConnectionsConnectionListSecurityGroupPolicyResult'],
                 state: str,
                 tags: Mapping[str, Any],
                 vpc_id: str,
                 vpn_gateway_id: str,
                 vpn_proto: str):
        """
        :param str create_time: Create time of the VPN connection.
        :param str customer_gateway_id: Customer gateway ID of the VPN connection.
        :param str encrypt_proto: Encrypt proto of the VPN connection.
        :param str id: ID of the VPN connection.
        :param str ike_dh_group_name: DH group name of the IKE operation specification.
        :param str ike_exchange_mode: Exchange mode of the IKE operation specification.
        :param str ike_local_address: Local address of the IKE operation specification.
        :param str ike_local_fqdn_name: Local FQDN name of the IKE operation specification.
        :param str ike_local_identity: Local identity of the IKE operation specification.
        :param str ike_proto_authen_algorithm: Proto authenticate algorithm of the IKE operation specification.
        :param str ike_proto_encry_algorithm: Proto encrypt algorithm of the IKE operation specification.
        :param str ike_remote_address: Remote address of the IKE operation specification.
        :param str ike_remote_fqdn_name: Remote FQDN name of the IKE operation specification.
        :param str ike_remote_identity: Remote identity of the IKE operation specification.
        :param int ike_sa_lifetime_seconds: SA lifetime of the IKE operation specification, unit is `second`.
        :param str ike_version: Version of the IKE operation specification.
        :param str ipsec_encrypt_algorithm: Encrypt algorithm of the IPSEC operation specification.
        :param str ipsec_integrity_algorithm: Integrity algorithm of the IPSEC operation specification.
        :param str ipsec_pfs_dh_group: PFS DH group name of the IPSEC operation specification.
        :param int ipsec_sa_lifetime_seconds: SA lifetime of the IPSEC operation specification, unit is `second`.
        :param int ipsec_sa_lifetime_traffic: SA lifetime traffic of the IPSEC operation specification, unit is `KB`.
        :param str name: Name of the VPN connection. The length of character is limited to 1-60.
        :param str net_status: Net status of the VPN connection.
        :param str pre_share_key: Pre-shared key of the VPN connection.
        :param str route_type: Route type of the VPN connection.
        :param Sequence['GetConnectionsConnectionListSecurityGroupPolicyArgs'] security_group_policies: Security group policy of the VPN connection.
        :param str state: State of the VPN connection.
        :param Mapping[str, Any] tags: Tags of the VPN connection to be queried.
        :param str vpc_id: ID of the VPC.
        :param str vpn_gateway_id: VPN gateway ID of the VPN connection.
        :param str vpn_proto: Vpn proto of the VPN connection.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "customer_gateway_id", customer_gateway_id)
        pulumi.set(__self__, "encrypt_proto", encrypt_proto)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ike_dh_group_name", ike_dh_group_name)
        pulumi.set(__self__, "ike_exchange_mode", ike_exchange_mode)
        pulumi.set(__self__, "ike_local_address", ike_local_address)
        pulumi.set(__self__, "ike_local_fqdn_name", ike_local_fqdn_name)
        pulumi.set(__self__, "ike_local_identity", ike_local_identity)
        pulumi.set(__self__, "ike_proto_authen_algorithm", ike_proto_authen_algorithm)
        pulumi.set(__self__, "ike_proto_encry_algorithm", ike_proto_encry_algorithm)
        pulumi.set(__self__, "ike_remote_address", ike_remote_address)
        pulumi.set(__self__, "ike_remote_fqdn_name", ike_remote_fqdn_name)
        pulumi.set(__self__, "ike_remote_identity", ike_remote_identity)
        pulumi.set(__self__, "ike_sa_lifetime_seconds", ike_sa_lifetime_seconds)
        pulumi.set(__self__, "ike_version", ike_version)
        pulumi.set(__self__, "ipsec_encrypt_algorithm", ipsec_encrypt_algorithm)
        pulumi.set(__self__, "ipsec_integrity_algorithm", ipsec_integrity_algorithm)
        pulumi.set(__self__, "ipsec_pfs_dh_group", ipsec_pfs_dh_group)
        pulumi.set(__self__, "ipsec_sa_lifetime_seconds", ipsec_sa_lifetime_seconds)
        pulumi.set(__self__, "ipsec_sa_lifetime_traffic", ipsec_sa_lifetime_traffic)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "net_status", net_status)
        pulumi.set(__self__, "pre_share_key", pre_share_key)
        pulumi.set(__self__, "route_type", route_type)
        pulumi.set(__self__, "security_group_policies", security_group_policies)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpn_gateway_id", vpn_gateway_id)
        pulumi.set(__self__, "vpn_proto", vpn_proto)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the VPN connection.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> str:
        """
        Customer gateway ID of the VPN connection.
        """
        return pulumi.get(self, "customer_gateway_id")

    @property
    @pulumi.getter(name="encryptProto")
    def encrypt_proto(self) -> str:
        """
        Encrypt proto of the VPN connection.
        """
        return pulumi.get(self, "encrypt_proto")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the VPN connection.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ikeDhGroupName")
    def ike_dh_group_name(self) -> str:
        """
        DH group name of the IKE operation specification.
        """
        return pulumi.get(self, "ike_dh_group_name")

    @property
    @pulumi.getter(name="ikeExchangeMode")
    def ike_exchange_mode(self) -> str:
        """
        Exchange mode of the IKE operation specification.
        """
        return pulumi.get(self, "ike_exchange_mode")

    @property
    @pulumi.getter(name="ikeLocalAddress")
    def ike_local_address(self) -> str:
        """
        Local address of the IKE operation specification.
        """
        return pulumi.get(self, "ike_local_address")

    @property
    @pulumi.getter(name="ikeLocalFqdnName")
    def ike_local_fqdn_name(self) -> str:
        """
        Local FQDN name of the IKE operation specification.
        """
        return pulumi.get(self, "ike_local_fqdn_name")

    @property
    @pulumi.getter(name="ikeLocalIdentity")
    def ike_local_identity(self) -> str:
        """
        Local identity of the IKE operation specification.
        """
        return pulumi.get(self, "ike_local_identity")

    @property
    @pulumi.getter(name="ikeProtoAuthenAlgorithm")
    def ike_proto_authen_algorithm(self) -> str:
        """
        Proto authenticate algorithm of the IKE operation specification.
        """
        return pulumi.get(self, "ike_proto_authen_algorithm")

    @property
    @pulumi.getter(name="ikeProtoEncryAlgorithm")
    def ike_proto_encry_algorithm(self) -> str:
        """
        Proto encrypt algorithm of the IKE operation specification.
        """
        return pulumi.get(self, "ike_proto_encry_algorithm")

    @property
    @pulumi.getter(name="ikeRemoteAddress")
    def ike_remote_address(self) -> str:
        """
        Remote address of the IKE operation specification.
        """
        return pulumi.get(self, "ike_remote_address")

    @property
    @pulumi.getter(name="ikeRemoteFqdnName")
    def ike_remote_fqdn_name(self) -> str:
        """
        Remote FQDN name of the IKE operation specification.
        """
        return pulumi.get(self, "ike_remote_fqdn_name")

    @property
    @pulumi.getter(name="ikeRemoteIdentity")
    def ike_remote_identity(self) -> str:
        """
        Remote identity of the IKE operation specification.
        """
        return pulumi.get(self, "ike_remote_identity")

    @property
    @pulumi.getter(name="ikeSaLifetimeSeconds")
    def ike_sa_lifetime_seconds(self) -> int:
        """
        SA lifetime of the IKE operation specification, unit is `second`.
        """
        return pulumi.get(self, "ike_sa_lifetime_seconds")

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> str:
        """
        Version of the IKE operation specification.
        """
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="ipsecEncryptAlgorithm")
    def ipsec_encrypt_algorithm(self) -> str:
        """
        Encrypt algorithm of the IPSEC operation specification.
        """
        return pulumi.get(self, "ipsec_encrypt_algorithm")

    @property
    @pulumi.getter(name="ipsecIntegrityAlgorithm")
    def ipsec_integrity_algorithm(self) -> str:
        """
        Integrity algorithm of the IPSEC operation specification.
        """
        return pulumi.get(self, "ipsec_integrity_algorithm")

    @property
    @pulumi.getter(name="ipsecPfsDhGroup")
    def ipsec_pfs_dh_group(self) -> str:
        """
        PFS DH group name of the IPSEC operation specification.
        """
        return pulumi.get(self, "ipsec_pfs_dh_group")

    @property
    @pulumi.getter(name="ipsecSaLifetimeSeconds")
    def ipsec_sa_lifetime_seconds(self) -> int:
        """
        SA lifetime of the IPSEC operation specification, unit is `second`.
        """
        return pulumi.get(self, "ipsec_sa_lifetime_seconds")

    @property
    @pulumi.getter(name="ipsecSaLifetimeTraffic")
    def ipsec_sa_lifetime_traffic(self) -> int:
        """
        SA lifetime traffic of the IPSEC operation specification, unit is `KB`.
        """
        return pulumi.get(self, "ipsec_sa_lifetime_traffic")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the VPN connection. The length of character is limited to 1-60.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="netStatus")
    def net_status(self) -> str:
        """
        Net status of the VPN connection.
        """
        return pulumi.get(self, "net_status")

    @property
    @pulumi.getter(name="preShareKey")
    def pre_share_key(self) -> str:
        """
        Pre-shared key of the VPN connection.
        """
        return pulumi.get(self, "pre_share_key")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> str:
        """
        Route type of the VPN connection.
        """
        return pulumi.get(self, "route_type")

    @property
    @pulumi.getter(name="securityGroupPolicies")
    def security_group_policies(self) -> Sequence['outputs.GetConnectionsConnectionListSecurityGroupPolicyResult']:
        """
        Security group policy of the VPN connection.
        """
        return pulumi.get(self, "security_group_policies")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the VPN connection.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of the VPN connection to be queried.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpnGatewayId")
    def vpn_gateway_id(self) -> str:
        """
        VPN gateway ID of the VPN connection.
        """
        return pulumi.get(self, "vpn_gateway_id")

    @property
    @pulumi.getter(name="vpnProto")
    def vpn_proto(self) -> str:
        """
        Vpn proto of the VPN connection.
        """
        return pulumi.get(self, "vpn_proto")


@pulumi.output_type
class GetConnectionsConnectionListSecurityGroupPolicyResult(dict):
    def __init__(__self__, *,
                 local_cidr_block: str,
                 remote_cidr_blocks: Sequence[str]):
        """
        :param str local_cidr_block: Local cidr block.
        :param Sequence[str] remote_cidr_blocks: Remote cidr block list.
        """
        pulumi.set(__self__, "local_cidr_block", local_cidr_block)
        pulumi.set(__self__, "remote_cidr_blocks", remote_cidr_blocks)

    @property
    @pulumi.getter(name="localCidrBlock")
    def local_cidr_block(self) -> str:
        """
        Local cidr block.
        """
        return pulumi.get(self, "local_cidr_block")

    @property
    @pulumi.getter(name="remoteCidrBlocks")
    def remote_cidr_blocks(self) -> Sequence[str]:
        """
        Remote cidr block list.
        """
        return pulumi.get(self, "remote_cidr_blocks")


@pulumi.output_type
class GetCustomerGatewayVendorsCustomerGatewayVendorSetResult(dict):
    def __init__(__self__, *,
                 platform: str,
                 software_version: str,
                 vendor_name: str):
        """
        :param str platform: Platform.
        :param str software_version: SoftwareVersion.
        :param str vendor_name: VendorName.
        """
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "software_version", software_version)
        pulumi.set(__self__, "vendor_name", vendor_name)

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        Platform.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> str:
        """
        SoftwareVersion.
        """
        return pulumi.get(self, "software_version")

    @property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> str:
        """
        VendorName.
        """
        return pulumi.get(self, "vendor_name")


@pulumi.output_type
class GetCustomerGatewaysGatewayListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 id: str,
                 name: str,
                 public_ip_address: str,
                 tags: Mapping[str, Any]):
        """
        :param str create_time: Create time of the VPN customer gateway.
        :param str id: ID of the VPN customer gateway.
        :param str name: Name of the customer gateway. The length of character is limited to 1-60.
        :param str public_ip_address: Public ip address of the VPN customer gateway.
        :param Mapping[str, Any] tags: Tags of the VPN customer gateway to be queried.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_ip_address", public_ip_address)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the VPN customer gateway.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the VPN customer gateway.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the customer gateway. The length of character is limited to 1-60.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> str:
        """
        Public ip address of the VPN customer gateway.
        """
        return pulumi.get(self, "public_ip_address")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of the VPN customer gateway to be queried.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetGatewayRoutesVpnGatewayRouteListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 destination_cidr_block: str,
                 instance_id: str,
                 instance_type: str,
                 priority: int,
                 route_id: str,
                 status: str,
                 type: str,
                 update_time: str,
                 vpn_gateway_id: str):
        """
        :param str create_time: Create time.
        :param str destination_cidr_block: Destination IDC IP range.
        :param str instance_id: Instance ID of the next hop.
        :param str instance_type: Next hop type (type of the associated instance). Valid values: VPNCONN (VPN tunnel) and CCN (CCN instance).
        :param int priority: Priority. Valid values: 0 and 100.
        :param str route_id: Route ID.
        :param str status: Status. Valid values: ENABLE and DISABLE.
        :param str type: Route type. Default value: Static.
        :param str update_time: Update time.
        :param str vpn_gateway_id: VPN gateway ID.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "route_id", route_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpn_gateway_id", vpn_gateway_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> str:
        """
        Destination IDC IP range.
        """
        return pulumi.get(self, "destination_cidr_block")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID of the next hop.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Next hop type (type of the associated instance). Valid values: VPNCONN (VPN tunnel) and CCN (CCN instance).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority. Valid values: 0 and 100.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="routeId")
    def route_id(self) -> str:
        """
        Route ID.
        """
        return pulumi.get(self, "route_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status. Valid values: ENABLE and DISABLE.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Route type. Default value: Static.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpnGatewayId")
    def vpn_gateway_id(self) -> str:
        """
        VPN gateway ID.
        """
        return pulumi.get(self, "vpn_gateway_id")


@pulumi.output_type
class GetGatewaysGatewayListResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 charge_type: str,
                 create_time: str,
                 expired_time: str,
                 id: str,
                 is_address_blocked: bool,
                 name: str,
                 new_purchase_plan: str,
                 prepaid_renew_flag: str,
                 public_ip_address: str,
                 restrict_state: str,
                 state: str,
                 tags: Mapping[str, Any],
                 type: str,
                 vpc_id: str,
                 zone: str):
        """
        :param int bandwidth: The maximum public network output bandwidth of VPN gateway (unit: Mbps).
        :param str charge_type: Charge Type of the VPN gateway.
        :param str create_time: Create time of the VPN gateway.
        :param str expired_time: Expired time of the VPN gateway when charge type is `PREPAID`.
        :param str id: ID of the VPN gateway.
        :param bool is_address_blocked: Indicates whether ip address is blocked.
        :param str name: Name of the VPN gateway. The length of character is limited to 1-60.
        :param str new_purchase_plan: The plan of new purchase.
        :param str prepaid_renew_flag: Flag indicates whether to renew or not.
        :param str public_ip_address: Public ip address of the VPN gateway.
        :param str restrict_state: Restrict state of VPN gateway.
        :param str state: State of the VPN gateway.
        :param Mapping[str, Any] tags: Tags of the VPN gateway to be queried.
        :param str type: Type of gateway instance.
        :param str vpc_id: ID of the VPC.
        :param str zone: Zone of the VPN gateway.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_address_blocked", is_address_blocked)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "new_purchase_plan", new_purchase_plan)
        pulumi.set(__self__, "prepaid_renew_flag", prepaid_renew_flag)
        pulumi.set(__self__, "public_ip_address", public_ip_address)
        pulumi.set(__self__, "restrict_state", restrict_state)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The maximum public network output bandwidth of VPN gateway (unit: Mbps).
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        Charge Type of the VPN gateway.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the VPN gateway.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> str:
        """
        Expired time of the VPN gateway when charge type is `PREPAID`.
        """
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the VPN gateway.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAddressBlocked")
    def is_address_blocked(self) -> bool:
        """
        Indicates whether ip address is blocked.
        """
        return pulumi.get(self, "is_address_blocked")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the VPN gateway. The length of character is limited to 1-60.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newPurchasePlan")
    def new_purchase_plan(self) -> str:
        """
        The plan of new purchase.
        """
        return pulumi.get(self, "new_purchase_plan")

    @property
    @pulumi.getter(name="prepaidRenewFlag")
    def prepaid_renew_flag(self) -> str:
        """
        Flag indicates whether to renew or not.
        """
        return pulumi.get(self, "prepaid_renew_flag")

    @property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> str:
        """
        Public ip address of the VPN gateway.
        """
        return pulumi.get(self, "public_ip_address")

    @property
    @pulumi.getter(name="restrictState")
    def restrict_state(self) -> str:
        """
        Restrict state of VPN gateway.
        """
        return pulumi.get(self, "restrict_state")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the VPN gateway.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of the VPN gateway to be queried.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of gateway instance.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Zone of the VPN gateway.
        """
        return pulumi.get(self, "zone")


