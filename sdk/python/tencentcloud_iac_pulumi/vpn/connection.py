# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectionArgs', 'Connection']

@pulumi.input_type
class ConnectionArgs:
    def __init__(__self__, *,
                 customer_gateway_id: pulumi.Input[str],
                 pre_share_key: pulumi.Input[str],
                 vpn_gateway_id: pulumi.Input[str],
                 dpd_action: Optional[pulumi.Input[str]] = None,
                 dpd_enable: Optional[pulumi.Input[int]] = None,
                 dpd_timeout: Optional[pulumi.Input[int]] = None,
                 enable_health_check: Optional[pulumi.Input[bool]] = None,
                 health_check_local_ip: Optional[pulumi.Input[str]] = None,
                 health_check_remote_ip: Optional[pulumi.Input[str]] = None,
                 ike_dh_group_name: Optional[pulumi.Input[str]] = None,
                 ike_exchange_mode: Optional[pulumi.Input[str]] = None,
                 ike_local_address: Optional[pulumi.Input[str]] = None,
                 ike_local_fqdn_name: Optional[pulumi.Input[str]] = None,
                 ike_local_identity: Optional[pulumi.Input[str]] = None,
                 ike_proto_authen_algorithm: Optional[pulumi.Input[str]] = None,
                 ike_proto_encry_algorithm: Optional[pulumi.Input[str]] = None,
                 ike_remote_address: Optional[pulumi.Input[str]] = None,
                 ike_remote_fqdn_name: Optional[pulumi.Input[str]] = None,
                 ike_remote_identity: Optional[pulumi.Input[str]] = None,
                 ike_sa_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 ipsec_encrypt_algorithm: Optional[pulumi.Input[str]] = None,
                 ipsec_integrity_algorithm: Optional[pulumi.Input[str]] = None,
                 ipsec_pfs_dh_group: Optional[pulumi.Input[str]] = None,
                 ipsec_sa_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 ipsec_sa_lifetime_traffic: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 route_type: Optional[pulumi.Input[str]] = None,
                 security_group_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionSecurityGroupPolicyArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Connection resource.
        :param pulumi.Input[str] customer_gateway_id: ID of the customer gateway.
        :param pulumi.Input[str] pre_share_key: Pre-shared key of the VPN connection.
        :param pulumi.Input[str] vpn_gateway_id: ID of the VPN gateway.
        :param pulumi.Input[str] dpd_action: The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
        :param pulumi.Input[int] dpd_enable: Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
        :param pulumi.Input[int] dpd_timeout: DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
        :param pulumi.Input[bool] enable_health_check: Whether intra-tunnel health checks are supported.
        :param pulumi.Input[str] health_check_local_ip: Health check the address of this terminal.
        :param pulumi.Input[str] health_check_remote_ip: Health check peer address.
        :param pulumi.Input[str] ike_dh_group_name: DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
        :param pulumi.Input[str] ike_exchange_mode: Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
        :param pulumi.Input[str] ike_local_address: Local address of IKE operation specification, valid when ike_local_identity is `ADDRESS`, generally the value is `public_ip_address` of the related VPN gateway.
        :param pulumi.Input[str] ike_local_fqdn_name: Local FQDN name of the IKE operation specification.
        :param pulumi.Input[str] ike_local_identity: Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        :param pulumi.Input[str] ike_proto_authen_algorithm: Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
        :param pulumi.Input[str] ike_proto_encry_algorithm: Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        :param pulumi.Input[str] ike_remote_address: Remote address of IKE operation specification, valid when ike_remote_identity is `ADDRESS`, generally the value is `public_ip_address` of the related customer gateway.
        :param pulumi.Input[str] ike_remote_fqdn_name: Remote FQDN name of the IKE operation specification.
        :param pulumi.Input[str] ike_remote_identity: Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        :param pulumi.Input[int] ike_sa_lifetime_seconds: SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
        :param pulumi.Input[str] ike_version: Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
        :param pulumi.Input[str] ipsec_encrypt_algorithm: Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        :param pulumi.Input[str] ipsec_integrity_algorithm: Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
        :param pulumi.Input[str] ipsec_pfs_dh_group: PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
        :param pulumi.Input[int] ipsec_sa_lifetime_seconds: SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
        :param pulumi.Input[int] ipsec_sa_lifetime_traffic: SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
        :param pulumi.Input[str] name: Name of the VPN connection. The length of character is limited to 1-60.
        :param pulumi.Input[str] route_type: Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionSecurityGroupPolicyArgs']]] security_group_policies: SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] vpc_id: ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
        """
        pulumi.set(__self__, "customer_gateway_id", customer_gateway_id)
        pulumi.set(__self__, "pre_share_key", pre_share_key)
        pulumi.set(__self__, "vpn_gateway_id", vpn_gateway_id)
        if dpd_action is not None:
            pulumi.set(__self__, "dpd_action", dpd_action)
        if dpd_enable is not None:
            pulumi.set(__self__, "dpd_enable", dpd_enable)
        if dpd_timeout is not None:
            pulumi.set(__self__, "dpd_timeout", dpd_timeout)
        if enable_health_check is not None:
            pulumi.set(__self__, "enable_health_check", enable_health_check)
        if health_check_local_ip is not None:
            pulumi.set(__self__, "health_check_local_ip", health_check_local_ip)
        if health_check_remote_ip is not None:
            pulumi.set(__self__, "health_check_remote_ip", health_check_remote_ip)
        if ike_dh_group_name is not None:
            pulumi.set(__self__, "ike_dh_group_name", ike_dh_group_name)
        if ike_exchange_mode is not None:
            pulumi.set(__self__, "ike_exchange_mode", ike_exchange_mode)
        if ike_local_address is not None:
            pulumi.set(__self__, "ike_local_address", ike_local_address)
        if ike_local_fqdn_name is not None:
            pulumi.set(__self__, "ike_local_fqdn_name", ike_local_fqdn_name)
        if ike_local_identity is not None:
            pulumi.set(__self__, "ike_local_identity", ike_local_identity)
        if ike_proto_authen_algorithm is not None:
            pulumi.set(__self__, "ike_proto_authen_algorithm", ike_proto_authen_algorithm)
        if ike_proto_encry_algorithm is not None:
            pulumi.set(__self__, "ike_proto_encry_algorithm", ike_proto_encry_algorithm)
        if ike_remote_address is not None:
            pulumi.set(__self__, "ike_remote_address", ike_remote_address)
        if ike_remote_fqdn_name is not None:
            pulumi.set(__self__, "ike_remote_fqdn_name", ike_remote_fqdn_name)
        if ike_remote_identity is not None:
            pulumi.set(__self__, "ike_remote_identity", ike_remote_identity)
        if ike_sa_lifetime_seconds is not None:
            pulumi.set(__self__, "ike_sa_lifetime_seconds", ike_sa_lifetime_seconds)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if ipsec_encrypt_algorithm is not None:
            pulumi.set(__self__, "ipsec_encrypt_algorithm", ipsec_encrypt_algorithm)
        if ipsec_integrity_algorithm is not None:
            pulumi.set(__self__, "ipsec_integrity_algorithm", ipsec_integrity_algorithm)
        if ipsec_pfs_dh_group is not None:
            pulumi.set(__self__, "ipsec_pfs_dh_group", ipsec_pfs_dh_group)
        if ipsec_sa_lifetime_seconds is not None:
            pulumi.set(__self__, "ipsec_sa_lifetime_seconds", ipsec_sa_lifetime_seconds)
        if ipsec_sa_lifetime_traffic is not None:
            pulumi.set(__self__, "ipsec_sa_lifetime_traffic", ipsec_sa_lifetime_traffic)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)
        if security_group_policies is not None:
            pulumi.set(__self__, "security_group_policies", security_group_policies)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> pulumi.Input[str]:
        """
        ID of the customer gateway.
        """
        return pulumi.get(self, "customer_gateway_id")

    @customer_gateway_id.setter
    def customer_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "customer_gateway_id", value)

    @property
    @pulumi.getter(name="preShareKey")
    def pre_share_key(self) -> pulumi.Input[str]:
        """
        Pre-shared key of the VPN connection.
        """
        return pulumi.get(self, "pre_share_key")

    @pre_share_key.setter
    def pre_share_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "pre_share_key", value)

    @property
    @pulumi.getter(name="vpnGatewayId")
    def vpn_gateway_id(self) -> pulumi.Input[str]:
        """
        ID of the VPN gateway.
        """
        return pulumi.get(self, "vpn_gateway_id")

    @vpn_gateway_id.setter
    def vpn_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpn_gateway_id", value)

    @property
    @pulumi.getter(name="dpdAction")
    def dpd_action(self) -> Optional[pulumi.Input[str]]:
        """
        The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
        """
        return pulumi.get(self, "dpd_action")

    @dpd_action.setter
    def dpd_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd_action", value)

    @property
    @pulumi.getter(name="dpdEnable")
    def dpd_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
        """
        return pulumi.get(self, "dpd_enable")

    @dpd_enable.setter
    def dpd_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_enable", value)

    @property
    @pulumi.getter(name="dpdTimeout")
    def dpd_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
        """
        return pulumi.get(self, "dpd_timeout")

    @dpd_timeout.setter
    def dpd_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_timeout", value)

    @property
    @pulumi.getter(name="enableHealthCheck")
    def enable_health_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether intra-tunnel health checks are supported.
        """
        return pulumi.get(self, "enable_health_check")

    @enable_health_check.setter
    def enable_health_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_health_check", value)

    @property
    @pulumi.getter(name="healthCheckLocalIp")
    def health_check_local_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Health check the address of this terminal.
        """
        return pulumi.get(self, "health_check_local_ip")

    @health_check_local_ip.setter
    def health_check_local_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_local_ip", value)

    @property
    @pulumi.getter(name="healthCheckRemoteIp")
    def health_check_remote_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Health check peer address.
        """
        return pulumi.get(self, "health_check_remote_ip")

    @health_check_remote_ip.setter
    def health_check_remote_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_remote_ip", value)

    @property
    @pulumi.getter(name="ikeDhGroupName")
    def ike_dh_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
        """
        return pulumi.get(self, "ike_dh_group_name")

    @ike_dh_group_name.setter
    def ike_dh_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_dh_group_name", value)

    @property
    @pulumi.getter(name="ikeExchangeMode")
    def ike_exchange_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
        """
        return pulumi.get(self, "ike_exchange_mode")

    @ike_exchange_mode.setter
    def ike_exchange_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_exchange_mode", value)

    @property
    @pulumi.getter(name="ikeLocalAddress")
    def ike_local_address(self) -> Optional[pulumi.Input[str]]:
        """
        Local address of IKE operation specification, valid when ike_local_identity is `ADDRESS`, generally the value is `public_ip_address` of the related VPN gateway.
        """
        return pulumi.get(self, "ike_local_address")

    @ike_local_address.setter
    def ike_local_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_local_address", value)

    @property
    @pulumi.getter(name="ikeLocalFqdnName")
    def ike_local_fqdn_name(self) -> Optional[pulumi.Input[str]]:
        """
        Local FQDN name of the IKE operation specification.
        """
        return pulumi.get(self, "ike_local_fqdn_name")

    @ike_local_fqdn_name.setter
    def ike_local_fqdn_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_local_fqdn_name", value)

    @property
    @pulumi.getter(name="ikeLocalIdentity")
    def ike_local_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        """
        return pulumi.get(self, "ike_local_identity")

    @ike_local_identity.setter
    def ike_local_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_local_identity", value)

    @property
    @pulumi.getter(name="ikeProtoAuthenAlgorithm")
    def ike_proto_authen_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
        """
        return pulumi.get(self, "ike_proto_authen_algorithm")

    @ike_proto_authen_algorithm.setter
    def ike_proto_authen_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_proto_authen_algorithm", value)

    @property
    @pulumi.getter(name="ikeProtoEncryAlgorithm")
    def ike_proto_encry_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        """
        return pulumi.get(self, "ike_proto_encry_algorithm")

    @ike_proto_encry_algorithm.setter
    def ike_proto_encry_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_proto_encry_algorithm", value)

    @property
    @pulumi.getter(name="ikeRemoteAddress")
    def ike_remote_address(self) -> Optional[pulumi.Input[str]]:
        """
        Remote address of IKE operation specification, valid when ike_remote_identity is `ADDRESS`, generally the value is `public_ip_address` of the related customer gateway.
        """
        return pulumi.get(self, "ike_remote_address")

    @ike_remote_address.setter
    def ike_remote_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_remote_address", value)

    @property
    @pulumi.getter(name="ikeRemoteFqdnName")
    def ike_remote_fqdn_name(self) -> Optional[pulumi.Input[str]]:
        """
        Remote FQDN name of the IKE operation specification.
        """
        return pulumi.get(self, "ike_remote_fqdn_name")

    @ike_remote_fqdn_name.setter
    def ike_remote_fqdn_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_remote_fqdn_name", value)

    @property
    @pulumi.getter(name="ikeRemoteIdentity")
    def ike_remote_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        """
        return pulumi.get(self, "ike_remote_identity")

    @ike_remote_identity.setter
    def ike_remote_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_remote_identity", value)

    @property
    @pulumi.getter(name="ikeSaLifetimeSeconds")
    def ike_sa_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
        """
        return pulumi.get(self, "ike_sa_lifetime_seconds")

    @ike_sa_lifetime_seconds.setter
    def ike_sa_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_sa_lifetime_seconds", value)

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
        """
        return pulumi.get(self, "ike_version")

    @ike_version.setter
    def ike_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_version", value)

    @property
    @pulumi.getter(name="ipsecEncryptAlgorithm")
    def ipsec_encrypt_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        """
        return pulumi.get(self, "ipsec_encrypt_algorithm")

    @ipsec_encrypt_algorithm.setter
    def ipsec_encrypt_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_encrypt_algorithm", value)

    @property
    @pulumi.getter(name="ipsecIntegrityAlgorithm")
    def ipsec_integrity_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
        """
        return pulumi.get(self, "ipsec_integrity_algorithm")

    @ipsec_integrity_algorithm.setter
    def ipsec_integrity_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_integrity_algorithm", value)

    @property
    @pulumi.getter(name="ipsecPfsDhGroup")
    def ipsec_pfs_dh_group(self) -> Optional[pulumi.Input[str]]:
        """
        PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
        """
        return pulumi.get(self, "ipsec_pfs_dh_group")

    @ipsec_pfs_dh_group.setter
    def ipsec_pfs_dh_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_pfs_dh_group", value)

    @property
    @pulumi.getter(name="ipsecSaLifetimeSeconds")
    def ipsec_sa_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
        """
        return pulumi.get(self, "ipsec_sa_lifetime_seconds")

    @ipsec_sa_lifetime_seconds.setter
    def ipsec_sa_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_sa_lifetime_seconds", value)

    @property
    @pulumi.getter(name="ipsecSaLifetimeTraffic")
    def ipsec_sa_lifetime_traffic(self) -> Optional[pulumi.Input[int]]:
        """
        SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
        """
        return pulumi.get(self, "ipsec_sa_lifetime_traffic")

    @ipsec_sa_lifetime_traffic.setter
    def ipsec_sa_lifetime_traffic(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_sa_lifetime_traffic", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the VPN connection. The length of character is limited to 1-60.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[pulumi.Input[str]]:
        """
        Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
        """
        return pulumi.get(self, "route_type")

    @route_type.setter
    def route_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_type", value)

    @property
    @pulumi.getter(name="securityGroupPolicies")
    def security_group_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionSecurityGroupPolicyArgs']]]]:
        """
        SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
        """
        return pulumi.get(self, "security_group_policies")

    @security_group_policies.setter
    def security_group_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionSecurityGroupPolicyArgs']]]]):
        pulumi.set(self, "security_group_policies", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _ConnectionState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 customer_gateway_id: Optional[pulumi.Input[str]] = None,
                 dpd_action: Optional[pulumi.Input[str]] = None,
                 dpd_enable: Optional[pulumi.Input[int]] = None,
                 dpd_timeout: Optional[pulumi.Input[int]] = None,
                 enable_health_check: Optional[pulumi.Input[bool]] = None,
                 encrypt_proto: Optional[pulumi.Input[str]] = None,
                 health_check_local_ip: Optional[pulumi.Input[str]] = None,
                 health_check_remote_ip: Optional[pulumi.Input[str]] = None,
                 ike_dh_group_name: Optional[pulumi.Input[str]] = None,
                 ike_exchange_mode: Optional[pulumi.Input[str]] = None,
                 ike_local_address: Optional[pulumi.Input[str]] = None,
                 ike_local_fqdn_name: Optional[pulumi.Input[str]] = None,
                 ike_local_identity: Optional[pulumi.Input[str]] = None,
                 ike_proto_authen_algorithm: Optional[pulumi.Input[str]] = None,
                 ike_proto_encry_algorithm: Optional[pulumi.Input[str]] = None,
                 ike_remote_address: Optional[pulumi.Input[str]] = None,
                 ike_remote_fqdn_name: Optional[pulumi.Input[str]] = None,
                 ike_remote_identity: Optional[pulumi.Input[str]] = None,
                 ike_sa_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 ipsec_encrypt_algorithm: Optional[pulumi.Input[str]] = None,
                 ipsec_integrity_algorithm: Optional[pulumi.Input[str]] = None,
                 ipsec_pfs_dh_group: Optional[pulumi.Input[str]] = None,
                 ipsec_sa_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 ipsec_sa_lifetime_traffic: Optional[pulumi.Input[int]] = None,
                 is_ccn_type: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 net_status: Optional[pulumi.Input[str]] = None,
                 pre_share_key: Optional[pulumi.Input[str]] = None,
                 route_type: Optional[pulumi.Input[str]] = None,
                 security_group_policies: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionSecurityGroupPolicyArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_id: Optional[pulumi.Input[str]] = None,
                 vpn_proto: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Connection resources.
        :param pulumi.Input[str] create_time: Create time of the VPN connection.
        :param pulumi.Input[str] customer_gateway_id: ID of the customer gateway.
        :param pulumi.Input[str] dpd_action: The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
        :param pulumi.Input[int] dpd_enable: Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
        :param pulumi.Input[int] dpd_timeout: DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
        :param pulumi.Input[bool] enable_health_check: Whether intra-tunnel health checks are supported.
        :param pulumi.Input[str] encrypt_proto: Encrypt proto of the VPN connection.
        :param pulumi.Input[str] health_check_local_ip: Health check the address of this terminal.
        :param pulumi.Input[str] health_check_remote_ip: Health check peer address.
        :param pulumi.Input[str] ike_dh_group_name: DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
        :param pulumi.Input[str] ike_exchange_mode: Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
        :param pulumi.Input[str] ike_local_address: Local address of IKE operation specification, valid when ike_local_identity is `ADDRESS`, generally the value is `public_ip_address` of the related VPN gateway.
        :param pulumi.Input[str] ike_local_fqdn_name: Local FQDN name of the IKE operation specification.
        :param pulumi.Input[str] ike_local_identity: Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        :param pulumi.Input[str] ike_proto_authen_algorithm: Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
        :param pulumi.Input[str] ike_proto_encry_algorithm: Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        :param pulumi.Input[str] ike_remote_address: Remote address of IKE operation specification, valid when ike_remote_identity is `ADDRESS`, generally the value is `public_ip_address` of the related customer gateway.
        :param pulumi.Input[str] ike_remote_fqdn_name: Remote FQDN name of the IKE operation specification.
        :param pulumi.Input[str] ike_remote_identity: Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        :param pulumi.Input[int] ike_sa_lifetime_seconds: SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
        :param pulumi.Input[str] ike_version: Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
        :param pulumi.Input[str] ipsec_encrypt_algorithm: Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        :param pulumi.Input[str] ipsec_integrity_algorithm: Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
        :param pulumi.Input[str] ipsec_pfs_dh_group: PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
        :param pulumi.Input[int] ipsec_sa_lifetime_seconds: SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
        :param pulumi.Input[int] ipsec_sa_lifetime_traffic: SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
        :param pulumi.Input[bool] is_ccn_type: Indicate whether is ccn type. Modification of this field only impacts force new logic of `vpc_id`. If `is_ccn_type` is true, modification of `vpc_id` will be ignored.
        :param pulumi.Input[str] name: Name of the VPN connection. The length of character is limited to 1-60.
        :param pulumi.Input[str] net_status: Net status of the VPN connection. Valid value: `AVAILABLE`.
        :param pulumi.Input[str] pre_share_key: Pre-shared key of the VPN connection.
        :param pulumi.Input[str] route_type: Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
        :param pulumi.Input[Sequence[pulumi.Input['ConnectionSecurityGroupPolicyArgs']]] security_group_policies: SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
        :param pulumi.Input[str] state: State of the connection. Valid value: `PENDING`, `AVAILABLE`, `DELETING`.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] vpc_id: ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
        :param pulumi.Input[str] vpn_gateway_id: ID of the VPN gateway.
        :param pulumi.Input[str] vpn_proto: Vpn proto of the VPN connection.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if customer_gateway_id is not None:
            pulumi.set(__self__, "customer_gateway_id", customer_gateway_id)
        if dpd_action is not None:
            pulumi.set(__self__, "dpd_action", dpd_action)
        if dpd_enable is not None:
            pulumi.set(__self__, "dpd_enable", dpd_enable)
        if dpd_timeout is not None:
            pulumi.set(__self__, "dpd_timeout", dpd_timeout)
        if enable_health_check is not None:
            pulumi.set(__self__, "enable_health_check", enable_health_check)
        if encrypt_proto is not None:
            pulumi.set(__self__, "encrypt_proto", encrypt_proto)
        if health_check_local_ip is not None:
            pulumi.set(__self__, "health_check_local_ip", health_check_local_ip)
        if health_check_remote_ip is not None:
            pulumi.set(__self__, "health_check_remote_ip", health_check_remote_ip)
        if ike_dh_group_name is not None:
            pulumi.set(__self__, "ike_dh_group_name", ike_dh_group_name)
        if ike_exchange_mode is not None:
            pulumi.set(__self__, "ike_exchange_mode", ike_exchange_mode)
        if ike_local_address is not None:
            pulumi.set(__self__, "ike_local_address", ike_local_address)
        if ike_local_fqdn_name is not None:
            pulumi.set(__self__, "ike_local_fqdn_name", ike_local_fqdn_name)
        if ike_local_identity is not None:
            pulumi.set(__self__, "ike_local_identity", ike_local_identity)
        if ike_proto_authen_algorithm is not None:
            pulumi.set(__self__, "ike_proto_authen_algorithm", ike_proto_authen_algorithm)
        if ike_proto_encry_algorithm is not None:
            pulumi.set(__self__, "ike_proto_encry_algorithm", ike_proto_encry_algorithm)
        if ike_remote_address is not None:
            pulumi.set(__self__, "ike_remote_address", ike_remote_address)
        if ike_remote_fqdn_name is not None:
            pulumi.set(__self__, "ike_remote_fqdn_name", ike_remote_fqdn_name)
        if ike_remote_identity is not None:
            pulumi.set(__self__, "ike_remote_identity", ike_remote_identity)
        if ike_sa_lifetime_seconds is not None:
            pulumi.set(__self__, "ike_sa_lifetime_seconds", ike_sa_lifetime_seconds)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if ipsec_encrypt_algorithm is not None:
            pulumi.set(__self__, "ipsec_encrypt_algorithm", ipsec_encrypt_algorithm)
        if ipsec_integrity_algorithm is not None:
            pulumi.set(__self__, "ipsec_integrity_algorithm", ipsec_integrity_algorithm)
        if ipsec_pfs_dh_group is not None:
            pulumi.set(__self__, "ipsec_pfs_dh_group", ipsec_pfs_dh_group)
        if ipsec_sa_lifetime_seconds is not None:
            pulumi.set(__self__, "ipsec_sa_lifetime_seconds", ipsec_sa_lifetime_seconds)
        if ipsec_sa_lifetime_traffic is not None:
            pulumi.set(__self__, "ipsec_sa_lifetime_traffic", ipsec_sa_lifetime_traffic)
        if is_ccn_type is not None:
            pulumi.set(__self__, "is_ccn_type", is_ccn_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if net_status is not None:
            pulumi.set(__self__, "net_status", net_status)
        if pre_share_key is not None:
            pulumi.set(__self__, "pre_share_key", pre_share_key)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)
        if security_group_policies is not None:
            pulumi.set(__self__, "security_group_policies", security_group_policies)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpn_gateway_id is not None:
            pulumi.set(__self__, "vpn_gateway_id", vpn_gateway_id)
        if vpn_proto is not None:
            pulumi.set(__self__, "vpn_proto", vpn_proto)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the VPN connection.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the customer gateway.
        """
        return pulumi.get(self, "customer_gateway_id")

    @customer_gateway_id.setter
    def customer_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_gateway_id", value)

    @property
    @pulumi.getter(name="dpdAction")
    def dpd_action(self) -> Optional[pulumi.Input[str]]:
        """
        The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
        """
        return pulumi.get(self, "dpd_action")

    @dpd_action.setter
    def dpd_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd_action", value)

    @property
    @pulumi.getter(name="dpdEnable")
    def dpd_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
        """
        return pulumi.get(self, "dpd_enable")

    @dpd_enable.setter
    def dpd_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_enable", value)

    @property
    @pulumi.getter(name="dpdTimeout")
    def dpd_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
        """
        return pulumi.get(self, "dpd_timeout")

    @dpd_timeout.setter
    def dpd_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_timeout", value)

    @property
    @pulumi.getter(name="enableHealthCheck")
    def enable_health_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether intra-tunnel health checks are supported.
        """
        return pulumi.get(self, "enable_health_check")

    @enable_health_check.setter
    def enable_health_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_health_check", value)

    @property
    @pulumi.getter(name="encryptProto")
    def encrypt_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Encrypt proto of the VPN connection.
        """
        return pulumi.get(self, "encrypt_proto")

    @encrypt_proto.setter
    def encrypt_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypt_proto", value)

    @property
    @pulumi.getter(name="healthCheckLocalIp")
    def health_check_local_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Health check the address of this terminal.
        """
        return pulumi.get(self, "health_check_local_ip")

    @health_check_local_ip.setter
    def health_check_local_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_local_ip", value)

    @property
    @pulumi.getter(name="healthCheckRemoteIp")
    def health_check_remote_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Health check peer address.
        """
        return pulumi.get(self, "health_check_remote_ip")

    @health_check_remote_ip.setter
    def health_check_remote_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_remote_ip", value)

    @property
    @pulumi.getter(name="ikeDhGroupName")
    def ike_dh_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
        """
        return pulumi.get(self, "ike_dh_group_name")

    @ike_dh_group_name.setter
    def ike_dh_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_dh_group_name", value)

    @property
    @pulumi.getter(name="ikeExchangeMode")
    def ike_exchange_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
        """
        return pulumi.get(self, "ike_exchange_mode")

    @ike_exchange_mode.setter
    def ike_exchange_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_exchange_mode", value)

    @property
    @pulumi.getter(name="ikeLocalAddress")
    def ike_local_address(self) -> Optional[pulumi.Input[str]]:
        """
        Local address of IKE operation specification, valid when ike_local_identity is `ADDRESS`, generally the value is `public_ip_address` of the related VPN gateway.
        """
        return pulumi.get(self, "ike_local_address")

    @ike_local_address.setter
    def ike_local_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_local_address", value)

    @property
    @pulumi.getter(name="ikeLocalFqdnName")
    def ike_local_fqdn_name(self) -> Optional[pulumi.Input[str]]:
        """
        Local FQDN name of the IKE operation specification.
        """
        return pulumi.get(self, "ike_local_fqdn_name")

    @ike_local_fqdn_name.setter
    def ike_local_fqdn_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_local_fqdn_name", value)

    @property
    @pulumi.getter(name="ikeLocalIdentity")
    def ike_local_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        """
        return pulumi.get(self, "ike_local_identity")

    @ike_local_identity.setter
    def ike_local_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_local_identity", value)

    @property
    @pulumi.getter(name="ikeProtoAuthenAlgorithm")
    def ike_proto_authen_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
        """
        return pulumi.get(self, "ike_proto_authen_algorithm")

    @ike_proto_authen_algorithm.setter
    def ike_proto_authen_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_proto_authen_algorithm", value)

    @property
    @pulumi.getter(name="ikeProtoEncryAlgorithm")
    def ike_proto_encry_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        """
        return pulumi.get(self, "ike_proto_encry_algorithm")

    @ike_proto_encry_algorithm.setter
    def ike_proto_encry_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_proto_encry_algorithm", value)

    @property
    @pulumi.getter(name="ikeRemoteAddress")
    def ike_remote_address(self) -> Optional[pulumi.Input[str]]:
        """
        Remote address of IKE operation specification, valid when ike_remote_identity is `ADDRESS`, generally the value is `public_ip_address` of the related customer gateway.
        """
        return pulumi.get(self, "ike_remote_address")

    @ike_remote_address.setter
    def ike_remote_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_remote_address", value)

    @property
    @pulumi.getter(name="ikeRemoteFqdnName")
    def ike_remote_fqdn_name(self) -> Optional[pulumi.Input[str]]:
        """
        Remote FQDN name of the IKE operation specification.
        """
        return pulumi.get(self, "ike_remote_fqdn_name")

    @ike_remote_fqdn_name.setter
    def ike_remote_fqdn_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_remote_fqdn_name", value)

    @property
    @pulumi.getter(name="ikeRemoteIdentity")
    def ike_remote_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        """
        return pulumi.get(self, "ike_remote_identity")

    @ike_remote_identity.setter
    def ike_remote_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_remote_identity", value)

    @property
    @pulumi.getter(name="ikeSaLifetimeSeconds")
    def ike_sa_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
        """
        return pulumi.get(self, "ike_sa_lifetime_seconds")

    @ike_sa_lifetime_seconds.setter
    def ike_sa_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_sa_lifetime_seconds", value)

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
        """
        return pulumi.get(self, "ike_version")

    @ike_version.setter
    def ike_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_version", value)

    @property
    @pulumi.getter(name="ipsecEncryptAlgorithm")
    def ipsec_encrypt_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        """
        return pulumi.get(self, "ipsec_encrypt_algorithm")

    @ipsec_encrypt_algorithm.setter
    def ipsec_encrypt_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_encrypt_algorithm", value)

    @property
    @pulumi.getter(name="ipsecIntegrityAlgorithm")
    def ipsec_integrity_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
        """
        return pulumi.get(self, "ipsec_integrity_algorithm")

    @ipsec_integrity_algorithm.setter
    def ipsec_integrity_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_integrity_algorithm", value)

    @property
    @pulumi.getter(name="ipsecPfsDhGroup")
    def ipsec_pfs_dh_group(self) -> Optional[pulumi.Input[str]]:
        """
        PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
        """
        return pulumi.get(self, "ipsec_pfs_dh_group")

    @ipsec_pfs_dh_group.setter
    def ipsec_pfs_dh_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_pfs_dh_group", value)

    @property
    @pulumi.getter(name="ipsecSaLifetimeSeconds")
    def ipsec_sa_lifetime_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
        """
        return pulumi.get(self, "ipsec_sa_lifetime_seconds")

    @ipsec_sa_lifetime_seconds.setter
    def ipsec_sa_lifetime_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_sa_lifetime_seconds", value)

    @property
    @pulumi.getter(name="ipsecSaLifetimeTraffic")
    def ipsec_sa_lifetime_traffic(self) -> Optional[pulumi.Input[int]]:
        """
        SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
        """
        return pulumi.get(self, "ipsec_sa_lifetime_traffic")

    @ipsec_sa_lifetime_traffic.setter
    def ipsec_sa_lifetime_traffic(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_sa_lifetime_traffic", value)

    @property
    @pulumi.getter(name="isCcnType")
    def is_ccn_type(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether is ccn type. Modification of this field only impacts force new logic of `vpc_id`. If `is_ccn_type` is true, modification of `vpc_id` will be ignored.
        """
        return pulumi.get(self, "is_ccn_type")

    @is_ccn_type.setter
    def is_ccn_type(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ccn_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the VPN connection. The length of character is limited to 1-60.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="netStatus")
    def net_status(self) -> Optional[pulumi.Input[str]]:
        """
        Net status of the VPN connection. Valid value: `AVAILABLE`.
        """
        return pulumi.get(self, "net_status")

    @net_status.setter
    def net_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_status", value)

    @property
    @pulumi.getter(name="preShareKey")
    def pre_share_key(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared key of the VPN connection.
        """
        return pulumi.get(self, "pre_share_key")

    @pre_share_key.setter
    def pre_share_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_share_key", value)

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[pulumi.Input[str]]:
        """
        Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
        """
        return pulumi.get(self, "route_type")

    @route_type.setter
    def route_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_type", value)

    @property
    @pulumi.getter(name="securityGroupPolicies")
    def security_group_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionSecurityGroupPolicyArgs']]]]:
        """
        SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
        """
        return pulumi.get(self, "security_group_policies")

    @security_group_policies.setter
    def security_group_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionSecurityGroupPolicyArgs']]]]):
        pulumi.set(self, "security_group_policies", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the connection. Valid value: `PENDING`, `AVAILABLE`, `DELETING`.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpnGatewayId")
    def vpn_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPN gateway.
        """
        return pulumi.get(self, "vpn_gateway_id")

    @vpn_gateway_id.setter
    def vpn_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_gateway_id", value)

    @property
    @pulumi.getter(name="vpnProto")
    def vpn_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Vpn proto of the VPN connection.
        """
        return pulumi.get(self, "vpn_proto")

    @vpn_proto.setter
    def vpn_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_proto", value)


class Connection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 customer_gateway_id: Optional[pulumi.Input[str]] = None,
                 dpd_action: Optional[pulumi.Input[str]] = None,
                 dpd_enable: Optional[pulumi.Input[int]] = None,
                 dpd_timeout: Optional[pulumi.Input[int]] = None,
                 enable_health_check: Optional[pulumi.Input[bool]] = None,
                 health_check_local_ip: Optional[pulumi.Input[str]] = None,
                 health_check_remote_ip: Optional[pulumi.Input[str]] = None,
                 ike_dh_group_name: Optional[pulumi.Input[str]] = None,
                 ike_exchange_mode: Optional[pulumi.Input[str]] = None,
                 ike_local_address: Optional[pulumi.Input[str]] = None,
                 ike_local_fqdn_name: Optional[pulumi.Input[str]] = None,
                 ike_local_identity: Optional[pulumi.Input[str]] = None,
                 ike_proto_authen_algorithm: Optional[pulumi.Input[str]] = None,
                 ike_proto_encry_algorithm: Optional[pulumi.Input[str]] = None,
                 ike_remote_address: Optional[pulumi.Input[str]] = None,
                 ike_remote_fqdn_name: Optional[pulumi.Input[str]] = None,
                 ike_remote_identity: Optional[pulumi.Input[str]] = None,
                 ike_sa_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 ipsec_encrypt_algorithm: Optional[pulumi.Input[str]] = None,
                 ipsec_integrity_algorithm: Optional[pulumi.Input[str]] = None,
                 ipsec_pfs_dh_group: Optional[pulumi.Input[str]] = None,
                 ipsec_sa_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 ipsec_sa_lifetime_traffic: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pre_share_key: Optional[pulumi.Input[str]] = None,
                 route_type: Optional[pulumi.Input[str]] = None,
                 security_group_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionSecurityGroupPolicyArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a VPN connection.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.vpn.Connection("foo",
            customer_gateway_id="cgw-xfqag",
            ike_dh_group_name="GROUP2",
            ike_exchange_mode="AGGRESSIVE",
            ike_local_address="1.1.1.1",
            ike_local_identity="ADDRESS",
            ike_proto_authen_algorithm="SHA",
            ike_proto_encry_algorithm="3DES-CBC",
            ike_remote_address="2.2.2.2",
            ike_remote_identity="ADDRESS",
            ike_sa_lifetime_seconds=86401,
            ipsec_encrypt_algorithm="3DES-CBC",
            ipsec_integrity_algorithm="SHA1",
            ipsec_pfs_dh_group="NULL",
            ipsec_sa_lifetime_seconds=7200,
            ipsec_sa_lifetime_traffic=2570,
            pre_share_key="testt",
            security_group_policies=[tencentcloud.vpn.ConnectionSecurityGroupPolicyArgs(
                local_cidr_block="172.16.0.0/16",
                remote_cidr_blocks=["2.2.2.0/26"],
            )],
            tags={
                "test": "testt",
            },
            vpc_id="vpc-dk8zmwuf",
            vpn_gateway_id="vpngw-8ccsnclt")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VPN connection can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpn/connection:Connection foo vpnx-nadifg3s
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] customer_gateway_id: ID of the customer gateway.
        :param pulumi.Input[str] dpd_action: The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
        :param pulumi.Input[int] dpd_enable: Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
        :param pulumi.Input[int] dpd_timeout: DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
        :param pulumi.Input[bool] enable_health_check: Whether intra-tunnel health checks are supported.
        :param pulumi.Input[str] health_check_local_ip: Health check the address of this terminal.
        :param pulumi.Input[str] health_check_remote_ip: Health check peer address.
        :param pulumi.Input[str] ike_dh_group_name: DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
        :param pulumi.Input[str] ike_exchange_mode: Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
        :param pulumi.Input[str] ike_local_address: Local address of IKE operation specification, valid when ike_local_identity is `ADDRESS`, generally the value is `public_ip_address` of the related VPN gateway.
        :param pulumi.Input[str] ike_local_fqdn_name: Local FQDN name of the IKE operation specification.
        :param pulumi.Input[str] ike_local_identity: Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        :param pulumi.Input[str] ike_proto_authen_algorithm: Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
        :param pulumi.Input[str] ike_proto_encry_algorithm: Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        :param pulumi.Input[str] ike_remote_address: Remote address of IKE operation specification, valid when ike_remote_identity is `ADDRESS`, generally the value is `public_ip_address` of the related customer gateway.
        :param pulumi.Input[str] ike_remote_fqdn_name: Remote FQDN name of the IKE operation specification.
        :param pulumi.Input[str] ike_remote_identity: Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        :param pulumi.Input[int] ike_sa_lifetime_seconds: SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
        :param pulumi.Input[str] ike_version: Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
        :param pulumi.Input[str] ipsec_encrypt_algorithm: Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        :param pulumi.Input[str] ipsec_integrity_algorithm: Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
        :param pulumi.Input[str] ipsec_pfs_dh_group: PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
        :param pulumi.Input[int] ipsec_sa_lifetime_seconds: SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
        :param pulumi.Input[int] ipsec_sa_lifetime_traffic: SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
        :param pulumi.Input[str] name: Name of the VPN connection. The length of character is limited to 1-60.
        :param pulumi.Input[str] pre_share_key: Pre-shared key of the VPN connection.
        :param pulumi.Input[str] route_type: Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionSecurityGroupPolicyArgs']]]] security_group_policies: SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] vpc_id: ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
        :param pulumi.Input[str] vpn_gateway_id: ID of the VPN gateway.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a VPN connection.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.vpn.Connection("foo",
            customer_gateway_id="cgw-xfqag",
            ike_dh_group_name="GROUP2",
            ike_exchange_mode="AGGRESSIVE",
            ike_local_address="1.1.1.1",
            ike_local_identity="ADDRESS",
            ike_proto_authen_algorithm="SHA",
            ike_proto_encry_algorithm="3DES-CBC",
            ike_remote_address="2.2.2.2",
            ike_remote_identity="ADDRESS",
            ike_sa_lifetime_seconds=86401,
            ipsec_encrypt_algorithm="3DES-CBC",
            ipsec_integrity_algorithm="SHA1",
            ipsec_pfs_dh_group="NULL",
            ipsec_sa_lifetime_seconds=7200,
            ipsec_sa_lifetime_traffic=2570,
            pre_share_key="testt",
            security_group_policies=[tencentcloud.vpn.ConnectionSecurityGroupPolicyArgs(
                local_cidr_block="172.16.0.0/16",
                remote_cidr_blocks=["2.2.2.0/26"],
            )],
            tags={
                "test": "testt",
            },
            vpc_id="vpc-dk8zmwuf",
            vpn_gateway_id="vpngw-8ccsnclt")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VPN connection can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpn/connection:Connection foo vpnx-nadifg3s
        ```

        :param str resource_name: The name of the resource.
        :param ConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 customer_gateway_id: Optional[pulumi.Input[str]] = None,
                 dpd_action: Optional[pulumi.Input[str]] = None,
                 dpd_enable: Optional[pulumi.Input[int]] = None,
                 dpd_timeout: Optional[pulumi.Input[int]] = None,
                 enable_health_check: Optional[pulumi.Input[bool]] = None,
                 health_check_local_ip: Optional[pulumi.Input[str]] = None,
                 health_check_remote_ip: Optional[pulumi.Input[str]] = None,
                 ike_dh_group_name: Optional[pulumi.Input[str]] = None,
                 ike_exchange_mode: Optional[pulumi.Input[str]] = None,
                 ike_local_address: Optional[pulumi.Input[str]] = None,
                 ike_local_fqdn_name: Optional[pulumi.Input[str]] = None,
                 ike_local_identity: Optional[pulumi.Input[str]] = None,
                 ike_proto_authen_algorithm: Optional[pulumi.Input[str]] = None,
                 ike_proto_encry_algorithm: Optional[pulumi.Input[str]] = None,
                 ike_remote_address: Optional[pulumi.Input[str]] = None,
                 ike_remote_fqdn_name: Optional[pulumi.Input[str]] = None,
                 ike_remote_identity: Optional[pulumi.Input[str]] = None,
                 ike_sa_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 ipsec_encrypt_algorithm: Optional[pulumi.Input[str]] = None,
                 ipsec_integrity_algorithm: Optional[pulumi.Input[str]] = None,
                 ipsec_pfs_dh_group: Optional[pulumi.Input[str]] = None,
                 ipsec_sa_lifetime_seconds: Optional[pulumi.Input[int]] = None,
                 ipsec_sa_lifetime_traffic: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pre_share_key: Optional[pulumi.Input[str]] = None,
                 route_type: Optional[pulumi.Input[str]] = None,
                 security_group_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionSecurityGroupPolicyArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpn_gateway_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectionArgs.__new__(ConnectionArgs)

            if customer_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'customer_gateway_id'")
            __props__.__dict__["customer_gateway_id"] = customer_gateway_id
            __props__.__dict__["dpd_action"] = dpd_action
            __props__.__dict__["dpd_enable"] = dpd_enable
            __props__.__dict__["dpd_timeout"] = dpd_timeout
            __props__.__dict__["enable_health_check"] = enable_health_check
            __props__.__dict__["health_check_local_ip"] = health_check_local_ip
            __props__.__dict__["health_check_remote_ip"] = health_check_remote_ip
            __props__.__dict__["ike_dh_group_name"] = ike_dh_group_name
            __props__.__dict__["ike_exchange_mode"] = ike_exchange_mode
            __props__.__dict__["ike_local_address"] = ike_local_address
            __props__.__dict__["ike_local_fqdn_name"] = ike_local_fqdn_name
            __props__.__dict__["ike_local_identity"] = ike_local_identity
            __props__.__dict__["ike_proto_authen_algorithm"] = ike_proto_authen_algorithm
            __props__.__dict__["ike_proto_encry_algorithm"] = ike_proto_encry_algorithm
            __props__.__dict__["ike_remote_address"] = ike_remote_address
            __props__.__dict__["ike_remote_fqdn_name"] = ike_remote_fqdn_name
            __props__.__dict__["ike_remote_identity"] = ike_remote_identity
            __props__.__dict__["ike_sa_lifetime_seconds"] = ike_sa_lifetime_seconds
            __props__.__dict__["ike_version"] = ike_version
            __props__.__dict__["ipsec_encrypt_algorithm"] = ipsec_encrypt_algorithm
            __props__.__dict__["ipsec_integrity_algorithm"] = ipsec_integrity_algorithm
            __props__.__dict__["ipsec_pfs_dh_group"] = ipsec_pfs_dh_group
            __props__.__dict__["ipsec_sa_lifetime_seconds"] = ipsec_sa_lifetime_seconds
            __props__.__dict__["ipsec_sa_lifetime_traffic"] = ipsec_sa_lifetime_traffic
            __props__.__dict__["name"] = name
            if pre_share_key is None and not opts.urn:
                raise TypeError("Missing required property 'pre_share_key'")
            __props__.__dict__["pre_share_key"] = pre_share_key
            __props__.__dict__["route_type"] = route_type
            __props__.__dict__["security_group_policies"] = security_group_policies
            __props__.__dict__["tags"] = tags
            __props__.__dict__["vpc_id"] = vpc_id
            if vpn_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpn_gateway_id'")
            __props__.__dict__["vpn_gateway_id"] = vpn_gateway_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["encrypt_proto"] = None
            __props__.__dict__["is_ccn_type"] = None
            __props__.__dict__["net_status"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["vpn_proto"] = None
        super(Connection, __self__).__init__(
            'tencentcloud:Vpn/connection:Connection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            customer_gateway_id: Optional[pulumi.Input[str]] = None,
            dpd_action: Optional[pulumi.Input[str]] = None,
            dpd_enable: Optional[pulumi.Input[int]] = None,
            dpd_timeout: Optional[pulumi.Input[int]] = None,
            enable_health_check: Optional[pulumi.Input[bool]] = None,
            encrypt_proto: Optional[pulumi.Input[str]] = None,
            health_check_local_ip: Optional[pulumi.Input[str]] = None,
            health_check_remote_ip: Optional[pulumi.Input[str]] = None,
            ike_dh_group_name: Optional[pulumi.Input[str]] = None,
            ike_exchange_mode: Optional[pulumi.Input[str]] = None,
            ike_local_address: Optional[pulumi.Input[str]] = None,
            ike_local_fqdn_name: Optional[pulumi.Input[str]] = None,
            ike_local_identity: Optional[pulumi.Input[str]] = None,
            ike_proto_authen_algorithm: Optional[pulumi.Input[str]] = None,
            ike_proto_encry_algorithm: Optional[pulumi.Input[str]] = None,
            ike_remote_address: Optional[pulumi.Input[str]] = None,
            ike_remote_fqdn_name: Optional[pulumi.Input[str]] = None,
            ike_remote_identity: Optional[pulumi.Input[str]] = None,
            ike_sa_lifetime_seconds: Optional[pulumi.Input[int]] = None,
            ike_version: Optional[pulumi.Input[str]] = None,
            ipsec_encrypt_algorithm: Optional[pulumi.Input[str]] = None,
            ipsec_integrity_algorithm: Optional[pulumi.Input[str]] = None,
            ipsec_pfs_dh_group: Optional[pulumi.Input[str]] = None,
            ipsec_sa_lifetime_seconds: Optional[pulumi.Input[int]] = None,
            ipsec_sa_lifetime_traffic: Optional[pulumi.Input[int]] = None,
            is_ccn_type: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            net_status: Optional[pulumi.Input[str]] = None,
            pre_share_key: Optional[pulumi.Input[str]] = None,
            route_type: Optional[pulumi.Input[str]] = None,
            security_group_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionSecurityGroupPolicyArgs']]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vpn_gateway_id: Optional[pulumi.Input[str]] = None,
            vpn_proto: Optional[pulumi.Input[str]] = None) -> 'Connection':
        """
        Get an existing Connection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: Create time of the VPN connection.
        :param pulumi.Input[str] customer_gateway_id: ID of the customer gateway.
        :param pulumi.Input[str] dpd_action: The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
        :param pulumi.Input[int] dpd_enable: Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
        :param pulumi.Input[int] dpd_timeout: DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
        :param pulumi.Input[bool] enable_health_check: Whether intra-tunnel health checks are supported.
        :param pulumi.Input[str] encrypt_proto: Encrypt proto of the VPN connection.
        :param pulumi.Input[str] health_check_local_ip: Health check the address of this terminal.
        :param pulumi.Input[str] health_check_remote_ip: Health check peer address.
        :param pulumi.Input[str] ike_dh_group_name: DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
        :param pulumi.Input[str] ike_exchange_mode: Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
        :param pulumi.Input[str] ike_local_address: Local address of IKE operation specification, valid when ike_local_identity is `ADDRESS`, generally the value is `public_ip_address` of the related VPN gateway.
        :param pulumi.Input[str] ike_local_fqdn_name: Local FQDN name of the IKE operation specification.
        :param pulumi.Input[str] ike_local_identity: Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        :param pulumi.Input[str] ike_proto_authen_algorithm: Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
        :param pulumi.Input[str] ike_proto_encry_algorithm: Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        :param pulumi.Input[str] ike_remote_address: Remote address of IKE operation specification, valid when ike_remote_identity is `ADDRESS`, generally the value is `public_ip_address` of the related customer gateway.
        :param pulumi.Input[str] ike_remote_fqdn_name: Remote FQDN name of the IKE operation specification.
        :param pulumi.Input[str] ike_remote_identity: Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        :param pulumi.Input[int] ike_sa_lifetime_seconds: SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
        :param pulumi.Input[str] ike_version: Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
        :param pulumi.Input[str] ipsec_encrypt_algorithm: Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        :param pulumi.Input[str] ipsec_integrity_algorithm: Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
        :param pulumi.Input[str] ipsec_pfs_dh_group: PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
        :param pulumi.Input[int] ipsec_sa_lifetime_seconds: SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
        :param pulumi.Input[int] ipsec_sa_lifetime_traffic: SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
        :param pulumi.Input[bool] is_ccn_type: Indicate whether is ccn type. Modification of this field only impacts force new logic of `vpc_id`. If `is_ccn_type` is true, modification of `vpc_id` will be ignored.
        :param pulumi.Input[str] name: Name of the VPN connection. The length of character is limited to 1-60.
        :param pulumi.Input[str] net_status: Net status of the VPN connection. Valid value: `AVAILABLE`.
        :param pulumi.Input[str] pre_share_key: Pre-shared key of the VPN connection.
        :param pulumi.Input[str] route_type: Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectionSecurityGroupPolicyArgs']]]] security_group_policies: SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
        :param pulumi.Input[str] state: State of the connection. Valid value: `PENDING`, `AVAILABLE`, `DELETING`.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] vpc_id: ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
        :param pulumi.Input[str] vpn_gateway_id: ID of the VPN gateway.
        :param pulumi.Input[str] vpn_proto: Vpn proto of the VPN connection.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectionState.__new__(_ConnectionState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["customer_gateway_id"] = customer_gateway_id
        __props__.__dict__["dpd_action"] = dpd_action
        __props__.__dict__["dpd_enable"] = dpd_enable
        __props__.__dict__["dpd_timeout"] = dpd_timeout
        __props__.__dict__["enable_health_check"] = enable_health_check
        __props__.__dict__["encrypt_proto"] = encrypt_proto
        __props__.__dict__["health_check_local_ip"] = health_check_local_ip
        __props__.__dict__["health_check_remote_ip"] = health_check_remote_ip
        __props__.__dict__["ike_dh_group_name"] = ike_dh_group_name
        __props__.__dict__["ike_exchange_mode"] = ike_exchange_mode
        __props__.__dict__["ike_local_address"] = ike_local_address
        __props__.__dict__["ike_local_fqdn_name"] = ike_local_fqdn_name
        __props__.__dict__["ike_local_identity"] = ike_local_identity
        __props__.__dict__["ike_proto_authen_algorithm"] = ike_proto_authen_algorithm
        __props__.__dict__["ike_proto_encry_algorithm"] = ike_proto_encry_algorithm
        __props__.__dict__["ike_remote_address"] = ike_remote_address
        __props__.__dict__["ike_remote_fqdn_name"] = ike_remote_fqdn_name
        __props__.__dict__["ike_remote_identity"] = ike_remote_identity
        __props__.__dict__["ike_sa_lifetime_seconds"] = ike_sa_lifetime_seconds
        __props__.__dict__["ike_version"] = ike_version
        __props__.__dict__["ipsec_encrypt_algorithm"] = ipsec_encrypt_algorithm
        __props__.__dict__["ipsec_integrity_algorithm"] = ipsec_integrity_algorithm
        __props__.__dict__["ipsec_pfs_dh_group"] = ipsec_pfs_dh_group
        __props__.__dict__["ipsec_sa_lifetime_seconds"] = ipsec_sa_lifetime_seconds
        __props__.__dict__["ipsec_sa_lifetime_traffic"] = ipsec_sa_lifetime_traffic
        __props__.__dict__["is_ccn_type"] = is_ccn_type
        __props__.__dict__["name"] = name
        __props__.__dict__["net_status"] = net_status
        __props__.__dict__["pre_share_key"] = pre_share_key
        __props__.__dict__["route_type"] = route_type
        __props__.__dict__["security_group_policies"] = security_group_policies
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vpn_gateway_id"] = vpn_gateway_id
        __props__.__dict__["vpn_proto"] = vpn_proto
        return Connection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of the VPN connection.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> pulumi.Output[str]:
        """
        ID of the customer gateway.
        """
        return pulumi.get(self, "customer_gateway_id")

    @property
    @pulumi.getter(name="dpdAction")
    def dpd_action(self) -> pulumi.Output[str]:
        """
        The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
        """
        return pulumi.get(self, "dpd_action")

    @property
    @pulumi.getter(name="dpdEnable")
    def dpd_enable(self) -> pulumi.Output[int]:
        """
        Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
        """
        return pulumi.get(self, "dpd_enable")

    @property
    @pulumi.getter(name="dpdTimeout")
    def dpd_timeout(self) -> pulumi.Output[int]:
        """
        DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
        """
        return pulumi.get(self, "dpd_timeout")

    @property
    @pulumi.getter(name="enableHealthCheck")
    def enable_health_check(self) -> pulumi.Output[bool]:
        """
        Whether intra-tunnel health checks are supported.
        """
        return pulumi.get(self, "enable_health_check")

    @property
    @pulumi.getter(name="encryptProto")
    def encrypt_proto(self) -> pulumi.Output[str]:
        """
        Encrypt proto of the VPN connection.
        """
        return pulumi.get(self, "encrypt_proto")

    @property
    @pulumi.getter(name="healthCheckLocalIp")
    def health_check_local_ip(self) -> pulumi.Output[str]:
        """
        Health check the address of this terminal.
        """
        return pulumi.get(self, "health_check_local_ip")

    @property
    @pulumi.getter(name="healthCheckRemoteIp")
    def health_check_remote_ip(self) -> pulumi.Output[str]:
        """
        Health check peer address.
        """
        return pulumi.get(self, "health_check_remote_ip")

    @property
    @pulumi.getter(name="ikeDhGroupName")
    def ike_dh_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
        """
        return pulumi.get(self, "ike_dh_group_name")

    @property
    @pulumi.getter(name="ikeExchangeMode")
    def ike_exchange_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
        """
        return pulumi.get(self, "ike_exchange_mode")

    @property
    @pulumi.getter(name="ikeLocalAddress")
    def ike_local_address(self) -> pulumi.Output[Optional[str]]:
        """
        Local address of IKE operation specification, valid when ike_local_identity is `ADDRESS`, generally the value is `public_ip_address` of the related VPN gateway.
        """
        return pulumi.get(self, "ike_local_address")

    @property
    @pulumi.getter(name="ikeLocalFqdnName")
    def ike_local_fqdn_name(self) -> pulumi.Output[str]:
        """
        Local FQDN name of the IKE operation specification.
        """
        return pulumi.get(self, "ike_local_fqdn_name")

    @property
    @pulumi.getter(name="ikeLocalIdentity")
    def ike_local_identity(self) -> pulumi.Output[Optional[str]]:
        """
        Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        """
        return pulumi.get(self, "ike_local_identity")

    @property
    @pulumi.getter(name="ikeProtoAuthenAlgorithm")
    def ike_proto_authen_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
        """
        return pulumi.get(self, "ike_proto_authen_algorithm")

    @property
    @pulumi.getter(name="ikeProtoEncryAlgorithm")
    def ike_proto_encry_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        """
        return pulumi.get(self, "ike_proto_encry_algorithm")

    @property
    @pulumi.getter(name="ikeRemoteAddress")
    def ike_remote_address(self) -> pulumi.Output[Optional[str]]:
        """
        Remote address of IKE operation specification, valid when ike_remote_identity is `ADDRESS`, generally the value is `public_ip_address` of the related customer gateway.
        """
        return pulumi.get(self, "ike_remote_address")

    @property
    @pulumi.getter(name="ikeRemoteFqdnName")
    def ike_remote_fqdn_name(self) -> pulumi.Output[str]:
        """
        Remote FQDN name of the IKE operation specification.
        """
        return pulumi.get(self, "ike_remote_fqdn_name")

    @property
    @pulumi.getter(name="ikeRemoteIdentity")
    def ike_remote_identity(self) -> pulumi.Output[Optional[str]]:
        """
        Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
        """
        return pulumi.get(self, "ike_remote_identity")

    @property
    @pulumi.getter(name="ikeSaLifetimeSeconds")
    def ike_sa_lifetime_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
        """
        return pulumi.get(self, "ike_sa_lifetime_seconds")

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> pulumi.Output[Optional[str]]:
        """
        Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
        """
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="ipsecEncryptAlgorithm")
    def ipsec_encrypt_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
        """
        return pulumi.get(self, "ipsec_encrypt_algorithm")

    @property
    @pulumi.getter(name="ipsecIntegrityAlgorithm")
    def ipsec_integrity_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
        """
        return pulumi.get(self, "ipsec_integrity_algorithm")

    @property
    @pulumi.getter(name="ipsecPfsDhGroup")
    def ipsec_pfs_dh_group(self) -> pulumi.Output[Optional[str]]:
        """
        PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
        """
        return pulumi.get(self, "ipsec_pfs_dh_group")

    @property
    @pulumi.getter(name="ipsecSaLifetimeSeconds")
    def ipsec_sa_lifetime_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
        """
        return pulumi.get(self, "ipsec_sa_lifetime_seconds")

    @property
    @pulumi.getter(name="ipsecSaLifetimeTraffic")
    def ipsec_sa_lifetime_traffic(self) -> pulumi.Output[Optional[int]]:
        """
        SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
        """
        return pulumi.get(self, "ipsec_sa_lifetime_traffic")

    @property
    @pulumi.getter(name="isCcnType")
    def is_ccn_type(self) -> pulumi.Output[bool]:
        """
        Indicate whether is ccn type. Modification of this field only impacts force new logic of `vpc_id`. If `is_ccn_type` is true, modification of `vpc_id` will be ignored.
        """
        return pulumi.get(self, "is_ccn_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the VPN connection. The length of character is limited to 1-60.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="netStatus")
    def net_status(self) -> pulumi.Output[str]:
        """
        Net status of the VPN connection. Valid value: `AVAILABLE`.
        """
        return pulumi.get(self, "net_status")

    @property
    @pulumi.getter(name="preShareKey")
    def pre_share_key(self) -> pulumi.Output[str]:
        """
        Pre-shared key of the VPN connection.
        """
        return pulumi.get(self, "pre_share_key")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> pulumi.Output[str]:
        """
        Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
        """
        return pulumi.get(self, "route_type")

    @property
    @pulumi.getter(name="securityGroupPolicies")
    def security_group_policies(self) -> pulumi.Output[Optional[Sequence['outputs.ConnectionSecurityGroupPolicy']]]:
        """
        SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
        """
        return pulumi.get(self, "security_group_policies")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the connection. Valid value: `PENDING`, `AVAILABLE`, `DELETING`.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpnGatewayId")
    def vpn_gateway_id(self) -> pulumi.Output[str]:
        """
        ID of the VPN gateway.
        """
        return pulumi.get(self, "vpn_gateway_id")

    @property
    @pulumi.getter(name="vpnProto")
    def vpn_proto(self) -> pulumi.Output[str]:
        """
        Vpn proto of the VPN connection.
        """
        return pulumi.get(self, "vpn_proto")

