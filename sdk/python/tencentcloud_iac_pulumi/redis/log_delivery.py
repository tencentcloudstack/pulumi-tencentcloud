# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LogDeliveryArgs', 'LogDelivery']

@pulumi.input_type
class LogDeliveryArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 create_index: Optional[pulumi.Input[bool]] = None,
                 log_region: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LogDelivery resource.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[bool] create_index: Whether to create an index when creating a log topic.
        :param pulumi.Input[str] log_region: The region where the log set is located; if not specified, the region where the instance is located will be used by default.
        :param pulumi.Input[str] logset_id: The ID of the log set being delivered.
        :param pulumi.Input[str] logset_name: Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
        :param pulumi.Input[int] period: Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
        :param pulumi.Input[str] topic_id: The ID of the topic being delivered.
        :param pulumi.Input[str] topic_name: Log topic name, required when TopicId is empty, a new log topic will be automatically created.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if create_index is not None:
            pulumi.set(__self__, "create_index", create_index)
        if log_region is not None:
            pulumi.set(__self__, "log_region", log_region)
        if logset_id is not None:
            pulumi.set(__self__, "logset_id", logset_id)
        if logset_name is not None:
            pulumi.set(__self__, "logset_name", logset_name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="createIndex")
    def create_index(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create an index when creating a log topic.
        """
        return pulumi.get(self, "create_index")

    @create_index.setter
    def create_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_index", value)

    @property
    @pulumi.getter(name="logRegion")
    def log_region(self) -> Optional[pulumi.Input[str]]:
        """
        The region where the log set is located; if not specified, the region where the instance is located will be used by default.
        """
        return pulumi.get(self, "log_region")

    @log_region.setter
    def log_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_region", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the log set being delivered.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_id", value)

    @property
    @pulumi.getter(name="logsetName")
    def logset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
        """
        return pulumi.get(self, "logset_name")

    @logset_name.setter
    def logset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_name", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the topic being delivered.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic name, required when TopicId is empty, a new log topic will be automatically created.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class _LogDeliveryState:
    def __init__(__self__, *,
                 create_index: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_region: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LogDelivery resources.
        :param pulumi.Input[bool] create_index: Whether to create an index when creating a log topic.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] log_region: The region where the log set is located; if not specified, the region where the instance is located will be used by default.
        :param pulumi.Input[str] logset_id: The ID of the log set being delivered.
        :param pulumi.Input[str] logset_name: Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
        :param pulumi.Input[int] period: Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
        :param pulumi.Input[str] topic_id: The ID of the topic being delivered.
        :param pulumi.Input[str] topic_name: Log topic name, required when TopicId is empty, a new log topic will be automatically created.
        """
        if create_index is not None:
            pulumi.set(__self__, "create_index", create_index)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if log_region is not None:
            pulumi.set(__self__, "log_region", log_region)
        if logset_id is not None:
            pulumi.set(__self__, "logset_id", logset_id)
        if logset_name is not None:
            pulumi.set(__self__, "logset_name", logset_name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="createIndex")
    def create_index(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create an index when creating a log topic.
        """
        return pulumi.get(self, "create_index")

    @create_index.setter
    def create_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_index", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="logRegion")
    def log_region(self) -> Optional[pulumi.Input[str]]:
        """
        The region where the log set is located; if not specified, the region where the instance is located will be used by default.
        """
        return pulumi.get(self, "log_region")

    @log_region.setter
    def log_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_region", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the log set being delivered.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_id", value)

    @property
    @pulumi.getter(name="logsetName")
    def logset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
        """
        return pulumi.get(self, "logset_name")

    @logset_name.setter
    def logset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_name", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the topic being delivered.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic name, required when TopicId is empty, a new log topic will be automatically created.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


class LogDelivery(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 create_index: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_region: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create Redis instance log delivery land set its attributes.

        > **NOTE:** When you use an existing cls logset and topic to enable logging, there is no need to set parameters such
        as `period`, `create_index`, `log_region`, etc.

        ## Example Usage

        ### Use cls logset and topic which existed

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        delivery = tencentcloud.redis.LogDelivery("delivery",
            instance_id="crs-dmjj8en7",
            logset_id="cc31d9d6-74c0-4888-8b2f-b8148c3bcc5c",
            topic_id="5c2333e9-0bab-41fd-9f75-c602b3f9545f")
        ```
        <!--End PulumiCodeChooser -->

        ### Use exist cls logset and create new topic

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        delivery = tencentcloud.redis.LogDelivery("delivery",
            create_index=True,
            instance_id="crs-dmjj8en7",
            logset_id="cc31d9d6-74c0-4888-8b2f-b8148c3bcc5c",
            period=20,
            topic_name="test13")
        ```
        <!--End PulumiCodeChooser -->

        ### Create new cls logset and topic

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        delivery = tencentcloud.redis.LogDelivery("delivery",
            create_index=True,
            instance_id="crs-dmjj8en7",
            log_region="ap-guangzhou",
            logset_name="test",
            period=20,
            topic_name="test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Redis log delivery can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Redis/logDelivery:LogDelivery delivery crs-dmjj8en7
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] create_index: Whether to create an index when creating a log topic.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] log_region: The region where the log set is located; if not specified, the region where the instance is located will be used by default.
        :param pulumi.Input[str] logset_id: The ID of the log set being delivered.
        :param pulumi.Input[str] logset_name: Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
        :param pulumi.Input[int] period: Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
        :param pulumi.Input[str] topic_id: The ID of the topic being delivered.
        :param pulumi.Input[str] topic_name: Log topic name, required when TopicId is empty, a new log topic will be automatically created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogDeliveryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create Redis instance log delivery land set its attributes.

        > **NOTE:** When you use an existing cls logset and topic to enable logging, there is no need to set parameters such
        as `period`, `create_index`, `log_region`, etc.

        ## Example Usage

        ### Use cls logset and topic which existed

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        delivery = tencentcloud.redis.LogDelivery("delivery",
            instance_id="crs-dmjj8en7",
            logset_id="cc31d9d6-74c0-4888-8b2f-b8148c3bcc5c",
            topic_id="5c2333e9-0bab-41fd-9f75-c602b3f9545f")
        ```
        <!--End PulumiCodeChooser -->

        ### Use exist cls logset and create new topic

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        delivery = tencentcloud.redis.LogDelivery("delivery",
            create_index=True,
            instance_id="crs-dmjj8en7",
            logset_id="cc31d9d6-74c0-4888-8b2f-b8148c3bcc5c",
            period=20,
            topic_name="test13")
        ```
        <!--End PulumiCodeChooser -->

        ### Create new cls logset and topic

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        delivery = tencentcloud.redis.LogDelivery("delivery",
            create_index=True,
            instance_id="crs-dmjj8en7",
            log_region="ap-guangzhou",
            logset_name="test",
            period=20,
            topic_name="test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Redis log delivery can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Redis/logDelivery:LogDelivery delivery crs-dmjj8en7
        ```

        :param str resource_name: The name of the resource.
        :param LogDeliveryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogDeliveryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 create_index: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_region: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogDeliveryArgs.__new__(LogDeliveryArgs)

            __props__.__dict__["create_index"] = create_index
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["log_region"] = log_region
            __props__.__dict__["logset_id"] = logset_id
            __props__.__dict__["logset_name"] = logset_name
            __props__.__dict__["period"] = period
            __props__.__dict__["topic_id"] = topic_id
            __props__.__dict__["topic_name"] = topic_name
        super(LogDelivery, __self__).__init__(
            'tencentcloud:Redis/logDelivery:LogDelivery',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_index: Optional[pulumi.Input[bool]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            log_region: Optional[pulumi.Input[str]] = None,
            logset_id: Optional[pulumi.Input[str]] = None,
            logset_name: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            topic_id: Optional[pulumi.Input[str]] = None,
            topic_name: Optional[pulumi.Input[str]] = None) -> 'LogDelivery':
        """
        Get an existing LogDelivery resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] create_index: Whether to create an index when creating a log topic.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] log_region: The region where the log set is located; if not specified, the region where the instance is located will be used by default.
        :param pulumi.Input[str] logset_id: The ID of the log set being delivered.
        :param pulumi.Input[str] logset_name: Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
        :param pulumi.Input[int] period: Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
        :param pulumi.Input[str] topic_id: The ID of the topic being delivered.
        :param pulumi.Input[str] topic_name: Log topic name, required when TopicId is empty, a new log topic will be automatically created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogDeliveryState.__new__(_LogDeliveryState)

        __props__.__dict__["create_index"] = create_index
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["log_region"] = log_region
        __props__.__dict__["logset_id"] = logset_id
        __props__.__dict__["logset_name"] = logset_name
        __props__.__dict__["period"] = period
        __props__.__dict__["topic_id"] = topic_id
        __props__.__dict__["topic_name"] = topic_name
        return LogDelivery(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createIndex")
    def create_index(self) -> pulumi.Output[bool]:
        """
        Whether to create an index when creating a log topic.
        """
        return pulumi.get(self, "create_index")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="logRegion")
    def log_region(self) -> pulumi.Output[str]:
        """
        The region where the log set is located; if not specified, the region where the instance is located will be used by default.
        """
        return pulumi.get(self, "log_region")

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> pulumi.Output[str]:
        """
        The ID of the log set being delivered.
        """
        return pulumi.get(self, "logset_id")

    @property
    @pulumi.getter(name="logsetName")
    def logset_name(self) -> pulumi.Output[str]:
        """
        Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
        """
        return pulumi.get(self, "logset_name")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[int]:
        """
        Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        The ID of the topic being delivered.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[str]:
        """
        Log topic name, required when TopicId is empty, a new log topic will be automatically created.
        """
        return pulumi.get(self, "topic_name")

