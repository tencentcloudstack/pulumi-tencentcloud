# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetClustersResult',
    'AwaitableGetClustersResult',
    'get_clusters',
    'get_clusters_output',
]

@pulumi.output_type
class GetClustersResult:
    """
    A collection of values returned by getClusters.
    """
    def __init__(__self__, auto_renew_flags=None, cluster_name=None, dedicated_cluster_id=None, id=None, project_ids=None, redis_cluster_ids=None, resources=None, result_output_file=None, statuses=None):
        if auto_renew_flags and not isinstance(auto_renew_flags, list):
            raise TypeError("Expected argument 'auto_renew_flags' to be a list")
        pulumi.set(__self__, "auto_renew_flags", auto_renew_flags)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if dedicated_cluster_id and not isinstance(dedicated_cluster_id, str):
            raise TypeError("Expected argument 'dedicated_cluster_id' to be a str")
        pulumi.set(__self__, "dedicated_cluster_id", dedicated_cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_ids and not isinstance(project_ids, list):
            raise TypeError("Expected argument 'project_ids' to be a list")
        pulumi.set(__self__, "project_ids", project_ids)
        if redis_cluster_ids and not isinstance(redis_cluster_ids, list):
            raise TypeError("Expected argument 'redis_cluster_ids' to be a list")
        pulumi.set(__self__, "redis_cluster_ids", redis_cluster_ids)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter(name="autoRenewFlags")
    def auto_renew_flags(self) -> Optional[Sequence[int]]:
        """
        Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
        """
        return pulumi.get(self, "auto_renew_flags")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="dedicatedClusterId")
    def dedicated_cluster_id(self) -> Optional[str]:
        """
        Dedicated cluster Id.
        """
        return pulumi.get(self, "dedicated_cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="redisClusterIds")
    def redis_cluster_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "redis_cluster_ids")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetClustersResourceResult']:
        """
        .
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[int]]:
        """
        Cluster status: 1- In process, 2- Running, 3- Isolated.
        """
        return pulumi.get(self, "statuses")


class AwaitableGetClustersResult(GetClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClustersResult(
            auto_renew_flags=self.auto_renew_flags,
            cluster_name=self.cluster_name,
            dedicated_cluster_id=self.dedicated_cluster_id,
            id=self.id,
            project_ids=self.project_ids,
            redis_cluster_ids=self.redis_cluster_ids,
            resources=self.resources,
            result_output_file=self.result_output_file,
            statuses=self.statuses)


def get_clusters(auto_renew_flags: Optional[Sequence[int]] = None,
                 cluster_name: Optional[str] = None,
                 dedicated_cluster_id: Optional[str] = None,
                 project_ids: Optional[Sequence[int]] = None,
                 redis_cluster_ids: Optional[Sequence[str]] = None,
                 result_output_file: Optional[str] = None,
                 statuses: Optional[Sequence[int]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClustersResult:
    """
    Use this data source to query detailed information of redis clusters

    ## Example Usage

    ### Query all instance

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    clusters = tencentcloud.Redis.get_clusters()
    ```
    <!--End PulumiCodeChooser -->

    ### Also Support the following query conditions

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    clusters = tencentcloud.Redis.get_clusters(auto_renew_flags=[
            0,
            1,
            2,
        ],
        cluster_name="crs-cdc-9nyfki8h",
        dedicated_cluster_id="cluster-0astoh6a",
        project_ids=[
            0,
            1,
        ],
        redis_cluster_ids=["crs-cdc-9nyfki8h"],
        statuses=[
            0,
            1,
            2,
        ])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[int] auto_renew_flags: Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
    :param str cluster_name: Cluster name.
    :param str dedicated_cluster_id: Dedicated cluster Id.
    :param Sequence[int] project_ids: Project Ids.
    :param Sequence[str] redis_cluster_ids: Redis Cluster Ids.
    :param str result_output_file: Used to save results.
    :param Sequence[int] statuses: Cluster status: 1- In process, 2- Running, 3- Isolated.
    """
    __args__ = dict()
    __args__['autoRenewFlags'] = auto_renew_flags
    __args__['clusterName'] = cluster_name
    __args__['dedicatedClusterId'] = dedicated_cluster_id
    __args__['projectIds'] = project_ids
    __args__['redisClusterIds'] = redis_cluster_ids
    __args__['resultOutputFile'] = result_output_file
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Redis/getClusters:getClusters', __args__, opts=opts, typ=GetClustersResult).value

    return AwaitableGetClustersResult(
        auto_renew_flags=pulumi.get(__ret__, 'auto_renew_flags'),
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        dedicated_cluster_id=pulumi.get(__ret__, 'dedicated_cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        project_ids=pulumi.get(__ret__, 'project_ids'),
        redis_cluster_ids=pulumi.get(__ret__, 'redis_cluster_ids'),
        resources=pulumi.get(__ret__, 'resources'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        statuses=pulumi.get(__ret__, 'statuses'))


@_utilities.lift_output_func(get_clusters)
def get_clusters_output(auto_renew_flags: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                        cluster_name: Optional[pulumi.Input[Optional[str]]] = None,
                        dedicated_cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                        project_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                        redis_cluster_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        statuses: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClustersResult]:
    """
    Use this data source to query detailed information of redis clusters

    ## Example Usage

    ### Query all instance

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    clusters = tencentcloud.Redis.get_clusters()
    ```
    <!--End PulumiCodeChooser -->

    ### Also Support the following query conditions

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    clusters = tencentcloud.Redis.get_clusters(auto_renew_flags=[
            0,
            1,
            2,
        ],
        cluster_name="crs-cdc-9nyfki8h",
        dedicated_cluster_id="cluster-0astoh6a",
        project_ids=[
            0,
            1,
        ],
        redis_cluster_ids=["crs-cdc-9nyfki8h"],
        statuses=[
            0,
            1,
            2,
        ])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[int] auto_renew_flags: Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
    :param str cluster_name: Cluster name.
    :param str dedicated_cluster_id: Dedicated cluster Id.
    :param Sequence[int] project_ids: Project Ids.
    :param Sequence[str] redis_cluster_ids: Redis Cluster Ids.
    :param str result_output_file: Used to save results.
    :param Sequence[int] statuses: Cluster status: 1- In process, 2- Running, 3- Isolated.
    """
    ...
