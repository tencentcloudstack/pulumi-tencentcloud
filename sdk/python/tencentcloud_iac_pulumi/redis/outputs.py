# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BackupDownloadRestrictionLimitVpc',
    'InstanceNodeInfo',
    'ParamTemplateParamDetail',
    'ParamTemplateParamsOverride',
    'GetBackupBackupSetResult',
    'GetBackupDownloadInfoBackupInfoResult',
    'GetBackupDownloadInfoLimitVpcResult',
    'GetClustersResourceResult',
    'GetClustersResourceBaseBundleResult',
    'GetClustersResourceResourceBundleResult',
    'GetInstanceNodeInfoProxyResult',
    'GetInstanceNodeInfoRediResult',
    'GetInstanceShardsInstanceShardResult',
    'GetInstanceTaskListTaskResult',
    'GetInstanceZoneInfoReplicaGroupResult',
    'GetInstanceZoneInfoReplicaGroupRedisNodeResult',
    'GetInstancesInstanceListResult',
    'GetInstancesInstanceListNodeInfoResult',
    'GetParamRecordsInstanceParamHistoryResult',
    'GetZoneConfigListResult',
]

@pulumi.output_type
class BackupDownloadRestrictionLimitVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcLists":
            suggest = "vpc_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupDownloadRestrictionLimitVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupDownloadRestrictionLimitVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupDownloadRestrictionLimitVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 vpc_lists: Sequence[str]):
        """
        :param str region: Customize the region of the VPC to which the backup file is downloaded.
        :param Sequence[str] vpc_lists: Customize the list of VPCs to download backup files.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_lists", vpc_lists)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Customize the region of the VPC to which the backup file is downloaded.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpcLists")
    def vpc_lists(self) -> Sequence[str]:
        """
        Customize the list of VPCs to download backup files.
        """
        return pulumi.get(self, "vpc_lists")


@pulumi.output_type
class InstanceNodeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceNodeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceNodeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceNodeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 master: Optional[bool] = None,
                 zone_id: Optional[int] = None):
        """
        :param int id: ID of the master or replica node.
        :param bool master: Indicates whether the node is master.
        :param int zone_id: ID of the availability zone of the master or replica node.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if master is not None:
            pulumi.set(__self__, "master", master)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID of the master or replica node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def master(self) -> Optional[bool]:
        """
        Indicates whether the node is master.
        """
        return pulumi.get(self, "master")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[int]:
        """
        ID of the availability zone of the master or replica node.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class ParamTemplateParamDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentValue":
            suggest = "current_value"
        elif key == "enumValues":
            suggest = "enum_values"
        elif key == "needReboot":
            suggest = "need_reboot"
        elif key == "paramType":
            suggest = "param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParamTemplateParamDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParamTemplateParamDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParamTemplateParamDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_value: Optional[str] = None,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 enum_values: Optional[Sequence[str]] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 name: Optional[str] = None,
                 need_reboot: Optional[int] = None,
                 param_type: Optional[str] = None):
        """
        :param str current_value: Current value.
        :param str default: Default value.
        :param str description: Parameter template description.
        :param Sequence[str] enum_values: Enum values.
        :param str max: Maximum value.
        :param str min: Minimum value.
        :param str name: Parameter template name.
        :param int need_reboot: Indicates whether to reboot redis instance if modified.
        :param str param_type: Parameter type.
        """
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_values is not None:
            pulumi.set(__self__, "enum_values", enum_values)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_reboot is not None:
            pulumi.set(__self__, "need_reboot", need_reboot)
        if param_type is not None:
            pulumi.set(__self__, "param_type", param_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[str]:
        """
        Current value.
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        Default value.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Parameter template description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Optional[Sequence[str]]:
        """
        Enum values.
        """
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        """
        Maximum value.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        """
        Minimum value.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Parameter template name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="needReboot")
    def need_reboot(self) -> Optional[int]:
        """
        Indicates whether to reboot redis instance if modified.
        """
        return pulumi.get(self, "need_reboot")

    @property
    @pulumi.getter(name="paramType")
    def param_type(self) -> Optional[str]:
        """
        Parameter type.
        """
        return pulumi.get(self, "param_type")


@pulumi.output_type
class ParamTemplateParamsOverride(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Parameter key e.g. `timeout`, check https://www.tencentcloud.com/document/product/239/39796 for more reference.
        :param str value: Parameter value, check https://www.tencentcloud.com/document/product/239/39796 for more reference.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Parameter key e.g. `timeout`, check https://www.tencentcloud.com/document/product/239/39796 for more reference.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Parameter value, check https://www.tencentcloud.com/document/product/239/39796 for more reference.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBackupBackupSetResult(dict):
    def __init__(__self__, *,
                 backup_id: str,
                 backup_size: int,
                 backup_type: str,
                 end_time: str,
                 expire_time: str,
                 file_type: str,
                 full_backup: int,
                 instance_id: str,
                 instance_name: str,
                 instance_type: int,
                 locked: int,
                 region: str,
                 remark: str,
                 start_time: str,
                 status: int):
        """
        :param str backup_id: Backup ID.
        :param int backup_size: Internal fields, which can be ignored by the user.
        :param str backup_type: Backup type.1: User-initiated manual backup.0: System-initiated backup in the early morning.
        :param str end_time: End time, such as 2017-02-08 19:09:26.Query the list of backups that the instance started backing up during the [beginTime, endTime] time period.
        :param str expire_time: Backup file expiration time.
        :param str file_type: Back up file types.
        :param int full_backup: Internal fields, which can be ignored by the user.
        :param str instance_id: The ID of instance.
        :param str instance_name: Instance name, which supports fuzzy search based on instance name.
        :param int instance_type: Internal fields, which can be ignored by the user.
        :param int locked: Whether the backup is locked.0: Not locked.1: Has been locked.
        :param str region: The region where the backup is located.
        :param str remark: Notes information for the backup.
        :param str start_time: Backup start time.
        :param int status: Status of the backup task:1: Backup is in the process.2: The backup is normal.3: Backup to RDB file processing.4: RDB conversion completed.-1: The backup has expired.-2: Backup deleted.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_size", backup_size)
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_type", file_type)
        pulumi.set(__self__, "full_backup", full_backup)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "locked", locked)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        """
        Backup ID.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupSize")
    def backup_size(self) -> int:
        """
        Internal fields, which can be ignored by the user.
        """
        return pulumi.get(self, "backup_size")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        """
        Backup type.1: User-initiated manual backup.0: System-initiated backup in the early morning.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        End time, such as 2017-02-08 19:09:26.Query the list of backups that the instance started backing up during the [beginTime, endTime] time period.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Backup file expiration time.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> str:
        """
        Back up file types.
        """
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="fullBackup")
    def full_backup(self) -> int:
        """
        Internal fields, which can be ignored by the user.
        """
        return pulumi.get(self, "full_backup")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Instance name, which supports fuzzy search based on instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> int:
        """
        Internal fields, which can be ignored by the user.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def locked(self) -> int:
        """
        Whether the backup is locked.0: Not locked.1: Has been locked.
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region where the backup is located.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Notes information for the backup.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Backup start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Status of the backup task:1: Backup is in the process.2: The backup is normal.3: Backup to RDB file processing.4: RDB conversion completed.-1: The backup has expired.-2: Backup deleted.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetBackupDownloadInfoBackupInfoResult(dict):
    def __init__(__self__, *,
                 download_url: str,
                 file_name: str,
                 file_size: int,
                 inner_download_url: str):
        """
        :param str download_url: Backup file download address on the Internet (6 hours).
        :param str file_name: Backup file name.
        :param int file_size: The backup file size is in unit B, if it is 0, it is invalid.
        :param str inner_download_url: Backup file intranet download address (6 hours).
        """
        pulumi.set(__self__, "download_url", download_url)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_size", file_size)
        pulumi.set(__self__, "inner_download_url", inner_download_url)

    @property
    @pulumi.getter(name="downloadUrl")
    def download_url(self) -> str:
        """
        Backup file download address on the Internet (6 hours).
        """
        return pulumi.get(self, "download_url")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        Backup file name.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> int:
        """
        The backup file size is in unit B, if it is 0, it is invalid.
        """
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter(name="innerDownloadUrl")
    def inner_download_url(self) -> str:
        """
        Backup file intranet download address (6 hours).
        """
        return pulumi.get(self, "inner_download_url")


@pulumi.output_type
class GetBackupDownloadInfoLimitVpcResult(dict):
    def __init__(__self__, *,
                 region: str,
                 vpc_lists: Sequence[str]):
        """
        :param str region: Customize the region of the VPC to which the backup file is downloaded.
        :param Sequence[str] vpc_lists: Customize the list of VPCs to download backup files.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_lists", vpc_lists)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Customize the region of the VPC to which the backup file is downloaded.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpcLists")
    def vpc_lists(self) -> Sequence[str]:
        """
        Customize the list of VPCs to download backup files.
        """
        return pulumi.get(self, "vpc_lists")


@pulumi.output_type
class GetClustersResourceResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 auto_renew_flag: int,
                 base_bundles: Sequence['outputs.GetClustersResourceBaseBundleResult'],
                 cluster_name: str,
                 dedicated_cluster_id: str,
                 end_time: str,
                 pay_mode: int,
                 project_id: int,
                 redis_cluster_id: str,
                 region_id: int,
                 resource_bundles: Sequence['outputs.GetClustersResourceResourceBundleResult'],
                 start_time: str,
                 status: int,
                 zone_id: int):
        """
        :param int app_id: User's Appid.
        :param int auto_renew_flag: Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
        :param Sequence['GetClustersResourceBaseBundleArgs'] base_bundles: Basic Control Resource Package.
        :param str cluster_name: Cluster name.
        :param str dedicated_cluster_id: Dedicated cluster Id.
        :param str end_time: Instance expiration time.
        :param int pay_mode: Billing mode, 1-annual and monthly package, 0-quantity based billing.
        :param int project_id: Project Id.
        :param str redis_cluster_id: Redis Cluster Id.
        :param int region_id: Region Id.
        :param Sequence['GetClustersResourceResourceBundleArgs'] resource_bundles: List of Resource Packages.
        :param str start_time: Instance create time.
        :param int status: Cluster status: 1- In process, 2- Running, 3- Isolated.
        :param int zone_id: zone Id.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "base_bundles", base_bundles)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "dedicated_cluster_id", dedicated_cluster_id)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "redis_cluster_id", redis_cluster_id)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "resource_bundles", resource_bundles)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        """
        User's Appid.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        """
        Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="baseBundles")
    def base_bundles(self) -> Sequence['outputs.GetClustersResourceBaseBundleResult']:
        """
        Basic Control Resource Package.
        """
        return pulumi.get(self, "base_bundles")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="dedicatedClusterId")
    def dedicated_cluster_id(self) -> str:
        """
        Dedicated cluster Id.
        """
        return pulumi.get(self, "dedicated_cluster_id")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Instance expiration time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        """
        Billing mode, 1-annual and monthly package, 0-quantity based billing.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project Id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="redisClusterId")
    def redis_cluster_id(self) -> str:
        """
        Redis Cluster Id.
        """
        return pulumi.get(self, "redis_cluster_id")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Region Id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="resourceBundles")
    def resource_bundles(self) -> Sequence['outputs.GetClustersResourceResourceBundleResult']:
        """
        List of Resource Packages.
        """
        return pulumi.get(self, "resource_bundles")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Instance create time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Cluster status: 1- In process, 2- Running, 3- Isolated.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        zone Id.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetClustersResourceBaseBundleResult(dict):
    def __init__(__self__, *,
                 available_memory: int,
                 count: int,
                 resource_bundle_name: str):
        """
        :param int available_memory: Saleable memory, unit: GB.
        :param int count: Resource bundle count.
        :param str resource_bundle_name: Resource bundle name.
        """
        pulumi.set(__self__, "available_memory", available_memory)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "resource_bundle_name", resource_bundle_name)

    @property
    @pulumi.getter(name="availableMemory")
    def available_memory(self) -> int:
        """
        Saleable memory, unit: GB.
        """
        return pulumi.get(self, "available_memory")

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Resource bundle count.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="resourceBundleName")
    def resource_bundle_name(self) -> str:
        """
        Resource bundle name.
        """
        return pulumi.get(self, "resource_bundle_name")


@pulumi.output_type
class GetClustersResourceResourceBundleResult(dict):
    def __init__(__self__, *,
                 available_memory: int,
                 count: int,
                 resource_bundle_name: str):
        """
        :param int available_memory: Saleable memory, unit: GB.
        :param int count: Resource bundle count.
        :param str resource_bundle_name: Resource bundle name.
        """
        pulumi.set(__self__, "available_memory", available_memory)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "resource_bundle_name", resource_bundle_name)

    @property
    @pulumi.getter(name="availableMemory")
    def available_memory(self) -> int:
        """
        Saleable memory, unit: GB.
        """
        return pulumi.get(self, "available_memory")

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Resource bundle count.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="resourceBundleName")
    def resource_bundle_name(self) -> str:
        """
        Resource bundle name.
        """
        return pulumi.get(self, "resource_bundle_name")


@pulumi.output_type
class GetInstanceNodeInfoProxyResult(dict):
    def __init__(__self__, *,
                 node_id: str,
                 zone_id: int):
        """
        :param str node_id: Node ID.
        :param int zone_id: Zone ID.
        """
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        Node ID.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        Zone ID.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetInstanceNodeInfoRediResult(dict):
    def __init__(__self__, *,
                 cluster_id: int,
                 node_id: str,
                 node_role: str,
                 zone_id: int):
        """
        :param int cluster_id: Shard ID.
        :param str node_id: Node ID.
        :param str node_role: Node role.
        :param int zone_id: Zone ID.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "node_role", node_role)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> int:
        """
        Shard ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        Node ID.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> str:
        """
        Node role.
        """
        return pulumi.get(self, "node_role")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        Zone ID.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetInstanceShardsInstanceShardResult(dict):
    def __init__(__self__, *,
                 connected: int,
                 keys: int,
                 role: int,
                 runid: str,
                 shard_id: str,
                 shard_name: str,
                 slots: str,
                 storage: int,
                 storage_slope: float):
        """
        :param int connected: Service status: 0-down;1-on.
        :param int keys: Number of keys.
        :param int role: role.
        :param str runid: The node ID of the instance runtime.
        :param str shard_id: Shard node ID.
        :param str shard_name: Shard node name.
        :param str slots: Slot information.
        :param int storage: Used capacity.
        :param float storage_slope: Capacity tilt.
        """
        pulumi.set(__self__, "connected", connected)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "runid", runid)
        pulumi.set(__self__, "shard_id", shard_id)
        pulumi.set(__self__, "shard_name", shard_name)
        pulumi.set(__self__, "slots", slots)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "storage_slope", storage_slope)

    @property
    @pulumi.getter
    def connected(self) -> int:
        """
        Service status: 0-down;1-on.
        """
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter
    def keys(self) -> int:
        """
        Number of keys.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter
    def role(self) -> int:
        """
        role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def runid(self) -> str:
        """
        The node ID of the instance runtime.
        """
        return pulumi.get(self, "runid")

    @property
    @pulumi.getter(name="shardId")
    def shard_id(self) -> str:
        """
        Shard node ID.
        """
        return pulumi.get(self, "shard_id")

    @property
    @pulumi.getter(name="shardName")
    def shard_name(self) -> str:
        """
        Shard node name.
        """
        return pulumi.get(self, "shard_name")

    @property
    @pulumi.getter
    def slots(self) -> str:
        """
        Slot information.
        """
        return pulumi.get(self, "slots")

    @property
    @pulumi.getter
    def storage(self) -> int:
        """
        Used capacity.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageSlope")
    def storage_slope(self) -> float:
        """
        Capacity tilt.
        """
        return pulumi.get(self, "storage_slope")


@pulumi.output_type
class GetInstanceTaskListTaskResult(dict):
    def __init__(__self__, *,
                 end_time: str,
                 instance_id: str,
                 instance_name: str,
                 progress: float,
                 project_id: int,
                 result: int,
                 start_time: str,
                 task_id: int,
                 task_type: str):
        """
        :param str end_time: Termination time.
        :param str instance_id: The ID of instance.
        :param str instance_name: Instance name.
        :param float progress: Task progress.
        :param int project_id: The project ID.
        :param int result: Task status.
        :param str start_time: Start time.
        :param int task_id: Task ID.
        :param str task_type: Task type.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Termination time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def progress(self) -> float:
        """
        Task progress.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def result(self) -> int:
        """
        Task status.
        """
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> int:
        """
        Task ID.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type.
        """
        return pulumi.get(self, "task_type")


@pulumi.output_type
class GetInstanceZoneInfoReplicaGroupResult(dict):
    def __init__(__self__, *,
                 group_id: int,
                 group_name: str,
                 redis_nodes: Sequence['outputs.GetInstanceZoneInfoReplicaGroupRedisNodeResult'],
                 role: str,
                 zone_id: str):
        """
        :param int group_id: Node group ID.
        :param str group_name: Node group Name.
        :param Sequence['GetInstanceZoneInfoReplicaGroupRedisNodeArgs'] redis_nodes: Node group node list.
        :param str role: The node group type, master is the primary node, and replica is the replica node.
        :param str zone_id: he availability zone ID of the node, such as ap-guangzhou-1.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "redis_nodes", redis_nodes)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        """
        Node group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Node group Name.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="redisNodes")
    def redis_nodes(self) -> Sequence['outputs.GetInstanceZoneInfoReplicaGroupRedisNodeResult']:
        """
        Node group node list.
        """
        return pulumi.get(self, "redis_nodes")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The node group type, master is the primary node, and replica is the replica node.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        he availability zone ID of the node, such as ap-guangzhou-1.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetInstanceZoneInfoReplicaGroupRedisNodeResult(dict):
    def __init__(__self__, *,
                 keys: int,
                 node_id: str,
                 role: str,
                 slot: str,
                 status: str):
        """
        :param int keys: The number of node keys.
        :param str node_id: Node ID.
        :param str role: The node group type, master is the primary node, and replica is the replica node.
        :param str slot: Node slot distribution.
        :param str status: Node status.
        """
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "slot", slot)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def keys(self) -> int:
        """
        The number of node keys.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        Node ID.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The node group type, master is the primary node, and replica is the replica node.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def slot(self) -> str:
        """
        Node slot distribution.
        """
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Node status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 charge_type: str,
                 create_time: str,
                 ip: str,
                 mem_size: int,
                 name: str,
                 node_infos: Sequence['outputs.GetInstancesInstanceListNodeInfoResult'],
                 port: int,
                 project_id: int,
                 redis_id: str,
                 redis_replicas_num: int,
                 redis_shard_num: int,
                 status: str,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 type: str,
                 type_id: int,
                 vpc_id: str,
                 zone: str):
        """
        :param str charge_type: The charge type of instance. Valid values are `POSTPAID` and `PREPAID`.
        :param str create_time: The time when the instance is created.
        :param str ip: IP address of an instance.
        :param int mem_size: Memory size in MB.
        :param str name: Name of a redis instance.
        :param Sequence['GetInstancesInstanceListNodeInfoArgs'] node_infos: List of instance node information. Currently, information about the node type (master or replica) and node availability zone can be passed in.
        :param int port: The port used to access a redis instance.
        :param int project_id: ID of the project to which redis instance belongs.
        :param str redis_id: ID of a redis instance.
        :param int redis_replicas_num: The number of instance copies.
        :param int redis_shard_num: The number of instance shard.
        :param str status: Current status of an instance, maybe: `init`, `processing`, `online`, `isolate` and `todelete`.
        :param str subnet_id: ID of the vpc subnet.
        :param Mapping[str, Any] tags: Tags of redis instance.
        :param str type: (**Deprecated**) It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `master_slave_redis`, `master_slave_ckv`, `cluster_ckv`, `cluster_redis` and `standalone_redis`.
        :param int type_id: Instance type. Refer to `data.tencentcloud_redis_zone_config.list.type_id` get available values.
        :param str vpc_id: ID of the vpc with which the instance is associated.
        :param str zone: ID of an available zone.
        """
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_infos", node_infos)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "redis_id", redis_id)
        pulumi.set(__self__, "redis_replicas_num", redis_replicas_num)
        pulumi.set(__self__, "redis_shard_num", redis_shard_num)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "type_id", type_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of instance. Valid values are `POSTPAID` and `PREPAID`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the instance is created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP address of an instance.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> int:
        """
        Memory size in MB.
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of a redis instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeInfos")
    def node_infos(self) -> Sequence['outputs.GetInstancesInstanceListNodeInfoResult']:
        """
        List of instance node information. Currently, information about the node type (master or replica) and node availability zone can be passed in.
        """
        return pulumi.get(self, "node_infos")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port used to access a redis instance.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        ID of the project to which redis instance belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="redisId")
    def redis_id(self) -> str:
        """
        ID of a redis instance.
        """
        return pulumi.get(self, "redis_id")

    @property
    @pulumi.getter(name="redisReplicasNum")
    def redis_replicas_num(self) -> int:
        """
        The number of instance copies.
        """
        return pulumi.get(self, "redis_replicas_num")

    @property
    @pulumi.getter(name="redisShardNum")
    def redis_shard_num(self) -> int:
        """
        The number of instance shard.
        """
        return pulumi.get(self, "redis_shard_num")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of an instance, maybe: `init`, `processing`, `online`, `isolate` and `todelete`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        ID of the vpc subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of redis instance.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (**Deprecated**) It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `master_slave_redis`, `master_slave_ckv`, `cluster_ckv`, `cluster_redis` and `standalone_redis`.
        """
        warnings.warn("""It has been deprecated from version 1.33.1. Please use 'type_id' instead.""", DeprecationWarning)
        pulumi.log.warn("""type is deprecated: It has been deprecated from version 1.33.1. Please use 'type_id' instead.""")

        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> int:
        """
        Instance type. Refer to `data.tencentcloud_redis_zone_config.list.type_id` get available values.
        """
        return pulumi.get(self, "type_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the vpc with which the instance is associated.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        ID of an available zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetInstancesInstanceListNodeInfoResult(dict):
    def __init__(__self__, *,
                 id: int,
                 master: bool,
                 zone_id: int):
        """
        :param int id: ID of the master or replica node.
        :param bool master: Indicates whether the node is master.
        :param int zone_id: ID of the availability zone of the master or replica node.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "master", master)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID of the master or replica node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def master(self) -> bool:
        """
        Indicates whether the node is master.
        """
        return pulumi.get(self, "master")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        ID of the availability zone of the master or replica node.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetParamRecordsInstanceParamHistoryResult(dict):
    def __init__(__self__, *,
                 modify_time: str,
                 new_value: str,
                 param_name: str,
                 pre_value: str,
                 status: int):
        """
        :param str modify_time: Modification time.
        :param str new_value: The modified value.
        :param str param_name: The parameter name.
        :param str pre_value: Modify the previous value.
        :param int status: Parameter status:1: parameter configuration modification.2: The parameter configuration is modified successfully.3: Parameter configuration modification failed.
        """
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "pre_value", pre_value)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        """
        Modification time.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> str:
        """
        The modified value.
        """
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        The parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="preValue")
    def pre_value(self) -> str:
        """
        Modify the previous value.
        """
        return pulumi.get(self, "pre_value")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Parameter status:1: parameter configuration modification.2: The parameter configuration is modified successfully.3: Parameter configuration modification failed.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetZoneConfigListResult(dict):
    def __init__(__self__, *,
                 mem_sizes: Sequence[int],
                 redis_replicas_nums: Sequence[int],
                 redis_shard_nums: Sequence[int],
                 shard_memories: Sequence[int],
                 type: str,
                 type_id: int,
                 version: str,
                 zone: str):
        """
        :param Sequence[int] mem_sizes: (**Deprecated**) It has been deprecated from version 1.26.0. Use `shard_memories` instead. The memory volume of an available instance(in MB).
        :param Sequence[int] redis_replicas_nums: The support numbers of instance copies.
        :param Sequence[int] redis_shard_nums: The support numbers of instance shard.
        :param Sequence[int] shard_memories: The memory volume list of an available instance shard(in MB).
        :param str type: (**Deprecated**) It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `master_slave_redis`, `master_slave_ckv`, `cluster_ckv`, `cluster_redis` and `standalone_redis`.
        :param int type_id: Instance type ID.
        :param str version: Version description of an available instance. Possible values: `Redis 3.2`, `Redis 4.0`.
        :param str zone: ID of available zone.
        """
        pulumi.set(__self__, "mem_sizes", mem_sizes)
        pulumi.set(__self__, "redis_replicas_nums", redis_replicas_nums)
        pulumi.set(__self__, "redis_shard_nums", redis_shard_nums)
        pulumi.set(__self__, "shard_memories", shard_memories)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "type_id", type_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="memSizes")
    def mem_sizes(self) -> Sequence[int]:
        """
        (**Deprecated**) It has been deprecated from version 1.26.0. Use `shard_memories` instead. The memory volume of an available instance(in MB).
        """
        warnings.warn("""It has been deprecated from version 1.26.0. Use `shard_memories` instead.""", DeprecationWarning)
        pulumi.log.warn("""mem_sizes is deprecated: It has been deprecated from version 1.26.0. Use `shard_memories` instead.""")

        return pulumi.get(self, "mem_sizes")

    @property
    @pulumi.getter(name="redisReplicasNums")
    def redis_replicas_nums(self) -> Sequence[int]:
        """
        The support numbers of instance copies.
        """
        return pulumi.get(self, "redis_replicas_nums")

    @property
    @pulumi.getter(name="redisShardNums")
    def redis_shard_nums(self) -> Sequence[int]:
        """
        The support numbers of instance shard.
        """
        return pulumi.get(self, "redis_shard_nums")

    @property
    @pulumi.getter(name="shardMemories")
    def shard_memories(self) -> Sequence[int]:
        """
        The memory volume list of an available instance shard(in MB).
        """
        return pulumi.get(self, "shard_memories")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (**Deprecated**) It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `master_slave_redis`, `master_slave_ckv`, `cluster_ckv`, `cluster_redis` and `standalone_redis`.
        """
        warnings.warn("""It has been deprecated from version 1.33.1. Please use 'type_id' instead.""", DeprecationWarning)
        pulumi.log.warn("""type is deprecated: It has been deprecated from version 1.33.1. Please use 'type_id' instead.""")

        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> int:
        """
        Instance type ID.
        """
        return pulumi.get(self, "type_id")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version description of an available instance. Possible values: `Redis 3.2`, `Redis 4.0`.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        ID of available zone.
        """
        return pulumi.get(self, "zone")


