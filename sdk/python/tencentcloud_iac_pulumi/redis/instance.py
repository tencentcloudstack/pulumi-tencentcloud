# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[str],
                 mem_size: pulumi.Input[int],
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 no_auth: Optional[pulumi.Input[bool]] = None,
                 operation_network: Optional[pulumi.Input[str]] = None,
                 params_template_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 product_version: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 recycle: Optional[pulumi.Input[int]] = None,
                 redis_cluster_id: Optional[pulumi.Input[str]] = None,
                 redis_replicas_num: Optional[pulumi.Input[int]] = None,
                 redis_shard_num: Optional[pulumi.Input[int]] = None,
                 replica_zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 replicas_read_only: Optional[pulumi.Input[bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 type_id: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] availability_zone: The available zone ID of an instance to be created, please refer to `tencentcloud_redis_zone_config.list`.
        :param pulumi.Input[int] mem_size: The memory volume of an available instance(in MB), please refer to `tencentcloud_redis_zone_config.list[zone].shard_memories`. When redis is standard type, it represents total memory size of the instance; when Redis is cluster type, it represents memory size of per sharding. `512MB` is supported only in master-slave instance.
        :param pulumi.Input[int] auto_renew_flag: Auto-renew flag. 0 - default state (manual renewal); 1 - automatic renewal; 2 - explicit no automatic renewal.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values: `PREPAID` and `POSTPAID`. Default value is `POSTPAID`. Note: TencentCloud International only supports `POSTPAID`. Caution that update operation on this field will delete old instances and create new with new charge type.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete Redis instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
        :param pulumi.Input[str] ip: IP address of an instance. When the `operation_network` is `changeVip`, this parameter needs to be configured.
        :param pulumi.Input[str] name: Instance name.
        :param pulumi.Input[bool] no_auth: Indicates whether the redis instance support no-auth access. NOTE: Only available in private cloud environment.
        :param pulumi.Input[str] operation_network: Refers to the category of the pre-modified network, including: `changeVip`: refers to switching the private network, including its intranet IPv4 address and port; `changeVpc`: refers to switching the subnet to which the private network belongs; `changeBaseToVpc`: refers to switching the basic network to a private network; `changeVPort`: refers to only modifying the instance network port.
        :param pulumi.Input[str] params_template_id: Specify params template id. If not set, will use default template.
        :param pulumi.Input[str] password: Password for a Redis user, which should be 8 to 16 characters. NOTE: Only `no_auth=true` specified can make password empty.
        :param pulumi.Input[int] port: The port used to access a redis instance. The default value is 6379. When the `operation_network` is `changeVPort` or `changeVip`, this parameter needs to be configured.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] product_version: Specify the product version of the instance. `local`: Local disk version, `cloud`: Cloud disk version, `cdc`: Exclusive cluster version. Default is `local`.
        :param pulumi.Input[int] project_id: Specifies which project the instance should belong to.
        :param pulumi.Input[int] recycle: Original intranet IPv4 address retention time: unit: day, value range: `0`, `1`, `2`, `3`, `7`, `15`.
        :param pulumi.Input[str] redis_cluster_id: Exclusive cluster ID. When the `product_version` is set to `cdc`, this parameter must be set.
        :param pulumi.Input[int] redis_replicas_num: The number of instance copies. This is not required for standalone and master slave versions and must equal to count of `replica_zone_ids`, Non-multi-AZ does not require `replica_zone_ids`; Redis memory version 4.0, 5.0, 6.2 standard architecture and cluster architecture support the number of copies in the range [1, 2, 3, 4, 5]; Redis 2.8 standard version and CKV standard version only support 1 copy.
        :param pulumi.Input[int] redis_shard_num: The number of instance shards; this parameter does not need to be configured for standard version instances; for cluster version instances, the number of shards ranges from: [`1`, `3`, `5`, `8`, `12`, `16`, `24 `, `32`, `40`, `48`, `64`, `80`, `96`, `128`].
        :param pulumi.Input[Sequence[pulumi.Input[int]]] replica_zone_ids: ID of replica nodes available zone. This is not required for standalone and master slave versions. NOTE: Removing some of the same zone of replicas (e.g. removing 100001 of [100001, 100001, 100002]) will pick the first hit to remove.
        :param pulumi.Input[bool] replicas_read_only: Whether copy read-only is supported, Redis 2.8 Standard Edition and CKV Standard Edition do not support replica read-only, turn on replica read-only, the instance will automatically read and write separate, write requests are routed to the primary node, read requests are routed to the replica node, if you need to open replica read-only, the recommended number of replicas >=2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        :param pulumi.Input[str] subnet_id: Specifies which subnet the instance should belong to. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[str] type: It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `cluster_ckv`,`cluster_redis5.0`,`cluster_redis`,`master_slave_ckv`,`master_slave_redis4.0`,`master_slave_redis5.0`,`master_slave_redis`,`standalone_redis`, specific region support specific types, need to refer data `redis_get_zone_config`.
        :param pulumi.Input[int] type_id: Instance type. Available values reference data source `redis_get_zone_config` or [document](https://intl.cloud.tencent.com/document/product/239/32069), toggle immediately when modified.
        :param pulumi.Input[str] vpc_id: ID of the vpc with which the instance is to be associated. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        :param pulumi.Input[int] wait_switch: Switching mode: `1`-maintenance time window switching, `2`-immediate switching, default value `2`.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "mem_size", mem_size)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if no_auth is not None:
            pulumi.set(__self__, "no_auth", no_auth)
        if operation_network is not None:
            pulumi.set(__self__, "operation_network", operation_network)
        if params_template_id is not None:
            pulumi.set(__self__, "params_template_id", params_template_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if product_version is not None:
            pulumi.set(__self__, "product_version", product_version)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if recycle is not None:
            pulumi.set(__self__, "recycle", recycle)
        if redis_cluster_id is not None:
            pulumi.set(__self__, "redis_cluster_id", redis_cluster_id)
        if redis_replicas_num is not None:
            pulumi.set(__self__, "redis_replicas_num", redis_replicas_num)
        if redis_shard_num is not None:
            pulumi.set(__self__, "redis_shard_num", redis_shard_num)
        if replica_zone_ids is not None:
            pulumi.set(__self__, "replica_zone_ids", replica_zone_ids)
        if replicas_read_only is not None:
            pulumi.set(__self__, "replicas_read_only", replicas_read_only)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            warnings.warn("""It has been deprecated from version 1.33.1. Please use 'type_id' instead.""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: It has been deprecated from version 1.33.1. Please use 'type_id' instead.""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_id is not None:
            pulumi.set(__self__, "type_id", type_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if wait_switch is not None:
            pulumi.set(__self__, "wait_switch", wait_switch)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[str]:
        """
        The available zone ID of an instance to be created, please refer to `tencentcloud_redis_zone_config.list`.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> pulumi.Input[int]:
        """
        The memory volume of an available instance(in MB), please refer to `tencentcloud_redis_zone_config.list[zone].shard_memories`. When redis is standard type, it represents total memory size of the instance; when Redis is cluster type, it represents memory size of per sharding. `512MB` is supported only in master-slave instance.
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto-renew flag. 0 - default state (manual renewal); 1 - automatic renewal; 2 - explicit no automatic renewal.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values: `PREPAID` and `POSTPAID`. Default value is `POSTPAID`. Note: TencentCloud International only supports `POSTPAID`. Caution that update operation on this field will delete old instances and create new with new charge type.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to delete Redis instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of an instance. When the `operation_network` is `changeVip`, this parameter needs to be configured.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="noAuth")
    def no_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the redis instance support no-auth access. NOTE: Only available in private cloud environment.
        """
        return pulumi.get(self, "no_auth")

    @no_auth.setter
    def no_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_auth", value)

    @property
    @pulumi.getter(name="operationNetwork")
    def operation_network(self) -> Optional[pulumi.Input[str]]:
        """
        Refers to the category of the pre-modified network, including: `changeVip`: refers to switching the private network, including its intranet IPv4 address and port; `changeVpc`: refers to switching the subnet to which the private network belongs; `changeBaseToVpc`: refers to switching the basic network to a private network; `changeVPort`: refers to only modifying the instance network port.
        """
        return pulumi.get(self, "operation_network")

    @operation_network.setter
    def operation_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_network", value)

    @property
    @pulumi.getter(name="paramsTemplateId")
    def params_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify params template id. If not set, will use default template.
        """
        return pulumi.get(self, "params_template_id")

    @params_template_id.setter
    def params_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "params_template_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for a Redis user, which should be 8 to 16 characters. NOTE: Only `no_auth=true` specified can make password empty.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port used to access a redis instance. The default value is 6379. When the `operation_network` is `changeVPort` or `changeVip`, this parameter needs to be configured.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the product version of the instance. `local`: Local disk version, `cloud`: Cloud disk version, `cdc`: Exclusive cluster version. Default is `local`.
        """
        return pulumi.get(self, "product_version")

    @product_version.setter
    def product_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_version", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies which project the instance should belong to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def recycle(self) -> Optional[pulumi.Input[int]]:
        """
        Original intranet IPv4 address retention time: unit: day, value range: `0`, `1`, `2`, `3`, `7`, `15`.
        """
        return pulumi.get(self, "recycle")

    @recycle.setter
    def recycle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recycle", value)

    @property
    @pulumi.getter(name="redisClusterId")
    def redis_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Exclusive cluster ID. When the `product_version` is set to `cdc`, this parameter must be set.
        """
        return pulumi.get(self, "redis_cluster_id")

    @redis_cluster_id.setter
    def redis_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_cluster_id", value)

    @property
    @pulumi.getter(name="redisReplicasNum")
    def redis_replicas_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of instance copies. This is not required for standalone and master slave versions and must equal to count of `replica_zone_ids`, Non-multi-AZ does not require `replica_zone_ids`; Redis memory version 4.0, 5.0, 6.2 standard architecture and cluster architecture support the number of copies in the range [1, 2, 3, 4, 5]; Redis 2.8 standard version and CKV standard version only support 1 copy.
        """
        return pulumi.get(self, "redis_replicas_num")

    @redis_replicas_num.setter
    def redis_replicas_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redis_replicas_num", value)

    @property
    @pulumi.getter(name="redisShardNum")
    def redis_shard_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of instance shards; this parameter does not need to be configured for standard version instances; for cluster version instances, the number of shards ranges from: [`1`, `3`, `5`, `8`, `12`, `16`, `24 `, `32`, `40`, `48`, `64`, `80`, `96`, `128`].
        """
        return pulumi.get(self, "redis_shard_num")

    @redis_shard_num.setter
    def redis_shard_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redis_shard_num", value)

    @property
    @pulumi.getter(name="replicaZoneIds")
    def replica_zone_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        ID of replica nodes available zone. This is not required for standalone and master slave versions. NOTE: Removing some of the same zone of replicas (e.g. removing 100001 of [100001, 100001, 100002]) will pick the first hit to remove.
        """
        return pulumi.get(self, "replica_zone_ids")

    @replica_zone_ids.setter
    def replica_zone_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "replica_zone_ids", value)

    @property
    @pulumi.getter(name="replicasReadOnly")
    def replicas_read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether copy read-only is supported, Redis 2.8 Standard Edition and CKV Standard Edition do not support replica read-only, turn on replica read-only, the instance will automatically read and write separate, write requests are routed to the primary node, read requests are routed to the replica node, if you need to open replica read-only, the recommended number of replicas >=2.
        """
        return pulumi.get(self, "replicas_read_only")

    @replicas_read_only.setter
    def replicas_read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replicas_read_only", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies which subnet the instance should belong to. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `cluster_ckv`,`cluster_redis5.0`,`cluster_redis`,`master_slave_ckv`,`master_slave_redis4.0`,`master_slave_redis5.0`,`master_slave_redis`,`standalone_redis`, specific region support specific types, need to refer data `redis_get_zone_config`.
        """
        warnings.warn("""It has been deprecated from version 1.33.1. Please use 'type_id' instead.""", DeprecationWarning)
        pulumi.log.warn("""type is deprecated: It has been deprecated from version 1.33.1. Please use 'type_id' instead.""")

        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> Optional[pulumi.Input[int]]:
        """
        Instance type. Available values reference data source `redis_get_zone_config` or [document](https://intl.cloud.tencent.com/document/product/239/32069), toggle immediately when modified.
        """
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the vpc with which the instance is to be associated. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> Optional[pulumi.Input[int]]:
        """
        Switching mode: `1`-maintenance time window switching, `2`-immediate switching, default value `2`.
        """
        return pulumi.get(self, "wait_switch")

    @wait_switch.setter
    def wait_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_switch", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 dedicated_cluster_id: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 no_auth: Optional[pulumi.Input[bool]] = None,
                 node_infos: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoArgs']]]] = None,
                 operation_network: Optional[pulumi.Input[str]] = None,
                 params_template_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 product_version: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 recycle: Optional[pulumi.Input[int]] = None,
                 redis_cluster_id: Optional[pulumi.Input[str]] = None,
                 redis_replicas_num: Optional[pulumi.Input[int]] = None,
                 redis_shard_num: Optional[pulumi.Input[int]] = None,
                 replica_zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 replicas_read_only: Optional[pulumi.Input[bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 type_id: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[int] auto_renew_flag: Auto-renew flag. 0 - default state (manual renewal); 1 - automatic renewal; 2 - explicit no automatic renewal.
        :param pulumi.Input[str] availability_zone: The available zone ID of an instance to be created, please refer to `tencentcloud_redis_zone_config.list`.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values: `PREPAID` and `POSTPAID`. Default value is `POSTPAID`. Note: TencentCloud International only supports `POSTPAID`. Caution that update operation on this field will delete old instances and create new with new charge type.
        :param pulumi.Input[str] create_time: The time when the instance was created.
        :param pulumi.Input[str] dedicated_cluster_id: Dedicated Cluster ID.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete Redis instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
        :param pulumi.Input[str] ip: IP address of an instance. When the `operation_network` is `changeVip`, this parameter needs to be configured.
        :param pulumi.Input[int] mem_size: The memory volume of an available instance(in MB), please refer to `tencentcloud_redis_zone_config.list[zone].shard_memories`. When redis is standard type, it represents total memory size of the instance; when Redis is cluster type, it represents memory size of per sharding. `512MB` is supported only in master-slave instance.
        :param pulumi.Input[str] name: Instance name.
        :param pulumi.Input[bool] no_auth: Indicates whether the redis instance support no-auth access. NOTE: Only available in private cloud environment.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoArgs']]] node_infos: Readonly Primary/Replica nodes.
        :param pulumi.Input[str] operation_network: Refers to the category of the pre-modified network, including: `changeVip`: refers to switching the private network, including its intranet IPv4 address and port; `changeVpc`: refers to switching the subnet to which the private network belongs; `changeBaseToVpc`: refers to switching the basic network to a private network; `changeVPort`: refers to only modifying the instance network port.
        :param pulumi.Input[str] params_template_id: Specify params template id. If not set, will use default template.
        :param pulumi.Input[str] password: Password for a Redis user, which should be 8 to 16 characters. NOTE: Only `no_auth=true` specified can make password empty.
        :param pulumi.Input[int] port: The port used to access a redis instance. The default value is 6379. When the `operation_network` is `changeVPort` or `changeVip`, this parameter needs to be configured.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] product_version: Specify the product version of the instance. `local`: Local disk version, `cloud`: Cloud disk version, `cdc`: Exclusive cluster version. Default is `local`.
        :param pulumi.Input[int] project_id: Specifies which project the instance should belong to.
        :param pulumi.Input[int] recycle: Original intranet IPv4 address retention time: unit: day, value range: `0`, `1`, `2`, `3`, `7`, `15`.
        :param pulumi.Input[str] redis_cluster_id: Exclusive cluster ID. When the `product_version` is set to `cdc`, this parameter must be set.
        :param pulumi.Input[int] redis_replicas_num: The number of instance copies. This is not required for standalone and master slave versions and must equal to count of `replica_zone_ids`, Non-multi-AZ does not require `replica_zone_ids`; Redis memory version 4.0, 5.0, 6.2 standard architecture and cluster architecture support the number of copies in the range [1, 2, 3, 4, 5]; Redis 2.8 standard version and CKV standard version only support 1 copy.
        :param pulumi.Input[int] redis_shard_num: The number of instance shards; this parameter does not need to be configured for standard version instances; for cluster version instances, the number of shards ranges from: [`1`, `3`, `5`, `8`, `12`, `16`, `24 `, `32`, `40`, `48`, `64`, `80`, `96`, `128`].
        :param pulumi.Input[Sequence[pulumi.Input[int]]] replica_zone_ids: ID of replica nodes available zone. This is not required for standalone and master slave versions. NOTE: Removing some of the same zone of replicas (e.g. removing 100001 of [100001, 100001, 100002]) will pick the first hit to remove.
        :param pulumi.Input[bool] replicas_read_only: Whether copy read-only is supported, Redis 2.8 Standard Edition and CKV Standard Edition do not support replica read-only, turn on replica read-only, the instance will automatically read and write separate, write requests are routed to the primary node, read requests are routed to the replica node, if you need to open replica read-only, the recommended number of replicas >=2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        :param pulumi.Input[str] status: Current status of an instance, maybe: init, processing, online, isolate and todelete.
        :param pulumi.Input[str] subnet_id: Specifies which subnet the instance should belong to. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[str] type: It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `cluster_ckv`,`cluster_redis5.0`,`cluster_redis`,`master_slave_ckv`,`master_slave_redis4.0`,`master_slave_redis5.0`,`master_slave_redis`,`standalone_redis`, specific region support specific types, need to refer data `redis_get_zone_config`.
        :param pulumi.Input[int] type_id: Instance type. Available values reference data source `redis_get_zone_config` or [document](https://intl.cloud.tencent.com/document/product/239/32069), toggle immediately when modified.
        :param pulumi.Input[str] vpc_id: ID of the vpc with which the instance is to be associated. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        :param pulumi.Input[int] wait_switch: Switching mode: `1`-maintenance time window switching, `2`-immediate switching, default value `2`.
        """
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if dedicated_cluster_id is not None:
            pulumi.set(__self__, "dedicated_cluster_id", dedicated_cluster_id)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if no_auth is not None:
            pulumi.set(__self__, "no_auth", no_auth)
        if node_infos is not None:
            pulumi.set(__self__, "node_infos", node_infos)
        if operation_network is not None:
            pulumi.set(__self__, "operation_network", operation_network)
        if params_template_id is not None:
            pulumi.set(__self__, "params_template_id", params_template_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if product_version is not None:
            pulumi.set(__self__, "product_version", product_version)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if recycle is not None:
            pulumi.set(__self__, "recycle", recycle)
        if redis_cluster_id is not None:
            pulumi.set(__self__, "redis_cluster_id", redis_cluster_id)
        if redis_replicas_num is not None:
            pulumi.set(__self__, "redis_replicas_num", redis_replicas_num)
        if redis_shard_num is not None:
            pulumi.set(__self__, "redis_shard_num", redis_shard_num)
        if replica_zone_ids is not None:
            pulumi.set(__self__, "replica_zone_ids", replica_zone_ids)
        if replicas_read_only is not None:
            pulumi.set(__self__, "replicas_read_only", replicas_read_only)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            warnings.warn("""It has been deprecated from version 1.33.1. Please use 'type_id' instead.""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: It has been deprecated from version 1.33.1. Please use 'type_id' instead.""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_id is not None:
            pulumi.set(__self__, "type_id", type_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if wait_switch is not None:
            pulumi.set(__self__, "wait_switch", wait_switch)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto-renew flag. 0 - default state (manual renewal); 1 - automatic renewal; 2 - explicit no automatic renewal.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The available zone ID of an instance to be created, please refer to `tencentcloud_redis_zone_config.list`.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values: `PREPAID` and `POSTPAID`. Default value is `POSTPAID`. Note: TencentCloud International only supports `POSTPAID`. Caution that update operation on this field will delete old instances and create new with new charge type.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the instance was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dedicatedClusterId")
    def dedicated_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated Cluster ID.
        """
        return pulumi.get(self, "dedicated_cluster_id")

    @dedicated_cluster_id.setter
    def dedicated_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated_cluster_id", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to delete Redis instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of an instance. When the `operation_network` is `changeVip`, this parameter needs to be configured.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        The memory volume of an available instance(in MB), please refer to `tencentcloud_redis_zone_config.list[zone].shard_memories`. When redis is standard type, it represents total memory size of the instance; when Redis is cluster type, it represents memory size of per sharding. `512MB` is supported only in master-slave instance.
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="noAuth")
    def no_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the redis instance support no-auth access. NOTE: Only available in private cloud environment.
        """
        return pulumi.get(self, "no_auth")

    @no_auth.setter
    def no_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_auth", value)

    @property
    @pulumi.getter(name="nodeInfos")
    def node_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoArgs']]]]:
        """
        Readonly Primary/Replica nodes.
        """
        return pulumi.get(self, "node_infos")

    @node_infos.setter
    def node_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoArgs']]]]):
        pulumi.set(self, "node_infos", value)

    @property
    @pulumi.getter(name="operationNetwork")
    def operation_network(self) -> Optional[pulumi.Input[str]]:
        """
        Refers to the category of the pre-modified network, including: `changeVip`: refers to switching the private network, including its intranet IPv4 address and port; `changeVpc`: refers to switching the subnet to which the private network belongs; `changeBaseToVpc`: refers to switching the basic network to a private network; `changeVPort`: refers to only modifying the instance network port.
        """
        return pulumi.get(self, "operation_network")

    @operation_network.setter
    def operation_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_network", value)

    @property
    @pulumi.getter(name="paramsTemplateId")
    def params_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify params template id. If not set, will use default template.
        """
        return pulumi.get(self, "params_template_id")

    @params_template_id.setter
    def params_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "params_template_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for a Redis user, which should be 8 to 16 characters. NOTE: Only `no_auth=true` specified can make password empty.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port used to access a redis instance. The default value is 6379. When the `operation_network` is `changeVPort` or `changeVip`, this parameter needs to be configured.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the product version of the instance. `local`: Local disk version, `cloud`: Cloud disk version, `cdc`: Exclusive cluster version. Default is `local`.
        """
        return pulumi.get(self, "product_version")

    @product_version.setter
    def product_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_version", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies which project the instance should belong to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def recycle(self) -> Optional[pulumi.Input[int]]:
        """
        Original intranet IPv4 address retention time: unit: day, value range: `0`, `1`, `2`, `3`, `7`, `15`.
        """
        return pulumi.get(self, "recycle")

    @recycle.setter
    def recycle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recycle", value)

    @property
    @pulumi.getter(name="redisClusterId")
    def redis_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Exclusive cluster ID. When the `product_version` is set to `cdc`, this parameter must be set.
        """
        return pulumi.get(self, "redis_cluster_id")

    @redis_cluster_id.setter
    def redis_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_cluster_id", value)

    @property
    @pulumi.getter(name="redisReplicasNum")
    def redis_replicas_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of instance copies. This is not required for standalone and master slave versions and must equal to count of `replica_zone_ids`, Non-multi-AZ does not require `replica_zone_ids`; Redis memory version 4.0, 5.0, 6.2 standard architecture and cluster architecture support the number of copies in the range [1, 2, 3, 4, 5]; Redis 2.8 standard version and CKV standard version only support 1 copy.
        """
        return pulumi.get(self, "redis_replicas_num")

    @redis_replicas_num.setter
    def redis_replicas_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redis_replicas_num", value)

    @property
    @pulumi.getter(name="redisShardNum")
    def redis_shard_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of instance shards; this parameter does not need to be configured for standard version instances; for cluster version instances, the number of shards ranges from: [`1`, `3`, `5`, `8`, `12`, `16`, `24 `, `32`, `40`, `48`, `64`, `80`, `96`, `128`].
        """
        return pulumi.get(self, "redis_shard_num")

    @redis_shard_num.setter
    def redis_shard_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redis_shard_num", value)

    @property
    @pulumi.getter(name="replicaZoneIds")
    def replica_zone_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        ID of replica nodes available zone. This is not required for standalone and master slave versions. NOTE: Removing some of the same zone of replicas (e.g. removing 100001 of [100001, 100001, 100002]) will pick the first hit to remove.
        """
        return pulumi.get(self, "replica_zone_ids")

    @replica_zone_ids.setter
    def replica_zone_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "replica_zone_ids", value)

    @property
    @pulumi.getter(name="replicasReadOnly")
    def replicas_read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether copy read-only is supported, Redis 2.8 Standard Edition and CKV Standard Edition do not support replica read-only, turn on replica read-only, the instance will automatically read and write separate, write requests are routed to the primary node, read requests are routed to the replica node, if you need to open replica read-only, the recommended number of replicas >=2.
        """
        return pulumi.get(self, "replicas_read_only")

    @replicas_read_only.setter
    def replicas_read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replicas_read_only", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of an instance, maybe: init, processing, online, isolate and todelete.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies which subnet the instance should belong to. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `cluster_ckv`,`cluster_redis5.0`,`cluster_redis`,`master_slave_ckv`,`master_slave_redis4.0`,`master_slave_redis5.0`,`master_slave_redis`,`standalone_redis`, specific region support specific types, need to refer data `redis_get_zone_config`.
        """
        warnings.warn("""It has been deprecated from version 1.33.1. Please use 'type_id' instead.""", DeprecationWarning)
        pulumi.log.warn("""type is deprecated: It has been deprecated from version 1.33.1. Please use 'type_id' instead.""")

        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> Optional[pulumi.Input[int]]:
        """
        Instance type. Available values reference data source `redis_get_zone_config` or [document](https://intl.cloud.tencent.com/document/product/239/32069), toggle immediately when modified.
        """
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the vpc with which the instance is to be associated. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> Optional[pulumi.Input[int]]:
        """
        Switching mode: `1`-maintenance time window switching, `2`-immediate switching, default value `2`.
        """
        return pulumi.get(self, "wait_switch")

    @wait_switch.setter
    def wait_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_switch", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 no_auth: Optional[pulumi.Input[bool]] = None,
                 operation_network: Optional[pulumi.Input[str]] = None,
                 params_template_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 product_version: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 recycle: Optional[pulumi.Input[int]] = None,
                 redis_cluster_id: Optional[pulumi.Input[str]] = None,
                 redis_replicas_num: Optional[pulumi.Input[int]] = None,
                 redis_shard_num: Optional[pulumi.Input[int]] = None,
                 replica_zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 replicas_read_only: Optional[pulumi.Input[bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 type_id: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a Redis instance and set its attributes.

        > **NOTE:** The argument vpc_id and subnet_id is now required because Basic Network Instance is no longer supported.

        > **NOTE:** Both adding and removing replications in one change is supported but not recommend.

        ## Example Usage

        ### Create a base version of redis

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zone = tencentcloud.Redis.get_zone_config(type_id=7)
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=zone.lists[0].zone,
            cidr_block="10.0.1.0/24")
        example = tencentcloud.redis.Instance("example",
            availability_zone=zone.lists[0].zone,
            type_id=zone.lists[0].type_id,
            password="Password@123",
            mem_size=8192,
            redis_shard_num=zone.lists[0].redis_shard_nums[0],
            redis_replicas_num=zone.lists[0].redis_replicas_nums[0],
            port=6379,
            vpc_id=vpc.id,
            subnet_id=subnet.id)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a CDC scenario instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        cdc_id = config.get("cdcId")
        if cdc_id is None:
            cdc_id = "cluster-xxxx"
        clusters = tencentcloud.Redis.get_clusters(dedicated_cluster_id=cdc_id)
        pulumi.export("name", clusters.resources[0].redis_cluster_id)
        zone = tencentcloud.Redis.get_zone_config(type_id=7,
            region="ap-guangzhou")
        subnets = tencentcloud.Vpc.get_subnets(cdc_id=cdc_id)
        example = tencentcloud.redis.Instance("example",
            availability_zone=zone.lists[0].zone,
            type_id=zone.lists[0].type_id,
            password="Password@123",
            mem_size=8192,
            redis_shard_num=zone.lists[0].redis_shard_nums[0],
            redis_replicas_num=zone.lists[0].redis_replicas_nums[0],
            port=6379,
            vpc_id=subnets.instance_lists[0].vpc_id,
            subnet_id=subnets.instance_lists[0].subnet_id,
            product_version="cdc",
            redis_cluster_id=clusters.resources[0].redis_cluster_id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Redis instance can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Redis/instance:Instance example crs-iu22tdrf
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Auto-renew flag. 0 - default state (manual renewal); 1 - automatic renewal; 2 - explicit no automatic renewal.
        :param pulumi.Input[str] availability_zone: The available zone ID of an instance to be created, please refer to `tencentcloud_redis_zone_config.list`.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values: `PREPAID` and `POSTPAID`. Default value is `POSTPAID`. Note: TencentCloud International only supports `POSTPAID`. Caution that update operation on this field will delete old instances and create new with new charge type.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete Redis instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
        :param pulumi.Input[str] ip: IP address of an instance. When the `operation_network` is `changeVip`, this parameter needs to be configured.
        :param pulumi.Input[int] mem_size: The memory volume of an available instance(in MB), please refer to `tencentcloud_redis_zone_config.list[zone].shard_memories`. When redis is standard type, it represents total memory size of the instance; when Redis is cluster type, it represents memory size of per sharding. `512MB` is supported only in master-slave instance.
        :param pulumi.Input[str] name: Instance name.
        :param pulumi.Input[bool] no_auth: Indicates whether the redis instance support no-auth access. NOTE: Only available in private cloud environment.
        :param pulumi.Input[str] operation_network: Refers to the category of the pre-modified network, including: `changeVip`: refers to switching the private network, including its intranet IPv4 address and port; `changeVpc`: refers to switching the subnet to which the private network belongs; `changeBaseToVpc`: refers to switching the basic network to a private network; `changeVPort`: refers to only modifying the instance network port.
        :param pulumi.Input[str] params_template_id: Specify params template id. If not set, will use default template.
        :param pulumi.Input[str] password: Password for a Redis user, which should be 8 to 16 characters. NOTE: Only `no_auth=true` specified can make password empty.
        :param pulumi.Input[int] port: The port used to access a redis instance. The default value is 6379. When the `operation_network` is `changeVPort` or `changeVip`, this parameter needs to be configured.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] product_version: Specify the product version of the instance. `local`: Local disk version, `cloud`: Cloud disk version, `cdc`: Exclusive cluster version. Default is `local`.
        :param pulumi.Input[int] project_id: Specifies which project the instance should belong to.
        :param pulumi.Input[int] recycle: Original intranet IPv4 address retention time: unit: day, value range: `0`, `1`, `2`, `3`, `7`, `15`.
        :param pulumi.Input[str] redis_cluster_id: Exclusive cluster ID. When the `product_version` is set to `cdc`, this parameter must be set.
        :param pulumi.Input[int] redis_replicas_num: The number of instance copies. This is not required for standalone and master slave versions and must equal to count of `replica_zone_ids`, Non-multi-AZ does not require `replica_zone_ids`; Redis memory version 4.0, 5.0, 6.2 standard architecture and cluster architecture support the number of copies in the range [1, 2, 3, 4, 5]; Redis 2.8 standard version and CKV standard version only support 1 copy.
        :param pulumi.Input[int] redis_shard_num: The number of instance shards; this parameter does not need to be configured for standard version instances; for cluster version instances, the number of shards ranges from: [`1`, `3`, `5`, `8`, `12`, `16`, `24 `, `32`, `40`, `48`, `64`, `80`, `96`, `128`].
        :param pulumi.Input[Sequence[pulumi.Input[int]]] replica_zone_ids: ID of replica nodes available zone. This is not required for standalone and master slave versions. NOTE: Removing some of the same zone of replicas (e.g. removing 100001 of [100001, 100001, 100002]) will pick the first hit to remove.
        :param pulumi.Input[bool] replicas_read_only: Whether copy read-only is supported, Redis 2.8 Standard Edition and CKV Standard Edition do not support replica read-only, turn on replica read-only, the instance will automatically read and write separate, write requests are routed to the primary node, read requests are routed to the replica node, if you need to open replica read-only, the recommended number of replicas >=2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        :param pulumi.Input[str] subnet_id: Specifies which subnet the instance should belong to. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[str] type: It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `cluster_ckv`,`cluster_redis5.0`,`cluster_redis`,`master_slave_ckv`,`master_slave_redis4.0`,`master_slave_redis5.0`,`master_slave_redis`,`standalone_redis`, specific region support specific types, need to refer data `redis_get_zone_config`.
        :param pulumi.Input[int] type_id: Instance type. Available values reference data source `redis_get_zone_config` or [document](https://intl.cloud.tencent.com/document/product/239/32069), toggle immediately when modified.
        :param pulumi.Input[str] vpc_id: ID of the vpc with which the instance is to be associated. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        :param pulumi.Input[int] wait_switch: Switching mode: `1`-maintenance time window switching, `2`-immediate switching, default value `2`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a Redis instance and set its attributes.

        > **NOTE:** The argument vpc_id and subnet_id is now required because Basic Network Instance is no longer supported.

        > **NOTE:** Both adding and removing replications in one change is supported but not recommend.

        ## Example Usage

        ### Create a base version of redis

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zone = tencentcloud.Redis.get_zone_config(type_id=7)
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=zone.lists[0].zone,
            cidr_block="10.0.1.0/24")
        example = tencentcloud.redis.Instance("example",
            availability_zone=zone.lists[0].zone,
            type_id=zone.lists[0].type_id,
            password="Password@123",
            mem_size=8192,
            redis_shard_num=zone.lists[0].redis_shard_nums[0],
            redis_replicas_num=zone.lists[0].redis_replicas_nums[0],
            port=6379,
            vpc_id=vpc.id,
            subnet_id=subnet.id)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a CDC scenario instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        cdc_id = config.get("cdcId")
        if cdc_id is None:
            cdc_id = "cluster-xxxx"
        clusters = tencentcloud.Redis.get_clusters(dedicated_cluster_id=cdc_id)
        pulumi.export("name", clusters.resources[0].redis_cluster_id)
        zone = tencentcloud.Redis.get_zone_config(type_id=7,
            region="ap-guangzhou")
        subnets = tencentcloud.Vpc.get_subnets(cdc_id=cdc_id)
        example = tencentcloud.redis.Instance("example",
            availability_zone=zone.lists[0].zone,
            type_id=zone.lists[0].type_id,
            password="Password@123",
            mem_size=8192,
            redis_shard_num=zone.lists[0].redis_shard_nums[0],
            redis_replicas_num=zone.lists[0].redis_replicas_nums[0],
            port=6379,
            vpc_id=subnets.instance_lists[0].vpc_id,
            subnet_id=subnets.instance_lists[0].subnet_id,
            product_version="cdc",
            redis_cluster_id=clusters.resources[0].redis_cluster_id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Redis instance can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Redis/instance:Instance example crs-iu22tdrf
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 no_auth: Optional[pulumi.Input[bool]] = None,
                 operation_network: Optional[pulumi.Input[str]] = None,
                 params_template_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 product_version: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 recycle: Optional[pulumi.Input[int]] = None,
                 redis_cluster_id: Optional[pulumi.Input[str]] = None,
                 redis_replicas_num: Optional[pulumi.Input[int]] = None,
                 redis_shard_num: Optional[pulumi.Input[int]] = None,
                 replica_zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 replicas_read_only: Optional[pulumi.Input[bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 type_id: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            if availability_zone is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone'")
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["force_delete"] = force_delete
            __props__.__dict__["ip"] = ip
            if mem_size is None and not opts.urn:
                raise TypeError("Missing required property 'mem_size'")
            __props__.__dict__["mem_size"] = mem_size
            __props__.__dict__["name"] = name
            __props__.__dict__["no_auth"] = no_auth
            __props__.__dict__["operation_network"] = operation_network
            __props__.__dict__["params_template_id"] = params_template_id
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["port"] = port
            __props__.__dict__["prepaid_period"] = prepaid_period
            __props__.__dict__["product_version"] = product_version
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["recycle"] = recycle
            __props__.__dict__["redis_cluster_id"] = redis_cluster_id
            __props__.__dict__["redis_replicas_num"] = redis_replicas_num
            __props__.__dict__["redis_shard_num"] = redis_shard_num
            __props__.__dict__["replica_zone_ids"] = replica_zone_ids
            __props__.__dict__["replicas_read_only"] = replicas_read_only
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["type"] = type
            __props__.__dict__["type_id"] = type_id
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["wait_switch"] = wait_switch
            __props__.__dict__["create_time"] = None
            __props__.__dict__["dedicated_cluster_id"] = None
            __props__.__dict__["node_infos"] = None
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'tencentcloud:Redis/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            dedicated_cluster_id: Optional[pulumi.Input[str]] = None,
            force_delete: Optional[pulumi.Input[bool]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            mem_size: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            no_auth: Optional[pulumi.Input[bool]] = None,
            node_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceNodeInfoArgs']]]]] = None,
            operation_network: Optional[pulumi.Input[str]] = None,
            params_template_id: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            prepaid_period: Optional[pulumi.Input[int]] = None,
            product_version: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            recycle: Optional[pulumi.Input[int]] = None,
            redis_cluster_id: Optional[pulumi.Input[str]] = None,
            redis_replicas_num: Optional[pulumi.Input[int]] = None,
            redis_shard_num: Optional[pulumi.Input[int]] = None,
            replica_zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            replicas_read_only: Optional[pulumi.Input[bool]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            type_id: Optional[pulumi.Input[int]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            wait_switch: Optional[pulumi.Input[int]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Auto-renew flag. 0 - default state (manual renewal); 1 - automatic renewal; 2 - explicit no automatic renewal.
        :param pulumi.Input[str] availability_zone: The available zone ID of an instance to be created, please refer to `tencentcloud_redis_zone_config.list`.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values: `PREPAID` and `POSTPAID`. Default value is `POSTPAID`. Note: TencentCloud International only supports `POSTPAID`. Caution that update operation on this field will delete old instances and create new with new charge type.
        :param pulumi.Input[str] create_time: The time when the instance was created.
        :param pulumi.Input[str] dedicated_cluster_id: Dedicated Cluster ID.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete Redis instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
        :param pulumi.Input[str] ip: IP address of an instance. When the `operation_network` is `changeVip`, this parameter needs to be configured.
        :param pulumi.Input[int] mem_size: The memory volume of an available instance(in MB), please refer to `tencentcloud_redis_zone_config.list[zone].shard_memories`. When redis is standard type, it represents total memory size of the instance; when Redis is cluster type, it represents memory size of per sharding. `512MB` is supported only in master-slave instance.
        :param pulumi.Input[str] name: Instance name.
        :param pulumi.Input[bool] no_auth: Indicates whether the redis instance support no-auth access. NOTE: Only available in private cloud environment.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceNodeInfoArgs']]]] node_infos: Readonly Primary/Replica nodes.
        :param pulumi.Input[str] operation_network: Refers to the category of the pre-modified network, including: `changeVip`: refers to switching the private network, including its intranet IPv4 address and port; `changeVpc`: refers to switching the subnet to which the private network belongs; `changeBaseToVpc`: refers to switching the basic network to a private network; `changeVPort`: refers to only modifying the instance network port.
        :param pulumi.Input[str] params_template_id: Specify params template id. If not set, will use default template.
        :param pulumi.Input[str] password: Password for a Redis user, which should be 8 to 16 characters. NOTE: Only `no_auth=true` specified can make password empty.
        :param pulumi.Input[int] port: The port used to access a redis instance. The default value is 6379. When the `operation_network` is `changeVPort` or `changeVip`, this parameter needs to be configured.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] product_version: Specify the product version of the instance. `local`: Local disk version, `cloud`: Cloud disk version, `cdc`: Exclusive cluster version. Default is `local`.
        :param pulumi.Input[int] project_id: Specifies which project the instance should belong to.
        :param pulumi.Input[int] recycle: Original intranet IPv4 address retention time: unit: day, value range: `0`, `1`, `2`, `3`, `7`, `15`.
        :param pulumi.Input[str] redis_cluster_id: Exclusive cluster ID. When the `product_version` is set to `cdc`, this parameter must be set.
        :param pulumi.Input[int] redis_replicas_num: The number of instance copies. This is not required for standalone and master slave versions and must equal to count of `replica_zone_ids`, Non-multi-AZ does not require `replica_zone_ids`; Redis memory version 4.0, 5.0, 6.2 standard architecture and cluster architecture support the number of copies in the range [1, 2, 3, 4, 5]; Redis 2.8 standard version and CKV standard version only support 1 copy.
        :param pulumi.Input[int] redis_shard_num: The number of instance shards; this parameter does not need to be configured for standard version instances; for cluster version instances, the number of shards ranges from: [`1`, `3`, `5`, `8`, `12`, `16`, `24 `, `32`, `40`, `48`, `64`, `80`, `96`, `128`].
        :param pulumi.Input[Sequence[pulumi.Input[int]]] replica_zone_ids: ID of replica nodes available zone. This is not required for standalone and master slave versions. NOTE: Removing some of the same zone of replicas (e.g. removing 100001 of [100001, 100001, 100002]) will pick the first hit to remove.
        :param pulumi.Input[bool] replicas_read_only: Whether copy read-only is supported, Redis 2.8 Standard Edition and CKV Standard Edition do not support replica read-only, turn on replica read-only, the instance will automatically read and write separate, write requests are routed to the primary node, read requests are routed to the replica node, if you need to open replica read-only, the recommended number of replicas >=2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        :param pulumi.Input[str] status: Current status of an instance, maybe: init, processing, online, isolate and todelete.
        :param pulumi.Input[str] subnet_id: Specifies which subnet the instance should belong to. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[str] type: It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `cluster_ckv`,`cluster_redis5.0`,`cluster_redis`,`master_slave_ckv`,`master_slave_redis4.0`,`master_slave_redis5.0`,`master_slave_redis`,`standalone_redis`, specific region support specific types, need to refer data `redis_get_zone_config`.
        :param pulumi.Input[int] type_id: Instance type. Available values reference data source `redis_get_zone_config` or [document](https://intl.cloud.tencent.com/document/product/239/32069), toggle immediately when modified.
        :param pulumi.Input[str] vpc_id: ID of the vpc with which the instance is to be associated. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        :param pulumi.Input[int] wait_switch: Switching mode: `1`-maintenance time window switching, `2`-immediate switching, default value `2`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["dedicated_cluster_id"] = dedicated_cluster_id
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["ip"] = ip
        __props__.__dict__["mem_size"] = mem_size
        __props__.__dict__["name"] = name
        __props__.__dict__["no_auth"] = no_auth
        __props__.__dict__["node_infos"] = node_infos
        __props__.__dict__["operation_network"] = operation_network
        __props__.__dict__["params_template_id"] = params_template_id
        __props__.__dict__["password"] = password
        __props__.__dict__["port"] = port
        __props__.__dict__["prepaid_period"] = prepaid_period
        __props__.__dict__["product_version"] = product_version
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["recycle"] = recycle
        __props__.__dict__["redis_cluster_id"] = redis_cluster_id
        __props__.__dict__["redis_replicas_num"] = redis_replicas_num
        __props__.__dict__["redis_shard_num"] = redis_shard_num
        __props__.__dict__["replica_zone_ids"] = replica_zone_ids
        __props__.__dict__["replicas_read_only"] = replicas_read_only
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["type_id"] = type_id
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["wait_switch"] = wait_switch
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Auto-renew flag. 0 - default state (manual renewal); 1 - automatic renewal; 2 - explicit no automatic renewal.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        """
        The available zone ID of an instance to be created, please refer to `tencentcloud_redis_zone_config.list`.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        The charge type of instance. Valid values: `PREPAID` and `POSTPAID`. Default value is `POSTPAID`. Note: TencentCloud International only supports `POSTPAID`. Caution that update operation on this field will delete old instances and create new with new charge type.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time when the instance was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dedicatedClusterId")
    def dedicated_cluster_id(self) -> pulumi.Output[str]:
        """
        Dedicated Cluster ID.
        """
        return pulumi.get(self, "dedicated_cluster_id")

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate whether to delete Redis instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
        """
        return pulumi.get(self, "force_delete")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        IP address of an instance. When the `operation_network` is `changeVip`, this parameter needs to be configured.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> pulumi.Output[int]:
        """
        The memory volume of an available instance(in MB), please refer to `tencentcloud_redis_zone_config.list[zone].shard_memories`. When redis is standard type, it represents total memory size of the instance; when Redis is cluster type, it represents memory size of per sharding. `512MB` is supported only in master-slave instance.
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="noAuth")
    def no_auth(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the redis instance support no-auth access. NOTE: Only available in private cloud environment.
        """
        return pulumi.get(self, "no_auth")

    @property
    @pulumi.getter(name="nodeInfos")
    def node_infos(self) -> pulumi.Output[Sequence['outputs.InstanceNodeInfo']]:
        """
        Readonly Primary/Replica nodes.
        """
        return pulumi.get(self, "node_infos")

    @property
    @pulumi.getter(name="operationNetwork")
    def operation_network(self) -> pulumi.Output[Optional[str]]:
        """
        Refers to the category of the pre-modified network, including: `changeVip`: refers to switching the private network, including its intranet IPv4 address and port; `changeVpc`: refers to switching the subnet to which the private network belongs; `changeBaseToVpc`: refers to switching the basic network to a private network; `changeVPort`: refers to only modifying the instance network port.
        """
        return pulumi.get(self, "operation_network")

    @property
    @pulumi.getter(name="paramsTemplateId")
    def params_template_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specify params template id. If not set, will use default template.
        """
        return pulumi.get(self, "params_template_id")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password for a Redis user, which should be 8 to 16 characters. NOTE: Only `no_auth=true` specified can make password empty.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[int]]:
        """
        The port used to access a redis instance. The default value is 6379. When the `operation_network` is `changeVPort` or `changeVip`, this parameter needs to be configured.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> pulumi.Output[Optional[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "prepaid_period")

    @property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> pulumi.Output[str]:
        """
        Specify the product version of the instance. `local`: Local disk version, `cloud`: Cloud disk version, `cdc`: Exclusive cluster version. Default is `local`.
        """
        return pulumi.get(self, "product_version")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies which project the instance should belong to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def recycle(self) -> pulumi.Output[Optional[int]]:
        """
        Original intranet IPv4 address retention time: unit: day, value range: `0`, `1`, `2`, `3`, `7`, `15`.
        """
        return pulumi.get(self, "recycle")

    @property
    @pulumi.getter(name="redisClusterId")
    def redis_cluster_id(self) -> pulumi.Output[str]:
        """
        Exclusive cluster ID. When the `product_version` is set to `cdc`, this parameter must be set.
        """
        return pulumi.get(self, "redis_cluster_id")

    @property
    @pulumi.getter(name="redisReplicasNum")
    def redis_replicas_num(self) -> pulumi.Output[Optional[int]]:
        """
        The number of instance copies. This is not required for standalone and master slave versions and must equal to count of `replica_zone_ids`, Non-multi-AZ does not require `replica_zone_ids`; Redis memory version 4.0, 5.0, 6.2 standard architecture and cluster architecture support the number of copies in the range [1, 2, 3, 4, 5]; Redis 2.8 standard version and CKV standard version only support 1 copy.
        """
        return pulumi.get(self, "redis_replicas_num")

    @property
    @pulumi.getter(name="redisShardNum")
    def redis_shard_num(self) -> pulumi.Output[int]:
        """
        The number of instance shards; this parameter does not need to be configured for standard version instances; for cluster version instances, the number of shards ranges from: [`1`, `3`, `5`, `8`, `12`, `16`, `24 `, `32`, `40`, `48`, `64`, `80`, `96`, `128`].
        """
        return pulumi.get(self, "redis_shard_num")

    @property
    @pulumi.getter(name="replicaZoneIds")
    def replica_zone_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        ID of replica nodes available zone. This is not required for standalone and master slave versions. NOTE: Removing some of the same zone of replicas (e.g. removing 100001 of [100001, 100001, 100002]) will pick the first hit to remove.
        """
        return pulumi.get(self, "replica_zone_ids")

    @property
    @pulumi.getter(name="replicasReadOnly")
    def replicas_read_only(self) -> pulumi.Output[bool]:
        """
        Whether copy read-only is supported, Redis 2.8 Standard Edition and CKV Standard Edition do not support replica read-only, turn on replica read-only, the instance will automatically read and write separate, write requests are routed to the primary node, read requests are routed to the replica node, if you need to open replica read-only, the recommended number of replicas >=2.
        """
        return pulumi.get(self, "replicas_read_only")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ID of security group. If both vpc_id and subnet_id are not set, this argument should not be set either.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Current status of an instance, maybe: init, processing, online, isolate and todelete.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Specifies which subnet the instance should belong to. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        It has been deprecated from version 1.33.1. Please use 'type_id' instead. Instance type. Available values: `cluster_ckv`,`cluster_redis5.0`,`cluster_redis`,`master_slave_ckv`,`master_slave_redis4.0`,`master_slave_redis5.0`,`master_slave_redis`,`standalone_redis`, specific region support specific types, need to refer data `redis_get_zone_config`.
        """
        warnings.warn("""It has been deprecated from version 1.33.1. Please use 'type_id' instead.""", DeprecationWarning)
        pulumi.log.warn("""type is deprecated: It has been deprecated from version 1.33.1. Please use 'type_id' instead.""")

        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Output[Optional[int]]:
        """
        Instance type. Available values reference data source `redis_get_zone_config` or [document](https://intl.cloud.tencent.com/document/product/239/32069), toggle immediately when modified.
        """
        return pulumi.get(self, "type_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of the vpc with which the instance is to be associated. When the `operation_network` is `changeVpc` or `changeBaseToVpc`, this parameter needs to be configured.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> pulumi.Output[Optional[int]]:
        """
        Switching mode: `1`-maintenance time window switching, `2`-immediate switching, default value `2`.
        """
        return pulumi.get(self, "wait_switch")

