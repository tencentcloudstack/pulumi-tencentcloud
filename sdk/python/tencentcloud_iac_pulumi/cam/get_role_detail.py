# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRoleDetailResult',
    'AwaitableGetRoleDetailResult',
    'get_role_detail',
    'get_role_detail_output',
]

@pulumi.output_type
class GetRoleDetailResult:
    """
    A collection of values returned by getRoleDetail.
    """
    def __init__(__self__, id=None, result_output_file=None, role_id=None, role_infos=None, role_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        pulumi.set(__self__, "role_id", role_id)
        if role_infos and not isinstance(role_infos, list):
            raise TypeError("Expected argument 'role_infos' to be a list")
        pulumi.set(__self__, "role_infos", role_infos)
        if role_name and not isinstance(role_name, str):
            raise TypeError("Expected argument 'role_name' to be a str")
        pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[str]:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="roleInfos")
    def role_infos(self) -> Sequence['outputs.GetRoleDetailRoleInfoResult']:
        return pulumi.get(self, "role_infos")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[str]:
        return pulumi.get(self, "role_name")


class AwaitableGetRoleDetailResult(GetRoleDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoleDetailResult(
            id=self.id,
            result_output_file=self.result_output_file,
            role_id=self.role_id,
            role_infos=self.role_infos,
            role_name=self.role_name)


def get_role_detail(result_output_file: Optional[str] = None,
                    role_id: Optional[str] = None,
                    role_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoleDetailResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    __args__['roleId'] = role_id
    __args__['roleName'] = role_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cam/getRoleDetail:getRoleDetail', __args__, opts=opts, typ=GetRoleDetailResult).value

    return AwaitableGetRoleDetailResult(
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        role_id=pulumi.get(__ret__, 'role_id'),
        role_infos=pulumi.get(__ret__, 'role_infos'),
        role_name=pulumi.get(__ret__, 'role_name'))


@_utilities.lift_output_func(get_role_detail)
def get_role_detail_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           role_id: Optional[pulumi.Input[Optional[str]]] = None,
                           role_name: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRoleDetailResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
