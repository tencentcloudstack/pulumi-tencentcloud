# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'MfaFlagActionFlag',
    'MfaFlagLoginFlag',
    'PolicyVersionPolicyVersion',
    'TagRoleAttachmentTag',
    'GetGroupMembershipsMembershipListResult',
    'GetGroupPolicyAttachmentsGroupPolicyAttachmentListResult',
    'GetGroupUserAccountGroupInfoResult',
    'GetGroupsGroupListResult',
    'GetListAttachedUserPolicyPolicyListResult',
    'GetListAttachedUserPolicyPolicyListGroupResult',
    'GetListEntitiesForPolicyListResult',
    'GetPoliciesPolicyListResult',
    'GetPolicyGrantingServiceAccessListResult',
    'GetPolicyGrantingServiceAccessListActionResult',
    'GetPolicyGrantingServiceAccessListPolicyResult',
    'GetPolicyGrantingServiceAccessListServiceResult',
    'GetRoleDetailRoleInfoResult',
    'GetRoleDetailRoleInfoTagResult',
    'GetRolePolicyAttachmentsRolePolicyAttachmentListResult',
    'GetRolesRoleListResult',
    'GetSamlProvidersProviderListResult',
    'GetSecretLastUsedTimeSecretIdLastUsedRowResult',
    'GetSubAccountsSubAccountResult',
    'GetUserPolicyAttachmentsUserPolicyAttachmentListResult',
    'GetUsersUserListResult',
]

@pulumi.output_type
class MfaFlagActionFlag(dict):
    def __init__(__self__, *,
                 phone: Optional[int] = None,
                 stoken: Optional[int] = None,
                 wechat: Optional[int] = None):
        """
        :param int phone: Phone.
        :param int stoken: Soft token.
        :param int wechat: Wechat.
        """
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if stoken is not None:
            pulumi.set(__self__, "stoken", stoken)
        if wechat is not None:
            pulumi.set(__self__, "wechat", wechat)

    @property
    @pulumi.getter
    def phone(self) -> Optional[int]:
        """
        Phone.
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def stoken(self) -> Optional[int]:
        """
        Soft token.
        """
        return pulumi.get(self, "stoken")

    @property
    @pulumi.getter
    def wechat(self) -> Optional[int]:
        """
        Wechat.
        """
        return pulumi.get(self, "wechat")


@pulumi.output_type
class MfaFlagLoginFlag(dict):
    def __init__(__self__, *,
                 phone: Optional[int] = None,
                 stoken: Optional[int] = None,
                 wechat: Optional[int] = None):
        """
        :param int phone: Phone.
        :param int stoken: Soft token.
        :param int wechat: Wechat.
        """
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if stoken is not None:
            pulumi.set(__self__, "stoken", stoken)
        if wechat is not None:
            pulumi.set(__self__, "wechat", wechat)

    @property
    @pulumi.getter
    def phone(self) -> Optional[int]:
        """
        Phone.
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def stoken(self) -> Optional[int]:
        """
        Soft token.
        """
        return pulumi.get(self, "stoken")

    @property
    @pulumi.getter
    def wechat(self) -> Optional[int]:
        """
        Wechat.
        """
        return pulumi.get(self, "wechat")


@pulumi.output_type
class PolicyVersionPolicyVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createDate":
            suggest = "create_date"
        elif key == "isDefaultVersion":
            suggest = "is_default_version"
        elif key == "versionId":
            suggest = "version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyVersionPolicyVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyVersionPolicyVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyVersionPolicyVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_date: Optional[str] = None,
                 document: Optional[str] = None,
                 is_default_version: Optional[int] = None,
                 version_id: Optional[int] = None):
        """
        :param str create_date: Strategic version creation timeNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param str document: Strategic grammar textNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param int is_default_version: Whether it is an effective version.0 means not, 1 means yesNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param int version_id: Strategic version numberNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        if create_date is not None:
            pulumi.set(__self__, "create_date", create_date)
        if document is not None:
            pulumi.set(__self__, "document", document)
        if is_default_version is not None:
            pulumi.set(__self__, "is_default_version", is_default_version)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> Optional[str]:
        """
        Strategic version creation timeNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter
    def document(self) -> Optional[str]:
        """
        Strategic grammar textNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "document")

    @property
    @pulumi.getter(name="isDefaultVersion")
    def is_default_version(self) -> Optional[int]:
        """
        Whether it is an effective version.0 means not, 1 means yesNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "is_default_version")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[int]:
        """
        Strategic version numberNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class TagRoleAttachmentTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Label.
        :param str value: Label.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Label.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGroupMembershipsMembershipListResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 user_ids: Sequence[str],
                 user_names: Sequence[str]):
        """
        :param str group_id: ID of CAM group to be queried.
        :param Sequence[str] user_ids: (**Deprecated**) It has been deprecated from version 1.59.5. Use `user_names` instead. ID set of the CAM group members.
        :param Sequence[str] user_names: ID set of the CAM group members.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "user_ids", user_ids)
        pulumi.set(__self__, "user_names", user_names)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        ID of CAM group to be queried.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Sequence[str]:
        """
        (**Deprecated**) It has been deprecated from version 1.59.5. Use `user_names` instead. ID set of the CAM group members.
        """
        warnings.warn("""It has been deprecated from version 1.59.5. Use `user_names` instead.""", DeprecationWarning)
        pulumi.log.warn("""user_ids is deprecated: It has been deprecated from version 1.59.5. Use `user_names` instead.""")

        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter(name="userNames")
    def user_names(self) -> Sequence[str]:
        """
        ID set of the CAM group members.
        """
        return pulumi.get(self, "user_names")


@pulumi.output_type
class GetGroupPolicyAttachmentsGroupPolicyAttachmentListResult(dict):
    def __init__(__self__, *,
                 create_mode: int,
                 create_time: str,
                 group_id: str,
                 policy_id: str,
                 policy_name: str,
                 policy_type: str):
        """
        :param int create_mode: Mode of creation of the CAM user policy attachment. 1 means the cam policy attachment is created by production, and the others indicate syntax strategy ways.
        :param str create_time: Create time of the CAM group policy attachment.
        :param str group_id: ID of the attached CAM group to be queried.
        :param str policy_id: ID of CAM policy to be queried.
        :param str policy_name: Name of the policy.
        :param str policy_type: Type of the policy strategy. 'User' means customer strategy and 'QCS' means preset strategy.
        """
        pulumi.set(__self__, "create_mode", create_mode)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> int:
        """
        Mode of creation of the CAM user policy attachment. 1 means the cam policy attachment is created by production, and the others indicate syntax strategy ways.
        """
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the CAM group policy attachment.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        ID of the attached CAM group to be queried.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        ID of CAM policy to be queried.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Name of the policy.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        Type of the policy strategy. 'User' means customer strategy and 'QCS' means preset strategy.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetGroupUserAccountGroupInfoResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 group_id: int,
                 group_name: str,
                 remark: str):
        """
        :param str create_time: Create time.
        :param int group_id: User group ID.
        :param str group_name: User group name.
        :param str remark: Remark.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        """
        User group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        User group name.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remark.
        """
        return pulumi.get(self, "remark")


@pulumi.output_type
class GetGroupsGroupListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 group_id: str,
                 name: str,
                 remark: str):
        """
        :param str create_time: Create time of the CAM group.
        :param str group_id: ID of CAM group to be queried.
        :param str name: Name of the CAM group to be queried.
        :param str remark: Description of the cam group to be queried.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the CAM group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        ID of CAM group to be queried.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the CAM group to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Description of the cam group to be queried.
        """
        return pulumi.get(self, "remark")


@pulumi.output_type
class GetListAttachedUserPolicyPolicyListResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 create_mode: str,
                 deactived: int,
                 deactived_details: Sequence[str],
                 description: str,
                 groups: Sequence['outputs.GetListAttachedUserPolicyPolicyListGroupResult'],
                 policy_id: str,
                 policy_name: str,
                 strategy_type: str):
        """
        :param str add_time: Creation time.
        :param str create_mode: Creation mode (1 represents policies created by product or project permissions, others represent policies created by policy syntax).
        :param int deactived: Has it been taken offline (0: No 1: Yes)Note: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence[str] deactived_details: List of offline productsNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str description: Policy Description.
        :param Sequence['GetListAttachedUserPolicyPolicyListGroupArgs'] groups: Associated information with groupNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str policy_id: Policy ID.
        :param str policy_name: Policy Name.
        :param str strategy_type: Policy type (1 represents custom policy, 2 represents preset policy).
        """
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "create_mode", create_mode)
        pulumi.set(__self__, "deactived", deactived)
        pulumi.set(__self__, "deactived_details", deactived_details)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> str:
        """
        Creation mode (1 represents policies created by product or project permissions, others represent policies created by policy syntax).
        """
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter
    def deactived(self) -> int:
        """
        Has it been taken offline (0: No 1: Yes)Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "deactived")

    @property
    @pulumi.getter(name="deactivedDetails")
    def deactived_details(self) -> Sequence[str]:
        """
        List of offline productsNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "deactived_details")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Policy Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetListAttachedUserPolicyPolicyListGroupResult']:
        """
        Associated information with groupNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        Policy ID.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Policy Name.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> str:
        """
        Policy type (1 represents custom policy, 2 represents preset policy).
        """
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class GetListAttachedUserPolicyPolicyListGroupResult(dict):
    def __init__(__self__, *,
                 group_id: int,
                 group_name: str):
        """
        :param int group_id: Group ID.
        :param str group_name: Group Name.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        """
        Group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Group Name.
        """
        return pulumi.get(self, "group_name")


@pulumi.output_type
class GetListEntitiesForPolicyListResult(dict):
    def __init__(__self__, *,
                 attachment_time: str,
                 id: str,
                 name: str,
                 related_type: int,
                 uin: int):
        """
        :param str attachment_time: Policy association timeNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str id: Entity ID.
        :param str name: Entity NameNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int related_type: Association type. 1. User association; 2 User Group Association.
        :param int uin: Entity UinNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "attachment_time", attachment_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "related_type", related_type)
        pulumi.set(__self__, "uin", uin)

    @property
    @pulumi.getter(name="attachmentTime")
    def attachment_time(self) -> str:
        """
        Policy association timeNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "attachment_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Entity ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Entity NameNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="relatedType")
    def related_type(self) -> int:
        """
        Association type. 1. User association; 2 User Group Association.
        """
        return pulumi.get(self, "related_type")

    @property
    @pulumi.getter
    def uin(self) -> int:
        """
        Entity UinNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "uin")


@pulumi.output_type
class GetPoliciesPolicyListResult(dict):
    def __init__(__self__, *,
                 attachments: int,
                 create_mode: int,
                 create_time: str,
                 description: str,
                 name: str,
                 policy_id: str,
                 service_type: str,
                 type: int):
        """
        :param int attachments: Number of attached users.
        :param int create_mode: Mode of creation of policy strategy. Valid values: `1`, `2`. `1` means policy was created with console, and `2` means it was created by strategies.
        :param str create_time: Create time of the CAM policy.
        :param str description: The description of the CAM policy.
        :param str name: Name of the CAM policy to be queried.
        :param str policy_id: ID of CAM policy to be queried.
        :param str service_type: Name of attached products.
        :param int type: Type of the policy strategy. Valid values: `1`, `2`. `1` means customer strategy and `2` means preset strategy.
        """
        pulumi.set(__self__, "attachments", attachments)
        pulumi.set(__self__, "create_mode", create_mode)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def attachments(self) -> int:
        """
        Number of attached users.
        """
        return pulumi.get(self, "attachments")

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> int:
        """
        Mode of creation of policy strategy. Valid values: `1`, `2`. `1` means policy was created with console, and `2` means it was created by strategies.
        """
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the CAM policy.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the CAM policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the CAM policy to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        ID of CAM policy to be queried.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        Name of attached products.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def type(self) -> int:
        """
        Type of the policy strategy. Valid values: `1`, `2`. `1` means customer strategy and `2` means preset strategy.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPolicyGrantingServiceAccessListResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetPolicyGrantingServiceAccessListActionResult'],
                 policies: Sequence['outputs.GetPolicyGrantingServiceAccessListPolicyResult'],
                 services: Sequence['outputs.GetPolicyGrantingServiceAccessListServiceResult']):
        """
        :param Sequence['GetPolicyGrantingServiceAccessListActionArgs'] actions: Action list.
        :param Sequence['GetPolicyGrantingServiceAccessListPolicyArgs'] policies: Policy list.
        :param Sequence['GetPolicyGrantingServiceAccessListServiceArgs'] services: Service info.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "policies", policies)
        pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetPolicyGrantingServiceAccessListActionResult']:
        """
        Action list.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetPolicyGrantingServiceAccessListPolicyResult']:
        """
        Policy list.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def services(self) -> Sequence['outputs.GetPolicyGrantingServiceAccessListServiceResult']:
        """
        Service info.
        """
        return pulumi.get(self, "services")


@pulumi.output_type
class GetPolicyGrantingServiceAccessListActionResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str):
        """
        :param str description: Action description.
        :param str name: Action name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Action description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Action name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPolicyGrantingServiceAccessListPolicyResult(dict):
    def __init__(__self__, *,
                 policy_description: str,
                 policy_id: str,
                 policy_name: str,
                 policy_type: str):
        """
        :param str policy_description: Policy description.
        :param str policy_id: Policy Id.
        :param str policy_name: Policy name.
        :param str policy_type: Polic type.
        """
        pulumi.set(__self__, "policy_description", policy_description)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyDescription")
    def policy_description(self) -> str:
        """
        Policy description.
        """
        return pulumi.get(self, "policy_description")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Policy name.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        Polic type.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetPolicyGrantingServiceAccessListServiceResult(dict):
    def __init__(__self__, *,
                 service_name: str,
                 service_type: str):
        """
        :param str service_name: Service name.
        :param str service_type: Service type, this field needs to be passed when viewing the details of the service authorization interface.
        """
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        Service type, this field needs to be passed when viewing the details of the service authorization interface.
        """
        return pulumi.get(self, "service_type")


@pulumi.output_type
class GetRoleDetailRoleInfoResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 console_login: int,
                 deletion_task_id: str,
                 description: str,
                 policy_document: str,
                 role_id: str,
                 role_name: str,
                 role_type: str,
                 session_duration: int,
                 tags: Sequence['outputs.GetRoleDetailRoleInfoTagResult'],
                 update_time: str):
        """
        :param str add_time: Time role created
        :param int console_login: If login is allowed for the role
        :param str deletion_task_id: Task identifier for deleting a service-linked role 
               Note: this field may return null, indicating that no valid values can be obtained.
        :param str description: Role description
        :param str policy_document: Role policy document
        :param str role_id: Role ID
        :param str role_name: Role name
        :param str role_type: User role. Valid values: `user`, `system`, `service_linked`
               Note: this field may return null, indicating that no valid values can be obtained.
        :param int session_duration: Valid period
               Note: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetRoleDetailRoleInfoTagArgs'] tags: Tags.
               Note: This field may return `null`, indicating that no valid values can be obtained.
        :param str update_time: Time role last updated
        """
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "console_login", console_login)
        pulumi.set(__self__, "deletion_task_id", deletion_task_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "policy_document", policy_document)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "role_type", role_type)
        pulumi.set(__self__, "session_duration", session_duration)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        """
        Time role created
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> int:
        """
        If login is allowed for the role
        """
        return pulumi.get(self, "console_login")

    @property
    @pulumi.getter(name="deletionTaskId")
    def deletion_task_id(self) -> str:
        """
        Task identifier for deleting a service-linked role 
        Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "deletion_task_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Role description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> str:
        """
        Role policy document
        """
        return pulumi.get(self, "policy_document")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        Role ID
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        """
        Role name
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter(name="roleType")
    def role_type(self) -> str:
        """
        User role. Valid values: `user`, `system`, `service_linked`
        Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "role_type")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> int:
        """
        Valid period
        Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetRoleDetailRoleInfoTagResult']:
        """
        Tags.
        Note: This field may return `null`, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Time role last updated
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetRoleDetailRoleInfoTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag key.
        :param str value: Tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRolePolicyAttachmentsRolePolicyAttachmentListResult(dict):
    def __init__(__self__, *,
                 create_mode: int,
                 create_time: str,
                 policy_id: str,
                 policy_name: str,
                 policy_type: str,
                 role_id: str):
        """
        :param int create_mode: Mode of Creation of the CAM user policy attachment. `1` means the cam policy attachment is created by production, and the others indicate syntax strategy ways.
        :param str create_time: Create time of the CAM role policy attachment.
        :param str policy_id: ID of CAM policy to be queried.
        :param str policy_name: Name of the policy.
        :param str policy_type: Type of the policy strategy. Valid values are 'User', 'QCS'. 'User' means customer strategy and 'QCS' means preset strategy.
        :param str role_id: ID of the attached CAM role to be queried.
        """
        pulumi.set(__self__, "create_mode", create_mode)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "role_id", role_id)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> int:
        """
        Mode of Creation of the CAM user policy attachment. `1` means the cam policy attachment is created by production, and the others indicate syntax strategy ways.
        """
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the CAM role policy attachment.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        ID of CAM policy to be queried.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Name of the policy.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        Type of the policy strategy. Valid values are 'User', 'QCS'. 'User' means customer strategy and 'QCS' means preset strategy.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        ID of the attached CAM role to be queried.
        """
        return pulumi.get(self, "role_id")


@pulumi.output_type
class GetRolesRoleListResult(dict):
    def __init__(__self__, *,
                 console_login: bool,
                 create_time: str,
                 description: str,
                 document: str,
                 name: str,
                 role_id: str,
                 update_time: str):
        """
        :param bool console_login: Indicate whether the CAM role can be login or not.
        :param str create_time: The create time of the CAM role.
        :param str description: The description of the CAM role to be queried.
        :param str document: Policy document of CAM role.
        :param str name: Name of the CAM policy to be queried.
        :param str role_id: ID of the CAM role to be queried.
        :param str update_time: The last update time of the CAM role.
        """
        pulumi.set(__self__, "console_login", console_login)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "document", document)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> bool:
        """
        Indicate whether the CAM role can be login or not.
        """
        return pulumi.get(self, "console_login")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the CAM role.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the CAM role to be queried.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def document(self) -> str:
        """
        Policy document of CAM role.
        """
        return pulumi.get(self, "document")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the CAM policy to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        ID of the CAM role to be queried.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The last update time of the CAM role.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetSamlProvidersProviderListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 modify_time: str,
                 name: str):
        """
        :param str create_time: Create time of the CAM SAML provider.
        :param str description: The description of the CAM SAML provider.
        :param str modify_time: The last modify time of the CAM SAML provider.
        :param str name: Name of the CAM SAML provider to be queried.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the CAM SAML provider.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the CAM SAML provider.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        """
        The last modify time of the CAM SAML provider.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the CAM SAML provider to be queried.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSecretLastUsedTimeSecretIdLastUsedRowResult(dict):
    def __init__(__self__, *,
                 last_secret_used_date: int,
                 last_used_date: str,
                 secret_id: str):
        """
        :param int last_secret_used_date: Last used timestamp.
        :param str last_used_date: Last used date (with 1 day delay).
        :param str secret_id: Secret Id.
        """
        pulumi.set(__self__, "last_secret_used_date", last_secret_used_date)
        pulumi.set(__self__, "last_used_date", last_used_date)
        pulumi.set(__self__, "secret_id", secret_id)

    @property
    @pulumi.getter(name="lastSecretUsedDate")
    def last_secret_used_date(self) -> int:
        """
        Last used timestamp.
        """
        return pulumi.get(self, "last_secret_used_date")

    @property
    @pulumi.getter(name="lastUsedDate")
    def last_used_date(self) -> str:
        """
        Last used date (with 1 day delay).
        """
        return pulumi.get(self, "last_used_date")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        """
        Secret Id.
        """
        return pulumi.get(self, "secret_id")


@pulumi.output_type
class GetSubAccountsSubAccountResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 last_login_ip: str,
                 last_login_time: str,
                 name: str,
                 remark: str,
                 uid: int,
                 uin: int,
                 user_type: int):
        """
        :param str create_time: Creation time
               Note: this field may return null, indicating that no valid values can be obtained.
        :param str name: Sub-user name
        :param str remark: Sub-user remarks
        :param int uid: Sub-user UID. UID is the unique identifier of a user who is a message recipient, while UIN is a unique identifier of a user.
        :param int uin: Sub-user ID
        :param int user_type: User type (1: root account; 2: sub-user; 3: WeCom sub-user; 4: collaborator; 5: message recipient)
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "last_login_ip", last_login_ip)
        pulumi.set(__self__, "last_login_time", last_login_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time
        Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="lastLoginIp")
    def last_login_ip(self) -> str:
        return pulumi.get(self, "last_login_ip")

    @property
    @pulumi.getter(name="lastLoginTime")
    def last_login_time(self) -> str:
        return pulumi.get(self, "last_login_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Sub-user name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Sub-user remarks
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def uid(self) -> int:
        """
        Sub-user UID. UID is the unique identifier of a user who is a message recipient, while UIN is a unique identifier of a user.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def uin(self) -> int:
        """
        Sub-user ID
        """
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> int:
        """
        User type (1: root account; 2: sub-user; 3: WeCom sub-user; 4: collaborator; 5: message recipient)
        """
        return pulumi.get(self, "user_type")


@pulumi.output_type
class GetUserPolicyAttachmentsUserPolicyAttachmentListResult(dict):
    def __init__(__self__, *,
                 create_mode: int,
                 create_time: str,
                 policy_id: str,
                 policy_name: str,
                 policy_type: str,
                 user_id: str,
                 user_name: str):
        """
        :param int create_mode: Mode of Creation of the CAM user policy attachment. `1` means the CAM policy attachment is created by production, and the others indicate syntax strategy ways.
        :param str create_time: The create time of the CAM user policy attachment.
        :param str policy_id: ID of CAM policy to be queried.
        :param str policy_name: The name of the policy.
        :param str policy_type: Type of the policy strategy. 'User' means customer strategy and 'QCS' means preset strategy.
        :param str user_id: It has been deprecated from version 1.59.6. Use `user_name` instead. ID of the attached CAM user to be queried.
        :param str user_name: Name of the attached CAM user as unique key to be queried.
        """
        pulumi.set(__self__, "create_mode", create_mode)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> int:
        """
        Mode of Creation of the CAM user policy attachment. `1` means the CAM policy attachment is created by production, and the others indicate syntax strategy ways.
        """
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the CAM user policy attachment.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        ID of CAM policy to be queried.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        The name of the policy.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        Type of the policy strategy. 'User' means customer strategy and 'QCS' means preset strategy.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        It has been deprecated from version 1.59.6. Use `user_name` instead. ID of the attached CAM user to be queried.
        """
        warnings.warn("""It has been deprecated from version 1.59.6. Use `user_name` instead.""", DeprecationWarning)
        pulumi.log.warn("""user_id is deprecated: It has been deprecated from version 1.59.6. Use `user_name` instead.""")

        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        Name of the attached CAM user as unique key to be queried.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetUsersUserListResult(dict):
    def __init__(__self__, *,
                 country_code: str,
                 email: str,
                 name: str,
                 phone_num: str,
                 remark: str,
                 uid: int,
                 uin: int,
                 user_id: str,
                 console_login: Optional[bool] = None):
        """
        :param str country_code: Country code of the CAM user to be queried.
        :param str email: Email of the CAM user to be queried.
        :param str name: Name of CAM user to be queried.
        :param str phone_num: Phone num of the CAM user to be queried.
        :param str remark: Remark of the CAM user to be queried.
        :param int uid: Uid of the CAM user to be queried.
        :param int uin: Uin of the CAM user to be queried.
        :param str user_id: ID of CAM user. Its value equals to `name` argument.
        :param bool console_login: Indicate whether the user can login in.
        """
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone_num", phone_num)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "user_id", user_id)
        if console_login is not None:
            pulumi.set(__self__, "console_login", console_login)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        Country code of the CAM user to be queried.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Email of the CAM user to be queried.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of CAM user to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNum")
    def phone_num(self) -> str:
        """
        Phone num of the CAM user to be queried.
        """
        return pulumi.get(self, "phone_num")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remark of the CAM user to be queried.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def uid(self) -> int:
        """
        Uid of the CAM user to be queried.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def uin(self) -> int:
        """
        Uin of the CAM user to be queried.
        """
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        ID of CAM user. Its value equals to `name` argument.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> Optional[bool]:
        """
        Indicate whether the user can login in.
        """
        return pulumi.get(self, "console_login")


