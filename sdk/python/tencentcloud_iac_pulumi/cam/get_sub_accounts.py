# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSubAccountsResult',
    'AwaitableGetSubAccountsResult',
    'get_sub_accounts',
    'get_sub_accounts_output',
]

@pulumi.output_type
class GetSubAccountsResult:
    """
    A collection of values returned by getSubAccounts.
    """
    def __init__(__self__, filter_sub_account_uins=None, id=None, result_output_file=None, sub_accounts=None):
        if filter_sub_account_uins and not isinstance(filter_sub_account_uins, list):
            raise TypeError("Expected argument 'filter_sub_account_uins' to be a list")
        pulumi.set(__self__, "filter_sub_account_uins", filter_sub_account_uins)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if sub_accounts and not isinstance(sub_accounts, list):
            raise TypeError("Expected argument 'sub_accounts' to be a list")
        pulumi.set(__self__, "sub_accounts", sub_accounts)

    @property
    @pulumi.getter(name="filterSubAccountUins")
    def filter_sub_account_uins(self) -> Sequence[int]:
        return pulumi.get(self, "filter_sub_account_uins")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="subAccounts")
    def sub_accounts(self) -> Sequence['outputs.GetSubAccountsSubAccountResult']:
        return pulumi.get(self, "sub_accounts")


class AwaitableGetSubAccountsResult(GetSubAccountsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubAccountsResult(
            filter_sub_account_uins=self.filter_sub_account_uins,
            id=self.id,
            result_output_file=self.result_output_file,
            sub_accounts=self.sub_accounts)


def get_sub_accounts(filter_sub_account_uins: Optional[Sequence[int]] = None,
                     result_output_file: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubAccountsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filterSubAccountUins'] = filter_sub_account_uins
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cam/getSubAccounts:getSubAccounts', __args__, opts=opts, typ=GetSubAccountsResult).value

    return AwaitableGetSubAccountsResult(
        filter_sub_account_uins=pulumi.get(__ret__, 'filter_sub_account_uins'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        sub_accounts=pulumi.get(__ret__, 'sub_accounts'))


@_utilities.lift_output_func(get_sub_accounts)
def get_sub_accounts_output(filter_sub_account_uins: Optional[pulumi.Input[Sequence[int]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubAccountsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
