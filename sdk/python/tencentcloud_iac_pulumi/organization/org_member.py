# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrgMemberArgs', 'OrgMember']

@pulumi.input_type
class OrgMemberArgs:
    def __init__(__self__, *,
                 node_id: pulumi.Input[int],
                 permission_ids: pulumi.Input[Sequence[pulumi.Input[int]]],
                 policy_type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 pay_uin: Optional[pulumi.Input[str]] = None,
                 record_id: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a OrgMember resource.
        :param pulumi.Input[int] node_id: Organization node ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] permission_ids: Financial management permission IDs.Valid values:- `1`: View bill.- `2`: Check balance.- `3`: Fund transfer.- `4`: Combine bill.- `5`: Issue an invoice.- `6`: Inherit discount.- `7`: Pay on behalf.value 1,2 is required.
        :param pulumi.Input[str] policy_type: Organization policy type.- `Financial`: Financial management policy.
        :param pulumi.Input[str] name: Member name.
        :param pulumi.Input[str] pay_uin: The uin which is payment account on behalf.When `PermissionIds` contains 7, is required.
        :param pulumi.Input[int] record_id: Create member record ID.When create failed and needs to be recreated, is required.
        :param pulumi.Input[str] remark: Notes.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "permission_ids", permission_ids)
        pulumi.set(__self__, "policy_type", policy_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pay_uin is not None:
            pulumi.set(__self__, "pay_uin", pay_uin)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> pulumi.Input[int]:
        """
        Organization node ID.
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter(name="permissionIds")
    def permission_ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Financial management permission IDs.Valid values:- `1`: View bill.- `2`: Check balance.- `3`: Fund transfer.- `4`: Combine bill.- `5`: Issue an invoice.- `6`: Inherit discount.- `7`: Pay on behalf.value 1,2 is required.
        """
        return pulumi.get(self, "permission_ids")

    @permission_ids.setter
    def permission_ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "permission_ids", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Input[str]:
        """
        Organization policy type.- `Financial`: Financial management policy.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Member name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="payUin")
    def pay_uin(self) -> Optional[pulumi.Input[str]]:
        """
        The uin which is payment account on behalf.When `PermissionIds` contains 7, is required.
        """
        return pulumi.get(self, "pay_uin")

    @pay_uin.setter
    def pay_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pay_uin", value)

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[pulumi.Input[int]]:
        """
        Create member record ID.When create failed and needs to be recreated, is required.
        """
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "record_id", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Notes.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _OrgMemberState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 is_allow_quit: Optional[pulumi.Input[str]] = None,
                 member_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_id: Optional[pulumi.Input[int]] = None,
                 node_name: Optional[pulumi.Input[str]] = None,
                 org_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['OrgMemberOrgPermissionArgs']]]] = None,
                 org_policy_name: Optional[pulumi.Input[str]] = None,
                 pay_name: Optional[pulumi.Input[str]] = None,
                 pay_uin: Optional[pulumi.Input[str]] = None,
                 permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 record_id: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgMember resources.
        :param pulumi.Input[str] create_time: Member creation time.
        :param pulumi.Input[str] is_allow_quit: Whether to allow member to leave the organization.Valid values:- `Allow`.- `Denied`.
        :param pulumi.Input[str] member_type: Member Type.Valid values:- `Invite`: The member is invited.- `Create`: The member is created.
        :param pulumi.Input[str] name: Member name.
        :param pulumi.Input[int] node_id: Organization node ID.
        :param pulumi.Input[str] node_name: Organization node name.
        :param pulumi.Input[Sequence[pulumi.Input['OrgMemberOrgPermissionArgs']]] org_permissions: Financial management permissions.
        :param pulumi.Input[str] org_policy_name: Organization policy name.
        :param pulumi.Input[str] pay_name: The member name which is payment account on behalf.
        :param pulumi.Input[str] pay_uin: The uin which is payment account on behalf.When `PermissionIds` contains 7, is required.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] permission_ids: Financial management permission IDs.Valid values:- `1`: View bill.- `2`: Check balance.- `3`: Fund transfer.- `4`: Combine bill.- `5`: Issue an invoice.- `6`: Inherit discount.- `7`: Pay on behalf.value 1,2 is required.
        :param pulumi.Input[str] policy_type: Organization policy type.- `Financial`: Financial management policy.
        :param pulumi.Input[int] record_id: Create member record ID.When create failed and needs to be recreated, is required.
        :param pulumi.Input[str] remark: Notes.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] update_time: Member update time.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if is_allow_quit is not None:
            pulumi.set(__self__, "is_allow_quit", is_allow_quit)
        if member_type is not None:
            pulumi.set(__self__, "member_type", member_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if node_name is not None:
            pulumi.set(__self__, "node_name", node_name)
        if org_permissions is not None:
            pulumi.set(__self__, "org_permissions", org_permissions)
        if org_policy_name is not None:
            pulumi.set(__self__, "org_policy_name", org_policy_name)
        if pay_name is not None:
            pulumi.set(__self__, "pay_name", pay_name)
        if pay_uin is not None:
            pulumi.set(__self__, "pay_uin", pay_uin)
        if permission_ids is not None:
            pulumi.set(__self__, "permission_ids", permission_ids)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Member creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="isAllowQuit")
    def is_allow_quit(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to allow member to leave the organization.Valid values:- `Allow`.- `Denied`.
        """
        return pulumi.get(self, "is_allow_quit")

    @is_allow_quit.setter
    def is_allow_quit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_allow_quit", value)

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> Optional[pulumi.Input[str]]:
        """
        Member Type.Valid values:- `Invite`: The member is invited.- `Create`: The member is created.
        """
        return pulumi.get(self, "member_type")

    @member_type.setter
    def member_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Member name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[int]]:
        """
        Organization node ID.
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[pulumi.Input[str]]:
        """
        Organization node name.
        """
        return pulumi.get(self, "node_name")

    @node_name.setter
    def node_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_name", value)

    @property
    @pulumi.getter(name="orgPermissions")
    def org_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgMemberOrgPermissionArgs']]]]:
        """
        Financial management permissions.
        """
        return pulumi.get(self, "org_permissions")

    @org_permissions.setter
    def org_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgMemberOrgPermissionArgs']]]]):
        pulumi.set(self, "org_permissions", value)

    @property
    @pulumi.getter(name="orgPolicyName")
    def org_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Organization policy name.
        """
        return pulumi.get(self, "org_policy_name")

    @org_policy_name.setter
    def org_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_policy_name", value)

    @property
    @pulumi.getter(name="payName")
    def pay_name(self) -> Optional[pulumi.Input[str]]:
        """
        The member name which is payment account on behalf.
        """
        return pulumi.get(self, "pay_name")

    @pay_name.setter
    def pay_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pay_name", value)

    @property
    @pulumi.getter(name="payUin")
    def pay_uin(self) -> Optional[pulumi.Input[str]]:
        """
        The uin which is payment account on behalf.When `PermissionIds` contains 7, is required.
        """
        return pulumi.get(self, "pay_uin")

    @pay_uin.setter
    def pay_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pay_uin", value)

    @property
    @pulumi.getter(name="permissionIds")
    def permission_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Financial management permission IDs.Valid values:- `1`: View bill.- `2`: Check balance.- `3`: Fund transfer.- `4`: Combine bill.- `5`: Issue an invoice.- `6`: Inherit discount.- `7`: Pay on behalf.value 1,2 is required.
        """
        return pulumi.get(self, "permission_ids")

    @permission_ids.setter
    def permission_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "permission_ids", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Organization policy type.- `Financial`: Financial management policy.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[pulumi.Input[int]]:
        """
        Create member record ID.When create failed and needs to be recreated, is required.
        """
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "record_id", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Notes.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Member update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class OrgMember(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_id: Optional[pulumi.Input[int]] = None,
                 pay_uin: Optional[pulumi.Input[str]] = None,
                 permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 record_id: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization org_member

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_member = tencentcloud.organization.OrgMember("orgMember",
            node_id=2003721,
            permission_ids=[
                1,
                2,
                3,
                4,
            ],
            policy_type="Financial",
            remark="for terraform test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_member can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgMember:OrgMember org_member orgMember_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Member name.
        :param pulumi.Input[int] node_id: Organization node ID.
        :param pulumi.Input[str] pay_uin: The uin which is payment account on behalf.When `PermissionIds` contains 7, is required.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] permission_ids: Financial management permission IDs.Valid values:- `1`: View bill.- `2`: Check balance.- `3`: Fund transfer.- `4`: Combine bill.- `5`: Issue an invoice.- `6`: Inherit discount.- `7`: Pay on behalf.value 1,2 is required.
        :param pulumi.Input[str] policy_type: Organization policy type.- `Financial`: Financial management policy.
        :param pulumi.Input[int] record_id: Create member record ID.When create failed and needs to be recreated, is required.
        :param pulumi.Input[str] remark: Notes.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgMemberArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization org_member

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_member = tencentcloud.organization.OrgMember("orgMember",
            node_id=2003721,
            permission_ids=[
                1,
                2,
                3,
                4,
            ],
            policy_type="Financial",
            remark="for terraform test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_member can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgMember:OrgMember org_member orgMember_id
        ```

        :param str resource_name: The name of the resource.
        :param OrgMemberArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgMemberArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_id: Optional[pulumi.Input[int]] = None,
                 pay_uin: Optional[pulumi.Input[str]] = None,
                 permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 record_id: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgMemberArgs.__new__(OrgMemberArgs)

            __props__.__dict__["name"] = name
            if node_id is None and not opts.urn:
                raise TypeError("Missing required property 'node_id'")
            __props__.__dict__["node_id"] = node_id
            __props__.__dict__["pay_uin"] = pay_uin
            if permission_ids is None and not opts.urn:
                raise TypeError("Missing required property 'permission_ids'")
            __props__.__dict__["permission_ids"] = permission_ids
            if policy_type is None and not opts.urn:
                raise TypeError("Missing required property 'policy_type'")
            __props__.__dict__["policy_type"] = policy_type
            __props__.__dict__["record_id"] = record_id
            __props__.__dict__["remark"] = remark
            __props__.__dict__["tags"] = tags
            __props__.__dict__["create_time"] = None
            __props__.__dict__["is_allow_quit"] = None
            __props__.__dict__["member_type"] = None
            __props__.__dict__["node_name"] = None
            __props__.__dict__["org_permissions"] = None
            __props__.__dict__["org_policy_name"] = None
            __props__.__dict__["pay_name"] = None
            __props__.__dict__["update_time"] = None
        super(OrgMember, __self__).__init__(
            'tencentcloud:Organization/orgMember:OrgMember',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            is_allow_quit: Optional[pulumi.Input[str]] = None,
            member_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_id: Optional[pulumi.Input[int]] = None,
            node_name: Optional[pulumi.Input[str]] = None,
            org_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgMemberOrgPermissionArgs']]]]] = None,
            org_policy_name: Optional[pulumi.Input[str]] = None,
            pay_name: Optional[pulumi.Input[str]] = None,
            pay_uin: Optional[pulumi.Input[str]] = None,
            permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            policy_type: Optional[pulumi.Input[str]] = None,
            record_id: Optional[pulumi.Input[int]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'OrgMember':
        """
        Get an existing OrgMember resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: Member creation time.
        :param pulumi.Input[str] is_allow_quit: Whether to allow member to leave the organization.Valid values:- `Allow`.- `Denied`.
        :param pulumi.Input[str] member_type: Member Type.Valid values:- `Invite`: The member is invited.- `Create`: The member is created.
        :param pulumi.Input[str] name: Member name.
        :param pulumi.Input[int] node_id: Organization node ID.
        :param pulumi.Input[str] node_name: Organization node name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgMemberOrgPermissionArgs']]]] org_permissions: Financial management permissions.
        :param pulumi.Input[str] org_policy_name: Organization policy name.
        :param pulumi.Input[str] pay_name: The member name which is payment account on behalf.
        :param pulumi.Input[str] pay_uin: The uin which is payment account on behalf.When `PermissionIds` contains 7, is required.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] permission_ids: Financial management permission IDs.Valid values:- `1`: View bill.- `2`: Check balance.- `3`: Fund transfer.- `4`: Combine bill.- `5`: Issue an invoice.- `6`: Inherit discount.- `7`: Pay on behalf.value 1,2 is required.
        :param pulumi.Input[str] policy_type: Organization policy type.- `Financial`: Financial management policy.
        :param pulumi.Input[int] record_id: Create member record ID.When create failed and needs to be recreated, is required.
        :param pulumi.Input[str] remark: Notes.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] update_time: Member update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgMemberState.__new__(_OrgMemberState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["is_allow_quit"] = is_allow_quit
        __props__.__dict__["member_type"] = member_type
        __props__.__dict__["name"] = name
        __props__.__dict__["node_id"] = node_id
        __props__.__dict__["node_name"] = node_name
        __props__.__dict__["org_permissions"] = org_permissions
        __props__.__dict__["org_policy_name"] = org_policy_name
        __props__.__dict__["pay_name"] = pay_name
        __props__.__dict__["pay_uin"] = pay_uin
        __props__.__dict__["permission_ids"] = permission_ids
        __props__.__dict__["policy_type"] = policy_type
        __props__.__dict__["record_id"] = record_id
        __props__.__dict__["remark"] = remark
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_time"] = update_time
        return OrgMember(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Member creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="isAllowQuit")
    def is_allow_quit(self) -> pulumi.Output[str]:
        """
        Whether to allow member to leave the organization.Valid values:- `Allow`.- `Denied`.
        """
        return pulumi.get(self, "is_allow_quit")

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> pulumi.Output[str]:
        """
        Member Type.Valid values:- `Invite`: The member is invited.- `Create`: The member is created.
        """
        return pulumi.get(self, "member_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Member name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> pulumi.Output[int]:
        """
        Organization node ID.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> pulumi.Output[str]:
        """
        Organization node name.
        """
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter(name="orgPermissions")
    def org_permissions(self) -> pulumi.Output[Sequence['outputs.OrgMemberOrgPermission']]:
        """
        Financial management permissions.
        """
        return pulumi.get(self, "org_permissions")

    @property
    @pulumi.getter(name="orgPolicyName")
    def org_policy_name(self) -> pulumi.Output[str]:
        """
        Organization policy name.
        """
        return pulumi.get(self, "org_policy_name")

    @property
    @pulumi.getter(name="payName")
    def pay_name(self) -> pulumi.Output[str]:
        """
        The member name which is payment account on behalf.
        """
        return pulumi.get(self, "pay_name")

    @property
    @pulumi.getter(name="payUin")
    def pay_uin(self) -> pulumi.Output[Optional[str]]:
        """
        The uin which is payment account on behalf.When `PermissionIds` contains 7, is required.
        """
        return pulumi.get(self, "pay_uin")

    @property
    @pulumi.getter(name="permissionIds")
    def permission_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        Financial management permission IDs.Valid values:- `1`: View bill.- `2`: Check balance.- `3`: Fund transfer.- `4`: Combine bill.- `5`: Issue an invoice.- `6`: Inherit discount.- `7`: Pay on behalf.value 1,2 is required.
        """
        return pulumi.get(self, "permission_ids")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Output[str]:
        """
        Organization policy type.- `Financial`: Financial management policy.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> pulumi.Output[Optional[int]]:
        """
        Create member record ID.When create failed and needs to be recreated, is required.
        """
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        Notes.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Member update time.
        """
        return pulumi.get(self, "update_time")

