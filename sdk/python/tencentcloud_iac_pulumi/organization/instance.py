# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 root_node_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] root_node_name: Root node name.
        """
        if root_node_name is not None:
            pulumi.set(__self__, "root_node_name", root_node_name)

    @property
    @pulumi.getter(name="rootNodeName")
    def root_node_name(self) -> Optional[pulumi.Input[str]]:
        """
        Root node name.
        """
        return pulumi.get(self, "root_node_name")

    @root_node_name.setter
    def root_node_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_node_name", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 host_uin: Optional[pulumi.Input[int]] = None,
                 is_allow_quit: Optional[pulumi.Input[str]] = None,
                 is_assign_manager: Optional[pulumi.Input[bool]] = None,
                 is_auth_manager: Optional[pulumi.Input[bool]] = None,
                 is_manager: Optional[pulumi.Input[bool]] = None,
                 join_time: Optional[pulumi.Input[str]] = None,
                 nick_name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[int]] = None,
                 org_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceOrgPermissionArgs']]]] = None,
                 org_policy_name: Optional[pulumi.Input[str]] = None,
                 org_policy_type: Optional[pulumi.Input[str]] = None,
                 org_type: Optional[pulumi.Input[int]] = None,
                 pay_name: Optional[pulumi.Input[str]] = None,
                 pay_uin: Optional[pulumi.Input[str]] = None,
                 root_node_id: Optional[pulumi.Input[int]] = None,
                 root_node_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] create_time: Organize the creation time.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[int] host_uin: Creator Uin.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] is_allow_quit: Whether the members are allowed to withdraw.Allow: Allow, not allowed: DENIEDNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[bool] is_assign_manager: Whether a trusted service administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[bool] is_auth_manager: Whether the real -name subject administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[bool] is_manager: Whether to organize an administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] join_time: Members join time.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] nick_name: Creator nickname.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[int] org_id: Enterprise organization ID.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceOrgPermissionArgs']]] org_permissions: List of membership authority of members.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] org_policy_name: Strategic name.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] org_policy_type: Strategy type.Financial Management: FinancialNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[int] org_type: Enterprise organization type.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] pay_name: The name of the payment.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] pay_uin: UIN on behalf of the payer.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[int] root_node_id: Organize the root node ID.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] root_node_name: Root node name.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if host_uin is not None:
            pulumi.set(__self__, "host_uin", host_uin)
        if is_allow_quit is not None:
            pulumi.set(__self__, "is_allow_quit", is_allow_quit)
        if is_assign_manager is not None:
            pulumi.set(__self__, "is_assign_manager", is_assign_manager)
        if is_auth_manager is not None:
            pulumi.set(__self__, "is_auth_manager", is_auth_manager)
        if is_manager is not None:
            pulumi.set(__self__, "is_manager", is_manager)
        if join_time is not None:
            pulumi.set(__self__, "join_time", join_time)
        if nick_name is not None:
            pulumi.set(__self__, "nick_name", nick_name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if org_permissions is not None:
            pulumi.set(__self__, "org_permissions", org_permissions)
        if org_policy_name is not None:
            pulumi.set(__self__, "org_policy_name", org_policy_name)
        if org_policy_type is not None:
            pulumi.set(__self__, "org_policy_type", org_policy_type)
        if org_type is not None:
            pulumi.set(__self__, "org_type", org_type)
        if pay_name is not None:
            pulumi.set(__self__, "pay_name", pay_name)
        if pay_uin is not None:
            pulumi.set(__self__, "pay_uin", pay_uin)
        if root_node_id is not None:
            pulumi.set(__self__, "root_node_id", root_node_id)
        if root_node_name is not None:
            pulumi.set(__self__, "root_node_name", root_node_name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Organize the creation time.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="hostUin")
    def host_uin(self) -> Optional[pulumi.Input[int]]:
        """
        Creator Uin.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "host_uin")

    @host_uin.setter
    def host_uin(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_uin", value)

    @property
    @pulumi.getter(name="isAllowQuit")
    def is_allow_quit(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the members are allowed to withdraw.Allow: Allow, not allowed: DENIEDNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "is_allow_quit")

    @is_allow_quit.setter
    def is_allow_quit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_allow_quit", value)

    @property
    @pulumi.getter(name="isAssignManager")
    def is_assign_manager(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a trusted service administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "is_assign_manager")

    @is_assign_manager.setter
    def is_assign_manager(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_assign_manager", value)

    @property
    @pulumi.getter(name="isAuthManager")
    def is_auth_manager(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the real -name subject administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "is_auth_manager")

    @is_auth_manager.setter
    def is_auth_manager(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_auth_manager", value)

    @property
    @pulumi.getter(name="isManager")
    def is_manager(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to organize an administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "is_manager")

    @is_manager.setter
    def is_manager(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_manager", value)

    @property
    @pulumi.getter(name="joinTime")
    def join_time(self) -> Optional[pulumi.Input[str]]:
        """
        Members join time.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "join_time")

    @join_time.setter
    def join_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_time", value)

    @property
    @pulumi.getter(name="nickName")
    def nick_name(self) -> Optional[pulumi.Input[str]]:
        """
        Creator nickname.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "nick_name")

    @nick_name.setter
    def nick_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nick_name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[int]]:
        """
        Enterprise organization ID.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="orgPermissions")
    def org_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceOrgPermissionArgs']]]]:
        """
        List of membership authority of members.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "org_permissions")

    @org_permissions.setter
    def org_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceOrgPermissionArgs']]]]):
        pulumi.set(self, "org_permissions", value)

    @property
    @pulumi.getter(name="orgPolicyName")
    def org_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Strategic name.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "org_policy_name")

    @org_policy_name.setter
    def org_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_policy_name", value)

    @property
    @pulumi.getter(name="orgPolicyType")
    def org_policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Strategy type.Financial Management: FinancialNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "org_policy_type")

    @org_policy_type.setter
    def org_policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_policy_type", value)

    @property
    @pulumi.getter(name="orgType")
    def org_type(self) -> Optional[pulumi.Input[int]]:
        """
        Enterprise organization type.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "org_type")

    @org_type.setter
    def org_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "org_type", value)

    @property
    @pulumi.getter(name="payName")
    def pay_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the payment.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "pay_name")

    @pay_name.setter
    def pay_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pay_name", value)

    @property
    @pulumi.getter(name="payUin")
    def pay_uin(self) -> Optional[pulumi.Input[str]]:
        """
        UIN on behalf of the payer.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "pay_uin")

    @pay_uin.setter
    def pay_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pay_uin", value)

    @property
    @pulumi.getter(name="rootNodeId")
    def root_node_id(self) -> Optional[pulumi.Input[int]]:
        """
        Organize the root node ID.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "root_node_id")

    @root_node_id.setter
    def root_node_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_node_id", value)

    @property
    @pulumi.getter(name="rootNodeName")
    def root_node_name(self) -> Optional[pulumi.Input[str]]:
        """
        Root node name.
        """
        return pulumi.get(self, "root_node_name")

    @root_node_name.setter
    def root_node_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_node_name", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 root_node_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization organization

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        organization = tencentcloud.organization.Instance("organization")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization organization can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/instance:Instance organization organization_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] root_node_name: Root node name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InstanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization organization

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        organization = tencentcloud.organization.Instance("organization")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization organization can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/instance:Instance organization organization_id
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 root_node_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["root_node_name"] = root_node_name
            __props__.__dict__["create_time"] = None
            __props__.__dict__["host_uin"] = None
            __props__.__dict__["is_allow_quit"] = None
            __props__.__dict__["is_assign_manager"] = None
            __props__.__dict__["is_auth_manager"] = None
            __props__.__dict__["is_manager"] = None
            __props__.__dict__["join_time"] = None
            __props__.__dict__["nick_name"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["org_permissions"] = None
            __props__.__dict__["org_policy_name"] = None
            __props__.__dict__["org_policy_type"] = None
            __props__.__dict__["org_type"] = None
            __props__.__dict__["pay_name"] = None
            __props__.__dict__["pay_uin"] = None
            __props__.__dict__["root_node_id"] = None
        super(Instance, __self__).__init__(
            'tencentcloud:Organization/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            host_uin: Optional[pulumi.Input[int]] = None,
            is_allow_quit: Optional[pulumi.Input[str]] = None,
            is_assign_manager: Optional[pulumi.Input[bool]] = None,
            is_auth_manager: Optional[pulumi.Input[bool]] = None,
            is_manager: Optional[pulumi.Input[bool]] = None,
            join_time: Optional[pulumi.Input[str]] = None,
            nick_name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[int]] = None,
            org_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceOrgPermissionArgs']]]]] = None,
            org_policy_name: Optional[pulumi.Input[str]] = None,
            org_policy_type: Optional[pulumi.Input[str]] = None,
            org_type: Optional[pulumi.Input[int]] = None,
            pay_name: Optional[pulumi.Input[str]] = None,
            pay_uin: Optional[pulumi.Input[str]] = None,
            root_node_id: Optional[pulumi.Input[int]] = None,
            root_node_name: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: Organize the creation time.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[int] host_uin: Creator Uin.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] is_allow_quit: Whether the members are allowed to withdraw.Allow: Allow, not allowed: DENIEDNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[bool] is_assign_manager: Whether a trusted service administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[bool] is_auth_manager: Whether the real -name subject administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[bool] is_manager: Whether to organize an administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] join_time: Members join time.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] nick_name: Creator nickname.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[int] org_id: Enterprise organization ID.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceOrgPermissionArgs']]]] org_permissions: List of membership authority of members.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] org_policy_name: Strategic name.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] org_policy_type: Strategy type.Financial Management: FinancialNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[int] org_type: Enterprise organization type.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] pay_name: The name of the payment.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] pay_uin: UIN on behalf of the payer.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[int] root_node_id: Organize the root node ID.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[str] root_node_name: Root node name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["host_uin"] = host_uin
        __props__.__dict__["is_allow_quit"] = is_allow_quit
        __props__.__dict__["is_assign_manager"] = is_assign_manager
        __props__.__dict__["is_auth_manager"] = is_auth_manager
        __props__.__dict__["is_manager"] = is_manager
        __props__.__dict__["join_time"] = join_time
        __props__.__dict__["nick_name"] = nick_name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["org_permissions"] = org_permissions
        __props__.__dict__["org_policy_name"] = org_policy_name
        __props__.__dict__["org_policy_type"] = org_policy_type
        __props__.__dict__["org_type"] = org_type
        __props__.__dict__["pay_name"] = pay_name
        __props__.__dict__["pay_uin"] = pay_uin
        __props__.__dict__["root_node_id"] = root_node_id
        __props__.__dict__["root_node_name"] = root_node_name
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Organize the creation time.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="hostUin")
    def host_uin(self) -> pulumi.Output[int]:
        """
        Creator Uin.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "host_uin")

    @property
    @pulumi.getter(name="isAllowQuit")
    def is_allow_quit(self) -> pulumi.Output[str]:
        """
        Whether the members are allowed to withdraw.Allow: Allow, not allowed: DENIEDNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "is_allow_quit")

    @property
    @pulumi.getter(name="isAssignManager")
    def is_assign_manager(self) -> pulumi.Output[bool]:
        """
        Whether a trusted service administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "is_assign_manager")

    @property
    @pulumi.getter(name="isAuthManager")
    def is_auth_manager(self) -> pulumi.Output[bool]:
        """
        Whether the real -name subject administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "is_auth_manager")

    @property
    @pulumi.getter(name="isManager")
    def is_manager(self) -> pulumi.Output[bool]:
        """
        Whether to organize an administrator.Yes: true, no: falseNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "is_manager")

    @property
    @pulumi.getter(name="joinTime")
    def join_time(self) -> pulumi.Output[str]:
        """
        Members join time.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "join_time")

    @property
    @pulumi.getter(name="nickName")
    def nick_name(self) -> pulumi.Output[str]:
        """
        Creator nickname.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "nick_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[int]:
        """
        Enterprise organization ID.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="orgPermissions")
    def org_permissions(self) -> pulumi.Output[Sequence['outputs.InstanceOrgPermission']]:
        """
        List of membership authority of members.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "org_permissions")

    @property
    @pulumi.getter(name="orgPolicyName")
    def org_policy_name(self) -> pulumi.Output[str]:
        """
        Strategic name.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "org_policy_name")

    @property
    @pulumi.getter(name="orgPolicyType")
    def org_policy_type(self) -> pulumi.Output[str]:
        """
        Strategy type.Financial Management: FinancialNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "org_policy_type")

    @property
    @pulumi.getter(name="orgType")
    def org_type(self) -> pulumi.Output[int]:
        """
        Enterprise organization type.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "org_type")

    @property
    @pulumi.getter(name="payName")
    def pay_name(self) -> pulumi.Output[str]:
        """
        The name of the payment.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "pay_name")

    @property
    @pulumi.getter(name="payUin")
    def pay_uin(self) -> pulumi.Output[str]:
        """
        UIN on behalf of the payer.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "pay_uin")

    @property
    @pulumi.getter(name="rootNodeId")
    def root_node_id(self) -> pulumi.Output[int]:
        """
        Organize the root node ID.Note: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "root_node_id")

    @property
    @pulumi.getter(name="rootNodeName")
    def root_node_name(self) -> pulumi.Output[str]:
        """
        Root node name.
        """
        return pulumi.get(self, "root_node_name")

