# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceOrgPermission',
    'OrgIdentityIdentityPolicy',
    'OrgMemberOrgPermission',
    'OrgShareUnitMemberMember',
    'GetMembersItemResult',
    'GetMembersItemOrgIdentityResult',
    'GetMembersItemOrgPermissionResult',
    'GetNodesItemResult',
    'GetNodesItemTagResult',
    'GetNodesTagResult',
    'GetOrgAuthNodeItemResult',
    'GetOrgAuthNodeItemManagerResult',
    'GetOrgFinancialByMemberItemResult',
    'GetOrgFinancialByMonthItemResult',
    'GetOrgFinancialByProductItemResult',
    'GetOrgShareAreaItemResult',
    'GetServicesItemResult',
]

@pulumi.output_type
class InstanceOrgPermission(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int id: Permissions ID.
        :param str name: Permission name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Permissions ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Permission name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class OrgIdentityIdentityPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyDocument":
            suggest = "policy_document"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "policyName":
            suggest = "policy_name"
        elif key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgIdentityIdentityPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgIdentityIdentityPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgIdentityIdentityPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_document: Optional[str] = None,
                 policy_id: Optional[int] = None,
                 policy_name: Optional[str] = None,
                 policy_type: Optional[int] = None):
        """
        :param str policy_document: Customize policy content and follow CAM policy syntax. Valid and required when PolicyType is the 1-custom policy.
        :param int policy_id: CAM default policy ID. Valid and required when PolicyType is the 2-preset policy.
        :param str policy_name: CAM default policy name. Valid and required when PolicyType is the 2-preset policy.
        :param int policy_type: Policy type. Value 1-custom policy 2-preset policy; default value 2.
        """
        if policy_document is not None:
            pulumi.set(__self__, "policy_document", policy_document)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> Optional[str]:
        """
        Customize policy content and follow CAM policy syntax. Valid and required when PolicyType is the 1-custom policy.
        """
        return pulumi.get(self, "policy_document")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[int]:
        """
        CAM default policy ID. Valid and required when PolicyType is the 2-preset policy.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        """
        CAM default policy name. Valid and required when PolicyType is the 2-preset policy.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[int]:
        """
        Policy type. Value 1-custom policy 2-preset policy; default value 2.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class OrgMemberOrgPermission(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int id: Permissions ID.
        :param str name: Member name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Permissions ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Member name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class OrgShareUnitMemberMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shareMemberUin":
            suggest = "share_member_uin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrgShareUnitMemberMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrgShareUnitMemberMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrgShareUnitMemberMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 share_member_uin: int):
        """
        :param int share_member_uin: Member uin.
        """
        pulumi.set(__self__, "share_member_uin", share_member_uin)

    @property
    @pulumi.getter(name="shareMemberUin")
    def share_member_uin(self) -> int:
        """
        Member uin.
        """
        return pulumi.get(self, "share_member_uin")


@pulumi.output_type
class GetMembersItemResult(dict):
    def __init__(__self__, *,
                 bind_status: str,
                 create_time: str,
                 is_allow_quit: str,
                 member_type: str,
                 member_uin: int,
                 name: str,
                 node_id: int,
                 node_name: str,
                 org_identities: Sequence['outputs.GetMembersItemOrgIdentityResult'],
                 org_permissions: Sequence['outputs.GetMembersItemOrgPermissionResult'],
                 org_policy_name: str,
                 org_policy_type: str,
                 pay_name: str,
                 pay_uin: str,
                 permission_status: str,
                 remark: str,
                 update_time: str):
        """
        :param str bind_status: Security information binding status. Valid values: `Unbound`, `Valid`, `Success`, `Failed`.Note: This field may return null, indicating that no valid values can be obtained.
        :param str create_time: Creation timeNote: This field may return null, indicating that no valid values can be obtained.
        :param str is_allow_quit: Whether the member is allowed to leave. Valid values: `Allow`, `Denied`.Note: This field may return null, indicating that no valid values can be obtained.
        :param str member_type: Member type. Valid values: `Invite` (invited); `Create` (created).Note: This field may return null, indicating that no valid values can be obtained.
        :param int member_uin: Member UINNote: This field may return null, indicating that no valid values can be obtained.
        :param str name: Permission name.
        :param int node_id: Node IDNote: This field may return null, indicating that no valid values can be obtained.
        :param str node_name: Node nameNote: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetMembersItemOrgIdentityArgs'] org_identities: Management identityNote: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetMembersItemOrgPermissionArgs'] org_permissions: Relationship policy permissionNote: This field may return null, indicating that no valid values can be obtained.
        :param str org_policy_name: Relationship policy nameNote: This field may return null, indicating that no valid values can be obtained.
        :param str org_policy_type: Relationship policy typeNote: This field may return null, indicating that no valid values can be obtained.
        :param str pay_name: Payer nameNote: This field may return null, indicating that no valid values can be obtained.
        :param str pay_uin: Payer UINNote: This field may return null, indicating that no valid values can be obtained.
        :param str permission_status: Member permission status. Valid values: `Confirmed`, `UnConfirmed`.Note: This field may return null, indicating that no valid values can be obtained.
        :param str remark: RemarksNote: This field may return null, indicating that no valid values can be obtained.
        :param str update_time: Update timeNote: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "bind_status", bind_status)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "is_allow_quit", is_allow_quit)
        pulumi.set(__self__, "member_type", member_type)
        pulumi.set(__self__, "member_uin", member_uin)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "org_identities", org_identities)
        pulumi.set(__self__, "org_permissions", org_permissions)
        pulumi.set(__self__, "org_policy_name", org_policy_name)
        pulumi.set(__self__, "org_policy_type", org_policy_type)
        pulumi.set(__self__, "pay_name", pay_name)
        pulumi.set(__self__, "pay_uin", pay_uin)
        pulumi.set(__self__, "permission_status", permission_status)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="bindStatus")
    def bind_status(self) -> str:
        """
        Security information binding status. Valid values: `Unbound`, `Valid`, `Success`, `Failed`.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "bind_status")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation timeNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="isAllowQuit")
    def is_allow_quit(self) -> str:
        """
        Whether the member is allowed to leave. Valid values: `Allow`, `Denied`.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_allow_quit")

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> str:
        """
        Member type. Valid values: `Invite` (invited); `Create` (created).Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "member_type")

    @property
    @pulumi.getter(name="memberUin")
    def member_uin(self) -> int:
        """
        Member UINNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "member_uin")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Permission name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> int:
        """
        Node IDNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        """
        Node nameNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter(name="orgIdentities")
    def org_identities(self) -> Sequence['outputs.GetMembersItemOrgIdentityResult']:
        """
        Management identityNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "org_identities")

    @property
    @pulumi.getter(name="orgPermissions")
    def org_permissions(self) -> Sequence['outputs.GetMembersItemOrgPermissionResult']:
        """
        Relationship policy permissionNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "org_permissions")

    @property
    @pulumi.getter(name="orgPolicyName")
    def org_policy_name(self) -> str:
        """
        Relationship policy nameNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "org_policy_name")

    @property
    @pulumi.getter(name="orgPolicyType")
    def org_policy_type(self) -> str:
        """
        Relationship policy typeNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "org_policy_type")

    @property
    @pulumi.getter(name="payName")
    def pay_name(self) -> str:
        """
        Payer nameNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "pay_name")

    @property
    @pulumi.getter(name="payUin")
    def pay_uin(self) -> str:
        """
        Payer UINNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "pay_uin")

    @property
    @pulumi.getter(name="permissionStatus")
    def permission_status(self) -> str:
        """
        Member permission status. Valid values: `Confirmed`, `UnConfirmed`.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "permission_status")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        RemarksNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update timeNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetMembersItemOrgIdentityResult(dict):
    def __init__(__self__, *,
                 identity_alias_name: str,
                 identity_id: int):
        """
        :param str identity_alias_name: Identity name.Note: This field may return null, indicating that no valid values can be obtained.
        :param int identity_id: Identity ID.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "identity_alias_name", identity_alias_name)
        pulumi.set(__self__, "identity_id", identity_id)

    @property
    @pulumi.getter(name="identityAliasName")
    def identity_alias_name(self) -> str:
        """
        Identity name.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "identity_alias_name")

    @property
    @pulumi.getter(name="identityId")
    def identity_id(self) -> int:
        """
        Identity ID.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "identity_id")


@pulumi.output_type
class GetMembersItemOrgPermissionResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: Permission ID.
        :param str name: Permission name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Permission ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Permission name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNodesItemResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 name: str,
                 node_id: int,
                 parent_node_id: int,
                 remark: str,
                 tags: Sequence['outputs.GetNodesItemTagResult'],
                 update_time: str):
        """
        :param str create_time: Creation time.
        :param str name: Name.
        :param int node_id: Organization node ID.
        :param int parent_node_id: Parent node ID.
        :param str remark: Remarks.
        :param Sequence['GetNodesItemTagArgs'] tags: Department tag search list, with a maximum of 10.
        :param str update_time: Update time.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "parent_node_id", parent_node_id)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> int:
        """
        Organization node ID.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="parentNodeId")
    def parent_node_id(self) -> int:
        """
        Parent node ID.
        """
        return pulumi.get(self, "parent_node_id")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNodesItemTagResult']:
        """
        Department tag search list, with a maximum of 10.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetNodesItemTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetNodesTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetOrgAuthNodeItemResult(dict):
    def __init__(__self__, *,
                 auth_name: str,
                 managers: Sequence['outputs.GetOrgAuthNodeItemManagerResult'],
                 relation_id: int):
        """
        :param str auth_name: Verified company name.
        :param Sequence['GetOrgAuthNodeItemManagerArgs'] managers: Organization auth manager.
        :param int relation_id: Relationship Id.
        """
        pulumi.set(__self__, "auth_name", auth_name)
        pulumi.set(__self__, "managers", managers)
        pulumi.set(__self__, "relation_id", relation_id)

    @property
    @pulumi.getter(name="authName")
    def auth_name(self) -> str:
        """
        Verified company name.
        """
        return pulumi.get(self, "auth_name")

    @property
    @pulumi.getter
    def managers(self) -> Sequence['outputs.GetOrgAuthNodeItemManagerResult']:
        """
        Organization auth manager.
        """
        return pulumi.get(self, "managers")

    @property
    @pulumi.getter(name="relationId")
    def relation_id(self) -> int:
        """
        Relationship Id.
        """
        return pulumi.get(self, "relation_id")


@pulumi.output_type
class GetOrgAuthNodeItemManagerResult(dict):
    def __init__(__self__, *,
                 member_name: str,
                 member_uin: int):
        """
        :param str member_name: Member name.
        :param int member_uin: Member uin.
        """
        pulumi.set(__self__, "member_name", member_name)
        pulumi.set(__self__, "member_uin", member_uin)

    @property
    @pulumi.getter(name="memberName")
    def member_name(self) -> str:
        """
        Member name.
        """
        return pulumi.get(self, "member_name")

    @property
    @pulumi.getter(name="memberUin")
    def member_uin(self) -> int:
        """
        Member uin.
        """
        return pulumi.get(self, "member_uin")


@pulumi.output_type
class GetOrgFinancialByMemberItemResult(dict):
    def __init__(__self__, *,
                 member_name: str,
                 member_uin: int,
                 ratio: str,
                 total_cost: float):
        """
        :param str member_name: Member name.
        :param int member_uin: Member uin.
        :param str ratio: The percentage of the organization total cost that is accounted for by the member.
        :param float total_cost: Total cost of the member.
        """
        pulumi.set(__self__, "member_name", member_name)
        pulumi.set(__self__, "member_uin", member_uin)
        pulumi.set(__self__, "ratio", ratio)
        pulumi.set(__self__, "total_cost", total_cost)

    @property
    @pulumi.getter(name="memberName")
    def member_name(self) -> str:
        """
        Member name.
        """
        return pulumi.get(self, "member_name")

    @property
    @pulumi.getter(name="memberUin")
    def member_uin(self) -> int:
        """
        Member uin.
        """
        return pulumi.get(self, "member_uin")

    @property
    @pulumi.getter
    def ratio(self) -> str:
        """
        The percentage of the organization total cost that is accounted for by the member.
        """
        return pulumi.get(self, "ratio")

    @property
    @pulumi.getter(name="totalCost")
    def total_cost(self) -> float:
        """
        Total cost of the member.
        """
        return pulumi.get(self, "total_cost")


@pulumi.output_type
class GetOrgFinancialByMonthItemResult(dict):
    def __init__(__self__, *,
                 growth_rate: str,
                 id: int,
                 month: str,
                 total_cost: float):
        """
        :param str growth_rate: Growth rate compared to last month.
        :param int id: Record ID.
        :param str month: Month.
        :param float total_cost: Total cost of the month.
        """
        pulumi.set(__self__, "growth_rate", growth_rate)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "month", month)
        pulumi.set(__self__, "total_cost", total_cost)

    @property
    @pulumi.getter(name="growthRate")
    def growth_rate(self) -> str:
        """
        Growth rate compared to last month.
        """
        return pulumi.get(self, "growth_rate")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Record ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def month(self) -> str:
        """
        Month.
        """
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="totalCost")
    def total_cost(self) -> float:
        """
        Total cost of the month.
        """
        return pulumi.get(self, "total_cost")


@pulumi.output_type
class GetOrgFinancialByProductItemResult(dict):
    def __init__(__self__, *,
                 product_code: str,
                 product_name: str,
                 ratio: str,
                 total_cost: float):
        """
        :param str product_code: Product code.
        :param str product_name: Product name.
        :param str ratio: The percentage of the organization total cost that is accounted for by the product.
        :param float total_cost: Total cost of the product.
        """
        pulumi.set(__self__, "product_code", product_code)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "ratio", ratio)
        pulumi.set(__self__, "total_cost", total_cost)

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> str:
        """
        Product code.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        """
        Product name.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter
    def ratio(self) -> str:
        """
        The percentage of the organization total cost that is accounted for by the product.
        """
        return pulumi.get(self, "ratio")

    @property
    @pulumi.getter(name="totalCost")
    def total_cost(self) -> float:
        """
        Total cost of the product.
        """
        return pulumi.get(self, "total_cost")


@pulumi.output_type
class GetOrgShareAreaItemResult(dict):
    def __init__(__self__, *,
                 area: str,
                 area_id: int,
                 name: str):
        """
        :param str area: Region identifier.
        :param int area_id: Region ID.
        :param str name: Region name.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "area_id", area_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def area(self) -> str:
        """
        Region identifier.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> int:
        """
        Region ID.
        """
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Region name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServicesItemResult(dict):
    def __init__(__self__, *,
                 can_assign_count: int,
                 console_url: str,
                 description: str,
                 document: str,
                 grant_status: str,
                 is_assign: int,
                 is_set_management_scope: int,
                 is_usage_status: int,
                 member_num: str,
                 product: str,
                 product_name: str,
                 service_grant: int,
                 service_id: int):
        """
        :param int can_assign_count: Limit for the number of delegated admins. Note: This field may return null, indicating that no valid values can be obtained.
        :param str console_url: Console path of the organization service product. Note: This field may return null, indicating that no valid values can be obtained.
        :param str description: Organization service description. Note: This field may return null, indicating that no valid values can be obtained.
        :param str document: Help documentation. Note: This field may return null, indicating that no valid values can be obtained.
        :param str grant_status: Enabling status of organization service authorization. This field is valid when ServiceGrant is 1. Valid values: Enabled, Disabled. Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_assign: Whether to support delegation. Valid values: 1 (yes), 2 (no). Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_set_management_scope: Whether to support setting the delegated management scope. Valid values: 1 (yes), 2 (no).
               Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_usage_status: Whether to access the usage status. Valid values: 1 (yes), 2 (no). Note: This field may return null, indicating that no valid values can be obtained.
        :param str member_num: Number of the current delegated admins. Note: This field may return null, indicating that no valid values can be obtained.
        :param str product: Organization service product identifier. Note: This field may return null, indicating that no valid values can be obtained.
        :param str product_name: Organization service product name. Note: This field may return null, indicating that no valid values can be obtained.
        :param int service_grant: Whether to support organization service authorization. Valid values: 1 (yes), 2 (no). Note: This field may return null, indicating that no valid values can be obtained.
        :param int service_id: Organization service ID. Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "can_assign_count", can_assign_count)
        pulumi.set(__self__, "console_url", console_url)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "document", document)
        pulumi.set(__self__, "grant_status", grant_status)
        pulumi.set(__self__, "is_assign", is_assign)
        pulumi.set(__self__, "is_set_management_scope", is_set_management_scope)
        pulumi.set(__self__, "is_usage_status", is_usage_status)
        pulumi.set(__self__, "member_num", member_num)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "service_grant", service_grant)
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="canAssignCount")
    def can_assign_count(self) -> int:
        """
        Limit for the number of delegated admins. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "can_assign_count")

    @property
    @pulumi.getter(name="consoleUrl")
    def console_url(self) -> str:
        """
        Console path of the organization service product. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "console_url")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Organization service description. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def document(self) -> str:
        """
        Help documentation. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "document")

    @property
    @pulumi.getter(name="grantStatus")
    def grant_status(self) -> str:
        """
        Enabling status of organization service authorization. This field is valid when ServiceGrant is 1. Valid values: Enabled, Disabled. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "grant_status")

    @property
    @pulumi.getter(name="isAssign")
    def is_assign(self) -> int:
        """
        Whether to support delegation. Valid values: 1 (yes), 2 (no). Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_assign")

    @property
    @pulumi.getter(name="isSetManagementScope")
    def is_set_management_scope(self) -> int:
        """
        Whether to support setting the delegated management scope. Valid values: 1 (yes), 2 (no).
        Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_set_management_scope")

    @property
    @pulumi.getter(name="isUsageStatus")
    def is_usage_status(self) -> int:
        """
        Whether to access the usage status. Valid values: 1 (yes), 2 (no). Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_usage_status")

    @property
    @pulumi.getter(name="memberNum")
    def member_num(self) -> str:
        """
        Number of the current delegated admins. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "member_num")

    @property
    @pulumi.getter
    def product(self) -> str:
        """
        Organization service product identifier. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        """
        Organization service product name. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="serviceGrant")
    def service_grant(self) -> int:
        """
        Whether to support organization service authorization. Valid values: 1 (yes), 2 (no). Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "service_grant")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> int:
        """
        Organization service ID. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "service_id")


