# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrgShareUnitMemberArgs', 'OrgShareUnitMember']

@pulumi.input_type
class OrgShareUnitMemberArgs:
    def __init__(__self__, *,
                 area: pulumi.Input[str],
                 members: pulumi.Input[Sequence[pulumi.Input['OrgShareUnitMemberMemberArgs']]],
                 unit_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a OrgShareUnitMember resource.
        :param pulumi.Input[str] area: Shared unit region.
        :param pulumi.Input[Sequence[pulumi.Input['OrgShareUnitMemberMemberArgs']]] members: Shared member list. Up to 10 items.
        :param pulumi.Input[str] unit_id: Shared unit ID.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "unit_id", unit_id)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Input[str]:
        """
        Shared unit region.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: pulumi.Input[str]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input['OrgShareUnitMemberMemberArgs']]]:
        """
        Shared member list. Up to 10 items.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input['OrgShareUnitMemberMemberArgs']]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="unitId")
    def unit_id(self) -> pulumi.Input[str]:
        """
        Shared unit ID.
        """
        return pulumi.get(self, "unit_id")

    @unit_id.setter
    def unit_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit_id", value)


@pulumi.input_type
class _OrgShareUnitMemberState:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['OrgShareUnitMemberMemberArgs']]]] = None,
                 unit_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgShareUnitMember resources.
        :param pulumi.Input[str] area: Shared unit region.
        :param pulumi.Input[Sequence[pulumi.Input['OrgShareUnitMemberMemberArgs']]] members: Shared member list. Up to 10 items.
        :param pulumi.Input[str] unit_id: Shared unit ID.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if unit_id is not None:
            pulumi.set(__self__, "unit_id", unit_id)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Shared unit region.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgShareUnitMemberMemberArgs']]]]:
        """
        Shared member list. Up to 10 items.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgShareUnitMemberMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="unitId")
    def unit_id(self) -> Optional[pulumi.Input[str]]:
        """
        Shared unit ID.
        """
        return pulumi.get(self, "unit_id")

    @unit_id.setter
    def unit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_id", value)


class OrgShareUnitMember(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgShareUnitMemberMemberArgs']]]]] = None,
                 unit_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization org_share_unit_member

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_share_unit = tencentcloud.organization.OrgShareUnit("orgShareUnit",
            area="ap-guangzhou",
            description="iac-test")
        org_share_unit_member = tencentcloud.organization.OrgShareUnitMember("orgShareUnitMember",
            unit_id=org_share_unit.unit_id,
            area=org_share_unit.area,
            members=[tencentcloud.organization.OrgShareUnitMemberMemberArgs(
                share_member_uin=100035309479,
            )])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Shared unit region.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgShareUnitMemberMemberArgs']]]] members: Shared member list. Up to 10 items.
        :param pulumi.Input[str] unit_id: Shared unit ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgShareUnitMemberArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization org_share_unit_member

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_share_unit = tencentcloud.organization.OrgShareUnit("orgShareUnit",
            area="ap-guangzhou",
            description="iac-test")
        org_share_unit_member = tencentcloud.organization.OrgShareUnitMember("orgShareUnitMember",
            unit_id=org_share_unit.unit_id,
            area=org_share_unit.area,
            members=[tencentcloud.organization.OrgShareUnitMemberMemberArgs(
                share_member_uin=100035309479,
            )])
        ```

        :param str resource_name: The name of the resource.
        :param OrgShareUnitMemberArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgShareUnitMemberArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgShareUnitMemberMemberArgs']]]]] = None,
                 unit_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgShareUnitMemberArgs.__new__(OrgShareUnitMemberArgs)

            if area is None and not opts.urn:
                raise TypeError("Missing required property 'area'")
            __props__.__dict__["area"] = area
            if members is None and not opts.urn:
                raise TypeError("Missing required property 'members'")
            __props__.__dict__["members"] = members
            if unit_id is None and not opts.urn:
                raise TypeError("Missing required property 'unit_id'")
            __props__.__dict__["unit_id"] = unit_id
        super(OrgShareUnitMember, __self__).__init__(
            'tencentcloud:Organization/orgShareUnitMember:OrgShareUnitMember',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgShareUnitMemberMemberArgs']]]]] = None,
            unit_id: Optional[pulumi.Input[str]] = None) -> 'OrgShareUnitMember':
        """
        Get an existing OrgShareUnitMember resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Shared unit region.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgShareUnitMemberMemberArgs']]]] members: Shared member list. Up to 10 items.
        :param pulumi.Input[str] unit_id: Shared unit ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgShareUnitMemberState.__new__(_OrgShareUnitMemberState)

        __props__.__dict__["area"] = area
        __props__.__dict__["members"] = members
        __props__.__dict__["unit_id"] = unit_id
        return OrgShareUnitMember(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Output[str]:
        """
        Shared unit region.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence['outputs.OrgShareUnitMemberMember']]:
        """
        Shared member list. Up to 10 items.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="unitId")
    def unit_id(self) -> pulumi.Output[str]:
        """
        Shared unit ID.
        """
        return pulumi.get(self, "unit_id")

