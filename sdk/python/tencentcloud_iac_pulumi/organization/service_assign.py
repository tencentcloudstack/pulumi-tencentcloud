# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ServiceAssignArgs', 'ServiceAssign']

@pulumi.input_type
class ServiceAssignArgs:
    def __init__(__self__, *,
                 member_uins: pulumi.Input[Sequence[pulumi.Input[int]]],
                 service_id: pulumi.Input[int],
                 management_scope: Optional[pulumi.Input[int]] = None,
                 management_scope_node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 management_scope_uins: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a ServiceAssign resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_uins: Uin list of the delegated admins, Including up to 20 items.
        :param pulumi.Input[int] service_id: Organization service ID.
        :param pulumi.Input[int] management_scope: Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] management_scope_node_ids: ID list of the managed departments. This parameter is valid when `management_scope` is `2`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] management_scope_uins: Uin list of the managed members. This parameter is valid when `management_scope` is `2`.
        """
        pulumi.set(__self__, "member_uins", member_uins)
        pulumi.set(__self__, "service_id", service_id)
        if management_scope is not None:
            pulumi.set(__self__, "management_scope", management_scope)
        if management_scope_node_ids is not None:
            pulumi.set(__self__, "management_scope_node_ids", management_scope_node_ids)
        if management_scope_uins is not None:
            pulumi.set(__self__, "management_scope_uins", management_scope_uins)

    @property
    @pulumi.getter(name="memberUins")
    def member_uins(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Uin list of the delegated admins, Including up to 20 items.
        """
        return pulumi.get(self, "member_uins")

    @member_uins.setter
    def member_uins(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "member_uins", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[int]:
        """
        Organization service ID.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="managementScope")
    def management_scope(self) -> Optional[pulumi.Input[int]]:
        """
        Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
        """
        return pulumi.get(self, "management_scope")

    @management_scope.setter
    def management_scope(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "management_scope", value)

    @property
    @pulumi.getter(name="managementScopeNodeIds")
    def management_scope_node_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        ID list of the managed departments. This parameter is valid when `management_scope` is `2`.
        """
        return pulumi.get(self, "management_scope_node_ids")

    @management_scope_node_ids.setter
    def management_scope_node_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "management_scope_node_ids", value)

    @property
    @pulumi.getter(name="managementScopeUins")
    def management_scope_uins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Uin list of the managed members. This parameter is valid when `management_scope` is `2`.
        """
        return pulumi.get(self, "management_scope_uins")

    @management_scope_uins.setter
    def management_scope_uins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "management_scope_uins", value)


@pulumi.input_type
class _ServiceAssignState:
    def __init__(__self__, *,
                 management_scope: Optional[pulumi.Input[int]] = None,
                 management_scope_node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 management_scope_uins: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 member_uins: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 service_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ServiceAssign resources.
        :param pulumi.Input[int] management_scope: Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] management_scope_node_ids: ID list of the managed departments. This parameter is valid when `management_scope` is `2`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] management_scope_uins: Uin list of the managed members. This parameter is valid when `management_scope` is `2`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_uins: Uin list of the delegated admins, Including up to 20 items.
        :param pulumi.Input[int] service_id: Organization service ID.
        """
        if management_scope is not None:
            pulumi.set(__self__, "management_scope", management_scope)
        if management_scope_node_ids is not None:
            pulumi.set(__self__, "management_scope_node_ids", management_scope_node_ids)
        if management_scope_uins is not None:
            pulumi.set(__self__, "management_scope_uins", management_scope_uins)
        if member_uins is not None:
            pulumi.set(__self__, "member_uins", member_uins)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="managementScope")
    def management_scope(self) -> Optional[pulumi.Input[int]]:
        """
        Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
        """
        return pulumi.get(self, "management_scope")

    @management_scope.setter
    def management_scope(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "management_scope", value)

    @property
    @pulumi.getter(name="managementScopeNodeIds")
    def management_scope_node_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        ID list of the managed departments. This parameter is valid when `management_scope` is `2`.
        """
        return pulumi.get(self, "management_scope_node_ids")

    @management_scope_node_ids.setter
    def management_scope_node_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "management_scope_node_ids", value)

    @property
    @pulumi.getter(name="managementScopeUins")
    def management_scope_uins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Uin list of the managed members. This parameter is valid when `management_scope` is `2`.
        """
        return pulumi.get(self, "management_scope_uins")

    @management_scope_uins.setter
    def management_scope_uins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "management_scope_uins", value)

    @property
    @pulumi.getter(name="memberUins")
    def member_uins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Uin list of the delegated admins, Including up to 20 items.
        """
        return pulumi.get(self, "member_uins")

    @member_uins.setter
    def member_uins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "member_uins", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[int]]:
        """
        Organization service ID.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_id", value)


class ServiceAssign(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 management_scope: Optional[pulumi.Input[int]] = None,
                 management_scope_node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 management_scope_uins: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 member_uins: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 service_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization service assign

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.organization.ServiceAssign("example",
            management_scope=1,
            member_uins=[
                100037235241,
                100033738111,
            ],
            service_id=15)
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.organization.ServiceAssign("example",
            management_scope=2,
            management_scope_node_ids=[
                2024256,
                2024259,
            ],
            management_scope_uins=[
                100019287759,
                100020537485,
            ],
            member_uins=[
                100013415241,
                100078908111,
            ],
            service_id=15)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization service assign can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/serviceAssign:ServiceAssign example 15
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] management_scope: Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] management_scope_node_ids: ID list of the managed departments. This parameter is valid when `management_scope` is `2`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] management_scope_uins: Uin list of the managed members. This parameter is valid when `management_scope` is `2`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_uins: Uin list of the delegated admins, Including up to 20 items.
        :param pulumi.Input[int] service_id: Organization service ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceAssignArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization service assign

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.organization.ServiceAssign("example",
            management_scope=1,
            member_uins=[
                100037235241,
                100033738111,
            ],
            service_id=15)
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.organization.ServiceAssign("example",
            management_scope=2,
            management_scope_node_ids=[
                2024256,
                2024259,
            ],
            management_scope_uins=[
                100019287759,
                100020537485,
            ],
            member_uins=[
                100013415241,
                100078908111,
            ],
            service_id=15)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization service assign can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/serviceAssign:ServiceAssign example 15
        ```

        :param str resource_name: The name of the resource.
        :param ServiceAssignArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceAssignArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 management_scope: Optional[pulumi.Input[int]] = None,
                 management_scope_node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 management_scope_uins: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 member_uins: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 service_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceAssignArgs.__new__(ServiceAssignArgs)

            __props__.__dict__["management_scope"] = management_scope
            __props__.__dict__["management_scope_node_ids"] = management_scope_node_ids
            __props__.__dict__["management_scope_uins"] = management_scope_uins
            if member_uins is None and not opts.urn:
                raise TypeError("Missing required property 'member_uins'")
            __props__.__dict__["member_uins"] = member_uins
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
        super(ServiceAssign, __self__).__init__(
            'tencentcloud:Organization/serviceAssign:ServiceAssign',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            management_scope: Optional[pulumi.Input[int]] = None,
            management_scope_node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            management_scope_uins: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            member_uins: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            service_id: Optional[pulumi.Input[int]] = None) -> 'ServiceAssign':
        """
        Get an existing ServiceAssign resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] management_scope: Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] management_scope_node_ids: ID list of the managed departments. This parameter is valid when `management_scope` is `2`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] management_scope_uins: Uin list of the managed members. This parameter is valid when `management_scope` is `2`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_uins: Uin list of the delegated admins, Including up to 20 items.
        :param pulumi.Input[int] service_id: Organization service ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceAssignState.__new__(_ServiceAssignState)

        __props__.__dict__["management_scope"] = management_scope
        __props__.__dict__["management_scope_node_ids"] = management_scope_node_ids
        __props__.__dict__["management_scope_uins"] = management_scope_uins
        __props__.__dict__["member_uins"] = member_uins
        __props__.__dict__["service_id"] = service_id
        return ServiceAssign(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="managementScope")
    def management_scope(self) -> pulumi.Output[int]:
        """
        Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
        """
        return pulumi.get(self, "management_scope")

    @property
    @pulumi.getter(name="managementScopeNodeIds")
    def management_scope_node_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        ID list of the managed departments. This parameter is valid when `management_scope` is `2`.
        """
        return pulumi.get(self, "management_scope_node_ids")

    @property
    @pulumi.getter(name="managementScopeUins")
    def management_scope_uins(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Uin list of the managed members. This parameter is valid when `management_scope` is `2`.
        """
        return pulumi.get(self, "management_scope_uins")

    @property
    @pulumi.getter(name="memberUins")
    def member_uins(self) -> pulumi.Output[Sequence[int]]:
        """
        Uin list of the delegated admins, Including up to 20 items.
        """
        return pulumi.get(self, "member_uins")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[int]:
        """
        Organization service ID.
        """
        return pulumi.get(self, "service_id")

