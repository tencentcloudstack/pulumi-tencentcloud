# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceOrgPermissionArgs',
    'OrgIdentityIdentityPolicyArgs',
    'OrgMemberOrgPermissionArgs',
    'OrgShareUnitMemberMemberArgs',
    'GetNodesTagArgs',
]

@pulumi.input_type
class InstanceOrgPermissionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Permissions ID.
        :param pulumi.Input[str] name: Permission name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Permissions ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Permission name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class OrgIdentityIdentityPolicyArgs:
    def __init__(__self__, *,
                 policy_document: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] policy_document: Customize policy content and follow CAM policy syntax. Valid and required when PolicyType is the 1-custom policy.
        :param pulumi.Input[int] policy_id: CAM default policy ID. Valid and required when PolicyType is the 2-preset policy.
        :param pulumi.Input[str] policy_name: CAM default policy name. Valid and required when PolicyType is the 2-preset policy.
        :param pulumi.Input[int] policy_type: Policy type. Value 1-custom policy 2-preset policy; default value 2.
        """
        if policy_document is not None:
            pulumi.set(__self__, "policy_document", policy_document)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> Optional[pulumi.Input[str]]:
        """
        Customize policy content and follow CAM policy syntax. Valid and required when PolicyType is the 1-custom policy.
        """
        return pulumi.get(self, "policy_document")

    @policy_document.setter
    def policy_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_document", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        CAM default policy ID. Valid and required when PolicyType is the 2-preset policy.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM default policy name. Valid and required when PolicyType is the 2-preset policy.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[int]]:
        """
        Policy type. Value 1-custom policy 2-preset policy; default value 2.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_type", value)


@pulumi.input_type
class OrgMemberOrgPermissionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Permissions ID.
        :param pulumi.Input[str] name: Member name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Permissions ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Member name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class OrgShareUnitMemberMemberArgs:
    def __init__(__self__, *,
                 share_member_uin: pulumi.Input[int]):
        """
        :param pulumi.Input[int] share_member_uin: Member uin.
        """
        pulumi.set(__self__, "share_member_uin", share_member_uin)

    @property
    @pulumi.getter(name="shareMemberUin")
    def share_member_uin(self) -> pulumi.Input[int]:
        """
        Member uin.
        """
        return pulumi.get(self, "share_member_uin")

    @share_member_uin.setter
    def share_member_uin(self, value: pulumi.Input[int]):
        pulumi.set(self, "share_member_uin", value)


@pulumi.input_type
class GetNodesTagArgs:
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: str):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: str):
        pulumi.set(self, "tag_value", value)


