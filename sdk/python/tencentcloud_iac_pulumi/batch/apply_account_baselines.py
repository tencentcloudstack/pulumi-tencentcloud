# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplyAccountBaselinesArgs', 'ApplyAccountBaselines']

@pulumi.input_type
class ApplyAccountBaselinesArgs:
    def __init__(__self__, *,
                 baseline_config_items: pulumi.Input[Sequence[pulumi.Input['ApplyAccountBaselinesBaselineConfigItemArgs']]],
                 member_uin_lists: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        The set of arguments for constructing a ApplyAccountBaselines resource.
        :param pulumi.Input[Sequence[pulumi.Input['ApplyAccountBaselinesBaselineConfigItemArgs']]] baseline_config_items: List of baseline item configuration information.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_uin_lists: Member account UIN, which is also the UIN of the account to which the baseline is applied.
        """
        pulumi.set(__self__, "baseline_config_items", baseline_config_items)
        pulumi.set(__self__, "member_uin_lists", member_uin_lists)

    @property
    @pulumi.getter(name="baselineConfigItems")
    def baseline_config_items(self) -> pulumi.Input[Sequence[pulumi.Input['ApplyAccountBaselinesBaselineConfigItemArgs']]]:
        """
        List of baseline item configuration information.
        """
        return pulumi.get(self, "baseline_config_items")

    @baseline_config_items.setter
    def baseline_config_items(self, value: pulumi.Input[Sequence[pulumi.Input['ApplyAccountBaselinesBaselineConfigItemArgs']]]):
        pulumi.set(self, "baseline_config_items", value)

    @property
    @pulumi.getter(name="memberUinLists")
    def member_uin_lists(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Member account UIN, which is also the UIN of the account to which the baseline is applied.
        """
        return pulumi.get(self, "member_uin_lists")

    @member_uin_lists.setter
    def member_uin_lists(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "member_uin_lists", value)


@pulumi.input_type
class _ApplyAccountBaselinesState:
    def __init__(__self__, *,
                 baseline_config_items: Optional[pulumi.Input[Sequence[pulumi.Input['ApplyAccountBaselinesBaselineConfigItemArgs']]]] = None,
                 member_uin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering ApplyAccountBaselines resources.
        :param pulumi.Input[Sequence[pulumi.Input['ApplyAccountBaselinesBaselineConfigItemArgs']]] baseline_config_items: List of baseline item configuration information.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_uin_lists: Member account UIN, which is also the UIN of the account to which the baseline is applied.
        """
        if baseline_config_items is not None:
            pulumi.set(__self__, "baseline_config_items", baseline_config_items)
        if member_uin_lists is not None:
            pulumi.set(__self__, "member_uin_lists", member_uin_lists)

    @property
    @pulumi.getter(name="baselineConfigItems")
    def baseline_config_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplyAccountBaselinesBaselineConfigItemArgs']]]]:
        """
        List of baseline item configuration information.
        """
        return pulumi.get(self, "baseline_config_items")

    @baseline_config_items.setter
    def baseline_config_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplyAccountBaselinesBaselineConfigItemArgs']]]]):
        pulumi.set(self, "baseline_config_items", value)

    @property
    @pulumi.getter(name="memberUinLists")
    def member_uin_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Member account UIN, which is also the UIN of the account to which the baseline is applied.
        """
        return pulumi.get(self, "member_uin_lists")

    @member_uin_lists.setter
    def member_uin_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "member_uin_lists", value)


class ApplyAccountBaselines(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 baseline_config_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplyAccountBaselinesBaselineConfigItemArgs']]]]] = None,
                 member_uin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a controlcenter batch apply account baselines

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.batch.ApplyAccountBaselines("example",
            baseline_config_items=[tencentcloud.batch.ApplyAccountBaselinesBaselineConfigItemArgs(
                configuration="{\\"Images\\":[{\\"Region\\":\\"ap-guangzhou\\",\\"ImageId\\":\\"img-mcdsiqrx\\",\\"ImageName\\":\\"demo1\\"}, {\\"Region\\":\\"ap-guangzhou\\",\\"ImageId\\":\\"img-esxgkots\\",\\"ImageName\\":\\"demo2\\"}]}",
                identifier="TCC-AF_SHARE_IMAGE",
            )],
            member_uin_lists=[
                10037652245,
                10037652240,
            ])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplyAccountBaselinesBaselineConfigItemArgs']]]] baseline_config_items: List of baseline item configuration information.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_uin_lists: Member account UIN, which is also the UIN of the account to which the baseline is applied.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplyAccountBaselinesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a controlcenter batch apply account baselines

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.batch.ApplyAccountBaselines("example",
            baseline_config_items=[tencentcloud.batch.ApplyAccountBaselinesBaselineConfigItemArgs(
                configuration="{\\"Images\\":[{\\"Region\\":\\"ap-guangzhou\\",\\"ImageId\\":\\"img-mcdsiqrx\\",\\"ImageName\\":\\"demo1\\"}, {\\"Region\\":\\"ap-guangzhou\\",\\"ImageId\\":\\"img-esxgkots\\",\\"ImageName\\":\\"demo2\\"}]}",
                identifier="TCC-AF_SHARE_IMAGE",
            )],
            member_uin_lists=[
                10037652245,
                10037652240,
            ])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ApplyAccountBaselinesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplyAccountBaselinesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 baseline_config_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplyAccountBaselinesBaselineConfigItemArgs']]]]] = None,
                 member_uin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplyAccountBaselinesArgs.__new__(ApplyAccountBaselinesArgs)

            if baseline_config_items is None and not opts.urn:
                raise TypeError("Missing required property 'baseline_config_items'")
            __props__.__dict__["baseline_config_items"] = baseline_config_items
            if member_uin_lists is None and not opts.urn:
                raise TypeError("Missing required property 'member_uin_lists'")
            __props__.__dict__["member_uin_lists"] = member_uin_lists
        super(ApplyAccountBaselines, __self__).__init__(
            'tencentcloud:Batch/applyAccountBaselines:ApplyAccountBaselines',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            baseline_config_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplyAccountBaselinesBaselineConfigItemArgs']]]]] = None,
            member_uin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'ApplyAccountBaselines':
        """
        Get an existing ApplyAccountBaselines resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplyAccountBaselinesBaselineConfigItemArgs']]]] baseline_config_items: List of baseline item configuration information.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_uin_lists: Member account UIN, which is also the UIN of the account to which the baseline is applied.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplyAccountBaselinesState.__new__(_ApplyAccountBaselinesState)

        __props__.__dict__["baseline_config_items"] = baseline_config_items
        __props__.__dict__["member_uin_lists"] = member_uin_lists
        return ApplyAccountBaselines(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="baselineConfigItems")
    def baseline_config_items(self) -> pulumi.Output[Sequence['outputs.ApplyAccountBaselinesBaselineConfigItem']]:
        """
        List of baseline item configuration information.
        """
        return pulumi.get(self, "baseline_config_items")

    @property
    @pulumi.getter(name="memberUinLists")
    def member_uin_lists(self) -> pulumi.Output[Sequence[int]]:
        """
        Member account UIN, which is also the UIN of the account to which the baseline is applied.
        """
        return pulumi.get(self, "member_uin_lists")

