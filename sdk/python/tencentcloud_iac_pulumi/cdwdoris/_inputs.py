# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceBeSpecArgs',
    'InstanceChargePropertiesArgs',
    'InstanceFeSpecArgs',
    'InstanceTagArgs',
    'InstanceUserMultiZoneInfosArgs',
    'WorkloadGroupWorkloadGroupArgs',
    'GetInstancesSearchTagArgs',
]

@pulumi.input_type
class InstanceBeSpecArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 disk_size: pulumi.Input[int],
                 spec_name: pulumi.Input[str]):
        """
        :param pulumi.Input[int] count: Quantities.
        :param pulumi.Input[int] disk_size: Cloud disk size.
        :param pulumi.Input[str] spec_name: Specification name.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "spec_name", spec_name)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        Quantities.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Input[int]:
        """
        Cloud disk size.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> pulumi.Input[str]:
        """
        Specification name.
        """
        return pulumi.get(self, "spec_name")

    @spec_name.setter
    def spec_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "spec_name", value)


@pulumi.input_type
class InstanceChargePropertiesArgs:
    def __init__(__self__, *,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] charge_type: Billing type: `PREPAID` for prepayment, and `POSTPAID_BY_HOUR` for postpayment. Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[int] renew_flag: Whether to automatically renew. 1 means automatic renewal is enabled. Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[int] time_span: Billing duration Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[str] time_unit: Billing time unit, and `m` means month, etc. Note: This field may return null, indicating that no valid values can be obtained.
        """
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Billing type: `PREPAID` for prepayment, and `POSTPAID_BY_HOUR` for postpayment. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to automatically renew. 1 means automatic renewal is enabled. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        Billing duration Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Billing time unit, and `m` means month, etc. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_unit", value)


@pulumi.input_type
class InstanceFeSpecArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 disk_size: pulumi.Input[int],
                 spec_name: pulumi.Input[str]):
        """
        :param pulumi.Input[int] count: Quantities.
        :param pulumi.Input[int] disk_size: Cloud disk size.
        :param pulumi.Input[str] spec_name: Specification name.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "spec_name", spec_name)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        Quantities.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Input[int]:
        """
        Cloud disk size.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> pulumi.Input[str]:
        """
        Specification name.
        """
        return pulumi.get(self, "spec_name")

    @spec_name.setter
    def spec_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "spec_name", value)


@pulumi.input_type
class InstanceTagArgs:
    def __init__(__self__, *,
                 tag_key: pulumi.Input[str],
                 tag_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] tag_key: Tag key.
        :param pulumi.Input[str] tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> pulumi.Input[str]:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> pulumi.Input[str]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class InstanceUserMultiZoneInfosArgs:
    def __init__(__self__, *,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 subnet_ip_num: Optional[pulumi.Input[int]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet_id: Subnet ID Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[int] subnet_ip_num: The number of available IP addresses in the current subnet Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[str] zone: Availability zone Note: This field may return null, indicating that no valid values can be obtained.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if subnet_ip_num is not None:
            pulumi.set(__self__, "subnet_ip_num", subnet_ip_num)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet ID Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="subnetIpNum")
    def subnet_ip_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of available IP addresses in the current subnet Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subnet_ip_num")

    @subnet_ip_num.setter
    def subnet_ip_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_ip_num", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class WorkloadGroupWorkloadGroupArgs:
    def __init__(__self__, *,
                 cpu_hard_limit: Optional[pulumi.Input[str]] = None,
                 cpu_share: Optional[pulumi.Input[int]] = None,
                 enable_memory_over_commit: Optional[pulumi.Input[bool]] = None,
                 memory_limit: Optional[pulumi.Input[int]] = None,
                 workload_group_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cpu_hard_limit: Cpu hard limit. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] cpu_share: CPU weight. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[bool] enable_memory_over_commit: Whether to allow over-allocation. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] memory_limit: Memory limit, the sum of the memory limit values of all resource groups should be less than or equal to 100. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] workload_group_name: Workload group name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if cpu_hard_limit is not None:
            pulumi.set(__self__, "cpu_hard_limit", cpu_hard_limit)
        if cpu_share is not None:
            pulumi.set(__self__, "cpu_share", cpu_share)
        if enable_memory_over_commit is not None:
            pulumi.set(__self__, "enable_memory_over_commit", enable_memory_over_commit)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if workload_group_name is not None:
            pulumi.set(__self__, "workload_group_name", workload_group_name)

    @property
    @pulumi.getter(name="cpuHardLimit")
    def cpu_hard_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Cpu hard limit. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cpu_hard_limit")

    @cpu_hard_limit.setter
    def cpu_hard_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_hard_limit", value)

    @property
    @pulumi.getter(name="cpuShare")
    def cpu_share(self) -> Optional[pulumi.Input[int]]:
        """
        CPU weight. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cpu_share")

    @cpu_share.setter
    def cpu_share(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_share", value)

    @property
    @pulumi.getter(name="enableMemoryOverCommit")
    def enable_memory_over_commit(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow over-allocation. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "enable_memory_over_commit")

    @enable_memory_over_commit.setter
    def enable_memory_over_commit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_memory_over_commit", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Memory limit, the sum of the memory limit values of all resource groups should be less than or equal to 100. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="workloadGroupName")
    def workload_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Workload group name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "workload_group_name")

    @workload_group_name.setter
    def workload_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_group_name", value)


@pulumi.input_type
class GetInstancesSearchTagArgs:
    def __init__(__self__, *,
                 all_value: Optional[int] = None,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        """
        :param int all_value: 1 means only the tag key is entered without a value, and 0 means both the key and the value are entered.
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        if all_value is not None:
            pulumi.set(__self__, "all_value", all_value)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="allValue")
    def all_value(self) -> Optional[int]:
        """
        1 means only the tag key is entered without a value, and 0 means both the key and the value are entered.
        """
        return pulumi.get(self, "all_value")

    @all_value.setter
    def all_value(self, value: Optional[int]):
        pulumi.set(self, "all_value", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[str]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[str]):
        pulumi.set(self, "tag_value", value)


