# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 be_spec: pulumi.Input['InstanceBeSpecArgs'],
                 charge_properties: pulumi.Input['InstanceChargePropertiesArgs'],
                 doris_user_pwd: pulumi.Input[str],
                 fe_spec: pulumi.Input['InstanceFeSpecArgs'],
                 ha_flag: pulumi.Input[bool],
                 instance_name: pulumi.Input[str],
                 product_version: pulumi.Input[str],
                 user_subnet_id: pulumi.Input[str],
                 user_vpc_id: pulumi.Input[str],
                 workload_group_status: pulumi.Input[str],
                 zone: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[int]] = None,
                 enable_multi_zones: Optional[pulumi.Input[bool]] = None,
                 ha_type: Optional[pulumi.Input[int]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None,
                 user_multi_zone_infos: Optional[pulumi.Input['InstanceUserMultiZoneInfosArgs']] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input['InstanceBeSpecArgs'] be_spec: BE specifications.
        :param pulumi.Input['InstanceChargePropertiesArgs'] charge_properties: Payment type.
        :param pulumi.Input[str] doris_user_pwd: Database password.
        :param pulumi.Input['InstanceFeSpecArgs'] fe_spec: FE specifications.
        :param pulumi.Input[bool] ha_flag: Whether it is highly available.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[str] product_version: Product version number.
        :param pulumi.Input[str] user_subnet_id: User subnet ID.
        :param pulumi.Input[str] user_vpc_id: User VPCID.
        :param pulumi.Input[str] workload_group_status: Whether to enable resource group. `open` - enable, `close` - disable.
        :param pulumi.Input[str] zone: Availability zone.
        :param pulumi.Input[int] case_sensitive: Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
        :param pulumi.Input[bool] enable_multi_zones: Whether to enable multi-availability zone.
        :param pulumi.Input[int] ha_type: High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group Id list.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]] tags: Tag list.
        :param pulumi.Input['InstanceUserMultiZoneInfosArgs'] user_multi_zone_infos: After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
        """
        pulumi.set(__self__, "be_spec", be_spec)
        pulumi.set(__self__, "charge_properties", charge_properties)
        pulumi.set(__self__, "doris_user_pwd", doris_user_pwd)
        pulumi.set(__self__, "fe_spec", fe_spec)
        pulumi.set(__self__, "ha_flag", ha_flag)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "product_version", product_version)
        pulumi.set(__self__, "user_subnet_id", user_subnet_id)
        pulumi.set(__self__, "user_vpc_id", user_vpc_id)
        pulumi.set(__self__, "workload_group_status", workload_group_status)
        pulumi.set(__self__, "zone", zone)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if enable_multi_zones is not None:
            pulumi.set(__self__, "enable_multi_zones", enable_multi_zones)
        if ha_type is not None:
            pulumi.set(__self__, "ha_type", ha_type)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_multi_zone_infos is not None:
            pulumi.set(__self__, "user_multi_zone_infos", user_multi_zone_infos)

    @property
    @pulumi.getter(name="beSpec")
    def be_spec(self) -> pulumi.Input['InstanceBeSpecArgs']:
        """
        BE specifications.
        """
        return pulumi.get(self, "be_spec")

    @be_spec.setter
    def be_spec(self, value: pulumi.Input['InstanceBeSpecArgs']):
        pulumi.set(self, "be_spec", value)

    @property
    @pulumi.getter(name="chargeProperties")
    def charge_properties(self) -> pulumi.Input['InstanceChargePropertiesArgs']:
        """
        Payment type.
        """
        return pulumi.get(self, "charge_properties")

    @charge_properties.setter
    def charge_properties(self, value: pulumi.Input['InstanceChargePropertiesArgs']):
        pulumi.set(self, "charge_properties", value)

    @property
    @pulumi.getter(name="dorisUserPwd")
    def doris_user_pwd(self) -> pulumi.Input[str]:
        """
        Database password.
        """
        return pulumi.get(self, "doris_user_pwd")

    @doris_user_pwd.setter
    def doris_user_pwd(self, value: pulumi.Input[str]):
        pulumi.set(self, "doris_user_pwd", value)

    @property
    @pulumi.getter(name="feSpec")
    def fe_spec(self) -> pulumi.Input['InstanceFeSpecArgs']:
        """
        FE specifications.
        """
        return pulumi.get(self, "fe_spec")

    @fe_spec.setter
    def fe_spec(self, value: pulumi.Input['InstanceFeSpecArgs']):
        pulumi.set(self, "fe_spec", value)

    @property
    @pulumi.getter(name="haFlag")
    def ha_flag(self) -> pulumi.Input[bool]:
        """
        Whether it is highly available.
        """
        return pulumi.get(self, "ha_flag")

    @ha_flag.setter
    def ha_flag(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ha_flag", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> pulumi.Input[str]:
        """
        Product version number.
        """
        return pulumi.get(self, "product_version")

    @product_version.setter
    def product_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_version", value)

    @property
    @pulumi.getter(name="userSubnetId")
    def user_subnet_id(self) -> pulumi.Input[str]:
        """
        User subnet ID.
        """
        return pulumi.get(self, "user_subnet_id")

    @user_subnet_id.setter
    def user_subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_subnet_id", value)

    @property
    @pulumi.getter(name="userVpcId")
    def user_vpc_id(self) -> pulumi.Input[str]:
        """
        User VPCID.
        """
        return pulumi.get(self, "user_vpc_id")

    @user_vpc_id.setter
    def user_vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_vpc_id", value)

    @property
    @pulumi.getter(name="workloadGroupStatus")
    def workload_group_status(self) -> pulumi.Input[str]:
        """
        Whether to enable resource group. `open` - enable, `close` - disable.
        """
        return pulumi.get(self, "workload_group_status")

    @workload_group_status.setter
    def workload_group_status(self, value: pulumi.Input[str]):
        pulumi.set(self, "workload_group_status", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[int]]:
        """
        Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="enableMultiZones")
    def enable_multi_zones(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable multi-availability zone.
        """
        return pulumi.get(self, "enable_multi_zones")

    @enable_multi_zones.setter
    def enable_multi_zones(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_multi_zones", value)

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> Optional[pulumi.Input[int]]:
        """
        High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
        """
        return pulumi.get(self, "ha_type")

    @ha_type.setter
    def ha_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_type", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security Group Id list.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        """
        Tag list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userMultiZoneInfos")
    def user_multi_zone_infos(self) -> Optional[pulumi.Input['InstanceUserMultiZoneInfosArgs']]:
        """
        After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
        """
        return pulumi.get(self, "user_multi_zone_infos")

    @user_multi_zone_infos.setter
    def user_multi_zone_infos(self, value: Optional[pulumi.Input['InstanceUserMultiZoneInfosArgs']]):
        pulumi.set(self, "user_multi_zone_infos", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 be_spec: Optional[pulumi.Input['InstanceBeSpecArgs']] = None,
                 case_sensitive: Optional[pulumi.Input[int]] = None,
                 charge_properties: Optional[pulumi.Input['InstanceChargePropertiesArgs']] = None,
                 doris_user_pwd: Optional[pulumi.Input[str]] = None,
                 enable_multi_zones: Optional[pulumi.Input[bool]] = None,
                 fe_spec: Optional[pulumi.Input['InstanceFeSpecArgs']] = None,
                 ha_flag: Optional[pulumi.Input[bool]] = None,
                 ha_type: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 product_version: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None,
                 user_multi_zone_infos: Optional[pulumi.Input['InstanceUserMultiZoneInfosArgs']] = None,
                 user_subnet_id: Optional[pulumi.Input[str]] = None,
                 user_vpc_id: Optional[pulumi.Input[str]] = None,
                 workload_group_status: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input['InstanceBeSpecArgs'] be_spec: BE specifications.
        :param pulumi.Input[int] case_sensitive: Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
        :param pulumi.Input['InstanceChargePropertiesArgs'] charge_properties: Payment type.
        :param pulumi.Input[str] doris_user_pwd: Database password.
        :param pulumi.Input[bool] enable_multi_zones: Whether to enable multi-availability zone.
        :param pulumi.Input['InstanceFeSpecArgs'] fe_spec: FE specifications.
        :param pulumi.Input[bool] ha_flag: Whether it is highly available.
        :param pulumi.Input[int] ha_type: High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[str] product_version: Product version number.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group Id list.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]] tags: Tag list.
        :param pulumi.Input['InstanceUserMultiZoneInfosArgs'] user_multi_zone_infos: After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
        :param pulumi.Input[str] user_subnet_id: User subnet ID.
        :param pulumi.Input[str] user_vpc_id: User VPCID.
        :param pulumi.Input[str] workload_group_status: Whether to enable resource group. `open` - enable, `close` - disable.
        :param pulumi.Input[str] zone: Availability zone.
        """
        if be_spec is not None:
            pulumi.set(__self__, "be_spec", be_spec)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if charge_properties is not None:
            pulumi.set(__self__, "charge_properties", charge_properties)
        if doris_user_pwd is not None:
            pulumi.set(__self__, "doris_user_pwd", doris_user_pwd)
        if enable_multi_zones is not None:
            pulumi.set(__self__, "enable_multi_zones", enable_multi_zones)
        if fe_spec is not None:
            pulumi.set(__self__, "fe_spec", fe_spec)
        if ha_flag is not None:
            pulumi.set(__self__, "ha_flag", ha_flag)
        if ha_type is not None:
            pulumi.set(__self__, "ha_type", ha_type)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if product_version is not None:
            pulumi.set(__self__, "product_version", product_version)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_multi_zone_infos is not None:
            pulumi.set(__self__, "user_multi_zone_infos", user_multi_zone_infos)
        if user_subnet_id is not None:
            pulumi.set(__self__, "user_subnet_id", user_subnet_id)
        if user_vpc_id is not None:
            pulumi.set(__self__, "user_vpc_id", user_vpc_id)
        if workload_group_status is not None:
            pulumi.set(__self__, "workload_group_status", workload_group_status)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="beSpec")
    def be_spec(self) -> Optional[pulumi.Input['InstanceBeSpecArgs']]:
        """
        BE specifications.
        """
        return pulumi.get(self, "be_spec")

    @be_spec.setter
    def be_spec(self, value: Optional[pulumi.Input['InstanceBeSpecArgs']]):
        pulumi.set(self, "be_spec", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[int]]:
        """
        Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
        """
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="chargeProperties")
    def charge_properties(self) -> Optional[pulumi.Input['InstanceChargePropertiesArgs']]:
        """
        Payment type.
        """
        return pulumi.get(self, "charge_properties")

    @charge_properties.setter
    def charge_properties(self, value: Optional[pulumi.Input['InstanceChargePropertiesArgs']]):
        pulumi.set(self, "charge_properties", value)

    @property
    @pulumi.getter(name="dorisUserPwd")
    def doris_user_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Database password.
        """
        return pulumi.get(self, "doris_user_pwd")

    @doris_user_pwd.setter
    def doris_user_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "doris_user_pwd", value)

    @property
    @pulumi.getter(name="enableMultiZones")
    def enable_multi_zones(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable multi-availability zone.
        """
        return pulumi.get(self, "enable_multi_zones")

    @enable_multi_zones.setter
    def enable_multi_zones(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_multi_zones", value)

    @property
    @pulumi.getter(name="feSpec")
    def fe_spec(self) -> Optional[pulumi.Input['InstanceFeSpecArgs']]:
        """
        FE specifications.
        """
        return pulumi.get(self, "fe_spec")

    @fe_spec.setter
    def fe_spec(self, value: Optional[pulumi.Input['InstanceFeSpecArgs']]):
        pulumi.set(self, "fe_spec", value)

    @property
    @pulumi.getter(name="haFlag")
    def ha_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether it is highly available.
        """
        return pulumi.get(self, "ha_flag")

    @ha_flag.setter
    def ha_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ha_flag", value)

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> Optional[pulumi.Input[int]]:
        """
        High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
        """
        return pulumi.get(self, "ha_type")

    @ha_type.setter
    def ha_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_type", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> Optional[pulumi.Input[str]]:
        """
        Product version number.
        """
        return pulumi.get(self, "product_version")

    @product_version.setter
    def product_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_version", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security Group Id list.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        """
        Tag list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userMultiZoneInfos")
    def user_multi_zone_infos(self) -> Optional[pulumi.Input['InstanceUserMultiZoneInfosArgs']]:
        """
        After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
        """
        return pulumi.get(self, "user_multi_zone_infos")

    @user_multi_zone_infos.setter
    def user_multi_zone_infos(self, value: Optional[pulumi.Input['InstanceUserMultiZoneInfosArgs']]):
        pulumi.set(self, "user_multi_zone_infos", value)

    @property
    @pulumi.getter(name="userSubnetId")
    def user_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        User subnet ID.
        """
        return pulumi.get(self, "user_subnet_id")

    @user_subnet_id.setter
    def user_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_subnet_id", value)

    @property
    @pulumi.getter(name="userVpcId")
    def user_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        User VPCID.
        """
        return pulumi.get(self, "user_vpc_id")

    @user_vpc_id.setter
    def user_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_vpc_id", value)

    @property
    @pulumi.getter(name="workloadGroupStatus")
    def workload_group_status(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable resource group. `open` - enable, `close` - disable.
        """
        return pulumi.get(self, "workload_group_status")

    @workload_group_status.setter
    def workload_group_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_group_status", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 be_spec: Optional[pulumi.Input[pulumi.InputType['InstanceBeSpecArgs']]] = None,
                 case_sensitive: Optional[pulumi.Input[int]] = None,
                 charge_properties: Optional[pulumi.Input[pulumi.InputType['InstanceChargePropertiesArgs']]] = None,
                 doris_user_pwd: Optional[pulumi.Input[str]] = None,
                 enable_multi_zones: Optional[pulumi.Input[bool]] = None,
                 fe_spec: Optional[pulumi.Input[pulumi.InputType['InstanceFeSpecArgs']]] = None,
                 ha_flag: Optional[pulumi.Input[bool]] = None,
                 ha_type: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 product_version: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
                 user_multi_zone_infos: Optional[pulumi.Input[pulumi.InputType['InstanceUserMultiZoneInfosArgs']]] = None,
                 user_subnet_id: Optional[pulumi.Input[str]] = None,
                 user_vpc_id: Optional[pulumi.Input[str]] = None,
                 workload_group_status: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cdwdoris instance

        ## Example Usage

        ### Create a POSTPAID instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="172.16.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="172.16.0.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="security group desc.",
            tags={
                "createBy": "Terraform",
            })
        # create POSTPAID instance
        example_instance = tencentcloud.cdwdoris.Instance("exampleInstance",
            zone=availability_zone,
            user_vpc_id=vpc.id,
            user_subnet_id=subnet.id,
            product_version="2.1",
            instance_name="tf-example",
            doris_user_pwd="Password@test",
            ha_flag=False,
            case_sensitive=0,
            enable_multi_zones=False,
            workload_group_status="open",
            security_group_ids=[example_group.id],
            charge_properties=tencentcloud.cdwdoris.InstanceChargePropertiesArgs(
                charge_type="POSTPAID_BY_HOUR",
            ),
            fe_spec=tencentcloud.cdwdoris.InstanceFeSpecArgs(
                spec_name="S_4_16_P",
                count=3,
                disk_size=200,
            ),
            be_spec=tencentcloud.cdwdoris.InstanceBeSpecArgs(
                spec_name="S_4_16_P",
                count=3,
                disk_size=200,
            ),
            tags=[tencentcloud.cdwdoris.InstanceTagArgs(
                tag_key="createBy",
                tag_value="Terraform",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Create a POSTPAID instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="172.16.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="172.16.0.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="security group desc.",
            tags={
                "createBy": "Terraform",
            })
        # create PREPAID instance
        example_instance = tencentcloud.cdwdoris.Instance("exampleInstance",
            zone=availability_zone,
            user_vpc_id=vpc.id,
            user_subnet_id=subnet.id,
            product_version="2.1",
            instance_name="tf-example",
            doris_user_pwd="Password@test",
            ha_flag=False,
            case_sensitive=0,
            enable_multi_zones=False,
            workload_group_status="close",
            security_group_ids=[example_group.id],
            charge_properties=tencentcloud.cdwdoris.InstanceChargePropertiesArgs(
                charge_type="PREPAID",
                time_span=1,
                time_unit="m",
            ),
            fe_spec=tencentcloud.cdwdoris.InstanceFeSpecArgs(
                spec_name="S_4_16_P",
                count=3,
                disk_size=200,
            ),
            be_spec=tencentcloud.cdwdoris.InstanceBeSpecArgs(
                spec_name="S_4_16_P",
                count=3,
                disk_size=200,
            ),
            tags=[tencentcloud.cdwdoris.InstanceTagArgs(
                tag_key="createBy",
                tag_value="Terraform",
            )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['InstanceBeSpecArgs']] be_spec: BE specifications.
        :param pulumi.Input[int] case_sensitive: Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
        :param pulumi.Input[pulumi.InputType['InstanceChargePropertiesArgs']] charge_properties: Payment type.
        :param pulumi.Input[str] doris_user_pwd: Database password.
        :param pulumi.Input[bool] enable_multi_zones: Whether to enable multi-availability zone.
        :param pulumi.Input[pulumi.InputType['InstanceFeSpecArgs']] fe_spec: FE specifications.
        :param pulumi.Input[bool] ha_flag: Whether it is highly available.
        :param pulumi.Input[int] ha_type: High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[str] product_version: Product version number.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group Id list.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]] tags: Tag list.
        :param pulumi.Input[pulumi.InputType['InstanceUserMultiZoneInfosArgs']] user_multi_zone_infos: After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
        :param pulumi.Input[str] user_subnet_id: User subnet ID.
        :param pulumi.Input[str] user_vpc_id: User VPCID.
        :param pulumi.Input[str] workload_group_status: Whether to enable resource group. `open` - enable, `close` - disable.
        :param pulumi.Input[str] zone: Availability zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cdwdoris instance

        ## Example Usage

        ### Create a POSTPAID instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="172.16.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="172.16.0.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="security group desc.",
            tags={
                "createBy": "Terraform",
            })
        # create POSTPAID instance
        example_instance = tencentcloud.cdwdoris.Instance("exampleInstance",
            zone=availability_zone,
            user_vpc_id=vpc.id,
            user_subnet_id=subnet.id,
            product_version="2.1",
            instance_name="tf-example",
            doris_user_pwd="Password@test",
            ha_flag=False,
            case_sensitive=0,
            enable_multi_zones=False,
            workload_group_status="open",
            security_group_ids=[example_group.id],
            charge_properties=tencentcloud.cdwdoris.InstanceChargePropertiesArgs(
                charge_type="POSTPAID_BY_HOUR",
            ),
            fe_spec=tencentcloud.cdwdoris.InstanceFeSpecArgs(
                spec_name="S_4_16_P",
                count=3,
                disk_size=200,
            ),
            be_spec=tencentcloud.cdwdoris.InstanceBeSpecArgs(
                spec_name="S_4_16_P",
                count=3,
                disk_size=200,
            ),
            tags=[tencentcloud.cdwdoris.InstanceTagArgs(
                tag_key="createBy",
                tag_value="Terraform",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Create a POSTPAID instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="172.16.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="172.16.0.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="security group desc.",
            tags={
                "createBy": "Terraform",
            })
        # create PREPAID instance
        example_instance = tencentcloud.cdwdoris.Instance("exampleInstance",
            zone=availability_zone,
            user_vpc_id=vpc.id,
            user_subnet_id=subnet.id,
            product_version="2.1",
            instance_name="tf-example",
            doris_user_pwd="Password@test",
            ha_flag=False,
            case_sensitive=0,
            enable_multi_zones=False,
            workload_group_status="close",
            security_group_ids=[example_group.id],
            charge_properties=tencentcloud.cdwdoris.InstanceChargePropertiesArgs(
                charge_type="PREPAID",
                time_span=1,
                time_unit="m",
            ),
            fe_spec=tencentcloud.cdwdoris.InstanceFeSpecArgs(
                spec_name="S_4_16_P",
                count=3,
                disk_size=200,
            ),
            be_spec=tencentcloud.cdwdoris.InstanceBeSpecArgs(
                spec_name="S_4_16_P",
                count=3,
                disk_size=200,
            ),
            tags=[tencentcloud.cdwdoris.InstanceTagArgs(
                tag_key="createBy",
                tag_value="Terraform",
            )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 be_spec: Optional[pulumi.Input[pulumi.InputType['InstanceBeSpecArgs']]] = None,
                 case_sensitive: Optional[pulumi.Input[int]] = None,
                 charge_properties: Optional[pulumi.Input[pulumi.InputType['InstanceChargePropertiesArgs']]] = None,
                 doris_user_pwd: Optional[pulumi.Input[str]] = None,
                 enable_multi_zones: Optional[pulumi.Input[bool]] = None,
                 fe_spec: Optional[pulumi.Input[pulumi.InputType['InstanceFeSpecArgs']]] = None,
                 ha_flag: Optional[pulumi.Input[bool]] = None,
                 ha_type: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 product_version: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
                 user_multi_zone_infos: Optional[pulumi.Input[pulumi.InputType['InstanceUserMultiZoneInfosArgs']]] = None,
                 user_subnet_id: Optional[pulumi.Input[str]] = None,
                 user_vpc_id: Optional[pulumi.Input[str]] = None,
                 workload_group_status: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if be_spec is None and not opts.urn:
                raise TypeError("Missing required property 'be_spec'")
            __props__.__dict__["be_spec"] = be_spec
            __props__.__dict__["case_sensitive"] = case_sensitive
            if charge_properties is None and not opts.urn:
                raise TypeError("Missing required property 'charge_properties'")
            __props__.__dict__["charge_properties"] = charge_properties
            if doris_user_pwd is None and not opts.urn:
                raise TypeError("Missing required property 'doris_user_pwd'")
            __props__.__dict__["doris_user_pwd"] = None if doris_user_pwd is None else pulumi.Output.secret(doris_user_pwd)
            __props__.__dict__["enable_multi_zones"] = enable_multi_zones
            if fe_spec is None and not opts.urn:
                raise TypeError("Missing required property 'fe_spec'")
            __props__.__dict__["fe_spec"] = fe_spec
            if ha_flag is None and not opts.urn:
                raise TypeError("Missing required property 'ha_flag'")
            __props__.__dict__["ha_flag"] = ha_flag
            __props__.__dict__["ha_type"] = ha_type
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            if product_version is None and not opts.urn:
                raise TypeError("Missing required property 'product_version'")
            __props__.__dict__["product_version"] = product_version
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["tags"] = tags
            __props__.__dict__["user_multi_zone_infos"] = user_multi_zone_infos
            if user_subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_subnet_id'")
            __props__.__dict__["user_subnet_id"] = user_subnet_id
            if user_vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_vpc_id'")
            __props__.__dict__["user_vpc_id"] = user_vpc_id
            if workload_group_status is None and not opts.urn:
                raise TypeError("Missing required property 'workload_group_status'")
            __props__.__dict__["workload_group_status"] = workload_group_status
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["dorisUserPwd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'tencentcloud:Cdwdoris/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            be_spec: Optional[pulumi.Input[pulumi.InputType['InstanceBeSpecArgs']]] = None,
            case_sensitive: Optional[pulumi.Input[int]] = None,
            charge_properties: Optional[pulumi.Input[pulumi.InputType['InstanceChargePropertiesArgs']]] = None,
            doris_user_pwd: Optional[pulumi.Input[str]] = None,
            enable_multi_zones: Optional[pulumi.Input[bool]] = None,
            fe_spec: Optional[pulumi.Input[pulumi.InputType['InstanceFeSpecArgs']]] = None,
            ha_flag: Optional[pulumi.Input[bool]] = None,
            ha_type: Optional[pulumi.Input[int]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            product_version: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
            user_multi_zone_infos: Optional[pulumi.Input[pulumi.InputType['InstanceUserMultiZoneInfosArgs']]] = None,
            user_subnet_id: Optional[pulumi.Input[str]] = None,
            user_vpc_id: Optional[pulumi.Input[str]] = None,
            workload_group_status: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['InstanceBeSpecArgs']] be_spec: BE specifications.
        :param pulumi.Input[int] case_sensitive: Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
        :param pulumi.Input[pulumi.InputType['InstanceChargePropertiesArgs']] charge_properties: Payment type.
        :param pulumi.Input[str] doris_user_pwd: Database password.
        :param pulumi.Input[bool] enable_multi_zones: Whether to enable multi-availability zone.
        :param pulumi.Input[pulumi.InputType['InstanceFeSpecArgs']] fe_spec: FE specifications.
        :param pulumi.Input[bool] ha_flag: Whether it is highly available.
        :param pulumi.Input[int] ha_type: High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[str] product_version: Product version number.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group Id list.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]] tags: Tag list.
        :param pulumi.Input[pulumi.InputType['InstanceUserMultiZoneInfosArgs']] user_multi_zone_infos: After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
        :param pulumi.Input[str] user_subnet_id: User subnet ID.
        :param pulumi.Input[str] user_vpc_id: User VPCID.
        :param pulumi.Input[str] workload_group_status: Whether to enable resource group. `open` - enable, `close` - disable.
        :param pulumi.Input[str] zone: Availability zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["be_spec"] = be_spec
        __props__.__dict__["case_sensitive"] = case_sensitive
        __props__.__dict__["charge_properties"] = charge_properties
        __props__.__dict__["doris_user_pwd"] = doris_user_pwd
        __props__.__dict__["enable_multi_zones"] = enable_multi_zones
        __props__.__dict__["fe_spec"] = fe_spec
        __props__.__dict__["ha_flag"] = ha_flag
        __props__.__dict__["ha_type"] = ha_type
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["product_version"] = product_version
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["tags"] = tags
        __props__.__dict__["user_multi_zone_infos"] = user_multi_zone_infos
        __props__.__dict__["user_subnet_id"] = user_subnet_id
        __props__.__dict__["user_vpc_id"] = user_vpc_id
        __props__.__dict__["workload_group_status"] = workload_group_status
        __props__.__dict__["zone"] = zone
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="beSpec")
    def be_spec(self) -> pulumi.Output['outputs.InstanceBeSpec']:
        """
        BE specifications.
        """
        return pulumi.get(self, "be_spec")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> pulumi.Output[Optional[int]]:
        """
        Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
        """
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="chargeProperties")
    def charge_properties(self) -> pulumi.Output['outputs.InstanceChargeProperties']:
        """
        Payment type.
        """
        return pulumi.get(self, "charge_properties")

    @property
    @pulumi.getter(name="dorisUserPwd")
    def doris_user_pwd(self) -> pulumi.Output[str]:
        """
        Database password.
        """
        return pulumi.get(self, "doris_user_pwd")

    @property
    @pulumi.getter(name="enableMultiZones")
    def enable_multi_zones(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable multi-availability zone.
        """
        return pulumi.get(self, "enable_multi_zones")

    @property
    @pulumi.getter(name="feSpec")
    def fe_spec(self) -> pulumi.Output['outputs.InstanceFeSpec']:
        """
        FE specifications.
        """
        return pulumi.get(self, "fe_spec")

    @property
    @pulumi.getter(name="haFlag")
    def ha_flag(self) -> pulumi.Output[bool]:
        """
        Whether it is highly available.
        """
        return pulumi.get(self, "ha_flag")

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> pulumi.Output[Optional[int]]:
        """
        High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
        """
        return pulumi.get(self, "ha_type")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> pulumi.Output[str]:
        """
        Product version number.
        """
        return pulumi.get(self, "product_version")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security Group Id list.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceTag']]]:
        """
        Tag list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userMultiZoneInfos")
    def user_multi_zone_infos(self) -> pulumi.Output[Optional['outputs.InstanceUserMultiZoneInfos']]:
        """
        After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
        """
        return pulumi.get(self, "user_multi_zone_infos")

    @property
    @pulumi.getter(name="userSubnetId")
    def user_subnet_id(self) -> pulumi.Output[str]:
        """
        User subnet ID.
        """
        return pulumi.get(self, "user_subnet_id")

    @property
    @pulumi.getter(name="userVpcId")
    def user_vpc_id(self) -> pulumi.Output[str]:
        """
        User VPCID.
        """
        return pulumi.get(self, "user_vpc_id")

    @property
    @pulumi.getter(name="workloadGroupStatus")
    def workload_group_status(self) -> pulumi.Output[str]:
        """
        Whether to enable resource group. `open` - enable, `close` - disable.
        """
        return pulumi.get(self, "workload_group_status")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone")

