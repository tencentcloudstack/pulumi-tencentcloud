# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceBeSpec',
    'InstanceChargeProperties',
    'InstanceFeSpec',
    'InstanceTag',
    'InstanceUserMultiZoneInfos',
    'WorkloadGroupWorkloadGroup',
    'GetInstancesInstancesListResult',
    'GetInstancesInstancesListCoreSummaryResult',
    'GetInstancesInstancesListCoreSummaryAttachCbsSpecResult',
    'GetInstancesInstancesListMasterSummaryResult',
    'GetInstancesInstancesListMasterSummaryAttachCbsSpecResult',
    'GetInstancesInstancesListTagResult',
    'GetInstancesSearchTagResult',
]

@pulumi.output_type
class InstanceBeSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "specName":
            suggest = "spec_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceBeSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceBeSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceBeSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 disk_size: int,
                 spec_name: str):
        """
        :param int count: Quantities.
        :param int disk_size: Cloud disk size.
        :param str spec_name: Specification name.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "spec_name", spec_name)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Quantities.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Cloud disk size.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        """
        Specification name.
        """
        return pulumi.get(self, "spec_name")


@pulumi.output_type
class InstanceChargeProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chargeType":
            suggest = "charge_type"
        elif key == "renewFlag":
            suggest = "renew_flag"
        elif key == "timeSpan":
            suggest = "time_span"
        elif key == "timeUnit":
            suggest = "time_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceChargeProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceChargeProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceChargeProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 charge_type: Optional[str] = None,
                 renew_flag: Optional[int] = None,
                 time_span: Optional[int] = None,
                 time_unit: Optional[str] = None):
        """
        :param str charge_type: Billing type: `PREPAID` for prepayment, and `POSTPAID_BY_HOUR` for postpayment. Note: This field may return null, indicating that no valid values can be obtained.
        :param int renew_flag: Whether to automatically renew. 1 means automatic renewal is enabled. Note: This field may return null, indicating that no valid values can be obtained.
        :param int time_span: Billing duration Note: This field may return null, indicating that no valid values can be obtained.
        :param str time_unit: Billing time unit, and `m` means month, etc. Note: This field may return null, indicating that no valid values can be obtained.
        """
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[str]:
        """
        Billing type: `PREPAID` for prepayment, and `POSTPAID_BY_HOUR` for postpayment. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[int]:
        """
        Whether to automatically renew. 1 means automatic renewal is enabled. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[int]:
        """
        Billing duration Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "time_span")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[str]:
        """
        Billing time unit, and `m` means month, etc. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "time_unit")


@pulumi.output_type
class InstanceFeSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "specName":
            suggest = "spec_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceFeSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceFeSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceFeSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 disk_size: int,
                 spec_name: str):
        """
        :param int count: Quantities.
        :param int disk_size: Cloud disk size.
        :param str spec_name: Specification name.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "spec_name", spec_name)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Quantities.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Cloud disk size.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        """
        Specification name.
        """
        return pulumi.get(self, "spec_name")


@pulumi.output_type
class InstanceTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class InstanceUserMultiZoneInfos(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "subnetIpNum":
            suggest = "subnet_ip_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceUserMultiZoneInfos. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceUserMultiZoneInfos.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceUserMultiZoneInfos.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[str] = None,
                 subnet_ip_num: Optional[int] = None,
                 zone: Optional[str] = None):
        """
        :param str subnet_id: Subnet ID Note: This field may return null, indicating that no valid values can be obtained.
        :param int subnet_ip_num: The number of available IP addresses in the current subnet Note: This field may return null, indicating that no valid values can be obtained.
        :param str zone: Availability zone Note: This field may return null, indicating that no valid values can be obtained.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if subnet_ip_num is not None:
            pulumi.set(__self__, "subnet_ip_num", subnet_ip_num)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Subnet ID Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetIpNum")
    def subnet_ip_num(self) -> Optional[int]:
        """
        The number of available IP addresses in the current subnet Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subnet_ip_num")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        Availability zone Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class WorkloadGroupWorkloadGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuHardLimit":
            suggest = "cpu_hard_limit"
        elif key == "cpuShare":
            suggest = "cpu_share"
        elif key == "enableMemoryOverCommit":
            suggest = "enable_memory_over_commit"
        elif key == "memoryLimit":
            suggest = "memory_limit"
        elif key == "workloadGroupName":
            suggest = "workload_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadGroupWorkloadGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadGroupWorkloadGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadGroupWorkloadGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_hard_limit: Optional[str] = None,
                 cpu_share: Optional[int] = None,
                 enable_memory_over_commit: Optional[bool] = None,
                 memory_limit: Optional[int] = None,
                 workload_group_name: Optional[str] = None):
        """
        :param str cpu_hard_limit: Cpu hard limit. Note: This field may return null, indicating that no valid value can be obtained.
        :param int cpu_share: CPU weight. Note: This field may return null, indicating that no valid value can be obtained.
        :param bool enable_memory_over_commit: Whether to allow over-allocation. Note: This field may return null, indicating that no valid value can be obtained.
        :param int memory_limit: Memory limit, the sum of the memory limit values of all resource groups should be less than or equal to 100. Note: This field may return null, indicating that no valid value can be obtained.
        :param str workload_group_name: Workload group name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if cpu_hard_limit is not None:
            pulumi.set(__self__, "cpu_hard_limit", cpu_hard_limit)
        if cpu_share is not None:
            pulumi.set(__self__, "cpu_share", cpu_share)
        if enable_memory_over_commit is not None:
            pulumi.set(__self__, "enable_memory_over_commit", enable_memory_over_commit)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if workload_group_name is not None:
            pulumi.set(__self__, "workload_group_name", workload_group_name)

    @property
    @pulumi.getter(name="cpuHardLimit")
    def cpu_hard_limit(self) -> Optional[str]:
        """
        Cpu hard limit. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cpu_hard_limit")

    @property
    @pulumi.getter(name="cpuShare")
    def cpu_share(self) -> Optional[int]:
        """
        CPU weight. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cpu_share")

    @property
    @pulumi.getter(name="enableMemoryOverCommit")
    def enable_memory_over_commit(self) -> Optional[bool]:
        """
        Whether to allow over-allocation. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "enable_memory_over_commit")

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[int]:
        """
        Memory limit, the sum of the memory limit values of all resource groups should be less than or equal to 100. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "memory_limit")

    @property
    @pulumi.getter(name="workloadGroupName")
    def workload_group_name(self) -> Optional[str]:
        """
        Workload group name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "workload_group_name")


@pulumi.output_type
class GetInstancesInstancesListResult(dict):
    def __init__(__self__, *,
                 access_info: str,
                 bind_sgs: Sequence[str],
                 build_version: str,
                 can_attach_cbs: bool,
                 case_sensitive: int,
                 characteristics: Sequence[str],
                 cls_log_set_id: str,
                 cls_topic_id: str,
                 components: str,
                 cool_down_bucket: str,
                 core_summary: 'outputs.GetInstancesInstancesListCoreSummaryResult',
                 cos_bucket_name: str,
                 cos_move_factor: int,
                 create_time: str,
                 eip: str,
                 enable_cool_down: int,
                 enable_multi_zones: bool,
                 enable_xml_config: int,
                 expire_time: str,
                 flow_msg: str,
                 grace_shutdown_wait_seconds: str,
                 ha: str,
                 ha_type: int,
                 has_cls_topic: bool,
                 id: int,
                 instance_id: str,
                 instance_name: str,
                 is_white_sgs: bool,
                 kind: str,
                 master_summary: 'outputs.GetInstancesInstancesListMasterSummaryResult',
                 monitor: str,
                 pay_mode: str,
                 region: str,
                 region_desc: str,
                 region_id: int,
                 renew_flag: bool,
                 restart_timeout: str,
                 status: str,
                 status_desc: str,
                 subnet_id: str,
                 tags: Sequence['outputs.GetInstancesInstancesListTagResult'],
                 user_network_infos: str,
                 version: str,
                 vpc_id: str,
                 zone: str,
                 zone_desc: str):
        """
        :param str access_info: Access address. Example: 10.0.0.1:9000. Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence[str] bind_sgs: Bound security group information. Note: This field may return null, indicating that no valid values can be obtained.
        :param str build_version: Minor versions. Note: This field may return null, indicating that no valid values can be obtained.
        :param bool can_attach_cbs: cbs. Note: This field may return null, indicating that no valid values can be obtained.
        :param int case_sensitive: Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.. Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence[str] characteristics: Page features, used to block some page entrances on the front end.. Note: This field may return null, indicating that no valid values can be obtained.
        :param str cls_log_set_id: Logset ID. Note: This field may return null, indicating that no valid values can be obtained.
        :param str cls_topic_id: Log Topic ID. Note: This field may return null, indicating that no valid values can be obtained.
        :param str components: Component Information. Note: The return type here is map[string]struct, not the string type displayed. You can refer to Sample Value to parse the data. Note: This field may return null, indicating that no valid values can be obtained.
        :param str cool_down_bucket: COS buckets are used for hot and cold stratification. Note: This field may return null, indicating that no valid values can be obtained.
        :param 'GetInstancesInstancesListCoreSummaryArgs' core_summary: Zookeeper node description information. Note: This field may return null, indicating that no valid values can be obtained.
        :param str cos_bucket_name: COS bucket. Note: This field may return null, indicating that no valid values can be obtained.
        :param int cos_move_factor: Cold and hot stratification coefficient. Note: This field may return null, indicating that no valid values can be obtained.
        :param str create_time: Creation time. Note: This field may return null, indicating that no valid values can be obtained.
        :param str eip: Elastic network interface address. Note: This field may return null, indicating that no valid values can be obtained.
        :param int enable_cool_down: Whether to enable hot and cold stratification. 0 refers to disabled, and 1 refers to enabled.. Note: This field may return null, indicating that no valid values can be obtained.
        :param bool enable_multi_zones: Whether it is a multi-AZ.. Note: This field may return null, indicating that no valid values can be obtained.
        :param int enable_xml_config: Whether to support XML configuration management. Note: This field may return null, indicating that no valid values can be obtained.
        :param str expire_time: Expiration time. Note: This field may return null, indicating that no valid values can be obtained.
        :param str flow_msg: Error process description information. Note: This field may return null, indicating that no valid values can be obtained.
        :param str grace_shutdown_wait_seconds: The timeout time for the graceful restart of the kernel. If it is -1, it means it is not set.. Note: This field may return null, indicating that no valid values can be obtained.
        :param str ha: High availability, being true or false. Note: This field may return null, indicating that no valid values can be obtained.
        :param int ha_type: High availability type: 0: non-high availability. 1: read high availability. 2: read-write high availability. Note: This field may return null, indicating that no valid values can be obtained.
        :param bool has_cls_topic: Whether to enable logs. Note: This field may return null, indicating that no valid values can be obtained.
        :param int id: Record ID, in numerical type. Note: This field may return null, indicating that no valid values can be obtained.
        :param str instance_id: Cluster instance ID, `cdw-xxxx` string type. Note: This field may return null, indicating that no valid values can be obtained.
        :param str instance_name: Cluster instance name. Note: This field may return null, indicating that no valid values can be obtained.
        :param bool is_white_sgs: Whether users can bind security groups.. Note: This field may return null, indicating that no valid values can be obtained.
        :param str kind: external/local/yunti. Note: This field may return null, indicating that no valid values can be obtained.
        :param 'GetInstancesInstancesListMasterSummaryArgs' master_summary: Data node description information. Note: This field may return null, indicating that no valid values can be obtained.
        :param str monitor: Monitoring Information. Note: This field may return null, indicating that no valid values can be obtained.
        :param str pay_mode: Payment type: hour and prepay. Note: This field may return null, indicating that no valid values can be obtained.
        :param str region: Region, ap-guangzhou. Note: This field may return null, indicating that no valid values can be obtained.
        :param str region_desc: Region. Note: This field may return null, indicating that no valid values can be obtained.
        :param int region_id: Region ID, indicating the region. Note: This field may return null, indicating that no valid values can be obtained.
        :param bool renew_flag: Automatic renewal marker. Note: This field may return null, indicating that no valid values can be obtained.
        :param str restart_timeout: Timeout period, in seconds. Note: This field may return null, indicating that no valid values can be obtained.
        :param str status: Status,. Init is being created. Serving is running. Deleted indicates the cluster has been terminated. Deleting indicates the cluster is being terminated. Modify indicates the cluster is being changed. Note: This field may return null, indicating that no valid values can be obtained.
        :param str status_desc: Status description, such as `running`. Note: This field may return null, indicating that no valid values can be obtained.
        :param str subnet_id: Subnet name. Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetInstancesInstancesListTagArgs'] tags: Tag list. Note: This field may return null, indicating that no valid values can be obtained.
        :param str user_network_infos: User availability zone and subnet information. Note: This field may return null, indicating that no valid values can be obtained.
        :param str version: Version. Note: This field may return null, indicating that no valid values can be obtained.
        :param str vpc_id: VPC name. Note: This field may return null, indicating that no valid values can be obtained.
        :param str zone: Availability zone, ap-guangzhou-3. Note: This field may return null, indicating that no valid values can be obtained.
        :param str zone_desc: Note about availability zone, such as Guangzhou Zone 2. Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "access_info", access_info)
        pulumi.set(__self__, "bind_sgs", bind_sgs)
        pulumi.set(__self__, "build_version", build_version)
        pulumi.set(__self__, "can_attach_cbs", can_attach_cbs)
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        pulumi.set(__self__, "characteristics", characteristics)
        pulumi.set(__self__, "cls_log_set_id", cls_log_set_id)
        pulumi.set(__self__, "cls_topic_id", cls_topic_id)
        pulumi.set(__self__, "components", components)
        pulumi.set(__self__, "cool_down_bucket", cool_down_bucket)
        pulumi.set(__self__, "core_summary", core_summary)
        pulumi.set(__self__, "cos_bucket_name", cos_bucket_name)
        pulumi.set(__self__, "cos_move_factor", cos_move_factor)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "eip", eip)
        pulumi.set(__self__, "enable_cool_down", enable_cool_down)
        pulumi.set(__self__, "enable_multi_zones", enable_multi_zones)
        pulumi.set(__self__, "enable_xml_config", enable_xml_config)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "flow_msg", flow_msg)
        pulumi.set(__self__, "grace_shutdown_wait_seconds", grace_shutdown_wait_seconds)
        pulumi.set(__self__, "ha", ha)
        pulumi.set(__self__, "ha_type", ha_type)
        pulumi.set(__self__, "has_cls_topic", has_cls_topic)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "is_white_sgs", is_white_sgs)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "master_summary", master_summary)
        pulumi.set(__self__, "monitor", monitor)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_desc", region_desc)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "renew_flag", renew_flag)
        pulumi.set(__self__, "restart_timeout", restart_timeout)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "user_network_infos", user_network_infos)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_desc", zone_desc)

    @property
    @pulumi.getter(name="accessInfo")
    def access_info(self) -> str:
        """
        Access address. Example: 10.0.0.1:9000. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "access_info")

    @property
    @pulumi.getter(name="bindSGs")
    def bind_sgs(self) -> Sequence[str]:
        """
        Bound security group information. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "bind_sgs")

    @property
    @pulumi.getter(name="buildVersion")
    def build_version(self) -> str:
        """
        Minor versions. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "build_version")

    @property
    @pulumi.getter(name="canAttachCbs")
    def can_attach_cbs(self) -> bool:
        """
        cbs. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "can_attach_cbs")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> int:
        """
        Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter
    def characteristics(self) -> Sequence[str]:
        """
        Page features, used to block some page entrances on the front end.. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "characteristics")

    @property
    @pulumi.getter(name="clsLogSetId")
    def cls_log_set_id(self) -> str:
        """
        Logset ID. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "cls_log_set_id")

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> str:
        """
        Log Topic ID. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "cls_topic_id")

    @property
    @pulumi.getter
    def components(self) -> str:
        """
        Component Information. Note: The return type here is map[string]struct, not the string type displayed. You can refer to Sample Value to parse the data. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter(name="coolDownBucket")
    def cool_down_bucket(self) -> str:
        """
        COS buckets are used for hot and cold stratification. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "cool_down_bucket")

    @property
    @pulumi.getter(name="coreSummary")
    def core_summary(self) -> 'outputs.GetInstancesInstancesListCoreSummaryResult':
        """
        Zookeeper node description information. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "core_summary")

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> str:
        """
        COS bucket. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "cos_bucket_name")

    @property
    @pulumi.getter(name="cosMoveFactor")
    def cos_move_factor(self) -> int:
        """
        Cold and hot stratification coefficient. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "cos_move_factor")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def eip(self) -> str:
        """
        Elastic network interface address. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "eip")

    @property
    @pulumi.getter(name="enableCoolDown")
    def enable_cool_down(self) -> int:
        """
        Whether to enable hot and cold stratification. 0 refers to disabled, and 1 refers to enabled.. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "enable_cool_down")

    @property
    @pulumi.getter(name="enableMultiZones")
    def enable_multi_zones(self) -> bool:
        """
        Whether it is a multi-AZ.. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "enable_multi_zones")

    @property
    @pulumi.getter(name="enableXmlConfig")
    def enable_xml_config(self) -> int:
        """
        Whether to support XML configuration management. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "enable_xml_config")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Expiration time. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="flowMsg")
    def flow_msg(self) -> str:
        """
        Error process description information. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "flow_msg")

    @property
    @pulumi.getter(name="graceShutdownWaitSeconds")
    def grace_shutdown_wait_seconds(self) -> str:
        """
        The timeout time for the graceful restart of the kernel. If it is -1, it means it is not set.. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "grace_shutdown_wait_seconds")

    @property
    @pulumi.getter
    def ha(self) -> str:
        """
        High availability, being true or false. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "ha")

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> int:
        """
        High availability type: 0: non-high availability. 1: read high availability. 2: read-write high availability. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "ha_type")

    @property
    @pulumi.getter(name="hasClsTopic")
    def has_cls_topic(self) -> bool:
        """
        Whether to enable logs. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "has_cls_topic")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Record ID, in numerical type. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Cluster instance ID, `cdw-xxxx` string type. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Cluster instance name. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="isWhiteSGs")
    def is_white_sgs(self) -> bool:
        """
        Whether users can bind security groups.. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_white_sgs")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        external/local/yunti. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="masterSummary")
    def master_summary(self) -> 'outputs.GetInstancesInstancesListMasterSummaryResult':
        """
        Data node description information. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "master_summary")

    @property
    @pulumi.getter
    def monitor(self) -> str:
        """
        Monitoring Information. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> str:
        """
        Payment type: hour and prepay. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region, ap-guangzhou. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionDesc")
    def region_desc(self) -> str:
        """
        Region. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "region_desc")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Region ID, indicating the region. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> bool:
        """
        Automatic renewal marker. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="restartTimeout")
    def restart_timeout(self) -> str:
        """
        Timeout period, in seconds. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "restart_timeout")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status,. Init is being created. Serving is running. Deleted indicates the cluster has been terminated. Deleting indicates the cluster is being terminated. Modify indicates the cluster is being changed. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        """
        Status description, such as `running`. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet name. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetInstancesInstancesListTagResult']:
        """
        Tag list. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userNetworkInfos")
    def user_network_infos(self) -> str:
        """
        User availability zone and subnet information. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "user_network_infos")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC name. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Availability zone, ap-guangzhou-3. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneDesc")
    def zone_desc(self) -> str:
        """
        Note about availability zone, such as Guangzhou Zone 2. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "zone_desc")


@pulumi.output_type
class GetInstancesInstancesListCoreSummaryResult(dict):
    def __init__(__self__, *,
                 attach_cbs_spec: 'outputs.GetInstancesInstancesListCoreSummaryAttachCbsSpecResult',
                 core: int,
                 disk: int,
                 disk_count: int,
                 disk_desc: str,
                 disk_type: str,
                 encrypt: int,
                 max_disk_size: int,
                 memory: int,
                 node_size: int,
                 spec: str,
                 spec_core: int,
                 spec_memory: int,
                 sub_product_type: str):
        """
        :param 'GetInstancesInstancesListCoreSummaryAttachCbsSpecArgs' attach_cbs_spec: Information of mounted cloud disks. Note: This field may return null, indicating that no valid values can be obtained.
        :param int core: Number of CPU cores, in counts.
        :param int disk: Disk size, in GB.
        :param int disk_count: Disk size. Note: This field may return null, indicating that no valid values can be obtained.
        :param str disk_desc: Disk description.
        :param str disk_type: Disk type.
        :param int encrypt: Whether it is encrypted.. Note: This field may return null, indicating that no valid values can be obtained.
        :param int max_disk_size: Maximum disk. Note: This field may return null, indicating that no valid values can be obtained.
        :param int memory: Memory size, in GB.
        :param int node_size: Number of nodes.
        :param str spec: Model, such as S1.
        :param int spec_core: Specified cores. Note: This field may return null, indicating that no valid values can be obtained.
        :param int spec_memory: Specified memory. Note: This field may return null, indicating that no valid values can be obtained.
        :param str sub_product_type: Sub-product name. Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "attach_cbs_spec", attach_cbs_spec)
        pulumi.set(__self__, "core", core)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "disk_count", disk_count)
        pulumi.set(__self__, "disk_desc", disk_desc)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "max_disk_size", max_disk_size)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_size", node_size)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "spec_core", spec_core)
        pulumi.set(__self__, "spec_memory", spec_memory)
        pulumi.set(__self__, "sub_product_type", sub_product_type)

    @property
    @pulumi.getter(name="attachCbsSpec")
    def attach_cbs_spec(self) -> 'outputs.GetInstancesInstancesListCoreSummaryAttachCbsSpecResult':
        """
        Information of mounted cloud disks. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "attach_cbs_spec")

    @property
    @pulumi.getter
    def core(self) -> int:
        """
        Number of CPU cores, in counts.
        """
        return pulumi.get(self, "core")

    @property
    @pulumi.getter
    def disk(self) -> int:
        """
        Disk size, in GB.
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> int:
        """
        Disk size. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="diskDesc")
    def disk_desc(self) -> str:
        """
        Disk description.
        """
        return pulumi.get(self, "disk_desc")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> int:
        """
        Whether it is encrypted.. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="maxDiskSize")
    def max_disk_size(self) -> int:
        """
        Maximum disk. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "max_disk_size")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory size, in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeSize")
    def node_size(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_size")

    @property
    @pulumi.getter
    def spec(self) -> str:
        """
        Model, such as S1.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="specCore")
    def spec_core(self) -> int:
        """
        Specified cores. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "spec_core")

    @property
    @pulumi.getter(name="specMemory")
    def spec_memory(self) -> int:
        """
        Specified memory. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "spec_memory")

    @property
    @pulumi.getter(name="subProductType")
    def sub_product_type(self) -> str:
        """
        Sub-product name. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "sub_product_type")


@pulumi.output_type
class GetInstancesInstancesListCoreSummaryAttachCbsSpecResult(dict):
    def __init__(__self__, *,
                 disk_count: Optional[int] = None,
                 disk_desc: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None):
        """
        :param int disk_count: Total number of disks.
        :param str disk_desc: Description.
        :param int disk_size: Disk capacity, in GB.
        :param str disk_type: Node disk type, such as CLOUD_SSD, CLOUD_PREMIUM.
        """
        if disk_count is not None:
            pulumi.set(__self__, "disk_count", disk_count)
        if disk_desc is not None:
            pulumi.set(__self__, "disk_desc", disk_desc)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> Optional[int]:
        """
        Total number of disks.
        """
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="diskDesc")
    def disk_desc(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "disk_desc")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Disk capacity, in GB.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Node disk type, such as CLOUD_SSD, CLOUD_PREMIUM.
        """
        return pulumi.get(self, "disk_type")


@pulumi.output_type
class GetInstancesInstancesListMasterSummaryResult(dict):
    def __init__(__self__, *,
                 attach_cbs_spec: 'outputs.GetInstancesInstancesListMasterSummaryAttachCbsSpecResult',
                 core: int,
                 disk: int,
                 disk_count: int,
                 disk_desc: str,
                 disk_type: str,
                 encrypt: int,
                 max_disk_size: int,
                 memory: int,
                 node_size: int,
                 spec: str,
                 spec_core: int,
                 spec_memory: int,
                 sub_product_type: str):
        """
        :param 'GetInstancesInstancesListMasterSummaryAttachCbsSpecArgs' attach_cbs_spec: Information of mounted cloud disks. Note: This field may return null, indicating that no valid values can be obtained.
        :param int core: Number of CPU cores, in counts.
        :param int disk: Disk size, in GB.
        :param int disk_count: Disk size. Note: This field may return null, indicating that no valid values can be obtained.
        :param str disk_desc: Disk description.
        :param str disk_type: Disk type.
        :param int encrypt: Whether it is encrypted.. Note: This field may return null, indicating that no valid values can be obtained.
        :param int max_disk_size: Maximum disk. Note: This field may return null, indicating that no valid values can be obtained.
        :param int memory: Memory size, in GB.
        :param int node_size: Number of nodes.
        :param str spec: Model, such as S1.
        :param int spec_core: Specified cores. Note: This field may return null, indicating that no valid values can be obtained.
        :param int spec_memory: Specified memory. Note: This field may return null, indicating that no valid values can be obtained.
        :param str sub_product_type: Sub-product name. Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "attach_cbs_spec", attach_cbs_spec)
        pulumi.set(__self__, "core", core)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "disk_count", disk_count)
        pulumi.set(__self__, "disk_desc", disk_desc)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "max_disk_size", max_disk_size)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_size", node_size)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "spec_core", spec_core)
        pulumi.set(__self__, "spec_memory", spec_memory)
        pulumi.set(__self__, "sub_product_type", sub_product_type)

    @property
    @pulumi.getter(name="attachCbsSpec")
    def attach_cbs_spec(self) -> 'outputs.GetInstancesInstancesListMasterSummaryAttachCbsSpecResult':
        """
        Information of mounted cloud disks. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "attach_cbs_spec")

    @property
    @pulumi.getter
    def core(self) -> int:
        """
        Number of CPU cores, in counts.
        """
        return pulumi.get(self, "core")

    @property
    @pulumi.getter
    def disk(self) -> int:
        """
        Disk size, in GB.
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> int:
        """
        Disk size. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="diskDesc")
    def disk_desc(self) -> str:
        """
        Disk description.
        """
        return pulumi.get(self, "disk_desc")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Disk type.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> int:
        """
        Whether it is encrypted.. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="maxDiskSize")
    def max_disk_size(self) -> int:
        """
        Maximum disk. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "max_disk_size")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory size, in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeSize")
    def node_size(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_size")

    @property
    @pulumi.getter
    def spec(self) -> str:
        """
        Model, such as S1.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="specCore")
    def spec_core(self) -> int:
        """
        Specified cores. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "spec_core")

    @property
    @pulumi.getter(name="specMemory")
    def spec_memory(self) -> int:
        """
        Specified memory. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "spec_memory")

    @property
    @pulumi.getter(name="subProductType")
    def sub_product_type(self) -> str:
        """
        Sub-product name. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "sub_product_type")


@pulumi.output_type
class GetInstancesInstancesListMasterSummaryAttachCbsSpecResult(dict):
    def __init__(__self__, *,
                 disk_count: Optional[int] = None,
                 disk_desc: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None):
        """
        :param int disk_count: Total number of disks.
        :param str disk_desc: Description.
        :param int disk_size: Disk capacity, in GB.
        :param str disk_type: Node disk type, such as CLOUD_SSD, CLOUD_PREMIUM.
        """
        if disk_count is not None:
            pulumi.set(__self__, "disk_count", disk_count)
        if disk_desc is not None:
            pulumi.set(__self__, "disk_desc", disk_desc)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> Optional[int]:
        """
        Total number of disks.
        """
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="diskDesc")
    def disk_desc(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "disk_desc")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Disk capacity, in GB.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Node disk type, such as CLOUD_SSD, CLOUD_PREMIUM.
        """
        return pulumi.get(self, "disk_type")


@pulumi.output_type
class GetInstancesInstancesListTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetInstancesSearchTagResult(dict):
    def __init__(__self__, *,
                 all_value: Optional[int] = None,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        """
        :param int all_value: 1 means only the tag key is entered without a value, and 0 means both the key and the value are entered.
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        if all_value is not None:
            pulumi.set(__self__, "all_value", all_value)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="allValue")
    def all_value(self) -> Optional[int]:
        """
        1 means only the tag key is entered without a value, and 0 means both the key and the value are entered.
        """
        return pulumi.get(self, "all_value")

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


