# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkspacesArgs', 'Workspaces']

@pulumi.input_type
class WorkspacesArgs:
    def __init__(__self__, *,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesDataDiskArgs']]]] = None,
                 disaster_recover_group_id: Optional[pulumi.Input[str]] = None,
                 enhanced_service: Optional[pulumi.Input['WorkspacesEnhancedServiceArgs']] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 internet_accessible: Optional[pulumi.Input['WorkspacesInternetAccessibleArgs']] = None,
                 login_settings: Optional[pulumi.Input['WorkspacesLoginSettingsArgs']] = None,
                 placement: Optional[pulumi.Input['WorkspacesPlacementArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_charge_prepaid: Optional[pulumi.Input['WorkspacesSpaceChargePrepaidArgs']] = None,
                 space_charge_type: Optional[pulumi.Input[str]] = None,
                 space_name: Optional[pulumi.Input[str]] = None,
                 space_type: Optional[pulumi.Input[str]] = None,
                 system_disk: Optional[pulumi.Input['WorkspacesSystemDiskArgs']] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesTagSpecificationArgs']]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 virtual_private_cloud: Optional[pulumi.Input['WorkspacesVirtualPrivateCloudArgs']] = None):
        """
        The set of arguments for constructing a Workspaces resource.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[str] client_token: A string used to ensure the idempotence of the request. This string is generated by the customer and must be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed. Example value: system-f3827db9-c58a-49cc-bf10-33fc1923a34a.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspacesDataDiskArgs']]] data_disks: Workspace data disk information.
        :param pulumi.Input[str] disaster_recover_group_id: Placement Group ID.
        :param pulumi.Input['WorkspacesEnhancedServiceArgs'] enhanced_service: Enhanced Services.
        :param pulumi.Input[str] host_name: The hostname of the instance. Windows instance: The name should be a combination of 2 to 15 characters comprised of letters (case insensitive), numbers, and hyphens (-). Period (.) is not supported, and the name cannot be a string of pure numbers. Other types (such as Linux) of instances: The name should be a combination of 2 to 60 characters, supporting multiple periods (.). The piece between two periods is composed of letters (case insensitive), numbers, and hyphens (-). Modifying will cause the instance reset.
        :param pulumi.Input[str] hpc_cluster_id: Hyper Computing Cluster ID.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input['WorkspacesInternetAccessibleArgs'] internet_accessible: Public network bandwidth settings.
        :param pulumi.Input['WorkspacesLoginSettingsArgs'] login_settings: Workspace Login Settings.
        :param pulumi.Input['WorkspacesPlacementArgs'] placement: The position of the instance. This parameter allows you to specify attributes such as the availability zone, project, and host machine (when creating a sub-instance on CDH) that the instance belongs to. Note: If you do not specify the LaunchTemplate parameter, Placement is a mandatory parameter. If both Placement and LaunchTemplate are passed, the values in Placement override the corresponding values in LaunchTemplate by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Workspace Security Group.
        :param pulumi.Input['WorkspacesSpaceChargePrepaidArgs'] space_charge_prepaid: Prepaid mode: This refers to the parameters related to the annual and monthly subscription. By this parameter, you can specify the purchase duration of the prepaid instances, whether to set auto-renewal, and other attributes. If the instance's billing mode is prepaid, this parameter is required.
        :param pulumi.Input[str] space_charge_type: Workspace billing type.
        :param pulumi.Input[str] space_name: Workspace Display Name.
        :param pulumi.Input[str] space_type: Workspace specifications.
        :param pulumi.Input['WorkspacesSystemDiskArgs'] system_disk: Workspace system disk information.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspacesTagSpecificationArgs']]] tag_specifications: Tag Description List.
        :param pulumi.Input[str] user_data: User Data for Workspace.
        :param pulumi.Input['WorkspacesVirtualPrivateCloudArgs'] virtual_private_cloud: VPC related information.
        """
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if disaster_recover_group_id is not None:
            pulumi.set(__self__, "disaster_recover_group_id", disaster_recover_group_id)
        if enhanced_service is not None:
            pulumi.set(__self__, "enhanced_service", enhanced_service)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hpc_cluster_id is not None:
            pulumi.set(__self__, "hpc_cluster_id", hpc_cluster_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if internet_accessible is not None:
            pulumi.set(__self__, "internet_accessible", internet_accessible)
        if login_settings is not None:
            pulumi.set(__self__, "login_settings", login_settings)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if space_charge_prepaid is not None:
            pulumi.set(__self__, "space_charge_prepaid", space_charge_prepaid)
        if space_charge_type is not None:
            pulumi.set(__self__, "space_charge_type", space_charge_type)
        if space_name is not None:
            pulumi.set(__self__, "space_name", space_name)
        if space_type is not None:
            pulumi.set(__self__, "space_type", space_type)
        if system_disk is not None:
            pulumi.set(__self__, "system_disk", system_disk)
        if tag_specifications is not None:
            pulumi.set(__self__, "tag_specifications", tag_specifications)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if virtual_private_cloud is not None:
            pulumi.set(__self__, "virtual_private_cloud", virtual_private_cloud)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        A string used to ensure the idempotence of the request. This string is generated by the customer and must be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed. Example value: system-f3827db9-c58a-49cc-bf10-33fc1923a34a.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesDataDiskArgs']]]]:
        """
        Workspace data disk information.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="disasterRecoverGroupId")
    def disaster_recover_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Placement Group ID.
        """
        return pulumi.get(self, "disaster_recover_group_id")

    @disaster_recover_group_id.setter
    def disaster_recover_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disaster_recover_group_id", value)

    @property
    @pulumi.getter(name="enhancedService")
    def enhanced_service(self) -> Optional[pulumi.Input['WorkspacesEnhancedServiceArgs']]:
        """
        Enhanced Services.
        """
        return pulumi.get(self, "enhanced_service")

    @enhanced_service.setter
    def enhanced_service(self, value: Optional[pulumi.Input['WorkspacesEnhancedServiceArgs']]):
        pulumi.set(self, "enhanced_service", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname of the instance. Windows instance: The name should be a combination of 2 to 15 characters comprised of letters (case insensitive), numbers, and hyphens (-). Period (.) is not supported, and the name cannot be a string of pure numbers. Other types (such as Linux) of instances: The name should be a combination of 2 to 60 characters, supporting multiple periods (.). The piece between two periods is composed of letters (case insensitive), numbers, and hyphens (-). Modifying will cause the instance reset.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Hyper Computing Cluster ID.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @hpc_cluster_id.setter
    def hpc_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hpc_cluster_id", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Image ID.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="internetAccessible")
    def internet_accessible(self) -> Optional[pulumi.Input['WorkspacesInternetAccessibleArgs']]:
        """
        Public network bandwidth settings.
        """
        return pulumi.get(self, "internet_accessible")

    @internet_accessible.setter
    def internet_accessible(self, value: Optional[pulumi.Input['WorkspacesInternetAccessibleArgs']]):
        pulumi.set(self, "internet_accessible", value)

    @property
    @pulumi.getter(name="loginSettings")
    def login_settings(self) -> Optional[pulumi.Input['WorkspacesLoginSettingsArgs']]:
        """
        Workspace Login Settings.
        """
        return pulumi.get(self, "login_settings")

    @login_settings.setter
    def login_settings(self, value: Optional[pulumi.Input['WorkspacesLoginSettingsArgs']]):
        pulumi.set(self, "login_settings", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['WorkspacesPlacementArgs']]:
        """
        The position of the instance. This parameter allows you to specify attributes such as the availability zone, project, and host machine (when creating a sub-instance on CDH) that the instance belongs to. Note: If you do not specify the LaunchTemplate parameter, Placement is a mandatory parameter. If both Placement and LaunchTemplate are passed, the values in Placement override the corresponding values in LaunchTemplate by default.
        """
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['WorkspacesPlacementArgs']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Workspace Security Group.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="spaceChargePrepaid")
    def space_charge_prepaid(self) -> Optional[pulumi.Input['WorkspacesSpaceChargePrepaidArgs']]:
        """
        Prepaid mode: This refers to the parameters related to the annual and monthly subscription. By this parameter, you can specify the purchase duration of the prepaid instances, whether to set auto-renewal, and other attributes. If the instance's billing mode is prepaid, this parameter is required.
        """
        return pulumi.get(self, "space_charge_prepaid")

    @space_charge_prepaid.setter
    def space_charge_prepaid(self, value: Optional[pulumi.Input['WorkspacesSpaceChargePrepaidArgs']]):
        pulumi.set(self, "space_charge_prepaid", value)

    @property
    @pulumi.getter(name="spaceChargeType")
    def space_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace billing type.
        """
        return pulumi.get(self, "space_charge_type")

    @space_charge_type.setter
    def space_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_charge_type", value)

    @property
    @pulumi.getter(name="spaceName")
    def space_name(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace Display Name.
        """
        return pulumi.get(self, "space_name")

    @space_name.setter
    def space_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_name", value)

    @property
    @pulumi.getter(name="spaceType")
    def space_type(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace specifications.
        """
        return pulumi.get(self, "space_type")

    @space_type.setter
    def space_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_type", value)

    @property
    @pulumi.getter(name="systemDisk")
    def system_disk(self) -> Optional[pulumi.Input['WorkspacesSystemDiskArgs']]:
        """
        Workspace system disk information.
        """
        return pulumi.get(self, "system_disk")

    @system_disk.setter
    def system_disk(self, value: Optional[pulumi.Input['WorkspacesSystemDiskArgs']]):
        pulumi.set(self, "system_disk", value)

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesTagSpecificationArgs']]]]:
        """
        Tag Description List.
        """
        return pulumi.get(self, "tag_specifications")

    @tag_specifications.setter
    def tag_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesTagSpecificationArgs']]]]):
        pulumi.set(self, "tag_specifications", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        User Data for Workspace.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="virtualPrivateCloud")
    def virtual_private_cloud(self) -> Optional[pulumi.Input['WorkspacesVirtualPrivateCloudArgs']]:
        """
        VPC related information.
        """
        return pulumi.get(self, "virtual_private_cloud")

    @virtual_private_cloud.setter
    def virtual_private_cloud(self, value: Optional[pulumi.Input['WorkspacesVirtualPrivateCloudArgs']]):
        pulumi.set(self, "virtual_private_cloud", value)


@pulumi.input_type
class _WorkspacesState:
    def __init__(__self__, *,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesDataDiskArgs']]]] = None,
                 disaster_recover_group_id: Optional[pulumi.Input[str]] = None,
                 enhanced_service: Optional[pulumi.Input['WorkspacesEnhancedServiceArgs']] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 internet_accessible: Optional[pulumi.Input['WorkspacesInternetAccessibleArgs']] = None,
                 login_settings: Optional[pulumi.Input['WorkspacesLoginSettingsArgs']] = None,
                 placement: Optional[pulumi.Input['WorkspacesPlacementArgs']] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_charge_prepaid: Optional[pulumi.Input['WorkspacesSpaceChargePrepaidArgs']] = None,
                 space_charge_type: Optional[pulumi.Input[str]] = None,
                 space_name: Optional[pulumi.Input[str]] = None,
                 space_type: Optional[pulumi.Input[str]] = None,
                 system_disk: Optional[pulumi.Input['WorkspacesSystemDiskArgs']] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesTagSpecificationArgs']]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 virtual_private_cloud: Optional[pulumi.Input['WorkspacesVirtualPrivateCloudArgs']] = None):
        """
        Input properties used for looking up and filtering Workspaces resources.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[str] client_token: A string used to ensure the idempotence of the request. This string is generated by the customer and must be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed. Example value: system-f3827db9-c58a-49cc-bf10-33fc1923a34a.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspacesDataDiskArgs']]] data_disks: Workspace data disk information.
        :param pulumi.Input[str] disaster_recover_group_id: Placement Group ID.
        :param pulumi.Input['WorkspacesEnhancedServiceArgs'] enhanced_service: Enhanced Services.
        :param pulumi.Input[str] host_name: The hostname of the instance. Windows instance: The name should be a combination of 2 to 15 characters comprised of letters (case insensitive), numbers, and hyphens (-). Period (.) is not supported, and the name cannot be a string of pure numbers. Other types (such as Linux) of instances: The name should be a combination of 2 to 60 characters, supporting multiple periods (.). The piece between two periods is composed of letters (case insensitive), numbers, and hyphens (-). Modifying will cause the instance reset.
        :param pulumi.Input[str] hpc_cluster_id: Hyper Computing Cluster ID.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input['WorkspacesInternetAccessibleArgs'] internet_accessible: Public network bandwidth settings.
        :param pulumi.Input['WorkspacesLoginSettingsArgs'] login_settings: Workspace Login Settings.
        :param pulumi.Input['WorkspacesPlacementArgs'] placement: The position of the instance. This parameter allows you to specify attributes such as the availability zone, project, and host machine (when creating a sub-instance on CDH) that the instance belongs to. Note: If you do not specify the LaunchTemplate parameter, Placement is a mandatory parameter. If both Placement and LaunchTemplate are passed, the values in Placement override the corresponding values in LaunchTemplate by default.
        :param pulumi.Input[str] resource_id: CVM instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Workspace Security Group.
        :param pulumi.Input['WorkspacesSpaceChargePrepaidArgs'] space_charge_prepaid: Prepaid mode: This refers to the parameters related to the annual and monthly subscription. By this parameter, you can specify the purchase duration of the prepaid instances, whether to set auto-renewal, and other attributes. If the instance's billing mode is prepaid, this parameter is required.
        :param pulumi.Input[str] space_charge_type: Workspace billing type.
        :param pulumi.Input[str] space_name: Workspace Display Name.
        :param pulumi.Input[str] space_type: Workspace specifications.
        :param pulumi.Input['WorkspacesSystemDiskArgs'] system_disk: Workspace system disk information.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspacesTagSpecificationArgs']]] tag_specifications: Tag Description List.
        :param pulumi.Input[str] user_data: User Data for Workspace.
        :param pulumi.Input['WorkspacesVirtualPrivateCloudArgs'] virtual_private_cloud: VPC related information.
        """
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if disaster_recover_group_id is not None:
            pulumi.set(__self__, "disaster_recover_group_id", disaster_recover_group_id)
        if enhanced_service is not None:
            pulumi.set(__self__, "enhanced_service", enhanced_service)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hpc_cluster_id is not None:
            pulumi.set(__self__, "hpc_cluster_id", hpc_cluster_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if internet_accessible is not None:
            pulumi.set(__self__, "internet_accessible", internet_accessible)
        if login_settings is not None:
            pulumi.set(__self__, "login_settings", login_settings)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if space_charge_prepaid is not None:
            pulumi.set(__self__, "space_charge_prepaid", space_charge_prepaid)
        if space_charge_type is not None:
            pulumi.set(__self__, "space_charge_type", space_charge_type)
        if space_name is not None:
            pulumi.set(__self__, "space_name", space_name)
        if space_type is not None:
            pulumi.set(__self__, "space_type", space_type)
        if system_disk is not None:
            pulumi.set(__self__, "system_disk", system_disk)
        if tag_specifications is not None:
            pulumi.set(__self__, "tag_specifications", tag_specifications)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if virtual_private_cloud is not None:
            pulumi.set(__self__, "virtual_private_cloud", virtual_private_cloud)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        A string used to ensure the idempotence of the request. This string is generated by the customer and must be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed. Example value: system-f3827db9-c58a-49cc-bf10-33fc1923a34a.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesDataDiskArgs']]]]:
        """
        Workspace data disk information.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="disasterRecoverGroupId")
    def disaster_recover_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Placement Group ID.
        """
        return pulumi.get(self, "disaster_recover_group_id")

    @disaster_recover_group_id.setter
    def disaster_recover_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disaster_recover_group_id", value)

    @property
    @pulumi.getter(name="enhancedService")
    def enhanced_service(self) -> Optional[pulumi.Input['WorkspacesEnhancedServiceArgs']]:
        """
        Enhanced Services.
        """
        return pulumi.get(self, "enhanced_service")

    @enhanced_service.setter
    def enhanced_service(self, value: Optional[pulumi.Input['WorkspacesEnhancedServiceArgs']]):
        pulumi.set(self, "enhanced_service", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname of the instance. Windows instance: The name should be a combination of 2 to 15 characters comprised of letters (case insensitive), numbers, and hyphens (-). Period (.) is not supported, and the name cannot be a string of pure numbers. Other types (such as Linux) of instances: The name should be a combination of 2 to 60 characters, supporting multiple periods (.). The piece between two periods is composed of letters (case insensitive), numbers, and hyphens (-). Modifying will cause the instance reset.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Hyper Computing Cluster ID.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @hpc_cluster_id.setter
    def hpc_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hpc_cluster_id", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Image ID.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="internetAccessible")
    def internet_accessible(self) -> Optional[pulumi.Input['WorkspacesInternetAccessibleArgs']]:
        """
        Public network bandwidth settings.
        """
        return pulumi.get(self, "internet_accessible")

    @internet_accessible.setter
    def internet_accessible(self, value: Optional[pulumi.Input['WorkspacesInternetAccessibleArgs']]):
        pulumi.set(self, "internet_accessible", value)

    @property
    @pulumi.getter(name="loginSettings")
    def login_settings(self) -> Optional[pulumi.Input['WorkspacesLoginSettingsArgs']]:
        """
        Workspace Login Settings.
        """
        return pulumi.get(self, "login_settings")

    @login_settings.setter
    def login_settings(self, value: Optional[pulumi.Input['WorkspacesLoginSettingsArgs']]):
        pulumi.set(self, "login_settings", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['WorkspacesPlacementArgs']]:
        """
        The position of the instance. This parameter allows you to specify attributes such as the availability zone, project, and host machine (when creating a sub-instance on CDH) that the instance belongs to. Note: If you do not specify the LaunchTemplate parameter, Placement is a mandatory parameter. If both Placement and LaunchTemplate are passed, the values in Placement override the corresponding values in LaunchTemplate by default.
        """
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['WorkspacesPlacementArgs']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        CVM instance ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Workspace Security Group.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="spaceChargePrepaid")
    def space_charge_prepaid(self) -> Optional[pulumi.Input['WorkspacesSpaceChargePrepaidArgs']]:
        """
        Prepaid mode: This refers to the parameters related to the annual and monthly subscription. By this parameter, you can specify the purchase duration of the prepaid instances, whether to set auto-renewal, and other attributes. If the instance's billing mode is prepaid, this parameter is required.
        """
        return pulumi.get(self, "space_charge_prepaid")

    @space_charge_prepaid.setter
    def space_charge_prepaid(self, value: Optional[pulumi.Input['WorkspacesSpaceChargePrepaidArgs']]):
        pulumi.set(self, "space_charge_prepaid", value)

    @property
    @pulumi.getter(name="spaceChargeType")
    def space_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace billing type.
        """
        return pulumi.get(self, "space_charge_type")

    @space_charge_type.setter
    def space_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_charge_type", value)

    @property
    @pulumi.getter(name="spaceName")
    def space_name(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace Display Name.
        """
        return pulumi.get(self, "space_name")

    @space_name.setter
    def space_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_name", value)

    @property
    @pulumi.getter(name="spaceType")
    def space_type(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace specifications.
        """
        return pulumi.get(self, "space_type")

    @space_type.setter
    def space_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_type", value)

    @property
    @pulumi.getter(name="systemDisk")
    def system_disk(self) -> Optional[pulumi.Input['WorkspacesSystemDiskArgs']]:
        """
        Workspace system disk information.
        """
        return pulumi.get(self, "system_disk")

    @system_disk.setter
    def system_disk(self, value: Optional[pulumi.Input['WorkspacesSystemDiskArgs']]):
        pulumi.set(self, "system_disk", value)

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesTagSpecificationArgs']]]]:
        """
        Tag Description List.
        """
        return pulumi.get(self, "tag_specifications")

    @tag_specifications.setter
    def tag_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspacesTagSpecificationArgs']]]]):
        pulumi.set(self, "tag_specifications", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        User Data for Workspace.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="virtualPrivateCloud")
    def virtual_private_cloud(self) -> Optional[pulumi.Input['WorkspacesVirtualPrivateCloudArgs']]:
        """
        VPC related information.
        """
        return pulumi.get(self, "virtual_private_cloud")

    @virtual_private_cloud.setter
    def virtual_private_cloud(self, value: Optional[pulumi.Input['WorkspacesVirtualPrivateCloudArgs']]):
        pulumi.set(self, "virtual_private_cloud", value)


class Workspaces(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspacesDataDiskArgs']]]]] = None,
                 disaster_recover_group_id: Optional[pulumi.Input[str]] = None,
                 enhanced_service: Optional[pulumi.Input[pulumi.InputType['WorkspacesEnhancedServiceArgs']]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 internet_accessible: Optional[pulumi.Input[pulumi.InputType['WorkspacesInternetAccessibleArgs']]] = None,
                 login_settings: Optional[pulumi.Input[pulumi.InputType['WorkspacesLoginSettingsArgs']]] = None,
                 placement: Optional[pulumi.Input[pulumi.InputType['WorkspacesPlacementArgs']]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_charge_prepaid: Optional[pulumi.Input[pulumi.InputType['WorkspacesSpaceChargePrepaidArgs']]] = None,
                 space_charge_type: Optional[pulumi.Input[str]] = None,
                 space_name: Optional[pulumi.Input[str]] = None,
                 space_type: Optional[pulumi.Input[str]] = None,
                 system_disk: Optional[pulumi.Input[pulumi.InputType['WorkspacesSystemDiskArgs']]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspacesTagSpecificationArgs']]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['WorkspacesVirtualPrivateCloudArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a THPC workspaces

        > **Note:** If space_charge_type is UNDERWRITE, Not currently supported for deletion.

        ## Example Usage

        ### Create a PREPAID THPC workspaces

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-nanjing-1"
        images = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            os_name="TencentOS Server 3.1 (TK4) UEFI")
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="172.16.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="172.16.0.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="security group desc.",
            tags={
                "createBy": "Terraform",
            })
        # create thpc workspaces
        example_workspaces = tencentcloud.thpc.Workspaces("exampleWorkspaces",
            space_name="tf-example",
            space_charge_type="PREPAID",
            space_type="96A.96XLARGE2304",
            hpc_cluster_id="hpc-l9anqcbl",
            image_id=images.images[0].image_id,
            security_group_ids=[example_group.id],
            placement=tencentcloud.thpc.WorkspacesPlacementArgs(
                zone=availability_zone,
                project_id=0,
            ),
            space_charge_prepaid=tencentcloud.thpc.WorkspacesSpaceChargePrepaidArgs(
                period=1,
                renew_flag="NOTIFY_AND_AUTO_RENEW",
            ),
            system_disk=tencentcloud.thpc.WorkspacesSystemDiskArgs(
                disk_size=100,
                disk_type="CLOUD_HSSD",
            ),
            data_disks=[tencentcloud.thpc.WorkspacesDataDiskArgs(
                disk_size=200,
                disk_type="CLOUD_HSSD",
                encrypt=False,
            )],
            virtual_private_cloud=tencentcloud.thpc.WorkspacesVirtualPrivateCloudArgs(
                vpc_id=vpc.id,
                subnet_id=subnet.id,
                as_vpc_gateway=False,
                ipv6_address_count=0,
            ),
            internet_accessible=tencentcloud.thpc.WorkspacesInternetAccessibleArgs(
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=200,
                public_ip_assigned=True,
            ),
            login_settings=tencentcloud.thpc.WorkspacesLoginSettingsArgs(
                password="Password@123",
            ),
            enhanced_service=tencentcloud.thpc.WorkspacesEnhancedServiceArgs(
                security_service=tencentcloud.thpc.WorkspacesEnhancedServiceSecurityServiceArgs(
                    enabled=True,
                ),
                monitor_service=tencentcloud.thpc.WorkspacesEnhancedServiceMonitorServiceArgs(
                    enabled=True,
                ),
                automation_service=tencentcloud.thpc.WorkspacesEnhancedServiceAutomationServiceArgs(
                    enabled=True,
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Create a UNDERWRITE THPC workspaces

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-nanjing-1"
        images = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            os_name="TencentOS Server 3.1 (TK4) UEFI")
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="172.16.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="172.16.0.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="security group desc.",
            tags={
                "createBy": "Terraform",
            })
        # create thpc workspaces
        example_workspaces = tencentcloud.thpc.Workspaces("exampleWorkspaces",
            space_name="tf-example",
            space_charge_type="UNDERWRITE",
            space_type="96A.96XLARGE2304",
            hpc_cluster_id="hpc-l9anqcbl",
            image_id=images.images[0].image_id,
            security_group_ids=[example_group.id],
            placement=tencentcloud.thpc.WorkspacesPlacementArgs(
                zone=availability_zone,
                project_id=0,
            ),
            space_charge_prepaid=tencentcloud.thpc.WorkspacesSpaceChargePrepaidArgs(
                period=12,
                renew_flag="NOTIFY_AND_AUTO_RENEW",
            ),
            system_disk=tencentcloud.thpc.WorkspacesSystemDiskArgs(
                disk_size=100,
                disk_type="CLOUD_HSSD",
            ),
            data_disks=[tencentcloud.thpc.WorkspacesDataDiskArgs(
                disk_size=200,
                disk_type="CLOUD_HSSD",
                encrypt=False,
            )],
            virtual_private_cloud=tencentcloud.thpc.WorkspacesVirtualPrivateCloudArgs(
                vpc_id=vpc.id,
                subnet_id=subnet.id,
                as_vpc_gateway=False,
                ipv6_address_count=0,
                private_ip_addresses=["172.16.0.2"],
            ),
            internet_accessible=tencentcloud.thpc.WorkspacesInternetAccessibleArgs(
                internet_charge_type="BANDWIDTH_PREPAID",
                internet_max_bandwidth_out=200,
                public_ip_assigned=True,
            ),
            login_settings=tencentcloud.thpc.WorkspacesLoginSettingsArgs(
                key_ids=["skey-qxjpz7uj"],
            ),
            enhanced_service=tencentcloud.thpc.WorkspacesEnhancedServiceArgs(
                security_service=tencentcloud.thpc.WorkspacesEnhancedServiceSecurityServiceArgs(
                    enabled=True,
                ),
                monitor_service=tencentcloud.thpc.WorkspacesEnhancedServiceMonitorServiceArgs(
                    enabled=True,
                ),
                automation_service=tencentcloud.thpc.WorkspacesEnhancedServiceAutomationServiceArgs(
                    enabled=True,
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        THPC workspaces can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Thpc/workspaces:Workspaces example wks-gwg3ygz1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[str] client_token: A string used to ensure the idempotence of the request. This string is generated by the customer and must be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed. Example value: system-f3827db9-c58a-49cc-bf10-33fc1923a34a.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspacesDataDiskArgs']]]] data_disks: Workspace data disk information.
        :param pulumi.Input[str] disaster_recover_group_id: Placement Group ID.
        :param pulumi.Input[pulumi.InputType['WorkspacesEnhancedServiceArgs']] enhanced_service: Enhanced Services.
        :param pulumi.Input[str] host_name: The hostname of the instance. Windows instance: The name should be a combination of 2 to 15 characters comprised of letters (case insensitive), numbers, and hyphens (-). Period (.) is not supported, and the name cannot be a string of pure numbers. Other types (such as Linux) of instances: The name should be a combination of 2 to 60 characters, supporting multiple periods (.). The piece between two periods is composed of letters (case insensitive), numbers, and hyphens (-). Modifying will cause the instance reset.
        :param pulumi.Input[str] hpc_cluster_id: Hyper Computing Cluster ID.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input[pulumi.InputType['WorkspacesInternetAccessibleArgs']] internet_accessible: Public network bandwidth settings.
        :param pulumi.Input[pulumi.InputType['WorkspacesLoginSettingsArgs']] login_settings: Workspace Login Settings.
        :param pulumi.Input[pulumi.InputType['WorkspacesPlacementArgs']] placement: The position of the instance. This parameter allows you to specify attributes such as the availability zone, project, and host machine (when creating a sub-instance on CDH) that the instance belongs to. Note: If you do not specify the LaunchTemplate parameter, Placement is a mandatory parameter. If both Placement and LaunchTemplate are passed, the values in Placement override the corresponding values in LaunchTemplate by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Workspace Security Group.
        :param pulumi.Input[pulumi.InputType['WorkspacesSpaceChargePrepaidArgs']] space_charge_prepaid: Prepaid mode: This refers to the parameters related to the annual and monthly subscription. By this parameter, you can specify the purchase duration of the prepaid instances, whether to set auto-renewal, and other attributes. If the instance's billing mode is prepaid, this parameter is required.
        :param pulumi.Input[str] space_charge_type: Workspace billing type.
        :param pulumi.Input[str] space_name: Workspace Display Name.
        :param pulumi.Input[str] space_type: Workspace specifications.
        :param pulumi.Input[pulumi.InputType['WorkspacesSystemDiskArgs']] system_disk: Workspace system disk information.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspacesTagSpecificationArgs']]]] tag_specifications: Tag Description List.
        :param pulumi.Input[str] user_data: User Data for Workspace.
        :param pulumi.Input[pulumi.InputType['WorkspacesVirtualPrivateCloudArgs']] virtual_private_cloud: VPC related information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WorkspacesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a THPC workspaces

        > **Note:** If space_charge_type is UNDERWRITE, Not currently supported for deletion.

        ## Example Usage

        ### Create a PREPAID THPC workspaces

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-nanjing-1"
        images = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            os_name="TencentOS Server 3.1 (TK4) UEFI")
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="172.16.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="172.16.0.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="security group desc.",
            tags={
                "createBy": "Terraform",
            })
        # create thpc workspaces
        example_workspaces = tencentcloud.thpc.Workspaces("exampleWorkspaces",
            space_name="tf-example",
            space_charge_type="PREPAID",
            space_type="96A.96XLARGE2304",
            hpc_cluster_id="hpc-l9anqcbl",
            image_id=images.images[0].image_id,
            security_group_ids=[example_group.id],
            placement=tencentcloud.thpc.WorkspacesPlacementArgs(
                zone=availability_zone,
                project_id=0,
            ),
            space_charge_prepaid=tencentcloud.thpc.WorkspacesSpaceChargePrepaidArgs(
                period=1,
                renew_flag="NOTIFY_AND_AUTO_RENEW",
            ),
            system_disk=tencentcloud.thpc.WorkspacesSystemDiskArgs(
                disk_size=100,
                disk_type="CLOUD_HSSD",
            ),
            data_disks=[tencentcloud.thpc.WorkspacesDataDiskArgs(
                disk_size=200,
                disk_type="CLOUD_HSSD",
                encrypt=False,
            )],
            virtual_private_cloud=tencentcloud.thpc.WorkspacesVirtualPrivateCloudArgs(
                vpc_id=vpc.id,
                subnet_id=subnet.id,
                as_vpc_gateway=False,
                ipv6_address_count=0,
            ),
            internet_accessible=tencentcloud.thpc.WorkspacesInternetAccessibleArgs(
                internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                internet_max_bandwidth_out=200,
                public_ip_assigned=True,
            ),
            login_settings=tencentcloud.thpc.WorkspacesLoginSettingsArgs(
                password="Password@123",
            ),
            enhanced_service=tencentcloud.thpc.WorkspacesEnhancedServiceArgs(
                security_service=tencentcloud.thpc.WorkspacesEnhancedServiceSecurityServiceArgs(
                    enabled=True,
                ),
                monitor_service=tencentcloud.thpc.WorkspacesEnhancedServiceMonitorServiceArgs(
                    enabled=True,
                ),
                automation_service=tencentcloud.thpc.WorkspacesEnhancedServiceAutomationServiceArgs(
                    enabled=True,
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Create a UNDERWRITE THPC workspaces

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-nanjing-1"
        images = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            os_name="TencentOS Server 3.1 (TK4) UEFI")
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="172.16.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="172.16.0.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="security group desc.",
            tags={
                "createBy": "Terraform",
            })
        # create thpc workspaces
        example_workspaces = tencentcloud.thpc.Workspaces("exampleWorkspaces",
            space_name="tf-example",
            space_charge_type="UNDERWRITE",
            space_type="96A.96XLARGE2304",
            hpc_cluster_id="hpc-l9anqcbl",
            image_id=images.images[0].image_id,
            security_group_ids=[example_group.id],
            placement=tencentcloud.thpc.WorkspacesPlacementArgs(
                zone=availability_zone,
                project_id=0,
            ),
            space_charge_prepaid=tencentcloud.thpc.WorkspacesSpaceChargePrepaidArgs(
                period=12,
                renew_flag="NOTIFY_AND_AUTO_RENEW",
            ),
            system_disk=tencentcloud.thpc.WorkspacesSystemDiskArgs(
                disk_size=100,
                disk_type="CLOUD_HSSD",
            ),
            data_disks=[tencentcloud.thpc.WorkspacesDataDiskArgs(
                disk_size=200,
                disk_type="CLOUD_HSSD",
                encrypt=False,
            )],
            virtual_private_cloud=tencentcloud.thpc.WorkspacesVirtualPrivateCloudArgs(
                vpc_id=vpc.id,
                subnet_id=subnet.id,
                as_vpc_gateway=False,
                ipv6_address_count=0,
                private_ip_addresses=["172.16.0.2"],
            ),
            internet_accessible=tencentcloud.thpc.WorkspacesInternetAccessibleArgs(
                internet_charge_type="BANDWIDTH_PREPAID",
                internet_max_bandwidth_out=200,
                public_ip_assigned=True,
            ),
            login_settings=tencentcloud.thpc.WorkspacesLoginSettingsArgs(
                key_ids=["skey-qxjpz7uj"],
            ),
            enhanced_service=tencentcloud.thpc.WorkspacesEnhancedServiceArgs(
                security_service=tencentcloud.thpc.WorkspacesEnhancedServiceSecurityServiceArgs(
                    enabled=True,
                ),
                monitor_service=tencentcloud.thpc.WorkspacesEnhancedServiceMonitorServiceArgs(
                    enabled=True,
                ),
                automation_service=tencentcloud.thpc.WorkspacesEnhancedServiceAutomationServiceArgs(
                    enabled=True,
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        THPC workspaces can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Thpc/workspaces:Workspaces example wks-gwg3ygz1
        ```

        :param str resource_name: The name of the resource.
        :param WorkspacesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkspacesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspacesDataDiskArgs']]]]] = None,
                 disaster_recover_group_id: Optional[pulumi.Input[str]] = None,
                 enhanced_service: Optional[pulumi.Input[pulumi.InputType['WorkspacesEnhancedServiceArgs']]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 internet_accessible: Optional[pulumi.Input[pulumi.InputType['WorkspacesInternetAccessibleArgs']]] = None,
                 login_settings: Optional[pulumi.Input[pulumi.InputType['WorkspacesLoginSettingsArgs']]] = None,
                 placement: Optional[pulumi.Input[pulumi.InputType['WorkspacesPlacementArgs']]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 space_charge_prepaid: Optional[pulumi.Input[pulumi.InputType['WorkspacesSpaceChargePrepaidArgs']]] = None,
                 space_charge_type: Optional[pulumi.Input[str]] = None,
                 space_name: Optional[pulumi.Input[str]] = None,
                 space_type: Optional[pulumi.Input[str]] = None,
                 system_disk: Optional[pulumi.Input[pulumi.InputType['WorkspacesSystemDiskArgs']]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspacesTagSpecificationArgs']]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['WorkspacesVirtualPrivateCloudArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkspacesArgs.__new__(WorkspacesArgs)

            __props__.__dict__["cam_role_name"] = cam_role_name
            __props__.__dict__["client_token"] = client_token
            __props__.__dict__["data_disks"] = data_disks
            __props__.__dict__["disaster_recover_group_id"] = disaster_recover_group_id
            __props__.__dict__["enhanced_service"] = enhanced_service
            __props__.__dict__["host_name"] = host_name
            __props__.__dict__["hpc_cluster_id"] = hpc_cluster_id
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["internet_accessible"] = internet_accessible
            __props__.__dict__["login_settings"] = login_settings
            __props__.__dict__["placement"] = placement
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["space_charge_prepaid"] = space_charge_prepaid
            __props__.__dict__["space_charge_type"] = space_charge_type
            __props__.__dict__["space_name"] = space_name
            __props__.__dict__["space_type"] = space_type
            __props__.__dict__["system_disk"] = system_disk
            __props__.__dict__["tag_specifications"] = tag_specifications
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["virtual_private_cloud"] = virtual_private_cloud
            __props__.__dict__["resource_id"] = None
        super(Workspaces, __self__).__init__(
            'tencentcloud:Thpc/workspaces:Workspaces',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cam_role_name: Optional[pulumi.Input[str]] = None,
            client_token: Optional[pulumi.Input[str]] = None,
            data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspacesDataDiskArgs']]]]] = None,
            disaster_recover_group_id: Optional[pulumi.Input[str]] = None,
            enhanced_service: Optional[pulumi.Input[pulumi.InputType['WorkspacesEnhancedServiceArgs']]] = None,
            host_name: Optional[pulumi.Input[str]] = None,
            hpc_cluster_id: Optional[pulumi.Input[str]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            internet_accessible: Optional[pulumi.Input[pulumi.InputType['WorkspacesInternetAccessibleArgs']]] = None,
            login_settings: Optional[pulumi.Input[pulumi.InputType['WorkspacesLoginSettingsArgs']]] = None,
            placement: Optional[pulumi.Input[pulumi.InputType['WorkspacesPlacementArgs']]] = None,
            resource_id: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            space_charge_prepaid: Optional[pulumi.Input[pulumi.InputType['WorkspacesSpaceChargePrepaidArgs']]] = None,
            space_charge_type: Optional[pulumi.Input[str]] = None,
            space_name: Optional[pulumi.Input[str]] = None,
            space_type: Optional[pulumi.Input[str]] = None,
            system_disk: Optional[pulumi.Input[pulumi.InputType['WorkspacesSystemDiskArgs']]] = None,
            tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspacesTagSpecificationArgs']]]]] = None,
            user_data: Optional[pulumi.Input[str]] = None,
            virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['WorkspacesVirtualPrivateCloudArgs']]] = None) -> 'Workspaces':
        """
        Get an existing Workspaces resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[str] client_token: A string used to ensure the idempotence of the request. This string is generated by the customer and must be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed. Example value: system-f3827db9-c58a-49cc-bf10-33fc1923a34a.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspacesDataDiskArgs']]]] data_disks: Workspace data disk information.
        :param pulumi.Input[str] disaster_recover_group_id: Placement Group ID.
        :param pulumi.Input[pulumi.InputType['WorkspacesEnhancedServiceArgs']] enhanced_service: Enhanced Services.
        :param pulumi.Input[str] host_name: The hostname of the instance. Windows instance: The name should be a combination of 2 to 15 characters comprised of letters (case insensitive), numbers, and hyphens (-). Period (.) is not supported, and the name cannot be a string of pure numbers. Other types (such as Linux) of instances: The name should be a combination of 2 to 60 characters, supporting multiple periods (.). The piece between two periods is composed of letters (case insensitive), numbers, and hyphens (-). Modifying will cause the instance reset.
        :param pulumi.Input[str] hpc_cluster_id: Hyper Computing Cluster ID.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input[pulumi.InputType['WorkspacesInternetAccessibleArgs']] internet_accessible: Public network bandwidth settings.
        :param pulumi.Input[pulumi.InputType['WorkspacesLoginSettingsArgs']] login_settings: Workspace Login Settings.
        :param pulumi.Input[pulumi.InputType['WorkspacesPlacementArgs']] placement: The position of the instance. This parameter allows you to specify attributes such as the availability zone, project, and host machine (when creating a sub-instance on CDH) that the instance belongs to. Note: If you do not specify the LaunchTemplate parameter, Placement is a mandatory parameter. If both Placement and LaunchTemplate are passed, the values in Placement override the corresponding values in LaunchTemplate by default.
        :param pulumi.Input[str] resource_id: CVM instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Workspace Security Group.
        :param pulumi.Input[pulumi.InputType['WorkspacesSpaceChargePrepaidArgs']] space_charge_prepaid: Prepaid mode: This refers to the parameters related to the annual and monthly subscription. By this parameter, you can specify the purchase duration of the prepaid instances, whether to set auto-renewal, and other attributes. If the instance's billing mode is prepaid, this parameter is required.
        :param pulumi.Input[str] space_charge_type: Workspace billing type.
        :param pulumi.Input[str] space_name: Workspace Display Name.
        :param pulumi.Input[str] space_type: Workspace specifications.
        :param pulumi.Input[pulumi.InputType['WorkspacesSystemDiskArgs']] system_disk: Workspace system disk information.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspacesTagSpecificationArgs']]]] tag_specifications: Tag Description List.
        :param pulumi.Input[str] user_data: User Data for Workspace.
        :param pulumi.Input[pulumi.InputType['WorkspacesVirtualPrivateCloudArgs']] virtual_private_cloud: VPC related information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkspacesState.__new__(_WorkspacesState)

        __props__.__dict__["cam_role_name"] = cam_role_name
        __props__.__dict__["client_token"] = client_token
        __props__.__dict__["data_disks"] = data_disks
        __props__.__dict__["disaster_recover_group_id"] = disaster_recover_group_id
        __props__.__dict__["enhanced_service"] = enhanced_service
        __props__.__dict__["host_name"] = host_name
        __props__.__dict__["hpc_cluster_id"] = hpc_cluster_id
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["internet_accessible"] = internet_accessible
        __props__.__dict__["login_settings"] = login_settings
        __props__.__dict__["placement"] = placement
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["space_charge_prepaid"] = space_charge_prepaid
        __props__.__dict__["space_charge_type"] = space_charge_type
        __props__.__dict__["space_name"] = space_name
        __props__.__dict__["space_type"] = space_type
        __props__.__dict__["system_disk"] = system_disk
        __props__.__dict__["tag_specifications"] = tag_specifications
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["virtual_private_cloud"] = virtual_private_cloud
        return Workspaces(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> pulumi.Output[Optional[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> pulumi.Output[Optional[str]]:
        """
        A string used to ensure the idempotence of the request. This string is generated by the customer and must be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed. Example value: system-f3827db9-c58a-49cc-bf10-33fc1923a34a.
        """
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> pulumi.Output[Sequence['outputs.WorkspacesDataDisk']]:
        """
        Workspace data disk information.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="disasterRecoverGroupId")
    def disaster_recover_group_id(self) -> pulumi.Output[Optional[str]]:
        """
        Placement Group ID.
        """
        return pulumi.get(self, "disaster_recover_group_id")

    @property
    @pulumi.getter(name="enhancedService")
    def enhanced_service(self) -> pulumi.Output[Optional['outputs.WorkspacesEnhancedService']]:
        """
        Enhanced Services.
        """
        return pulumi.get(self, "enhanced_service")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[Optional[str]]:
        """
        The hostname of the instance. Windows instance: The name should be a combination of 2 to 15 characters comprised of letters (case insensitive), numbers, and hyphens (-). Period (.) is not supported, and the name cannot be a string of pure numbers. Other types (such as Linux) of instances: The name should be a combination of 2 to 60 characters, supporting multiple periods (.). The piece between two periods is composed of letters (case insensitive), numbers, and hyphens (-). Modifying will cause the instance reset.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        Hyper Computing Cluster ID.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[Optional[str]]:
        """
        Image ID.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="internetAccessible")
    def internet_accessible(self) -> pulumi.Output['outputs.WorkspacesInternetAccessible']:
        """
        Public network bandwidth settings.
        """
        return pulumi.get(self, "internet_accessible")

    @property
    @pulumi.getter(name="loginSettings")
    def login_settings(self) -> pulumi.Output[Optional['outputs.WorkspacesLoginSettings']]:
        """
        Workspace Login Settings.
        """
        return pulumi.get(self, "login_settings")

    @property
    @pulumi.getter
    def placement(self) -> pulumi.Output[Optional['outputs.WorkspacesPlacement']]:
        """
        The position of the instance. This parameter allows you to specify attributes such as the availability zone, project, and host machine (when creating a sub-instance on CDH) that the instance belongs to. Note: If you do not specify the LaunchTemplate parameter, Placement is a mandatory parameter. If both Placement and LaunchTemplate are passed, the values in Placement override the corresponding values in LaunchTemplate by default.
        """
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        """
        CVM instance ID.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Workspace Security Group.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="spaceChargePrepaid")
    def space_charge_prepaid(self) -> pulumi.Output[Optional['outputs.WorkspacesSpaceChargePrepaid']]:
        """
        Prepaid mode: This refers to the parameters related to the annual and monthly subscription. By this parameter, you can specify the purchase duration of the prepaid instances, whether to set auto-renewal, and other attributes. If the instance's billing mode is prepaid, this parameter is required.
        """
        return pulumi.get(self, "space_charge_prepaid")

    @property
    @pulumi.getter(name="spaceChargeType")
    def space_charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Workspace billing type.
        """
        return pulumi.get(self, "space_charge_type")

    @property
    @pulumi.getter(name="spaceName")
    def space_name(self) -> pulumi.Output[str]:
        """
        Workspace Display Name.
        """
        return pulumi.get(self, "space_name")

    @property
    @pulumi.getter(name="spaceType")
    def space_type(self) -> pulumi.Output[Optional[str]]:
        """
        Workspace specifications.
        """
        return pulumi.get(self, "space_type")

    @property
    @pulumi.getter(name="systemDisk")
    def system_disk(self) -> pulumi.Output[Optional['outputs.WorkspacesSystemDisk']]:
        """
        Workspace system disk information.
        """
        return pulumi.get(self, "system_disk")

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> pulumi.Output[Optional[Sequence['outputs.WorkspacesTagSpecification']]]:
        """
        Tag Description List.
        """
        return pulumi.get(self, "tag_specifications")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[str]]:
        """
        User Data for Workspace.
        """
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="virtualPrivateCloud")
    def virtual_private_cloud(self) -> pulumi.Output[Optional['outputs.WorkspacesVirtualPrivateCloud']]:
        """
        VPC related information.
        """
        return pulumi.get(self, "virtual_private_cloud")

