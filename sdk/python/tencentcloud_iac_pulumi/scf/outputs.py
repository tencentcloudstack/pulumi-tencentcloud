# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FunctionAliasRoutingConfig',
    'FunctionAliasRoutingConfigAdditionalVersionMatch',
    'FunctionAliasRoutingConfigAdditionalVersionWeight',
    'FunctionCfsConfig',
    'FunctionEventInvokeConfigAsyncTriggerConfig',
    'FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig',
    'FunctionImageConfig',
    'FunctionIntranetConfig',
    'FunctionLayer',
    'FunctionTrigger',
    'FunctionTriggerInfo',
    'LayerContent',
    'ProvisionedConcurrencyConfigTriggerAction',
    'GetAccountInfoAccountLimitResult',
    'GetAccountInfoAccountLimitNamespaceResult',
    'GetAccountInfoAccountLimitNamespaceTriggerResult',
    'GetAccountInfoAccountUsageResult',
    'GetAccountInfoAccountUsageNamespaceResult',
    'GetAsyncEventManagementEventListResult',
    'GetAsyncEventStatusResultResult',
    'GetFunctionAliasesAliasResult',
    'GetFunctionAliasesAliasRoutingConfigResult',
    'GetFunctionAliasesAliasRoutingConfigAdditionVersionMatchResult',
    'GetFunctionAliasesAliasRoutingConfigAdditionalVersionWeightResult',
    'GetFunctionVersionsVersionResult',
    'GetFunctionsFunctionResult',
    'GetFunctionsFunctionImageConfigResult',
    'GetFunctionsFunctionIntranetConfigResult',
    'GetFunctionsFunctionTriggerInfoResult',
    'GetLayerVersionsLayerVersionResult',
    'GetLayersLayerResult',
    'GetLogsLogResult',
    'GetNamespacesNamespaceResult',
    'GetRequestStatusDataResult',
    'GetTriggersFilterResult',
    'GetTriggersTriggerResult',
]

@pulumi.output_type
class FunctionAliasRoutingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalVersionMatches":
            suggest = "additional_version_matches"
        elif key == "additionalVersionWeights":
            suggest = "additional_version_weights"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAliasRoutingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAliasRoutingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAliasRoutingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_version_matches: Optional[Sequence['outputs.FunctionAliasRoutingConfigAdditionalVersionMatch']] = None,
                 additional_version_weights: Optional[Sequence['outputs.FunctionAliasRoutingConfigAdditionalVersionWeight']] = None):
        """
        :param Sequence['FunctionAliasRoutingConfigAdditionalVersionMatchArgs'] additional_version_matches: Additional version with rule-based routing.
        :param Sequence['FunctionAliasRoutingConfigAdditionalVersionWeightArgs'] additional_version_weights: Additional version with random weight-based routing.
        """
        if additional_version_matches is not None:
            pulumi.set(__self__, "additional_version_matches", additional_version_matches)
        if additional_version_weights is not None:
            pulumi.set(__self__, "additional_version_weights", additional_version_weights)

    @property
    @pulumi.getter(name="additionalVersionMatches")
    def additional_version_matches(self) -> Optional[Sequence['outputs.FunctionAliasRoutingConfigAdditionalVersionMatch']]:
        """
        Additional version with rule-based routing.
        """
        return pulumi.get(self, "additional_version_matches")

    @property
    @pulumi.getter(name="additionalVersionWeights")
    def additional_version_weights(self) -> Optional[Sequence['outputs.FunctionAliasRoutingConfigAdditionalVersionWeight']]:
        """
        Additional version with random weight-based routing.
        """
        return pulumi.get(self, "additional_version_weights")


@pulumi.output_type
class FunctionAliasRoutingConfigAdditionalVersionMatch(dict):
    def __init__(__self__, *,
                 expression: str,
                 key: str,
                 method: str,
                 version: str):
        """
        :param str expression: Rule requirements for range match:It should be described in an open or closed range, i.e., (a,b) or [a,b], where both a and b are integersRule requirements for exact match:Exact string match.
        :param str key: Matching rule key. When the API is called, pass in the key to route the request to the specified version based on the matching ruleHeader method:Enter invoke.headers.User for key and pass in RoutingKey:{User:value} when invoking a function through invoke for invocation based on rule matching.
        :param str method: Match method. Valid values:range: Range matchexact: exact string match.
        :param str version: Function version name.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Rule requirements for range match:It should be described in an open or closed range, i.e., (a,b) or [a,b], where both a and b are integersRule requirements for exact match:Exact string match.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Matching rule key. When the API is called, pass in the key to route the request to the specified version based on the matching ruleHeader method:Enter invoke.headers.User for key and pass in RoutingKey:{User:value} when invoking a function through invoke for invocation based on rule matching.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def method(self) -> str:
        """
        Match method. Valid values:range: Range matchexact: exact string match.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Function version name.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FunctionAliasRoutingConfigAdditionalVersionWeight(dict):
    def __init__(__self__, *,
                 version: str,
                 weight: float):
        """
        :param str version: Function version name.
        :param float weight: Version weight.
        """
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Function version name.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def weight(self) -> float:
        """
        Version weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class FunctionCfsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cfsId":
            suggest = "cfs_id"
        elif key == "localMountDir":
            suggest = "local_mount_dir"
        elif key == "mountInsId":
            suggest = "mount_ins_id"
        elif key == "remoteMountDir":
            suggest = "remote_mount_dir"
        elif key == "userGroupId":
            suggest = "user_group_id"
        elif key == "userId":
            suggest = "user_id"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "mountSubnetId":
            suggest = "mount_subnet_id"
        elif key == "mountVpcId":
            suggest = "mount_vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionCfsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionCfsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionCfsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cfs_id: str,
                 local_mount_dir: str,
                 mount_ins_id: str,
                 remote_mount_dir: str,
                 user_group_id: str,
                 user_id: str,
                 ip_address: Optional[str] = None,
                 mount_subnet_id: Optional[str] = None,
                 mount_vpc_id: Optional[str] = None):
        """
        :param str cfs_id: File system instance ID.
        :param str local_mount_dir: Local mount directory.
        :param str mount_ins_id: File system mount instance ID.
        :param str remote_mount_dir: Remote mount directory.
        :param str user_group_id: ID of user group.
        :param str user_id: ID of user.
        :param str ip_address: (Readonly) File system ip address.
        :param str mount_subnet_id: (Readonly) File system subnet ID.
        :param str mount_vpc_id: (Readonly) File system virtual private network ID.
        """
        pulumi.set(__self__, "cfs_id", cfs_id)
        pulumi.set(__self__, "local_mount_dir", local_mount_dir)
        pulumi.set(__self__, "mount_ins_id", mount_ins_id)
        pulumi.set(__self__, "remote_mount_dir", remote_mount_dir)
        pulumi.set(__self__, "user_group_id", user_group_id)
        pulumi.set(__self__, "user_id", user_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if mount_subnet_id is not None:
            pulumi.set(__self__, "mount_subnet_id", mount_subnet_id)
        if mount_vpc_id is not None:
            pulumi.set(__self__, "mount_vpc_id", mount_vpc_id)

    @property
    @pulumi.getter(name="cfsId")
    def cfs_id(self) -> str:
        """
        File system instance ID.
        """
        return pulumi.get(self, "cfs_id")

    @property
    @pulumi.getter(name="localMountDir")
    def local_mount_dir(self) -> str:
        """
        Local mount directory.
        """
        return pulumi.get(self, "local_mount_dir")

    @property
    @pulumi.getter(name="mountInsId")
    def mount_ins_id(self) -> str:
        """
        File system mount instance ID.
        """
        return pulumi.get(self, "mount_ins_id")

    @property
    @pulumi.getter(name="remoteMountDir")
    def remote_mount_dir(self) -> str:
        """
        Remote mount directory.
        """
        return pulumi.get(self, "remote_mount_dir")

    @property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> str:
        """
        ID of user group.
        """
        return pulumi.get(self, "user_group_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        ID of user.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        (Readonly) File system ip address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="mountSubnetId")
    def mount_subnet_id(self) -> Optional[str]:
        """
        (Readonly) File system subnet ID.
        """
        return pulumi.get(self, "mount_subnet_id")

    @property
    @pulumi.getter(name="mountVpcId")
    def mount_vpc_id(self) -> Optional[str]:
        """
        (Readonly) File system virtual private network ID.
        """
        return pulumi.get(self, "mount_vpc_id")


@pulumi.output_type
class FunctionEventInvokeConfigAsyncTriggerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgTtl":
            suggest = "msg_ttl"
        elif key == "retryConfigs":
            suggest = "retry_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionEventInvokeConfigAsyncTriggerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionEventInvokeConfigAsyncTriggerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionEventInvokeConfigAsyncTriggerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 msg_ttl: int,
                 retry_configs: Sequence['outputs.FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig']):
        """
        :param int msg_ttl: Message retention period.
        :param Sequence['FunctionEventInvokeConfigAsyncTriggerConfigRetryConfigArgs'] retry_configs: Async retry configuration of function upon user error.
        """
        pulumi.set(__self__, "msg_ttl", msg_ttl)
        pulumi.set(__self__, "retry_configs", retry_configs)

    @property
    @pulumi.getter(name="msgTtl")
    def msg_ttl(self) -> int:
        """
        Message retention period.
        """
        return pulumi.get(self, "msg_ttl")

    @property
    @pulumi.getter(name="retryConfigs")
    def retry_configs(self) -> Sequence['outputs.FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig']:
        """
        Async retry configuration of function upon user error.
        """
        return pulumi.get(self, "retry_configs")


@pulumi.output_type
class FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retryNum":
            suggest = "retry_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retry_num: int):
        """
        :param int retry_num: Number of retry attempts.
        """
        pulumi.set(__self__, "retry_num", retry_num)

    @property
    @pulumi.getter(name="retryNum")
    def retry_num(self) -> int:
        """
        Number of retry attempts.
        """
        return pulumi.get(self, "retry_num")


@pulumi.output_type
class FunctionImageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageType":
            suggest = "image_type"
        elif key == "imageUri":
            suggest = "image_uri"
        elif key == "containerImageAccelerate":
            suggest = "container_image_accelerate"
        elif key == "entryPoint":
            suggest = "entry_point"
        elif key == "imagePort":
            suggest = "image_port"
        elif key == "registryId":
            suggest = "registry_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionImageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionImageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionImageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_type: str,
                 image_uri: str,
                 args: Optional[str] = None,
                 command: Optional[str] = None,
                 container_image_accelerate: Optional[bool] = None,
                 entry_point: Optional[str] = None,
                 image_port: Optional[int] = None,
                 registry_id: Optional[str] = None):
        """
        :param str image_type: The image type. personal or enterprise.
        :param str image_uri: The uri of image.
        :param str args: the parameters of command.
        :param str command: The command of entrypoint.
        :param bool container_image_accelerate: Image accelerate switch.
        :param str entry_point: The entrypoint of app.
        :param int image_port: Image function port setting. Default is `9000`, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
        :param str registry_id: The registry id of TCR. When image type is enterprise, it must be set.
        """
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "image_uri", image_uri)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if container_image_accelerate is not None:
            pulumi.set(__self__, "container_image_accelerate", container_image_accelerate)
        if entry_point is not None:
            pulumi.set(__self__, "entry_point", entry_point)
        if image_port is not None:
            pulumi.set(__self__, "image_port", image_port)
        if registry_id is not None:
            pulumi.set(__self__, "registry_id", registry_id)

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        """
        The image type. personal or enterprise.
        """
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        """
        The uri of image.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter
    def args(self) -> Optional[str]:
        """
        the parameters of command.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        """
        The command of entrypoint.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="containerImageAccelerate")
    def container_image_accelerate(self) -> Optional[bool]:
        """
        Image accelerate switch.
        """
        return pulumi.get(self, "container_image_accelerate")

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> Optional[str]:
        """
        The entrypoint of app.
        """
        return pulumi.get(self, "entry_point")

    @property
    @pulumi.getter(name="imagePort")
    def image_port(self) -> Optional[int]:
        """
        Image function port setting. Default is `9000`, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
        """
        return pulumi.get(self, "image_port")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> Optional[str]:
        """
        The registry id of TCR. When image type is enterprise, it must be set.
        """
        return pulumi.get(self, "registry_id")


@pulumi.output_type
class FunctionIntranetConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipFixed":
            suggest = "ip_fixed"
        elif key == "ipAddresses":
            suggest = "ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionIntranetConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionIntranetConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionIntranetConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_fixed: str,
                 ip_addresses: Optional[Sequence[str]] = None):
        """
        :param str ip_fixed: Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
        :param Sequence[str] ip_addresses: If fixed intranet IP is enabled, this field returns the IP list used.
        """
        pulumi.set(__self__, "ip_fixed", ip_fixed)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)

    @property
    @pulumi.getter(name="ipFixed")
    def ip_fixed(self) -> str:
        """
        Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
        """
        return pulumi.get(self, "ip_fixed")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        """
        If fixed intranet IP is enabled, this field returns the IP list used.
        """
        return pulumi.get(self, "ip_addresses")


@pulumi.output_type
class FunctionLayer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "layerName":
            suggest = "layer_name"
        elif key == "layerVersion":
            suggest = "layer_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionLayer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionLayer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionLayer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 layer_name: str,
                 layer_version: int):
        """
        :param str layer_name: The name of Layer.
        :param int layer_version: The version of layer.
        """
        pulumi.set(__self__, "layer_name", layer_name)
        pulumi.set(__self__, "layer_version", layer_version)

    @property
    @pulumi.getter(name="layerName")
    def layer_name(self) -> str:
        """
        The name of Layer.
        """
        return pulumi.get(self, "layer_name")

    @property
    @pulumi.getter(name="layerVersion")
    def layer_version(self) -> int:
        """
        The version of layer.
        """
        return pulumi.get(self, "layer_version")


@pulumi.output_type
class FunctionTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerDesc":
            suggest = "trigger_desc"
        elif key == "cosRegion":
            suggest = "cos_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 trigger_desc: str,
                 type: str,
                 cos_region: Optional[str] = None):
        """
        :param str name: Name of the SCF function trigger, if `type` is `ckafka`, the format of name must be `<ckafkaInstanceId>-<topicId>`; if `type` is `cos`, the name is cos bucket id, other In any case, it can be combined arbitrarily. It can only contain English letters, numbers, connectors and underscores. The maximum length is 100.
        :param str trigger_desc: TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
        :param str type: Type of the SCF function trigger, support `cos`, `cls`, `timer`, `ckafka`, `http`, `apigw`, `cmq`.
        :param str cos_region: Region of cos bucket. if `type` is `cos`, `cos_region` is required.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "trigger_desc", trigger_desc)
        pulumi.set(__self__, "type", type)
        if cos_region is not None:
            pulumi.set(__self__, "cos_region", cos_region)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the SCF function trigger, if `type` is `ckafka`, the format of name must be `<ckafkaInstanceId>-<topicId>`; if `type` is `cos`, the name is cos bucket id, other In any case, it can be combined arbitrarily. It can only contain English letters, numbers, connectors and underscores. The maximum length is 100.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> str:
        """
        TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
        """
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the SCF function trigger, support `cos`, `cls`, `timer`, `ckafka`, `http`, `apigw`, `cmq`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosRegion")
    def cos_region(self) -> Optional[str]:
        """
        Region of cos bucket. if `type` is `cos`, `cos_region` is required.
        """
        return pulumi.get(self, "cos_region")


@pulumi.output_type
class FunctionTriggerInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "customArgument":
            suggest = "custom_argument"
        elif key == "modifyTime":
            suggest = "modify_time"
        elif key == "triggerDesc":
            suggest = "trigger_desc"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_time: Optional[str] = None,
                 custom_argument: Optional[str] = None,
                 enable: Optional[bool] = None,
                 modify_time: Optional[str] = None,
                 name: Optional[str] = None,
                 trigger_desc: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str create_time: Create time of SCF function trigger.
        :param str custom_argument: User-defined parameters of SCF function trigger.
        :param bool enable: Whether SCF function trigger is enable.
        :param str modify_time: Modify time of SCF function trigger.
        :param str name: Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        :param str trigger_desc: TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
        :param str type: Type of the SCF function trigger, support `cos`, `cls`, `timer`, `ckafka`, `http`, `apigw`, `cmq`.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if custom_argument is not None:
            pulumi.set(__self__, "custom_argument", custom_argument)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if trigger_desc is not None:
            pulumi.set(__self__, "trigger_desc", trigger_desc)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Create time of SCF function trigger.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customArgument")
    def custom_argument(self) -> Optional[str]:
        """
        User-defined parameters of SCF function trigger.
        """
        return pulumi.get(self, "custom_argument")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Whether SCF function trigger is enable.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[str]:
        """
        Modify time of SCF function trigger.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> Optional[str]:
        """
        TriggerDesc of the SCF function trigger, parameter format of `timer` is linux cron expression; parameter of `cos` type is json string `{"bucketUrl":"<name-appid>.cos.<region>.myqcloud.com","event":"cos:ObjectCreated:*","filter":{"Prefix":"","Suffix":""}}`, where `bucketUrl` is cos bucket (optional), `event` is the cos event trigger, `Prefix` is the corresponding file prefix filter condition, `Suffix` is the suffix filter condition, if not need filter condition can not pass; `cmq` type does not pass this parameter; `ckafka` type parameter format is json string `{"maxMsgNum":"1","offset":"latest"}`; `apigw` type parameter format is json string `{"api":{"authRequired":"FALSE","requestConfig":{"method":"ANY"},"isIntegratedResponse":"FALSE"},"service":{"serviceId":"service-dqzh68sg"},"release":{"environmentName":"test"}}`.
        """
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the SCF function trigger, support `cos`, `cls`, `timer`, `ckafka`, `http`, `apigw`, `cmq`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class LayerContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosBucketName":
            suggest = "cos_bucket_name"
        elif key == "cosBucketRegion":
            suggest = "cos_bucket_region"
        elif key == "cosObjectName":
            suggest = "cos_object_name"
        elif key == "zipFile":
            suggest = "zip_file"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayerContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayerContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayerContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cos_bucket_name: Optional[str] = None,
                 cos_bucket_region: Optional[str] = None,
                 cos_object_name: Optional[str] = None,
                 zip_file: Optional[str] = None):
        """
        :param str cos_bucket_name: Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zip_file`.
        :param str cos_bucket_region: Cos bucket region of the SCF layer, conflict with `zip_file`.
        :param str cos_object_name: Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
        :param str zip_file: Zip file of the SCF layer, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
        """
        if cos_bucket_name is not None:
            pulumi.set(__self__, "cos_bucket_name", cos_bucket_name)
        if cos_bucket_region is not None:
            pulumi.set(__self__, "cos_bucket_region", cos_bucket_region)
        if cos_object_name is not None:
            pulumi.set(__self__, "cos_object_name", cos_object_name)
        if zip_file is not None:
            pulumi.set(__self__, "zip_file", zip_file)

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> Optional[str]:
        """
        Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_bucket_name")

    @property
    @pulumi.getter(name="cosBucketRegion")
    def cos_bucket_region(self) -> Optional[str]:
        """
        Cos bucket region of the SCF layer, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_bucket_region")

    @property
    @pulumi.getter(name="cosObjectName")
    def cos_object_name(self) -> Optional[str]:
        """
        Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_object_name")

    @property
    @pulumi.getter(name="zipFile")
    def zip_file(self) -> Optional[str]:
        """
        Zip file of the SCF layer, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
        """
        return pulumi.get(self, "zip_file")


@pulumi.output_type
class ProvisionedConcurrencyConfigTriggerAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerCronConfig":
            suggest = "trigger_cron_config"
        elif key == "triggerName":
            suggest = "trigger_name"
        elif key == "triggerProvisionedConcurrencyNum":
            suggest = "trigger_provisioned_concurrency_num"
        elif key == "provisionedType":
            suggest = "provisioned_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionedConcurrencyConfigTriggerAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionedConcurrencyConfigTriggerAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionedConcurrencyConfigTriggerAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trigger_cron_config: str,
                 trigger_name: str,
                 trigger_provisioned_concurrency_num: int,
                 provisioned_type: Optional[str] = None):
        """
        :param str trigger_cron_config: Trigger time of the scheduled action in Cron expression. Seven fields are required and should be separated with a space. Note: this field may return null, indicating that no valid values can be obtained.
        :param str trigger_name: Scheduled action name Note: this field may return null, indicating that no valid values can be obtained.
        :param int trigger_provisioned_concurrency_num: Target provisioned concurrency of the scheduled scaling action Note: this field may return null, indicating that no valid values can be obtained.
        :param str provisioned_type: The provision type. Value: Default Note: This field may return null, indicating that no valid value can be found.
        """
        pulumi.set(__self__, "trigger_cron_config", trigger_cron_config)
        pulumi.set(__self__, "trigger_name", trigger_name)
        pulumi.set(__self__, "trigger_provisioned_concurrency_num", trigger_provisioned_concurrency_num)
        if provisioned_type is not None:
            pulumi.set(__self__, "provisioned_type", provisioned_type)

    @property
    @pulumi.getter(name="triggerCronConfig")
    def trigger_cron_config(self) -> str:
        """
        Trigger time of the scheduled action in Cron expression. Seven fields are required and should be separated with a space. Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "trigger_cron_config")

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> str:
        """
        Scheduled action name Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "trigger_name")

    @property
    @pulumi.getter(name="triggerProvisionedConcurrencyNum")
    def trigger_provisioned_concurrency_num(self) -> int:
        """
        Target provisioned concurrency of the scheduled scaling action Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "trigger_provisioned_concurrency_num")

    @property
    @pulumi.getter(name="provisionedType")
    def provisioned_type(self) -> Optional[str]:
        """
        The provision type. Value: Default Note: This field may return null, indicating that no valid value can be found.
        """
        return pulumi.get(self, "provisioned_type")


@pulumi.output_type
class GetAccountInfoAccountLimitResult(dict):
    def __init__(__self__, *,
                 namespaces: Sequence['outputs.GetAccountInfoAccountLimitNamespaceResult'],
                 namespaces_count: int):
        """
        :param Sequence['GetAccountInfoAccountLimitNamespaceArgs'] namespaces: Namespace name.
        :param int namespaces_count: Number of namespaces.
        """
        pulumi.set(__self__, "namespaces", namespaces)
        pulumi.set(__self__, "namespaces_count", namespaces_count)

    @property
    @pulumi.getter
    def namespaces(self) -> Sequence['outputs.GetAccountInfoAccountLimitNamespaceResult']:
        """
        Namespace name.
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="namespacesCount")
    def namespaces_count(self) -> int:
        """
        Number of namespaces.
        """
        return pulumi.get(self, "namespaces_count")


@pulumi.output_type
class GetAccountInfoAccountLimitNamespaceResult(dict):
    def __init__(__self__, *,
                 concurrent_executions: int,
                 functions_count: int,
                 init_timeout_limit: int,
                 max_msg_ttl: int,
                 min_msg_ttl: int,
                 namespace: str,
                 retry_num_limit: int,
                 test_model_limit: int,
                 timeout_limit: int,
                 triggers: Sequence['outputs.GetAccountInfoAccountLimitNamespaceTriggerResult']):
        """
        :param int concurrent_executions: Concurrency.
        :param int functions_count: Number of functions in namespace.
        :param int init_timeout_limit: Initialization timeout limit.
        :param int max_msg_ttl: Upper limit of message retention time for async retry.
        :param int min_msg_ttl: Lower limit of message retention time for async retry.
        :param str namespace: Namespace name.
        :param int retry_num_limit: Limit of async retry attempt quantity.
        :param int test_model_limit: Test event limit Note: this field may return null, indicating that no valid values can be obtained.
        :param int timeout_limit: Timeout limit.
        :param Sequence['GetAccountInfoAccountLimitNamespaceTriggerArgs'] triggers: Trigger information.
        """
        pulumi.set(__self__, "concurrent_executions", concurrent_executions)
        pulumi.set(__self__, "functions_count", functions_count)
        pulumi.set(__self__, "init_timeout_limit", init_timeout_limit)
        pulumi.set(__self__, "max_msg_ttl", max_msg_ttl)
        pulumi.set(__self__, "min_msg_ttl", min_msg_ttl)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "retry_num_limit", retry_num_limit)
        pulumi.set(__self__, "test_model_limit", test_model_limit)
        pulumi.set(__self__, "timeout_limit", timeout_limit)
        pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="concurrentExecutions")
    def concurrent_executions(self) -> int:
        """
        Concurrency.
        """
        return pulumi.get(self, "concurrent_executions")

    @property
    @pulumi.getter(name="functionsCount")
    def functions_count(self) -> int:
        """
        Number of functions in namespace.
        """
        return pulumi.get(self, "functions_count")

    @property
    @pulumi.getter(name="initTimeoutLimit")
    def init_timeout_limit(self) -> int:
        """
        Initialization timeout limit.
        """
        return pulumi.get(self, "init_timeout_limit")

    @property
    @pulumi.getter(name="maxMsgTtl")
    def max_msg_ttl(self) -> int:
        """
        Upper limit of message retention time for async retry.
        """
        return pulumi.get(self, "max_msg_ttl")

    @property
    @pulumi.getter(name="minMsgTtl")
    def min_msg_ttl(self) -> int:
        """
        Lower limit of message retention time for async retry.
        """
        return pulumi.get(self, "min_msg_ttl")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace name.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="retryNumLimit")
    def retry_num_limit(self) -> int:
        """
        Limit of async retry attempt quantity.
        """
        return pulumi.get(self, "retry_num_limit")

    @property
    @pulumi.getter(name="testModelLimit")
    def test_model_limit(self) -> int:
        """
        Test event limit Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "test_model_limit")

    @property
    @pulumi.getter(name="timeoutLimit")
    def timeout_limit(self) -> int:
        """
        Timeout limit.
        """
        return pulumi.get(self, "timeout_limit")

    @property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetAccountInfoAccountLimitNamespaceTriggerResult']:
        """
        Trigger information.
        """
        return pulumi.get(self, "triggers")


@pulumi.output_type
class GetAccountInfoAccountLimitNamespaceTriggerResult(dict):
    def __init__(__self__, *,
                 apigw: int,
                 ckafka: int,
                 clb: int,
                 cls: int,
                 cm: int,
                 cmq: int,
                 cos: int,
                 eb: int,
                 mps: int,
                 timer: int,
                 total: int,
                 vod: int):
        """
        :param int apigw: Number of API Gateway triggers.
        :param int ckafka: Number of CKafka triggers.
        :param int clb: Number of CLB triggers.
        :param int cls: Number of CLS triggers.
        :param int cm: Number of CM triggers.
        :param int cmq: Number of CMQ triggers.
        :param int cos: Number of COS triggers.
        :param int eb: Number of EventBridge triggers Note: This field may return null, indicating that no valid values can be obtained.
        :param int mps: Number of MPS triggers.
        :param int timer: Number of timer triggers.
        :param int total: Total number of triggers.
        :param int vod: Number of VOD triggers.
        """
        pulumi.set(__self__, "apigw", apigw)
        pulumi.set(__self__, "ckafka", ckafka)
        pulumi.set(__self__, "clb", clb)
        pulumi.set(__self__, "cls", cls)
        pulumi.set(__self__, "cm", cm)
        pulumi.set(__self__, "cmq", cmq)
        pulumi.set(__self__, "cos", cos)
        pulumi.set(__self__, "eb", eb)
        pulumi.set(__self__, "mps", mps)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "vod", vod)

    @property
    @pulumi.getter
    def apigw(self) -> int:
        """
        Number of API Gateway triggers.
        """
        return pulumi.get(self, "apigw")

    @property
    @pulumi.getter
    def ckafka(self) -> int:
        """
        Number of CKafka triggers.
        """
        return pulumi.get(self, "ckafka")

    @property
    @pulumi.getter
    def clb(self) -> int:
        """
        Number of CLB triggers.
        """
        return pulumi.get(self, "clb")

    @property
    @pulumi.getter
    def cls(self) -> int:
        """
        Number of CLS triggers.
        """
        return pulumi.get(self, "cls")

    @property
    @pulumi.getter
    def cm(self) -> int:
        """
        Number of CM triggers.
        """
        return pulumi.get(self, "cm")

    @property
    @pulumi.getter
    def cmq(self) -> int:
        """
        Number of CMQ triggers.
        """
        return pulumi.get(self, "cmq")

    @property
    @pulumi.getter
    def cos(self) -> int:
        """
        Number of COS triggers.
        """
        return pulumi.get(self, "cos")

    @property
    @pulumi.getter
    def eb(self) -> int:
        """
        Number of EventBridge triggers Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "eb")

    @property
    @pulumi.getter
    def mps(self) -> int:
        """
        Number of MPS triggers.
        """
        return pulumi.get(self, "mps")

    @property
    @pulumi.getter
    def timer(self) -> int:
        """
        Number of timer triggers.
        """
        return pulumi.get(self, "timer")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total number of triggers.
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def vod(self) -> int:
        """
        Number of VOD triggers.
        """
        return pulumi.get(self, "vod")


@pulumi.output_type
class GetAccountInfoAccountUsageResult(dict):
    def __init__(__self__, *,
                 namespaces: Sequence['outputs.GetAccountInfoAccountUsageNamespaceResult'],
                 namespaces_count: int,
                 total_allocated_concurrency_mem: int,
                 total_concurrency_mem: int,
                 user_concurrency_mem_limit: int):
        """
        :param Sequence['GetAccountInfoAccountUsageNamespaceArgs'] namespaces: Namespace name.
        :param int namespaces_count: Number of namespaces.
        :param int total_allocated_concurrency_mem: Quota of configured user concurrency memory in the current region.
        :param int total_concurrency_mem: Upper limit of user concurrency memory in the current region.
        :param int user_concurrency_mem_limit: Quota of account concurrency actually configured by user.
        """
        pulumi.set(__self__, "namespaces", namespaces)
        pulumi.set(__self__, "namespaces_count", namespaces_count)
        pulumi.set(__self__, "total_allocated_concurrency_mem", total_allocated_concurrency_mem)
        pulumi.set(__self__, "total_concurrency_mem", total_concurrency_mem)
        pulumi.set(__self__, "user_concurrency_mem_limit", user_concurrency_mem_limit)

    @property
    @pulumi.getter
    def namespaces(self) -> Sequence['outputs.GetAccountInfoAccountUsageNamespaceResult']:
        """
        Namespace name.
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="namespacesCount")
    def namespaces_count(self) -> int:
        """
        Number of namespaces.
        """
        return pulumi.get(self, "namespaces_count")

    @property
    @pulumi.getter(name="totalAllocatedConcurrencyMem")
    def total_allocated_concurrency_mem(self) -> int:
        """
        Quota of configured user concurrency memory in the current region.
        """
        return pulumi.get(self, "total_allocated_concurrency_mem")

    @property
    @pulumi.getter(name="totalConcurrencyMem")
    def total_concurrency_mem(self) -> int:
        """
        Upper limit of user concurrency memory in the current region.
        """
        return pulumi.get(self, "total_concurrency_mem")

    @property
    @pulumi.getter(name="userConcurrencyMemLimit")
    def user_concurrency_mem_limit(self) -> int:
        """
        Quota of account concurrency actually configured by user.
        """
        return pulumi.get(self, "user_concurrency_mem_limit")


@pulumi.output_type
class GetAccountInfoAccountUsageNamespaceResult(dict):
    def __init__(__self__, *,
                 functions: Sequence[str],
                 functions_count: int,
                 namespace: str,
                 total_allocated_concurrency_mem: int,
                 total_allocated_provisioned_mem: int,
                 total_concurrency_mem: int):
        """
        :param Sequence[str] functions: Function array.
        :param int functions_count: Number of functions in namespace.
        :param str namespace: Namespace name.
        :param int total_allocated_concurrency_mem: Quota of configured user concurrency memory in the current region.
        :param int total_allocated_provisioned_mem: Provisioned concurrency usage of the namespace Note: This field may return null, indicating that no valid value can be obtained.
        :param int total_concurrency_mem: Upper limit of user concurrency memory in the current region.
        """
        pulumi.set(__self__, "functions", functions)
        pulumi.set(__self__, "functions_count", functions_count)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "total_allocated_concurrency_mem", total_allocated_concurrency_mem)
        pulumi.set(__self__, "total_allocated_provisioned_mem", total_allocated_provisioned_mem)
        pulumi.set(__self__, "total_concurrency_mem", total_concurrency_mem)

    @property
    @pulumi.getter
    def functions(self) -> Sequence[str]:
        """
        Function array.
        """
        return pulumi.get(self, "functions")

    @property
    @pulumi.getter(name="functionsCount")
    def functions_count(self) -> int:
        """
        Number of functions in namespace.
        """
        return pulumi.get(self, "functions_count")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace name.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="totalAllocatedConcurrencyMem")
    def total_allocated_concurrency_mem(self) -> int:
        """
        Quota of configured user concurrency memory in the current region.
        """
        return pulumi.get(self, "total_allocated_concurrency_mem")

    @property
    @pulumi.getter(name="totalAllocatedProvisionedMem")
    def total_allocated_provisioned_mem(self) -> int:
        """
        Provisioned concurrency usage of the namespace Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "total_allocated_provisioned_mem")

    @property
    @pulumi.getter(name="totalConcurrencyMem")
    def total_concurrency_mem(self) -> int:
        """
        Upper limit of user concurrency memory in the current region.
        """
        return pulumi.get(self, "total_concurrency_mem")


@pulumi.output_type
class GetAsyncEventManagementEventListResult(dict):
    def __init__(__self__, *,
                 end_time: str,
                 invoke_request_id: str,
                 invoke_type: str,
                 qualifier: str,
                 start_time: str,
                 status: str):
        """
        :param str end_time: Invocation end time in the format of %Y-%m-%d %H:%M:%S.%f.
        :param str invoke_request_id: Filter (event invocation request ID).
        :param str invoke_type: Filter (invocation type list), Values: CMQ, CKAFKA_TRIGGER, APIGW, COS, TRIGGER_TIMER, MPS_TRIGGER, CLS_TRIGGER, OTHERS.
        :param str qualifier: Filter (function version).
        :param str start_time: Invocation start time in the format of %Y-%m-%d %H:%M:%S.%f.
        :param str status: Filter (event status list), Values: RUNNING, FINISHED, ABORTED, FAILED.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "invoke_request_id", invoke_request_id)
        pulumi.set(__self__, "invoke_type", invoke_type)
        pulumi.set(__self__, "qualifier", qualifier)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Invocation end time in the format of %Y-%m-%d %H:%M:%S.%f.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="invokeRequestId")
    def invoke_request_id(self) -> str:
        """
        Filter (event invocation request ID).
        """
        return pulumi.get(self, "invoke_request_id")

    @property
    @pulumi.getter(name="invokeType")
    def invoke_type(self) -> str:
        """
        Filter (invocation type list), Values: CMQ, CKAFKA_TRIGGER, APIGW, COS, TRIGGER_TIMER, MPS_TRIGGER, CLS_TRIGGER, OTHERS.
        """
        return pulumi.get(self, "invoke_type")

    @property
    @pulumi.getter
    def qualifier(self) -> str:
        """
        Filter (function version).
        """
        return pulumi.get(self, "qualifier")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Invocation start time in the format of %Y-%m-%d %H:%M:%S.%f.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Filter (event status list), Values: RUNNING, FINISHED, ABORTED, FAILED.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAsyncEventStatusResultResult(dict):
    def __init__(__self__, *,
                 invoke_request_id: str,
                 status: str,
                 status_code: int):
        """
        :param str invoke_request_id: ID of the async execution request.
        :param str status: Async event status. Values: `RUNNING` (running); `FINISHED` (invoked successfully); `ABORTED` (invocation ended); `FAILED` (invocation failed).
        :param int status_code: Request status code.
        """
        pulumi.set(__self__, "invoke_request_id", invoke_request_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="invokeRequestId")
    def invoke_request_id(self) -> str:
        """
        ID of the async execution request.
        """
        return pulumi.get(self, "invoke_request_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Async event status. Values: `RUNNING` (running); `FINISHED` (invoked successfully); `ABORTED` (invocation ended); `FAILED` (invocation failed).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        """
        Request status code.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetFunctionAliasesAliasResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 description: str,
                 function_version: str,
                 mod_time: str,
                 name: str,
                 routing_configs: Sequence['outputs.GetFunctionAliasesAliasRoutingConfigResult']):
        """
        :param str add_time: Creation timeNote: this field may return null, indicating that no valid values can be obtained.
        :param str description: DescriptionNote: this field may return null, indicating that no valid values can be obtained.
        :param str function_version: If this parameter is provided, only aliases associated with this function version will be returned.
        :param str mod_time: Update timeNote: this field may return null, indicating that no valid values can be obtained.
        :param str name: Alias name.
        :param Sequence['GetFunctionAliasesAliasRoutingConfigArgs'] routing_configs: Routing information of aliasNote: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "function_version", function_version)
        pulumi.set(__self__, "mod_time", mod_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routing_configs", routing_configs)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        """
        Creation timeNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        DescriptionNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="functionVersion")
    def function_version(self) -> str:
        """
        If this parameter is provided, only aliases associated with this function version will be returned.
        """
        return pulumi.get(self, "function_version")

    @property
    @pulumi.getter(name="modTime")
    def mod_time(self) -> str:
        """
        Update timeNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "mod_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Alias name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routingConfigs")
    def routing_configs(self) -> Sequence['outputs.GetFunctionAliasesAliasRoutingConfigResult']:
        """
        Routing information of aliasNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "routing_configs")


@pulumi.output_type
class GetFunctionAliasesAliasRoutingConfigResult(dict):
    def __init__(__self__, *,
                 addition_version_matchs: Sequence['outputs.GetFunctionAliasesAliasRoutingConfigAdditionVersionMatchResult'],
                 additional_version_weights: Sequence['outputs.GetFunctionAliasesAliasRoutingConfigAdditionalVersionWeightResult']):
        """
        :param Sequence['GetFunctionAliasesAliasRoutingConfigAdditionVersionMatchArgs'] addition_version_matchs: Additional version with rule-based routing.
        :param Sequence['GetFunctionAliasesAliasRoutingConfigAdditionalVersionWeightArgs'] additional_version_weights: Additional version with random weight-based routing.
        """
        pulumi.set(__self__, "addition_version_matchs", addition_version_matchs)
        pulumi.set(__self__, "additional_version_weights", additional_version_weights)

    @property
    @pulumi.getter(name="additionVersionMatchs")
    def addition_version_matchs(self) -> Sequence['outputs.GetFunctionAliasesAliasRoutingConfigAdditionVersionMatchResult']:
        """
        Additional version with rule-based routing.
        """
        return pulumi.get(self, "addition_version_matchs")

    @property
    @pulumi.getter(name="additionalVersionWeights")
    def additional_version_weights(self) -> Sequence['outputs.GetFunctionAliasesAliasRoutingConfigAdditionalVersionWeightResult']:
        """
        Additional version with random weight-based routing.
        """
        return pulumi.get(self, "additional_version_weights")


@pulumi.output_type
class GetFunctionAliasesAliasRoutingConfigAdditionVersionMatchResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 key: str,
                 method: str,
                 version: str):
        """
        :param str expression: Rule requirements for range match:It should be described in an open or closed range, i.e., `(a,b)` or `[a,b]`, where both a and b are integersRule requirements for exact match:Exact string match.
        :param str key: Matching rule key. When the API is called, pass in the `key` to route the request to the specified version based on the matching ruleHeader method:Enter invoke.headers.User for `key` and pass in `RoutingKey:{User:value}` when invoking a function through `invoke` for invocation based on rule matching.
        :param str method: Match method. Valid values:range: range matchexact: exact string match.
        :param str version: Function version name.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Rule requirements for range match:It should be described in an open or closed range, i.e., `(a,b)` or `[a,b]`, where both a and b are integersRule requirements for exact match:Exact string match.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Matching rule key. When the API is called, pass in the `key` to route the request to the specified version based on the matching ruleHeader method:Enter invoke.headers.User for `key` and pass in `RoutingKey:{User:value}` when invoking a function through `invoke` for invocation based on rule matching.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def method(self) -> str:
        """
        Match method. Valid values:range: range matchexact: exact string match.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Function version name.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFunctionAliasesAliasRoutingConfigAdditionalVersionWeightResult(dict):
    def __init__(__self__, *,
                 version: str,
                 weight: float):
        """
        :param str version: Function version name.
        :param float weight: Version weight.
        """
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Function version name.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def weight(self) -> float:
        """
        Version weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetFunctionVersionsVersionResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 description: str,
                 mod_time: str,
                 status: str,
                 version: str):
        """
        :param str add_time: The creation timeNote: This field may return null, indicating that no valid value was found.
        :param str description: Version descriptionNote: This field may return null, indicating that no valid values is found.
        :param str mod_time: Update timeNote: This field may return null, indicating that no valid value was found.
        :param str status: Version statusNote: this field may return `null`, indicating that no valid values can be obtained.
        :param str version: Function version name.
        """
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "mod_time", mod_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        """
        The creation timeNote: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Version descriptionNote: This field may return null, indicating that no valid values is found.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="modTime")
    def mod_time(self) -> str:
        """
        Update timeNote: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "mod_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Version statusNote: this field may return `null`, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Function version name.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFunctionsFunctionResult(dict):
    def __init__(__self__, *,
                 async_run_enable: str,
                 cls_logset_id: str,
                 cls_topic_id: str,
                 code_error: str,
                 code_result: str,
                 code_size: int,
                 create_time: str,
                 description: str,
                 dns_cache: bool,
                 eip_fixed: bool,
                 eips: Sequence[str],
                 enable_eip_config: bool,
                 enable_public_net: bool,
                 environment: Mapping[str, Any],
                 err_no: int,
                 handler: str,
                 host: str,
                 image_configs: Sequence['outputs.GetFunctionsFunctionImageConfigResult'],
                 install_dependency: bool,
                 intranet_configs: Sequence['outputs.GetFunctionsFunctionIntranetConfigResult'],
                 l5_enable: bool,
                 mem_size: int,
                 modify_time: str,
                 name: str,
                 namespace: str,
                 role: str,
                 runtime: str,
                 status: str,
                 status_desc: str,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 timeout: int,
                 trigger_infos: Sequence['outputs.GetFunctionsFunctionTriggerInfoResult'],
                 vip: str,
                 vpc_id: str):
        """
        :param str async_run_enable: Whether asynchronous attribute is enabled.
        :param str cls_logset_id: CLS logset ID of the SCF function.
        :param str cls_topic_id: CLS topic ID of the SCF function.
        :param str code_error: Code error of the SCF function.
        :param str code_result: Code result of the SCF function.
        :param int code_size: Code size of the SCF function.
        :param str create_time: Create time of the SCF function trigger.
        :param str description: Description of the SCF function to be queried.
        :param bool dns_cache: Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
        :param bool eip_fixed: Whether EIP is a fixed IP.
        :param Sequence[str] eips: EIP list of the SCF function.
        :param bool enable_eip_config: Whether the EIP enabled.
        :param bool enable_public_net: Whether the public net enabled.
        :param Mapping[str, Any] environment: Environment variable of the SCF function.
        :param int err_no: Errno of the SCF function.
        :param str handler: Handler of the SCF function.
        :param str host: Host of the SCF function.
        :param Sequence['GetFunctionsFunctionImageConfigArgs'] image_configs: Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
        :param bool install_dependency: Whether to automatically install dependencies.
        :param Sequence['GetFunctionsFunctionIntranetConfigArgs'] intranet_configs: Intranet access configuration.
        :param bool l5_enable: Whether to enable L5.
        :param int mem_size: Memory size of the SCF function runtime, unit is M.
        :param str modify_time: Modify time of the SCF function trigger.
        :param str name: Name of the SCF function to be queried.
        :param str namespace: Namespace of the SCF function to be queried.
        :param str role: CAM role of the SCF function.
        :param str runtime: Runtime of the SCF function.
        :param str status: Status of the SCF function.
        :param str status_desc: Status description of the SCF function.
        :param str subnet_id: Subnet ID of the SCF function.
        :param Mapping[str, Any] tags: Tags of the SCF function to be queried, can use up to 10 tags.
        :param int timeout: Timeout of the SCF function maximum execution time, unit is second.
        :param Sequence['GetFunctionsFunctionTriggerInfoArgs'] trigger_infos: Trigger details list the SCF function. Each element contains the following attributes:
        :param str vip: Vip of the SCF function.
        :param str vpc_id: VPC ID of the SCF function.
        """
        pulumi.set(__self__, "async_run_enable", async_run_enable)
        pulumi.set(__self__, "cls_logset_id", cls_logset_id)
        pulumi.set(__self__, "cls_topic_id", cls_topic_id)
        pulumi.set(__self__, "code_error", code_error)
        pulumi.set(__self__, "code_result", code_result)
        pulumi.set(__self__, "code_size", code_size)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dns_cache", dns_cache)
        pulumi.set(__self__, "eip_fixed", eip_fixed)
        pulumi.set(__self__, "eips", eips)
        pulumi.set(__self__, "enable_eip_config", enable_eip_config)
        pulumi.set(__self__, "enable_public_net", enable_public_net)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "err_no", err_no)
        pulumi.set(__self__, "handler", handler)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "image_configs", image_configs)
        pulumi.set(__self__, "install_dependency", install_dependency)
        pulumi.set(__self__, "intranet_configs", intranet_configs)
        pulumi.set(__self__, "l5_enable", l5_enable)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "trigger_infos", trigger_infos)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="asyncRunEnable")
    def async_run_enable(self) -> str:
        """
        Whether asynchronous attribute is enabled.
        """
        return pulumi.get(self, "async_run_enable")

    @property
    @pulumi.getter(name="clsLogsetId")
    def cls_logset_id(self) -> str:
        """
        CLS logset ID of the SCF function.
        """
        return pulumi.get(self, "cls_logset_id")

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> str:
        """
        CLS topic ID of the SCF function.
        """
        return pulumi.get(self, "cls_topic_id")

    @property
    @pulumi.getter(name="codeError")
    def code_error(self) -> str:
        """
        Code error of the SCF function.
        """
        return pulumi.get(self, "code_error")

    @property
    @pulumi.getter(name="codeResult")
    def code_result(self) -> str:
        """
        Code result of the SCF function.
        """
        return pulumi.get(self, "code_result")

    @property
    @pulumi.getter(name="codeSize")
    def code_size(self) -> int:
        """
        Code size of the SCF function.
        """
        return pulumi.get(self, "code_size")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the SCF function trigger.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the SCF function to be queried.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsCache")
    def dns_cache(self) -> bool:
        """
        Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
        """
        return pulumi.get(self, "dns_cache")

    @property
    @pulumi.getter(name="eipFixed")
    def eip_fixed(self) -> bool:
        """
        Whether EIP is a fixed IP.
        """
        return pulumi.get(self, "eip_fixed")

    @property
    @pulumi.getter
    def eips(self) -> Sequence[str]:
        """
        EIP list of the SCF function.
        """
        return pulumi.get(self, "eips")

    @property
    @pulumi.getter(name="enableEipConfig")
    def enable_eip_config(self) -> bool:
        """
        Whether the EIP enabled.
        """
        return pulumi.get(self, "enable_eip_config")

    @property
    @pulumi.getter(name="enablePublicNet")
    def enable_public_net(self) -> bool:
        """
        Whether the public net enabled.
        """
        return pulumi.get(self, "enable_public_net")

    @property
    @pulumi.getter
    def environment(self) -> Mapping[str, Any]:
        """
        Environment variable of the SCF function.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="errNo")
    def err_no(self) -> int:
        """
        Errno of the SCF function.
        """
        return pulumi.get(self, "err_no")

    @property
    @pulumi.getter
    def handler(self) -> str:
        """
        Handler of the SCF function.
        """
        return pulumi.get(self, "handler")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host of the SCF function.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="imageConfigs")
    def image_configs(self) -> Sequence['outputs.GetFunctionsFunctionImageConfigResult']:
        """
        Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
        """
        return pulumi.get(self, "image_configs")

    @property
    @pulumi.getter(name="installDependency")
    def install_dependency(self) -> bool:
        """
        Whether to automatically install dependencies.
        """
        return pulumi.get(self, "install_dependency")

    @property
    @pulumi.getter(name="intranetConfigs")
    def intranet_configs(self) -> Sequence['outputs.GetFunctionsFunctionIntranetConfigResult']:
        """
        Intranet access configuration.
        """
        return pulumi.get(self, "intranet_configs")

    @property
    @pulumi.getter(name="l5Enable")
    def l5_enable(self) -> bool:
        """
        Whether to enable L5.
        """
        return pulumi.get(self, "l5_enable")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> int:
        """
        Memory size of the SCF function runtime, unit is M.
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        """
        Modify time of the SCF function trigger.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the SCF function to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace of the SCF function to be queried.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        CAM role of the SCF function.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def runtime(self) -> str:
        """
        Runtime of the SCF function.
        """
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the SCF function.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        """
        Status description of the SCF function.
        """
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet ID of the SCF function.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of the SCF function to be queried, can use up to 10 tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        Timeout of the SCF function maximum execution time, unit is second.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="triggerInfos")
    def trigger_infos(self) -> Sequence['outputs.GetFunctionsFunctionTriggerInfoResult']:
        """
        Trigger details list the SCF function. Each element contains the following attributes:
        """
        return pulumi.get(self, "trigger_infos")

    @property
    @pulumi.getter
    def vip(self) -> str:
        """
        Vip of the SCF function.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC ID of the SCF function.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetFunctionsFunctionImageConfigResult(dict):
    def __init__(__self__, *,
                 args: str,
                 command: str,
                 container_image_accelerate: bool,
                 entry_point: str,
                 image_port: int,
                 image_type: str,
                 image_uri: str,
                 registry_id: str):
        """
        :param str args: the parameters of command.
        :param str command: The command of entrypoint.
        :param bool container_image_accelerate: Image accelerate switch.
        :param str entry_point: The entrypoint of app.
        :param int image_port: Image function port setting. Default is `9000`, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
        :param str image_type: The image type. personal or enterprise.
        :param str image_uri: The uri of image.
        :param str registry_id: The registry id of TCR. When image type is enterprise, it must be set.
        """
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "container_image_accelerate", container_image_accelerate)
        pulumi.set(__self__, "entry_point", entry_point)
        pulumi.set(__self__, "image_port", image_port)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "image_uri", image_uri)
        pulumi.set(__self__, "registry_id", registry_id)

    @property
    @pulumi.getter
    def args(self) -> str:
        """
        the parameters of command.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> str:
        """
        The command of entrypoint.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="containerImageAccelerate")
    def container_image_accelerate(self) -> bool:
        """
        Image accelerate switch.
        """
        return pulumi.get(self, "container_image_accelerate")

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> str:
        """
        The entrypoint of app.
        """
        return pulumi.get(self, "entry_point")

    @property
    @pulumi.getter(name="imagePort")
    def image_port(self) -> int:
        """
        Image function port setting. Default is `9000`, -1 indicates no port mirroring function. Other value ranges 0 ~ 65535.
        """
        return pulumi.get(self, "image_port")

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        """
        The image type. personal or enterprise.
        """
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        """
        The uri of image.
        """
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        """
        The registry id of TCR. When image type is enterprise, it must be set.
        """
        return pulumi.get(self, "registry_id")


@pulumi.output_type
class GetFunctionsFunctionIntranetConfigResult(dict):
    def __init__(__self__, *,
                 ip_addresses: Sequence[str],
                 ip_fixed: str):
        """
        :param Sequence[str] ip_addresses: If fixed intranet IP is enabled, this field returns the IP list used.
        :param str ip_fixed: Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
        """
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "ip_fixed", ip_fixed)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        """
        If fixed intranet IP is enabled, this field returns the IP list used.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipFixed")
    def ip_fixed(self) -> str:
        """
        Whether to enable fixed intranet IP, ENABLE is enabled, DISABLE is disabled.
        """
        return pulumi.get(self, "ip_fixed")


@pulumi.output_type
class GetFunctionsFunctionTriggerInfoResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 custom_argument: str,
                 enable: bool,
                 modify_time: str,
                 name: str,
                 trigger_desc: str,
                 type: str):
        """
        :param str create_time: Create time of the SCF function trigger.
        :param str custom_argument: user-defined parameter of the SCF function trigger.
        :param bool enable: Whether to enable SCF function trigger.
        :param str modify_time: Modify time of the SCF function trigger.
        :param str name: Name of the SCF function to be queried.
        :param str trigger_desc: TriggerDesc of the SCF function trigger.
        :param str type: Type of the SCF function trigger.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_argument", custom_argument)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "trigger_desc", trigger_desc)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the SCF function trigger.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customArgument")
    def custom_argument(self) -> str:
        """
        user-defined parameter of the SCF function trigger.
        """
        return pulumi.get(self, "custom_argument")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Whether to enable SCF function trigger.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        """
        Modify time of the SCF function trigger.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the SCF function to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> str:
        """
        TriggerDesc of the SCF function trigger.
        """
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the SCF function trigger.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLayerVersionsLayerVersionResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 compatible_runtimes: Sequence[str],
                 description: str,
                 layer_name: str,
                 layer_version: int,
                 license_info: str,
                 stamp: str,
                 status: str):
        """
        :param str add_time: Creation time.
        :param Sequence[str] compatible_runtimes: Runtime applicable to a versionNote: This field may return null, indicating that no valid values can be obtained.
        :param str description: Version descriptionNote: This field may return null, indicating that no valid values can be obtained.
        :param str layer_name: Layer name.
        :param int layer_version: Version number.
        :param str license_info: License informationNote: This field may return null, indicating that no valid values can be obtained.
        :param str stamp: StampNote: This field may return null, indicating that no valid values can be obtained.
        :param str status: Current status of specific layer version. For valid values, please see [here](https://intl.cloud.tencent.com/document/product/583/47175?from_cn_redirect=1#.E5.B1.82.EF.BC.88layer.EF.BC.89.E7.8A.B6.E6.80.81).
        """
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "compatible_runtimes", compatible_runtimes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "layer_name", layer_name)
        pulumi.set(__self__, "layer_version", layer_version)
        pulumi.set(__self__, "license_info", license_info)
        pulumi.set(__self__, "stamp", stamp)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="compatibleRuntimes")
    def compatible_runtimes(self) -> Sequence[str]:
        """
        Runtime applicable to a versionNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "compatible_runtimes")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Version descriptionNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="layerName")
    def layer_name(self) -> str:
        """
        Layer name.
        """
        return pulumi.get(self, "layer_name")

    @property
    @pulumi.getter(name="layerVersion")
    def layer_version(self) -> int:
        """
        Version number.
        """
        return pulumi.get(self, "layer_version")

    @property
    @pulumi.getter(name="licenseInfo")
    def license_info(self) -> str:
        """
        License informationNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "license_info")

    @property
    @pulumi.getter
    def stamp(self) -> str:
        """
        StampNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "stamp")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of specific layer version. For valid values, please see [here](https://intl.cloud.tencent.com/document/product/583/47175?from_cn_redirect=1#.E5.B1.82.EF.BC.88layer.EF.BC.89.E7.8A.B6.E6.80.81).
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLayersLayerResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 compatible_runtimes: Sequence[str],
                 description: str,
                 layer_name: str,
                 layer_version: int,
                 license_info: str,
                 stamp: str,
                 status: str):
        """
        :param str add_time: Creation time.
        :param Sequence[str] compatible_runtimes: Runtime applicable to a versionNote: This field may return null, indicating that no valid values can be obtained.
        :param str description: Version descriptionNote: This field may return null, indicating that no valid values can be obtained.
        :param str layer_name: Layer name.
        :param int layer_version: Version number.
        :param str license_info: License informationNote: This field may return null, indicating that no valid values can be obtained.
        :param str stamp: StampNote: This field may return null, indicating that no valid values can be obtained.
        :param str status: Current status of specific layer version. For valid values, please see [here](https://intl.cloud.tencent.com/document/product/583/47175?from_cn_redirect=1#.E5.B1.82.EF.BC.88layer.EF.BC.89.E7.8A.B6.E6.80.81).
        """
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "compatible_runtimes", compatible_runtimes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "layer_name", layer_name)
        pulumi.set(__self__, "layer_version", layer_version)
        pulumi.set(__self__, "license_info", license_info)
        pulumi.set(__self__, "stamp", stamp)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="compatibleRuntimes")
    def compatible_runtimes(self) -> Sequence[str]:
        """
        Runtime applicable to a versionNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "compatible_runtimes")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Version descriptionNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="layerName")
    def layer_name(self) -> str:
        """
        Layer name.
        """
        return pulumi.get(self, "layer_name")

    @property
    @pulumi.getter(name="layerVersion")
    def layer_version(self) -> int:
        """
        Version number.
        """
        return pulumi.get(self, "layer_version")

    @property
    @pulumi.getter(name="licenseInfo")
    def license_info(self) -> str:
        """
        License informationNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "license_info")

    @property
    @pulumi.getter
    def stamp(self) -> str:
        """
        StampNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "stamp")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of specific layer version. For valid values, please see [here](https://intl.cloud.tencent.com/document/product/583/47175?from_cn_redirect=1#.E5.B1.82.EF.BC.88layer.EF.BC.89.E7.8A.B6.E6.80.81).
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLogsLogResult(dict):
    def __init__(__self__, *,
                 bill_duration: int,
                 duration: float,
                 function_name: str,
                 invoke_finished: int,
                 level: str,
                 log: str,
                 mem_usage: int,
                 request_id: str,
                 ret_code: int,
                 ret_msg: str,
                 source: str,
                 start_time: str):
        """
        :param int bill_duration: Function billing time, according to duration up to the last 100ms, unit is ms.
        :param float duration: Function execution time-consuming, unit is ms.
        :param str function_name: Name of the SCF function to be queried.
        :param int invoke_finished: Whether the function call ends, `1` means the execution ends, other values indicate the call exception.
        :param str level: Log level.
        :param str log: Log output during function execution.
        :param int mem_usage: The actual memory size consumed in the execution of the function, unit is Byte.
        :param str request_id: Execute the requestId corresponding to the function.
        :param int ret_code: Use to filter log, optional value: `not0` only returns the error log. `is0` only returns the correct log. `TimeLimitExceeded` returns the log of the function call timeout. `ResourceLimitExceeded` returns the function call generation resource overrun log. `UserCodeException` returns logs of the user code error that occurred in the function call. Not passing the parameter means returning all logs.
        :param str ret_msg: Return value after function execution is completed.
        :param str source: Log source.
        :param str start_time: The start time of the query, the format is `2017-05-16 20:00:00`, which can only be within one day from `end_time`.
        """
        pulumi.set(__self__, "bill_duration", bill_duration)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "invoke_finished", invoke_finished)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "mem_usage", mem_usage)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "ret_code", ret_code)
        pulumi.set(__self__, "ret_msg", ret_msg)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="billDuration")
    def bill_duration(self) -> int:
        """
        Function billing time, according to duration up to the last 100ms, unit is ms.
        """
        return pulumi.get(self, "bill_duration")

    @property
    @pulumi.getter
    def duration(self) -> float:
        """
        Function execution time-consuming, unit is ms.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        """
        Name of the SCF function to be queried.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="invokeFinished")
    def invoke_finished(self) -> int:
        """
        Whether the function call ends, `1` means the execution ends, other values indicate the call exception.
        """
        return pulumi.get(self, "invoke_finished")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        Log level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def log(self) -> str:
        """
        Log output during function execution.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="memUsage")
    def mem_usage(self) -> int:
        """
        The actual memory size consumed in the execution of the function, unit is Byte.
        """
        return pulumi.get(self, "mem_usage")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        """
        Execute the requestId corresponding to the function.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="retCode")
    def ret_code(self) -> int:
        """
        Use to filter log, optional value: `not0` only returns the error log. `is0` only returns the correct log. `TimeLimitExceeded` returns the log of the function call timeout. `ResourceLimitExceeded` returns the function call generation resource overrun log. `UserCodeException` returns logs of the user code error that occurred in the function call. Not passing the parameter means returning all logs.
        """
        return pulumi.get(self, "ret_code")

    @property
    @pulumi.getter(name="retMsg")
    def ret_msg(self) -> str:
        """
        Return value after function execution is completed.
        """
        return pulumi.get(self, "ret_msg")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Log source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The start time of the query, the format is `2017-05-16 20:00:00`, which can only be within one day from `end_time`.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetNamespacesNamespaceResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 modify_time: str,
                 namespace: str,
                 type: str):
        """
        :param str create_time: Create time of the SCF namespace.
        :param str description: Description of the SCF namespace to be queried.
        :param str modify_time: Modify time of the SCF namespace.
        :param str namespace: Name of the SCF namespace to be queried.
        :param str type: Type of the SCF namespace.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the SCF namespace.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the SCF namespace to be queried.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        """
        Modify time of the SCF namespace.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Name of the SCF namespace to be queried.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the SCF namespace.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRequestStatusDataResult(dict):
    def __init__(__self__, *,
                 duration: float,
                 function_name: str,
                 mem_usage: float,
                 request_id: str,
                 ret_code: int,
                 ret_msg: str,
                 retry_num: int,
                 start_time: str):
        """
        :param float duration: Time consumed for the request in ms.
        :param str function_name: Function name.
        :param float mem_usage: Time consumed by the request in MB.
        :param str request_id: Request ID.
        :param int ret_code: Result of the request. `0`: succeeded, `1`: running, `-1`: exception.
        :param str ret_msg: Return value after the function is executed.
        :param int retry_num: Retry Attempts.
        :param str start_time: Start time of the query, for example `2017-05-16 20:00:00`. If it's left empty, it defaults to 15 minutes before the current time.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "mem_usage", mem_usage)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "ret_code", ret_code)
        pulumi.set(__self__, "ret_msg", ret_msg)
        pulumi.set(__self__, "retry_num", retry_num)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def duration(self) -> float:
        """
        Time consumed for the request in ms.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="memUsage")
    def mem_usage(self) -> float:
        """
        Time consumed by the request in MB.
        """
        return pulumi.get(self, "mem_usage")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        """
        Request ID.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="retCode")
    def ret_code(self) -> int:
        """
        Result of the request. `0`: succeeded, `1`: running, `-1`: exception.
        """
        return pulumi.get(self, "ret_code")

    @property
    @pulumi.getter(name="retMsg")
    def ret_msg(self) -> str:
        """
        Return value after the function is executed.
        """
        return pulumi.get(self, "ret_msg")

    @property
    @pulumi.getter(name="retryNum")
    def retry_num(self) -> int:
        """
        Retry Attempts.
        """
        return pulumi.get(self, "retry_num")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Start time of the query, for example `2017-05-16 20:00:00`. If it's left empty, it defaults to 15 minutes before the current time.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetTriggersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Fields to be filtered. Up to 10 conditions allowed.Values of Name: VpcId, SubnetId, ClsTopicId, ClsLogsetId, Role, CfsId, CfsMountInsId, Eip. Values limit: 1.Name options: Status, Runtime, FunctionType, PublicNetStatus, AsyncRunEnable, TraceEnable. Values limit: 20.When Name is Runtime, CustomImage refers to the image type function.
        :param Sequence[str] values: Filter values of the field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Fields to be filtered. Up to 10 conditions allowed.Values of Name: VpcId, SubnetId, ClsTopicId, ClsLogsetId, Role, CfsId, CfsMountInsId, Eip. Values limit: 1.Name options: Status, Runtime, FunctionType, PublicNetStatus, AsyncRunEnable, TraceEnable. Values limit: 20.When Name is Runtime, CustomImage refers to the image type function.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter values of the field.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTriggersTriggerResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 available_status: str,
                 bind_status: str,
                 custom_argument: str,
                 enable: int,
                 mod_time: str,
                 qualifier: str,
                 resource_id: str,
                 trigger_attribute: str,
                 trigger_desc: str,
                 trigger_name: str,
                 type: str):
        """
        :param str add_time: Trigger creation time.
        :param str available_status: Whether the trigger is available.
        :param str bind_status: Trigger-Function binding status.
        :param str custom_argument: Custom parameterNote: this field may return null, indicating that no valid values can be obtained.
        :param int enable: Whether to enable.
        :param str mod_time: Trigger last modified time.
        :param str qualifier: Function version or alias.
        :param str resource_id: Minimum resource ID of trigger.
        :param str trigger_attribute: Trigger type. Two-way means that the trigger can be manipulated in both consoles, while one-way means that the trigger can be created only in the SCF Console.
        :param str trigger_desc: Detailed configuration of trigger.
        :param str trigger_name: Trigger name.
        :param str type: Trigger type.
        """
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "available_status", available_status)
        pulumi.set(__self__, "bind_status", bind_status)
        pulumi.set(__self__, "custom_argument", custom_argument)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "mod_time", mod_time)
        pulumi.set(__self__, "qualifier", qualifier)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "trigger_attribute", trigger_attribute)
        pulumi.set(__self__, "trigger_desc", trigger_desc)
        pulumi.set(__self__, "trigger_name", trigger_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        """
        Trigger creation time.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="availableStatus")
    def available_status(self) -> str:
        """
        Whether the trigger is available.
        """
        return pulumi.get(self, "available_status")

    @property
    @pulumi.getter(name="bindStatus")
    def bind_status(self) -> str:
        """
        Trigger-Function binding status.
        """
        return pulumi.get(self, "bind_status")

    @property
    @pulumi.getter(name="customArgument")
    def custom_argument(self) -> str:
        """
        Custom parameterNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "custom_argument")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Whether to enable.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="modTime")
    def mod_time(self) -> str:
        """
        Trigger last modified time.
        """
        return pulumi.get(self, "mod_time")

    @property
    @pulumi.getter
    def qualifier(self) -> str:
        """
        Function version or alias.
        """
        return pulumi.get(self, "qualifier")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        Minimum resource ID of trigger.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="triggerAttribute")
    def trigger_attribute(self) -> str:
        """
        Trigger type. Two-way means that the trigger can be manipulated in both consoles, while one-way means that the trigger can be created only in the SCF Console.
        """
        return pulumi.get(self, "trigger_attribute")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> str:
        """
        Detailed configuration of trigger.
        """
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> str:
        """
        Trigger name.
        """
        return pulumi.get(self, "trigger_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Trigger type.
        """
        return pulumi.get(self, "type")


