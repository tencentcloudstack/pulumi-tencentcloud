# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FunctionArgs', 'Function']

@pulumi.input_type
class FunctionArgs:
    def __init__(__self__, *,
                 async_run_enable: Optional[pulumi.Input[str]] = None,
                 cfs_configs: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionCfsConfigArgs']]]] = None,
                 cls_logset_id: Optional[pulumi.Input[str]] = None,
                 cls_topic_id: Optional[pulumi.Input[str]] = None,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 cos_bucket_region: Optional[pulumi.Input[str]] = None,
                 cos_object_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_cache: Optional[pulumi.Input[bool]] = None,
                 enable_eip_config: Optional[pulumi.Input[bool]] = None,
                 enable_public_net: Optional[pulumi.Input[bool]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 func_type: Optional[pulumi.Input[str]] = None,
                 handler: Optional[pulumi.Input[str]] = None,
                 image_configs: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionImageConfigArgs']]]] = None,
                 intranet_config: Optional[pulumi.Input['FunctionIntranetConfigArgs']] = None,
                 l5_enable: Optional[pulumi.Input[bool]] = None,
                 layers: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionLayerArgs']]]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTriggerArgs']]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zip_file: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Function resource.
        :param pulumi.Input[str] async_run_enable: Whether SCF function asynchronous attribute is enabled. `TRUE` is open, `FALSE` is close.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionCfsConfigArgs']]] cfs_configs: List of CFS configurations.
        :param pulumi.Input[str] cls_logset_id: cls logset id of the SCF function.
        :param pulumi.Input[str] cls_topic_id: cls topic id of the SCF function.
        :param pulumi.Input[str] cos_bucket_name: Cos bucket name of the SCF function, such as `cos-1234567890`, conflict with `zip_file`.
        :param pulumi.Input[str] cos_bucket_region: Cos bucket region of the SCF function, conflict with `zip_file`.
        :param pulumi.Input[str] cos_object_name: Cos object name of the SCF function, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
        :param pulumi.Input[str] description: Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
        :param pulumi.Input[bool] dns_cache: Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
        :param pulumi.Input[bool] enable_eip_config: Indicates whether EIP config set to `ENABLE` when `enable_public_net` was true. Default `false`.
        :param pulumi.Input[bool] enable_public_net: Indicates whether public net config enabled. Default `false`. NOTE: only `vpc_id` specified can disable public net config.
        :param pulumi.Input[Mapping[str, Any]] environment: Environment of the SCF function.
        :param pulumi.Input[str] func_type: Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
        :param pulumi.Input[str] handler: Handler of the SCF function. The format of name is `<filename>.<method_name>`, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionImageConfigArgs']]] image_configs: Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
        :param pulumi.Input['FunctionIntranetConfigArgs'] intranet_config: Intranet access configuration.
        :param pulumi.Input[bool] l5_enable: Enable L5 for SCF function, default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionLayerArgs']]] layers: The list of association layers.
        :param pulumi.Input[int] mem_size: Memory size of the SCF function, unit is MB. The default is `128`MB. The ladder is 128M.
        :param pulumi.Input[str] name: Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        :param pulumi.Input[str] namespace: Namespace of the SCF function, default is `default`.
        :param pulumi.Input[str] role: Role of the SCF function.
        :param pulumi.Input[str] runtime: Runtime of the SCF function, only supports `Python2.7`, `Python3.6`, `Nodejs6.10`, `Nodejs8.9`, `Nodejs10.15`, `Nodejs12.16`, `Php5.2`, `Php7.4`, `Go1`, `Java8`, and `CustomRuntime`, default is `Python2.7`.
        :param pulumi.Input[str] subnet_id: Subnet ID of the SCF function.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the SCF function.
        :param pulumi.Input[int] timeout: Timeout of the SCF function, unit is second. Default `3`. Available value is 1-900.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionTriggerArgs']]] triggers: Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
        :param pulumi.Input[str] vpc_id: VPC ID of the SCF function.
        :param pulumi.Input[str] zip_file: Zip file of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
        """
        if async_run_enable is not None:
            pulumi.set(__self__, "async_run_enable", async_run_enable)
        if cfs_configs is not None:
            pulumi.set(__self__, "cfs_configs", cfs_configs)
        if cls_logset_id is not None:
            pulumi.set(__self__, "cls_logset_id", cls_logset_id)
        if cls_topic_id is not None:
            pulumi.set(__self__, "cls_topic_id", cls_topic_id)
        if cos_bucket_name is not None:
            pulumi.set(__self__, "cos_bucket_name", cos_bucket_name)
        if cos_bucket_region is not None:
            pulumi.set(__self__, "cos_bucket_region", cos_bucket_region)
        if cos_object_name is not None:
            pulumi.set(__self__, "cos_object_name", cos_object_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_cache is not None:
            pulumi.set(__self__, "dns_cache", dns_cache)
        if enable_eip_config is not None:
            pulumi.set(__self__, "enable_eip_config", enable_eip_config)
        if enable_public_net is not None:
            pulumi.set(__self__, "enable_public_net", enable_public_net)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if func_type is not None:
            pulumi.set(__self__, "func_type", func_type)
        if handler is not None:
            pulumi.set(__self__, "handler", handler)
        if image_configs is not None:
            pulumi.set(__self__, "image_configs", image_configs)
        if intranet_config is not None:
            pulumi.set(__self__, "intranet_config", intranet_config)
        if l5_enable is not None:
            pulumi.set(__self__, "l5_enable", l5_enable)
        if layers is not None:
            pulumi.set(__self__, "layers", layers)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zip_file is not None:
            pulumi.set(__self__, "zip_file", zip_file)

    @property
    @pulumi.getter(name="asyncRunEnable")
    def async_run_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Whether SCF function asynchronous attribute is enabled. `TRUE` is open, `FALSE` is close.
        """
        return pulumi.get(self, "async_run_enable")

    @async_run_enable.setter
    def async_run_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "async_run_enable", value)

    @property
    @pulumi.getter(name="cfsConfigs")
    def cfs_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionCfsConfigArgs']]]]:
        """
        List of CFS configurations.
        """
        return pulumi.get(self, "cfs_configs")

    @cfs_configs.setter
    def cfs_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionCfsConfigArgs']]]]):
        pulumi.set(self, "cfs_configs", value)

    @property
    @pulumi.getter(name="clsLogsetId")
    def cls_logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        cls logset id of the SCF function.
        """
        return pulumi.get(self, "cls_logset_id")

    @cls_logset_id.setter
    def cls_logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_logset_id", value)

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        cls topic id of the SCF function.
        """
        return pulumi.get(self, "cls_topic_id")

    @cls_topic_id.setter
    def cls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_topic_id", value)

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cos bucket name of the SCF function, such as `cos-1234567890`, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_bucket_name")

    @cos_bucket_name.setter
    def cos_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket_name", value)

    @property
    @pulumi.getter(name="cosBucketRegion")
    def cos_bucket_region(self) -> Optional[pulumi.Input[str]]:
        """
        Cos bucket region of the SCF function, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_bucket_region")

    @cos_bucket_region.setter
    def cos_bucket_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket_region", value)

    @property
    @pulumi.getter(name="cosObjectName")
    def cos_object_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cos object name of the SCF function, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_object_name")

    @cos_object_name.setter
    def cos_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_object_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsCache")
    def dns_cache(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
        """
        return pulumi.get(self, "dns_cache")

    @dns_cache.setter
    def dns_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dns_cache", value)

    @property
    @pulumi.getter(name="enableEipConfig")
    def enable_eip_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether EIP config set to `ENABLE` when `enable_public_net` was true. Default `false`.
        """
        return pulumi.get(self, "enable_eip_config")

    @enable_eip_config.setter
    def enable_eip_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_eip_config", value)

    @property
    @pulumi.getter(name="enablePublicNet")
    def enable_public_net(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether public net config enabled. Default `false`. NOTE: only `vpc_id` specified can disable public net config.
        """
        return pulumi.get(self, "enable_public_net")

    @enable_public_net.setter
    def enable_public_net(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_public_net", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Environment of the SCF function.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="funcType")
    def func_type(self) -> Optional[pulumi.Input[str]]:
        """
        Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
        """
        return pulumi.get(self, "func_type")

    @func_type.setter
    def func_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "func_type", value)

    @property
    @pulumi.getter
    def handler(self) -> Optional[pulumi.Input[str]]:
        """
        Handler of the SCF function. The format of name is `<filename>.<method_name>`, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        """
        return pulumi.get(self, "handler")

    @handler.setter
    def handler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "handler", value)

    @property
    @pulumi.getter(name="imageConfigs")
    def image_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionImageConfigArgs']]]]:
        """
        Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
        """
        return pulumi.get(self, "image_configs")

    @image_configs.setter
    def image_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionImageConfigArgs']]]]):
        pulumi.set(self, "image_configs", value)

    @property
    @pulumi.getter(name="intranetConfig")
    def intranet_config(self) -> Optional[pulumi.Input['FunctionIntranetConfigArgs']]:
        """
        Intranet access configuration.
        """
        return pulumi.get(self, "intranet_config")

    @intranet_config.setter
    def intranet_config(self, value: Optional[pulumi.Input['FunctionIntranetConfigArgs']]):
        pulumi.set(self, "intranet_config", value)

    @property
    @pulumi.getter(name="l5Enable")
    def l5_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable L5 for SCF function, default is `false`.
        """
        return pulumi.get(self, "l5_enable")

    @l5_enable.setter
    def l5_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "l5_enable", value)

    @property
    @pulumi.getter
    def layers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionLayerArgs']]]]:
        """
        The list of association layers.
        """
        return pulumi.get(self, "layers")

    @layers.setter
    def layers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionLayerArgs']]]]):
        pulumi.set(self, "layers", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size of the SCF function, unit is MB. The default is `128`MB. The ladder is 128M.
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the SCF function, default is `default`.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role of the SCF function.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Runtime of the SCF function, only supports `Python2.7`, `Python3.6`, `Nodejs6.10`, `Nodejs8.9`, `Nodejs10.15`, `Nodejs12.16`, `Php5.2`, `Php7.4`, `Go1`, `Java8`, and `CustomRuntime`, default is `Python2.7`.
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet ID of the SCF function.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of the SCF function.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout of the SCF function, unit is second. Default `3`. Available value is 1-900.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTriggerArgs']]]]:
        """
        Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID of the SCF function.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="zipFile")
    def zip_file(self) -> Optional[pulumi.Input[str]]:
        """
        Zip file of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
        """
        return pulumi.get(self, "zip_file")

    @zip_file.setter
    def zip_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zip_file", value)


@pulumi.input_type
class _FunctionState:
    def __init__(__self__, *,
                 async_run_enable: Optional[pulumi.Input[str]] = None,
                 cfs_configs: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionCfsConfigArgs']]]] = None,
                 cls_logset_id: Optional[pulumi.Input[str]] = None,
                 cls_topic_id: Optional[pulumi.Input[str]] = None,
                 code_error: Optional[pulumi.Input[str]] = None,
                 code_result: Optional[pulumi.Input[str]] = None,
                 code_size: Optional[pulumi.Input[int]] = None,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 cos_bucket_region: Optional[pulumi.Input[str]] = None,
                 cos_object_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_cache: Optional[pulumi.Input[bool]] = None,
                 eip_fixed: Optional[pulumi.Input[bool]] = None,
                 eips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_eip_config: Optional[pulumi.Input[bool]] = None,
                 enable_public_net: Optional[pulumi.Input[bool]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 err_no: Optional[pulumi.Input[int]] = None,
                 func_type: Optional[pulumi.Input[str]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 handler: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 image_configs: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionImageConfigArgs']]]] = None,
                 install_dependency: Optional[pulumi.Input[bool]] = None,
                 intranet_config: Optional[pulumi.Input['FunctionIntranetConfigArgs']] = None,
                 l5_enable: Optional[pulumi.Input[bool]] = None,
                 layers: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionLayerArgs']]]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 modify_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_desc: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 trigger_infos: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTriggerInfoArgs']]]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTriggerArgs']]]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zip_file: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Function resources.
        :param pulumi.Input[str] async_run_enable: Whether SCF function asynchronous attribute is enabled. `TRUE` is open, `FALSE` is close.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionCfsConfigArgs']]] cfs_configs: List of CFS configurations.
        :param pulumi.Input[str] cls_logset_id: cls logset id of the SCF function.
        :param pulumi.Input[str] cls_topic_id: cls topic id of the SCF function.
        :param pulumi.Input[str] code_error: SCF function code error message.
        :param pulumi.Input[str] code_result: SCF function code is correct.
        :param pulumi.Input[int] code_size: SCF function code size, unit is M.
        :param pulumi.Input[str] cos_bucket_name: Cos bucket name of the SCF function, such as `cos-1234567890`, conflict with `zip_file`.
        :param pulumi.Input[str] cos_bucket_region: Cos bucket region of the SCF function, conflict with `zip_file`.
        :param pulumi.Input[str] cos_object_name: Cos object name of the SCF function, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
        :param pulumi.Input[str] description: Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
        :param pulumi.Input[bool] dns_cache: Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
        :param pulumi.Input[bool] eip_fixed: Whether EIP is a fixed IP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] eips: SCF function EIP list.
        :param pulumi.Input[bool] enable_eip_config: Indicates whether EIP config set to `ENABLE` when `enable_public_net` was true. Default `false`.
        :param pulumi.Input[bool] enable_public_net: Indicates whether public net config enabled. Default `false`. NOTE: only `vpc_id` specified can disable public net config.
        :param pulumi.Input[Mapping[str, Any]] environment: Environment of the SCF function.
        :param pulumi.Input[int] err_no: SCF function code error code.
        :param pulumi.Input[str] func_type: Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
        :param pulumi.Input[str] function_id: function ID.
        :param pulumi.Input[str] handler: Handler of the SCF function. The format of name is `<filename>.<method_name>`, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        :param pulumi.Input[str] host: SCF function domain name.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionImageConfigArgs']]] image_configs: Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
        :param pulumi.Input[bool] install_dependency: Whether to automatically install dependencies.
        :param pulumi.Input['FunctionIntranetConfigArgs'] intranet_config: Intranet access configuration.
        :param pulumi.Input[bool] l5_enable: Enable L5 for SCF function, default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionLayerArgs']]] layers: The list of association layers.
        :param pulumi.Input[int] mem_size: Memory size of the SCF function, unit is MB. The default is `128`MB. The ladder is 128M.
        :param pulumi.Input[str] modify_time: Modify time of SCF function trigger.
        :param pulumi.Input[str] name: Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        :param pulumi.Input[str] namespace: Namespace of the SCF function, default is `default`.
        :param pulumi.Input[str] role: Role of the SCF function.
        :param pulumi.Input[str] runtime: Runtime of the SCF function, only supports `Python2.7`, `Python3.6`, `Nodejs6.10`, `Nodejs8.9`, `Nodejs10.15`, `Nodejs12.16`, `Php5.2`, `Php7.4`, `Go1`, `Java8`, and `CustomRuntime`, default is `Python2.7`.
        :param pulumi.Input[str] status: SCF function status.
        :param pulumi.Input[str] status_desc: SCF status description.
        :param pulumi.Input[str] subnet_id: Subnet ID of the SCF function.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the SCF function.
        :param pulumi.Input[int] timeout: Timeout of the SCF function, unit is second. Default `3`. Available value is 1-900.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionTriggerInfoArgs']]] trigger_infos: SCF trigger details list. Each element contains the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input['FunctionTriggerArgs']]] triggers: Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
        :param pulumi.Input[str] vip: SCF function vip.
        :param pulumi.Input[str] vpc_id: VPC ID of the SCF function.
        :param pulumi.Input[str] zip_file: Zip file of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
        """
        if async_run_enable is not None:
            pulumi.set(__self__, "async_run_enable", async_run_enable)
        if cfs_configs is not None:
            pulumi.set(__self__, "cfs_configs", cfs_configs)
        if cls_logset_id is not None:
            pulumi.set(__self__, "cls_logset_id", cls_logset_id)
        if cls_topic_id is not None:
            pulumi.set(__self__, "cls_topic_id", cls_topic_id)
        if code_error is not None:
            pulumi.set(__self__, "code_error", code_error)
        if code_result is not None:
            pulumi.set(__self__, "code_result", code_result)
        if code_size is not None:
            pulumi.set(__self__, "code_size", code_size)
        if cos_bucket_name is not None:
            pulumi.set(__self__, "cos_bucket_name", cos_bucket_name)
        if cos_bucket_region is not None:
            pulumi.set(__self__, "cos_bucket_region", cos_bucket_region)
        if cos_object_name is not None:
            pulumi.set(__self__, "cos_object_name", cos_object_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_cache is not None:
            pulumi.set(__self__, "dns_cache", dns_cache)
        if eip_fixed is not None:
            pulumi.set(__self__, "eip_fixed", eip_fixed)
        if eips is not None:
            pulumi.set(__self__, "eips", eips)
        if enable_eip_config is not None:
            pulumi.set(__self__, "enable_eip_config", enable_eip_config)
        if enable_public_net is not None:
            pulumi.set(__self__, "enable_public_net", enable_public_net)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if err_no is not None:
            pulumi.set(__self__, "err_no", err_no)
        if func_type is not None:
            pulumi.set(__self__, "func_type", func_type)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if handler is not None:
            pulumi.set(__self__, "handler", handler)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if image_configs is not None:
            pulumi.set(__self__, "image_configs", image_configs)
        if install_dependency is not None:
            pulumi.set(__self__, "install_dependency", install_dependency)
        if intranet_config is not None:
            pulumi.set(__self__, "intranet_config", intranet_config)
        if l5_enable is not None:
            pulumi.set(__self__, "l5_enable", l5_enable)
        if layers is not None:
            pulumi.set(__self__, "layers", layers)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_desc is not None:
            pulumi.set(__self__, "status_desc", status_desc)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if trigger_infos is not None:
            pulumi.set(__self__, "trigger_infos", trigger_infos)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zip_file is not None:
            pulumi.set(__self__, "zip_file", zip_file)

    @property
    @pulumi.getter(name="asyncRunEnable")
    def async_run_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Whether SCF function asynchronous attribute is enabled. `TRUE` is open, `FALSE` is close.
        """
        return pulumi.get(self, "async_run_enable")

    @async_run_enable.setter
    def async_run_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "async_run_enable", value)

    @property
    @pulumi.getter(name="cfsConfigs")
    def cfs_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionCfsConfigArgs']]]]:
        """
        List of CFS configurations.
        """
        return pulumi.get(self, "cfs_configs")

    @cfs_configs.setter
    def cfs_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionCfsConfigArgs']]]]):
        pulumi.set(self, "cfs_configs", value)

    @property
    @pulumi.getter(name="clsLogsetId")
    def cls_logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        cls logset id of the SCF function.
        """
        return pulumi.get(self, "cls_logset_id")

    @cls_logset_id.setter
    def cls_logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_logset_id", value)

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        cls topic id of the SCF function.
        """
        return pulumi.get(self, "cls_topic_id")

    @cls_topic_id.setter
    def cls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_topic_id", value)

    @property
    @pulumi.getter(name="codeError")
    def code_error(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function code error message.
        """
        return pulumi.get(self, "code_error")

    @code_error.setter
    def code_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code_error", value)

    @property
    @pulumi.getter(name="codeResult")
    def code_result(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function code is correct.
        """
        return pulumi.get(self, "code_result")

    @code_result.setter
    def code_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code_result", value)

    @property
    @pulumi.getter(name="codeSize")
    def code_size(self) -> Optional[pulumi.Input[int]]:
        """
        SCF function code size, unit is M.
        """
        return pulumi.get(self, "code_size")

    @code_size.setter
    def code_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code_size", value)

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cos bucket name of the SCF function, such as `cos-1234567890`, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_bucket_name")

    @cos_bucket_name.setter
    def cos_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket_name", value)

    @property
    @pulumi.getter(name="cosBucketRegion")
    def cos_bucket_region(self) -> Optional[pulumi.Input[str]]:
        """
        Cos bucket region of the SCF function, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_bucket_region")

    @cos_bucket_region.setter
    def cos_bucket_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket_region", value)

    @property
    @pulumi.getter(name="cosObjectName")
    def cos_object_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cos object name of the SCF function, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_object_name")

    @cos_object_name.setter
    def cos_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_object_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsCache")
    def dns_cache(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
        """
        return pulumi.get(self, "dns_cache")

    @dns_cache.setter
    def dns_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dns_cache", value)

    @property
    @pulumi.getter(name="eipFixed")
    def eip_fixed(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether EIP is a fixed IP.
        """
        return pulumi.get(self, "eip_fixed")

    @eip_fixed.setter
    def eip_fixed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eip_fixed", value)

    @property
    @pulumi.getter
    def eips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SCF function EIP list.
        """
        return pulumi.get(self, "eips")

    @eips.setter
    def eips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "eips", value)

    @property
    @pulumi.getter(name="enableEipConfig")
    def enable_eip_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether EIP config set to `ENABLE` when `enable_public_net` was true. Default `false`.
        """
        return pulumi.get(self, "enable_eip_config")

    @enable_eip_config.setter
    def enable_eip_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_eip_config", value)

    @property
    @pulumi.getter(name="enablePublicNet")
    def enable_public_net(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether public net config enabled. Default `false`. NOTE: only `vpc_id` specified can disable public net config.
        """
        return pulumi.get(self, "enable_public_net")

    @enable_public_net.setter
    def enable_public_net(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_public_net", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Environment of the SCF function.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="errNo")
    def err_no(self) -> Optional[pulumi.Input[int]]:
        """
        SCF function code error code.
        """
        return pulumi.get(self, "err_no")

    @err_no.setter
    def err_no(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "err_no", value)

    @property
    @pulumi.getter(name="funcType")
    def func_type(self) -> Optional[pulumi.Input[str]]:
        """
        Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
        """
        return pulumi.get(self, "func_type")

    @func_type.setter
    def func_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "func_type", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        function ID.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter
    def handler(self) -> Optional[pulumi.Input[str]]:
        """
        Handler of the SCF function. The format of name is `<filename>.<method_name>`, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        """
        return pulumi.get(self, "handler")

    @handler.setter
    def handler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "handler", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function domain name.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="imageConfigs")
    def image_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionImageConfigArgs']]]]:
        """
        Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
        """
        return pulumi.get(self, "image_configs")

    @image_configs.setter
    def image_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionImageConfigArgs']]]]):
        pulumi.set(self, "image_configs", value)

    @property
    @pulumi.getter(name="installDependency")
    def install_dependency(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically install dependencies.
        """
        return pulumi.get(self, "install_dependency")

    @install_dependency.setter
    def install_dependency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_dependency", value)

    @property
    @pulumi.getter(name="intranetConfig")
    def intranet_config(self) -> Optional[pulumi.Input['FunctionIntranetConfigArgs']]:
        """
        Intranet access configuration.
        """
        return pulumi.get(self, "intranet_config")

    @intranet_config.setter
    def intranet_config(self, value: Optional[pulumi.Input['FunctionIntranetConfigArgs']]):
        pulumi.set(self, "intranet_config", value)

    @property
    @pulumi.getter(name="l5Enable")
    def l5_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable L5 for SCF function, default is `false`.
        """
        return pulumi.get(self, "l5_enable")

    @l5_enable.setter
    def l5_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "l5_enable", value)

    @property
    @pulumi.getter
    def layers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionLayerArgs']]]]:
        """
        The list of association layers.
        """
        return pulumi.get(self, "layers")

    @layers.setter
    def layers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionLayerArgs']]]]):
        pulumi.set(self, "layers", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size of the SCF function, unit is MB. The default is `128`MB. The ladder is 128M.
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[pulumi.Input[str]]:
        """
        Modify time of SCF function trigger.
        """
        return pulumi.get(self, "modify_time")

    @modify_time.setter
    def modify_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modify_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the SCF function, default is `default`.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role of the SCF function.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Runtime of the SCF function, only supports `Python2.7`, `Python3.6`, `Nodejs6.10`, `Nodejs8.9`, `Nodejs10.15`, `Nodejs12.16`, `Php5.2`, `Php7.4`, `Go1`, `Java8`, and `CustomRuntime`, default is `Python2.7`.
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> Optional[pulumi.Input[str]]:
        """
        SCF status description.
        """
        return pulumi.get(self, "status_desc")

    @status_desc.setter
    def status_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_desc", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet ID of the SCF function.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of the SCF function.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout of the SCF function, unit is second. Default `3`. Available value is 1-900.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="triggerInfos")
    def trigger_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTriggerInfoArgs']]]]:
        """
        SCF trigger details list. Each element contains the following attributes:
        """
        return pulumi.get(self, "trigger_infos")

    @trigger_infos.setter
    def trigger_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTriggerInfoArgs']]]]):
        pulumi.set(self, "trigger_infos", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTriggerArgs']]]]:
        """
        Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionTriggerArgs']]]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function vip.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID of the SCF function.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="zipFile")
    def zip_file(self) -> Optional[pulumi.Input[str]]:
        """
        Zip file of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
        """
        return pulumi.get(self, "zip_file")

    @zip_file.setter
    def zip_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zip_file", value)


class Function(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 async_run_enable: Optional[pulumi.Input[str]] = None,
                 cfs_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionCfsConfigArgs']]]]] = None,
                 cls_logset_id: Optional[pulumi.Input[str]] = None,
                 cls_topic_id: Optional[pulumi.Input[str]] = None,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 cos_bucket_region: Optional[pulumi.Input[str]] = None,
                 cos_object_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_cache: Optional[pulumi.Input[bool]] = None,
                 enable_eip_config: Optional[pulumi.Input[bool]] = None,
                 enable_public_net: Optional[pulumi.Input[bool]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 func_type: Optional[pulumi.Input[str]] = None,
                 handler: Optional[pulumi.Input[str]] = None,
                 image_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionImageConfigArgs']]]]] = None,
                 intranet_config: Optional[pulumi.Input[pulumi.InputType['FunctionIntranetConfigArgs']]] = None,
                 l5_enable: Optional[pulumi.Input[bool]] = None,
                 layers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionLayerArgs']]]]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionTriggerArgs']]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zip_file: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to create a SCF function.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.scf.Function("foo",
            cos_bucket_name="scf-code-1234567890",
            cos_bucket_region="ap-guangzhou",
            cos_object_name="code.zip",
            handler="main.do_it",
            runtime="Python3.6")
        ```
        <!--End PulumiCodeChooser -->

        ### Using Zip file

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.scf.Function("foo",
            dns_cache=True,
            enable_public_net=True,
            handler="first.do_it_first",
            intranet_config=tencentcloud.scf.FunctionIntranetConfigArgs(
                ip_fixed="ENABLE",
            ),
            runtime="Python3.6",
            subnet_id="subnet-ljyn7h30",
            tags={
                "env": "test",
            },
            vpc_id="vpc-391sv4w3",
            zip_file="/scf/first.zip")
        ```
        <!--End PulumiCodeChooser -->

        ### Using CFS config

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.scf.Function("foo",
            cfs_configs=[tencentcloud.scf.FunctionCfsConfigArgs(
                cfs_id="cfs-xxxxxxxx",
                local_mount_dir="/mnt",
                mount_ins_id="cfs-xxxxxxxx",
                remote_mount_dir="/",
                user_group_id="10000",
                user_id="10000",
            )],
            handler="main.do_it",
            runtime="Python3.6")
        ```
        <!--End PulumiCodeChooser -->

        ### Using triggers

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.scf.Function("foo",
            handler="first.do_it_first",
            runtime="Python3.6",
            enable_public_net=True,
            zip_file="/scf/first.zip",
            triggers=[
                tencentcloud.scf.FunctionTriggerArgs(
                    name="tf-test-fn-trigger",
                    type="timer",
                    trigger_desc="*/5 * * * * * *",
                ),
                tencentcloud.scf.FunctionTriggerArgs(
                    name="scf-bucket-1308919341.cos.ap-guangzhou.myqcloud.com",
                    cos_region="ap-guangzhou",
                    type="cos",
                    trigger_desc="{\\"event\\":\\"cos:ObjectCreated:Put\\",\\"filter\\":{\\"Prefix\\":\\"\\",\\"Suffix\\":\\"\\"}}",
                ),
                tencentcloud.scf.FunctionTriggerArgs(
                    name="tf-test-fn-trigger",
                    type="http",
                    trigger_desc=json.dumps({
                        "AuthType": "NONE",
                        "NetConfig": {
                            "EnableIntranet": True,
                            "EnableExtranet": False,
                        },
                    }),
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SCF function can be imported, e.g.

        -> __NOTE:__ function id is `<function namespace>+<function name>`

        ```sh
        $ pulumi import tencentcloud:Scf/function:Function test default+test
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] async_run_enable: Whether SCF function asynchronous attribute is enabled. `TRUE` is open, `FALSE` is close.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionCfsConfigArgs']]]] cfs_configs: List of CFS configurations.
        :param pulumi.Input[str] cls_logset_id: cls logset id of the SCF function.
        :param pulumi.Input[str] cls_topic_id: cls topic id of the SCF function.
        :param pulumi.Input[str] cos_bucket_name: Cos bucket name of the SCF function, such as `cos-1234567890`, conflict with `zip_file`.
        :param pulumi.Input[str] cos_bucket_region: Cos bucket region of the SCF function, conflict with `zip_file`.
        :param pulumi.Input[str] cos_object_name: Cos object name of the SCF function, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
        :param pulumi.Input[str] description: Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
        :param pulumi.Input[bool] dns_cache: Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
        :param pulumi.Input[bool] enable_eip_config: Indicates whether EIP config set to `ENABLE` when `enable_public_net` was true. Default `false`.
        :param pulumi.Input[bool] enable_public_net: Indicates whether public net config enabled. Default `false`. NOTE: only `vpc_id` specified can disable public net config.
        :param pulumi.Input[Mapping[str, Any]] environment: Environment of the SCF function.
        :param pulumi.Input[str] func_type: Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
        :param pulumi.Input[str] handler: Handler of the SCF function. The format of name is `<filename>.<method_name>`, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionImageConfigArgs']]]] image_configs: Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
        :param pulumi.Input[pulumi.InputType['FunctionIntranetConfigArgs']] intranet_config: Intranet access configuration.
        :param pulumi.Input[bool] l5_enable: Enable L5 for SCF function, default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionLayerArgs']]]] layers: The list of association layers.
        :param pulumi.Input[int] mem_size: Memory size of the SCF function, unit is MB. The default is `128`MB. The ladder is 128M.
        :param pulumi.Input[str] name: Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        :param pulumi.Input[str] namespace: Namespace of the SCF function, default is `default`.
        :param pulumi.Input[str] role: Role of the SCF function.
        :param pulumi.Input[str] runtime: Runtime of the SCF function, only supports `Python2.7`, `Python3.6`, `Nodejs6.10`, `Nodejs8.9`, `Nodejs10.15`, `Nodejs12.16`, `Php5.2`, `Php7.4`, `Go1`, `Java8`, and `CustomRuntime`, default is `Python2.7`.
        :param pulumi.Input[str] subnet_id: Subnet ID of the SCF function.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the SCF function.
        :param pulumi.Input[int] timeout: Timeout of the SCF function, unit is second. Default `3`. Available value is 1-900.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionTriggerArgs']]]] triggers: Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
        :param pulumi.Input[str] vpc_id: VPC ID of the SCF function.
        :param pulumi.Input[str] zip_file: Zip file of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FunctionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a SCF function.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.scf.Function("foo",
            cos_bucket_name="scf-code-1234567890",
            cos_bucket_region="ap-guangzhou",
            cos_object_name="code.zip",
            handler="main.do_it",
            runtime="Python3.6")
        ```
        <!--End PulumiCodeChooser -->

        ### Using Zip file

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.scf.Function("foo",
            dns_cache=True,
            enable_public_net=True,
            handler="first.do_it_first",
            intranet_config=tencentcloud.scf.FunctionIntranetConfigArgs(
                ip_fixed="ENABLE",
            ),
            runtime="Python3.6",
            subnet_id="subnet-ljyn7h30",
            tags={
                "env": "test",
            },
            vpc_id="vpc-391sv4w3",
            zip_file="/scf/first.zip")
        ```
        <!--End PulumiCodeChooser -->

        ### Using CFS config

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.scf.Function("foo",
            cfs_configs=[tencentcloud.scf.FunctionCfsConfigArgs(
                cfs_id="cfs-xxxxxxxx",
                local_mount_dir="/mnt",
                mount_ins_id="cfs-xxxxxxxx",
                remote_mount_dir="/",
                user_group_id="10000",
                user_id="10000",
            )],
            handler="main.do_it",
            runtime="Python3.6")
        ```
        <!--End PulumiCodeChooser -->

        ### Using triggers

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.scf.Function("foo",
            handler="first.do_it_first",
            runtime="Python3.6",
            enable_public_net=True,
            zip_file="/scf/first.zip",
            triggers=[
                tencentcloud.scf.FunctionTriggerArgs(
                    name="tf-test-fn-trigger",
                    type="timer",
                    trigger_desc="*/5 * * * * * *",
                ),
                tencentcloud.scf.FunctionTriggerArgs(
                    name="scf-bucket-1308919341.cos.ap-guangzhou.myqcloud.com",
                    cos_region="ap-guangzhou",
                    type="cos",
                    trigger_desc="{\\"event\\":\\"cos:ObjectCreated:Put\\",\\"filter\\":{\\"Prefix\\":\\"\\",\\"Suffix\\":\\"\\"}}",
                ),
                tencentcloud.scf.FunctionTriggerArgs(
                    name="tf-test-fn-trigger",
                    type="http",
                    trigger_desc=json.dumps({
                        "AuthType": "NONE",
                        "NetConfig": {
                            "EnableIntranet": True,
                            "EnableExtranet": False,
                        },
                    }),
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SCF function can be imported, e.g.

        -> __NOTE:__ function id is `<function namespace>+<function name>`

        ```sh
        $ pulumi import tencentcloud:Scf/function:Function test default+test
        ```

        :param str resource_name: The name of the resource.
        :param FunctionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 async_run_enable: Optional[pulumi.Input[str]] = None,
                 cfs_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionCfsConfigArgs']]]]] = None,
                 cls_logset_id: Optional[pulumi.Input[str]] = None,
                 cls_topic_id: Optional[pulumi.Input[str]] = None,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 cos_bucket_region: Optional[pulumi.Input[str]] = None,
                 cos_object_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_cache: Optional[pulumi.Input[bool]] = None,
                 enable_eip_config: Optional[pulumi.Input[bool]] = None,
                 enable_public_net: Optional[pulumi.Input[bool]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 func_type: Optional[pulumi.Input[str]] = None,
                 handler: Optional[pulumi.Input[str]] = None,
                 image_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionImageConfigArgs']]]]] = None,
                 intranet_config: Optional[pulumi.Input[pulumi.InputType['FunctionIntranetConfigArgs']]] = None,
                 l5_enable: Optional[pulumi.Input[bool]] = None,
                 layers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionLayerArgs']]]]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionTriggerArgs']]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zip_file: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionArgs.__new__(FunctionArgs)

            __props__.__dict__["async_run_enable"] = async_run_enable
            __props__.__dict__["cfs_configs"] = cfs_configs
            __props__.__dict__["cls_logset_id"] = cls_logset_id
            __props__.__dict__["cls_topic_id"] = cls_topic_id
            __props__.__dict__["cos_bucket_name"] = cos_bucket_name
            __props__.__dict__["cos_bucket_region"] = cos_bucket_region
            __props__.__dict__["cos_object_name"] = cos_object_name
            __props__.__dict__["description"] = description
            __props__.__dict__["dns_cache"] = dns_cache
            __props__.__dict__["enable_eip_config"] = enable_eip_config
            __props__.__dict__["enable_public_net"] = enable_public_net
            __props__.__dict__["environment"] = environment
            __props__.__dict__["func_type"] = func_type
            __props__.__dict__["handler"] = handler
            __props__.__dict__["image_configs"] = image_configs
            __props__.__dict__["intranet_config"] = intranet_config
            __props__.__dict__["l5_enable"] = l5_enable
            __props__.__dict__["layers"] = layers
            __props__.__dict__["mem_size"] = mem_size
            __props__.__dict__["name"] = name
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["role"] = role
            __props__.__dict__["runtime"] = runtime
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["zip_file"] = zip_file
            __props__.__dict__["code_error"] = None
            __props__.__dict__["code_result"] = None
            __props__.__dict__["code_size"] = None
            __props__.__dict__["eip_fixed"] = None
            __props__.__dict__["eips"] = None
            __props__.__dict__["err_no"] = None
            __props__.__dict__["function_id"] = None
            __props__.__dict__["host"] = None
            __props__.__dict__["install_dependency"] = None
            __props__.__dict__["modify_time"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_desc"] = None
            __props__.__dict__["trigger_infos"] = None
            __props__.__dict__["vip"] = None
        super(Function, __self__).__init__(
            'tencentcloud:Scf/function:Function',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            async_run_enable: Optional[pulumi.Input[str]] = None,
            cfs_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionCfsConfigArgs']]]]] = None,
            cls_logset_id: Optional[pulumi.Input[str]] = None,
            cls_topic_id: Optional[pulumi.Input[str]] = None,
            code_error: Optional[pulumi.Input[str]] = None,
            code_result: Optional[pulumi.Input[str]] = None,
            code_size: Optional[pulumi.Input[int]] = None,
            cos_bucket_name: Optional[pulumi.Input[str]] = None,
            cos_bucket_region: Optional[pulumi.Input[str]] = None,
            cos_object_name: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dns_cache: Optional[pulumi.Input[bool]] = None,
            eip_fixed: Optional[pulumi.Input[bool]] = None,
            eips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            enable_eip_config: Optional[pulumi.Input[bool]] = None,
            enable_public_net: Optional[pulumi.Input[bool]] = None,
            environment: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            err_no: Optional[pulumi.Input[int]] = None,
            func_type: Optional[pulumi.Input[str]] = None,
            function_id: Optional[pulumi.Input[str]] = None,
            handler: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            image_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionImageConfigArgs']]]]] = None,
            install_dependency: Optional[pulumi.Input[bool]] = None,
            intranet_config: Optional[pulumi.Input[pulumi.InputType['FunctionIntranetConfigArgs']]] = None,
            l5_enable: Optional[pulumi.Input[bool]] = None,
            layers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionLayerArgs']]]]] = None,
            mem_size: Optional[pulumi.Input[int]] = None,
            modify_time: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            runtime: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            status_desc: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            trigger_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionTriggerInfoArgs']]]]] = None,
            triggers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionTriggerArgs']]]]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zip_file: Optional[pulumi.Input[str]] = None) -> 'Function':
        """
        Get an existing Function resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] async_run_enable: Whether SCF function asynchronous attribute is enabled. `TRUE` is open, `FALSE` is close.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionCfsConfigArgs']]]] cfs_configs: List of CFS configurations.
        :param pulumi.Input[str] cls_logset_id: cls logset id of the SCF function.
        :param pulumi.Input[str] cls_topic_id: cls topic id of the SCF function.
        :param pulumi.Input[str] code_error: SCF function code error message.
        :param pulumi.Input[str] code_result: SCF function code is correct.
        :param pulumi.Input[int] code_size: SCF function code size, unit is M.
        :param pulumi.Input[str] cos_bucket_name: Cos bucket name of the SCF function, such as `cos-1234567890`, conflict with `zip_file`.
        :param pulumi.Input[str] cos_bucket_region: Cos bucket region of the SCF function, conflict with `zip_file`.
        :param pulumi.Input[str] cos_object_name: Cos object name of the SCF function, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
        :param pulumi.Input[str] description: Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
        :param pulumi.Input[bool] dns_cache: Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
        :param pulumi.Input[bool] eip_fixed: Whether EIP is a fixed IP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] eips: SCF function EIP list.
        :param pulumi.Input[bool] enable_eip_config: Indicates whether EIP config set to `ENABLE` when `enable_public_net` was true. Default `false`.
        :param pulumi.Input[bool] enable_public_net: Indicates whether public net config enabled. Default `false`. NOTE: only `vpc_id` specified can disable public net config.
        :param pulumi.Input[Mapping[str, Any]] environment: Environment of the SCF function.
        :param pulumi.Input[int] err_no: SCF function code error code.
        :param pulumi.Input[str] func_type: Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
        :param pulumi.Input[str] function_id: function ID.
        :param pulumi.Input[str] handler: Handler of the SCF function. The format of name is `<filename>.<method_name>`, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        :param pulumi.Input[str] host: SCF function domain name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionImageConfigArgs']]]] image_configs: Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
        :param pulumi.Input[bool] install_dependency: Whether to automatically install dependencies.
        :param pulumi.Input[pulumi.InputType['FunctionIntranetConfigArgs']] intranet_config: Intranet access configuration.
        :param pulumi.Input[bool] l5_enable: Enable L5 for SCF function, default is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionLayerArgs']]]] layers: The list of association layers.
        :param pulumi.Input[int] mem_size: Memory size of the SCF function, unit is MB. The default is `128`MB. The ladder is 128M.
        :param pulumi.Input[str] modify_time: Modify time of SCF function trigger.
        :param pulumi.Input[str] name: Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        :param pulumi.Input[str] namespace: Namespace of the SCF function, default is `default`.
        :param pulumi.Input[str] role: Role of the SCF function.
        :param pulumi.Input[str] runtime: Runtime of the SCF function, only supports `Python2.7`, `Python3.6`, `Nodejs6.10`, `Nodejs8.9`, `Nodejs10.15`, `Nodejs12.16`, `Php5.2`, `Php7.4`, `Go1`, `Java8`, and `CustomRuntime`, default is `Python2.7`.
        :param pulumi.Input[str] status: SCF function status.
        :param pulumi.Input[str] status_desc: SCF status description.
        :param pulumi.Input[str] subnet_id: Subnet ID of the SCF function.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the SCF function.
        :param pulumi.Input[int] timeout: Timeout of the SCF function, unit is second. Default `3`. Available value is 1-900.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionTriggerInfoArgs']]]] trigger_infos: SCF trigger details list. Each element contains the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionTriggerArgs']]]] triggers: Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
        :param pulumi.Input[str] vip: SCF function vip.
        :param pulumi.Input[str] vpc_id: VPC ID of the SCF function.
        :param pulumi.Input[str] zip_file: Zip file of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FunctionState.__new__(_FunctionState)

        __props__.__dict__["async_run_enable"] = async_run_enable
        __props__.__dict__["cfs_configs"] = cfs_configs
        __props__.__dict__["cls_logset_id"] = cls_logset_id
        __props__.__dict__["cls_topic_id"] = cls_topic_id
        __props__.__dict__["code_error"] = code_error
        __props__.__dict__["code_result"] = code_result
        __props__.__dict__["code_size"] = code_size
        __props__.__dict__["cos_bucket_name"] = cos_bucket_name
        __props__.__dict__["cos_bucket_region"] = cos_bucket_region
        __props__.__dict__["cos_object_name"] = cos_object_name
        __props__.__dict__["description"] = description
        __props__.__dict__["dns_cache"] = dns_cache
        __props__.__dict__["eip_fixed"] = eip_fixed
        __props__.__dict__["eips"] = eips
        __props__.__dict__["enable_eip_config"] = enable_eip_config
        __props__.__dict__["enable_public_net"] = enable_public_net
        __props__.__dict__["environment"] = environment
        __props__.__dict__["err_no"] = err_no
        __props__.__dict__["func_type"] = func_type
        __props__.__dict__["function_id"] = function_id
        __props__.__dict__["handler"] = handler
        __props__.__dict__["host"] = host
        __props__.__dict__["image_configs"] = image_configs
        __props__.__dict__["install_dependency"] = install_dependency
        __props__.__dict__["intranet_config"] = intranet_config
        __props__.__dict__["l5_enable"] = l5_enable
        __props__.__dict__["layers"] = layers
        __props__.__dict__["mem_size"] = mem_size
        __props__.__dict__["modify_time"] = modify_time
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["role"] = role
        __props__.__dict__["runtime"] = runtime
        __props__.__dict__["status"] = status
        __props__.__dict__["status_desc"] = status_desc
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["trigger_infos"] = trigger_infos
        __props__.__dict__["triggers"] = triggers
        __props__.__dict__["vip"] = vip
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zip_file"] = zip_file
        return Function(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="asyncRunEnable")
    def async_run_enable(self) -> pulumi.Output[str]:
        """
        Whether SCF function asynchronous attribute is enabled. `TRUE` is open, `FALSE` is close.
        """
        return pulumi.get(self, "async_run_enable")

    @property
    @pulumi.getter(name="cfsConfigs")
    def cfs_configs(self) -> pulumi.Output[Optional[Sequence['outputs.FunctionCfsConfig']]]:
        """
        List of CFS configurations.
        """
        return pulumi.get(self, "cfs_configs")

    @property
    @pulumi.getter(name="clsLogsetId")
    def cls_logset_id(self) -> pulumi.Output[str]:
        """
        cls logset id of the SCF function.
        """
        return pulumi.get(self, "cls_logset_id")

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> pulumi.Output[str]:
        """
        cls topic id of the SCF function.
        """
        return pulumi.get(self, "cls_topic_id")

    @property
    @pulumi.getter(name="codeError")
    def code_error(self) -> pulumi.Output[str]:
        """
        SCF function code error message.
        """
        return pulumi.get(self, "code_error")

    @property
    @pulumi.getter(name="codeResult")
    def code_result(self) -> pulumi.Output[str]:
        """
        SCF function code is correct.
        """
        return pulumi.get(self, "code_result")

    @property
    @pulumi.getter(name="codeSize")
    def code_size(self) -> pulumi.Output[int]:
        """
        SCF function code size, unit is M.
        """
        return pulumi.get(self, "code_size")

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> pulumi.Output[Optional[str]]:
        """
        Cos bucket name of the SCF function, such as `cos-1234567890`, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_bucket_name")

    @property
    @pulumi.getter(name="cosBucketRegion")
    def cos_bucket_region(self) -> pulumi.Output[Optional[str]]:
        """
        Cos bucket region of the SCF function, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_bucket_region")

    @property
    @pulumi.getter(name="cosObjectName")
    def cos_object_name(self) -> pulumi.Output[Optional[str]]:
        """
        Cos object name of the SCF function, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
        """
        return pulumi.get(self, "cos_object_name")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the SCF function. Description supports English letters, numbers, spaces, commas, newlines, periods and Chinese, the maximum length is 1000.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsCache")
    def dns_cache(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable Dns caching capability, only the EVENT function is supported. Default is false.
        """
        return pulumi.get(self, "dns_cache")

    @property
    @pulumi.getter(name="eipFixed")
    def eip_fixed(self) -> pulumi.Output[bool]:
        """
        Whether EIP is a fixed IP.
        """
        return pulumi.get(self, "eip_fixed")

    @property
    @pulumi.getter
    def eips(self) -> pulumi.Output[Sequence[str]]:
        """
        SCF function EIP list.
        """
        return pulumi.get(self, "eips")

    @property
    @pulumi.getter(name="enableEipConfig")
    def enable_eip_config(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether EIP config set to `ENABLE` when `enable_public_net` was true. Default `false`.
        """
        return pulumi.get(self, "enable_eip_config")

    @property
    @pulumi.getter(name="enablePublicNet")
    def enable_public_net(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether public net config enabled. Default `false`. NOTE: only `vpc_id` specified can disable public net config.
        """
        return pulumi.get(self, "enable_public_net")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Environment of the SCF function.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="errNo")
    def err_no(self) -> pulumi.Output[int]:
        """
        SCF function code error code.
        """
        return pulumi.get(self, "err_no")

    @property
    @pulumi.getter(name="funcType")
    def func_type(self) -> pulumi.Output[Optional[str]]:
        """
        Function type. The default value is Event. Enter Event if you need to create a trigger function. Enter HTTP if you need to create an HTTP function service.
        """
        return pulumi.get(self, "func_type")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Output[str]:
        """
        function ID.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def handler(self) -> pulumi.Output[Optional[str]]:
        """
        Handler of the SCF function. The format of name is `<filename>.<method_name>`, and it supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        """
        return pulumi.get(self, "handler")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        SCF function domain name.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="imageConfigs")
    def image_configs(self) -> pulumi.Output[Optional[Sequence['outputs.FunctionImageConfig']]]:
        """
        Image of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`, `zip_file`.
        """
        return pulumi.get(self, "image_configs")

    @property
    @pulumi.getter(name="installDependency")
    def install_dependency(self) -> pulumi.Output[bool]:
        """
        Whether to automatically install dependencies.
        """
        return pulumi.get(self, "install_dependency")

    @property
    @pulumi.getter(name="intranetConfig")
    def intranet_config(self) -> pulumi.Output['outputs.FunctionIntranetConfig']:
        """
        Intranet access configuration.
        """
        return pulumi.get(self, "intranet_config")

    @property
    @pulumi.getter(name="l5Enable")
    def l5_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable L5 for SCF function, default is `false`.
        """
        return pulumi.get(self, "l5_enable")

    @property
    @pulumi.getter
    def layers(self) -> pulumi.Output[Optional[Sequence['outputs.FunctionLayer']]]:
        """
        The list of association layers.
        """
        return pulumi.get(self, "layers")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> pulumi.Output[Optional[int]]:
        """
        Memory size of the SCF function, unit is MB. The default is `128`MB. The ladder is 128M.
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> pulumi.Output[str]:
        """
        Modify time of SCF function trigger.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the SCF function. Name supports 26 English letters, numbers, connectors, and underscores, it should start with a letter. The last character cannot be `-` or `_`. Available length is 2-60.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        Namespace of the SCF function, default is `default`.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[str]]:
        """
        Role of the SCF function.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def runtime(self) -> pulumi.Output[Optional[str]]:
        """
        Runtime of the SCF function, only supports `Python2.7`, `Python3.6`, `Nodejs6.10`, `Nodejs8.9`, `Nodejs10.15`, `Nodejs12.16`, `Php5.2`, `Php7.4`, `Go1`, `Java8`, and `CustomRuntime`, default is `Python2.7`.
        """
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        SCF function status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> pulumi.Output[str]:
        """
        SCF status description.
        """
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        Subnet ID of the SCF function.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tags of the SCF function.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Timeout of the SCF function, unit is second. Default `3`. Available value is 1-900.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="triggerInfos")
    def trigger_infos(self) -> pulumi.Output[Sequence['outputs.FunctionTriggerInfo']]:
        """
        SCF trigger details list. Each element contains the following attributes:
        """
        return pulumi.get(self, "trigger_infos")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Optional[Sequence['outputs.FunctionTrigger']]]:
        """
        Trigger list of the SCF function, note that if you modify the trigger list, all existing triggers will be deleted, and then create triggers in the new list. Each element contains the following attributes:
        """
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        SCF function vip.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        VPC ID of the SCF function.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zipFile")
    def zip_file(self) -> pulumi.Output[Optional[str]]:
        """
        Zip file of the SCF function, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
        """
        return pulumi.get(self, "zip_file")

