# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NotifyRoutesArgs', 'NotifyRoutes']

@pulumi.input_type
class NotifyRoutesArgs:
    def __init__(__self__, *,
                 route_item_ids: pulumi.Input[str],
                 route_table_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a NotifyRoutes resource.
        :param pulumi.Input[str] route_item_ids: The unique ID of the routing policy.
        :param pulumi.Input[str] route_table_id: The unique ID of the routing table.
        """
        pulumi.set(__self__, "route_item_ids", route_item_ids)
        pulumi.set(__self__, "route_table_id", route_table_id)

    @property
    @pulumi.getter(name="routeItemIds")
    def route_item_ids(self) -> pulumi.Input[str]:
        """
        The unique ID of the routing policy.
        """
        return pulumi.get(self, "route_item_ids")

    @route_item_ids.setter
    def route_item_ids(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_item_ids", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Input[str]:
        """
        The unique ID of the routing table.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_table_id", value)


@pulumi.input_type
class _NotifyRoutesState:
    def __init__(__self__, *,
                 published_to_vbc: Optional[pulumi.Input[bool]] = None,
                 route_item_ids: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NotifyRoutes resources.
        :param pulumi.Input[bool] published_to_vbc: If published to vbc.
        :param pulumi.Input[str] route_item_ids: The unique ID of the routing policy.
        :param pulumi.Input[str] route_table_id: The unique ID of the routing table.
        """
        if published_to_vbc is not None:
            pulumi.set(__self__, "published_to_vbc", published_to_vbc)
        if route_item_ids is not None:
            pulumi.set(__self__, "route_item_ids", route_item_ids)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)

    @property
    @pulumi.getter(name="publishedToVbc")
    def published_to_vbc(self) -> Optional[pulumi.Input[bool]]:
        """
        If published to vbc.
        """
        return pulumi.get(self, "published_to_vbc")

    @published_to_vbc.setter
    def published_to_vbc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "published_to_vbc", value)

    @property
    @pulumi.getter(name="routeItemIds")
    def route_item_ids(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID of the routing policy.
        """
        return pulumi.get(self, "route_item_ids")

    @route_item_ids.setter
    def route_item_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_item_ids", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID of the routing table.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_id", value)


class NotifyRoutes(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 route_item_ids: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a vpc notify_routes

        ## Import

        vpc notify_routes can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/notifyRoutes:NotifyRoutes notify_routes route_table_id#route_item_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] route_item_ids: The unique ID of the routing policy.
        :param pulumi.Input[str] route_table_id: The unique ID of the routing table.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotifyRoutesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a vpc notify_routes

        ## Import

        vpc notify_routes can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/notifyRoutes:NotifyRoutes notify_routes route_table_id#route_item_id
        ```

        :param str resource_name: The name of the resource.
        :param NotifyRoutesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotifyRoutesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 route_item_ids: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotifyRoutesArgs.__new__(NotifyRoutesArgs)

            if route_item_ids is None and not opts.urn:
                raise TypeError("Missing required property 'route_item_ids'")
            __props__.__dict__["route_item_ids"] = route_item_ids
            if route_table_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_table_id'")
            __props__.__dict__["route_table_id"] = route_table_id
            __props__.__dict__["published_to_vbc"] = None
        super(NotifyRoutes, __self__).__init__(
            'tencentcloud:Vpc/notifyRoutes:NotifyRoutes',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            published_to_vbc: Optional[pulumi.Input[bool]] = None,
            route_item_ids: Optional[pulumi.Input[str]] = None,
            route_table_id: Optional[pulumi.Input[str]] = None) -> 'NotifyRoutes':
        """
        Get an existing NotifyRoutes resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] published_to_vbc: If published to vbc.
        :param pulumi.Input[str] route_item_ids: The unique ID of the routing policy.
        :param pulumi.Input[str] route_table_id: The unique ID of the routing table.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NotifyRoutesState.__new__(_NotifyRoutesState)

        __props__.__dict__["published_to_vbc"] = published_to_vbc
        __props__.__dict__["route_item_ids"] = route_item_ids
        __props__.__dict__["route_table_id"] = route_table_id
        return NotifyRoutes(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="publishedToVbc")
    def published_to_vbc(self) -> pulumi.Output[bool]:
        """
        If published to vbc.
        """
        return pulumi.get(self, "published_to_vbc")

    @property
    @pulumi.getter(name="routeItemIds")
    def route_item_ids(self) -> pulumi.Output[str]:
        """
        The unique ID of the routing policy.
        """
        return pulumi.get(self, "route_item_ids")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[str]:
        """
        The unique ID of the routing table.
        """
        return pulumi.get(self, "route_table_id")

