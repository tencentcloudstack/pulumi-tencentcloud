# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EndPointArgs', 'EndPoint']

@pulumi.input_type
class EndPointArgs:
    def __init__(__self__, *,
                 end_point_name: pulumi.Input[str],
                 end_point_service_id: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 end_point_vip: Optional[pulumi.Input[str]] = None,
                 security_groups_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a EndPoint resource.
        :param pulumi.Input[str] end_point_name: Name of endpoint.
        :param pulumi.Input[str] end_point_service_id: ID of endpoint service.
        :param pulumi.Input[str] subnet_id: ID of subnet instance.
        :param pulumi.Input[str] vpc_id: ID of vpc instance.
        :param pulumi.Input[str] end_point_vip: VIP of endpoint ip.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups_ids: Ordered security groups associated with the endpoint.
        """
        pulumi.set(__self__, "end_point_name", end_point_name)
        pulumi.set(__self__, "end_point_service_id", end_point_service_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if end_point_vip is not None:
            pulumi.set(__self__, "end_point_vip", end_point_vip)
        if security_groups_ids is not None:
            pulumi.set(__self__, "security_groups_ids", security_groups_ids)

    @property
    @pulumi.getter(name="endPointName")
    def end_point_name(self) -> pulumi.Input[str]:
        """
        Name of endpoint.
        """
        return pulumi.get(self, "end_point_name")

    @end_point_name.setter
    def end_point_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_point_name", value)

    @property
    @pulumi.getter(name="endPointServiceId")
    def end_point_service_id(self) -> pulumi.Input[str]:
        """
        ID of endpoint service.
        """
        return pulumi.get(self, "end_point_service_id")

    @end_point_service_id.setter
    def end_point_service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_point_service_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        ID of subnet instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        ID of vpc instance.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="endPointVip")
    def end_point_vip(self) -> Optional[pulumi.Input[str]]:
        """
        VIP of endpoint ip.
        """
        return pulumi.get(self, "end_point_vip")

    @end_point_vip.setter
    def end_point_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_point_vip", value)

    @property
    @pulumi.getter(name="securityGroupsIds")
    def security_groups_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ordered security groups associated with the endpoint.
        """
        return pulumi.get(self, "security_groups_ids")

    @security_groups_ids.setter
    def security_groups_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups_ids", value)


@pulumi.input_type
class _EndPointState:
    def __init__(__self__, *,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 end_point_name: Optional[pulumi.Input[str]] = None,
                 end_point_owner: Optional[pulumi.Input[str]] = None,
                 end_point_service_id: Optional[pulumi.Input[str]] = None,
                 end_point_vip: Optional[pulumi.Input[str]] = None,
                 security_groups_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EndPoint resources.
        :param pulumi.Input[str] cdc_id: CDC instance ID.
        :param pulumi.Input[str] create_time: Create Time.
        :param pulumi.Input[str] end_point_name: Name of endpoint.
        :param pulumi.Input[str] end_point_owner: APPID.
        :param pulumi.Input[str] end_point_service_id: ID of endpoint service.
        :param pulumi.Input[str] end_point_vip: VIP of endpoint ip.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups_ids: Ordered security groups associated with the endpoint.
        :param pulumi.Input[str] state: state of end point.
        :param pulumi.Input[str] subnet_id: ID of subnet instance.
        :param pulumi.Input[str] vpc_id: ID of vpc instance.
        """
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if end_point_name is not None:
            pulumi.set(__self__, "end_point_name", end_point_name)
        if end_point_owner is not None:
            pulumi.set(__self__, "end_point_owner", end_point_owner)
        if end_point_service_id is not None:
            pulumi.set(__self__, "end_point_service_id", end_point_service_id)
        if end_point_vip is not None:
            pulumi.set(__self__, "end_point_vip", end_point_vip)
        if security_groups_ids is not None:
            pulumi.set(__self__, "security_groups_ids", security_groups_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        CDC instance ID.
        """
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create Time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="endPointName")
    def end_point_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of endpoint.
        """
        return pulumi.get(self, "end_point_name")

    @end_point_name.setter
    def end_point_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_point_name", value)

    @property
    @pulumi.getter(name="endPointOwner")
    def end_point_owner(self) -> Optional[pulumi.Input[str]]:
        """
        APPID.
        """
        return pulumi.get(self, "end_point_owner")

    @end_point_owner.setter
    def end_point_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_point_owner", value)

    @property
    @pulumi.getter(name="endPointServiceId")
    def end_point_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of endpoint service.
        """
        return pulumi.get(self, "end_point_service_id")

    @end_point_service_id.setter
    def end_point_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_point_service_id", value)

    @property
    @pulumi.getter(name="endPointVip")
    def end_point_vip(self) -> Optional[pulumi.Input[str]]:
        """
        VIP of endpoint ip.
        """
        return pulumi.get(self, "end_point_vip")

    @end_point_vip.setter
    def end_point_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_point_vip", value)

    @property
    @pulumi.getter(name="securityGroupsIds")
    def security_groups_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ordered security groups associated with the endpoint.
        """
        return pulumi.get(self, "security_groups_ids")

    @security_groups_ids.setter
    def security_groups_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups_ids", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        state of end point.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of subnet instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of vpc instance.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class EndPoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_point_name: Optional[pulumi.Input[str]] = None,
                 end_point_service_id: Optional[pulumi.Input[str]] = None,
                 end_point_vip: Optional[pulumi.Input[str]] = None,
                 security_groups_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a vpc end_point

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        end_point = tencentcloud.vpc.EndPoint("endPoint",
            end_point_name="terraform-test",
            end_point_service_id="vpcsvc-69y13tdb",
            end_point_vip="10.0.2.1",
            security_groups_ids=[
                "sg-ghvp9djf",
                "sg-if748odn",
                "sg-3k7vtgf7",
            ],
            subnet_id="subnet-ljyn7h30",
            vpc_id="vpc-391sv4w3")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc end_point can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/endPoint:EndPoint end_point end_point_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_point_name: Name of endpoint.
        :param pulumi.Input[str] end_point_service_id: ID of endpoint service.
        :param pulumi.Input[str] end_point_vip: VIP of endpoint ip.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups_ids: Ordered security groups associated with the endpoint.
        :param pulumi.Input[str] subnet_id: ID of subnet instance.
        :param pulumi.Input[str] vpc_id: ID of vpc instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EndPointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a vpc end_point

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        end_point = tencentcloud.vpc.EndPoint("endPoint",
            end_point_name="terraform-test",
            end_point_service_id="vpcsvc-69y13tdb",
            end_point_vip="10.0.2.1",
            security_groups_ids=[
                "sg-ghvp9djf",
                "sg-if748odn",
                "sg-3k7vtgf7",
            ],
            subnet_id="subnet-ljyn7h30",
            vpc_id="vpc-391sv4w3")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc end_point can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/endPoint:EndPoint end_point end_point_id
        ```

        :param str resource_name: The name of the resource.
        :param EndPointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndPointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_point_name: Optional[pulumi.Input[str]] = None,
                 end_point_service_id: Optional[pulumi.Input[str]] = None,
                 end_point_vip: Optional[pulumi.Input[str]] = None,
                 security_groups_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndPointArgs.__new__(EndPointArgs)

            if end_point_name is None and not opts.urn:
                raise TypeError("Missing required property 'end_point_name'")
            __props__.__dict__["end_point_name"] = end_point_name
            if end_point_service_id is None and not opts.urn:
                raise TypeError("Missing required property 'end_point_service_id'")
            __props__.__dict__["end_point_service_id"] = end_point_service_id
            __props__.__dict__["end_point_vip"] = end_point_vip
            __props__.__dict__["security_groups_ids"] = security_groups_ids
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["cdc_id"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["end_point_owner"] = None
            __props__.__dict__["state"] = None
        super(EndPoint, __self__).__init__(
            'tencentcloud:Vpc/endPoint:EndPoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cdc_id: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            end_point_name: Optional[pulumi.Input[str]] = None,
            end_point_owner: Optional[pulumi.Input[str]] = None,
            end_point_service_id: Optional[pulumi.Input[str]] = None,
            end_point_vip: Optional[pulumi.Input[str]] = None,
            security_groups_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'EndPoint':
        """
        Get an existing EndPoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cdc_id: CDC instance ID.
        :param pulumi.Input[str] create_time: Create Time.
        :param pulumi.Input[str] end_point_name: Name of endpoint.
        :param pulumi.Input[str] end_point_owner: APPID.
        :param pulumi.Input[str] end_point_service_id: ID of endpoint service.
        :param pulumi.Input[str] end_point_vip: VIP of endpoint ip.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups_ids: Ordered security groups associated with the endpoint.
        :param pulumi.Input[str] state: state of end point.
        :param pulumi.Input[str] subnet_id: ID of subnet instance.
        :param pulumi.Input[str] vpc_id: ID of vpc instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EndPointState.__new__(_EndPointState)

        __props__.__dict__["cdc_id"] = cdc_id
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["end_point_name"] = end_point_name
        __props__.__dict__["end_point_owner"] = end_point_owner
        __props__.__dict__["end_point_service_id"] = end_point_service_id
        __props__.__dict__["end_point_vip"] = end_point_vip
        __props__.__dict__["security_groups_ids"] = security_groups_ids
        __props__.__dict__["state"] = state
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["vpc_id"] = vpc_id
        return EndPoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> pulumi.Output[str]:
        """
        CDC instance ID.
        """
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create Time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="endPointName")
    def end_point_name(self) -> pulumi.Output[str]:
        """
        Name of endpoint.
        """
        return pulumi.get(self, "end_point_name")

    @property
    @pulumi.getter(name="endPointOwner")
    def end_point_owner(self) -> pulumi.Output[str]:
        """
        APPID.
        """
        return pulumi.get(self, "end_point_owner")

    @property
    @pulumi.getter(name="endPointServiceId")
    def end_point_service_id(self) -> pulumi.Output[str]:
        """
        ID of endpoint service.
        """
        return pulumi.get(self, "end_point_service_id")

    @property
    @pulumi.getter(name="endPointVip")
    def end_point_vip(self) -> pulumi.Output[Optional[str]]:
        """
        VIP of endpoint ip.
        """
        return pulumi.get(self, "end_point_vip")

    @property
    @pulumi.getter(name="securityGroupsIds")
    def security_groups_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Ordered security groups associated with the endpoint.
        """
        return pulumi.get(self, "security_groups_ids")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        state of end point.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        ID of subnet instance.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of vpc instance.
        """
        return pulumi.get(self, "vpc_id")

