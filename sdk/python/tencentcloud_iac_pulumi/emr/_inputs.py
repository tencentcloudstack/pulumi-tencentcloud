# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ClusterPlacementInfoArgs',
    'ClusterPreExecutedFileSettingArgs',
    'ClusterResourceSpecArgs',
    'ClusterResourceSpecCommonResourceSpecArgs',
    'ClusterResourceSpecCommonResourceSpecMultiDiskArgs',
    'ClusterResourceSpecCoreResourceSpecArgs',
    'ClusterResourceSpecCoreResourceSpecMultiDiskArgs',
    'ClusterResourceSpecMasterResourceSpecArgs',
    'ClusterResourceSpecMasterResourceSpecMultiDiskArgs',
    'ClusterResourceSpecTaskResourceSpecArgs',
    'ClusterResourceSpecTaskResourceSpecMultiDiskArgs',
    'ClusterTerminateNodeInfoArgs',
    'GetAutoScaleRecordsFilterArgs',
]

@pulumi.input_type
class ClusterPlacementInfoArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[str],
                 project_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] zone: Zone.
        :param pulumi.Input[int] project_id: Project id.
        """
        pulumi.set(__self__, "zone", zone)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class ClusterPreExecutedFileSettingArgs:
    def __init__(__self__, *,
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cos_file_name: Optional[pulumi.Input[str]] = None,
                 cos_file_uri: Optional[pulumi.Input[str]] = None,
                 cos_secret_id: Optional[pulumi.Input[str]] = None,
                 cos_secret_key: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 run_order: Optional[pulumi.Input[int]] = None,
                 when_run: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Execution script parameters.
        :param pulumi.Input[str] cos_file_name: Script file name.
        :param pulumi.Input[str] cos_file_uri: The cos address of the script.
        :param pulumi.Input[str] cos_secret_id: Cos secretId.
        :param pulumi.Input[str] cos_secret_key: Cos secretKey.
        :param pulumi.Input[str] remark: Remark.
        :param pulumi.Input[int] run_order: Run order.
        :param pulumi.Input[str] when_run: `resourceAfter` or `clusterAfter`.
        """
        if args is not None:
            pulumi.set(__self__, "args", args)
        if cos_file_name is not None:
            pulumi.set(__self__, "cos_file_name", cos_file_name)
        if cos_file_uri is not None:
            pulumi.set(__self__, "cos_file_uri", cos_file_uri)
        if cos_secret_id is not None:
            pulumi.set(__self__, "cos_secret_id", cos_secret_id)
        if cos_secret_key is not None:
            pulumi.set(__self__, "cos_secret_key", cos_secret_key)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if run_order is not None:
            pulumi.set(__self__, "run_order", run_order)
        if when_run is not None:
            pulumi.set(__self__, "when_run", when_run)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Execution script parameters.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter(name="cosFileName")
    def cos_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Script file name.
        """
        return pulumi.get(self, "cos_file_name")

    @cos_file_name.setter
    def cos_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_file_name", value)

    @property
    @pulumi.getter(name="cosFileUri")
    def cos_file_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The cos address of the script.
        """
        return pulumi.get(self, "cos_file_uri")

    @cos_file_uri.setter
    def cos_file_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_file_uri", value)

    @property
    @pulumi.getter(name="cosSecretId")
    def cos_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cos secretId.
        """
        return pulumi.get(self, "cos_secret_id")

    @cos_secret_id.setter
    def cos_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_secret_id", value)

    @property
    @pulumi.getter(name="cosSecretKey")
    def cos_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Cos secretKey.
        """
        return pulumi.get(self, "cos_secret_key")

    @cos_secret_key.setter
    def cos_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_secret_key", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Remark.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="runOrder")
    def run_order(self) -> Optional[pulumi.Input[int]]:
        """
        Run order.
        """
        return pulumi.get(self, "run_order")

    @run_order.setter
    def run_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_order", value)

    @property
    @pulumi.getter(name="whenRun")
    def when_run(self) -> Optional[pulumi.Input[str]]:
        """
        `resourceAfter` or `clusterAfter`.
        """
        return pulumi.get(self, "when_run")

    @when_run.setter
    def when_run(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "when_run", value)


@pulumi.input_type
class ClusterResourceSpecArgs:
    def __init__(__self__, *,
                 common_count: Optional[pulumi.Input[int]] = None,
                 common_resource_spec: Optional[pulumi.Input['ClusterResourceSpecCommonResourceSpecArgs']] = None,
                 core_count: Optional[pulumi.Input[int]] = None,
                 core_resource_spec: Optional[pulumi.Input['ClusterResourceSpecCoreResourceSpecArgs']] = None,
                 master_count: Optional[pulumi.Input[int]] = None,
                 master_resource_spec: Optional[pulumi.Input['ClusterResourceSpecMasterResourceSpecArgs']] = None,
                 task_count: Optional[pulumi.Input[int]] = None,
                 task_resource_spec: Optional[pulumi.Input['ClusterResourceSpecTaskResourceSpecArgs']] = None):
        """
        :param pulumi.Input[int] common_count: The number of common node.
        :param pulumi.Input['ClusterResourceSpecCommonResourceSpecArgs'] common_resource_spec: Resource details.
        :param pulumi.Input[int] core_count: The number of core node.
        :param pulumi.Input['ClusterResourceSpecCoreResourceSpecArgs'] core_resource_spec: Resource details.
        :param pulumi.Input[int] master_count: The number of master node.
        :param pulumi.Input['ClusterResourceSpecMasterResourceSpecArgs'] master_resource_spec: Resource details.
        :param pulumi.Input[int] task_count: The number of core node.
        :param pulumi.Input['ClusterResourceSpecTaskResourceSpecArgs'] task_resource_spec: Resource details.
        """
        if common_count is not None:
            pulumi.set(__self__, "common_count", common_count)
        if common_resource_spec is not None:
            pulumi.set(__self__, "common_resource_spec", common_resource_spec)
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if core_resource_spec is not None:
            pulumi.set(__self__, "core_resource_spec", core_resource_spec)
        if master_count is not None:
            pulumi.set(__self__, "master_count", master_count)
        if master_resource_spec is not None:
            pulumi.set(__self__, "master_resource_spec", master_resource_spec)
        if task_count is not None:
            pulumi.set(__self__, "task_count", task_count)
        if task_resource_spec is not None:
            pulumi.set(__self__, "task_resource_spec", task_resource_spec)

    @property
    @pulumi.getter(name="commonCount")
    def common_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of common node.
        """
        return pulumi.get(self, "common_count")

    @common_count.setter
    def common_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "common_count", value)

    @property
    @pulumi.getter(name="commonResourceSpec")
    def common_resource_spec(self) -> Optional[pulumi.Input['ClusterResourceSpecCommonResourceSpecArgs']]:
        """
        Resource details.
        """
        return pulumi.get(self, "common_resource_spec")

    @common_resource_spec.setter
    def common_resource_spec(self, value: Optional[pulumi.Input['ClusterResourceSpecCommonResourceSpecArgs']]):
        pulumi.set(self, "common_resource_spec", value)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of core node.
        """
        return pulumi.get(self, "core_count")

    @core_count.setter
    def core_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "core_count", value)

    @property
    @pulumi.getter(name="coreResourceSpec")
    def core_resource_spec(self) -> Optional[pulumi.Input['ClusterResourceSpecCoreResourceSpecArgs']]:
        """
        Resource details.
        """
        return pulumi.get(self, "core_resource_spec")

    @core_resource_spec.setter
    def core_resource_spec(self, value: Optional[pulumi.Input['ClusterResourceSpecCoreResourceSpecArgs']]):
        pulumi.set(self, "core_resource_spec", value)

    @property
    @pulumi.getter(name="masterCount")
    def master_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of master node.
        """
        return pulumi.get(self, "master_count")

    @master_count.setter
    def master_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "master_count", value)

    @property
    @pulumi.getter(name="masterResourceSpec")
    def master_resource_spec(self) -> Optional[pulumi.Input['ClusterResourceSpecMasterResourceSpecArgs']]:
        """
        Resource details.
        """
        return pulumi.get(self, "master_resource_spec")

    @master_resource_spec.setter
    def master_resource_spec(self, value: Optional[pulumi.Input['ClusterResourceSpecMasterResourceSpecArgs']]):
        pulumi.set(self, "master_resource_spec", value)

    @property
    @pulumi.getter(name="taskCount")
    def task_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of core node.
        """
        return pulumi.get(self, "task_count")

    @task_count.setter
    def task_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_count", value)

    @property
    @pulumi.getter(name="taskResourceSpec")
    def task_resource_spec(self) -> Optional[pulumi.Input['ClusterResourceSpecTaskResourceSpecArgs']]:
        """
        Resource details.
        """
        return pulumi.get(self, "task_resource_spec")

    @task_resource_spec.setter
    def task_resource_spec(self, value: Optional[pulumi.Input['ClusterResourceSpecTaskResourceSpecArgs']]):
        pulumi.set(self, "task_resource_spec", value)


@pulumi.input_type
class ClusterResourceSpecCommonResourceSpecArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 multi_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecCommonResourceSpecMultiDiskArgs']]]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] cpu: Number of CPU cores.
        :param pulumi.Input[int] disk_size: Data disk capacity.
        :param pulumi.Input[str] disk_type: disk types. Value range:
               - CLOUD_SSD: Represents cloud SSD;
               - CLOUD_PREMIUM: Represents efficient cloud disk;
               - CLOUD_BASIC: Represents Cloud Block Storage.
        :param pulumi.Input[int] mem_size: Memory size in M.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecCommonResourceSpecMultiDiskArgs']]] multi_disks: Cloud disk list. When the data disk is a cloud disk, use disk_type and disk_size parameters directly, and use multi_disks for excess parts.
        :param pulumi.Input[int] root_size: Root disk capacity.
        :param pulumi.Input[str] spec: Node specification description, such as CVM.SA2.
        :param pulumi.Input[int] storage_type: Storage type. Value range:
               - 4: Represents cloud SSD;
               - 5: Represents efficient cloud disk;
               - 6: Represents enhanced SSD Cloud Block Storage;
               - 11: Represents throughput Cloud Block Storage;
               - 12: Represents extremely fast SSD Cloud Block Storage.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if multi_disks is not None:
            pulumi.set(__self__, "multi_disks", multi_disks)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Number of CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Data disk capacity.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        disk types. Value range:
        - CLOUD_SSD: Represents cloud SSD;
        - CLOUD_PREMIUM: Represents efficient cloud disk;
        - CLOUD_BASIC: Represents Cloud Block Storage.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size in M.
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="multiDisks")
    def multi_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecCommonResourceSpecMultiDiskArgs']]]]:
        """
        Cloud disk list. When the data disk is a cloud disk, use disk_type and disk_size parameters directly, and use multi_disks for excess parts.
        """
        return pulumi.get(self, "multi_disks")

    @multi_disks.setter
    def multi_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecCommonResourceSpecMultiDiskArgs']]]]):
        pulumi.set(self, "multi_disks", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[int]]:
        """
        Root disk capacity.
        """
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        Node specification description, such as CVM.SA2.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[int]]:
        """
        Storage type. Value range:
        - 4: Represents cloud SSD;
        - 5: Represents efficient cloud disk;
        - 6: Represents enhanced SSD Cloud Block Storage;
        - 11: Represents throughput Cloud Block Storage;
        - 12: Represents extremely fast SSD Cloud Block Storage.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_type", value)


@pulumi.input_type
class ClusterResourceSpecCommonResourceSpecMultiDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] count: Number of cloud disks of this type.
        :param pulumi.Input[str] disk_type: Cloud disk type
               - CLOUD_SSD: Represents cloud SSD;
               - CLOUD_PREMIUM: Represents efficient cloud disk;
               - CLOUD_HSSD: Represents enhanced SSD Cloud Block Storage.
        :param pulumi.Input[int] volume: Cloud disk size.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cloud disks of this type.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud disk type
        - CLOUD_SSD: Represents cloud SSD;
        - CLOUD_PREMIUM: Represents efficient cloud disk;
        - CLOUD_HSSD: Represents enhanced SSD Cloud Block Storage.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[int]]:
        """
        Cloud disk size.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume", value)


@pulumi.input_type
class ClusterResourceSpecCoreResourceSpecArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 multi_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecCoreResourceSpecMultiDiskArgs']]]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] cpu: Number of CPU cores.
        :param pulumi.Input[int] disk_size: Data disk capacity.
        :param pulumi.Input[str] disk_type: disk types. Value range:
               - CLOUD_SSD: Represents cloud SSD;
               - CLOUD_PREMIUM: Represents efficient cloud disk;
               - CLOUD_BASIC: Represents Cloud Block Storage.
        :param pulumi.Input[int] mem_size: Memory size in M.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecCoreResourceSpecMultiDiskArgs']]] multi_disks: Cloud disk list. When the data disk is a cloud disk, use disk_type and disk_size parameters directly, and use multi_disks for excess parts.
        :param pulumi.Input[int] root_size: Root disk capacity.
        :param pulumi.Input[str] spec: Node specification description, such as CVM.SA2.
        :param pulumi.Input[int] storage_type: Storage type. Value range:
               - 4: Represents cloud SSD;
               - 5: Represents efficient cloud disk;
               - 6: Represents enhanced SSD Cloud Block Storage;
               - 11: Represents throughput Cloud Block Storage;
               - 12: Represents extremely fast SSD Cloud Block Storage.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if multi_disks is not None:
            pulumi.set(__self__, "multi_disks", multi_disks)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Number of CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Data disk capacity.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        disk types. Value range:
        - CLOUD_SSD: Represents cloud SSD;
        - CLOUD_PREMIUM: Represents efficient cloud disk;
        - CLOUD_BASIC: Represents Cloud Block Storage.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size in M.
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="multiDisks")
    def multi_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecCoreResourceSpecMultiDiskArgs']]]]:
        """
        Cloud disk list. When the data disk is a cloud disk, use disk_type and disk_size parameters directly, and use multi_disks for excess parts.
        """
        return pulumi.get(self, "multi_disks")

    @multi_disks.setter
    def multi_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecCoreResourceSpecMultiDiskArgs']]]]):
        pulumi.set(self, "multi_disks", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[int]]:
        """
        Root disk capacity.
        """
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        Node specification description, such as CVM.SA2.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[int]]:
        """
        Storage type. Value range:
        - 4: Represents cloud SSD;
        - 5: Represents efficient cloud disk;
        - 6: Represents enhanced SSD Cloud Block Storage;
        - 11: Represents throughput Cloud Block Storage;
        - 12: Represents extremely fast SSD Cloud Block Storage.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_type", value)


@pulumi.input_type
class ClusterResourceSpecCoreResourceSpecMultiDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] count: Number of cloud disks of this type.
        :param pulumi.Input[str] disk_type: Cloud disk type
               - CLOUD_SSD: Represents cloud SSD;
               - CLOUD_PREMIUM: Represents efficient cloud disk;
               - CLOUD_HSSD: Represents enhanced SSD Cloud Block Storage.
        :param pulumi.Input[int] volume: Cloud disk size.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cloud disks of this type.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud disk type
        - CLOUD_SSD: Represents cloud SSD;
        - CLOUD_PREMIUM: Represents efficient cloud disk;
        - CLOUD_HSSD: Represents enhanced SSD Cloud Block Storage.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[int]]:
        """
        Cloud disk size.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume", value)


@pulumi.input_type
class ClusterResourceSpecMasterResourceSpecArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 multi_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecMasterResourceSpecMultiDiskArgs']]]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] cpu: Number of CPU cores.
        :param pulumi.Input[int] disk_size: Data disk capacity.
        :param pulumi.Input[str] disk_type: disk types. Value range:
               - CLOUD_SSD: Represents cloud SSD;
               - CLOUD_PREMIUM: Represents efficient cloud disk;
               - CLOUD_BASIC: Represents Cloud Block Storage.
        :param pulumi.Input[int] mem_size: Memory size in M.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecMasterResourceSpecMultiDiskArgs']]] multi_disks: Cloud disk list. When the data disk is a cloud disk, use disk_type and disk_size parameters directly, and use multi_disks for excess parts.
        :param pulumi.Input[int] root_size: Root disk capacity.
        :param pulumi.Input[str] spec: Node specification description, such as CVM.SA2.
        :param pulumi.Input[int] storage_type: Storage type. Value range:
               - 4: Represents cloud SSD;
               - 5: Represents efficient cloud disk;
               - 6: Represents enhanced SSD Cloud Block Storage;
               - 11: Represents throughput Cloud Block Storage;
               - 12: Represents extremely fast SSD Cloud Block Storage.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if multi_disks is not None:
            pulumi.set(__self__, "multi_disks", multi_disks)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Number of CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Data disk capacity.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        disk types. Value range:
        - CLOUD_SSD: Represents cloud SSD;
        - CLOUD_PREMIUM: Represents efficient cloud disk;
        - CLOUD_BASIC: Represents Cloud Block Storage.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size in M.
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="multiDisks")
    def multi_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecMasterResourceSpecMultiDiskArgs']]]]:
        """
        Cloud disk list. When the data disk is a cloud disk, use disk_type and disk_size parameters directly, and use multi_disks for excess parts.
        """
        return pulumi.get(self, "multi_disks")

    @multi_disks.setter
    def multi_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecMasterResourceSpecMultiDiskArgs']]]]):
        pulumi.set(self, "multi_disks", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[int]]:
        """
        Root disk capacity.
        """
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        Node specification description, such as CVM.SA2.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[int]]:
        """
        Storage type. Value range:
        - 4: Represents cloud SSD;
        - 5: Represents efficient cloud disk;
        - 6: Represents enhanced SSD Cloud Block Storage;
        - 11: Represents throughput Cloud Block Storage;
        - 12: Represents extremely fast SSD Cloud Block Storage.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_type", value)


@pulumi.input_type
class ClusterResourceSpecMasterResourceSpecMultiDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] count: Number of cloud disks of this type.
        :param pulumi.Input[str] disk_type: Cloud disk type
               - CLOUD_SSD: Represents cloud SSD;
               - CLOUD_PREMIUM: Represents efficient cloud disk;
               - CLOUD_HSSD: Represents enhanced SSD Cloud Block Storage.
        :param pulumi.Input[int] volume: Cloud disk size.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cloud disks of this type.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud disk type
        - CLOUD_SSD: Represents cloud SSD;
        - CLOUD_PREMIUM: Represents efficient cloud disk;
        - CLOUD_HSSD: Represents enhanced SSD Cloud Block Storage.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[int]]:
        """
        Cloud disk size.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume", value)


@pulumi.input_type
class ClusterResourceSpecTaskResourceSpecArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[int]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 multi_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecTaskResourceSpecMultiDiskArgs']]]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] cpu: Number of CPU cores.
        :param pulumi.Input[int] disk_size: Data disk capacity.
        :param pulumi.Input[str] disk_type: disk types. Value range:
               - CLOUD_SSD: Represents cloud SSD;
               - CLOUD_PREMIUM: Represents efficient cloud disk;
               - CLOUD_BASIC: Represents Cloud Block Storage.
        :param pulumi.Input[int] mem_size: Memory size in M.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecTaskResourceSpecMultiDiskArgs']]] multi_disks: Cloud disk list. When the data disk is a cloud disk, use disk_type and disk_size parameters directly, and use multi_disks for excess parts.
        :param pulumi.Input[int] root_size: Root disk capacity.
        :param pulumi.Input[str] spec: Node specification description, such as CVM.SA2.
        :param pulumi.Input[int] storage_type: Storage type. Value range:
               - 4: Represents cloud SSD;
               - 5: Represents efficient cloud disk;
               - 6: Represents enhanced SSD Cloud Block Storage;
               - 11: Represents throughput Cloud Block Storage;
               - 12: Represents extremely fast SSD Cloud Block Storage.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if multi_disks is not None:
            pulumi.set(__self__, "multi_disks", multi_disks)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Number of CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Data disk capacity.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        disk types. Value range:
        - CLOUD_SSD: Represents cloud SSD;
        - CLOUD_PREMIUM: Represents efficient cloud disk;
        - CLOUD_BASIC: Represents Cloud Block Storage.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size in M.
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="multiDisks")
    def multi_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecTaskResourceSpecMultiDiskArgs']]]]:
        """
        Cloud disk list. When the data disk is a cloud disk, use disk_type and disk_size parameters directly, and use multi_disks for excess parts.
        """
        return pulumi.get(self, "multi_disks")

    @multi_disks.setter
    def multi_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterResourceSpecTaskResourceSpecMultiDiskArgs']]]]):
        pulumi.set(self, "multi_disks", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[int]]:
        """
        Root disk capacity.
        """
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        Node specification description, such as CVM.SA2.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[int]]:
        """
        Storage type. Value range:
        - 4: Represents cloud SSD;
        - 5: Represents efficient cloud disk;
        - 6: Represents enhanced SSD Cloud Block Storage;
        - 11: Represents throughput Cloud Block Storage;
        - 12: Represents extremely fast SSD Cloud Block Storage.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_type", value)


@pulumi.input_type
class ClusterResourceSpecTaskResourceSpecMultiDiskArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] count: Number of cloud disks of this type.
        :param pulumi.Input[str] disk_type: Cloud disk type
               - CLOUD_SSD: Represents cloud SSD;
               - CLOUD_PREMIUM: Represents efficient cloud disk;
               - CLOUD_HSSD: Represents enhanced SSD Cloud Block Storage.
        :param pulumi.Input[int] volume: Cloud disk size.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cloud disks of this type.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud disk type
        - CLOUD_SSD: Represents cloud SSD;
        - CLOUD_PREMIUM: Represents efficient cloud disk;
        - CLOUD_HSSD: Represents enhanced SSD Cloud Block Storage.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[int]]:
        """
        Cloud disk size.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume", value)


@pulumi.input_type
class ClusterTerminateNodeInfoArgs:
    def __init__(__self__, *,
                 cvm_instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_flag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cvm_instance_ids: Destroy resource list.
        :param pulumi.Input[str] node_flag: Value range of destruction node type: `MASTER`, `TASK`, `CORE`, `ROUTER`.
        """
        if cvm_instance_ids is not None:
            pulumi.set(__self__, "cvm_instance_ids", cvm_instance_ids)
        if node_flag is not None:
            pulumi.set(__self__, "node_flag", node_flag)

    @property
    @pulumi.getter(name="cvmInstanceIds")
    def cvm_instance_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Destroy resource list.
        """
        return pulumi.get(self, "cvm_instance_ids")

    @cvm_instance_ids.setter
    def cvm_instance_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cvm_instance_ids", value)

    @property
    @pulumi.getter(name="nodeFlag")
    def node_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Value range of destruction node type: `MASTER`, `TASK`, `CORE`, `ROUTER`.
        """
        return pulumi.get(self, "node_flag")

    @node_flag.setter
    def node_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_flag", value)


@pulumi.input_type
class GetAutoScaleRecordsFilterArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Key. Note: This field may return null, indicating that no valid value can be obtained.
        :param str value: Value. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


