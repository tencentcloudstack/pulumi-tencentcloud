# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RecordArgs', 'Record']

@pulumi.input_type
class RecordArgs:
    def __init__(__self__, *,
                 record_type: pulumi.Input[str],
                 record_value: pulumi.Input[str],
                 sub_domain: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 mx: Optional[pulumi.Input[int]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Record resource.
        :param pulumi.Input[str] record_type: Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
        :param pulumi.Input[str] record_value: Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
        :param pulumi.Input[str] sub_domain: Subdomain, such as `www`, `m`, and `@`.
        :param pulumi.Input[str] zone_id: Private domain ID.
        :param pulumi.Input[int] mx: MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
        :param pulumi.Input[int] ttl: Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
        :param pulumi.Input[int] weight: Record weight. Value range: 1~100.
        """
        pulumi.set(__self__, "record_type", record_type)
        pulumi.set(__self__, "record_value", record_value)
        pulumi.set(__self__, "sub_domain", sub_domain)
        pulumi.set(__self__, "zone_id", zone_id)
        if mx is not None:
            pulumi.set(__self__, "mx", mx)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> pulumi.Input[str]:
        """
        Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> pulumi.Input[str]:
        """
        Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
        """
        return pulumi.get(self, "record_value")

    @record_value.setter
    def record_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_value", value)

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> pulumi.Input[str]:
        """
        Subdomain, such as `www`, `m`, and `@`.
        """
        return pulumi.get(self, "sub_domain")

    @sub_domain.setter
    def sub_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "sub_domain", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Private domain ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter
    def mx(self) -> Optional[pulumi.Input[int]]:
        """
        MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
        """
        return pulumi.get(self, "mx")

    @mx.setter
    def mx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mx", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Record weight. Value range: 1~100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _RecordState:
    def __init__(__self__, *,
                 mx: Optional[pulumi.Input[int]] = None,
                 record_type: Optional[pulumi.Input[str]] = None,
                 record_value: Optional[pulumi.Input[str]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Record resources.
        :param pulumi.Input[int] mx: MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
        :param pulumi.Input[str] record_type: Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
        :param pulumi.Input[str] record_value: Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
        :param pulumi.Input[str] sub_domain: Subdomain, such as `www`, `m`, and `@`.
        :param pulumi.Input[int] ttl: Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
        :param pulumi.Input[int] weight: Record weight. Value range: 1~100.
        :param pulumi.Input[str] zone_id: Private domain ID.
        """
        if mx is not None:
            pulumi.set(__self__, "mx", mx)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if record_value is not None:
            pulumi.set(__self__, "record_value", record_value)
        if sub_domain is not None:
            pulumi.set(__self__, "sub_domain", sub_domain)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def mx(self) -> Optional[pulumi.Input[int]]:
        """
        MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
        """
        return pulumi.get(self, "mx")

    @mx.setter
    def mx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mx", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[str]]:
        """
        Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> Optional[pulumi.Input[str]]:
        """
        Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
        """
        return pulumi.get(self, "record_value")

    @record_value.setter
    def record_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_value", value)

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain, such as `www`, `m`, and `@`.
        """
        return pulumi.get(self, "sub_domain")

    @sub_domain.setter
    def sub_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_domain", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Record weight. Value range: 1~100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private domain ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class Record(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mx: Optional[pulumi.Input[int]] = None,
                 record_type: Optional[pulumi.Input[str]] = None,
                 record_value: Optional[pulumi.Input[str]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to create a Private Dns Record.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create private dns zone
        example_zone = tencentcloud.private_dns.Zone("exampleZone",
            domain="domain.com",
            remark="remark.",
            vpc_sets=[tencentcloud.private_dns.ZoneVpcSetArgs(
                region="ap-guangzhou",
                uniq_vpc_id=vpc.id,
            )],
            dns_forward_status="DISABLED",
            cname_speedup_status="ENABLED",
            tags={
                "createdBy": "terraform",
            })
        # create private dns record
        example_record = tencentcloud.private_dns.Record("exampleRecord",
            zone_id=example_zone.id,
            record_type="A",
            record_value="192.168.1.2",
            sub_domain="www",
            ttl=300,
            weight=1,
            mx=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Private Dns Record can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:PrivateDns/record:Record example zone-iza3a33s#1983030
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] mx: MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
        :param pulumi.Input[str] record_type: Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
        :param pulumi.Input[str] record_value: Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
        :param pulumi.Input[str] sub_domain: Subdomain, such as `www`, `m`, and `@`.
        :param pulumi.Input[int] ttl: Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
        :param pulumi.Input[int] weight: Record weight. Value range: 1~100.
        :param pulumi.Input[str] zone_id: Private domain ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RecordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a Private Dns Record.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create private dns zone
        example_zone = tencentcloud.private_dns.Zone("exampleZone",
            domain="domain.com",
            remark="remark.",
            vpc_sets=[tencentcloud.private_dns.ZoneVpcSetArgs(
                region="ap-guangzhou",
                uniq_vpc_id=vpc.id,
            )],
            dns_forward_status="DISABLED",
            cname_speedup_status="ENABLED",
            tags={
                "createdBy": "terraform",
            })
        # create private dns record
        example_record = tencentcloud.private_dns.Record("exampleRecord",
            zone_id=example_zone.id,
            record_type="A",
            record_value="192.168.1.2",
            sub_domain="www",
            ttl=300,
            weight=1,
            mx=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Private Dns Record can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:PrivateDns/record:Record example zone-iza3a33s#1983030
        ```

        :param str resource_name: The name of the resource.
        :param RecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mx: Optional[pulumi.Input[int]] = None,
                 record_type: Optional[pulumi.Input[str]] = None,
                 record_value: Optional[pulumi.Input[str]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RecordArgs.__new__(RecordArgs)

            __props__.__dict__["mx"] = mx
            if record_type is None and not opts.urn:
                raise TypeError("Missing required property 'record_type'")
            __props__.__dict__["record_type"] = record_type
            if record_value is None and not opts.urn:
                raise TypeError("Missing required property 'record_value'")
            __props__.__dict__["record_value"] = record_value
            if sub_domain is None and not opts.urn:
                raise TypeError("Missing required property 'sub_domain'")
            __props__.__dict__["sub_domain"] = sub_domain
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["weight"] = weight
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
        super(Record, __self__).__init__(
            'tencentcloud:PrivateDns/record:Record',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            mx: Optional[pulumi.Input[int]] = None,
            record_type: Optional[pulumi.Input[str]] = None,
            record_value: Optional[pulumi.Input[str]] = None,
            sub_domain: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[int]] = None,
            weight: Optional[pulumi.Input[int]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'Record':
        """
        Get an existing Record resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] mx: MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
        :param pulumi.Input[str] record_type: Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
        :param pulumi.Input[str] record_value: Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
        :param pulumi.Input[str] sub_domain: Subdomain, such as `www`, `m`, and `@`.
        :param pulumi.Input[int] ttl: Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
        :param pulumi.Input[int] weight: Record weight. Value range: 1~100.
        :param pulumi.Input[str] zone_id: Private domain ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RecordState.__new__(_RecordState)

        __props__.__dict__["mx"] = mx
        __props__.__dict__["record_type"] = record_type
        __props__.__dict__["record_value"] = record_value
        __props__.__dict__["sub_domain"] = sub_domain
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["weight"] = weight
        __props__.__dict__["zone_id"] = zone_id
        return Record(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def mx(self) -> pulumi.Output[Optional[int]]:
        """
        MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
        """
        return pulumi.get(self, "mx")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> pulumi.Output[str]:
        """
        Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> pulumi.Output[str]:
        """
        Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
        """
        return pulumi.get(self, "record_value")

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> pulumi.Output[str]:
        """
        Subdomain, such as `www`, `m`, and `@`.
        """
        return pulumi.get(self, "sub_domain")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[int]:
        """
        Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[Optional[int]]:
        """
        Record weight. Value range: 1~100.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Private domain ID.
        """
        return pulumi.get(self, "zone_id")

