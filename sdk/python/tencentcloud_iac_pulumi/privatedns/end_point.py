# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EndPointArgs', 'EndPoint']

@pulumi.input_type
class EndPointArgs:
    def __init__(__self__, *,
                 end_point_name: pulumi.Input[str],
                 end_point_region: pulumi.Input[str],
                 end_point_service_id: pulumi.Input[str],
                 ip_num: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a EndPoint resource.
        :param pulumi.Input[str] end_point_name: Endpoint name.
        :param pulumi.Input[str] end_point_region: Endpoint region, which should be consistent with the region of the endpoint service.
        :param pulumi.Input[str] end_point_service_id: Endpoint service ID (namely, VPC endpoint service ID).
        :param pulumi.Input[int] ip_num: Number of endpoint IP addresses.
        """
        pulumi.set(__self__, "end_point_name", end_point_name)
        pulumi.set(__self__, "end_point_region", end_point_region)
        pulumi.set(__self__, "end_point_service_id", end_point_service_id)
        if ip_num is not None:
            pulumi.set(__self__, "ip_num", ip_num)

    @property
    @pulumi.getter(name="endPointName")
    def end_point_name(self) -> pulumi.Input[str]:
        """
        Endpoint name.
        """
        return pulumi.get(self, "end_point_name")

    @end_point_name.setter
    def end_point_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_point_name", value)

    @property
    @pulumi.getter(name="endPointRegion")
    def end_point_region(self) -> pulumi.Input[str]:
        """
        Endpoint region, which should be consistent with the region of the endpoint service.
        """
        return pulumi.get(self, "end_point_region")

    @end_point_region.setter
    def end_point_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_point_region", value)

    @property
    @pulumi.getter(name="endPointServiceId")
    def end_point_service_id(self) -> pulumi.Input[str]:
        """
        Endpoint service ID (namely, VPC endpoint service ID).
        """
        return pulumi.get(self, "end_point_service_id")

    @end_point_service_id.setter
    def end_point_service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_point_service_id", value)

    @property
    @pulumi.getter(name="ipNum")
    def ip_num(self) -> Optional[pulumi.Input[int]]:
        """
        Number of endpoint IP addresses.
        """
        return pulumi.get(self, "ip_num")

    @ip_num.setter
    def ip_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_num", value)


@pulumi.input_type
class _EndPointState:
    def __init__(__self__, *,
                 end_point_name: Optional[pulumi.Input[str]] = None,
                 end_point_region: Optional[pulumi.Input[str]] = None,
                 end_point_service_id: Optional[pulumi.Input[str]] = None,
                 end_point_vip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_num: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering EndPoint resources.
        :param pulumi.Input[str] end_point_name: Endpoint name.
        :param pulumi.Input[str] end_point_region: Endpoint region, which should be consistent with the region of the endpoint service.
        :param pulumi.Input[str] end_point_service_id: Endpoint service ID (namely, VPC endpoint service ID).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] end_point_vip_sets: Vip list of endpoint.
        :param pulumi.Input[int] ip_num: Number of endpoint IP addresses.
        """
        if end_point_name is not None:
            pulumi.set(__self__, "end_point_name", end_point_name)
        if end_point_region is not None:
            pulumi.set(__self__, "end_point_region", end_point_region)
        if end_point_service_id is not None:
            pulumi.set(__self__, "end_point_service_id", end_point_service_id)
        if end_point_vip_sets is not None:
            pulumi.set(__self__, "end_point_vip_sets", end_point_vip_sets)
        if ip_num is not None:
            pulumi.set(__self__, "ip_num", ip_num)

    @property
    @pulumi.getter(name="endPointName")
    def end_point_name(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint name.
        """
        return pulumi.get(self, "end_point_name")

    @end_point_name.setter
    def end_point_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_point_name", value)

    @property
    @pulumi.getter(name="endPointRegion")
    def end_point_region(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint region, which should be consistent with the region of the endpoint service.
        """
        return pulumi.get(self, "end_point_region")

    @end_point_region.setter
    def end_point_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_point_region", value)

    @property
    @pulumi.getter(name="endPointServiceId")
    def end_point_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint service ID (namely, VPC endpoint service ID).
        """
        return pulumi.get(self, "end_point_service_id")

    @end_point_service_id.setter
    def end_point_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_point_service_id", value)

    @property
    @pulumi.getter(name="endPointVipSets")
    def end_point_vip_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Vip list of endpoint.
        """
        return pulumi.get(self, "end_point_vip_sets")

    @end_point_vip_sets.setter
    def end_point_vip_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "end_point_vip_sets", value)

    @property
    @pulumi.getter(name="ipNum")
    def ip_num(self) -> Optional[pulumi.Input[int]]:
        """
        Number of endpoint IP addresses.
        """
        return pulumi.get(self, "ip_num")

    @ip_num.setter
    def ip_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_num", value)


class EndPoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_point_name: Optional[pulumi.Input[str]] = None,
                 end_point_region: Optional[pulumi.Input[str]] = None,
                 end_point_service_id: Optional[pulumi.Input[str]] = None,
                 ip_num: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a privatedns end point

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.private_dns.EndPoint("example",
            end_point_name="tf-example",
            end_point_region="ap-guangzhou",
            end_point_service_id="vpcsvc-61wcwmar",
            ip_num=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        private dns end point can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:PrivateDns/endPoint:EndPoint example eid-77a246c867
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_point_name: Endpoint name.
        :param pulumi.Input[str] end_point_region: Endpoint region, which should be consistent with the region of the endpoint service.
        :param pulumi.Input[str] end_point_service_id: Endpoint service ID (namely, VPC endpoint service ID).
        :param pulumi.Input[int] ip_num: Number of endpoint IP addresses.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EndPointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a privatedns end point

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.private_dns.EndPoint("example",
            end_point_name="tf-example",
            end_point_region="ap-guangzhou",
            end_point_service_id="vpcsvc-61wcwmar",
            ip_num=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        private dns end point can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:PrivateDns/endPoint:EndPoint example eid-77a246c867
        ```

        :param str resource_name: The name of the resource.
        :param EndPointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndPointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_point_name: Optional[pulumi.Input[str]] = None,
                 end_point_region: Optional[pulumi.Input[str]] = None,
                 end_point_service_id: Optional[pulumi.Input[str]] = None,
                 ip_num: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndPointArgs.__new__(EndPointArgs)

            if end_point_name is None and not opts.urn:
                raise TypeError("Missing required property 'end_point_name'")
            __props__.__dict__["end_point_name"] = end_point_name
            if end_point_region is None and not opts.urn:
                raise TypeError("Missing required property 'end_point_region'")
            __props__.__dict__["end_point_region"] = end_point_region
            if end_point_service_id is None and not opts.urn:
                raise TypeError("Missing required property 'end_point_service_id'")
            __props__.__dict__["end_point_service_id"] = end_point_service_id
            __props__.__dict__["ip_num"] = ip_num
            __props__.__dict__["end_point_vip_sets"] = None
        super(EndPoint, __self__).__init__(
            'tencentcloud:PrivateDns/endPoint:EndPoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            end_point_name: Optional[pulumi.Input[str]] = None,
            end_point_region: Optional[pulumi.Input[str]] = None,
            end_point_service_id: Optional[pulumi.Input[str]] = None,
            end_point_vip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ip_num: Optional[pulumi.Input[int]] = None) -> 'EndPoint':
        """
        Get an existing EndPoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_point_name: Endpoint name.
        :param pulumi.Input[str] end_point_region: Endpoint region, which should be consistent with the region of the endpoint service.
        :param pulumi.Input[str] end_point_service_id: Endpoint service ID (namely, VPC endpoint service ID).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] end_point_vip_sets: Vip list of endpoint.
        :param pulumi.Input[int] ip_num: Number of endpoint IP addresses.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EndPointState.__new__(_EndPointState)

        __props__.__dict__["end_point_name"] = end_point_name
        __props__.__dict__["end_point_region"] = end_point_region
        __props__.__dict__["end_point_service_id"] = end_point_service_id
        __props__.__dict__["end_point_vip_sets"] = end_point_vip_sets
        __props__.__dict__["ip_num"] = ip_num
        return EndPoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="endPointName")
    def end_point_name(self) -> pulumi.Output[str]:
        """
        Endpoint name.
        """
        return pulumi.get(self, "end_point_name")

    @property
    @pulumi.getter(name="endPointRegion")
    def end_point_region(self) -> pulumi.Output[str]:
        """
        Endpoint region, which should be consistent with the region of the endpoint service.
        """
        return pulumi.get(self, "end_point_region")

    @property
    @pulumi.getter(name="endPointServiceId")
    def end_point_service_id(self) -> pulumi.Output[str]:
        """
        Endpoint service ID (namely, VPC endpoint service ID).
        """
        return pulumi.get(self, "end_point_service_id")

    @property
    @pulumi.getter(name="endPointVipSets")
    def end_point_vip_sets(self) -> pulumi.Output[Sequence[str]]:
        """
        Vip list of endpoint.
        """
        return pulumi.get(self, "end_point_vip_sets")

    @property
    @pulumi.getter(name="ipNum")
    def ip_num(self) -> pulumi.Output[int]:
        """
        Number of endpoint IP addresses.
        """
        return pulumi.get(self, "ip_num")

