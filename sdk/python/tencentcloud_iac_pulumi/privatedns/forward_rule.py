# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ForwardRuleArgs', 'ForwardRule']

@pulumi.input_type
class ForwardRuleArgs:
    def __init__(__self__, *,
                 end_point_id: pulumi.Input[str],
                 rule_name: pulumi.Input[str],
                 rule_type: pulumi.Input[str],
                 zone_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ForwardRule resource.
        :param pulumi.Input[str] end_point_id: Endpoint ID.
        :param pulumi.Input[str] rule_name: Forwarding rule name.
        :param pulumi.Input[str] rule_type: Forwarding rule type. DOWN: From cloud to off-cloud; UP: From off-cloud to cloud.
        :param pulumi.Input[str] zone_id: Private domain ID, which can be viewed on the private domain list page.
        """
        pulumi.set(__self__, "end_point_id", end_point_id)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="endPointId")
    def end_point_id(self) -> pulumi.Input[str]:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "end_point_id")

    @end_point_id.setter
    def end_point_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_point_id", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        Forwarding rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        """
        Forwarding rule type. DOWN: From cloud to off-cloud; UP: From off-cloud to cloud.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Private domain ID, which can be viewed on the private domain list page.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class _ForwardRuleState:
    def __init__(__self__, *,
                 end_point_id: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ForwardRule resources.
        :param pulumi.Input[str] end_point_id: Endpoint ID.
        :param pulumi.Input[str] rule_name: Forwarding rule name.
        :param pulumi.Input[str] rule_type: Forwarding rule type. DOWN: From cloud to off-cloud; UP: From off-cloud to cloud.
        :param pulumi.Input[str] zone_id: Private domain ID, which can be viewed on the private domain list page.
        """
        if end_point_id is not None:
            pulumi.set(__self__, "end_point_id", end_point_id)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="endPointId")
    def end_point_id(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "end_point_id")

    @end_point_id.setter
    def end_point_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_point_id", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Forwarding rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        """
        Forwarding rule type. DOWN: From cloud to off-cloud; UP: From off-cloud to cloud.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private domain ID, which can be viewed on the private domain list page.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class ForwardRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_point_id: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a privatedns forward rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_end_point = tencentcloud.private_dns.EndPoint("exampleEndPoint",
            end_point_name="tf-example",
            end_point_service_id="vpcsvc-61wcwmar",
            end_point_region="ap-guangzhou",
            ip_num=1)
        example_forward_rule = tencentcloud.private_dns.ForwardRule("exampleForwardRule",
            rule_name="tf-example",
            rule_type="DOWN",
            zone_id="zone-cmmbvaq8",
            end_point_id=example_end_point.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        private dns forward rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:PrivateDns/forwardRule:ForwardRule example fid-dbc2c0a97c
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_point_id: Endpoint ID.
        :param pulumi.Input[str] rule_name: Forwarding rule name.
        :param pulumi.Input[str] rule_type: Forwarding rule type. DOWN: From cloud to off-cloud; UP: From off-cloud to cloud.
        :param pulumi.Input[str] zone_id: Private domain ID, which can be viewed on the private domain list page.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ForwardRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a privatedns forward rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_end_point = tencentcloud.private_dns.EndPoint("exampleEndPoint",
            end_point_name="tf-example",
            end_point_service_id="vpcsvc-61wcwmar",
            end_point_region="ap-guangzhou",
            ip_num=1)
        example_forward_rule = tencentcloud.private_dns.ForwardRule("exampleForwardRule",
            rule_name="tf-example",
            rule_type="DOWN",
            zone_id="zone-cmmbvaq8",
            end_point_id=example_end_point.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        private dns forward rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:PrivateDns/forwardRule:ForwardRule example fid-dbc2c0a97c
        ```

        :param str resource_name: The name of the resource.
        :param ForwardRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ForwardRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_point_id: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ForwardRuleArgs.__new__(ForwardRuleArgs)

            if end_point_id is None and not opts.urn:
                raise TypeError("Missing required property 'end_point_id'")
            __props__.__dict__["end_point_id"] = end_point_id
            if rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_name'")
            __props__.__dict__["rule_name"] = rule_name
            if rule_type is None and not opts.urn:
                raise TypeError("Missing required property 'rule_type'")
            __props__.__dict__["rule_type"] = rule_type
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
        super(ForwardRule, __self__).__init__(
            'tencentcloud:PrivateDns/forwardRule:ForwardRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            end_point_id: Optional[pulumi.Input[str]] = None,
            rule_name: Optional[pulumi.Input[str]] = None,
            rule_type: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'ForwardRule':
        """
        Get an existing ForwardRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_point_id: Endpoint ID.
        :param pulumi.Input[str] rule_name: Forwarding rule name.
        :param pulumi.Input[str] rule_type: Forwarding rule type. DOWN: From cloud to off-cloud; UP: From off-cloud to cloud.
        :param pulumi.Input[str] zone_id: Private domain ID, which can be viewed on the private domain list page.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ForwardRuleState.__new__(_ForwardRuleState)

        __props__.__dict__["end_point_id"] = end_point_id
        __props__.__dict__["rule_name"] = rule_name
        __props__.__dict__["rule_type"] = rule_type
        __props__.__dict__["zone_id"] = zone_id
        return ForwardRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="endPointId")
    def end_point_id(self) -> pulumi.Output[str]:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "end_point_id")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[str]:
        """
        Forwarding rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Output[str]:
        """
        Forwarding rule type. DOWN: From cloud to off-cloud; UP: From off-cloud to cloud.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Private domain ID, which can be viewed on the private domain list page.
        """
        return pulumi.get(self, "zone_id")

