# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ZoneAccountVpcSet',
    'ZoneTagSet',
    'ZoneVpcAttachmentAccountVpcSet',
    'ZoneVpcAttachmentVpcSet',
    'ZoneVpcSet',
    'GetEndPointsEndPointSetResult',
    'GetEndPointsEndPointSetTagResult',
    'GetEndPointsFilterResult',
    'GetForwardRulesFilterResult',
    'GetForwardRulesForwardRuleSetResult',
    'GetForwardRulesForwardRuleSetTagResult',
    'GetForwardRulesForwardRuleSetVpcSetResult',
    'GetPrivateZoneListFilterResult',
    'GetPrivateZoneListPrivateZoneSetResult',
    'GetPrivateZoneListPrivateZoneSetAccountVpcSetResult',
    'GetPrivateZoneListPrivateZoneSetDeletedVpcSetResult',
    'GetPrivateZoneListPrivateZoneSetTagResult',
    'GetPrivateZoneListPrivateZoneSetVpcSetResult',
    'GetRecordsFilterResult',
    'GetRecordsRecordSetResult',
]

@pulumi.output_type
class ZoneAccountVpcSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uniqVpcId":
            suggest = "uniq_vpc_id"
        elif key == "vpcName":
            suggest = "vpc_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneAccountVpcSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneAccountVpcSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneAccountVpcSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 uin: str,
                 uniq_vpc_id: str,
                 vpc_name: str):
        """
        :param str region: Region.
        :param str uin: UIN of the VPC account.
        :param str uniq_vpc_id: VPC ID.
        :param str vpc_name: VPC NAME.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def uin(self) -> str:
        """
        UIN of the VPC account.
        """
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        """
        VPC ID.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> str:
        """
        VPC NAME.
        """
        return pulumi.get(self, "vpc_name")


@pulumi.output_type
class ZoneTagSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneTagSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneTagSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneTagSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Key of Tag.
        :param str tag_value: Value of Tag.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Key of Tag.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Value of Tag.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class ZoneVpcAttachmentAccountVpcSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uniqVpcId":
            suggest = "uniq_vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneVpcAttachmentAccountVpcSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneVpcAttachmentAccountVpcSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneVpcAttachmentAccountVpcSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 uin: str,
                 uniq_vpc_id: str):
        """
        :param str region: Vpc region.
        :param str uin: Vpc owner uin. To grant role authorization to this account.
        :param str uniq_vpc_id: Uniq Vpc Id.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Vpc region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def uin(self) -> str:
        """
        Vpc owner uin. To grant role authorization to this account.
        """
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        """
        Uniq Vpc Id.
        """
        return pulumi.get(self, "uniq_vpc_id")


@pulumi.output_type
class ZoneVpcAttachmentVpcSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uniqVpcId":
            suggest = "uniq_vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneVpcAttachmentVpcSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneVpcAttachmentVpcSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneVpcAttachmentVpcSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 uniq_vpc_id: str):
        """
        :param str region: Vpc region.
        :param str uniq_vpc_id: Uniq Vpc Id.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Vpc region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        """
        Uniq Vpc Id.
        """
        return pulumi.get(self, "uniq_vpc_id")


@pulumi.output_type
class ZoneVpcSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uniqVpcId":
            suggest = "uniq_vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneVpcSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneVpcSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneVpcSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 uniq_vpc_id: str):
        """
        :param str region: VPC REGION.
        :param str uniq_vpc_id: VPC ID.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        VPC REGION.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        """
        VPC ID.
        """
        return pulumi.get(self, "uniq_vpc_id")


@pulumi.output_type
class GetEndPointsEndPointSetResult(dict):
    def __init__(__self__, *,
                 end_point_id: str,
                 end_point_name: str,
                 end_point_service_id: str,
                 end_point_vip_sets: Sequence[str],
                 region_code: str,
                 tags: Sequence['outputs.GetEndPointsEndPointSetTagResult']):
        """
        :param str end_point_id: Endpoint ID.
        :param str end_point_name: Endpoint name.
        :param str end_point_service_id: Endpoint service ID.
        :param Sequence[str] end_point_vip_sets: VIP list of the endpoint.
        :param str region_code: ap-guangzhou
               Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetEndPointsEndPointSetTagArgs'] tags: Tag key-value pair collection.
               Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "end_point_id", end_point_id)
        pulumi.set(__self__, "end_point_name", end_point_name)
        pulumi.set(__self__, "end_point_service_id", end_point_service_id)
        pulumi.set(__self__, "end_point_vip_sets", end_point_vip_sets)
        pulumi.set(__self__, "region_code", region_code)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="endPointId")
    def end_point_id(self) -> str:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "end_point_id")

    @property
    @pulumi.getter(name="endPointName")
    def end_point_name(self) -> str:
        """
        Endpoint name.
        """
        return pulumi.get(self, "end_point_name")

    @property
    @pulumi.getter(name="endPointServiceId")
    def end_point_service_id(self) -> str:
        """
        Endpoint service ID.
        """
        return pulumi.get(self, "end_point_service_id")

    @property
    @pulumi.getter(name="endPointVipSets")
    def end_point_vip_sets(self) -> Sequence[str]:
        """
        VIP list of the endpoint.
        """
        return pulumi.get(self, "end_point_vip_sets")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> str:
        """
        ap-guangzhou
        Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "region_code")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetEndPointsEndPointSetTagResult']:
        """
        Tag key-value pair collection.
        Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetEndPointsEndPointSetTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetEndPointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Parameter name.
        :param Sequence[str] values: Array of parameter values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Array of parameter values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetForwardRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Parameter name.
        :param Sequence[str] values: Array of parameter values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Array of parameter values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetForwardRulesForwardRuleSetResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 domain: str,
                 end_point_id: str,
                 end_point_name: str,
                 forward_addresses: Sequence[str],
                 rule_id: str,
                 rule_name: str,
                 rule_type: str,
                 tags: Sequence['outputs.GetForwardRulesForwardRuleSetTagResult'],
                 updated_at: str,
                 vpc_sets: Sequence['outputs.GetForwardRulesForwardRuleSetVpcSetResult'],
                 zone_id: str):
        """
        :param str created_at: Creation time.
        :param str domain: Private domain name.
        :param str end_point_id: Endpoint ID.
        :param str end_point_name: Endpoint name.
        :param Sequence[str] forward_addresses: Forwarding address.
        :param str rule_id: Rule ID.
        :param str rule_name: Forwarding rule name.
        :param str rule_type: Forwarding rule type. DOWN: From cloud to off-cloud; UP: From off-cloud to cloud.
        :param Sequence['GetForwardRulesForwardRuleSetTagArgs'] tags: Tag.
               Note: This field may return null, indicating that no valid values can be obtained.
        :param str updated_at: Update time.
        :param Sequence['GetForwardRulesForwardRuleSetVpcSetArgs'] vpc_sets: List of VPCs bound to the private domain.
               Note: This field may return null, indicating that no valid values can be obtained.
        :param str zone_id: ID of the bound private domain.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "end_point_id", end_point_id)
        pulumi.set(__self__, "end_point_name", end_point_name)
        pulumi.set(__self__, "forward_addresses", forward_addresses)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_sets", vpc_sets)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Private domain name.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="endPointId")
    def end_point_id(self) -> str:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "end_point_id")

    @property
    @pulumi.getter(name="endPointName")
    def end_point_name(self) -> str:
        """
        Endpoint name.
        """
        return pulumi.get(self, "end_point_name")

    @property
    @pulumi.getter(name="forwardAddresses")
    def forward_addresses(self) -> Sequence[str]:
        """
        Forwarding address.
        """
        return pulumi.get(self, "forward_addresses")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Forwarding rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Forwarding rule type. DOWN: From cloud to off-cloud; UP: From off-cloud to cloud.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetForwardRulesForwardRuleSetTagResult']:
        """
        Tag.
        Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vpcSets")
    def vpc_sets(self) -> Sequence['outputs.GetForwardRulesForwardRuleSetVpcSetResult']:
        """
        List of VPCs bound to the private domain.
        Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "vpc_sets")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        ID of the bound private domain.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetForwardRulesForwardRuleSetTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetForwardRulesForwardRuleSetVpcSetResult(dict):
    def __init__(__self__, *,
                 region: str,
                 uniq_vpc_id: str):
        """
        :param str region: VPC region: ap-guangzhou, ap-shanghai.
        :param str uniq_vpc_id: VpcId: vpc-xadsafsdasd.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        VPC region: ap-guangzhou, ap-shanghai.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        """
        VpcId: vpc-xadsafsdasd.
        """
        return pulumi.get(self, "uniq_vpc_id")


@pulumi.output_type
class GetPrivateZoneListFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: name.
        :param Sequence[str] values: values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPrivateZoneListPrivateZoneSetResult(dict):
    def __init__(__self__, *,
                 account_vpc_sets: Sequence['outputs.GetPrivateZoneListPrivateZoneSetAccountVpcSetResult'],
                 cname_speedup_status: str,
                 created_on: str,
                 deleted_vpc_sets: Sequence['outputs.GetPrivateZoneListPrivateZoneSetDeletedVpcSetResult'],
                 dns_forward_status: str,
                 domain: str,
                 end_point_name: str,
                 forward_address: str,
                 forward_rule_name: str,
                 forward_rule_type: str,
                 is_custom_tld: bool,
                 owner_uin: int,
                 record_count: int,
                 remark: str,
                 status: str,
                 tags: Sequence['outputs.GetPrivateZoneListPrivateZoneSetTagResult'],
                 updated_on: str,
                 vpc_sets: Sequence['outputs.GetPrivateZoneListPrivateZoneSetVpcSetResult'],
                 zone_id: str):
        """
        :param Sequence['GetPrivateZoneListPrivateZoneSetAccountVpcSetArgs'] account_vpc_sets: VPC list of bound associated accounts.
        :param str cname_speedup_status: CNAME acceleration status: enabled: ENABLED, off, DISABLED.
        :param str created_on: Create time.
        :param Sequence['GetPrivateZoneListPrivateZoneSetDeletedVpcSetArgs'] deleted_vpc_sets: List of deleted VPCs.
        :param str dns_forward_status: Domain name recursive resolution status: enabled: ENABLED, disabled, DISABLED.
        :param str domain: Domain.
        :param str end_point_name: End point name.
        :param str forward_address: Forwarded address.
        :param str forward_rule_name: Forwarding rule name.
        :param str forward_rule_type: Forwarding rule type: from cloud to cloud, DOWN; From cloud to cloud, UP, currently only supports DOWN.
        :param bool is_custom_tld: Custom TLD.
        :param int owner_uin: Owner Uin.
        :param int record_count: Record count.
        :param str remark: Remark.
        :param str status: Private domain bound VPC status, not associated with vpc: SUSPEND, associated with VPC: ENABLED, associated with VPC failed: FAILED.
        :param Sequence['GetPrivateZoneListPrivateZoneSetTagArgs'] tags: tags.
        :param str updated_on: Update time.
        :param Sequence['GetPrivateZoneListPrivateZoneSetVpcSetArgs'] vpc_sets: Vpc list.
        :param str zone_id: PrivateZone ID.
        """
        pulumi.set(__self__, "account_vpc_sets", account_vpc_sets)
        pulumi.set(__self__, "cname_speedup_status", cname_speedup_status)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "deleted_vpc_sets", deleted_vpc_sets)
        pulumi.set(__self__, "dns_forward_status", dns_forward_status)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "end_point_name", end_point_name)
        pulumi.set(__self__, "forward_address", forward_address)
        pulumi.set(__self__, "forward_rule_name", forward_rule_name)
        pulumi.set(__self__, "forward_rule_type", forward_rule_type)
        pulumi.set(__self__, "is_custom_tld", is_custom_tld)
        pulumi.set(__self__, "owner_uin", owner_uin)
        pulumi.set(__self__, "record_count", record_count)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_on", updated_on)
        pulumi.set(__self__, "vpc_sets", vpc_sets)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="accountVpcSets")
    def account_vpc_sets(self) -> Sequence['outputs.GetPrivateZoneListPrivateZoneSetAccountVpcSetResult']:
        """
        VPC list of bound associated accounts.
        """
        return pulumi.get(self, "account_vpc_sets")

    @property
    @pulumi.getter(name="cnameSpeedupStatus")
    def cname_speedup_status(self) -> str:
        """
        CNAME acceleration status: enabled: ENABLED, off, DISABLED.
        """
        return pulumi.get(self, "cname_speedup_status")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        Create time.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="deletedVpcSets")
    def deleted_vpc_sets(self) -> Sequence['outputs.GetPrivateZoneListPrivateZoneSetDeletedVpcSetResult']:
        """
        List of deleted VPCs.
        """
        return pulumi.get(self, "deleted_vpc_sets")

    @property
    @pulumi.getter(name="dnsForwardStatus")
    def dns_forward_status(self) -> str:
        """
        Domain name recursive resolution status: enabled: ENABLED, disabled, DISABLED.
        """
        return pulumi.get(self, "dns_forward_status")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="endPointName")
    def end_point_name(self) -> str:
        """
        End point name.
        """
        return pulumi.get(self, "end_point_name")

    @property
    @pulumi.getter(name="forwardAddress")
    def forward_address(self) -> str:
        """
        Forwarded address.
        """
        return pulumi.get(self, "forward_address")

    @property
    @pulumi.getter(name="forwardRuleName")
    def forward_rule_name(self) -> str:
        """
        Forwarding rule name.
        """
        return pulumi.get(self, "forward_rule_name")

    @property
    @pulumi.getter(name="forwardRuleType")
    def forward_rule_type(self) -> str:
        """
        Forwarding rule type: from cloud to cloud, DOWN; From cloud to cloud, UP, currently only supports DOWN.
        """
        return pulumi.get(self, "forward_rule_type")

    @property
    @pulumi.getter(name="isCustomTld")
    def is_custom_tld(self) -> bool:
        """
        Custom TLD.
        """
        return pulumi.get(self, "is_custom_tld")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> int:
        """
        Owner Uin.
        """
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="recordCount")
    def record_count(self) -> int:
        """
        Record count.
        """
        return pulumi.get(self, "record_count")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remark.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Private domain bound VPC status, not associated with vpc: SUSPEND, associated with VPC: ENABLED, associated with VPC failed: FAILED.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetPrivateZoneListPrivateZoneSetTagResult']:
        """
        tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> str:
        """
        Update time.
        """
        return pulumi.get(self, "updated_on")

    @property
    @pulumi.getter(name="vpcSets")
    def vpc_sets(self) -> Sequence['outputs.GetPrivateZoneListPrivateZoneSetVpcSetResult']:
        """
        Vpc list.
        """
        return pulumi.get(self, "vpc_sets")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        PrivateZone ID.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetPrivateZoneListPrivateZoneSetAccountVpcSetResult(dict):
    def __init__(__self__, *,
                 region: str,
                 uin: str,
                 uniq_vpc_id: str):
        """
        :param str region: Region.
        :param str uin: uin.
        :param str uniq_vpc_id: Vpc Id.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def uin(self) -> str:
        """
        uin.
        """
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        """
        Vpc Id.
        """
        return pulumi.get(self, "uniq_vpc_id")


@pulumi.output_type
class GetPrivateZoneListPrivateZoneSetDeletedVpcSetResult(dict):
    def __init__(__self__, *,
                 region: str,
                 uniq_vpc_id: str):
        """
        :param str region: Region.
        :param str uniq_vpc_id: Vpc Id.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        """
        Vpc Id.
        """
        return pulumi.get(self, "uniq_vpc_id")


@pulumi.output_type
class GetPrivateZoneListPrivateZoneSetTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetPrivateZoneListPrivateZoneSetVpcSetResult(dict):
    def __init__(__self__, *,
                 region: str,
                 uniq_vpc_id: str):
        """
        :param str region: Region.
        :param str uniq_vpc_id: Vpc Id.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        """
        Vpc Id.
        """
        return pulumi.get(self, "uniq_vpc_id")


@pulumi.output_type
class GetRecordsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Parameter name.
        :param Sequence[str] values: Parameter values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRecordsRecordSetResult(dict):
    def __init__(__self__, *,
                 created_on: str,
                 enabled: int,
                 extra: str,
                 mx: int,
                 record_id: str,
                 record_type: str,
                 record_value: str,
                 status: str,
                 sub_domain: str,
                 ttl: int,
                 updated_on: str,
                 weight: int,
                 zone_id: str):
        """
        :param str created_on: Record creation time.
        :param int enabled: Enabled. 0 meaning paused, 1 meaning senabled.
        :param str extra: Additional information.
        :param int mx: MX priority: required if the record type is MX. Value range: 5,10,15,20,30,40,50.
        :param str record_id: Record sid.
        :param str record_type: Record type, optional record type are: A, AAAA, CNAME, MX, TXT, PTR.
        :param str record_value: Record value.
        :param str status: Record status.
        :param str sub_domain: Subdomain name.
        :param int ttl: Record cache time, the smaller the value, the faster it takes effect. The value is 1-86400s. The default is 600.
        :param str updated_on: Record update time.
        :param int weight: Record weight, value is 1-100.
        :param str zone_id: Private zone id: zone-xxxxxx.
        """
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "extra", extra)
        pulumi.set(__self__, "mx", mx)
        pulumi.set(__self__, "record_id", record_id)
        pulumi.set(__self__, "record_type", record_type)
        pulumi.set(__self__, "record_value", record_value)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_domain", sub_domain)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "updated_on", updated_on)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        Record creation time.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> int:
        """
        Enabled. 0 meaning paused, 1 meaning senabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def extra(self) -> str:
        """
        Additional information.
        """
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def mx(self) -> int:
        """
        MX priority: required if the record type is MX. Value range: 5,10,15,20,30,40,50.
        """
        return pulumi.get(self, "mx")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> str:
        """
        Record sid.
        """
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> str:
        """
        Record type, optional record type are: A, AAAA, CNAME, MX, TXT, PTR.
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> str:
        """
        Record value.
        """
        return pulumi.get(self, "record_value")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Record status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> str:
        """
        Subdomain name.
        """
        return pulumi.get(self, "sub_domain")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        Record cache time, the smaller the value, the faster it takes effect. The value is 1-86400s. The default is 600.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> str:
        """
        Record update time.
        """
        return pulumi.get(self, "updated_on")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Record weight, value is 1-100.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        Private zone id: zone-xxxxxx.
        """
        return pulumi.get(self, "zone_id")


