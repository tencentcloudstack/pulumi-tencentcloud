# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NoticeContentArgs', 'NoticeContent']

@pulumi.input_type
class NoticeContentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 notice_contents: Optional[pulumi.Input['NoticeContentNoticeContentsArgs']] = None,
                 type: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a NoticeContent resource.
        :param pulumi.Input[str] name: Notice content name.
        :param pulumi.Input['NoticeContentNoticeContentsArgs'] notice_contents: Template detailed configuration.
        :param pulumi.Input[int] type: Template content language. 0: Chinese 1: English.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notice_contents is not None:
            pulumi.set(__self__, "notice_contents", notice_contents)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Notice content name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="noticeContents")
    def notice_contents(self) -> Optional[pulumi.Input['NoticeContentNoticeContentsArgs']]:
        """
        Template detailed configuration.
        """
        return pulumi.get(self, "notice_contents")

    @notice_contents.setter
    def notice_contents(self, value: Optional[pulumi.Input['NoticeContentNoticeContentsArgs']]):
        pulumi.set(self, "notice_contents", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[int]]:
        """
        Template content language. 0: Chinese 1: English.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _NoticeContentState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 notice_contents: Optional[pulumi.Input['NoticeContentNoticeContentsArgs']] = None,
                 type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering NoticeContent resources.
        :param pulumi.Input[str] name: Notice content name.
        :param pulumi.Input['NoticeContentNoticeContentsArgs'] notice_contents: Template detailed configuration.
        :param pulumi.Input[int] type: Template content language. 0: Chinese 1: English.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notice_contents is not None:
            pulumi.set(__self__, "notice_contents", notice_contents)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Notice content name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="noticeContents")
    def notice_contents(self) -> Optional[pulumi.Input['NoticeContentNoticeContentsArgs']]:
        """
        Template detailed configuration.
        """
        return pulumi.get(self, "notice_contents")

    @notice_contents.setter
    def notice_contents(self, value: Optional[pulumi.Input['NoticeContentNoticeContentsArgs']]):
        pulumi.set(self, "notice_contents", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[int]]:
        """
        Template content language. 0: Chinese 1: English.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type", value)


class NoticeContent(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notice_contents: Optional[pulumi.Input[pulumi.InputType['NoticeContentNoticeContentsArgs']]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls notice content

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cls.NoticeContent("example",
            notice_contents=tencentcloud.cls.NoticeContentNoticeContentsArgs(
                recovery_content=tencentcloud.cls.NoticeContentNoticeContentsRecoveryContentArgs(
                    content="This is content.",
                    headers=["Content-Type:application/json"],
                    title="title",
                ),
                trigger_content=tencentcloud.cls.NoticeContentNoticeContentsTriggerContentArgs(
                    content="This is content.",
                    headers=["Content-Type:application/json"],
                    title="title",
                ),
                type="Email",
            ),
            type=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls notice content can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/noticeContent:NoticeContent example noticetemplate-b417f32a-bdf9-46c5-933e-28c23cd7a6b7
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Notice content name.
        :param pulumi.Input[pulumi.InputType['NoticeContentNoticeContentsArgs']] notice_contents: Template detailed configuration.
        :param pulumi.Input[int] type: Template content language. 0: Chinese 1: English.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NoticeContentArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls notice content

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cls.NoticeContent("example",
            notice_contents=tencentcloud.cls.NoticeContentNoticeContentsArgs(
                recovery_content=tencentcloud.cls.NoticeContentNoticeContentsRecoveryContentArgs(
                    content="This is content.",
                    headers=["Content-Type:application/json"],
                    title="title",
                ),
                trigger_content=tencentcloud.cls.NoticeContentNoticeContentsTriggerContentArgs(
                    content="This is content.",
                    headers=["Content-Type:application/json"],
                    title="title",
                ),
                type="Email",
            ),
            type=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls notice content can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/noticeContent:NoticeContent example noticetemplate-b417f32a-bdf9-46c5-933e-28c23cd7a6b7
        ```

        :param str resource_name: The name of the resource.
        :param NoticeContentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NoticeContentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notice_contents: Optional[pulumi.Input[pulumi.InputType['NoticeContentNoticeContentsArgs']]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NoticeContentArgs.__new__(NoticeContentArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["notice_contents"] = notice_contents
            __props__.__dict__["type"] = type
        super(NoticeContent, __self__).__init__(
            'tencentcloud:Cls/noticeContent:NoticeContent',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            notice_contents: Optional[pulumi.Input[pulumi.InputType['NoticeContentNoticeContentsArgs']]] = None,
            type: Optional[pulumi.Input[int]] = None) -> 'NoticeContent':
        """
        Get an existing NoticeContent resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Notice content name.
        :param pulumi.Input[pulumi.InputType['NoticeContentNoticeContentsArgs']] notice_contents: Template detailed configuration.
        :param pulumi.Input[int] type: Template content language. 0: Chinese 1: English.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NoticeContentState.__new__(_NoticeContentState)

        __props__.__dict__["name"] = name
        __props__.__dict__["notice_contents"] = notice_contents
        __props__.__dict__["type"] = type
        return NoticeContent(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Notice content name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="noticeContents")
    def notice_contents(self) -> pulumi.Output[Optional['outputs.NoticeContentNoticeContents']]:
        """
        Template detailed configuration.
        """
        return pulumi.get(self, "notice_contents")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[int]]:
        """
        Template content language. 0: Chinese 1: English.
        """
        return pulumi.get(self, "type")

