# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TopicArgs', 'Topic']

@pulumi.input_type
class TopicArgs:
    def __init__(__self__, *,
                 logset_id: pulumi.Input[str],
                 topic_name: pulumi.Input[str],
                 auto_split: Optional[pulumi.Input[bool]] = None,
                 describes: Optional[pulumi.Input[str]] = None,
                 extends: Optional[pulumi.Input['TopicExtendsArgs']] = None,
                 hot_period: Optional[pulumi.Input[int]] = None,
                 is_web_tracking: Optional[pulumi.Input[bool]] = None,
                 max_split_partitions: Optional[pulumi.Input[int]] = None,
                 partition_count: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Topic resource.
        :param pulumi.Input[str] logset_id: Logset ID.
        :param pulumi.Input[str] topic_name: Log topic name.
        :param pulumi.Input[bool] auto_split: Whether to enable automatic split. Default value: true.
        :param pulumi.Input[str] describes: Log Topic Description.
        :param pulumi.Input['TopicExtendsArgs'] extends: Log Subject Extension Information.
        :param pulumi.Input[int] hot_period: 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
        :param pulumi.Input[bool] is_web_tracking: No authentication switch. False: closed; True: Enable. The default is false. After activation, anonymous access to the log topic will be supported for specified operations.
        :param pulumi.Input[int] max_split_partitions: Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
        :param pulumi.Input[int] partition_count: Number of log topic partitions. Default value: 1. Maximum value: 10.
        :param pulumi.Input[int] period: Lifecycle in days. Value range: 1~366. Default value: 30.
        :param pulumi.Input[str] storage_type: Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        pulumi.set(__self__, "logset_id", logset_id)
        pulumi.set(__self__, "topic_name", topic_name)
        if auto_split is not None:
            pulumi.set(__self__, "auto_split", auto_split)
        if describes is not None:
            pulumi.set(__self__, "describes", describes)
        if extends is not None:
            pulumi.set(__self__, "extends", extends)
        if hot_period is not None:
            pulumi.set(__self__, "hot_period", hot_period)
        if is_web_tracking is not None:
            pulumi.set(__self__, "is_web_tracking", is_web_tracking)
        if max_split_partitions is not None:
            pulumi.set(__self__, "max_split_partitions", max_split_partitions)
        if partition_count is not None:
            pulumi.set(__self__, "partition_count", partition_count)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> pulumi.Input[str]:
        """
        Logset ID.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "logset_id", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        Log topic name.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="autoSplit")
    def auto_split(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable automatic split. Default value: true.
        """
        return pulumi.get(self, "auto_split")

    @auto_split.setter
    def auto_split(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_split", value)

    @property
    @pulumi.getter
    def describes(self) -> Optional[pulumi.Input[str]]:
        """
        Log Topic Description.
        """
        return pulumi.get(self, "describes")

    @describes.setter
    def describes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "describes", value)

    @property
    @pulumi.getter
    def extends(self) -> Optional[pulumi.Input['TopicExtendsArgs']]:
        """
        Log Subject Extension Information.
        """
        return pulumi.get(self, "extends")

    @extends.setter
    def extends(self, value: Optional[pulumi.Input['TopicExtendsArgs']]):
        pulumi.set(self, "extends", value)

    @property
    @pulumi.getter(name="hotPeriod")
    def hot_period(self) -> Optional[pulumi.Input[int]]:
        """
        0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
        """
        return pulumi.get(self, "hot_period")

    @hot_period.setter
    def hot_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hot_period", value)

    @property
    @pulumi.getter(name="isWebTracking")
    def is_web_tracking(self) -> Optional[pulumi.Input[bool]]:
        """
        No authentication switch. False: closed; True: Enable. The default is false. After activation, anonymous access to the log topic will be supported for specified operations.
        """
        return pulumi.get(self, "is_web_tracking")

    @is_web_tracking.setter
    def is_web_tracking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_web_tracking", value)

    @property
    @pulumi.getter(name="maxSplitPartitions")
    def max_split_partitions(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
        """
        return pulumi.get(self, "max_split_partitions")

    @max_split_partitions.setter
    def max_split_partitions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_split_partitions", value)

    @property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of log topic partitions. Default value: 1. Maximum value: 10.
        """
        return pulumi.get(self, "partition_count")

    @partition_count.setter
    def partition_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_count", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Lifecycle in days. Value range: 1~366. Default value: 30.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _TopicState:
    def __init__(__self__, *,
                 auto_split: Optional[pulumi.Input[bool]] = None,
                 describes: Optional[pulumi.Input[str]] = None,
                 extends: Optional[pulumi.Input['TopicExtendsArgs']] = None,
                 hot_period: Optional[pulumi.Input[int]] = None,
                 is_web_tracking: Optional[pulumi.Input[bool]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 max_split_partitions: Optional[pulumi.Input[int]] = None,
                 partition_count: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Topic resources.
        :param pulumi.Input[bool] auto_split: Whether to enable automatic split. Default value: true.
        :param pulumi.Input[str] describes: Log Topic Description.
        :param pulumi.Input['TopicExtendsArgs'] extends: Log Subject Extension Information.
        :param pulumi.Input[int] hot_period: 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
        :param pulumi.Input[bool] is_web_tracking: No authentication switch. False: closed; True: Enable. The default is false. After activation, anonymous access to the log topic will be supported for specified operations.
        :param pulumi.Input[str] logset_id: Logset ID.
        :param pulumi.Input[int] max_split_partitions: Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
        :param pulumi.Input[int] partition_count: Number of log topic partitions. Default value: 1. Maximum value: 10.
        :param pulumi.Input[int] period: Lifecycle in days. Value range: 1~366. Default value: 30.
        :param pulumi.Input[str] storage_type: Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        :param pulumi.Input[str] topic_name: Log topic name.
        """
        if auto_split is not None:
            pulumi.set(__self__, "auto_split", auto_split)
        if describes is not None:
            pulumi.set(__self__, "describes", describes)
        if extends is not None:
            pulumi.set(__self__, "extends", extends)
        if hot_period is not None:
            pulumi.set(__self__, "hot_period", hot_period)
        if is_web_tracking is not None:
            pulumi.set(__self__, "is_web_tracking", is_web_tracking)
        if logset_id is not None:
            pulumi.set(__self__, "logset_id", logset_id)
        if max_split_partitions is not None:
            pulumi.set(__self__, "max_split_partitions", max_split_partitions)
        if partition_count is not None:
            pulumi.set(__self__, "partition_count", partition_count)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="autoSplit")
    def auto_split(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable automatic split. Default value: true.
        """
        return pulumi.get(self, "auto_split")

    @auto_split.setter
    def auto_split(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_split", value)

    @property
    @pulumi.getter
    def describes(self) -> Optional[pulumi.Input[str]]:
        """
        Log Topic Description.
        """
        return pulumi.get(self, "describes")

    @describes.setter
    def describes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "describes", value)

    @property
    @pulumi.getter
    def extends(self) -> Optional[pulumi.Input['TopicExtendsArgs']]:
        """
        Log Subject Extension Information.
        """
        return pulumi.get(self, "extends")

    @extends.setter
    def extends(self, value: Optional[pulumi.Input['TopicExtendsArgs']]):
        pulumi.set(self, "extends", value)

    @property
    @pulumi.getter(name="hotPeriod")
    def hot_period(self) -> Optional[pulumi.Input[int]]:
        """
        0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
        """
        return pulumi.get(self, "hot_period")

    @hot_period.setter
    def hot_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hot_period", value)

    @property
    @pulumi.getter(name="isWebTracking")
    def is_web_tracking(self) -> Optional[pulumi.Input[bool]]:
        """
        No authentication switch. False: closed; True: Enable. The default is false. After activation, anonymous access to the log topic will be supported for specified operations.
        """
        return pulumi.get(self, "is_web_tracking")

    @is_web_tracking.setter
    def is_web_tracking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_web_tracking", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        Logset ID.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_id", value)

    @property
    @pulumi.getter(name="maxSplitPartitions")
    def max_split_partitions(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
        """
        return pulumi.get(self, "max_split_partitions")

    @max_split_partitions.setter
    def max_split_partitions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_split_partitions", value)

    @property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of log topic partitions. Default value: 1. Maximum value: 10.
        """
        return pulumi.get(self, "partition_count")

    @partition_count.setter
    def partition_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_count", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Lifecycle in days. Value range: 1~366. Default value: 30.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic name.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


class Topic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_split: Optional[pulumi.Input[bool]] = None,
                 describes: Optional[pulumi.Input[str]] = None,
                 extends: Optional[pulumi.Input[pulumi.InputType['TopicExtendsArgs']]] = None,
                 hot_period: Optional[pulumi.Input[int]] = None,
                 is_web_tracking: Optional[pulumi.Input[bool]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 max_split_partitions: Optional[pulumi.Input[int]] = None,
                 partition_count: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls topic.

        ## Example Usage

        ### Create a standard cls topic

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_logset = tencentcloud.cls.Logset("exampleLogset",
            logset_name="tf_example",
            tags={
                "tagKey": "tagValue",
            })
        example_topic = tencentcloud.cls.Topic("exampleTopic",
            topic_name="tf_example",
            logset_id=example_logset.id,
            auto_split=False,
            max_split_partitions=20,
            partition_count=1,
            period=30,
            storage_type="hot",
            describes="Test Demo.",
            hot_period=10,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a cls topic with web tracking

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_logset = tencentcloud.cls.Logset("exampleLogset",
            logset_name="tf_example",
            tags={
                "tagKey": "tagValue",
            })
        example_topic = tencentcloud.cls.Topic("exampleTopic",
            topic_name="tf_example",
            logset_id=example_logset.id,
            auto_split=False,
            max_split_partitions=20,
            partition_count=1,
            period=30,
            storage_type="hot",
            describes="Test Demo.",
            hot_period=10,
            is_web_tracking=True,
            extends=tencentcloud.cls.TopicExtendsArgs(
                anonymous_access=tencentcloud.cls.TopicExtendsAnonymousAccessArgs(
                    operations=[
                        "trackLog",
                        "realtimeProducer",
                    ],
                    conditions=[tencentcloud.cls.TopicExtendsAnonymousAccessConditionArgs(
                        attributes="VpcID",
                        rule=1,
                        condition_value="vpc-ahr3xajx",
                    )],
                ),
            ),
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls topic can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/topic:Topic example 2f5764c1-c833-44c5-84c7-950979b2a278
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_split: Whether to enable automatic split. Default value: true.
        :param pulumi.Input[str] describes: Log Topic Description.
        :param pulumi.Input[pulumi.InputType['TopicExtendsArgs']] extends: Log Subject Extension Information.
        :param pulumi.Input[int] hot_period: 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
        :param pulumi.Input[bool] is_web_tracking: No authentication switch. False: closed; True: Enable. The default is false. After activation, anonymous access to the log topic will be supported for specified operations.
        :param pulumi.Input[str] logset_id: Logset ID.
        :param pulumi.Input[int] max_split_partitions: Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
        :param pulumi.Input[int] partition_count: Number of log topic partitions. Default value: 1. Maximum value: 10.
        :param pulumi.Input[int] period: Lifecycle in days. Value range: 1~366. Default value: 30.
        :param pulumi.Input[str] storage_type: Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        :param pulumi.Input[str] topic_name: Log topic name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls topic.

        ## Example Usage

        ### Create a standard cls topic

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_logset = tencentcloud.cls.Logset("exampleLogset",
            logset_name="tf_example",
            tags={
                "tagKey": "tagValue",
            })
        example_topic = tencentcloud.cls.Topic("exampleTopic",
            topic_name="tf_example",
            logset_id=example_logset.id,
            auto_split=False,
            max_split_partitions=20,
            partition_count=1,
            period=30,
            storage_type="hot",
            describes="Test Demo.",
            hot_period=10,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a cls topic with web tracking

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_logset = tencentcloud.cls.Logset("exampleLogset",
            logset_name="tf_example",
            tags={
                "tagKey": "tagValue",
            })
        example_topic = tencentcloud.cls.Topic("exampleTopic",
            topic_name="tf_example",
            logset_id=example_logset.id,
            auto_split=False,
            max_split_partitions=20,
            partition_count=1,
            period=30,
            storage_type="hot",
            describes="Test Demo.",
            hot_period=10,
            is_web_tracking=True,
            extends=tencentcloud.cls.TopicExtendsArgs(
                anonymous_access=tencentcloud.cls.TopicExtendsAnonymousAccessArgs(
                    operations=[
                        "trackLog",
                        "realtimeProducer",
                    ],
                    conditions=[tencentcloud.cls.TopicExtendsAnonymousAccessConditionArgs(
                        attributes="VpcID",
                        rule=1,
                        condition_value="vpc-ahr3xajx",
                    )],
                ),
            ),
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls topic can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/topic:Topic example 2f5764c1-c833-44c5-84c7-950979b2a278
        ```

        :param str resource_name: The name of the resource.
        :param TopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_split: Optional[pulumi.Input[bool]] = None,
                 describes: Optional[pulumi.Input[str]] = None,
                 extends: Optional[pulumi.Input[pulumi.InputType['TopicExtendsArgs']]] = None,
                 hot_period: Optional[pulumi.Input[int]] = None,
                 is_web_tracking: Optional[pulumi.Input[bool]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 max_split_partitions: Optional[pulumi.Input[int]] = None,
                 partition_count: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TopicArgs.__new__(TopicArgs)

            __props__.__dict__["auto_split"] = auto_split
            __props__.__dict__["describes"] = describes
            __props__.__dict__["extends"] = extends
            __props__.__dict__["hot_period"] = hot_period
            __props__.__dict__["is_web_tracking"] = is_web_tracking
            if logset_id is None and not opts.urn:
                raise TypeError("Missing required property 'logset_id'")
            __props__.__dict__["logset_id"] = logset_id
            __props__.__dict__["max_split_partitions"] = max_split_partitions
            __props__.__dict__["partition_count"] = partition_count
            __props__.__dict__["period"] = period
            __props__.__dict__["storage_type"] = storage_type
            __props__.__dict__["tags"] = tags
            if topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'topic_name'")
            __props__.__dict__["topic_name"] = topic_name
        super(Topic, __self__).__init__(
            'tencentcloud:Cls/topic:Topic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_split: Optional[pulumi.Input[bool]] = None,
            describes: Optional[pulumi.Input[str]] = None,
            extends: Optional[pulumi.Input[pulumi.InputType['TopicExtendsArgs']]] = None,
            hot_period: Optional[pulumi.Input[int]] = None,
            is_web_tracking: Optional[pulumi.Input[bool]] = None,
            logset_id: Optional[pulumi.Input[str]] = None,
            max_split_partitions: Optional[pulumi.Input[int]] = None,
            partition_count: Optional[pulumi.Input[int]] = None,
            period: Optional[pulumi.Input[int]] = None,
            storage_type: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            topic_name: Optional[pulumi.Input[str]] = None) -> 'Topic':
        """
        Get an existing Topic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_split: Whether to enable automatic split. Default value: true.
        :param pulumi.Input[str] describes: Log Topic Description.
        :param pulumi.Input[pulumi.InputType['TopicExtendsArgs']] extends: Log Subject Extension Information.
        :param pulumi.Input[int] hot_period: 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
        :param pulumi.Input[bool] is_web_tracking: No authentication switch. False: closed; True: Enable. The default is false. After activation, anonymous access to the log topic will be supported for specified operations.
        :param pulumi.Input[str] logset_id: Logset ID.
        :param pulumi.Input[int] max_split_partitions: Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
        :param pulumi.Input[int] partition_count: Number of log topic partitions. Default value: 1. Maximum value: 10.
        :param pulumi.Input[int] period: Lifecycle in days. Value range: 1~366. Default value: 30.
        :param pulumi.Input[str] storage_type: Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        :param pulumi.Input[str] topic_name: Log topic name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TopicState.__new__(_TopicState)

        __props__.__dict__["auto_split"] = auto_split
        __props__.__dict__["describes"] = describes
        __props__.__dict__["extends"] = extends
        __props__.__dict__["hot_period"] = hot_period
        __props__.__dict__["is_web_tracking"] = is_web_tracking
        __props__.__dict__["logset_id"] = logset_id
        __props__.__dict__["max_split_partitions"] = max_split_partitions
        __props__.__dict__["partition_count"] = partition_count
        __props__.__dict__["period"] = period
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["topic_name"] = topic_name
        return Topic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoSplit")
    def auto_split(self) -> pulumi.Output[bool]:
        """
        Whether to enable automatic split. Default value: true.
        """
        return pulumi.get(self, "auto_split")

    @property
    @pulumi.getter
    def describes(self) -> pulumi.Output[Optional[str]]:
        """
        Log Topic Description.
        """
        return pulumi.get(self, "describes")

    @property
    @pulumi.getter
    def extends(self) -> pulumi.Output[Optional['outputs.TopicExtends']]:
        """
        Log Subject Extension Information.
        """
        return pulumi.get(self, "extends")

    @property
    @pulumi.getter(name="hotPeriod")
    def hot_period(self) -> pulumi.Output[int]:
        """
        0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
        """
        return pulumi.get(self, "hot_period")

    @property
    @pulumi.getter(name="isWebTracking")
    def is_web_tracking(self) -> pulumi.Output[bool]:
        """
        No authentication switch. False: closed; True: Enable. The default is false. After activation, anonymous access to the log topic will be supported for specified operations.
        """
        return pulumi.get(self, "is_web_tracking")

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> pulumi.Output[str]:
        """
        Logset ID.
        """
        return pulumi.get(self, "logset_id")

    @property
    @pulumi.getter(name="maxSplitPartitions")
    def max_split_partitions(self) -> pulumi.Output[int]:
        """
        Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
        """
        return pulumi.get(self, "max_split_partitions")

    @property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> pulumi.Output[int]:
        """
        Number of log topic partitions. Default value: 1. Maximum value: 10.
        """
        return pulumi.get(self, "partition_count")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[int]:
        """
        Lifecycle in days. Value range: 1~366. Default value: 30.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[str]:
        """
        Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[str]:
        """
        Log topic name.
        """
        return pulumi.get(self, "topic_name")

