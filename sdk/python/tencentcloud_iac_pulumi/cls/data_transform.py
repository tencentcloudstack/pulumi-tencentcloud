# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DataTransformArgs', 'DataTransform']

@pulumi.input_type
class DataTransformArgs:
    def __init__(__self__, *,
                 etl_content: pulumi.Input[str],
                 func_type: pulumi.Input[int],
                 src_topic_id: pulumi.Input[str],
                 task_type: pulumi.Input[int],
                 dst_resources: Optional[pulumi.Input[Sequence[pulumi.Input['DataTransformDstResourceArgs']]]] = None,
                 enable_flag: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DataTransform resource.
        :param pulumi.Input[str] etl_content: Data transform content. If `func_type` is `2`, must use `log_auto_output`.
        :param pulumi.Input[int] func_type: Task type. `1`: Specify the theme; `2`: Dynamic creation.
        :param pulumi.Input[str] src_topic_id: Source topic ID.
        :param pulumi.Input[int] task_type: Task type. `1`: Use random data from the source log theme for processing preview; `2`: Use user-defined test data for processing preview; `3`: Create real machining tasks.
        :param pulumi.Input[Sequence[pulumi.Input['DataTransformDstResourceArgs']]] dst_resources: Data transform des resources. If `func_type` is `1`, this parameter is required. If `func_type` is `2`, this parameter does not need to be filled in.
        :param pulumi.Input[int] enable_flag: Task enable flag. `1`: enable, `2`: disable, Default is `1`.
        :param pulumi.Input[str] name: Task name.
        """
        pulumi.set(__self__, "etl_content", etl_content)
        pulumi.set(__self__, "func_type", func_type)
        pulumi.set(__self__, "src_topic_id", src_topic_id)
        pulumi.set(__self__, "task_type", task_type)
        if dst_resources is not None:
            pulumi.set(__self__, "dst_resources", dst_resources)
        if enable_flag is not None:
            pulumi.set(__self__, "enable_flag", enable_flag)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="etlContent")
    def etl_content(self) -> pulumi.Input[str]:
        """
        Data transform content. If `func_type` is `2`, must use `log_auto_output`.
        """
        return pulumi.get(self, "etl_content")

    @etl_content.setter
    def etl_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "etl_content", value)

    @property
    @pulumi.getter(name="funcType")
    def func_type(self) -> pulumi.Input[int]:
        """
        Task type. `1`: Specify the theme; `2`: Dynamic creation.
        """
        return pulumi.get(self, "func_type")

    @func_type.setter
    def func_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "func_type", value)

    @property
    @pulumi.getter(name="srcTopicId")
    def src_topic_id(self) -> pulumi.Input[str]:
        """
        Source topic ID.
        """
        return pulumi.get(self, "src_topic_id")

    @src_topic_id.setter
    def src_topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_topic_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[int]:
        """
        Task type. `1`: Use random data from the source log theme for processing preview; `2`: Use user-defined test data for processing preview; `3`: Create real machining tasks.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="dstResources")
    def dst_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataTransformDstResourceArgs']]]]:
        """
        Data transform des resources. If `func_type` is `1`, this parameter is required. If `func_type` is `2`, this parameter does not need to be filled in.
        """
        return pulumi.get(self, "dst_resources")

    @dst_resources.setter
    def dst_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataTransformDstResourceArgs']]]]):
        pulumi.set(self, "dst_resources", value)

    @property
    @pulumi.getter(name="enableFlag")
    def enable_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Task enable flag. `1`: enable, `2`: disable, Default is `1`.
        """
        return pulumi.get(self, "enable_flag")

    @enable_flag.setter
    def enable_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_flag", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Task name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DataTransformState:
    def __init__(__self__, *,
                 dst_resources: Optional[pulumi.Input[Sequence[pulumi.Input['DataTransformDstResourceArgs']]]] = None,
                 enable_flag: Optional[pulumi.Input[int]] = None,
                 etl_content: Optional[pulumi.Input[str]] = None,
                 func_type: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 src_topic_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DataTransform resources.
        :param pulumi.Input[Sequence[pulumi.Input['DataTransformDstResourceArgs']]] dst_resources: Data transform des resources. If `func_type` is `1`, this parameter is required. If `func_type` is `2`, this parameter does not need to be filled in.
        :param pulumi.Input[int] enable_flag: Task enable flag. `1`: enable, `2`: disable, Default is `1`.
        :param pulumi.Input[str] etl_content: Data transform content. If `func_type` is `2`, must use `log_auto_output`.
        :param pulumi.Input[int] func_type: Task type. `1`: Specify the theme; `2`: Dynamic creation.
        :param pulumi.Input[str] name: Task name.
        :param pulumi.Input[str] src_topic_id: Source topic ID.
        :param pulumi.Input[int] task_type: Task type. `1`: Use random data from the source log theme for processing preview; `2`: Use user-defined test data for processing preview; `3`: Create real machining tasks.
        """
        if dst_resources is not None:
            pulumi.set(__self__, "dst_resources", dst_resources)
        if enable_flag is not None:
            pulumi.set(__self__, "enable_flag", enable_flag)
        if etl_content is not None:
            pulumi.set(__self__, "etl_content", etl_content)
        if func_type is not None:
            pulumi.set(__self__, "func_type", func_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if src_topic_id is not None:
            pulumi.set(__self__, "src_topic_id", src_topic_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="dstResources")
    def dst_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataTransformDstResourceArgs']]]]:
        """
        Data transform des resources. If `func_type` is `1`, this parameter is required. If `func_type` is `2`, this parameter does not need to be filled in.
        """
        return pulumi.get(self, "dst_resources")

    @dst_resources.setter
    def dst_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataTransformDstResourceArgs']]]]):
        pulumi.set(self, "dst_resources", value)

    @property
    @pulumi.getter(name="enableFlag")
    def enable_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Task enable flag. `1`: enable, `2`: disable, Default is `1`.
        """
        return pulumi.get(self, "enable_flag")

    @enable_flag.setter
    def enable_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_flag", value)

    @property
    @pulumi.getter(name="etlContent")
    def etl_content(self) -> Optional[pulumi.Input[str]]:
        """
        Data transform content. If `func_type` is `2`, must use `log_auto_output`.
        """
        return pulumi.get(self, "etl_content")

    @etl_content.setter
    def etl_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etl_content", value)

    @property
    @pulumi.getter(name="funcType")
    def func_type(self) -> Optional[pulumi.Input[int]]:
        """
        Task type. `1`: Specify the theme; `2`: Dynamic creation.
        """
        return pulumi.get(self, "func_type")

    @func_type.setter
    def func_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "func_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Task name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="srcTopicId")
    def src_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Source topic ID.
        """
        return pulumi.get(self, "src_topic_id")

    @src_topic_id.setter
    def src_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_topic_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[int]]:
        """
        Task type. `1`: Use random data from the source log theme for processing preview; `2`: Use user-defined test data for processing preview; `3`: Create real machining tasks.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_type", value)


class DataTransform(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dst_resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataTransformDstResourceArgs']]]]] = None,
                 enable_flag: Optional[pulumi.Input[int]] = None,
                 etl_content: Optional[pulumi.Input[str]] = None,
                 func_type: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 src_topic_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a CLS data transform

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        logset_src = tencentcloud.cls.Logset("logsetSrc",
            logset_name="tf-example-src",
            tags={
                "createdBy": "terraform",
            })
        topic_src = tencentcloud.cls.Topic("topicSrc",
            topic_name="tf-example_src",
            logset_id=logset_src.id,
            auto_split=False,
            max_split_partitions=20,
            partition_count=1,
            period=10,
            storage_type="hot",
            tags={
                "createdBy": "terraform",
            })
        logset_dst = tencentcloud.cls.Logset("logsetDst",
            logset_name="tf-example-dst",
            tags={
                "createdBy": "terraform",
            })
        topic_dst = tencentcloud.cls.Topic("topicDst",
            topic_name="tf-example-dst",
            logset_id=logset_dst.id,
            auto_split=False,
            max_split_partitions=20,
            partition_count=1,
            period=10,
            storage_type="hot",
            tags={
                "createdBy": "terraform",
            })
        example = tencentcloud.cls.DataTransform("example",
            func_type=1,
            src_topic_id=topic_src.id,
            etl_content="ext_sep(\\"content\\", \\"f1, f2, f3\\", sep=\\",\\", quote=\\"\\", restrict=False, mode=\\"overwrite\\")fields_drop(\\"content\\")",
            task_type=3,
            enable_flag=1,
            dst_resources=[tencentcloud.cls.DataTransformDstResourceArgs(
                topic_id=topic_dst.id,
                alias="iac-test-dst",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLS data transform can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/dataTransform:DataTransform example 7b4bcb05-9154-4cdc-a479-f6b5743846e5
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataTransformDstResourceArgs']]]] dst_resources: Data transform des resources. If `func_type` is `1`, this parameter is required. If `func_type` is `2`, this parameter does not need to be filled in.
        :param pulumi.Input[int] enable_flag: Task enable flag. `1`: enable, `2`: disable, Default is `1`.
        :param pulumi.Input[str] etl_content: Data transform content. If `func_type` is `2`, must use `log_auto_output`.
        :param pulumi.Input[int] func_type: Task type. `1`: Specify the theme; `2`: Dynamic creation.
        :param pulumi.Input[str] name: Task name.
        :param pulumi.Input[str] src_topic_id: Source topic ID.
        :param pulumi.Input[int] task_type: Task type. `1`: Use random data from the source log theme for processing preview; `2`: Use user-defined test data for processing preview; `3`: Create real machining tasks.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataTransformArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a CLS data transform

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        logset_src = tencentcloud.cls.Logset("logsetSrc",
            logset_name="tf-example-src",
            tags={
                "createdBy": "terraform",
            })
        topic_src = tencentcloud.cls.Topic("topicSrc",
            topic_name="tf-example_src",
            logset_id=logset_src.id,
            auto_split=False,
            max_split_partitions=20,
            partition_count=1,
            period=10,
            storage_type="hot",
            tags={
                "createdBy": "terraform",
            })
        logset_dst = tencentcloud.cls.Logset("logsetDst",
            logset_name="tf-example-dst",
            tags={
                "createdBy": "terraform",
            })
        topic_dst = tencentcloud.cls.Topic("topicDst",
            topic_name="tf-example-dst",
            logset_id=logset_dst.id,
            auto_split=False,
            max_split_partitions=20,
            partition_count=1,
            period=10,
            storage_type="hot",
            tags={
                "createdBy": "terraform",
            })
        example = tencentcloud.cls.DataTransform("example",
            func_type=1,
            src_topic_id=topic_src.id,
            etl_content="ext_sep(\\"content\\", \\"f1, f2, f3\\", sep=\\",\\", quote=\\"\\", restrict=False, mode=\\"overwrite\\")fields_drop(\\"content\\")",
            task_type=3,
            enable_flag=1,
            dst_resources=[tencentcloud.cls.DataTransformDstResourceArgs(
                topic_id=topic_dst.id,
                alias="iac-test-dst",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLS data transform can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/dataTransform:DataTransform example 7b4bcb05-9154-4cdc-a479-f6b5743846e5
        ```

        :param str resource_name: The name of the resource.
        :param DataTransformArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataTransformArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dst_resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataTransformDstResourceArgs']]]]] = None,
                 enable_flag: Optional[pulumi.Input[int]] = None,
                 etl_content: Optional[pulumi.Input[str]] = None,
                 func_type: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 src_topic_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataTransformArgs.__new__(DataTransformArgs)

            __props__.__dict__["dst_resources"] = dst_resources
            __props__.__dict__["enable_flag"] = enable_flag
            if etl_content is None and not opts.urn:
                raise TypeError("Missing required property 'etl_content'")
            __props__.__dict__["etl_content"] = etl_content
            if func_type is None and not opts.urn:
                raise TypeError("Missing required property 'func_type'")
            __props__.__dict__["func_type"] = func_type
            __props__.__dict__["name"] = name
            if src_topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'src_topic_id'")
            __props__.__dict__["src_topic_id"] = src_topic_id
            if task_type is None and not opts.urn:
                raise TypeError("Missing required property 'task_type'")
            __props__.__dict__["task_type"] = task_type
        super(DataTransform, __self__).__init__(
            'tencentcloud:Cls/dataTransform:DataTransform',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dst_resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataTransformDstResourceArgs']]]]] = None,
            enable_flag: Optional[pulumi.Input[int]] = None,
            etl_content: Optional[pulumi.Input[str]] = None,
            func_type: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            src_topic_id: Optional[pulumi.Input[str]] = None,
            task_type: Optional[pulumi.Input[int]] = None) -> 'DataTransform':
        """
        Get an existing DataTransform resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataTransformDstResourceArgs']]]] dst_resources: Data transform des resources. If `func_type` is `1`, this parameter is required. If `func_type` is `2`, this parameter does not need to be filled in.
        :param pulumi.Input[int] enable_flag: Task enable flag. `1`: enable, `2`: disable, Default is `1`.
        :param pulumi.Input[str] etl_content: Data transform content. If `func_type` is `2`, must use `log_auto_output`.
        :param pulumi.Input[int] func_type: Task type. `1`: Specify the theme; `2`: Dynamic creation.
        :param pulumi.Input[str] name: Task name.
        :param pulumi.Input[str] src_topic_id: Source topic ID.
        :param pulumi.Input[int] task_type: Task type. `1`: Use random data from the source log theme for processing preview; `2`: Use user-defined test data for processing preview; `3`: Create real machining tasks.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataTransformState.__new__(_DataTransformState)

        __props__.__dict__["dst_resources"] = dst_resources
        __props__.__dict__["enable_flag"] = enable_flag
        __props__.__dict__["etl_content"] = etl_content
        __props__.__dict__["func_type"] = func_type
        __props__.__dict__["name"] = name
        __props__.__dict__["src_topic_id"] = src_topic_id
        __props__.__dict__["task_type"] = task_type
        return DataTransform(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dstResources")
    def dst_resources(self) -> pulumi.Output[Optional[Sequence['outputs.DataTransformDstResource']]]:
        """
        Data transform des resources. If `func_type` is `1`, this parameter is required. If `func_type` is `2`, this parameter does not need to be filled in.
        """
        return pulumi.get(self, "dst_resources")

    @property
    @pulumi.getter(name="enableFlag")
    def enable_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Task enable flag. `1`: enable, `2`: disable, Default is `1`.
        """
        return pulumi.get(self, "enable_flag")

    @property
    @pulumi.getter(name="etlContent")
    def etl_content(self) -> pulumi.Output[str]:
        """
        Data transform content. If `func_type` is `2`, must use `log_auto_output`.
        """
        return pulumi.get(self, "etl_content")

    @property
    @pulumi.getter(name="funcType")
    def func_type(self) -> pulumi.Output[int]:
        """
        Task type. `1`: Specify the theme; `2`: Dynamic creation.
        """
        return pulumi.get(self, "func_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Task name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="srcTopicId")
    def src_topic_id(self) -> pulumi.Output[str]:
        """
        Source topic ID.
        """
        return pulumi.get(self, "src_topic_id")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Output[int]:
        """
        Task type. `1`: Use random data from the source log theme for processing preview; `2`: Use user-defined test data for processing preview; `3`: Create real machining tasks.
        """
        return pulumi.get(self, "task_type")

