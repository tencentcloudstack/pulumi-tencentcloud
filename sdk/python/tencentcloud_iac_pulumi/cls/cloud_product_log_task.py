# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CloudProductLogTaskArgs', 'CloudProductLogTask']

@pulumi.input_type
class CloudProductLogTaskArgs:
    def __init__(__self__, *,
                 assumer_name: pulumi.Input[str],
                 cloud_product_region: pulumi.Input[str],
                 cls_region: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 log_type: pulumi.Input[str],
                 extend: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CloudProductLogTask resource.
        :param pulumi.Input[str] assumer_name: Cloud product identification, Values: CDS, CWP, CDB, TDSQL-C, MongoDB, TDStore, DCDB, MariaDB, PostgreSQL, BH, APIS.
        :param pulumi.Input[str] cloud_product_region: Cloud product region. There are differences in the input format of different log types in different regions. Please refer to the following example:
               - CDS(all log type): ap-guangzhou
               - CDB-AUDIT: gz
               - TDSQL-C-AUDIT: gz
               - MongoDB-AUDIT: gz
               - MongoDB-SlowLog: ap-guangzhou
               - MongoDB-ErrorLog: ap-guangzhou
               - TDMYSQL-SLOW: gz
               - DCDB(all log type): gz
               - MariaDB(all log type): gz
               - PostgreSQL(all log type): gz
               - BH(all log type): overseas-polaris(Domestic sites overseas)/fsi-polaris(Domestic sites finance)/general-polaris(Domestic sites)/intl-sg-prod(International sites)
               - APIS(all log type): gz.
        :param pulumi.Input[str] cls_region: CLS target region.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] log_type: Log type, Values: CDS-AUDIT, CDS-RISK, CDB-AUDIT, TDSQL-C-AUDIT, MongoDB-AUDIT, MongoDB-SlowLog, MongoDB-ErrorLog, TDMYSQL-SLOW, DCDB-AUDIT, DCDB-SLOW, DCDB-ERROR, MariaDB-AUDIT, MariaDB-SLOW, MariaDB-ERROR, PostgreSQL-SLOW, PostgreSQL-ERROR, PostgreSQL-AUDIT, BH-FILELOG, BH-COMMANDLOG, APIS-ACCESS.
        :param pulumi.Input[str] extend: Log configuration extension information, generally used to store additional log delivery configurations.
        :param pulumi.Input[str] logset_name: Log set name, it will be automatically created.
        :param pulumi.Input[str] topic_name: The name of the log topic, it will be automatically created.
        """
        pulumi.set(__self__, "assumer_name", assumer_name)
        pulumi.set(__self__, "cloud_product_region", cloud_product_region)
        pulumi.set(__self__, "cls_region", cls_region)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "log_type", log_type)
        if extend is not None:
            pulumi.set(__self__, "extend", extend)
        if logset_name is not None:
            pulumi.set(__self__, "logset_name", logset_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="assumerName")
    def assumer_name(self) -> pulumi.Input[str]:
        """
        Cloud product identification, Values: CDS, CWP, CDB, TDSQL-C, MongoDB, TDStore, DCDB, MariaDB, PostgreSQL, BH, APIS.
        """
        return pulumi.get(self, "assumer_name")

    @assumer_name.setter
    def assumer_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "assumer_name", value)

    @property
    @pulumi.getter(name="cloudProductRegion")
    def cloud_product_region(self) -> pulumi.Input[str]:
        """
        Cloud product region. There are differences in the input format of different log types in different regions. Please refer to the following example:
        - CDS(all log type): ap-guangzhou
        - CDB-AUDIT: gz
        - TDSQL-C-AUDIT: gz
        - MongoDB-AUDIT: gz
        - MongoDB-SlowLog: ap-guangzhou
        - MongoDB-ErrorLog: ap-guangzhou
        - TDMYSQL-SLOW: gz
        - DCDB(all log type): gz
        - MariaDB(all log type): gz
        - PostgreSQL(all log type): gz
        - BH(all log type): overseas-polaris(Domestic sites overseas)/fsi-polaris(Domestic sites finance)/general-polaris(Domestic sites)/intl-sg-prod(International sites)
        - APIS(all log type): gz.
        """
        return pulumi.get(self, "cloud_product_region")

    @cloud_product_region.setter
    def cloud_product_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_product_region", value)

    @property
    @pulumi.getter(name="clsRegion")
    def cls_region(self) -> pulumi.Input[str]:
        """
        CLS target region.
        """
        return pulumi.get(self, "cls_region")

    @cls_region.setter
    def cls_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "cls_region", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        """
        Log type, Values: CDS-AUDIT, CDS-RISK, CDB-AUDIT, TDSQL-C-AUDIT, MongoDB-AUDIT, MongoDB-SlowLog, MongoDB-ErrorLog, TDMYSQL-SLOW, DCDB-AUDIT, DCDB-SLOW, DCDB-ERROR, MariaDB-AUDIT, MariaDB-SLOW, MariaDB-ERROR, PostgreSQL-SLOW, PostgreSQL-ERROR, PostgreSQL-AUDIT, BH-FILELOG, BH-COMMANDLOG, APIS-ACCESS.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def extend(self) -> Optional[pulumi.Input[str]]:
        """
        Log configuration extension information, generally used to store additional log delivery configurations.
        """
        return pulumi.get(self, "extend")

    @extend.setter
    def extend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extend", value)

    @property
    @pulumi.getter(name="logsetName")
    def logset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Log set name, it will be automatically created.
        """
        return pulumi.get(self, "logset_name")

    @logset_name.setter
    def logset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the log topic, it will be automatically created.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class _CloudProductLogTaskState:
    def __init__(__self__, *,
                 assumer_name: Optional[pulumi.Input[str]] = None,
                 cloud_product_region: Optional[pulumi.Input[str]] = None,
                 cls_region: Optional[pulumi.Input[str]] = None,
                 extend: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CloudProductLogTask resources.
        :param pulumi.Input[str] assumer_name: Cloud product identification, Values: CDS, CWP, CDB, TDSQL-C, MongoDB, TDStore, DCDB, MariaDB, PostgreSQL, BH, APIS.
        :param pulumi.Input[str] cloud_product_region: Cloud product region. There are differences in the input format of different log types in different regions. Please refer to the following example:
               - CDS(all log type): ap-guangzhou
               - CDB-AUDIT: gz
               - TDSQL-C-AUDIT: gz
               - MongoDB-AUDIT: gz
               - MongoDB-SlowLog: ap-guangzhou
               - MongoDB-ErrorLog: ap-guangzhou
               - TDMYSQL-SLOW: gz
               - DCDB(all log type): gz
               - MariaDB(all log type): gz
               - PostgreSQL(all log type): gz
               - BH(all log type): overseas-polaris(Domestic sites overseas)/fsi-polaris(Domestic sites finance)/general-polaris(Domestic sites)/intl-sg-prod(International sites)
               - APIS(all log type): gz.
        :param pulumi.Input[str] cls_region: CLS target region.
        :param pulumi.Input[str] extend: Log configuration extension information, generally used to store additional log delivery configurations.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] log_type: Log type, Values: CDS-AUDIT, CDS-RISK, CDB-AUDIT, TDSQL-C-AUDIT, MongoDB-AUDIT, MongoDB-SlowLog, MongoDB-ErrorLog, TDMYSQL-SLOW, DCDB-AUDIT, DCDB-SLOW, DCDB-ERROR, MariaDB-AUDIT, MariaDB-SLOW, MariaDB-ERROR, PostgreSQL-SLOW, PostgreSQL-ERROR, PostgreSQL-AUDIT, BH-FILELOG, BH-COMMANDLOG, APIS-ACCESS.
        :param pulumi.Input[str] logset_id: Log set ID.
        :param pulumi.Input[str] logset_name: Log set name, it will be automatically created.
        :param pulumi.Input[str] topic_id: Log theme ID.
        :param pulumi.Input[str] topic_name: The name of the log topic, it will be automatically created.
        """
        if assumer_name is not None:
            pulumi.set(__self__, "assumer_name", assumer_name)
        if cloud_product_region is not None:
            pulumi.set(__self__, "cloud_product_region", cloud_product_region)
        if cls_region is not None:
            pulumi.set(__self__, "cls_region", cls_region)
        if extend is not None:
            pulumi.set(__self__, "extend", extend)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if logset_id is not None:
            pulumi.set(__self__, "logset_id", logset_id)
        if logset_name is not None:
            pulumi.set(__self__, "logset_name", logset_name)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="assumerName")
    def assumer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud product identification, Values: CDS, CWP, CDB, TDSQL-C, MongoDB, TDStore, DCDB, MariaDB, PostgreSQL, BH, APIS.
        """
        return pulumi.get(self, "assumer_name")

    @assumer_name.setter
    def assumer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assumer_name", value)

    @property
    @pulumi.getter(name="cloudProductRegion")
    def cloud_product_region(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud product region. There are differences in the input format of different log types in different regions. Please refer to the following example:
        - CDS(all log type): ap-guangzhou
        - CDB-AUDIT: gz
        - TDSQL-C-AUDIT: gz
        - MongoDB-AUDIT: gz
        - MongoDB-SlowLog: ap-guangzhou
        - MongoDB-ErrorLog: ap-guangzhou
        - TDMYSQL-SLOW: gz
        - DCDB(all log type): gz
        - MariaDB(all log type): gz
        - PostgreSQL(all log type): gz
        - BH(all log type): overseas-polaris(Domestic sites overseas)/fsi-polaris(Domestic sites finance)/general-polaris(Domestic sites)/intl-sg-prod(International sites)
        - APIS(all log type): gz.
        """
        return pulumi.get(self, "cloud_product_region")

    @cloud_product_region.setter
    def cloud_product_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_product_region", value)

    @property
    @pulumi.getter(name="clsRegion")
    def cls_region(self) -> Optional[pulumi.Input[str]]:
        """
        CLS target region.
        """
        return pulumi.get(self, "cls_region")

    @cls_region.setter
    def cls_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_region", value)

    @property
    @pulumi.getter
    def extend(self) -> Optional[pulumi.Input[str]]:
        """
        Log configuration extension information, generally used to store additional log delivery configurations.
        """
        return pulumi.get(self, "extend")

    @extend.setter
    def extend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extend", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        Log type, Values: CDS-AUDIT, CDS-RISK, CDB-AUDIT, TDSQL-C-AUDIT, MongoDB-AUDIT, MongoDB-SlowLog, MongoDB-ErrorLog, TDMYSQL-SLOW, DCDB-AUDIT, DCDB-SLOW, DCDB-ERROR, MariaDB-AUDIT, MariaDB-SLOW, MariaDB-ERROR, PostgreSQL-SLOW, PostgreSQL-ERROR, PostgreSQL-AUDIT, BH-FILELOG, BH-COMMANDLOG, APIS-ACCESS.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        Log set ID.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_id", value)

    @property
    @pulumi.getter(name="logsetName")
    def logset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Log set name, it will be automatically created.
        """
        return pulumi.get(self, "logset_name")

    @logset_name.setter
    def logset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_name", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Log theme ID.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the log topic, it will be automatically created.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


class CloudProductLogTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assumer_name: Optional[pulumi.Input[str]] = None,
                 cloud_product_region: Optional[pulumi.Input[str]] = None,
                 cls_region: Optional[pulumi.Input[str]] = None,
                 extend: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls cloud product log task

        > **NOTE:** Using this resource will create new `logset` and `topic`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cls.CloudProductLogTask("example",
            assumer_name="PostgreSQL",
            cloud_product_region="gz",
            cls_region="ap-guangzhou",
            instance_id="postgres-1p7xvpc1",
            log_type="PostgreSQL-SLOW",
            logset_name="tf-example",
            topic_name="tf-example")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls cloud product log task can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/cloudProductLogTask:CloudProductLogTask example postgres-1p7xvpc1#PostgreSQL#PostgreSQL-SLOW#gz
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assumer_name: Cloud product identification, Values: CDS, CWP, CDB, TDSQL-C, MongoDB, TDStore, DCDB, MariaDB, PostgreSQL, BH, APIS.
        :param pulumi.Input[str] cloud_product_region: Cloud product region. There are differences in the input format of different log types in different regions. Please refer to the following example:
               - CDS(all log type): ap-guangzhou
               - CDB-AUDIT: gz
               - TDSQL-C-AUDIT: gz
               - MongoDB-AUDIT: gz
               - MongoDB-SlowLog: ap-guangzhou
               - MongoDB-ErrorLog: ap-guangzhou
               - TDMYSQL-SLOW: gz
               - DCDB(all log type): gz
               - MariaDB(all log type): gz
               - PostgreSQL(all log type): gz
               - BH(all log type): overseas-polaris(Domestic sites overseas)/fsi-polaris(Domestic sites finance)/general-polaris(Domestic sites)/intl-sg-prod(International sites)
               - APIS(all log type): gz.
        :param pulumi.Input[str] cls_region: CLS target region.
        :param pulumi.Input[str] extend: Log configuration extension information, generally used to store additional log delivery configurations.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] log_type: Log type, Values: CDS-AUDIT, CDS-RISK, CDB-AUDIT, TDSQL-C-AUDIT, MongoDB-AUDIT, MongoDB-SlowLog, MongoDB-ErrorLog, TDMYSQL-SLOW, DCDB-AUDIT, DCDB-SLOW, DCDB-ERROR, MariaDB-AUDIT, MariaDB-SLOW, MariaDB-ERROR, PostgreSQL-SLOW, PostgreSQL-ERROR, PostgreSQL-AUDIT, BH-FILELOG, BH-COMMANDLOG, APIS-ACCESS.
        :param pulumi.Input[str] logset_name: Log set name, it will be automatically created.
        :param pulumi.Input[str] topic_name: The name of the log topic, it will be automatically created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudProductLogTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls cloud product log task

        > **NOTE:** Using this resource will create new `logset` and `topic`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cls.CloudProductLogTask("example",
            assumer_name="PostgreSQL",
            cloud_product_region="gz",
            cls_region="ap-guangzhou",
            instance_id="postgres-1p7xvpc1",
            log_type="PostgreSQL-SLOW",
            logset_name="tf-example",
            topic_name="tf-example")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls cloud product log task can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/cloudProductLogTask:CloudProductLogTask example postgres-1p7xvpc1#PostgreSQL#PostgreSQL-SLOW#gz
        ```

        :param str resource_name: The name of the resource.
        :param CloudProductLogTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudProductLogTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assumer_name: Optional[pulumi.Input[str]] = None,
                 cloud_product_region: Optional[pulumi.Input[str]] = None,
                 cls_region: Optional[pulumi.Input[str]] = None,
                 extend: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudProductLogTaskArgs.__new__(CloudProductLogTaskArgs)

            if assumer_name is None and not opts.urn:
                raise TypeError("Missing required property 'assumer_name'")
            __props__.__dict__["assumer_name"] = assumer_name
            if cloud_product_region is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_product_region'")
            __props__.__dict__["cloud_product_region"] = cloud_product_region
            if cls_region is None and not opts.urn:
                raise TypeError("Missing required property 'cls_region'")
            __props__.__dict__["cls_region"] = cls_region
            __props__.__dict__["extend"] = extend
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if log_type is None and not opts.urn:
                raise TypeError("Missing required property 'log_type'")
            __props__.__dict__["log_type"] = log_type
            __props__.__dict__["logset_name"] = logset_name
            __props__.__dict__["topic_name"] = topic_name
            __props__.__dict__["logset_id"] = None
            __props__.__dict__["topic_id"] = None
        super(CloudProductLogTask, __self__).__init__(
            'tencentcloud:Cls/cloudProductLogTask:CloudProductLogTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assumer_name: Optional[pulumi.Input[str]] = None,
            cloud_product_region: Optional[pulumi.Input[str]] = None,
            cls_region: Optional[pulumi.Input[str]] = None,
            extend: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            log_type: Optional[pulumi.Input[str]] = None,
            logset_id: Optional[pulumi.Input[str]] = None,
            logset_name: Optional[pulumi.Input[str]] = None,
            topic_id: Optional[pulumi.Input[str]] = None,
            topic_name: Optional[pulumi.Input[str]] = None) -> 'CloudProductLogTask':
        """
        Get an existing CloudProductLogTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assumer_name: Cloud product identification, Values: CDS, CWP, CDB, TDSQL-C, MongoDB, TDStore, DCDB, MariaDB, PostgreSQL, BH, APIS.
        :param pulumi.Input[str] cloud_product_region: Cloud product region. There are differences in the input format of different log types in different regions. Please refer to the following example:
               - CDS(all log type): ap-guangzhou
               - CDB-AUDIT: gz
               - TDSQL-C-AUDIT: gz
               - MongoDB-AUDIT: gz
               - MongoDB-SlowLog: ap-guangzhou
               - MongoDB-ErrorLog: ap-guangzhou
               - TDMYSQL-SLOW: gz
               - DCDB(all log type): gz
               - MariaDB(all log type): gz
               - PostgreSQL(all log type): gz
               - BH(all log type): overseas-polaris(Domestic sites overseas)/fsi-polaris(Domestic sites finance)/general-polaris(Domestic sites)/intl-sg-prod(International sites)
               - APIS(all log type): gz.
        :param pulumi.Input[str] cls_region: CLS target region.
        :param pulumi.Input[str] extend: Log configuration extension information, generally used to store additional log delivery configurations.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] log_type: Log type, Values: CDS-AUDIT, CDS-RISK, CDB-AUDIT, TDSQL-C-AUDIT, MongoDB-AUDIT, MongoDB-SlowLog, MongoDB-ErrorLog, TDMYSQL-SLOW, DCDB-AUDIT, DCDB-SLOW, DCDB-ERROR, MariaDB-AUDIT, MariaDB-SLOW, MariaDB-ERROR, PostgreSQL-SLOW, PostgreSQL-ERROR, PostgreSQL-AUDIT, BH-FILELOG, BH-COMMANDLOG, APIS-ACCESS.
        :param pulumi.Input[str] logset_id: Log set ID.
        :param pulumi.Input[str] logset_name: Log set name, it will be automatically created.
        :param pulumi.Input[str] topic_id: Log theme ID.
        :param pulumi.Input[str] topic_name: The name of the log topic, it will be automatically created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudProductLogTaskState.__new__(_CloudProductLogTaskState)

        __props__.__dict__["assumer_name"] = assumer_name
        __props__.__dict__["cloud_product_region"] = cloud_product_region
        __props__.__dict__["cls_region"] = cls_region
        __props__.__dict__["extend"] = extend
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["log_type"] = log_type
        __props__.__dict__["logset_id"] = logset_id
        __props__.__dict__["logset_name"] = logset_name
        __props__.__dict__["topic_id"] = topic_id
        __props__.__dict__["topic_name"] = topic_name
        return CloudProductLogTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assumerName")
    def assumer_name(self) -> pulumi.Output[str]:
        """
        Cloud product identification, Values: CDS, CWP, CDB, TDSQL-C, MongoDB, TDStore, DCDB, MariaDB, PostgreSQL, BH, APIS.
        """
        return pulumi.get(self, "assumer_name")

    @property
    @pulumi.getter(name="cloudProductRegion")
    def cloud_product_region(self) -> pulumi.Output[str]:
        """
        Cloud product region. There are differences in the input format of different log types in different regions. Please refer to the following example:
        - CDS(all log type): ap-guangzhou
        - CDB-AUDIT: gz
        - TDSQL-C-AUDIT: gz
        - MongoDB-AUDIT: gz
        - MongoDB-SlowLog: ap-guangzhou
        - MongoDB-ErrorLog: ap-guangzhou
        - TDMYSQL-SLOW: gz
        - DCDB(all log type): gz
        - MariaDB(all log type): gz
        - PostgreSQL(all log type): gz
        - BH(all log type): overseas-polaris(Domestic sites overseas)/fsi-polaris(Domestic sites finance)/general-polaris(Domestic sites)/intl-sg-prod(International sites)
        - APIS(all log type): gz.
        """
        return pulumi.get(self, "cloud_product_region")

    @property
    @pulumi.getter(name="clsRegion")
    def cls_region(self) -> pulumi.Output[str]:
        """
        CLS target region.
        """
        return pulumi.get(self, "cls_region")

    @property
    @pulumi.getter
    def extend(self) -> pulumi.Output[Optional[str]]:
        """
        Log configuration extension information, generally used to store additional log delivery configurations.
        """
        return pulumi.get(self, "extend")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Output[str]:
        """
        Log type, Values: CDS-AUDIT, CDS-RISK, CDB-AUDIT, TDSQL-C-AUDIT, MongoDB-AUDIT, MongoDB-SlowLog, MongoDB-ErrorLog, TDMYSQL-SLOW, DCDB-AUDIT, DCDB-SLOW, DCDB-ERROR, MariaDB-AUDIT, MariaDB-SLOW, MariaDB-ERROR, PostgreSQL-SLOW, PostgreSQL-ERROR, PostgreSQL-AUDIT, BH-FILELOG, BH-COMMANDLOG, APIS-ACCESS.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> pulumi.Output[str]:
        """
        Log set ID.
        """
        return pulumi.get(self, "logset_id")

    @property
    @pulumi.getter(name="logsetName")
    def logset_name(self) -> pulumi.Output[Optional[str]]:
        """
        Log set name, it will be automatically created.
        """
        return pulumi.get(self, "logset_name")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        Log theme ID.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the log topic, it will be automatically created.
        """
        return pulumi.get(self, "topic_name")

