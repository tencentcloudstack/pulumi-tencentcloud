# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CheckCertificateDomainVerificationOperationArgs', 'CheckCertificateDomainVerificationOperation']

@pulumi.input_type
class CheckCertificateDomainVerificationOperationArgs:
    def __init__(__self__, *,
                 certificate_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a CheckCertificateDomainVerificationOperation resource.
        :param pulumi.Input[str] certificate_id: The certificate ID.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[str]:
        """
        The certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_id", value)


@pulumi.input_type
class _CheckCertificateDomainVerificationOperationState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 verification_results: Optional[pulumi.Input[Sequence[pulumi.Input['CheckCertificateDomainVerificationOperationVerificationResultArgs']]]] = None):
        """
        Input properties used for looking up and filtering CheckCertificateDomainVerificationOperation resources.
        :param pulumi.Input[str] certificate_id: The certificate ID.
        :param pulumi.Input[Sequence[pulumi.Input['CheckCertificateDomainVerificationOperationVerificationResultArgs']]] verification_results: Domain name verification results.
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if verification_results is not None:
            pulumi.set(__self__, "verification_results", verification_results)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="verificationResults")
    def verification_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CheckCertificateDomainVerificationOperationVerificationResultArgs']]]]:
        """
        Domain name verification results.
        """
        return pulumi.get(self, "verification_results")

    @verification_results.setter
    def verification_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CheckCertificateDomainVerificationOperationVerificationResultArgs']]]]):
        pulumi.set(self, "verification_results", value)


class CheckCertificateDomainVerificationOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ssl Check Certificate Domain Verification

        > **NOTE:** You can customize the maximum timeout time by setting parameter `timeouts`, which defaults to 15 minutes.

        ## Example Usage

        ### Check certificate domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.ssl.CheckCertificateDomainVerificationOperation("example", certificate_id="6BE701Jx")
        ```
        <!--End PulumiCodeChooser -->

        ### Check certificate domain and set the maximum timeout period

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.ssl.CheckCertificateDomainVerificationOperation("example", certificate_id="6BE701Jx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: The certificate ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CheckCertificateDomainVerificationOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ssl Check Certificate Domain Verification

        > **NOTE:** You can customize the maximum timeout time by setting parameter `timeouts`, which defaults to 15 minutes.

        ## Example Usage

        ### Check certificate domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.ssl.CheckCertificateDomainVerificationOperation("example", certificate_id="6BE701Jx")
        ```
        <!--End PulumiCodeChooser -->

        ### Check certificate domain and set the maximum timeout period

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.ssl.CheckCertificateDomainVerificationOperation("example", certificate_id="6BE701Jx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param CheckCertificateDomainVerificationOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CheckCertificateDomainVerificationOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CheckCertificateDomainVerificationOperationArgs.__new__(CheckCertificateDomainVerificationOperationArgs)

            if certificate_id is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_id'")
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["verification_results"] = None
        super(CheckCertificateDomainVerificationOperation, __self__).__init__(
            'tencentcloud:Ssl/checkCertificateDomainVerificationOperation:CheckCertificateDomainVerificationOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            verification_results: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CheckCertificateDomainVerificationOperationVerificationResultArgs']]]]] = None) -> 'CheckCertificateDomainVerificationOperation':
        """
        Get an existing CheckCertificateDomainVerificationOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: The certificate ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CheckCertificateDomainVerificationOperationVerificationResultArgs']]]] verification_results: Domain name verification results.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CheckCertificateDomainVerificationOperationState.__new__(_CheckCertificateDomainVerificationOperationState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["verification_results"] = verification_results
        return CheckCertificateDomainVerificationOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[str]:
        """
        The certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="verificationResults")
    def verification_results(self) -> pulumi.Output[Sequence['outputs.CheckCertificateDomainVerificationOperationVerificationResult']]:
        """
        Domain name verification results.
        """
        return pulumi.get(self, "verification_results")

