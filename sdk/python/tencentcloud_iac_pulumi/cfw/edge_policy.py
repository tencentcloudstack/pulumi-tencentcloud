# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EdgePolicyArgs', 'EdgePolicy']

@pulumi.input_type
class EdgePolicyArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[int],
                 port: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 rule_action: pulumi.Input[str],
                 source_content: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 target_content: pulumi.Input[str],
                 target_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EdgePolicy resource.
        :param pulumi.Input[int] direction: Rule direction: 1, inbound; 0, outbound.
        :param pulumi.Input[str] port: The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
        :param pulumi.Input[str] protocol: Protocol. If Direction=1 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 && Scope!=serial, optional values: TCP; If Direction=0 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 && Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
        :param pulumi.Input[str] rule_action: How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
        :param pulumi.Input[str] source_content: Access source example: net:IP/CIDR(192.168.0.2).
        :param pulumi.Input[str] source_type: Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
        :param pulumi.Input[str] target_content: Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
        :param pulumi.Input[str] target_type: Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] enable: Rule status, true means enabled, false means disabled. Default is true.
        :param pulumi.Input[str] scope: Effective range. serial: serial; side: bypass; all: global, Default is all.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "rule_action", rule_action)
        pulumi.set(__self__, "source_content", source_content)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "target_content", target_content)
        pulumi.set(__self__, "target_type", target_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[int]:
        """
        Rule direction: 1, inbound; 0, outbound.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[int]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Protocol. If Direction=1 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 && Scope!=serial, optional values: TCP; If Direction=0 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 && Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="ruleAction")
    def rule_action(self) -> pulumi.Input[str]:
        """
        How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
        """
        return pulumi.get(self, "rule_action")

    @rule_action.setter
    def rule_action(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_action", value)

    @property
    @pulumi.getter(name="sourceContent")
    def source_content(self) -> pulumi.Input[str]:
        """
        Access source example: net:IP/CIDR(192.168.0.2).
        """
        return pulumi.get(self, "source_content")

    @source_content.setter
    def source_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_content", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="targetContent")
    def target_content(self) -> pulumi.Input[str]:
        """
        Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
        """
        return pulumi.get(self, "target_content")

    @target_content.setter
    def target_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_content", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[str]:
        """
        Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[str]]:
        """
        Rule status, true means enabled, false means disabled. Default is true.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Effective range. serial: serial; side: bypass; all: global, Default is all.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _EdgePolicyState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[str]] = None,
                 param_template_id: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 rule_action: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 source_content: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 target_content: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering EdgePolicy resources.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] direction: Rule direction: 1, inbound; 0, outbound.
        :param pulumi.Input[str] enable: Rule status, true means enabled, false means disabled. Default is true.
        :param pulumi.Input[str] param_template_id: Parameter template id.
        :param pulumi.Input[str] port: The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
        :param pulumi.Input[str] protocol: Protocol. If Direction=1 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 && Scope!=serial, optional values: TCP; If Direction=0 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 && Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
        :param pulumi.Input[str] rule_action: How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
        :param pulumi.Input[str] scope: Effective range. serial: serial; side: bypass; all: global, Default is all.
        :param pulumi.Input[str] source_content: Access source example: net:IP/CIDR(192.168.0.2).
        :param pulumi.Input[str] source_type: Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
        :param pulumi.Input[str] target_content: Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
        :param pulumi.Input[str] target_type: Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
        :param pulumi.Input[int] uuid: The unique id corresponding to the rule, no need to fill in when creating the rule.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if param_template_id is not None:
            pulumi.set(__self__, "param_template_id", param_template_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_action is not None:
            pulumi.set(__self__, "rule_action", rule_action)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if source_content is not None:
            pulumi.set(__self__, "source_content", source_content)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if target_content is not None:
            pulumi.set(__self__, "target_content", target_content)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[int]]:
        """
        Rule direction: 1, inbound; 0, outbound.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[str]]:
        """
        Rule status, true means enabled, false means disabled. Default is true.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter template id.
        """
        return pulumi.get(self, "param_template_id")

    @param_template_id.setter
    def param_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_template_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol. If Direction=1 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 && Scope!=serial, optional values: TCP; If Direction=0 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 && Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="ruleAction")
    def rule_action(self) -> Optional[pulumi.Input[str]]:
        """
        How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
        """
        return pulumi.get(self, "rule_action")

    @rule_action.setter
    def rule_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_action", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Effective range. serial: serial; side: bypass; all: global, Default is all.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sourceContent")
    def source_content(self) -> Optional[pulumi.Input[str]]:
        """
        Access source example: net:IP/CIDR(192.168.0.2).
        """
        return pulumi.get(self, "source_content")

    @source_content.setter
    def source_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_content", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="targetContent")
    def target_content(self) -> Optional[pulumi.Input[str]]:
        """
        Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
        """
        return pulumi.get(self, "target_content")

    @target_content.setter
    def target_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_content", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        """
        Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[int]]:
        """
        The unique id corresponding to the rule, no need to fill in when creating the rule.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uuid", value)


class EdgePolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 rule_action: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 source_content: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 target_content: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cfw edge_policy

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.EdgePolicy("example",
            description="policy description.",
            direction=1,
            enable="true",
            port="-1/-1",
            protocol="TCP",
            rule_action="drop",
            scope="all",
            source_content="1.1.1.1/0",
            source_type="net",
            target_content="0.0.0.0/0",
            target_type="net")
        ```
        ### If target_type is tag

        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.EdgePolicy("example",
            source_content="0.0.0.0/0",
            source_type="net",
            target_content=json.dumps({
                "Key": "test",
                "Value": "dddd",
            }),
            target_type="tag",
            protocol="TCP",
            rule_action="drop",
            port="-1/-1",
            direction=1,
            enable="true",
            description="policy description.",
            scope="all")
        ```

        ## Import

        cfw edge_policy can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Cfw/edgePolicy:EdgePolicy example edge_policy_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] direction: Rule direction: 1, inbound; 0, outbound.
        :param pulumi.Input[str] enable: Rule status, true means enabled, false means disabled. Default is true.
        :param pulumi.Input[str] port: The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
        :param pulumi.Input[str] protocol: Protocol. If Direction=1 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 && Scope!=serial, optional values: TCP; If Direction=0 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 && Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
        :param pulumi.Input[str] rule_action: How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
        :param pulumi.Input[str] scope: Effective range. serial: serial; side: bypass; all: global, Default is all.
        :param pulumi.Input[str] source_content: Access source example: net:IP/CIDR(192.168.0.2).
        :param pulumi.Input[str] source_type: Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
        :param pulumi.Input[str] target_content: Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
        :param pulumi.Input[str] target_type: Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EdgePolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cfw edge_policy

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.EdgePolicy("example",
            description="policy description.",
            direction=1,
            enable="true",
            port="-1/-1",
            protocol="TCP",
            rule_action="drop",
            scope="all",
            source_content="1.1.1.1/0",
            source_type="net",
            target_content="0.0.0.0/0",
            target_type="net")
        ```
        ### If target_type is tag

        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.EdgePolicy("example",
            source_content="0.0.0.0/0",
            source_type="net",
            target_content=json.dumps({
                "Key": "test",
                "Value": "dddd",
            }),
            target_type="tag",
            protocol="TCP",
            rule_action="drop",
            port="-1/-1",
            direction=1,
            enable="true",
            description="policy description.",
            scope="all")
        ```

        ## Import

        cfw edge_policy can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Cfw/edgePolicy:EdgePolicy example edge_policy_id
        ```

        :param str resource_name: The name of the resource.
        :param EdgePolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EdgePolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 rule_action: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 source_content: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 target_content: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EdgePolicyArgs.__new__(EdgePolicyArgs)

            __props__.__dict__["description"] = description
            if direction is None and not opts.urn:
                raise TypeError("Missing required property 'direction'")
            __props__.__dict__["direction"] = direction
            __props__.__dict__["enable"] = enable
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if rule_action is None and not opts.urn:
                raise TypeError("Missing required property 'rule_action'")
            __props__.__dict__["rule_action"] = rule_action
            __props__.__dict__["scope"] = scope
            if source_content is None and not opts.urn:
                raise TypeError("Missing required property 'source_content'")
            __props__.__dict__["source_content"] = source_content
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            if target_content is None and not opts.urn:
                raise TypeError("Missing required property 'target_content'")
            __props__.__dict__["target_content"] = target_content
            if target_type is None and not opts.urn:
                raise TypeError("Missing required property 'target_type'")
            __props__.__dict__["target_type"] = target_type
            __props__.__dict__["param_template_id"] = None
            __props__.__dict__["uuid"] = None
        super(EdgePolicy, __self__).__init__(
            'tencentcloud:Cfw/edgePolicy:EdgePolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            direction: Optional[pulumi.Input[int]] = None,
            enable: Optional[pulumi.Input[str]] = None,
            param_template_id: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            rule_action: Optional[pulumi.Input[str]] = None,
            scope: Optional[pulumi.Input[str]] = None,
            source_content: Optional[pulumi.Input[str]] = None,
            source_type: Optional[pulumi.Input[str]] = None,
            target_content: Optional[pulumi.Input[str]] = None,
            target_type: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[int]] = None) -> 'EdgePolicy':
        """
        Get an existing EdgePolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] direction: Rule direction: 1, inbound; 0, outbound.
        :param pulumi.Input[str] enable: Rule status, true means enabled, false means disabled. Default is true.
        :param pulumi.Input[str] param_template_id: Parameter template id.
        :param pulumi.Input[str] port: The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
        :param pulumi.Input[str] protocol: Protocol. If Direction=1 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 && Scope!=serial, optional values: TCP; If Direction=0 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 && Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
        :param pulumi.Input[str] rule_action: How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
        :param pulumi.Input[str] scope: Effective range. serial: serial; side: bypass; all: global, Default is all.
        :param pulumi.Input[str] source_content: Access source example: net:IP/CIDR(192.168.0.2).
        :param pulumi.Input[str] source_type: Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
        :param pulumi.Input[str] target_content: Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
        :param pulumi.Input[str] target_type: Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
        :param pulumi.Input[int] uuid: The unique id corresponding to the rule, no need to fill in when creating the rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EdgePolicyState.__new__(_EdgePolicyState)

        __props__.__dict__["description"] = description
        __props__.__dict__["direction"] = direction
        __props__.__dict__["enable"] = enable
        __props__.__dict__["param_template_id"] = param_template_id
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["rule_action"] = rule_action
        __props__.__dict__["scope"] = scope
        __props__.__dict__["source_content"] = source_content
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["target_content"] = target_content
        __props__.__dict__["target_type"] = target_type
        __props__.__dict__["uuid"] = uuid
        return EdgePolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Output[int]:
        """
        Rule direction: 1, inbound; 0, outbound.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[Optional[str]]:
        """
        Rule status, true means enabled, false means disabled. Default is true.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> pulumi.Output[str]:
        """
        Parameter template id.
        """
        return pulumi.get(self, "param_template_id")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[str]:
        """
        The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Protocol. If Direction=1 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 && Scope!=serial, optional values: TCP; If Direction=0 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 && Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleAction")
    def rule_action(self) -> pulumi.Output[str]:
        """
        How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
        """
        return pulumi.get(self, "rule_action")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        """
        Effective range. serial: serial; side: bypass; all: global, Default is all.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="sourceContent")
    def source_content(self) -> pulumi.Output[str]:
        """
        Access source example: net:IP/CIDR(192.168.0.2).
        """
        return pulumi.get(self, "source_content")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[str]:
        """
        Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="targetContent")
    def target_content(self) -> pulumi.Output[str]:
        """
        Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
        """
        return pulumi.get(self, "target_content")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[str]:
        """
        Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[int]:
        """
        The unique id corresponding to the rule, no need to fill in when creating the rule.
        """
        return pulumi.get(self, "uuid")

