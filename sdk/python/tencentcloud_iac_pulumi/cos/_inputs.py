# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BatchManifestArgs',
    'BatchManifestLocationArgs',
    'BatchManifestSpecArgs',
    'BatchOperationArgs',
    'BatchOperationCosInitiateRestoreObjectArgs',
    'BatchOperationCosPutObjectCopyArgs',
    'BatchOperationCosPutObjectCopyAccessControlGrantsArgs',
    'BatchOperationCosPutObjectCopyNewObjectMetadataArgs',
    'BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs',
    'BatchOperationCosPutObjectCopyNewObjectTaggingArgs',
    'BatchReportArgs',
    'BucketCorsRuleArgs',
    'BucketDomainCertificateAttachmentDomainCertificateArgs',
    'BucketDomainCertificateAttachmentDomainCertificateCertificateArgs',
    'BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs',
    'BucketInventoryDestinationArgs',
    'BucketInventoryDestinationEncryptionArgs',
    'BucketInventoryFilterArgs',
    'BucketInventoryFilterPeriodArgs',
    'BucketInventoryOptionalFieldsArgs',
    'BucketInventoryScheduleArgs',
    'BucketLifecycleRuleArgs',
    'BucketLifecycleRuleAbortIncompleteMultipartUploadArgs',
    'BucketLifecycleRuleExpirationArgs',
    'BucketLifecycleRuleNonCurrentExpirationArgs',
    'BucketLifecycleRuleNonCurrentTransitionArgs',
    'BucketLifecycleRuleTransitionArgs',
    'BucketOriginDomainRuleArgs',
    'BucketOriginPullRuleArgs',
    'BucketReplicaRuleArgs',
    'BucketWebsiteArgs',
]

@pulumi.input_type
class BatchManifestArgs:
    def __init__(__self__, *,
                 location: pulumi.Input['BatchManifestLocationArgs'],
                 spec: pulumi.Input['BatchManifestSpecArgs']):
        """
        :param pulumi.Input['BatchManifestLocationArgs'] location: The location information of the list of objects.
        :param pulumi.Input['BatchManifestSpecArgs'] spec: Format information that describes the list of objects. If it is a CSV file, this element describes the fields contained in the manifest.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input['BatchManifestLocationArgs']:
        """
        The location information of the list of objects.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input['BatchManifestLocationArgs']):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['BatchManifestSpecArgs']:
        """
        Format information that describes the list of objects. If it is a CSV file, this element describes the fields contained in the manifest.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['BatchManifestSpecArgs']):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class BatchManifestLocationArgs:
    def __init__(__self__, *,
                 etag: pulumi.Input[str],
                 object_arn: pulumi.Input[str],
                 object_version_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] etag: Specifies the etag of the object list. Length 1-1024 bytes.
        :param pulumi.Input[str] object_arn: Specifies the unique resource identifier of the object manifest, which is 1-1024 bytes long.
        :param pulumi.Input[str] object_version_id: Specifies the version of the object manifest ID, which is 1-1024 bytes long.
        """
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "object_arn", object_arn)
        if object_version_id is not None:
            pulumi.set(__self__, "object_version_id", object_version_id)

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Input[str]:
        """
        Specifies the etag of the object list. Length 1-1024 bytes.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: pulumi.Input[str]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="objectArn")
    def object_arn(self) -> pulumi.Input[str]:
        """
        Specifies the unique resource identifier of the object manifest, which is 1-1024 bytes long.
        """
        return pulumi.get(self, "object_arn")

    @object_arn.setter
    def object_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_arn", value)

    @property
    @pulumi.getter(name="objectVersionId")
    def object_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the version of the object manifest ID, which is 1-1024 bytes long.
        """
        return pulumi.get(self, "object_version_id")

    @object_version_id.setter
    def object_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_version_id", value)


@pulumi.input_type
class BatchManifestSpecArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] format: Specifies the format information for the list of objects. Legal fields are: COSBatchOperations_CSV_V1, COSInventoryReport_CSV_V1.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: Describes the fields contained in the listing, which you need to use to specify CSV file fields when Format is COSBatchOperations_CSV_V1. Legal fields are: Ignore, Bucket, Key, VersionId.
        """
        pulumi.set(__self__, "format", format)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        Specifies the format information for the list of objects. Legal fields are: COSBatchOperations_CSV_V1, COSInventoryReport_CSV_V1.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Describes the fields contained in the listing, which you need to use to specify CSV file fields when Format is COSBatchOperations_CSV_V1. Legal fields are: Ignore, Bucket, Key, VersionId.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class BatchOperationArgs:
    def __init__(__self__, *,
                 cos_initiate_restore_object: Optional[pulumi.Input['BatchOperationCosInitiateRestoreObjectArgs']] = None,
                 cos_put_object_copy: Optional[pulumi.Input['BatchOperationCosPutObjectCopyArgs']] = None):
        """
        :param pulumi.Input['BatchOperationCosInitiateRestoreObjectArgs'] cos_initiate_restore_object: Specifies the specific parameters for the batch restore operation for archive storage type objects in the inventory.
        :param pulumi.Input['BatchOperationCosPutObjectCopyArgs'] cos_put_object_copy: Specifies the specific parameters for the batch copy operation on the objects in the list.
        """
        if cos_initiate_restore_object is not None:
            pulumi.set(__self__, "cos_initiate_restore_object", cos_initiate_restore_object)
        if cos_put_object_copy is not None:
            pulumi.set(__self__, "cos_put_object_copy", cos_put_object_copy)

    @property
    @pulumi.getter(name="cosInitiateRestoreObject")
    def cos_initiate_restore_object(self) -> Optional[pulumi.Input['BatchOperationCosInitiateRestoreObjectArgs']]:
        """
        Specifies the specific parameters for the batch restore operation for archive storage type objects in the inventory.
        """
        return pulumi.get(self, "cos_initiate_restore_object")

    @cos_initiate_restore_object.setter
    def cos_initiate_restore_object(self, value: Optional[pulumi.Input['BatchOperationCosInitiateRestoreObjectArgs']]):
        pulumi.set(self, "cos_initiate_restore_object", value)

    @property
    @pulumi.getter(name="cosPutObjectCopy")
    def cos_put_object_copy(self) -> Optional[pulumi.Input['BatchOperationCosPutObjectCopyArgs']]:
        """
        Specifies the specific parameters for the batch copy operation on the objects in the list.
        """
        return pulumi.get(self, "cos_put_object_copy")

    @cos_put_object_copy.setter
    def cos_put_object_copy(self, value: Optional[pulumi.Input['BatchOperationCosPutObjectCopyArgs']]):
        pulumi.set(self, "cos_put_object_copy", value)


@pulumi.input_type
class BatchOperationCosInitiateRestoreObjectArgs:
    def __init__(__self__, *,
                 expiration_in_days: pulumi.Input[int],
                 job_tier: pulumi.Input[str]):
        """
        :param pulumi.Input[int] expiration_in_days: Sets the number of days after which the copy will be automatically expired and deleted, an integer in the range of 1-365.
        :param pulumi.Input[str] job_tier: Select archive recovery model. Available values: Bulk, Standard.
        """
        pulumi.set(__self__, "expiration_in_days", expiration_in_days)
        pulumi.set(__self__, "job_tier", job_tier)

    @property
    @pulumi.getter(name="expirationInDays")
    def expiration_in_days(self) -> pulumi.Input[int]:
        """
        Sets the number of days after which the copy will be automatically expired and deleted, an integer in the range of 1-365.
        """
        return pulumi.get(self, "expiration_in_days")

    @expiration_in_days.setter
    def expiration_in_days(self, value: pulumi.Input[int]):
        pulumi.set(self, "expiration_in_days", value)

    @property
    @pulumi.getter(name="jobTier")
    def job_tier(self) -> pulumi.Input[str]:
        """
        Select archive recovery model. Available values: Bulk, Standard.
        """
        return pulumi.get(self, "job_tier")

    @job_tier.setter
    def job_tier(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_tier", value)


@pulumi.input_type
class BatchOperationCosPutObjectCopyArgs:
    def __init__(__self__, *,
                 target_resource: pulumi.Input[str],
                 access_control_directive: Optional[pulumi.Input[str]] = None,
                 access_control_grants: Optional[pulumi.Input['BatchOperationCosPutObjectCopyAccessControlGrantsArgs']] = None,
                 canned_access_control_list: Optional[pulumi.Input[str]] = None,
                 metadata_directive: Optional[pulumi.Input[str]] = None,
                 modified_since_constraint: Optional[pulumi.Input[int]] = None,
                 new_object_metadata: Optional[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataArgs']] = None,
                 new_object_taggings: Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectTaggingArgs']]]] = None,
                 prefix_replace: Optional[pulumi.Input[bool]] = None,
                 resources_prefix: Optional[pulumi.Input[str]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None,
                 tagging_directive: Optional[pulumi.Input[str]] = None,
                 target_key_prefix: Optional[pulumi.Input[str]] = None,
                 unmodified_since_constraint: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] target_resource: Sets the target bucket for the Copy. Use qcs to specify, for example, qcs::cos:ap-chengdu:uid/1250000000:examplebucket-1250000000.
        :param pulumi.Input[str] access_control_directive: This element specifies how ACL is copied. Valid values:
               - Copy: inherits the source object ACL
               - Replaced: replace source ACL
               - Add: add a new ACL based on the source ACL.
        :param pulumi.Input['BatchOperationCosPutObjectCopyAccessControlGrantsArgs'] access_control_grants: Controls the specific access to the object.
        :param pulumi.Input[str] canned_access_control_list: Defines the ACL property of the object. Valid values: private, public-read.
        :param pulumi.Input[str] metadata_directive: This element specifies whether to copy object metadata from the source object or replace it with metadata in the < NewObjectMetadata > element. Valid values are: Copy, Replaced, Add. Copy: inherit source object metadata; Replaced: replace source metadata; Add: add new metadata based on source metadata.
        :param pulumi.Input[int] modified_since_constraint: When the object is modified after the specified time, the operation is performed, otherwise 412 is returned.
        :param pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataArgs'] new_object_metadata: Configure the metadata for the object.
        :param pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectTaggingArgs']]] new_object_taggings: The label of the configuration object, which must be specified when the < TaggingDirective > value is Replace or Add.
        :param pulumi.Input[bool] prefix_replace: Specifies whether the prefix of the source object needs to be replaced. A value of true indicates the replacement object prefix, which needs to be used with <ResourcesPrefix> and <TargetKeyPrefix>. Default value: false.
        :param pulumi.Input[str] resources_prefix: This field is valid only when the < PrefixReplace > value is true. Specify the source object prefix to be replaced, and the replacement directory should end with `/`. Can be empty with a maximum length of 1024 bytes.
        :param pulumi.Input[str] storage_class: Sets the storage level of the object. Enumerated value: STANDARD,STANDARD_IA. Default value: STANDARD.
        :param pulumi.Input[str] tagging_directive: This element specifies whether to copy the object tag from the source object or replace it with the tag in the < NewObjectTagging > element. Valid values are: Copy, Replaced, Add. Copy: inherits the source object tag; Replaced: replaces the source tag; Add: adds a new tag based on the source tag.
        :param pulumi.Input[str] target_key_prefix: This field is valid only when the <PrefixReplace> value is true. This value represents the replaced prefix, and the replacement directory should end with /. Can be empty with a maximum length of 1024 bytes.
        :param pulumi.Input[int] unmodified_since_constraint: When the object has not been modified after the specified time, the operation is performed, otherwise 412 is returned.
        """
        pulumi.set(__self__, "target_resource", target_resource)
        if access_control_directive is not None:
            pulumi.set(__self__, "access_control_directive", access_control_directive)
        if access_control_grants is not None:
            pulumi.set(__self__, "access_control_grants", access_control_grants)
        if canned_access_control_list is not None:
            pulumi.set(__self__, "canned_access_control_list", canned_access_control_list)
        if metadata_directive is not None:
            pulumi.set(__self__, "metadata_directive", metadata_directive)
        if modified_since_constraint is not None:
            pulumi.set(__self__, "modified_since_constraint", modified_since_constraint)
        if new_object_metadata is not None:
            pulumi.set(__self__, "new_object_metadata", new_object_metadata)
        if new_object_taggings is not None:
            pulumi.set(__self__, "new_object_taggings", new_object_taggings)
        if prefix_replace is not None:
            pulumi.set(__self__, "prefix_replace", prefix_replace)
        if resources_prefix is not None:
            pulumi.set(__self__, "resources_prefix", resources_prefix)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if tagging_directive is not None:
            pulumi.set(__self__, "tagging_directive", tagging_directive)
        if target_key_prefix is not None:
            pulumi.set(__self__, "target_key_prefix", target_key_prefix)
        if unmodified_since_constraint is not None:
            pulumi.set(__self__, "unmodified_since_constraint", unmodified_since_constraint)

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> pulumi.Input[str]:
        """
        Sets the target bucket for the Copy. Use qcs to specify, for example, qcs::cos:ap-chengdu:uid/1250000000:examplebucket-1250000000.
        """
        return pulumi.get(self, "target_resource")

    @target_resource.setter
    def target_resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource", value)

    @property
    @pulumi.getter(name="accessControlDirective")
    def access_control_directive(self) -> Optional[pulumi.Input[str]]:
        """
        This element specifies how ACL is copied. Valid values:
        - Copy: inherits the source object ACL
        - Replaced: replace source ACL
        - Add: add a new ACL based on the source ACL.
        """
        return pulumi.get(self, "access_control_directive")

    @access_control_directive.setter
    def access_control_directive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_control_directive", value)

    @property
    @pulumi.getter(name="accessControlGrants")
    def access_control_grants(self) -> Optional[pulumi.Input['BatchOperationCosPutObjectCopyAccessControlGrantsArgs']]:
        """
        Controls the specific access to the object.
        """
        return pulumi.get(self, "access_control_grants")

    @access_control_grants.setter
    def access_control_grants(self, value: Optional[pulumi.Input['BatchOperationCosPutObjectCopyAccessControlGrantsArgs']]):
        pulumi.set(self, "access_control_grants", value)

    @property
    @pulumi.getter(name="cannedAccessControlList")
    def canned_access_control_list(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the ACL property of the object. Valid values: private, public-read.
        """
        return pulumi.get(self, "canned_access_control_list")

    @canned_access_control_list.setter
    def canned_access_control_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "canned_access_control_list", value)

    @property
    @pulumi.getter(name="metadataDirective")
    def metadata_directive(self) -> Optional[pulumi.Input[str]]:
        """
        This element specifies whether to copy object metadata from the source object or replace it with metadata in the < NewObjectMetadata > element. Valid values are: Copy, Replaced, Add. Copy: inherit source object metadata; Replaced: replace source metadata; Add: add new metadata based on source metadata.
        """
        return pulumi.get(self, "metadata_directive")

    @metadata_directive.setter
    def metadata_directive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata_directive", value)

    @property
    @pulumi.getter(name="modifiedSinceConstraint")
    def modified_since_constraint(self) -> Optional[pulumi.Input[int]]:
        """
        When the object is modified after the specified time, the operation is performed, otherwise 412 is returned.
        """
        return pulumi.get(self, "modified_since_constraint")

    @modified_since_constraint.setter
    def modified_since_constraint(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "modified_since_constraint", value)

    @property
    @pulumi.getter(name="newObjectMetadata")
    def new_object_metadata(self) -> Optional[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataArgs']]:
        """
        Configure the metadata for the object.
        """
        return pulumi.get(self, "new_object_metadata")

    @new_object_metadata.setter
    def new_object_metadata(self, value: Optional[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataArgs']]):
        pulumi.set(self, "new_object_metadata", value)

    @property
    @pulumi.getter(name="newObjectTaggings")
    def new_object_taggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectTaggingArgs']]]]:
        """
        The label of the configuration object, which must be specified when the < TaggingDirective > value is Replace or Add.
        """
        return pulumi.get(self, "new_object_taggings")

    @new_object_taggings.setter
    def new_object_taggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectTaggingArgs']]]]):
        pulumi.set(self, "new_object_taggings", value)

    @property
    @pulumi.getter(name="prefixReplace")
    def prefix_replace(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the prefix of the source object needs to be replaced. A value of true indicates the replacement object prefix, which needs to be used with <ResourcesPrefix> and <TargetKeyPrefix>. Default value: false.
        """
        return pulumi.get(self, "prefix_replace")

    @prefix_replace.setter
    def prefix_replace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prefix_replace", value)

    @property
    @pulumi.getter(name="resourcesPrefix")
    def resources_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        This field is valid only when the < PrefixReplace > value is true. Specify the source object prefix to be replaced, and the replacement directory should end with `/`. Can be empty with a maximum length of 1024 bytes.
        """
        return pulumi.get(self, "resources_prefix")

    @resources_prefix.setter
    def resources_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resources_prefix", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the storage level of the object. Enumerated value: STANDARD,STANDARD_IA. Default value: STANDARD.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="taggingDirective")
    def tagging_directive(self) -> Optional[pulumi.Input[str]]:
        """
        This element specifies whether to copy the object tag from the source object or replace it with the tag in the < NewObjectTagging > element. Valid values are: Copy, Replaced, Add. Copy: inherits the source object tag; Replaced: replaces the source tag; Add: adds a new tag based on the source tag.
        """
        return pulumi.get(self, "tagging_directive")

    @tagging_directive.setter
    def tagging_directive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tagging_directive", value)

    @property
    @pulumi.getter(name="targetKeyPrefix")
    def target_key_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        This field is valid only when the <PrefixReplace> value is true. This value represents the replaced prefix, and the replacement directory should end with /. Can be empty with a maximum length of 1024 bytes.
        """
        return pulumi.get(self, "target_key_prefix")

    @target_key_prefix.setter
    def target_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_key_prefix", value)

    @property
    @pulumi.getter(name="unmodifiedSinceConstraint")
    def unmodified_since_constraint(self) -> Optional[pulumi.Input[int]]:
        """
        When the object has not been modified after the specified time, the operation is performed, otherwise 412 is returned.
        """
        return pulumi.get(self, "unmodified_since_constraint")

    @unmodified_since_constraint.setter
    def unmodified_since_constraint(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unmodified_since_constraint", value)


@pulumi.input_type
class BatchOperationCosPutObjectCopyAccessControlGrantsArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 permission: pulumi.Input[str],
                 type_identifier: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] identifier: User ID (UIN) in qcs format. For example: qcs::cam::uin/100000000001:uin/100000000001.
        :param pulumi.Input[str] permission: Specify a permission to be granted. Enumerated value: READ,WRITE,FULL_CONTROL.
        :param pulumi.Input[str] type_identifier: Specifies the type of Identifier. Currently, only user ID is supported. Enumerated value: ID.
        :param pulumi.Input[str] display_name: User name.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "type_identifier", type_identifier)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        User ID (UIN) in qcs format. For example: qcs::cam::uin/100000000001:uin/100000000001.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        """
        Specify a permission to be granted. Enumerated value: READ,WRITE,FULL_CONTROL.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="typeIdentifier")
    def type_identifier(self) -> pulumi.Input[str]:
        """
        Specifies the type of Identifier. Currently, only user ID is supported. Enumerated value: ID.
        """
        return pulumi.get(self, "type_identifier")

    @type_identifier.setter
    def type_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_identifier", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class BatchOperationCosPutObjectCopyNewObjectMetadataArgs:
    def __init__(__self__, *,
                 cache_control: Optional[pulumi.Input[str]] = None,
                 content_disposition: Optional[pulumi.Input[str]] = None,
                 content_encoding: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 http_expires_date: Optional[pulumi.Input[str]] = None,
                 sse_algorithm: Optional[pulumi.Input[str]] = None,
                 user_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs']]]] = None):
        """
        :param pulumi.Input[str] cache_control: The caching instructions defined in RFC 2616 are saved as object metadata.
        :param pulumi.Input[str] content_disposition: The file name defined in RFC 2616 is saved as object metadata.
        :param pulumi.Input[str] content_encoding: The encoding format defined in RFC 2616 is saved as object metadata.
        :param pulumi.Input[str] content_type: The content types defined in RFC 2616 are saved as object metadata.
        :param pulumi.Input[str] http_expires_date: The cache expiration time defined in RFC 2616 is saved as object metadata.
        :param pulumi.Input[str] sse_algorithm: Server encryption algorithm. Currently, only AES256 is supported.
        :param pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs']]] user_metadatas: Includes user-defined metadata.
        """
        if cache_control is not None:
            pulumi.set(__self__, "cache_control", cache_control)
        if content_disposition is not None:
            pulumi.set(__self__, "content_disposition", content_disposition)
        if content_encoding is not None:
            pulumi.set(__self__, "content_encoding", content_encoding)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if http_expires_date is not None:
            pulumi.set(__self__, "http_expires_date", http_expires_date)
        if sse_algorithm is not None:
            pulumi.set(__self__, "sse_algorithm", sse_algorithm)
        if user_metadatas is not None:
            pulumi.set(__self__, "user_metadatas", user_metadatas)

    @property
    @pulumi.getter(name="cacheControl")
    def cache_control(self) -> Optional[pulumi.Input[str]]:
        """
        The caching instructions defined in RFC 2616 are saved as object metadata.
        """
        return pulumi.get(self, "cache_control")

    @cache_control.setter
    def cache_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_control", value)

    @property
    @pulumi.getter(name="contentDisposition")
    def content_disposition(self) -> Optional[pulumi.Input[str]]:
        """
        The file name defined in RFC 2616 is saved as object metadata.
        """
        return pulumi.get(self, "content_disposition")

    @content_disposition.setter
    def content_disposition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disposition", value)

    @property
    @pulumi.getter(name="contentEncoding")
    def content_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        The encoding format defined in RFC 2616 is saved as object metadata.
        """
        return pulumi.get(self, "content_encoding")

    @content_encoding.setter
    def content_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_encoding", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        The content types defined in RFC 2616 are saved as object metadata.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="httpExpiresDate")
    def http_expires_date(self) -> Optional[pulumi.Input[str]]:
        """
        The cache expiration time defined in RFC 2616 is saved as object metadata.
        """
        return pulumi.get(self, "http_expires_date")

    @http_expires_date.setter
    def http_expires_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_expires_date", value)

    @property
    @pulumi.getter(name="sseAlgorithm")
    def sse_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Server encryption algorithm. Currently, only AES256 is supported.
        """
        return pulumi.get(self, "sse_algorithm")

    @sse_algorithm.setter
    def sse_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sse_algorithm", value)

    @property
    @pulumi.getter(name="userMetadatas")
    def user_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs']]]]:
        """
        Includes user-defined metadata.
        """
        return pulumi.get(self, "user_metadatas")

    @user_metadatas.setter
    def user_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs']]]]):
        pulumi.set(self, "user_metadatas", value)


@pulumi.input_type
class BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: key.
        :param pulumi.Input[str] value: value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BatchOperationCosPutObjectCopyNewObjectTaggingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: key.
        :param pulumi.Input[str] value: value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BatchReportArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 enabled: pulumi.Input[str],
                 format: pulumi.Input[str],
                 report_scope: pulumi.Input[str],
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: Delivery bucket for task completion reports.
        :param pulumi.Input[str] enabled: Whether to output the task completion report.
        :param pulumi.Input[str] format: Task completion report format information. Legal value: Report_CSV_V1.
        :param pulumi.Input[str] report_scope: Task completion report the task information that needs to be recorded to determine whether to record the execution information of all operations or the information of failed operations. Legal values: AllTasks, FailedTasksOnly.
        :param pulumi.Input[str] prefix: Prefix information for the task completion report. Length 0-256 bytes.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "report_scope", report_scope)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Delivery bucket for task completion reports.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[str]:
        """
        Whether to output the task completion report.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        Task completion report format information. Legal value: Report_CSV_V1.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="reportScope")
    def report_scope(self) -> pulumi.Input[str]:
        """
        Task completion report the task information that needs to be recorded to determine whether to record the execution information of all operations or the information of failed operations. Legal values: AllTasks, FailedTasksOnly.
        """
        return pulumi.get(self, "report_scope")

    @report_scope.setter
    def report_scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "report_scope", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix information for the task completion report. Length 0-256 bytes.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BucketCorsRuleArgs:
    def __init__(__self__, *,
                 allowed_headers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
                 expose_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_age_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_headers: Specifies which headers are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_methods: Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_origins: Specifies which origins are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] expose_headers: Specifies expose header in the response.
        :param pulumi.Input[int] max_age_seconds: Specifies time in seconds that browser can cache the response for a preflight request.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age_seconds is not None:
            pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies which headers are allowed.
        """
        return pulumi.get(self, "allowed_headers")

    @allowed_headers.setter
    def allowed_headers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_headers", value)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
        """
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specifies which origins are allowed.
        """
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies expose header in the response.
        """
        return pulumi.get(self, "expose_headers")

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expose_headers", value)

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies time in seconds that browser can cache the response for a preflight request.
        """
        return pulumi.get(self, "max_age_seconds")

    @max_age_seconds.setter
    def max_age_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age_seconds", value)


@pulumi.input_type
class BucketDomainCertificateAttachmentDomainCertificateArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateArgs'],
                 domain: pulumi.Input[str]):
        """
        :param pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateArgs'] certificate: Certificate info.
        :param pulumi.Input[str] domain: The name of domain.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateArgs']:
        """
        Certificate info.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateArgs']):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        The name of domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class BucketDomainCertificateAttachmentDomainCertificateCertificateArgs:
    def __init__(__self__, *,
                 cert_type: pulumi.Input[str],
                 custom_cert: pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs']):
        """
        :param pulumi.Input[str] cert_type: Certificate type.
        :param pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs'] custom_cert: Custom certificate.
        """
        pulumi.set(__self__, "cert_type", cert_type)
        pulumi.set(__self__, "custom_cert", custom_cert)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> pulumi.Input[str]:
        """
        Certificate type.
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter(name="customCert")
    def custom_cert(self) -> pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs']:
        """
        Custom certificate.
        """
        return pulumi.get(self, "custom_cert")

    @custom_cert.setter
    def custom_cert(self, value: pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs']):
        pulumi.set(self, "custom_cert", value)


@pulumi.input_type
class BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs:
    def __init__(__self__, *,
                 cert: pulumi.Input[str],
                 private_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cert: Public key of certificate.
        :param pulumi.Input[str] private_key: Private key of certificate.
        """
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Input[str]:
        """
        Public key of certificate.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        """
        Private key of certificate.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)


@pulumi.input_type
class BucketInventoryDestinationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 format: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input['BucketInventoryDestinationEncryptionArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: Bucket name.
        :param pulumi.Input[str] format: Format of the inventory result. Valid value: CSV.
        :param pulumi.Input[str] account_id: ID of the bucket owner.
        :param pulumi.Input['BucketInventoryDestinationEncryptionArgs'] encryption: Server-side encryption for the inventory result.
        :param pulumi.Input[str] prefix: Prefix of the inventory result.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "format", format)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        Format of the inventory result. Valid value: CSV.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the bucket owner.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['BucketInventoryDestinationEncryptionArgs']]:
        """
        Server-side encryption for the inventory result.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['BucketInventoryDestinationEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix of the inventory result.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BucketInventoryDestinationEncryptionArgs:
    def __init__(__self__, *,
                 sse_cos: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] sse_cos: Encryption with COS-managed key. This field can be left empty.
        """
        if sse_cos is not None:
            pulumi.set(__self__, "sse_cos", sse_cos)

    @property
    @pulumi.getter(name="sseCos")
    def sse_cos(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption with COS-managed key. This field can be left empty.
        """
        return pulumi.get(self, "sse_cos")

    @sse_cos.setter
    def sse_cos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sse_cos", value)


@pulumi.input_type
class BucketInventoryFilterArgs:
    def __init__(__self__, *,
                 period: Optional[pulumi.Input['BucketInventoryFilterPeriodArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['BucketInventoryFilterPeriodArgs'] period: Creation time range of the objects to analyze.
        :param pulumi.Input[str] prefix: Prefix of the objects to analyze.
        """
        if period is not None:
            pulumi.set(__self__, "period", period)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input['BucketInventoryFilterPeriodArgs']]:
        """
        Creation time range of the objects to analyze.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input['BucketInventoryFilterPeriodArgs']]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix of the objects to analyze.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BucketInventoryFilterPeriodArgs:
    def __init__(__self__, *,
                 end_time: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_time: Creation end time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688762.
        :param pulumi.Input[str] start_time: Creation start time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688761.
        """
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation end time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688762.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation start time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688761.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class BucketInventoryOptionalFieldsArgs:
    def __init__(__self__, *,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: Optional analysis items to include in the inventory result. The optional fields include Size, LastModifiedDate, StorageClass, ETag, IsMultipartUploaded, ReplicationStatus, Tag, Crc64, and x-cos-meta-*.
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional analysis items to include in the inventory result. The optional fields include Size, LastModifiedDate, StorageClass, ETag, IsMultipartUploaded, ReplicationStatus, Tag, Crc64, and x-cos-meta-*.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class BucketInventoryScheduleArgs:
    def __init__(__self__, *,
                 frequency: pulumi.Input[str]):
        """
        :param pulumi.Input[str] frequency: Frequency of the inventory job. Enumerated values: Daily, Weekly.
        """
        pulumi.set(__self__, "frequency", frequency)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[str]:
        """
        Frequency of the inventory job. Enumerated values: Daily, Weekly.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[str]):
        pulumi.set(self, "frequency", value)


@pulumi.input_type
class BucketLifecycleRuleArgs:
    def __init__(__self__, *,
                 filter_prefix: pulumi.Input[str],
                 abort_incomplete_multipart_upload: Optional[pulumi.Input['BucketLifecycleRuleAbortIncompleteMultipartUploadArgs']] = None,
                 expiration: Optional[pulumi.Input['BucketLifecycleRuleExpirationArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 non_current_expiration: Optional[pulumi.Input['BucketLifecycleRuleNonCurrentExpirationArgs']] = None,
                 non_current_transitions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleNonCurrentTransitionArgs']]]] = None,
                 transitions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleTransitionArgs']]]] = None):
        """
        :param pulumi.Input[str] filter_prefix: Object key prefix identifying one or more objects to which the rule applies.
        :param pulumi.Input['BucketLifecycleRuleAbortIncompleteMultipartUploadArgs'] abort_incomplete_multipart_upload: Set the maximum time a multipart upload is allowed to remain running.
        :param pulumi.Input['BucketLifecycleRuleExpirationArgs'] expiration: Specifies a period in the object's expire (documented below).
        :param pulumi.Input[str] id: A unique identifier for the rule. It can be up to 255 characters.
        :param pulumi.Input['BucketLifecycleRuleNonCurrentExpirationArgs'] non_current_expiration: Specifies when non current object versions shall expire.
        :param pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleNonCurrentTransitionArgs']]] non_current_transitions: Specifies a period in the non current object's transitions.
        :param pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleTransitionArgs']]] transitions: Specifies a period in the object's transitions (documented below).
        """
        pulumi.set(__self__, "filter_prefix", filter_prefix)
        if abort_incomplete_multipart_upload is not None:
            pulumi.set(__self__, "abort_incomplete_multipart_upload", abort_incomplete_multipart_upload)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if non_current_expiration is not None:
            pulumi.set(__self__, "non_current_expiration", non_current_expiration)
        if non_current_transitions is not None:
            pulumi.set(__self__, "non_current_transitions", non_current_transitions)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="filterPrefix")
    def filter_prefix(self) -> pulumi.Input[str]:
        """
        Object key prefix identifying one or more objects to which the rule applies.
        """
        return pulumi.get(self, "filter_prefix")

    @filter_prefix.setter
    def filter_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_prefix", value)

    @property
    @pulumi.getter(name="abortIncompleteMultipartUpload")
    def abort_incomplete_multipart_upload(self) -> Optional[pulumi.Input['BucketLifecycleRuleAbortIncompleteMultipartUploadArgs']]:
        """
        Set the maximum time a multipart upload is allowed to remain running.
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload")

    @abort_incomplete_multipart_upload.setter
    def abort_incomplete_multipart_upload(self, value: Optional[pulumi.Input['BucketLifecycleRuleAbortIncompleteMultipartUploadArgs']]):
        pulumi.set(self, "abort_incomplete_multipart_upload", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input['BucketLifecycleRuleExpirationArgs']]:
        """
        Specifies a period in the object's expire (documented below).
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input['BucketLifecycleRuleExpirationArgs']]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for the rule. It can be up to 255 characters.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="nonCurrentExpiration")
    def non_current_expiration(self) -> Optional[pulumi.Input['BucketLifecycleRuleNonCurrentExpirationArgs']]:
        """
        Specifies when non current object versions shall expire.
        """
        return pulumi.get(self, "non_current_expiration")

    @non_current_expiration.setter
    def non_current_expiration(self, value: Optional[pulumi.Input['BucketLifecycleRuleNonCurrentExpirationArgs']]):
        pulumi.set(self, "non_current_expiration", value)

    @property
    @pulumi.getter(name="nonCurrentTransitions")
    def non_current_transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleNonCurrentTransitionArgs']]]]:
        """
        Specifies a period in the non current object's transitions.
        """
        return pulumi.get(self, "non_current_transitions")

    @non_current_transitions.setter
    def non_current_transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleNonCurrentTransitionArgs']]]]):
        pulumi.set(self, "non_current_transitions", value)

    @property
    @pulumi.getter
    def transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleTransitionArgs']]]]:
        """
        Specifies a period in the object's transitions (documented below).
        """
        return pulumi.get(self, "transitions")

    @transitions.setter
    def transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleTransitionArgs']]]]):
        pulumi.set(self, "transitions", value)


@pulumi.input_type
class BucketLifecycleRuleAbortIncompleteMultipartUploadArgs:
    def __init__(__self__, *,
                 days_after_initiation: pulumi.Input[int]):
        """
        :param pulumi.Input[int] days_after_initiation: Specifies the number of days after the multipart upload starts that the upload must be completed. The maximum value is 3650.
        """
        pulumi.set(__self__, "days_after_initiation", days_after_initiation)

    @property
    @pulumi.getter(name="daysAfterInitiation")
    def days_after_initiation(self) -> pulumi.Input[int]:
        """
        Specifies the number of days after the multipart upload starts that the upload must be completed. The maximum value is 3650.
        """
        return pulumi.get(self, "days_after_initiation")

    @days_after_initiation.setter
    def days_after_initiation(self, value: pulumi.Input[int]):
        pulumi.set(self, "days_after_initiation", value)


@pulumi.input_type
class BucketLifecycleRuleExpirationArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[int]] = None,
                 delete_marker: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] date: Specifies the date after which you want the corresponding action to take effect.
        :param pulumi.Input[int] days: Specifies the number of days after object creation when the specific rule action takes effect.
        :param pulumi.Input[bool] delete_marker: Indicates whether the delete marker of an expired object will be removed.
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if delete_marker is not None:
            pulumi.set(__self__, "delete_marker", delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="deleteMarker")
    def delete_marker(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the delete marker of an expired object will be removed.
        """
        return pulumi.get(self, "delete_marker")

    @delete_marker.setter
    def delete_marker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_marker", value)


@pulumi.input_type
class BucketLifecycleRuleNonCurrentExpirationArgs:
    def __init__(__self__, *,
                 non_current_days: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] non_current_days: Number of days after non current object creation when the specific rule action takes effect. The maximum value is 3650.
        """
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days after non current object creation when the specific rule action takes effect. The maximum value is 3650.
        """
        return pulumi.get(self, "non_current_days")

    @non_current_days.setter
    def non_current_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "non_current_days", value)


@pulumi.input_type
class BucketLifecycleRuleNonCurrentTransitionArgs:
    def __init__(__self__, *,
                 storage_class: pulumi.Input[str],
                 non_current_days: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] storage_class: Specifies the storage class to which you want the non current object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        :param pulumi.Input[int] non_current_days: Number of days after non current object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Input[str]:
        """
        Specifies the storage class to which you want the non current object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days after non current object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "non_current_days")

    @non_current_days.setter
    def non_current_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "non_current_days", value)


@pulumi.input_type
class BucketLifecycleRuleTransitionArgs:
    def __init__(__self__, *,
                 storage_class: pulumi.Input[str],
                 date: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] storage_class: Specifies the storage class to which you want the object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        :param pulumi.Input[str] date: Specifies the date after which you want the corresponding action to take effect.
        :param pulumi.Input[int] days: Specifies the number of days after object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Input[str]:
        """
        Specifies the storage class to which you want the object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days", value)


@pulumi.input_type
class BucketOriginDomainRuleArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: Specify domain host.
        :param pulumi.Input[str] status: Domain status, default: `ENABLED`.
        :param pulumi.Input[str] type: Specify origin domain type, available values: `REST`, `WEBSITE`, `ACCELERATE`, default: `REST`.
        """
        pulumi.set(__self__, "domain", domain)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Specify domain host.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Domain status, default: `ENABLED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify origin domain type, available values: `REST`, `WEBSITE`, `ACCELERATE`, default: `REST`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class BucketOriginPullRuleArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 custom_http_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 follow_http_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 follow_query_string: Optional[pulumi.Input[bool]] = None,
                 follow_redirection: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 sync_back_to_source: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] host: Allows only a domain name or IP address. You can optionally append a port number to the address.
        :param pulumi.Input[int] priority: Priority of origin-pull rules, do not set the same value for multiple rules.
        :param pulumi.Input[Mapping[str, Any]] custom_http_headers: Specifies the custom headers that you can add for COS to access your origin server.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] follow_http_headers: Specifies the pass through headers when accessing the origin server.
        :param pulumi.Input[bool] follow_query_string: Specifies whether to pass through COS request query string when accessing the origin server.
        :param pulumi.Input[bool] follow_redirection: Specifies whether to follow 3XX redirect to another origin server to pull data from.
        :param pulumi.Input[str] prefix: Triggers the origin-pull rule when the requested file name matches this prefix.
        :param pulumi.Input[str] protocol: the protocol used for COS to access the specified origin server. The available value include `HTTP`, `HTTPS` and `FOLLOW`.
        :param pulumi.Input[bool] sync_back_to_source: If `true`, COS will not return 3XX status code when pulling data from an origin server. Current available zone: ap-beijing, ap-shanghai, ap-singapore, ap-mumbai.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "priority", priority)
        if custom_http_headers is not None:
            pulumi.set(__self__, "custom_http_headers", custom_http_headers)
        if follow_http_headers is not None:
            pulumi.set(__self__, "follow_http_headers", follow_http_headers)
        if follow_query_string is not None:
            pulumi.set(__self__, "follow_query_string", follow_query_string)
        if follow_redirection is not None:
            pulumi.set(__self__, "follow_redirection", follow_redirection)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sync_back_to_source is not None:
            pulumi.set(__self__, "sync_back_to_source", sync_back_to_source)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Allows only a domain name or IP address. You can optionally append a port number to the address.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        Priority of origin-pull rules, do not set the same value for multiple rules.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="customHttpHeaders")
    def custom_http_headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Specifies the custom headers that you can add for COS to access your origin server.
        """
        return pulumi.get(self, "custom_http_headers")

    @custom_http_headers.setter
    def custom_http_headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_http_headers", value)

    @property
    @pulumi.getter(name="followHttpHeaders")
    def follow_http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the pass through headers when accessing the origin server.
        """
        return pulumi.get(self, "follow_http_headers")

    @follow_http_headers.setter
    def follow_http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "follow_http_headers", value)

    @property
    @pulumi.getter(name="followQueryString")
    def follow_query_string(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to pass through COS request query string when accessing the origin server.
        """
        return pulumi.get(self, "follow_query_string")

    @follow_query_string.setter
    def follow_query_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_query_string", value)

    @property
    @pulumi.getter(name="followRedirection")
    def follow_redirection(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to follow 3XX redirect to another origin server to pull data from.
        """
        return pulumi.get(self, "follow_redirection")

    @follow_redirection.setter
    def follow_redirection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_redirection", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Triggers the origin-pull rule when the requested file name matches this prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        the protocol used for COS to access the specified origin server. The available value include `HTTP`, `HTTPS` and `FOLLOW`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="syncBackToSource")
    def sync_back_to_source(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, COS will not return 3XX status code when pulling data from an origin server. Current available zone: ap-beijing, ap-shanghai, ap-singapore, ap-mumbai.
        """
        return pulumi.get(self, "sync_back_to_source")

    @sync_back_to_source.setter
    def sync_back_to_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_back_to_source", value)


@pulumi.input_type
class BucketReplicaRuleArgs:
    def __init__(__self__, *,
                 destination_bucket: pulumi.Input[str],
                 status: pulumi.Input[str],
                 destination_storage_class: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] destination_bucket: Destination bucket identifier, format: `qcs::cos:<region>::<bucketname-appid>`. NOTE: destination bucket must enable versioning.
        :param pulumi.Input[str] status: Status identifier, available values: `Enabled`, `Disabled`.
        :param pulumi.Input[str] destination_storage_class: Storage class of destination, available values: `STANDARD`, `INTELLIGENT_TIERING`, `STANDARD_IA`. default is following current class of destination.
        :param pulumi.Input[str] id: Name of a specific rule.
        :param pulumi.Input[str] prefix: Prefix matching policy. Policies cannot overlap; otherwise, an error will be returned. To match the root directory, leave this parameter empty.
        """
        pulumi.set(__self__, "destination_bucket", destination_bucket)
        pulumi.set(__self__, "status", status)
        if destination_storage_class is not None:
            pulumi.set(__self__, "destination_storage_class", destination_storage_class)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationBucket")
    def destination_bucket(self) -> pulumi.Input[str]:
        """
        Destination bucket identifier, format: `qcs::cos:<region>::<bucketname-appid>`. NOTE: destination bucket must enable versioning.
        """
        return pulumi.get(self, "destination_bucket")

    @destination_bucket.setter
    def destination_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_bucket", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status identifier, available values: `Enabled`, `Disabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="destinationStorageClass")
    def destination_storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        Storage class of destination, available values: `STANDARD`, `INTELLIGENT_TIERING`, `STANDARD_IA`. default is following current class of destination.
        """
        return pulumi.get(self, "destination_storage_class")

    @destination_storage_class.setter
    def destination_storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_storage_class", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a specific rule.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix matching policy. Policies cannot overlap; otherwise, an error will be returned. To match the root directory, leave this parameter empty.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BucketWebsiteArgs:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 error_document: Optional[pulumi.Input[str]] = None,
                 index_document: Optional[pulumi.Input[str]] = None,
                 redirect_all_requests_to: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] endpoint: `Endpoint` of the static website.
        :param pulumi.Input[str] error_document: An absolute path to the document to return in case of a 4XX error.
        :param pulumi.Input[str] index_document: COS returns this index document when requests are made to the root domain or any of the subfolders.
        :param pulumi.Input[str] redirect_all_requests_to: Redirects all request configurations. Valid values: http, https. Default is `http`.
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)
        if redirect_all_requests_to is not None:
            pulumi.set(__self__, "redirect_all_requests_to", redirect_all_requests_to)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        `Endpoint` of the static website.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[pulumi.Input[str]]:
        """
        An absolute path to the document to return in case of a 4XX error.
        """
        return pulumi.get(self, "error_document")

    @error_document.setter
    def error_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_document", value)

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[pulumi.Input[str]]:
        """
        COS returns this index document when requests are made to the root domain or any of the subfolders.
        """
        return pulumi.get(self, "index_document")

    @index_document.setter
    def index_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_document", value)

    @property
    @pulumi.getter(name="redirectAllRequestsTo")
    def redirect_all_requests_to(self) -> Optional[pulumi.Input[str]]:
        """
        Redirects all request configurations. Valid values: http, https. Default is `http`.
        """
        return pulumi.get(self, "redirect_all_requests_to")

    @redirect_all_requests_to.setter
    def redirect_all_requests_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_all_requests_to", value)


