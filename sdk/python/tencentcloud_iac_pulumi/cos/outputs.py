# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BatchManifest',
    'BatchManifestLocation',
    'BatchManifestSpec',
    'BatchOperation',
    'BatchOperationCosInitiateRestoreObject',
    'BatchOperationCosPutObjectCopy',
    'BatchOperationCosPutObjectCopyAccessControlGrants',
    'BatchOperationCosPutObjectCopyNewObjectMetadata',
    'BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadata',
    'BatchOperationCosPutObjectCopyNewObjectTagging',
    'BatchReport',
    'BucketCorsRule',
    'BucketDomainCertificateAttachmentDomainCertificate',
    'BucketDomainCertificateAttachmentDomainCertificateCertificate',
    'BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert',
    'BucketInventoryDestination',
    'BucketInventoryDestinationEncryption',
    'BucketInventoryFilter',
    'BucketInventoryFilterPeriod',
    'BucketInventoryOptionalFields',
    'BucketInventorySchedule',
    'BucketLifecycleRule',
    'BucketLifecycleRuleAbortIncompleteMultipartUpload',
    'BucketLifecycleRuleExpiration',
    'BucketLifecycleRuleNonCurrentExpiration',
    'BucketLifecycleRuleNonCurrentTransition',
    'BucketLifecycleRuleTransition',
    'BucketOriginDomainRule',
    'BucketOriginPullRule',
    'BucketReplicaRule',
    'BucketWebsite',
    'GetBatchsJobResult',
    'GetBatchsJobProgressSummaryResult',
    'GetBucketInventorysInventoryResult',
    'GetBucketInventorysInventoryDestinationResult',
    'GetBucketInventorysInventoryDestinationEncryptionResult',
    'GetBucketInventorysInventoryFilterResult',
    'GetBucketInventorysInventoryFilterPeriodResult',
    'GetBucketInventorysInventoryOptionalFieldResult',
    'GetBucketInventorysInventoryScheduleResult',
    'GetBucketMultipartUploadsUploadResult',
    'GetBucketMultipartUploadsUploadInitiatorResult',
    'GetBucketMultipartUploadsUploadOwnerResult',
    'GetBucketsBucketListResult',
    'GetBucketsBucketListCorsRuleResult',
    'GetBucketsBucketListLifecycleRuleResult',
    'GetBucketsBucketListLifecycleRuleAbortIncompleteMultipartUploadResult',
    'GetBucketsBucketListLifecycleRuleExpirationResult',
    'GetBucketsBucketListLifecycleRuleNonCurrentExpirationResult',
    'GetBucketsBucketListLifecycleRuleNonCurrentTransitionResult',
    'GetBucketsBucketListLifecycleRuleTransitionResult',
    'GetBucketsBucketListOriginDomainRuleResult',
    'GetBucketsBucketListOriginPullRuleResult',
    'GetBucketsBucketListWebsiteResult',
]

@pulumi.output_type
class BatchManifest(dict):
    def __init__(__self__, *,
                 location: 'outputs.BatchManifestLocation',
                 spec: 'outputs.BatchManifestSpec'):
        """
        :param 'BatchManifestLocationArgs' location: The location information of the list of objects.
        :param 'BatchManifestSpecArgs' spec: Format information that describes the list of objects. If it is a CSV file, this element describes the fields contained in the manifest.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def location(self) -> 'outputs.BatchManifestLocation':
        """
        The location information of the list of objects.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def spec(self) -> 'outputs.BatchManifestSpec':
        """
        Format information that describes the list of objects. If it is a CSV file, this element describes the fields contained in the manifest.
        """
        return pulumi.get(self, "spec")


@pulumi.output_type
class BatchManifestLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectArn":
            suggest = "object_arn"
        elif key == "objectVersionId":
            suggest = "object_version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BatchManifestLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BatchManifestLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BatchManifestLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 etag: str,
                 object_arn: str,
                 object_version_id: Optional[str] = None):
        """
        :param str etag: Specifies the etag of the object list. Length 1-1024 bytes.
        :param str object_arn: Specifies the unique resource identifier of the object manifest, which is 1-1024 bytes long.
        :param str object_version_id: Specifies the version of the object manifest ID, which is 1-1024 bytes long.
        """
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "object_arn", object_arn)
        if object_version_id is not None:
            pulumi.set(__self__, "object_version_id", object_version_id)

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        Specifies the etag of the object list. Length 1-1024 bytes.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="objectArn")
    def object_arn(self) -> str:
        """
        Specifies the unique resource identifier of the object manifest, which is 1-1024 bytes long.
        """
        return pulumi.get(self, "object_arn")

    @property
    @pulumi.getter(name="objectVersionId")
    def object_version_id(self) -> Optional[str]:
        """
        Specifies the version of the object manifest ID, which is 1-1024 bytes long.
        """
        return pulumi.get(self, "object_version_id")


@pulumi.output_type
class BatchManifestSpec(dict):
    def __init__(__self__, *,
                 format: str,
                 fields: Optional[Sequence[str]] = None):
        """
        :param str format: Specifies the format information for the list of objects. Legal fields are: COSBatchOperations_CSV_V1, COSInventoryReport_CSV_V1.
        :param Sequence[str] fields: Describes the fields contained in the listing, which you need to use to specify CSV file fields when Format is COSBatchOperations_CSV_V1. Legal fields are: Ignore, Bucket, Key, VersionId.
        """
        pulumi.set(__self__, "format", format)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Specifies the format information for the list of objects. Legal fields are: COSBatchOperations_CSV_V1, COSInventoryReport_CSV_V1.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[str]]:
        """
        Describes the fields contained in the listing, which you need to use to specify CSV file fields when Format is COSBatchOperations_CSV_V1. Legal fields are: Ignore, Bucket, Key, VersionId.
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class BatchOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInitiateRestoreObject":
            suggest = "cos_initiate_restore_object"
        elif key == "cosPutObjectCopy":
            suggest = "cos_put_object_copy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BatchOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BatchOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BatchOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cos_initiate_restore_object: Optional['outputs.BatchOperationCosInitiateRestoreObject'] = None,
                 cos_put_object_copy: Optional['outputs.BatchOperationCosPutObjectCopy'] = None):
        """
        :param 'BatchOperationCosInitiateRestoreObjectArgs' cos_initiate_restore_object: Specifies the specific parameters for the batch restore operation for archive storage type objects in the inventory.
        :param 'BatchOperationCosPutObjectCopyArgs' cos_put_object_copy: Specifies the specific parameters for the batch copy operation on the objects in the list.
        """
        if cos_initiate_restore_object is not None:
            pulumi.set(__self__, "cos_initiate_restore_object", cos_initiate_restore_object)
        if cos_put_object_copy is not None:
            pulumi.set(__self__, "cos_put_object_copy", cos_put_object_copy)

    @property
    @pulumi.getter(name="cosInitiateRestoreObject")
    def cos_initiate_restore_object(self) -> Optional['outputs.BatchOperationCosInitiateRestoreObject']:
        """
        Specifies the specific parameters for the batch restore operation for archive storage type objects in the inventory.
        """
        return pulumi.get(self, "cos_initiate_restore_object")

    @property
    @pulumi.getter(name="cosPutObjectCopy")
    def cos_put_object_copy(self) -> Optional['outputs.BatchOperationCosPutObjectCopy']:
        """
        Specifies the specific parameters for the batch copy operation on the objects in the list.
        """
        return pulumi.get(self, "cos_put_object_copy")


@pulumi.output_type
class BatchOperationCosInitiateRestoreObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationInDays":
            suggest = "expiration_in_days"
        elif key == "jobTier":
            suggest = "job_tier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BatchOperationCosInitiateRestoreObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BatchOperationCosInitiateRestoreObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BatchOperationCosInitiateRestoreObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expiration_in_days: int,
                 job_tier: str):
        """
        :param int expiration_in_days: Sets the number of days after which the copy will be automatically expired and deleted, an integer in the range of 1-365.
        :param str job_tier: Select archive recovery model. Available values: Bulk, Standard.
        """
        pulumi.set(__self__, "expiration_in_days", expiration_in_days)
        pulumi.set(__self__, "job_tier", job_tier)

    @property
    @pulumi.getter(name="expirationInDays")
    def expiration_in_days(self) -> int:
        """
        Sets the number of days after which the copy will be automatically expired and deleted, an integer in the range of 1-365.
        """
        return pulumi.get(self, "expiration_in_days")

    @property
    @pulumi.getter(name="jobTier")
    def job_tier(self) -> str:
        """
        Select archive recovery model. Available values: Bulk, Standard.
        """
        return pulumi.get(self, "job_tier")


@pulumi.output_type
class BatchOperationCosPutObjectCopy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetResource":
            suggest = "target_resource"
        elif key == "accessControlDirective":
            suggest = "access_control_directive"
        elif key == "accessControlGrants":
            suggest = "access_control_grants"
        elif key == "cannedAccessControlList":
            suggest = "canned_access_control_list"
        elif key == "metadataDirective":
            suggest = "metadata_directive"
        elif key == "modifiedSinceConstraint":
            suggest = "modified_since_constraint"
        elif key == "newObjectMetadata":
            suggest = "new_object_metadata"
        elif key == "newObjectTaggings":
            suggest = "new_object_taggings"
        elif key == "prefixReplace":
            suggest = "prefix_replace"
        elif key == "resourcesPrefix":
            suggest = "resources_prefix"
        elif key == "storageClass":
            suggest = "storage_class"
        elif key == "taggingDirective":
            suggest = "tagging_directive"
        elif key == "targetKeyPrefix":
            suggest = "target_key_prefix"
        elif key == "unmodifiedSinceConstraint":
            suggest = "unmodified_since_constraint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BatchOperationCosPutObjectCopy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BatchOperationCosPutObjectCopy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BatchOperationCosPutObjectCopy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_resource: str,
                 access_control_directive: Optional[str] = None,
                 access_control_grants: Optional['outputs.BatchOperationCosPutObjectCopyAccessControlGrants'] = None,
                 canned_access_control_list: Optional[str] = None,
                 metadata_directive: Optional[str] = None,
                 modified_since_constraint: Optional[int] = None,
                 new_object_metadata: Optional['outputs.BatchOperationCosPutObjectCopyNewObjectMetadata'] = None,
                 new_object_taggings: Optional[Sequence['outputs.BatchOperationCosPutObjectCopyNewObjectTagging']] = None,
                 prefix_replace: Optional[bool] = None,
                 resources_prefix: Optional[str] = None,
                 storage_class: Optional[str] = None,
                 tagging_directive: Optional[str] = None,
                 target_key_prefix: Optional[str] = None,
                 unmodified_since_constraint: Optional[int] = None):
        """
        :param str target_resource: Sets the target bucket for the Copy. Use qcs to specify, for example, qcs::cos:ap-chengdu:uid/1250000000:examplebucket-1250000000.
        :param str access_control_directive: This element specifies how ACL is copied. Valid values:
               - Copy: inherits the source object ACL
               - Replaced: replace source ACL
               - Add: add a new ACL based on the source ACL.
        :param 'BatchOperationCosPutObjectCopyAccessControlGrantsArgs' access_control_grants: Controls the specific access to the object.
        :param str canned_access_control_list: Defines the ACL property of the object. Valid values: private, public-read.
        :param str metadata_directive: This element specifies whether to copy object metadata from the source object or replace it with metadata in the < NewObjectMetadata > element. Valid values are: Copy, Replaced, Add. Copy: inherit source object metadata; Replaced: replace source metadata; Add: add new metadata based on source metadata.
        :param int modified_since_constraint: When the object is modified after the specified time, the operation is performed, otherwise 412 is returned.
        :param 'BatchOperationCosPutObjectCopyNewObjectMetadataArgs' new_object_metadata: Configure the metadata for the object.
        :param Sequence['BatchOperationCosPutObjectCopyNewObjectTaggingArgs'] new_object_taggings: The label of the configuration object, which must be specified when the < TaggingDirective > value is Replace or Add.
        :param bool prefix_replace: Specifies whether the prefix of the source object needs to be replaced. A value of true indicates the replacement object prefix, which needs to be used with <ResourcesPrefix> and <TargetKeyPrefix>. Default value: false.
        :param str resources_prefix: This field is valid only when the < PrefixReplace > value is true. Specify the source object prefix to be replaced, and the replacement directory should end with `/`. Can be empty with a maximum length of 1024 bytes.
        :param str storage_class: Sets the storage level of the object. Enumerated value: STANDARD,STANDARD_IA. Default value: STANDARD.
        :param str tagging_directive: This element specifies whether to copy the object tag from the source object or replace it with the tag in the < NewObjectTagging > element. Valid values are: Copy, Replaced, Add. Copy: inherits the source object tag; Replaced: replaces the source tag; Add: adds a new tag based on the source tag.
        :param str target_key_prefix: This field is valid only when the <PrefixReplace> value is true. This value represents the replaced prefix, and the replacement directory should end with /. Can be empty with a maximum length of 1024 bytes.
        :param int unmodified_since_constraint: When the object has not been modified after the specified time, the operation is performed, otherwise 412 is returned.
        """
        pulumi.set(__self__, "target_resource", target_resource)
        if access_control_directive is not None:
            pulumi.set(__self__, "access_control_directive", access_control_directive)
        if access_control_grants is not None:
            pulumi.set(__self__, "access_control_grants", access_control_grants)
        if canned_access_control_list is not None:
            pulumi.set(__self__, "canned_access_control_list", canned_access_control_list)
        if metadata_directive is not None:
            pulumi.set(__self__, "metadata_directive", metadata_directive)
        if modified_since_constraint is not None:
            pulumi.set(__self__, "modified_since_constraint", modified_since_constraint)
        if new_object_metadata is not None:
            pulumi.set(__self__, "new_object_metadata", new_object_metadata)
        if new_object_taggings is not None:
            pulumi.set(__self__, "new_object_taggings", new_object_taggings)
        if prefix_replace is not None:
            pulumi.set(__self__, "prefix_replace", prefix_replace)
        if resources_prefix is not None:
            pulumi.set(__self__, "resources_prefix", resources_prefix)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if tagging_directive is not None:
            pulumi.set(__self__, "tagging_directive", tagging_directive)
        if target_key_prefix is not None:
            pulumi.set(__self__, "target_key_prefix", target_key_prefix)
        if unmodified_since_constraint is not None:
            pulumi.set(__self__, "unmodified_since_constraint", unmodified_since_constraint)

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> str:
        """
        Sets the target bucket for the Copy. Use qcs to specify, for example, qcs::cos:ap-chengdu:uid/1250000000:examplebucket-1250000000.
        """
        return pulumi.get(self, "target_resource")

    @property
    @pulumi.getter(name="accessControlDirective")
    def access_control_directive(self) -> Optional[str]:
        """
        This element specifies how ACL is copied. Valid values:
        - Copy: inherits the source object ACL
        - Replaced: replace source ACL
        - Add: add a new ACL based on the source ACL.
        """
        return pulumi.get(self, "access_control_directive")

    @property
    @pulumi.getter(name="accessControlGrants")
    def access_control_grants(self) -> Optional['outputs.BatchOperationCosPutObjectCopyAccessControlGrants']:
        """
        Controls the specific access to the object.
        """
        return pulumi.get(self, "access_control_grants")

    @property
    @pulumi.getter(name="cannedAccessControlList")
    def canned_access_control_list(self) -> Optional[str]:
        """
        Defines the ACL property of the object. Valid values: private, public-read.
        """
        return pulumi.get(self, "canned_access_control_list")

    @property
    @pulumi.getter(name="metadataDirective")
    def metadata_directive(self) -> Optional[str]:
        """
        This element specifies whether to copy object metadata from the source object or replace it with metadata in the < NewObjectMetadata > element. Valid values are: Copy, Replaced, Add. Copy: inherit source object metadata; Replaced: replace source metadata; Add: add new metadata based on source metadata.
        """
        return pulumi.get(self, "metadata_directive")

    @property
    @pulumi.getter(name="modifiedSinceConstraint")
    def modified_since_constraint(self) -> Optional[int]:
        """
        When the object is modified after the specified time, the operation is performed, otherwise 412 is returned.
        """
        return pulumi.get(self, "modified_since_constraint")

    @property
    @pulumi.getter(name="newObjectMetadata")
    def new_object_metadata(self) -> Optional['outputs.BatchOperationCosPutObjectCopyNewObjectMetadata']:
        """
        Configure the metadata for the object.
        """
        return pulumi.get(self, "new_object_metadata")

    @property
    @pulumi.getter(name="newObjectTaggings")
    def new_object_taggings(self) -> Optional[Sequence['outputs.BatchOperationCosPutObjectCopyNewObjectTagging']]:
        """
        The label of the configuration object, which must be specified when the < TaggingDirective > value is Replace or Add.
        """
        return pulumi.get(self, "new_object_taggings")

    @property
    @pulumi.getter(name="prefixReplace")
    def prefix_replace(self) -> Optional[bool]:
        """
        Specifies whether the prefix of the source object needs to be replaced. A value of true indicates the replacement object prefix, which needs to be used with <ResourcesPrefix> and <TargetKeyPrefix>. Default value: false.
        """
        return pulumi.get(self, "prefix_replace")

    @property
    @pulumi.getter(name="resourcesPrefix")
    def resources_prefix(self) -> Optional[str]:
        """
        This field is valid only when the < PrefixReplace > value is true. Specify the source object prefix to be replaced, and the replacement directory should end with `/`. Can be empty with a maximum length of 1024 bytes.
        """
        return pulumi.get(self, "resources_prefix")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[str]:
        """
        Sets the storage level of the object. Enumerated value: STANDARD,STANDARD_IA. Default value: STANDARD.
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter(name="taggingDirective")
    def tagging_directive(self) -> Optional[str]:
        """
        This element specifies whether to copy the object tag from the source object or replace it with the tag in the < NewObjectTagging > element. Valid values are: Copy, Replaced, Add. Copy: inherits the source object tag; Replaced: replaces the source tag; Add: adds a new tag based on the source tag.
        """
        return pulumi.get(self, "tagging_directive")

    @property
    @pulumi.getter(name="targetKeyPrefix")
    def target_key_prefix(self) -> Optional[str]:
        """
        This field is valid only when the <PrefixReplace> value is true. This value represents the replaced prefix, and the replacement directory should end with /. Can be empty with a maximum length of 1024 bytes.
        """
        return pulumi.get(self, "target_key_prefix")

    @property
    @pulumi.getter(name="unmodifiedSinceConstraint")
    def unmodified_since_constraint(self) -> Optional[int]:
        """
        When the object has not been modified after the specified time, the operation is performed, otherwise 412 is returned.
        """
        return pulumi.get(self, "unmodified_since_constraint")


@pulumi.output_type
class BatchOperationCosPutObjectCopyAccessControlGrants(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "typeIdentifier":
            suggest = "type_identifier"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BatchOperationCosPutObjectCopyAccessControlGrants. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BatchOperationCosPutObjectCopyAccessControlGrants.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BatchOperationCosPutObjectCopyAccessControlGrants.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identifier: str,
                 permission: str,
                 type_identifier: str,
                 display_name: Optional[str] = None):
        """
        :param str identifier: User ID (UIN) in qcs format. For example: qcs::cam::uin/100000000001:uin/100000000001.
        :param str permission: Specify a permission to be granted. Enumerated value: READ,WRITE,FULL_CONTROL.
        :param str type_identifier: Specifies the type of Identifier. Currently, only user ID is supported. Enumerated value: ID.
        :param str display_name: User name.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "type_identifier", type_identifier)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        User ID (UIN) in qcs format. For example: qcs::cam::uin/100000000001:uin/100000000001.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def permission(self) -> str:
        """
        Specify a permission to be granted. Enumerated value: READ,WRITE,FULL_CONTROL.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="typeIdentifier")
    def type_identifier(self) -> str:
        """
        Specifies the type of Identifier. Currently, only user ID is supported. Enumerated value: ID.
        """
        return pulumi.get(self, "type_identifier")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        User name.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class BatchOperationCosPutObjectCopyNewObjectMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheControl":
            suggest = "cache_control"
        elif key == "contentDisposition":
            suggest = "content_disposition"
        elif key == "contentEncoding":
            suggest = "content_encoding"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "httpExpiresDate":
            suggest = "http_expires_date"
        elif key == "sseAlgorithm":
            suggest = "sse_algorithm"
        elif key == "userMetadatas":
            suggest = "user_metadatas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BatchOperationCosPutObjectCopyNewObjectMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BatchOperationCosPutObjectCopyNewObjectMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BatchOperationCosPutObjectCopyNewObjectMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_control: Optional[str] = None,
                 content_disposition: Optional[str] = None,
                 content_encoding: Optional[str] = None,
                 content_type: Optional[str] = None,
                 http_expires_date: Optional[str] = None,
                 sse_algorithm: Optional[str] = None,
                 user_metadatas: Optional[Sequence['outputs.BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadata']] = None):
        """
        :param str cache_control: The caching instructions defined in RFC 2616 are saved as object metadata.
        :param str content_disposition: The file name defined in RFC 2616 is saved as object metadata.
        :param str content_encoding: The encoding format defined in RFC 2616 is saved as object metadata.
        :param str content_type: The content types defined in RFC 2616 are saved as object metadata.
        :param str http_expires_date: The cache expiration time defined in RFC 2616 is saved as object metadata.
        :param str sse_algorithm: Server encryption algorithm. Currently, only AES256 is supported.
        :param Sequence['BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs'] user_metadatas: Includes user-defined metadata.
        """
        if cache_control is not None:
            pulumi.set(__self__, "cache_control", cache_control)
        if content_disposition is not None:
            pulumi.set(__self__, "content_disposition", content_disposition)
        if content_encoding is not None:
            pulumi.set(__self__, "content_encoding", content_encoding)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if http_expires_date is not None:
            pulumi.set(__self__, "http_expires_date", http_expires_date)
        if sse_algorithm is not None:
            pulumi.set(__self__, "sse_algorithm", sse_algorithm)
        if user_metadatas is not None:
            pulumi.set(__self__, "user_metadatas", user_metadatas)

    @property
    @pulumi.getter(name="cacheControl")
    def cache_control(self) -> Optional[str]:
        """
        The caching instructions defined in RFC 2616 are saved as object metadata.
        """
        return pulumi.get(self, "cache_control")

    @property
    @pulumi.getter(name="contentDisposition")
    def content_disposition(self) -> Optional[str]:
        """
        The file name defined in RFC 2616 is saved as object metadata.
        """
        return pulumi.get(self, "content_disposition")

    @property
    @pulumi.getter(name="contentEncoding")
    def content_encoding(self) -> Optional[str]:
        """
        The encoding format defined in RFC 2616 is saved as object metadata.
        """
        return pulumi.get(self, "content_encoding")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        """
        The content types defined in RFC 2616 are saved as object metadata.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="httpExpiresDate")
    def http_expires_date(self) -> Optional[str]:
        """
        The cache expiration time defined in RFC 2616 is saved as object metadata.
        """
        return pulumi.get(self, "http_expires_date")

    @property
    @pulumi.getter(name="sseAlgorithm")
    def sse_algorithm(self) -> Optional[str]:
        """
        Server encryption algorithm. Currently, only AES256 is supported.
        """
        return pulumi.get(self, "sse_algorithm")

    @property
    @pulumi.getter(name="userMetadatas")
    def user_metadatas(self) -> Optional[Sequence['outputs.BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadata']]:
        """
        Includes user-defined metadata.
        """
        return pulumi.get(self, "user_metadatas")


@pulumi.output_type
class BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadata(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: key.
        :param str value: value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BatchOperationCosPutObjectCopyNewObjectTagging(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: key.
        :param str value: value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BatchReport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reportScope":
            suggest = "report_scope"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BatchReport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BatchReport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BatchReport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 enabled: str,
                 format: str,
                 report_scope: str,
                 prefix: Optional[str] = None):
        """
        :param str bucket: Delivery bucket for task completion reports.
        :param str enabled: Whether to output the task completion report.
        :param str format: Task completion report format information. Legal value: Report_CSV_V1.
        :param str report_scope: Task completion report the task information that needs to be recorded to determine whether to record the execution information of all operations or the information of failed operations. Legal values: AllTasks, FailedTasksOnly.
        :param str prefix: Prefix information for the task completion report. Length 0-256 bytes.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "report_scope", report_scope)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Delivery bucket for task completion reports.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def enabled(self) -> str:
        """
        Whether to output the task completion report.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Task completion report format information. Legal value: Report_CSV_V1.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="reportScope")
    def report_scope(self) -> str:
        """
        Task completion report the task information that needs to be recorded to determine whether to record the execution information of all operations or the information of failed operations. Legal values: AllTasks, FailedTasksOnly.
        """
        return pulumi.get(self, "report_scope")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix information for the task completion report. Length 0-256 bytes.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class BucketCorsRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedHeaders":
            suggest = "allowed_headers"
        elif key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "allowedOrigins":
            suggest = "allowed_origins"
        elif key == "exposeHeaders":
            suggest = "expose_headers"
        elif key == "maxAgeSeconds":
            suggest = "max_age_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketCorsRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketCorsRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketCorsRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 expose_headers: Optional[Sequence[str]] = None,
                 max_age_seconds: Optional[int] = None):
        """
        :param Sequence[str] allowed_headers: Specifies which headers are allowed.
        :param Sequence[str] allowed_methods: Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
        :param Sequence[str] allowed_origins: Specifies which origins are allowed.
        :param Sequence[str] expose_headers: Specifies expose header in the response.
        :param int max_age_seconds: Specifies time in seconds that browser can cache the response for a preflight request.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age_seconds is not None:
            pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        """
        Specifies which headers are allowed.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        Specifies which origins are allowed.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[str]]:
        """
        Specifies expose header in the response.
        """
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> Optional[int]:
        """
        Specifies time in seconds that browser can cache the response for a preflight request.
        """
        return pulumi.get(self, "max_age_seconds")


@pulumi.output_type
class BucketDomainCertificateAttachmentDomainCertificate(dict):
    def __init__(__self__, *,
                 certificate: 'outputs.BucketDomainCertificateAttachmentDomainCertificateCertificate',
                 domain: str):
        """
        :param 'BucketDomainCertificateAttachmentDomainCertificateCertificateArgs' certificate: Certificate info.
        :param str domain: The name of domain.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def certificate(self) -> 'outputs.BucketDomainCertificateAttachmentDomainCertificateCertificate':
        """
        Certificate info.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The name of domain.
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class BucketDomainCertificateAttachmentDomainCertificateCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certType":
            suggest = "cert_type"
        elif key == "customCert":
            suggest = "custom_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketDomainCertificateAttachmentDomainCertificateCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketDomainCertificateAttachmentDomainCertificateCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketDomainCertificateAttachmentDomainCertificateCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_type: str,
                 custom_cert: 'outputs.BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert'):
        """
        :param str cert_type: Certificate type.
        :param 'BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs' custom_cert: Custom certificate.
        """
        pulumi.set(__self__, "cert_type", cert_type)
        pulumi.set(__self__, "custom_cert", custom_cert)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> str:
        """
        Certificate type.
        """
        return pulumi.get(self, "cert_type")

    @property
    @pulumi.getter(name="customCert")
    def custom_cert(self) -> 'outputs.BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert':
        """
        Custom certificate.
        """
        return pulumi.get(self, "custom_cert")


@pulumi.output_type
class BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert: str,
                 private_key: str):
        """
        :param str cert: Public key of certificate.
        :param str private_key: Private key of certificate.
        """
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter
    def cert(self) -> str:
        """
        Public key of certificate.
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        """
        Private key of certificate.
        """
        return pulumi.get(self, "private_key")


@pulumi.output_type
class BucketInventoryDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketInventoryDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketInventoryDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketInventoryDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 format: str,
                 account_id: Optional[str] = None,
                 encryption: Optional['outputs.BucketInventoryDestinationEncryption'] = None,
                 prefix: Optional[str] = None):
        """
        :param str bucket: Bucket name.
        :param str format: Format of the inventory result. Valid value: CSV.
        :param str account_id: ID of the bucket owner.
        :param 'BucketInventoryDestinationEncryptionArgs' encryption: Server-side encryption for the inventory result.
        :param str prefix: Prefix of the inventory result.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "format", format)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format of the inventory result. Valid value: CSV.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        ID of the bucket owner.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def encryption(self) -> Optional['outputs.BucketInventoryDestinationEncryption']:
        """
        Server-side encryption for the inventory result.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix of the inventory result.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class BucketInventoryDestinationEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sseCos":
            suggest = "sse_cos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketInventoryDestinationEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketInventoryDestinationEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketInventoryDestinationEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sse_cos: Optional[str] = None):
        """
        :param str sse_cos: Encryption with COS-managed key. This field can be left empty.
        """
        if sse_cos is not None:
            pulumi.set(__self__, "sse_cos", sse_cos)

    @property
    @pulumi.getter(name="sseCos")
    def sse_cos(self) -> Optional[str]:
        """
        Encryption with COS-managed key. This field can be left empty.
        """
        return pulumi.get(self, "sse_cos")


@pulumi.output_type
class BucketInventoryFilter(dict):
    def __init__(__self__, *,
                 period: Optional['outputs.BucketInventoryFilterPeriod'] = None,
                 prefix: Optional[str] = None):
        """
        :param 'BucketInventoryFilterPeriodArgs' period: Creation time range of the objects to analyze.
        :param str prefix: Prefix of the objects to analyze.
        """
        if period is not None:
            pulumi.set(__self__, "period", period)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def period(self) -> Optional['outputs.BucketInventoryFilterPeriod']:
        """
        Creation time range of the objects to analyze.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix of the objects to analyze.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class BucketInventoryFilterPeriod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketInventoryFilterPeriod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketInventoryFilterPeriod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketInventoryFilterPeriod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        :param str end_time: Creation end time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688762.
        :param str start_time: Creation start time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688761.
        """
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        Creation end time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688762.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Creation start time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688761.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class BucketInventoryOptionalFields(dict):
    def __init__(__self__, *,
                 fields: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] fields: Optional analysis items to include in the inventory result. The optional fields include Size, LastModifiedDate, StorageClass, ETag, IsMultipartUploaded, ReplicationStatus, Tag, Crc64, and x-cos-meta-*.
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[str]]:
        """
        Optional analysis items to include in the inventory result. The optional fields include Size, LastModifiedDate, StorageClass, ETag, IsMultipartUploaded, ReplicationStatus, Tag, Crc64, and x-cos-meta-*.
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class BucketInventorySchedule(dict):
    def __init__(__self__, *,
                 frequency: str):
        """
        :param str frequency: Frequency of the inventory job. Enumerated values: Daily, Weekly.
        """
        pulumi.set(__self__, "frequency", frequency)

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        Frequency of the inventory job. Enumerated values: Daily, Weekly.
        """
        return pulumi.get(self, "frequency")


@pulumi.output_type
class BucketLifecycleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterPrefix":
            suggest = "filter_prefix"
        elif key == "abortIncompleteMultipartUpload":
            suggest = "abort_incomplete_multipart_upload"
        elif key == "nonCurrentExpiration":
            suggest = "non_current_expiration"
        elif key == "nonCurrentTransitions":
            suggest = "non_current_transitions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_prefix: str,
                 abort_incomplete_multipart_upload: Optional['outputs.BucketLifecycleRuleAbortIncompleteMultipartUpload'] = None,
                 expiration: Optional['outputs.BucketLifecycleRuleExpiration'] = None,
                 id: Optional[str] = None,
                 non_current_expiration: Optional['outputs.BucketLifecycleRuleNonCurrentExpiration'] = None,
                 non_current_transitions: Optional[Sequence['outputs.BucketLifecycleRuleNonCurrentTransition']] = None,
                 transitions: Optional[Sequence['outputs.BucketLifecycleRuleTransition']] = None):
        """
        :param str filter_prefix: Object key prefix identifying one or more objects to which the rule applies.
        :param 'BucketLifecycleRuleAbortIncompleteMultipartUploadArgs' abort_incomplete_multipart_upload: Set the maximum time a multipart upload is allowed to remain running.
        :param 'BucketLifecycleRuleExpirationArgs' expiration: Specifies a period in the object's expire (documented below).
        :param str id: A unique identifier for the rule. It can be up to 255 characters.
        :param 'BucketLifecycleRuleNonCurrentExpirationArgs' non_current_expiration: Specifies when non current object versions shall expire.
        :param Sequence['BucketLifecycleRuleNonCurrentTransitionArgs'] non_current_transitions: Specifies a period in the non current object's transitions.
        :param Sequence['BucketLifecycleRuleTransitionArgs'] transitions: Specifies a period in the object's transitions (documented below).
        """
        pulumi.set(__self__, "filter_prefix", filter_prefix)
        if abort_incomplete_multipart_upload is not None:
            pulumi.set(__self__, "abort_incomplete_multipart_upload", abort_incomplete_multipart_upload)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if non_current_expiration is not None:
            pulumi.set(__self__, "non_current_expiration", non_current_expiration)
        if non_current_transitions is not None:
            pulumi.set(__self__, "non_current_transitions", non_current_transitions)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="filterPrefix")
    def filter_prefix(self) -> str:
        """
        Object key prefix identifying one or more objects to which the rule applies.
        """
        return pulumi.get(self, "filter_prefix")

    @property
    @pulumi.getter(name="abortIncompleteMultipartUpload")
    def abort_incomplete_multipart_upload(self) -> Optional['outputs.BucketLifecycleRuleAbortIncompleteMultipartUpload']:
        """
        Set the maximum time a multipart upload is allowed to remain running.
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload")

    @property
    @pulumi.getter
    def expiration(self) -> Optional['outputs.BucketLifecycleRuleExpiration']:
        """
        Specifies a period in the object's expire (documented below).
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        A unique identifier for the rule. It can be up to 255 characters.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nonCurrentExpiration")
    def non_current_expiration(self) -> Optional['outputs.BucketLifecycleRuleNonCurrentExpiration']:
        """
        Specifies when non current object versions shall expire.
        """
        return pulumi.get(self, "non_current_expiration")

    @property
    @pulumi.getter(name="nonCurrentTransitions")
    def non_current_transitions(self) -> Optional[Sequence['outputs.BucketLifecycleRuleNonCurrentTransition']]:
        """
        Specifies a period in the non current object's transitions.
        """
        return pulumi.get(self, "non_current_transitions")

    @property
    @pulumi.getter
    def transitions(self) -> Optional[Sequence['outputs.BucketLifecycleRuleTransition']]:
        """
        Specifies a period in the object's transitions (documented below).
        """
        return pulumi.get(self, "transitions")


@pulumi.output_type
class BucketLifecycleRuleAbortIncompleteMultipartUpload(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysAfterInitiation":
            suggest = "days_after_initiation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRuleAbortIncompleteMultipartUpload. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRuleAbortIncompleteMultipartUpload.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRuleAbortIncompleteMultipartUpload.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_after_initiation: int):
        """
        :param int days_after_initiation: Specifies the number of days after the multipart upload starts that the upload must be completed. The maximum value is 3650.
        """
        pulumi.set(__self__, "days_after_initiation", days_after_initiation)

    @property
    @pulumi.getter(name="daysAfterInitiation")
    def days_after_initiation(self) -> int:
        """
        Specifies the number of days after the multipart upload starts that the upload must be completed. The maximum value is 3650.
        """
        return pulumi.get(self, "days_after_initiation")


@pulumi.output_type
class BucketLifecycleRuleExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteMarker":
            suggest = "delete_marker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRuleExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRuleExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRuleExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 days: Optional[int] = None,
                 delete_marker: Optional[bool] = None):
        """
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        :param bool delete_marker: Indicates whether the delete marker of an expired object will be removed.
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if delete_marker is not None:
            pulumi.set(__self__, "delete_marker", delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="deleteMarker")
    def delete_marker(self) -> Optional[bool]:
        """
        Indicates whether the delete marker of an expired object will be removed.
        """
        return pulumi.get(self, "delete_marker")


@pulumi.output_type
class BucketLifecycleRuleNonCurrentExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nonCurrentDays":
            suggest = "non_current_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRuleNonCurrentExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRuleNonCurrentExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRuleNonCurrentExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 non_current_days: Optional[int] = None):
        """
        :param int non_current_days: Number of days after non current object creation when the specific rule action takes effect. The maximum value is 3650.
        """
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[int]:
        """
        Number of days after non current object creation when the specific rule action takes effect. The maximum value is 3650.
        """
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class BucketLifecycleRuleNonCurrentTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"
        elif key == "nonCurrentDays":
            suggest = "non_current_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRuleNonCurrentTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRuleNonCurrentTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRuleNonCurrentTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_class: str,
                 non_current_days: Optional[int] = None):
        """
        :param str storage_class: Specifies the storage class to which you want the non current object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        :param int non_current_days: Number of days after non current object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Specifies the storage class to which you want the non current object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[int]:
        """
        Number of days after non current object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class BucketLifecycleRuleTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRuleTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRuleTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRuleTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_class: str,
                 date: Optional[str] = None,
                 days: Optional[int] = None):
        """
        :param str storage_class: Specifies the storage class to which you want the object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Specifies the storage class to which you want the object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class BucketOriginDomainRule(dict):
    def __init__(__self__, *,
                 domain: str,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str domain: Specify domain host.
        :param str status: Domain status, default: `ENABLED`.
        :param str type: Specify origin domain type, available values: `REST`, `WEBSITE`, `ACCELERATE`, default: `REST`.
        """
        pulumi.set(__self__, "domain", domain)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Specify domain host.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Domain status, default: `ENABLED`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specify origin domain type, available values: `REST`, `WEBSITE`, `ACCELERATE`, default: `REST`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class BucketOriginPullRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customHttpHeaders":
            suggest = "custom_http_headers"
        elif key == "followHttpHeaders":
            suggest = "follow_http_headers"
        elif key == "followQueryString":
            suggest = "follow_query_string"
        elif key == "followRedirection":
            suggest = "follow_redirection"
        elif key == "syncBackToSource":
            suggest = "sync_back_to_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketOriginPullRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketOriginPullRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketOriginPullRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 priority: int,
                 custom_http_headers: Optional[Mapping[str, Any]] = None,
                 follow_http_headers: Optional[Sequence[str]] = None,
                 follow_query_string: Optional[bool] = None,
                 follow_redirection: Optional[bool] = None,
                 prefix: Optional[str] = None,
                 protocol: Optional[str] = None,
                 sync_back_to_source: Optional[bool] = None):
        """
        :param str host: Allows only a domain name or IP address. You can optionally append a port number to the address.
        :param int priority: Priority of origin-pull rules, do not set the same value for multiple rules.
        :param Mapping[str, Any] custom_http_headers: Specifies the custom headers that you can add for COS to access your origin server.
        :param Sequence[str] follow_http_headers: Specifies the pass through headers when accessing the origin server.
        :param bool follow_query_string: Specifies whether to pass through COS request query string when accessing the origin server.
        :param bool follow_redirection: Specifies whether to follow 3XX redirect to another origin server to pull data from.
        :param str prefix: Triggers the origin-pull rule when the requested file name matches this prefix.
        :param str protocol: the protocol used for COS to access the specified origin server. The available value include `HTTP`, `HTTPS` and `FOLLOW`.
        :param bool sync_back_to_source: If `true`, COS will not return 3XX status code when pulling data from an origin server. Current available zone: ap-beijing, ap-shanghai, ap-singapore, ap-mumbai.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "priority", priority)
        if custom_http_headers is not None:
            pulumi.set(__self__, "custom_http_headers", custom_http_headers)
        if follow_http_headers is not None:
            pulumi.set(__self__, "follow_http_headers", follow_http_headers)
        if follow_query_string is not None:
            pulumi.set(__self__, "follow_query_string", follow_query_string)
        if follow_redirection is not None:
            pulumi.set(__self__, "follow_redirection", follow_redirection)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sync_back_to_source is not None:
            pulumi.set(__self__, "sync_back_to_source", sync_back_to_source)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Allows only a domain name or IP address. You can optionally append a port number to the address.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority of origin-pull rules, do not set the same value for multiple rules.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="customHttpHeaders")
    def custom_http_headers(self) -> Optional[Mapping[str, Any]]:
        """
        Specifies the custom headers that you can add for COS to access your origin server.
        """
        return pulumi.get(self, "custom_http_headers")

    @property
    @pulumi.getter(name="followHttpHeaders")
    def follow_http_headers(self) -> Optional[Sequence[str]]:
        """
        Specifies the pass through headers when accessing the origin server.
        """
        return pulumi.get(self, "follow_http_headers")

    @property
    @pulumi.getter(name="followQueryString")
    def follow_query_string(self) -> Optional[bool]:
        """
        Specifies whether to pass through COS request query string when accessing the origin server.
        """
        return pulumi.get(self, "follow_query_string")

    @property
    @pulumi.getter(name="followRedirection")
    def follow_redirection(self) -> Optional[bool]:
        """
        Specifies whether to follow 3XX redirect to another origin server to pull data from.
        """
        return pulumi.get(self, "follow_redirection")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Triggers the origin-pull rule when the requested file name matches this prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        the protocol used for COS to access the specified origin server. The available value include `HTTP`, `HTTPS` and `FOLLOW`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="syncBackToSource")
    def sync_back_to_source(self) -> Optional[bool]:
        """
        If `true`, COS will not return 3XX status code when pulling data from an origin server. Current available zone: ap-beijing, ap-shanghai, ap-singapore, ap-mumbai.
        """
        return pulumi.get(self, "sync_back_to_source")


@pulumi.output_type
class BucketReplicaRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBucket":
            suggest = "destination_bucket"
        elif key == "destinationStorageClass":
            suggest = "destination_storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketReplicaRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketReplicaRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketReplicaRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_bucket: str,
                 status: str,
                 destination_storage_class: Optional[str] = None,
                 id: Optional[str] = None,
                 prefix: Optional[str] = None):
        """
        :param str destination_bucket: Destination bucket identifier, format: `qcs::cos:<region>::<bucketname-appid>`. NOTE: destination bucket must enable versioning.
        :param str status: Status identifier, available values: `Enabled`, `Disabled`.
        :param str destination_storage_class: Storage class of destination, available values: `STANDARD`, `INTELLIGENT_TIERING`, `STANDARD_IA`. default is following current class of destination.
        :param str id: Name of a specific rule.
        :param str prefix: Prefix matching policy. Policies cannot overlap; otherwise, an error will be returned. To match the root directory, leave this parameter empty.
        """
        pulumi.set(__self__, "destination_bucket", destination_bucket)
        pulumi.set(__self__, "status", status)
        if destination_storage_class is not None:
            pulumi.set(__self__, "destination_storage_class", destination_storage_class)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationBucket")
    def destination_bucket(self) -> str:
        """
        Destination bucket identifier, format: `qcs::cos:<region>::<bucketname-appid>`. NOTE: destination bucket must enable versioning.
        """
        return pulumi.get(self, "destination_bucket")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status identifier, available values: `Enabled`, `Disabled`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="destinationStorageClass")
    def destination_storage_class(self) -> Optional[str]:
        """
        Storage class of destination, available values: `STANDARD`, `INTELLIGENT_TIERING`, `STANDARD_IA`. default is following current class of destination.
        """
        return pulumi.get(self, "destination_storage_class")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Name of a specific rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix matching policy. Policies cannot overlap; otherwise, an error will be returned. To match the root directory, leave this parameter empty.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class BucketWebsite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorDocument":
            suggest = "error_document"
        elif key == "indexDocument":
            suggest = "index_document"
        elif key == "redirectAllRequestsTo":
            suggest = "redirect_all_requests_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketWebsite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketWebsite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketWebsite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: Optional[str] = None,
                 error_document: Optional[str] = None,
                 index_document: Optional[str] = None,
                 redirect_all_requests_to: Optional[str] = None):
        """
        :param str endpoint: `Endpoint` of the static website.
        :param str error_document: An absolute path to the document to return in case of a 4XX error.
        :param str index_document: COS returns this index document when requests are made to the root domain or any of the subfolders.
        :param str redirect_all_requests_to: Redirects all request configurations. Valid values: http, https. Default is `http`.
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)
        if redirect_all_requests_to is not None:
            pulumi.set(__self__, "redirect_all_requests_to", redirect_all_requests_to)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        """
        `Endpoint` of the static website.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[str]:
        """
        An absolute path to the document to return in case of a 4XX error.
        """
        return pulumi.get(self, "error_document")

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[str]:
        """
        COS returns this index document when requests are made to the root domain or any of the subfolders.
        """
        return pulumi.get(self, "index_document")

    @property
    @pulumi.getter(name="redirectAllRequestsTo")
    def redirect_all_requests_to(self) -> Optional[str]:
        """
        Redirects all request configurations. Valid values: http, https. Default is `http`.
        """
        return pulumi.get(self, "redirect_all_requests_to")


@pulumi.output_type
class GetBatchsJobResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 description: str,
                 job_id: str,
                 operation: str,
                 priority: int,
                 progress_summaries: Sequence['outputs.GetBatchsJobProgressSummaryResult'],
                 status: str,
                 termination_date: str):
        """
        :param str creation_time: Job creation time.
        :param str description: Mission description. The length is limited to 0-256 bytes.
        :param str job_id: Job ID. The length is limited to 1-64 bytes.
        :param str operation: Actions performed on objects in a batch processing job. For example, COSPutObjectCopy.
        :param int priority: Mission priority. Tasks with higher values will be given priority. The priority size is limited to 0-2147483647.
        :param Sequence['GetBatchsJobProgressSummaryArgs'] progress_summaries: Summary of the status of task implementation. Describe the total number of operations performed in this task, the number of successful operations, and the number of failed operations.
        :param str status: Task execution status. Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
        :param str termination_date: The end time of the batch processing job.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "progress_summaries", progress_summaries)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "termination_date", termination_date)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Job creation time.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Mission description. The length is limited to 0-256 bytes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        """
        Job ID. The length is limited to 1-64 bytes.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        Actions performed on objects in a batch processing job. For example, COSPutObjectCopy.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Mission priority. Tasks with higher values will be given priority. The priority size is limited to 0-2147483647.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="progressSummaries")
    def progress_summaries(self) -> Sequence['outputs.GetBatchsJobProgressSummaryResult']:
        """
        Summary of the status of task implementation. Describe the total number of operations performed in this task, the number of successful operations, and the number of failed operations.
        """
        return pulumi.get(self, "progress_summaries")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Task execution status. Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="terminationDate")
    def termination_date(self) -> str:
        """
        The end time of the batch processing job.
        """
        return pulumi.get(self, "termination_date")


@pulumi.output_type
class GetBatchsJobProgressSummaryResult(dict):
    def __init__(__self__, *,
                 number_of_tasks_failed: int,
                 number_of_tasks_succeeded: int,
                 total_number_of_tasks: int):
        """
        :param int number_of_tasks_failed: The current failed Operand.
        :param int number_of_tasks_succeeded: The current successful Operand.
        :param int total_number_of_tasks: Total Operand.
        """
        pulumi.set(__self__, "number_of_tasks_failed", number_of_tasks_failed)
        pulumi.set(__self__, "number_of_tasks_succeeded", number_of_tasks_succeeded)
        pulumi.set(__self__, "total_number_of_tasks", total_number_of_tasks)

    @property
    @pulumi.getter(name="numberOfTasksFailed")
    def number_of_tasks_failed(self) -> int:
        """
        The current failed Operand.
        """
        return pulumi.get(self, "number_of_tasks_failed")

    @property
    @pulumi.getter(name="numberOfTasksSucceeded")
    def number_of_tasks_succeeded(self) -> int:
        """
        The current successful Operand.
        """
        return pulumi.get(self, "number_of_tasks_succeeded")

    @property
    @pulumi.getter(name="totalNumberOfTasks")
    def total_number_of_tasks(self) -> int:
        """
        Total Operand.
        """
        return pulumi.get(self, "total_number_of_tasks")


@pulumi.output_type
class GetBucketInventorysInventoryResult(dict):
    def __init__(__self__, *,
                 destinations: Sequence['outputs.GetBucketInventorysInventoryDestinationResult'],
                 filters: Sequence['outputs.GetBucketInventorysInventoryFilterResult'],
                 id: str,
                 included_object_versions: str,
                 is_enabled: str,
                 schedules: Sequence['outputs.GetBucketInventorysInventoryScheduleResult'],
                 optional_fields: Optional[Sequence['outputs.GetBucketInventorysInventoryOptionalFieldResult']] = None):
        """
        :param Sequence['GetBucketInventorysInventoryDestinationArgs'] destinations: Information about the inventory result destination.
        :param Sequence['GetBucketInventorysInventoryFilterArgs'] filters: Filters objects prefixed with the specified value to analyze.
        :param str id: Whether to enable the inventory. true or false.
        :param str included_object_versions: Whether to include object versions in the inventory. All or No.
        :param str is_enabled: Whether to enable the inventory. true or false.
        :param Sequence['GetBucketInventorysInventoryScheduleArgs'] schedules: Inventory job cycle.
        :param Sequence['GetBucketInventorysInventoryOptionalFieldArgs'] optional_fields: Analysis items to include in the inventory result	.
        """
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "included_object_versions", included_object_versions)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "schedules", schedules)
        if optional_fields is not None:
            pulumi.set(__self__, "optional_fields", optional_fields)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.GetBucketInventorysInventoryDestinationResult']:
        """
        Information about the inventory result destination.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetBucketInventorysInventoryFilterResult']:
        """
        Filters objects prefixed with the specified value to analyze.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Whether to enable the inventory. true or false.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includedObjectVersions")
    def included_object_versions(self) -> str:
        """
        Whether to include object versions in the inventory. All or No.
        """
        return pulumi.get(self, "included_object_versions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> str:
        """
        Whether to enable the inventory. true or false.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetBucketInventorysInventoryScheduleResult']:
        """
        Inventory job cycle.
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> Optional[Sequence['outputs.GetBucketInventorysInventoryOptionalFieldResult']]:
        """
        Analysis items to include in the inventory result	.
        """
        return pulumi.get(self, "optional_fields")


@pulumi.output_type
class GetBucketInventorysInventoryDestinationResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 bucket: str,
                 encryptions: Sequence['outputs.GetBucketInventorysInventoryDestinationEncryptionResult'],
                 format: str,
                 prefix: str):
        """
        :param str account_id: ID of the bucket owner.
        :param str bucket: Bucket.
        :param Sequence['GetBucketInventorysInventoryDestinationEncryptionArgs'] encryptions: Server-side encryption for the inventory result.
        :param str format: Format of the inventory result. Valid value: CSV.
        :param str prefix: Prefix of the objects to analyze.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "encryptions", encryptions)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        ID of the bucket owner.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def encryptions(self) -> Sequence['outputs.GetBucketInventorysInventoryDestinationEncryptionResult']:
        """
        Server-side encryption for the inventory result.
        """
        return pulumi.get(self, "encryptions")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format of the inventory result. Valid value: CSV.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix of the objects to analyze.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetBucketInventorysInventoryDestinationEncryptionResult(dict):
    def __init__(__self__, *,
                 sse_cos: str):
        """
        :param str sse_cos: Encryption with COS-managed key. This field can be left empty.
        """
        pulumi.set(__self__, "sse_cos", sse_cos)

    @property
    @pulumi.getter(name="sseCos")
    def sse_cos(self) -> str:
        """
        Encryption with COS-managed key. This field can be left empty.
        """
        return pulumi.get(self, "sse_cos")


@pulumi.output_type
class GetBucketInventorysInventoryFilterResult(dict):
    def __init__(__self__, *,
                 periods: Sequence['outputs.GetBucketInventorysInventoryFilterPeriodResult'],
                 prefix: str):
        """
        :param Sequence['GetBucketInventorysInventoryFilterPeriodArgs'] periods: Creation time range of the objects to analyze.
        :param str prefix: Prefix of the objects to analyze.
        """
        pulumi.set(__self__, "periods", periods)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def periods(self) -> Sequence['outputs.GetBucketInventorysInventoryFilterPeriodResult']:
        """
        Creation time range of the objects to analyze.
        """
        return pulumi.get(self, "periods")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix of the objects to analyze.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetBucketInventorysInventoryFilterPeriodResult(dict):
    def __init__(__self__, *,
                 end_time: str,
                 start_time: str):
        """
        :param str end_time: Creation end time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688762.
        :param str start_time: Creation start time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688761.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Creation end time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688762.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Creation start time of the objects to analyze. The parameter is a timestamp in seconds, for example, 1568688761.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetBucketInventorysInventoryOptionalFieldResult(dict):
    def __init__(__self__, *,
                 fields: Sequence[str]):
        """
        :param Sequence[str] fields: Optional analysis items to include in the inventory result. The optional fields include Size, LastModifiedDate, StorageClass, ETag, IsMultipartUploaded, ReplicationStatus, Tag, Crc64, and x-cos-meta-*.
        """
        pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Sequence[str]:
        """
        Optional analysis items to include in the inventory result. The optional fields include Size, LastModifiedDate, StorageClass, ETag, IsMultipartUploaded, ReplicationStatus, Tag, Crc64, and x-cos-meta-*.
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class GetBucketInventorysInventoryScheduleResult(dict):
    def __init__(__self__, *,
                 frequency: str):
        """
        :param str frequency: Frequency of the inventory job. Enumerated values: Daily, Weekly.
        """
        pulumi.set(__self__, "frequency", frequency)

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        Frequency of the inventory job. Enumerated values: Daily, Weekly.
        """
        return pulumi.get(self, "frequency")


@pulumi.output_type
class GetBucketMultipartUploadsUploadResult(dict):
    def __init__(__self__, *,
                 initiated: str,
                 initiators: Sequence['outputs.GetBucketMultipartUploadsUploadInitiatorResult'],
                 key: str,
                 owners: Sequence['outputs.GetBucketMultipartUploadsUploadOwnerResult'],
                 storage_class: str,
                 upload_id: str):
        """
        :param str initiated: The starting time of multipart upload.
        :param Sequence['GetBucketMultipartUploadsUploadInitiatorArgs'] initiators: Used to represent the information of the initiator of this upload.
        :param str key: Name of the Object.
        :param Sequence['GetBucketMultipartUploadsUploadOwnerArgs'] owners: Information used to represent the owner of these chunks.
        :param str storage_class: Used to represent the storage level of a chunk. Enumerated value: STANDARD,STANDARD_IA,ARCHIVE.
        :param str upload_id: Mark the ID of this multipart upload.
        """
        pulumi.set(__self__, "initiated", initiated)
        pulumi.set(__self__, "initiators", initiators)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "owners", owners)
        pulumi.set(__self__, "storage_class", storage_class)
        pulumi.set(__self__, "upload_id", upload_id)

    @property
    @pulumi.getter
    def initiated(self) -> str:
        """
        The starting time of multipart upload.
        """
        return pulumi.get(self, "initiated")

    @property
    @pulumi.getter
    def initiators(self) -> Sequence['outputs.GetBucketMultipartUploadsUploadInitiatorResult']:
        """
        Used to represent the information of the initiator of this upload.
        """
        return pulumi.get(self, "initiators")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the Object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def owners(self) -> Sequence['outputs.GetBucketMultipartUploadsUploadOwnerResult']:
        """
        Information used to represent the owner of these chunks.
        """
        return pulumi.get(self, "owners")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Used to represent the storage level of a chunk. Enumerated value: STANDARD,STANDARD_IA,ARCHIVE.
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter(name="uploadId")
    def upload_id(self) -> str:
        """
        Mark the ID of this multipart upload.
        """
        return pulumi.get(self, "upload_id")


@pulumi.output_type
class GetBucketMultipartUploadsUploadInitiatorResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Abbreviation for user identity ID (UIN).
        :param str id: The user's unique CAM identity ID.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Abbreviation for user identity ID (UIN).
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The user's unique CAM identity ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetBucketMultipartUploadsUploadOwnerResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str):
        """
        :param str display_name: Abbreviation for user identity ID (UIN).
        :param str id: The user's unique CAM identity ID.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Abbreviation for user identity ID (UIN).
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The user's unique CAM identity ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetBucketsBucketListResult(dict):
    def __init__(__self__, *,
                 acl: str,
                 acl_body: str,
                 bucket: str,
                 cors_rules: Sequence['outputs.GetBucketsBucketListCorsRuleResult'],
                 cos_bucket_url: str,
                 lifecycle_rules: Sequence['outputs.GetBucketsBucketListLifecycleRuleResult'],
                 origin_domain_rules: Sequence['outputs.GetBucketsBucketListOriginDomainRuleResult'],
                 origin_pull_rules: Sequence['outputs.GetBucketsBucketListOriginPullRuleResult'],
                 tags: Mapping[str, Any],
                 websites: Sequence['outputs.GetBucketsBucketListWebsiteResult']):
        """
        :param str acl: Bucket access control configurations.
        :param str acl_body: Bucket verbose acl configurations.
        :param str bucket: Bucket name, the format likes `<bucket>-<appid>`.
        :param Sequence['GetBucketsBucketListCorsRuleArgs'] cors_rules: A list of CORS rule configurations.
        :param str cos_bucket_url: The URL of this cos bucket.
        :param Sequence['GetBucketsBucketListLifecycleRuleArgs'] lifecycle_rules: The lifecycle configuration of a bucket.
        :param Sequence['GetBucketsBucketListOriginDomainRuleArgs'] origin_domain_rules: Bucket origin domain rules.
        :param Sequence['GetBucketsBucketListOriginPullRuleArgs'] origin_pull_rules: Bucket Origin-Pull rules.
        :param Mapping[str, Any] tags: Tags to filter bucket.
        :param Sequence['GetBucketsBucketListWebsiteArgs'] websites: A list of one element containing configuration parameters used when the bucket is used as a website.
        """
        pulumi.set(__self__, "acl", acl)
        pulumi.set(__self__, "acl_body", acl_body)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "cors_rules", cors_rules)
        pulumi.set(__self__, "cos_bucket_url", cos_bucket_url)
        pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        pulumi.set(__self__, "origin_domain_rules", origin_domain_rules)
        pulumi.set(__self__, "origin_pull_rules", origin_pull_rules)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "websites", websites)

    @property
    @pulumi.getter
    def acl(self) -> str:
        """
        Bucket access control configurations.
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="aclBody")
    def acl_body(self) -> str:
        """
        Bucket verbose acl configurations.
        """
        return pulumi.get(self, "acl_body")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Bucket name, the format likes `<bucket>-<appid>`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Sequence['outputs.GetBucketsBucketListCorsRuleResult']:
        """
        A list of CORS rule configurations.
        """
        return pulumi.get(self, "cors_rules")

    @property
    @pulumi.getter(name="cosBucketUrl")
    def cos_bucket_url(self) -> str:
        """
        The URL of this cos bucket.
        """
        return pulumi.get(self, "cos_bucket_url")

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleResult']:
        """
        The lifecycle configuration of a bucket.
        """
        return pulumi.get(self, "lifecycle_rules")

    @property
    @pulumi.getter(name="originDomainRules")
    def origin_domain_rules(self) -> Sequence['outputs.GetBucketsBucketListOriginDomainRuleResult']:
        """
        Bucket origin domain rules.
        """
        return pulumi.get(self, "origin_domain_rules")

    @property
    @pulumi.getter(name="originPullRules")
    def origin_pull_rules(self) -> Sequence['outputs.GetBucketsBucketListOriginPullRuleResult']:
        """
        Bucket Origin-Pull rules.
        """
        return pulumi.get(self, "origin_pull_rules")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags to filter bucket.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def websites(self) -> Sequence['outputs.GetBucketsBucketListWebsiteResult']:
        """
        A list of one element containing configuration parameters used when the bucket is used as a website.
        """
        return pulumi.get(self, "websites")


@pulumi.output_type
class GetBucketsBucketListCorsRuleResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 expose_headers: Sequence[str],
                 max_age_seconds: int):
        """
        :param Sequence[str] allowed_headers: Specifies which headers are allowed.
        :param Sequence[str] allowed_methods: Specifies which methods are allowed. Can be GET, PUT, POST, DELETE or HEAD.
        :param Sequence[str] allowed_origins: Specifies which origins are allowed.
        :param Sequence[str] expose_headers: Specifies expose header in the response.
        :param int max_age_seconds: Specifies time in seconds that browser can cache the response for a preflight request.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        pulumi.set(__self__, "expose_headers", expose_headers)
        pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        """
        Specifies which headers are allowed.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        Specifies which methods are allowed. Can be GET, PUT, POST, DELETE or HEAD.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        Specifies which origins are allowed.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Sequence[str]:
        """
        Specifies expose header in the response.
        """
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> int:
        """
        Specifies time in seconds that browser can cache the response for a preflight request.
        """
        return pulumi.get(self, "max_age_seconds")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleResult(dict):
    def __init__(__self__, *,
                 abort_incomplete_multipart_uploads: Sequence['outputs.GetBucketsBucketListLifecycleRuleAbortIncompleteMultipartUploadResult'],
                 expirations: Sequence['outputs.GetBucketsBucketListLifecycleRuleExpirationResult'],
                 filter_prefix: str,
                 non_current_expirations: Sequence['outputs.GetBucketsBucketListLifecycleRuleNonCurrentExpirationResult'],
                 non_current_transitions: Sequence['outputs.GetBucketsBucketListLifecycleRuleNonCurrentTransitionResult'],
                 transitions: Sequence['outputs.GetBucketsBucketListLifecycleRuleTransitionResult']):
        """
        :param Sequence['GetBucketsBucketListLifecycleRuleAbortIncompleteMultipartUploadArgs'] abort_incomplete_multipart_uploads: Set the maximum time a multipart upload is allowed to remain running.
        :param Sequence['GetBucketsBucketListLifecycleRuleExpirationArgs'] expirations: Specifies a period in the object's expire.
        :param str filter_prefix: Object key prefix identifying one or more objects to which the rule applies.
        :param Sequence['GetBucketsBucketListLifecycleRuleNonCurrentExpirationArgs'] non_current_expirations: Specifies when non current object versions shall expire.
        :param Sequence['GetBucketsBucketListLifecycleRuleNonCurrentTransitionArgs'] non_current_transitions: Specifies when to transition objects of non current versions and the target storage class.
        :param Sequence['GetBucketsBucketListLifecycleRuleTransitionArgs'] transitions: Specifies a period in the object's transitions.
        """
        pulumi.set(__self__, "abort_incomplete_multipart_uploads", abort_incomplete_multipart_uploads)
        pulumi.set(__self__, "expirations", expirations)
        pulumi.set(__self__, "filter_prefix", filter_prefix)
        pulumi.set(__self__, "non_current_expirations", non_current_expirations)
        pulumi.set(__self__, "non_current_transitions", non_current_transitions)
        pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="abortIncompleteMultipartUploads")
    def abort_incomplete_multipart_uploads(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleAbortIncompleteMultipartUploadResult']:
        """
        Set the maximum time a multipart upload is allowed to remain running.
        """
        return pulumi.get(self, "abort_incomplete_multipart_uploads")

    @property
    @pulumi.getter
    def expirations(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleExpirationResult']:
        """
        Specifies a period in the object's expire.
        """
        return pulumi.get(self, "expirations")

    @property
    @pulumi.getter(name="filterPrefix")
    def filter_prefix(self) -> str:
        """
        Object key prefix identifying one or more objects to which the rule applies.
        """
        return pulumi.get(self, "filter_prefix")

    @property
    @pulumi.getter(name="nonCurrentExpirations")
    def non_current_expirations(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleNonCurrentExpirationResult']:
        """
        Specifies when non current object versions shall expire.
        """
        return pulumi.get(self, "non_current_expirations")

    @property
    @pulumi.getter(name="nonCurrentTransitions")
    def non_current_transitions(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleNonCurrentTransitionResult']:
        """
        Specifies when to transition objects of non current versions and the target storage class.
        """
        return pulumi.get(self, "non_current_transitions")

    @property
    @pulumi.getter
    def transitions(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleTransitionResult']:
        """
        Specifies a period in the object's transitions.
        """
        return pulumi.get(self, "transitions")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleAbortIncompleteMultipartUploadResult(dict):
    def __init__(__self__, *,
                 days_after_initiation: int):
        """
        :param int days_after_initiation: Specifies the number of days after the multipart upload starts that the upload must be completed. The maximum value is 3650.
        """
        pulumi.set(__self__, "days_after_initiation", days_after_initiation)

    @property
    @pulumi.getter(name="daysAfterInitiation")
    def days_after_initiation(self) -> int:
        """
        Specifies the number of days after the multipart upload starts that the upload must be completed. The maximum value is 3650.
        """
        return pulumi.get(self, "days_after_initiation")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleExpirationResult(dict):
    def __init__(__self__, *,
                 date: str,
                 days: int):
        """
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def date(self) -> str:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> int:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleNonCurrentExpirationResult(dict):
    def __init__(__self__, *,
                 non_current_days: int):
        """
        :param int non_current_days: Number of days after non current object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> int:
        """
        Number of days after non current object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleNonCurrentTransitionResult(dict):
    def __init__(__self__, *,
                 non_current_days: int,
                 storage_class: str):
        """
        :param int non_current_days: Number of days after non current object creation when the specific rule action takes effect.
        :param str storage_class: Specifies the storage class to which you want the object to transition. Available values include STANDARD, STANDARD_IA and ARCHIVE.
        """
        pulumi.set(__self__, "non_current_days", non_current_days)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> int:
        """
        Number of days after non current object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "non_current_days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Specifies the storage class to which you want the object to transition. Available values include STANDARD, STANDARD_IA and ARCHIVE.
        """
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleTransitionResult(dict):
    def __init__(__self__, *,
                 date: str,
                 days: int,
                 storage_class: str):
        """
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        :param str storage_class: Specifies the storage class to which you want the object to transition. Available values include STANDARD, STANDARD_IA and ARCHIVE.
        """
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def date(self) -> str:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> int:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Specifies the storage class to which you want the object to transition. Available values include STANDARD, STANDARD_IA and ARCHIVE.
        """
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class GetBucketsBucketListOriginDomainRuleResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str domain: Specify domain host.
        :param str status: Domain status, default: `ENABLED`.
        :param str type: Specify origin domain type, available values: `REST`, `WEBSITE`, `ACCELERATE`, default: `REST`.
        """
        pulumi.set(__self__, "domain", domain)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Specify domain host.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Domain status, default: `ENABLED`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specify origin domain type, available values: `REST`, `WEBSITE`, `ACCELERATE`, default: `REST`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBucketsBucketListOriginPullRuleResult(dict):
    def __init__(__self__, *,
                 host: str,
                 priority: int,
                 custom_http_headers: Optional[Mapping[str, Any]] = None,
                 follow_http_headers: Optional[Sequence[str]] = None,
                 follow_query_string: Optional[bool] = None,
                 follow_redirection: Optional[bool] = None,
                 prefix: Optional[str] = None,
                 protocol: Optional[str] = None,
                 sync_back_to_source: Optional[bool] = None):
        """
        :param str host: Allows only a domain name or IP address. You can optionally append a port number to the address.
        :param int priority: Priority of origin-pull rules, do not set the same value for multiple rules.
        :param Mapping[str, Any] custom_http_headers: Specifies the custom headers that you can add for COS to access your origin server.
        :param Sequence[str] follow_http_headers: Specifies the pass through headers when accessing the origin server.
        :param bool follow_query_string: Specifies whether to pass through COS request query string when accessing the origin server.
        :param bool follow_redirection: Specifies whether to follow 3XX redirect to another origin server to pull data from.
        :param str prefix: Triggers the origin-pull rule when the requested file name matches this prefix.
        :param str protocol: the protocol used for COS to access the specified origin server. The available value include `HTTP`, `HTTPS` and `FOLLOW`.
        :param bool sync_back_to_source: If `true`, COS will not return 3XX status code when pulling data from an origin server. Currently available zone: ap-beijing, ap-shanghai, ap-singapore, ap-mumbai.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "priority", priority)
        if custom_http_headers is not None:
            pulumi.set(__self__, "custom_http_headers", custom_http_headers)
        if follow_http_headers is not None:
            pulumi.set(__self__, "follow_http_headers", follow_http_headers)
        if follow_query_string is not None:
            pulumi.set(__self__, "follow_query_string", follow_query_string)
        if follow_redirection is not None:
            pulumi.set(__self__, "follow_redirection", follow_redirection)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sync_back_to_source is not None:
            pulumi.set(__self__, "sync_back_to_source", sync_back_to_source)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Allows only a domain name or IP address. You can optionally append a port number to the address.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority of origin-pull rules, do not set the same value for multiple rules.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="customHttpHeaders")
    def custom_http_headers(self) -> Optional[Mapping[str, Any]]:
        """
        Specifies the custom headers that you can add for COS to access your origin server.
        """
        return pulumi.get(self, "custom_http_headers")

    @property
    @pulumi.getter(name="followHttpHeaders")
    def follow_http_headers(self) -> Optional[Sequence[str]]:
        """
        Specifies the pass through headers when accessing the origin server.
        """
        return pulumi.get(self, "follow_http_headers")

    @property
    @pulumi.getter(name="followQueryString")
    def follow_query_string(self) -> Optional[bool]:
        """
        Specifies whether to pass through COS request query string when accessing the origin server.
        """
        return pulumi.get(self, "follow_query_string")

    @property
    @pulumi.getter(name="followRedirection")
    def follow_redirection(self) -> Optional[bool]:
        """
        Specifies whether to follow 3XX redirect to another origin server to pull data from.
        """
        return pulumi.get(self, "follow_redirection")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Triggers the origin-pull rule when the requested file name matches this prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        the protocol used for COS to access the specified origin server. The available value include `HTTP`, `HTTPS` and `FOLLOW`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="syncBackToSource")
    def sync_back_to_source(self) -> Optional[bool]:
        """
        If `true`, COS will not return 3XX status code when pulling data from an origin server. Currently available zone: ap-beijing, ap-shanghai, ap-singapore, ap-mumbai.
        """
        return pulumi.get(self, "sync_back_to_source")


@pulumi.output_type
class GetBucketsBucketListWebsiteResult(dict):
    def __init__(__self__, *,
                 error_document: str,
                 index_document: str):
        """
        :param str error_document: An absolute path to the document to return in case of a 4XX error.
        :param str index_document: COS returns this index document when requests are made to the root domain or any of the subfolders.
        """
        pulumi.set(__self__, "error_document", error_document)
        pulumi.set(__self__, "index_document", index_document)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> str:
        """
        An absolute path to the document to return in case of a 4XX error.
        """
        return pulumi.get(self, "error_document")

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> str:
        """
        COS returns this index document when requests are made to the root domain or any of the subfolders.
        """
        return pulumi.get(self, "index_document")


