# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BucketArgs', 'Bucket']

@pulumi.input_type
class BucketArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 acceleration_enable: Optional[pulumi.Input[bool]] = None,
                 acl: Optional[pulumi.Input[str]] = None,
                 acl_body: Optional[pulumi.Input[str]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]]] = None,
                 enable_intelligent_tiering: Optional[pulumi.Input[bool]] = None,
                 encryption_algorithm: Optional[pulumi.Input[str]] = None,
                 force_clean: Optional[pulumi.Input[bool]] = None,
                 intelligent_tiering_days: Optional[pulumi.Input[int]] = None,
                 intelligent_tiering_request_frequent: Optional[pulumi.Input[int]] = None,
                 kms_id: Optional[pulumi.Input[str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleArgs']]]] = None,
                 log_enable: Optional[pulumi.Input[bool]] = None,
                 log_prefix: Optional[pulumi.Input[str]] = None,
                 log_target_bucket: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 origin_domain_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginDomainRuleArgs']]]] = None,
                 origin_pull_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginPullRuleArgs']]]] = None,
                 replica_role: Optional[pulumi.Input[str]] = None,
                 replica_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketReplicaRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 versioning_enable: Optional[pulumi.Input[bool]] = None,
                 website: Optional[pulumi.Input['BucketWebsiteArgs']] = None):
        """
        The set of arguments for constructing a Bucket resource.
        :param pulumi.Input[str] bucket: The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[bool] acceleration_enable: Enable bucket acceleration.
        :param pulumi.Input[str] acl: The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        :param pulumi.Input[str] acl_body: ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        :param pulumi.Input[str] cdc_id: CDC cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]] cors_rules: A rule of Cross-Origin Resource Sharing (documented below).
        :param pulumi.Input[bool] enable_intelligent_tiering: Enable intelligent tiering. NOTE: When intelligent tiering configuration is enabled, it cannot be turned off or modified.
        :param pulumi.Input[str] encryption_algorithm: The server-side encryption algorithm to use. Valid values are `AES256`, `KMS` and `cos/kms`, `cos/kms` is for cdc cos scenario.
        :param pulumi.Input[bool] force_clean: Force cleanup all objects before delete bucket.
        :param pulumi.Input[int] intelligent_tiering_days: Specifies the limit of days for standard-tier data to low-frequency data in an intelligent tiered storage configuration, with optional days of 30, 60, 90. Default value is 30.
        :param pulumi.Input[int] intelligent_tiering_request_frequent: Specify the access limit for converting standard layer data into low-frequency layer data in the configuration. The default value is once, which can be used in combination with the number of days to achieve the conversion effect. For example, if the parameter is set to 1 and the number of access days is 30, it means that objects with less than one visit in 30 consecutive days will be reduced from the standard layer to the low frequency layer.
        :param pulumi.Input[str] kms_id: The KMS Master Key ID. This value is valid only when `encryption_algorithm` is set to KMS or cos/kms. Set kms id to the specified value. If not specified, the default kms id is used.
        :param pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleArgs']]] lifecycle_rules: A configuration of object lifecycle management (documented below).
        :param pulumi.Input[bool] log_enable: Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        :param pulumi.Input[str] log_prefix: The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        :param pulumi.Input[str] log_target_bucket: The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`. User must have full access on this bucket.
        :param pulumi.Input[bool] multi_az: Indicates whether to create a bucket of multi available zone.
        :param pulumi.Input[Sequence[pulumi.Input['BucketOriginDomainRuleArgs']]] origin_domain_rules: Bucket Origin Domain settings.
        :param pulumi.Input[Sequence[pulumi.Input['BucketOriginPullRuleArgs']]] origin_pull_rules: Bucket Origin-Pull settings.
        :param pulumi.Input[str] replica_role: Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true can configure this argument.
        :param pulumi.Input[Sequence[pulumi.Input['BucketReplicaRuleArgs']]] replica_rules: List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of a bucket.
        :param pulumi.Input[bool] versioning_enable: Enable bucket versioning. NOTE: The `multi_az` feature is true for the current bucket, cannot disable version control.
        :param pulumi.Input['BucketWebsiteArgs'] website: A website object(documented below).
        """
        pulumi.set(__self__, "bucket", bucket)
        if acceleration_enable is not None:
            pulumi.set(__self__, "acceleration_enable", acceleration_enable)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if acl_body is not None:
            pulumi.set(__self__, "acl_body", acl_body)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if cors_rules is not None:
            pulumi.set(__self__, "cors_rules", cors_rules)
        if enable_intelligent_tiering is not None:
            pulumi.set(__self__, "enable_intelligent_tiering", enable_intelligent_tiering)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if force_clean is not None:
            pulumi.set(__self__, "force_clean", force_clean)
        if intelligent_tiering_days is not None:
            pulumi.set(__self__, "intelligent_tiering_days", intelligent_tiering_days)
        if intelligent_tiering_request_frequent is not None:
            pulumi.set(__self__, "intelligent_tiering_request_frequent", intelligent_tiering_request_frequent)
        if kms_id is not None:
            pulumi.set(__self__, "kms_id", kms_id)
        if lifecycle_rules is not None:
            pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        if log_enable is not None:
            pulumi.set(__self__, "log_enable", log_enable)
        if log_prefix is not None:
            pulumi.set(__self__, "log_prefix", log_prefix)
        if log_target_bucket is not None:
            pulumi.set(__self__, "log_target_bucket", log_target_bucket)
        if multi_az is not None:
            pulumi.set(__self__, "multi_az", multi_az)
        if origin_domain_rules is not None:
            pulumi.set(__self__, "origin_domain_rules", origin_domain_rules)
        if origin_pull_rules is not None:
            pulumi.set(__self__, "origin_pull_rules", origin_pull_rules)
        if replica_role is not None:
            pulumi.set(__self__, "replica_role", replica_role)
        if replica_rules is not None:
            pulumi.set(__self__, "replica_rules", replica_rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if versioning_enable is not None:
            pulumi.set(__self__, "versioning_enable", versioning_enable)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="accelerationEnable")
    def acceleration_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable bucket acceleration.
        """
        return pulumi.get(self, "acceleration_enable")

    @acceleration_enable.setter
    def acceleration_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acceleration_enable", value)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[str]]:
        """
        The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="aclBody")
    def acl_body(self) -> Optional[pulumi.Input[str]]:
        """
        ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        """
        return pulumi.get(self, "acl_body")

    @acl_body.setter
    def acl_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl_body", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        CDC cluster ID.
        """
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]]]:
        """
        A rule of Cross-Origin Resource Sharing (documented below).
        """
        return pulumi.get(self, "cors_rules")

    @cors_rules.setter
    def cors_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]]]):
        pulumi.set(self, "cors_rules", value)

    @property
    @pulumi.getter(name="enableIntelligentTiering")
    def enable_intelligent_tiering(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable intelligent tiering. NOTE: When intelligent tiering configuration is enabled, it cannot be turned off or modified.
        """
        return pulumi.get(self, "enable_intelligent_tiering")

    @enable_intelligent_tiering.setter
    def enable_intelligent_tiering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_intelligent_tiering", value)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The server-side encryption algorithm to use. Valid values are `AES256`, `KMS` and `cos/kms`, `cos/kms` is for cdc cos scenario.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @property
    @pulumi.getter(name="forceClean")
    def force_clean(self) -> Optional[pulumi.Input[bool]]:
        """
        Force cleanup all objects before delete bucket.
        """
        return pulumi.get(self, "force_clean")

    @force_clean.setter
    def force_clean(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_clean", value)

    @property
    @pulumi.getter(name="intelligentTieringDays")
    def intelligent_tiering_days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the limit of days for standard-tier data to low-frequency data in an intelligent tiered storage configuration, with optional days of 30, 60, 90. Default value is 30.
        """
        return pulumi.get(self, "intelligent_tiering_days")

    @intelligent_tiering_days.setter
    def intelligent_tiering_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "intelligent_tiering_days", value)

    @property
    @pulumi.getter(name="intelligentTieringRequestFrequent")
    def intelligent_tiering_request_frequent(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the access limit for converting standard layer data into low-frequency layer data in the configuration. The default value is once, which can be used in combination with the number of days to achieve the conversion effect. For example, if the parameter is set to 1 and the number of access days is 30, it means that objects with less than one visit in 30 consecutive days will be reduced from the standard layer to the low frequency layer.
        """
        return pulumi.get(self, "intelligent_tiering_request_frequent")

    @intelligent_tiering_request_frequent.setter
    def intelligent_tiering_request_frequent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "intelligent_tiering_request_frequent", value)

    @property
    @pulumi.getter(name="kmsId")
    def kms_id(self) -> Optional[pulumi.Input[str]]:
        """
        The KMS Master Key ID. This value is valid only when `encryption_algorithm` is set to KMS or cos/kms. Set kms id to the specified value. If not specified, the default kms id is used.
        """
        return pulumi.get(self, "kms_id")

    @kms_id.setter
    def kms_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_id", value)

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleArgs']]]]:
        """
        A configuration of object lifecycle management (documented below).
        """
        return pulumi.get(self, "lifecycle_rules")

    @lifecycle_rules.setter
    def lifecycle_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleArgs']]]]):
        pulumi.set(self, "lifecycle_rules", value)

    @property
    @pulumi.getter(name="logEnable")
    def log_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        """
        return pulumi.get(self, "log_enable")

    @log_enable.setter
    def log_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_enable", value)

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        """
        return pulumi.get(self, "log_prefix")

    @log_prefix.setter
    def log_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_prefix", value)

    @property
    @pulumi.getter(name="logTargetBucket")
    def log_target_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`. User must have full access on this bucket.
        """
        return pulumi.get(self, "log_target_bucket")

    @log_target_bucket.setter
    def log_target_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_target_bucket", value)

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create a bucket of multi available zone.
        """
        return pulumi.get(self, "multi_az")

    @multi_az.setter
    def multi_az(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_az", value)

    @property
    @pulumi.getter(name="originDomainRules")
    def origin_domain_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginDomainRuleArgs']]]]:
        """
        Bucket Origin Domain settings.
        """
        return pulumi.get(self, "origin_domain_rules")

    @origin_domain_rules.setter
    def origin_domain_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginDomainRuleArgs']]]]):
        pulumi.set(self, "origin_domain_rules", value)

    @property
    @pulumi.getter(name="originPullRules")
    def origin_pull_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginPullRuleArgs']]]]:
        """
        Bucket Origin-Pull settings.
        """
        return pulumi.get(self, "origin_pull_rules")

    @origin_pull_rules.setter
    def origin_pull_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginPullRuleArgs']]]]):
        pulumi.set(self, "origin_pull_rules", value)

    @property
    @pulumi.getter(name="replicaRole")
    def replica_role(self) -> Optional[pulumi.Input[str]]:
        """
        Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true can configure this argument.
        """
        return pulumi.get(self, "replica_role")

    @replica_role.setter
    def replica_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_role", value)

    @property
    @pulumi.getter(name="replicaRules")
    def replica_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketReplicaRuleArgs']]]]:
        """
        List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        """
        return pulumi.get(self, "replica_rules")

    @replica_rules.setter
    def replica_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketReplicaRuleArgs']]]]):
        pulumi.set(self, "replica_rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of a bucket.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="versioningEnable")
    def versioning_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable bucket versioning. NOTE: The `multi_az` feature is true for the current bucket, cannot disable version control.
        """
        return pulumi.get(self, "versioning_enable")

    @versioning_enable.setter
    def versioning_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "versioning_enable", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input['BucketWebsiteArgs']]:
        """
        A website object(documented below).
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input['BucketWebsiteArgs']]):
        pulumi.set(self, "website", value)


@pulumi.input_type
class _BucketState:
    def __init__(__self__, *,
                 acceleration_enable: Optional[pulumi.Input[bool]] = None,
                 acl: Optional[pulumi.Input[str]] = None,
                 acl_body: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]]] = None,
                 cos_bucket_url: Optional[pulumi.Input[str]] = None,
                 enable_intelligent_tiering: Optional[pulumi.Input[bool]] = None,
                 encryption_algorithm: Optional[pulumi.Input[str]] = None,
                 force_clean: Optional[pulumi.Input[bool]] = None,
                 intelligent_tiering_days: Optional[pulumi.Input[int]] = None,
                 intelligent_tiering_request_frequent: Optional[pulumi.Input[int]] = None,
                 kms_id: Optional[pulumi.Input[str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleArgs']]]] = None,
                 log_enable: Optional[pulumi.Input[bool]] = None,
                 log_prefix: Optional[pulumi.Input[str]] = None,
                 log_target_bucket: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 origin_domain_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginDomainRuleArgs']]]] = None,
                 origin_pull_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginPullRuleArgs']]]] = None,
                 replica_role: Optional[pulumi.Input[str]] = None,
                 replica_rules: Optional[pulumi.Input[Sequence[pulumi.Input['BucketReplicaRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 versioning_enable: Optional[pulumi.Input[bool]] = None,
                 website: Optional[pulumi.Input['BucketWebsiteArgs']] = None):
        """
        Input properties used for looking up and filtering Bucket resources.
        :param pulumi.Input[bool] acceleration_enable: Enable bucket acceleration.
        :param pulumi.Input[str] acl: The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        :param pulumi.Input[str] acl_body: ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        :param pulumi.Input[str] bucket: The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[str] cdc_id: CDC cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]] cors_rules: A rule of Cross-Origin Resource Sharing (documented below).
        :param pulumi.Input[str] cos_bucket_url: The URL of this cos bucket.
        :param pulumi.Input[bool] enable_intelligent_tiering: Enable intelligent tiering. NOTE: When intelligent tiering configuration is enabled, it cannot be turned off or modified.
        :param pulumi.Input[str] encryption_algorithm: The server-side encryption algorithm to use. Valid values are `AES256`, `KMS` and `cos/kms`, `cos/kms` is for cdc cos scenario.
        :param pulumi.Input[bool] force_clean: Force cleanup all objects before delete bucket.
        :param pulumi.Input[int] intelligent_tiering_days: Specifies the limit of days for standard-tier data to low-frequency data in an intelligent tiered storage configuration, with optional days of 30, 60, 90. Default value is 30.
        :param pulumi.Input[int] intelligent_tiering_request_frequent: Specify the access limit for converting standard layer data into low-frequency layer data in the configuration. The default value is once, which can be used in combination with the number of days to achieve the conversion effect. For example, if the parameter is set to 1 and the number of access days is 30, it means that objects with less than one visit in 30 consecutive days will be reduced from the standard layer to the low frequency layer.
        :param pulumi.Input[str] kms_id: The KMS Master Key ID. This value is valid only when `encryption_algorithm` is set to KMS or cos/kms. Set kms id to the specified value. If not specified, the default kms id is used.
        :param pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleArgs']]] lifecycle_rules: A configuration of object lifecycle management (documented below).
        :param pulumi.Input[bool] log_enable: Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        :param pulumi.Input[str] log_prefix: The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        :param pulumi.Input[str] log_target_bucket: The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`. User must have full access on this bucket.
        :param pulumi.Input[bool] multi_az: Indicates whether to create a bucket of multi available zone.
        :param pulumi.Input[Sequence[pulumi.Input['BucketOriginDomainRuleArgs']]] origin_domain_rules: Bucket Origin Domain settings.
        :param pulumi.Input[Sequence[pulumi.Input['BucketOriginPullRuleArgs']]] origin_pull_rules: Bucket Origin-Pull settings.
        :param pulumi.Input[str] replica_role: Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true can configure this argument.
        :param pulumi.Input[Sequence[pulumi.Input['BucketReplicaRuleArgs']]] replica_rules: List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of a bucket.
        :param pulumi.Input[bool] versioning_enable: Enable bucket versioning. NOTE: The `multi_az` feature is true for the current bucket, cannot disable version control.
        :param pulumi.Input['BucketWebsiteArgs'] website: A website object(documented below).
        """
        if acceleration_enable is not None:
            pulumi.set(__self__, "acceleration_enable", acceleration_enable)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if acl_body is not None:
            pulumi.set(__self__, "acl_body", acl_body)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if cors_rules is not None:
            pulumi.set(__self__, "cors_rules", cors_rules)
        if cos_bucket_url is not None:
            pulumi.set(__self__, "cos_bucket_url", cos_bucket_url)
        if enable_intelligent_tiering is not None:
            pulumi.set(__self__, "enable_intelligent_tiering", enable_intelligent_tiering)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if force_clean is not None:
            pulumi.set(__self__, "force_clean", force_clean)
        if intelligent_tiering_days is not None:
            pulumi.set(__self__, "intelligent_tiering_days", intelligent_tiering_days)
        if intelligent_tiering_request_frequent is not None:
            pulumi.set(__self__, "intelligent_tiering_request_frequent", intelligent_tiering_request_frequent)
        if kms_id is not None:
            pulumi.set(__self__, "kms_id", kms_id)
        if lifecycle_rules is not None:
            pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        if log_enable is not None:
            pulumi.set(__self__, "log_enable", log_enable)
        if log_prefix is not None:
            pulumi.set(__self__, "log_prefix", log_prefix)
        if log_target_bucket is not None:
            pulumi.set(__self__, "log_target_bucket", log_target_bucket)
        if multi_az is not None:
            pulumi.set(__self__, "multi_az", multi_az)
        if origin_domain_rules is not None:
            pulumi.set(__self__, "origin_domain_rules", origin_domain_rules)
        if origin_pull_rules is not None:
            pulumi.set(__self__, "origin_pull_rules", origin_pull_rules)
        if replica_role is not None:
            pulumi.set(__self__, "replica_role", replica_role)
        if replica_rules is not None:
            pulumi.set(__self__, "replica_rules", replica_rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if versioning_enable is not None:
            pulumi.set(__self__, "versioning_enable", versioning_enable)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter(name="accelerationEnable")
    def acceleration_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable bucket acceleration.
        """
        return pulumi.get(self, "acceleration_enable")

    @acceleration_enable.setter
    def acceleration_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acceleration_enable", value)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[str]]:
        """
        The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="aclBody")
    def acl_body(self) -> Optional[pulumi.Input[str]]:
        """
        ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        """
        return pulumi.get(self, "acl_body")

    @acl_body.setter
    def acl_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl_body", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        CDC cluster ID.
        """
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]]]:
        """
        A rule of Cross-Origin Resource Sharing (documented below).
        """
        return pulumi.get(self, "cors_rules")

    @cors_rules.setter
    def cors_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketCorsRuleArgs']]]]):
        pulumi.set(self, "cors_rules", value)

    @property
    @pulumi.getter(name="cosBucketUrl")
    def cos_bucket_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of this cos bucket.
        """
        return pulumi.get(self, "cos_bucket_url")

    @cos_bucket_url.setter
    def cos_bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket_url", value)

    @property
    @pulumi.getter(name="enableIntelligentTiering")
    def enable_intelligent_tiering(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable intelligent tiering. NOTE: When intelligent tiering configuration is enabled, it cannot be turned off or modified.
        """
        return pulumi.get(self, "enable_intelligent_tiering")

    @enable_intelligent_tiering.setter
    def enable_intelligent_tiering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_intelligent_tiering", value)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The server-side encryption algorithm to use. Valid values are `AES256`, `KMS` and `cos/kms`, `cos/kms` is for cdc cos scenario.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @property
    @pulumi.getter(name="forceClean")
    def force_clean(self) -> Optional[pulumi.Input[bool]]:
        """
        Force cleanup all objects before delete bucket.
        """
        return pulumi.get(self, "force_clean")

    @force_clean.setter
    def force_clean(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_clean", value)

    @property
    @pulumi.getter(name="intelligentTieringDays")
    def intelligent_tiering_days(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the limit of days for standard-tier data to low-frequency data in an intelligent tiered storage configuration, with optional days of 30, 60, 90. Default value is 30.
        """
        return pulumi.get(self, "intelligent_tiering_days")

    @intelligent_tiering_days.setter
    def intelligent_tiering_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "intelligent_tiering_days", value)

    @property
    @pulumi.getter(name="intelligentTieringRequestFrequent")
    def intelligent_tiering_request_frequent(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the access limit for converting standard layer data into low-frequency layer data in the configuration. The default value is once, which can be used in combination with the number of days to achieve the conversion effect. For example, if the parameter is set to 1 and the number of access days is 30, it means that objects with less than one visit in 30 consecutive days will be reduced from the standard layer to the low frequency layer.
        """
        return pulumi.get(self, "intelligent_tiering_request_frequent")

    @intelligent_tiering_request_frequent.setter
    def intelligent_tiering_request_frequent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "intelligent_tiering_request_frequent", value)

    @property
    @pulumi.getter(name="kmsId")
    def kms_id(self) -> Optional[pulumi.Input[str]]:
        """
        The KMS Master Key ID. This value is valid only when `encryption_algorithm` is set to KMS or cos/kms. Set kms id to the specified value. If not specified, the default kms id is used.
        """
        return pulumi.get(self, "kms_id")

    @kms_id.setter
    def kms_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_id", value)

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleArgs']]]]:
        """
        A configuration of object lifecycle management (documented below).
        """
        return pulumi.get(self, "lifecycle_rules")

    @lifecycle_rules.setter
    def lifecycle_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleArgs']]]]):
        pulumi.set(self, "lifecycle_rules", value)

    @property
    @pulumi.getter(name="logEnable")
    def log_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        """
        return pulumi.get(self, "log_enable")

    @log_enable.setter
    def log_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_enable", value)

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        """
        return pulumi.get(self, "log_prefix")

    @log_prefix.setter
    def log_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_prefix", value)

    @property
    @pulumi.getter(name="logTargetBucket")
    def log_target_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`. User must have full access on this bucket.
        """
        return pulumi.get(self, "log_target_bucket")

    @log_target_bucket.setter
    def log_target_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_target_bucket", value)

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create a bucket of multi available zone.
        """
        return pulumi.get(self, "multi_az")

    @multi_az.setter
    def multi_az(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_az", value)

    @property
    @pulumi.getter(name="originDomainRules")
    def origin_domain_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginDomainRuleArgs']]]]:
        """
        Bucket Origin Domain settings.
        """
        return pulumi.get(self, "origin_domain_rules")

    @origin_domain_rules.setter
    def origin_domain_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginDomainRuleArgs']]]]):
        pulumi.set(self, "origin_domain_rules", value)

    @property
    @pulumi.getter(name="originPullRules")
    def origin_pull_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginPullRuleArgs']]]]:
        """
        Bucket Origin-Pull settings.
        """
        return pulumi.get(self, "origin_pull_rules")

    @origin_pull_rules.setter
    def origin_pull_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketOriginPullRuleArgs']]]]):
        pulumi.set(self, "origin_pull_rules", value)

    @property
    @pulumi.getter(name="replicaRole")
    def replica_role(self) -> Optional[pulumi.Input[str]]:
        """
        Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true can configure this argument.
        """
        return pulumi.get(self, "replica_role")

    @replica_role.setter
    def replica_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_role", value)

    @property
    @pulumi.getter(name="replicaRules")
    def replica_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketReplicaRuleArgs']]]]:
        """
        List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        """
        return pulumi.get(self, "replica_rules")

    @replica_rules.setter
    def replica_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketReplicaRuleArgs']]]]):
        pulumi.set(self, "replica_rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of a bucket.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="versioningEnable")
    def versioning_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable bucket versioning. NOTE: The `multi_az` feature is true for the current bucket, cannot disable version control.
        """
        return pulumi.get(self, "versioning_enable")

    @versioning_enable.setter
    def versioning_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "versioning_enable", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input['BucketWebsiteArgs']]:
        """
        A website object(documented below).
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input['BucketWebsiteArgs']]):
        pulumi.set(self, "website", value)


class Bucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acceleration_enable: Optional[pulumi.Input[bool]] = None,
                 acl: Optional[pulumi.Input[str]] = None,
                 acl_body: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketCorsRuleArgs']]]]] = None,
                 enable_intelligent_tiering: Optional[pulumi.Input[bool]] = None,
                 encryption_algorithm: Optional[pulumi.Input[str]] = None,
                 force_clean: Optional[pulumi.Input[bool]] = None,
                 intelligent_tiering_days: Optional[pulumi.Input[int]] = None,
                 intelligent_tiering_request_frequent: Optional[pulumi.Input[int]] = None,
                 kms_id: Optional[pulumi.Input[str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketLifecycleRuleArgs']]]]] = None,
                 log_enable: Optional[pulumi.Input[bool]] = None,
                 log_prefix: Optional[pulumi.Input[str]] = None,
                 log_target_bucket: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 origin_domain_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketOriginDomainRuleArgs']]]]] = None,
                 origin_pull_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketOriginPullRuleArgs']]]]] = None,
                 replica_role: Optional[pulumi.Input[str]] = None,
                 replica_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketReplicaRuleArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 versioning_enable: Optional[pulumi.Input[bool]] = None,
                 website: Optional[pulumi.Input[pulumi.InputType['BucketWebsiteArgs']]] = None,
                 __props__=None):
        """
        Provides a COS resource to create a COS bucket and set its attributes.

        > **NOTE:** The following capabilities do not support cdc scenarios: `multi_az`, `website`, and bucket replication `replica_role`.

        ## Example Usage

        ### Private Bucket

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        private_bucket = tencentcloud.cos.Bucket("privateBucket",
            bucket=f"private-bucket-{app_id}",
            acl="private")
        ```
        <!--End PulumiCodeChooser -->

        ### Private Bucket with CDC cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        region = "ap-guangzhou"
        cdc_id = "cluster-262n63e8"
        info = tencentcloud.User.get_info()
        app_id = info.app_id
        private_bucket = tencentcloud.cos.Bucket("privateBucket",
            bucket=f"private-bucket-{app_id}",
            acl="private",
            versioning_enable=True,
            force_clean=True)
        ```
        <!--End PulumiCodeChooser -->

        ### Enable SSE-KMS encryption

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        example = tencentcloud.kms.Key("example",
            alias="tf-example-kms-key",
            description="example of kms key",
            key_rotation_enabled=False,
            is_enabled=True,
            tags={
                "createdBy": "terraform",
            })
        bucket_basic = tencentcloud.cos.Bucket("bucketBasic",
            bucket=f"tf-bucket-cdc-{app_id}",
            acl="private",
            encryption_algorithm="KMS",
            kms_id=example.id,
            versioning_enable=True,
            acceleration_enable=False,
            force_clean=True)
        ```
        <!--End PulumiCodeChooser -->

        ### Creation of multiple available zone bucket

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        multi_zone_bucket = tencentcloud.cos.Bucket("multiZoneBucket",
            bucket=f"multi-zone-bucket-{app_id}",
            acl="private",
            multi_az=True,
            versioning_enable=True,
            force_clean=True)
        ```
        <!--End PulumiCodeChooser -->

        ### Using verbose acl

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_acl = tencentcloud.cos.Bucket("bucketWithAcl",
            bucket=f"bucketwith-acl-{app_id}",
            acl_body=\"\"\"<AccessControlPolicy>
        	<Owner>
        		<ID>qcs::cam::uin/100022975249:uin/100022975249</ID>
        		<DisplayName>qcs::cam::uin/100022975249:uin/100022975249</DisplayName>
        	</Owner>
        	<AccessControlList>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group">
        				<URI>http://cam.qcloud.com/groups/global/AllUsers</URI>
        			</Grantee>
        			<Permission>READ</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser">
        				<ID>qcs::cam::uin/100022975249:uin/100022975249</ID>
        				<DisplayName>qcs::cam::uin/100022975249:uin/100022975249</DisplayName>
        			</Grantee>
        			<Permission>FULL_CONTROL</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser">
        				<ID>qcs::cam::uin/100022975249:uin/100022975249</ID>
        				<DisplayName>qcs::cam::uin/100022975249:uin/100022975249</DisplayName>
        			</Grantee>
        			<Permission>WRITE_ACP</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group">
        				<URI>http://cam.qcloud.com/groups/global/AllUsers</URI>
        			</Grantee>
        			<Permission>READ_ACP</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group">
        				<URI>http://cam.qcloud.com/groups/global/AllUsers</URI>
        			</Grantee>
        			<Permission>WRITE_ACP</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser">
        				<ID>qcs::cam::uin/100022975249:uin/100022975249</ID>
        				<DisplayName>qcs::cam::uin/100022975249:uin/100022975249</DisplayName>
        			</Grantee>
        			<Permission>READ</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser">
        				<ID>qcs::cam::uin/100022975249:uin/100022975249</ID>
        				<DisplayName>qcs::cam::uin/100022975249:uin/100022975249</DisplayName>
        			</Grantee>
        			<Permission>WRITE</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group">
        				<URI>http://cam.qcloud.com/groups/global/AllUsers</URI>
        			</Grantee>
        			<Permission>FULL_CONTROL</Permission>
        		</Grant>
        	</AccessControlList>
        </AccessControlPolicy>
        \"\"\")
        ```
        <!--End PulumiCodeChooser -->

        ### Using verbose acl with CDC cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        region = "ap-guangzhou"
        cdc_id = "cluster-262n63e8"
        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_acl = tencentcloud.cos.Bucket("bucketWithAcl",
            bucket=f"private-bucket-{app_id}",
            acl="private",
            acl_body=\"\"\"<AccessControlPolicy>
            <Owner>
                <ID>qcs::cam::uin/100023201586:uin/100023201586</ID>
                <DisplayName>qcs::cam::uin/100023201586:uin/100023201586</DisplayName>
            </Owner>
            <AccessControlList>
                <Grant>
                    <Grantee type="CanonicalUser">
                        <ID>qcs::cam::uin/100015006748:uin/100015006748</ID>
                        <DisplayName>qcs::cam::uin/100015006748:uin/100015006748</DisplayName>
                    </Grantee>
                    <Permission>WRITE</Permission>
                </Grant>
                <Grant>
                    <Grantee type="CanonicalUser">
                        <ID>qcs::cam::uin/100023201586:uin/100023201586</ID>
                        <DisplayName>qcs::cam::uin/100023201586:uin/100023201586</DisplayName>
                    </Grantee>
                    <Permission>FULL_CONTROL</Permission>
                </Grant>
            </AccessControlList>
        </AccessControlPolicy>
        \"\"\")
        ```
        <!--End PulumiCodeChooser -->

        ### Static Website

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_static_website = tencentcloud.cos.Bucket("bucketWithStaticWebsite",
            bucket=f"bucket-with-static-website-{app_id}",
            website=tencentcloud.cos.BucketWebsiteArgs(
                index_document="index.html",
                error_document="error.html",
                redirect_all_requests_to="https",
            ))
        pulumi.export("endpointTest", bucket_with_static_website.website.endpoint)
        ```
        <!--End PulumiCodeChooser -->

        ### Using CORS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_cors = tencentcloud.cos.Bucket("bucketWithCors",
            bucket=f"bucket-with-cors-{app_id}",
            acl="public-read-write",
            cors_rules=[tencentcloud.cos.BucketCorsRuleArgs(
                allowed_origins=["http://*.abc.com"],
                allowed_methods=[
                    "PUT",
                    "POST",
                ],
                allowed_headers=["*"],
                max_age_seconds=300,
                expose_headers=["Etag"],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using CORS with CDC

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        region = "ap-guangzhou"
        cdc_id = "cluster-262n63e8"
        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_cors = tencentcloud.cos.Bucket("bucketWithCors",
            bucket=f"bucket-with-cors-{app_id}",
            cors_rules=[tencentcloud.cos.BucketCorsRuleArgs(
                allowed_origins=["http://*.abc.com"],
                allowed_methods=[
                    "PUT",
                    "POST",
                ],
                allowed_headers=["*"],
                max_age_seconds=300,
                expose_headers=["Etag"],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using object lifecycle

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_lifecycle = tencentcloud.cos.Bucket("bucketWithLifecycle",
            bucket=f"bucket-with-lifecycle-{app_id}",
            acl="public-read-write",
            lifecycle_rules=[tencentcloud.cos.BucketLifecycleRuleArgs(
                filter_prefix="path1/",
                transitions=[tencentcloud.cos.BucketLifecycleRuleTransitionArgs(
                    days=30,
                    storage_class="STANDARD_IA",
                )],
                expiration=tencentcloud.cos.BucketLifecycleRuleExpirationArgs(
                    days=90,
                ),
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using object lifecycle with CDC

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        region = "ap-guangzhou"
        cdc_id = "cluster-262n63e8"
        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_lifecycle = tencentcloud.cos.Bucket("bucketWithLifecycle",
            bucket=f"bucket-with-lifecycle-{app_id}",
            acl="private",
            lifecycle_rules=[tencentcloud.cos.BucketLifecycleRuleArgs(
                filter_prefix="path1/",
                expiration=tencentcloud.cos.BucketLifecycleRuleExpirationArgs(
                    days=90,
                ),
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using replication

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        uin = info.uin
        owner_uin = info.owner_uin
        region = "ap-guangzhou"
        bucket_replicate = tencentcloud.cos.Bucket("bucketReplicate",
            bucket=f"bucket-replicate-{app_id}",
            acl="private",
            versioning_enable=True)
        bucket_with_replication = tencentcloud.cos.Bucket("bucketWithReplication",
            bucket=f"bucket-with-replication-{app_id}",
            acl="private",
            versioning_enable=True,
            replica_role=f"qcs::cam::uin/{owner_uin}:uin/{uin}",
            replica_rules=[tencentcloud.cos.BucketReplicaRuleArgs(
                id="test-rep1",
                status="Enabled",
                prefix="dist",
                destination_bucket=bucket_replicate.bucket.apply(lambda bucket: f"qcs::cos:{region}::{bucket}"),
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        COS bucket can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Cos/bucket:Bucket bucket bucket-name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acceleration_enable: Enable bucket acceleration.
        :param pulumi.Input[str] acl: The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        :param pulumi.Input[str] acl_body: ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        :param pulumi.Input[str] bucket: The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[str] cdc_id: CDC cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketCorsRuleArgs']]]] cors_rules: A rule of Cross-Origin Resource Sharing (documented below).
        :param pulumi.Input[bool] enable_intelligent_tiering: Enable intelligent tiering. NOTE: When intelligent tiering configuration is enabled, it cannot be turned off or modified.
        :param pulumi.Input[str] encryption_algorithm: The server-side encryption algorithm to use. Valid values are `AES256`, `KMS` and `cos/kms`, `cos/kms` is for cdc cos scenario.
        :param pulumi.Input[bool] force_clean: Force cleanup all objects before delete bucket.
        :param pulumi.Input[int] intelligent_tiering_days: Specifies the limit of days for standard-tier data to low-frequency data in an intelligent tiered storage configuration, with optional days of 30, 60, 90. Default value is 30.
        :param pulumi.Input[int] intelligent_tiering_request_frequent: Specify the access limit for converting standard layer data into low-frequency layer data in the configuration. The default value is once, which can be used in combination with the number of days to achieve the conversion effect. For example, if the parameter is set to 1 and the number of access days is 30, it means that objects with less than one visit in 30 consecutive days will be reduced from the standard layer to the low frequency layer.
        :param pulumi.Input[str] kms_id: The KMS Master Key ID. This value is valid only when `encryption_algorithm` is set to KMS or cos/kms. Set kms id to the specified value. If not specified, the default kms id is used.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketLifecycleRuleArgs']]]] lifecycle_rules: A configuration of object lifecycle management (documented below).
        :param pulumi.Input[bool] log_enable: Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        :param pulumi.Input[str] log_prefix: The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        :param pulumi.Input[str] log_target_bucket: The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`. User must have full access on this bucket.
        :param pulumi.Input[bool] multi_az: Indicates whether to create a bucket of multi available zone.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketOriginDomainRuleArgs']]]] origin_domain_rules: Bucket Origin Domain settings.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketOriginPullRuleArgs']]]] origin_pull_rules: Bucket Origin-Pull settings.
        :param pulumi.Input[str] replica_role: Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true can configure this argument.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketReplicaRuleArgs']]]] replica_rules: List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of a bucket.
        :param pulumi.Input[bool] versioning_enable: Enable bucket versioning. NOTE: The `multi_az` feature is true for the current bucket, cannot disable version control.
        :param pulumi.Input[pulumi.InputType['BucketWebsiteArgs']] website: A website object(documented below).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a COS resource to create a COS bucket and set its attributes.

        > **NOTE:** The following capabilities do not support cdc scenarios: `multi_az`, `website`, and bucket replication `replica_role`.

        ## Example Usage

        ### Private Bucket

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        private_bucket = tencentcloud.cos.Bucket("privateBucket",
            bucket=f"private-bucket-{app_id}",
            acl="private")
        ```
        <!--End PulumiCodeChooser -->

        ### Private Bucket with CDC cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        region = "ap-guangzhou"
        cdc_id = "cluster-262n63e8"
        info = tencentcloud.User.get_info()
        app_id = info.app_id
        private_bucket = tencentcloud.cos.Bucket("privateBucket",
            bucket=f"private-bucket-{app_id}",
            acl="private",
            versioning_enable=True,
            force_clean=True)
        ```
        <!--End PulumiCodeChooser -->

        ### Enable SSE-KMS encryption

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        example = tencentcloud.kms.Key("example",
            alias="tf-example-kms-key",
            description="example of kms key",
            key_rotation_enabled=False,
            is_enabled=True,
            tags={
                "createdBy": "terraform",
            })
        bucket_basic = tencentcloud.cos.Bucket("bucketBasic",
            bucket=f"tf-bucket-cdc-{app_id}",
            acl="private",
            encryption_algorithm="KMS",
            kms_id=example.id,
            versioning_enable=True,
            acceleration_enable=False,
            force_clean=True)
        ```
        <!--End PulumiCodeChooser -->

        ### Creation of multiple available zone bucket

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        multi_zone_bucket = tencentcloud.cos.Bucket("multiZoneBucket",
            bucket=f"multi-zone-bucket-{app_id}",
            acl="private",
            multi_az=True,
            versioning_enable=True,
            force_clean=True)
        ```
        <!--End PulumiCodeChooser -->

        ### Using verbose acl

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_acl = tencentcloud.cos.Bucket("bucketWithAcl",
            bucket=f"bucketwith-acl-{app_id}",
            acl_body=\"\"\"<AccessControlPolicy>
        	<Owner>
        		<ID>qcs::cam::uin/100022975249:uin/100022975249</ID>
        		<DisplayName>qcs::cam::uin/100022975249:uin/100022975249</DisplayName>
        	</Owner>
        	<AccessControlList>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group">
        				<URI>http://cam.qcloud.com/groups/global/AllUsers</URI>
        			</Grantee>
        			<Permission>READ</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser">
        				<ID>qcs::cam::uin/100022975249:uin/100022975249</ID>
        				<DisplayName>qcs::cam::uin/100022975249:uin/100022975249</DisplayName>
        			</Grantee>
        			<Permission>FULL_CONTROL</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser">
        				<ID>qcs::cam::uin/100022975249:uin/100022975249</ID>
        				<DisplayName>qcs::cam::uin/100022975249:uin/100022975249</DisplayName>
        			</Grantee>
        			<Permission>WRITE_ACP</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group">
        				<URI>http://cam.qcloud.com/groups/global/AllUsers</URI>
        			</Grantee>
        			<Permission>READ_ACP</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group">
        				<URI>http://cam.qcloud.com/groups/global/AllUsers</URI>
        			</Grantee>
        			<Permission>WRITE_ACP</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser">
        				<ID>qcs::cam::uin/100022975249:uin/100022975249</ID>
        				<DisplayName>qcs::cam::uin/100022975249:uin/100022975249</DisplayName>
        			</Grantee>
        			<Permission>READ</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="CanonicalUser">
        				<ID>qcs::cam::uin/100022975249:uin/100022975249</ID>
        				<DisplayName>qcs::cam::uin/100022975249:uin/100022975249</DisplayName>
        			</Grantee>
        			<Permission>WRITE</Permission>
        		</Grant>
        		<Grant>
        			<Grantee xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="Group">
        				<URI>http://cam.qcloud.com/groups/global/AllUsers</URI>
        			</Grantee>
        			<Permission>FULL_CONTROL</Permission>
        		</Grant>
        	</AccessControlList>
        </AccessControlPolicy>
        \"\"\")
        ```
        <!--End PulumiCodeChooser -->

        ### Using verbose acl with CDC cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        region = "ap-guangzhou"
        cdc_id = "cluster-262n63e8"
        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_acl = tencentcloud.cos.Bucket("bucketWithAcl",
            bucket=f"private-bucket-{app_id}",
            acl="private",
            acl_body=\"\"\"<AccessControlPolicy>
            <Owner>
                <ID>qcs::cam::uin/100023201586:uin/100023201586</ID>
                <DisplayName>qcs::cam::uin/100023201586:uin/100023201586</DisplayName>
            </Owner>
            <AccessControlList>
                <Grant>
                    <Grantee type="CanonicalUser">
                        <ID>qcs::cam::uin/100015006748:uin/100015006748</ID>
                        <DisplayName>qcs::cam::uin/100015006748:uin/100015006748</DisplayName>
                    </Grantee>
                    <Permission>WRITE</Permission>
                </Grant>
                <Grant>
                    <Grantee type="CanonicalUser">
                        <ID>qcs::cam::uin/100023201586:uin/100023201586</ID>
                        <DisplayName>qcs::cam::uin/100023201586:uin/100023201586</DisplayName>
                    </Grantee>
                    <Permission>FULL_CONTROL</Permission>
                </Grant>
            </AccessControlList>
        </AccessControlPolicy>
        \"\"\")
        ```
        <!--End PulumiCodeChooser -->

        ### Static Website

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_static_website = tencentcloud.cos.Bucket("bucketWithStaticWebsite",
            bucket=f"bucket-with-static-website-{app_id}",
            website=tencentcloud.cos.BucketWebsiteArgs(
                index_document="index.html",
                error_document="error.html",
                redirect_all_requests_to="https",
            ))
        pulumi.export("endpointTest", bucket_with_static_website.website.endpoint)
        ```
        <!--End PulumiCodeChooser -->

        ### Using CORS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_cors = tencentcloud.cos.Bucket("bucketWithCors",
            bucket=f"bucket-with-cors-{app_id}",
            acl="public-read-write",
            cors_rules=[tencentcloud.cos.BucketCorsRuleArgs(
                allowed_origins=["http://*.abc.com"],
                allowed_methods=[
                    "PUT",
                    "POST",
                ],
                allowed_headers=["*"],
                max_age_seconds=300,
                expose_headers=["Etag"],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using CORS with CDC

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        region = "ap-guangzhou"
        cdc_id = "cluster-262n63e8"
        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_cors = tencentcloud.cos.Bucket("bucketWithCors",
            bucket=f"bucket-with-cors-{app_id}",
            cors_rules=[tencentcloud.cos.BucketCorsRuleArgs(
                allowed_origins=["http://*.abc.com"],
                allowed_methods=[
                    "PUT",
                    "POST",
                ],
                allowed_headers=["*"],
                max_age_seconds=300,
                expose_headers=["Etag"],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using object lifecycle

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_lifecycle = tencentcloud.cos.Bucket("bucketWithLifecycle",
            bucket=f"bucket-with-lifecycle-{app_id}",
            acl="public-read-write",
            lifecycle_rules=[tencentcloud.cos.BucketLifecycleRuleArgs(
                filter_prefix="path1/",
                transitions=[tencentcloud.cos.BucketLifecycleRuleTransitionArgs(
                    days=30,
                    storage_class="STANDARD_IA",
                )],
                expiration=tencentcloud.cos.BucketLifecycleRuleExpirationArgs(
                    days=90,
                ),
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using object lifecycle with CDC

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        region = "ap-guangzhou"
        cdc_id = "cluster-262n63e8"
        info = tencentcloud.User.get_info()
        app_id = info.app_id
        bucket_with_lifecycle = tencentcloud.cos.Bucket("bucketWithLifecycle",
            bucket=f"bucket-with-lifecycle-{app_id}",
            acl="private",
            lifecycle_rules=[tencentcloud.cos.BucketLifecycleRuleArgs(
                filter_prefix="path1/",
                expiration=tencentcloud.cos.BucketLifecycleRuleExpirationArgs(
                    days=90,
                ),
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using replication

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        uin = info.uin
        owner_uin = info.owner_uin
        region = "ap-guangzhou"
        bucket_replicate = tencentcloud.cos.Bucket("bucketReplicate",
            bucket=f"bucket-replicate-{app_id}",
            acl="private",
            versioning_enable=True)
        bucket_with_replication = tencentcloud.cos.Bucket("bucketWithReplication",
            bucket=f"bucket-with-replication-{app_id}",
            acl="private",
            versioning_enable=True,
            replica_role=f"qcs::cam::uin/{owner_uin}:uin/{uin}",
            replica_rules=[tencentcloud.cos.BucketReplicaRuleArgs(
                id="test-rep1",
                status="Enabled",
                prefix="dist",
                destination_bucket=bucket_replicate.bucket.apply(lambda bucket: f"qcs::cos:{region}::{bucket}"),
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        COS bucket can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Cos/bucket:Bucket bucket bucket-name
        ```

        :param str resource_name: The name of the resource.
        :param BucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acceleration_enable: Optional[pulumi.Input[bool]] = None,
                 acl: Optional[pulumi.Input[str]] = None,
                 acl_body: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketCorsRuleArgs']]]]] = None,
                 enable_intelligent_tiering: Optional[pulumi.Input[bool]] = None,
                 encryption_algorithm: Optional[pulumi.Input[str]] = None,
                 force_clean: Optional[pulumi.Input[bool]] = None,
                 intelligent_tiering_days: Optional[pulumi.Input[int]] = None,
                 intelligent_tiering_request_frequent: Optional[pulumi.Input[int]] = None,
                 kms_id: Optional[pulumi.Input[str]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketLifecycleRuleArgs']]]]] = None,
                 log_enable: Optional[pulumi.Input[bool]] = None,
                 log_prefix: Optional[pulumi.Input[str]] = None,
                 log_target_bucket: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 origin_domain_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketOriginDomainRuleArgs']]]]] = None,
                 origin_pull_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketOriginPullRuleArgs']]]]] = None,
                 replica_role: Optional[pulumi.Input[str]] = None,
                 replica_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketReplicaRuleArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 versioning_enable: Optional[pulumi.Input[bool]] = None,
                 website: Optional[pulumi.Input[pulumi.InputType['BucketWebsiteArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketArgs.__new__(BucketArgs)

            __props__.__dict__["acceleration_enable"] = acceleration_enable
            __props__.__dict__["acl"] = acl
            __props__.__dict__["acl_body"] = acl_body
            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["cdc_id"] = cdc_id
            __props__.__dict__["cors_rules"] = cors_rules
            __props__.__dict__["enable_intelligent_tiering"] = enable_intelligent_tiering
            __props__.__dict__["encryption_algorithm"] = encryption_algorithm
            __props__.__dict__["force_clean"] = force_clean
            __props__.__dict__["intelligent_tiering_days"] = intelligent_tiering_days
            __props__.__dict__["intelligent_tiering_request_frequent"] = intelligent_tiering_request_frequent
            __props__.__dict__["kms_id"] = kms_id
            __props__.__dict__["lifecycle_rules"] = lifecycle_rules
            __props__.__dict__["log_enable"] = log_enable
            __props__.__dict__["log_prefix"] = log_prefix
            __props__.__dict__["log_target_bucket"] = log_target_bucket
            __props__.__dict__["multi_az"] = multi_az
            __props__.__dict__["origin_domain_rules"] = origin_domain_rules
            __props__.__dict__["origin_pull_rules"] = origin_pull_rules
            __props__.__dict__["replica_role"] = replica_role
            __props__.__dict__["replica_rules"] = replica_rules
            __props__.__dict__["tags"] = tags
            __props__.__dict__["versioning_enable"] = versioning_enable
            __props__.__dict__["website"] = website
            __props__.__dict__["cos_bucket_url"] = None
        super(Bucket, __self__).__init__(
            'tencentcloud:Cos/bucket:Bucket',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acceleration_enable: Optional[pulumi.Input[bool]] = None,
            acl: Optional[pulumi.Input[str]] = None,
            acl_body: Optional[pulumi.Input[str]] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            cdc_id: Optional[pulumi.Input[str]] = None,
            cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketCorsRuleArgs']]]]] = None,
            cos_bucket_url: Optional[pulumi.Input[str]] = None,
            enable_intelligent_tiering: Optional[pulumi.Input[bool]] = None,
            encryption_algorithm: Optional[pulumi.Input[str]] = None,
            force_clean: Optional[pulumi.Input[bool]] = None,
            intelligent_tiering_days: Optional[pulumi.Input[int]] = None,
            intelligent_tiering_request_frequent: Optional[pulumi.Input[int]] = None,
            kms_id: Optional[pulumi.Input[str]] = None,
            lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketLifecycleRuleArgs']]]]] = None,
            log_enable: Optional[pulumi.Input[bool]] = None,
            log_prefix: Optional[pulumi.Input[str]] = None,
            log_target_bucket: Optional[pulumi.Input[str]] = None,
            multi_az: Optional[pulumi.Input[bool]] = None,
            origin_domain_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketOriginDomainRuleArgs']]]]] = None,
            origin_pull_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketOriginPullRuleArgs']]]]] = None,
            replica_role: Optional[pulumi.Input[str]] = None,
            replica_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketReplicaRuleArgs']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            versioning_enable: Optional[pulumi.Input[bool]] = None,
            website: Optional[pulumi.Input[pulumi.InputType['BucketWebsiteArgs']]] = None) -> 'Bucket':
        """
        Get an existing Bucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acceleration_enable: Enable bucket acceleration.
        :param pulumi.Input[str] acl: The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        :param pulumi.Input[str] acl_body: ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        :param pulumi.Input[str] bucket: The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[str] cdc_id: CDC cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketCorsRuleArgs']]]] cors_rules: A rule of Cross-Origin Resource Sharing (documented below).
        :param pulumi.Input[str] cos_bucket_url: The URL of this cos bucket.
        :param pulumi.Input[bool] enable_intelligent_tiering: Enable intelligent tiering. NOTE: When intelligent tiering configuration is enabled, it cannot be turned off or modified.
        :param pulumi.Input[str] encryption_algorithm: The server-side encryption algorithm to use. Valid values are `AES256`, `KMS` and `cos/kms`, `cos/kms` is for cdc cos scenario.
        :param pulumi.Input[bool] force_clean: Force cleanup all objects before delete bucket.
        :param pulumi.Input[int] intelligent_tiering_days: Specifies the limit of days for standard-tier data to low-frequency data in an intelligent tiered storage configuration, with optional days of 30, 60, 90. Default value is 30.
        :param pulumi.Input[int] intelligent_tiering_request_frequent: Specify the access limit for converting standard layer data into low-frequency layer data in the configuration. The default value is once, which can be used in combination with the number of days to achieve the conversion effect. For example, if the parameter is set to 1 and the number of access days is 30, it means that objects with less than one visit in 30 consecutive days will be reduced from the standard layer to the low frequency layer.
        :param pulumi.Input[str] kms_id: The KMS Master Key ID. This value is valid only when `encryption_algorithm` is set to KMS or cos/kms. Set kms id to the specified value. If not specified, the default kms id is used.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketLifecycleRuleArgs']]]] lifecycle_rules: A configuration of object lifecycle management (documented below).
        :param pulumi.Input[bool] log_enable: Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        :param pulumi.Input[str] log_prefix: The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        :param pulumi.Input[str] log_target_bucket: The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`. User must have full access on this bucket.
        :param pulumi.Input[bool] multi_az: Indicates whether to create a bucket of multi available zone.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketOriginDomainRuleArgs']]]] origin_domain_rules: Bucket Origin Domain settings.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketOriginPullRuleArgs']]]] origin_pull_rules: Bucket Origin-Pull settings.
        :param pulumi.Input[str] replica_role: Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true can configure this argument.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BucketReplicaRuleArgs']]]] replica_rules: List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of a bucket.
        :param pulumi.Input[bool] versioning_enable: Enable bucket versioning. NOTE: The `multi_az` feature is true for the current bucket, cannot disable version control.
        :param pulumi.Input[pulumi.InputType['BucketWebsiteArgs']] website: A website object(documented below).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketState.__new__(_BucketState)

        __props__.__dict__["acceleration_enable"] = acceleration_enable
        __props__.__dict__["acl"] = acl
        __props__.__dict__["acl_body"] = acl_body
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["cdc_id"] = cdc_id
        __props__.__dict__["cors_rules"] = cors_rules
        __props__.__dict__["cos_bucket_url"] = cos_bucket_url
        __props__.__dict__["enable_intelligent_tiering"] = enable_intelligent_tiering
        __props__.__dict__["encryption_algorithm"] = encryption_algorithm
        __props__.__dict__["force_clean"] = force_clean
        __props__.__dict__["intelligent_tiering_days"] = intelligent_tiering_days
        __props__.__dict__["intelligent_tiering_request_frequent"] = intelligent_tiering_request_frequent
        __props__.__dict__["kms_id"] = kms_id
        __props__.__dict__["lifecycle_rules"] = lifecycle_rules
        __props__.__dict__["log_enable"] = log_enable
        __props__.__dict__["log_prefix"] = log_prefix
        __props__.__dict__["log_target_bucket"] = log_target_bucket
        __props__.__dict__["multi_az"] = multi_az
        __props__.__dict__["origin_domain_rules"] = origin_domain_rules
        __props__.__dict__["origin_pull_rules"] = origin_pull_rules
        __props__.__dict__["replica_role"] = replica_role
        __props__.__dict__["replica_rules"] = replica_rules
        __props__.__dict__["tags"] = tags
        __props__.__dict__["versioning_enable"] = versioning_enable
        __props__.__dict__["website"] = website
        return Bucket(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accelerationEnable")
    def acceleration_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable bucket acceleration.
        """
        return pulumi.get(self, "acceleration_enable")

    @property
    @pulumi.getter
    def acl(self) -> pulumi.Output[Optional[str]]:
        """
        The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="aclBody")
    def acl_body(self) -> pulumi.Output[str]:
        """
        ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        """
        return pulumi.get(self, "acl_body")

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> pulumi.Output[Optional[str]]:
        """
        CDC cluster ID.
        """
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> pulumi.Output[Optional[Sequence['outputs.BucketCorsRule']]]:
        """
        A rule of Cross-Origin Resource Sharing (documented below).
        """
        return pulumi.get(self, "cors_rules")

    @property
    @pulumi.getter(name="cosBucketUrl")
    def cos_bucket_url(self) -> pulumi.Output[str]:
        """
        The URL of this cos bucket.
        """
        return pulumi.get(self, "cos_bucket_url")

    @property
    @pulumi.getter(name="enableIntelligentTiering")
    def enable_intelligent_tiering(self) -> pulumi.Output[bool]:
        """
        Enable intelligent tiering. NOTE: When intelligent tiering configuration is enabled, it cannot be turned off or modified.
        """
        return pulumi.get(self, "enable_intelligent_tiering")

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        The server-side encryption algorithm to use. Valid values are `AES256`, `KMS` and `cos/kms`, `cos/kms` is for cdc cos scenario.
        """
        return pulumi.get(self, "encryption_algorithm")

    @property
    @pulumi.getter(name="forceClean")
    def force_clean(self) -> pulumi.Output[Optional[bool]]:
        """
        Force cleanup all objects before delete bucket.
        """
        return pulumi.get(self, "force_clean")

    @property
    @pulumi.getter(name="intelligentTieringDays")
    def intelligent_tiering_days(self) -> pulumi.Output[int]:
        """
        Specifies the limit of days for standard-tier data to low-frequency data in an intelligent tiered storage configuration, with optional days of 30, 60, 90. Default value is 30.
        """
        return pulumi.get(self, "intelligent_tiering_days")

    @property
    @pulumi.getter(name="intelligentTieringRequestFrequent")
    def intelligent_tiering_request_frequent(self) -> pulumi.Output[int]:
        """
        Specify the access limit for converting standard layer data into low-frequency layer data in the configuration. The default value is once, which can be used in combination with the number of days to achieve the conversion effect. For example, if the parameter is set to 1 and the number of access days is 30, it means that objects with less than one visit in 30 consecutive days will be reduced from the standard layer to the low frequency layer.
        """
        return pulumi.get(self, "intelligent_tiering_request_frequent")

    @property
    @pulumi.getter(name="kmsId")
    def kms_id(self) -> pulumi.Output[Optional[str]]:
        """
        The KMS Master Key ID. This value is valid only when `encryption_algorithm` is set to KMS or cos/kms. Set kms id to the specified value. If not specified, the default kms id is used.
        """
        return pulumi.get(self, "kms_id")

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> pulumi.Output[Optional[Sequence['outputs.BucketLifecycleRule']]]:
        """
        A configuration of object lifecycle management (documented below).
        """
        return pulumi.get(self, "lifecycle_rules")

    @property
    @pulumi.getter(name="logEnable")
    def log_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        """
        return pulumi.get(self, "log_enable")

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> pulumi.Output[str]:
        """
        The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        """
        return pulumi.get(self, "log_prefix")

    @property
    @pulumi.getter(name="logTargetBucket")
    def log_target_bucket(self) -> pulumi.Output[str]:
        """
        The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`. User must have full access on this bucket.
        """
        return pulumi.get(self, "log_target_bucket")

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether to create a bucket of multi available zone.
        """
        return pulumi.get(self, "multi_az")

    @property
    @pulumi.getter(name="originDomainRules")
    def origin_domain_rules(self) -> pulumi.Output[Optional[Sequence['outputs.BucketOriginDomainRule']]]:
        """
        Bucket Origin Domain settings.
        """
        return pulumi.get(self, "origin_domain_rules")

    @property
    @pulumi.getter(name="originPullRules")
    def origin_pull_rules(self) -> pulumi.Output[Optional[Sequence['outputs.BucketOriginPullRule']]]:
        """
        Bucket Origin-Pull settings.
        """
        return pulumi.get(self, "origin_pull_rules")

    @property
    @pulumi.getter(name="replicaRole")
    def replica_role(self) -> pulumi.Output[Optional[str]]:
        """
        Request initiator identifier, format: `qcs::cam::uin/<owneruin>:uin/<subuin>`. NOTE: only `versioning_enable` is true can configure this argument.
        """
        return pulumi.get(self, "replica_role")

    @property
    @pulumi.getter(name="replicaRules")
    def replica_rules(self) -> pulumi.Output[Optional[Sequence['outputs.BucketReplicaRule']]]:
        """
        List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        """
        return pulumi.get(self, "replica_rules")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The tags of a bucket.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="versioningEnable")
    def versioning_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable bucket versioning. NOTE: The `multi_az` feature is true for the current bucket, cannot disable version control.
        """
        return pulumi.get(self, "versioning_enable")

    @property
    @pulumi.getter
    def website(self) -> pulumi.Output[Optional['outputs.BucketWebsite']]:
        """
        A website object(documented below).
        """
        return pulumi.get(self, "website")

