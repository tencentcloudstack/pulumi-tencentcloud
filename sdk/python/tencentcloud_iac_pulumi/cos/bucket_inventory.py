# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BucketInventoryArgs', 'BucketInventory']

@pulumi.input_type
class BucketInventoryArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 destination: pulumi.Input['BucketInventoryDestinationArgs'],
                 included_object_versions: pulumi.Input[str],
                 is_enabled: pulumi.Input[str],
                 schedule: pulumi.Input['BucketInventoryScheduleArgs'],
                 filter: Optional[pulumi.Input['BucketInventoryFilterArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional_fields: Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']] = None):
        """
        The set of arguments for constructing a BucketInventory resource.
        :param pulumi.Input[str] bucket: Bucket name.
        :param pulumi.Input['BucketInventoryDestinationArgs'] destination: Information about the inventory result destination.
        :param pulumi.Input[str] included_object_versions: Whether to include object versions in the inventory. All or No.
        :param pulumi.Input[str] is_enabled: Whether to enable the inventory. true or false.
        :param pulumi.Input['BucketInventoryScheduleArgs'] schedule: Inventory job cycle.
        :param pulumi.Input['BucketInventoryFilterArgs'] filter: Filters objects prefixed with the specified value to analyze.
        :param pulumi.Input[str] name: Inventory Name.
        :param pulumi.Input['BucketInventoryOptionalFieldsArgs'] optional_fields: Analysis items to include in the inventory result	.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "included_object_versions", included_object_versions)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "schedule", schedule)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional_fields is not None:
            pulumi.set(__self__, "optional_fields", optional_fields)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input['BucketInventoryDestinationArgs']:
        """
        Information about the inventory result destination.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['BucketInventoryDestinationArgs']):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="includedObjectVersions")
    def included_object_versions(self) -> pulumi.Input[str]:
        """
        Whether to include object versions in the inventory. All or No.
        """
        return pulumi.get(self, "included_object_versions")

    @included_object_versions.setter
    def included_object_versions(self, value: pulumi.Input[str]):
        pulumi.set(self, "included_object_versions", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[str]:
        """
        Whether to enable the inventory. true or false.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[str]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['BucketInventoryScheduleArgs']:
        """
        Inventory job cycle.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input['BucketInventoryScheduleArgs']):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['BucketInventoryFilterArgs']]:
        """
        Filters objects prefixed with the specified value to analyze.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['BucketInventoryFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Inventory Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']]:
        """
        Analysis items to include in the inventory result	.
        """
        return pulumi.get(self, "optional_fields")

    @optional_fields.setter
    def optional_fields(self, value: Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']]):
        pulumi.set(self, "optional_fields", value)


@pulumi.input_type
class _BucketInventoryState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input['BucketInventoryDestinationArgs']] = None,
                 filter: Optional[pulumi.Input['BucketInventoryFilterArgs']] = None,
                 included_object_versions: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional_fields: Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']] = None,
                 schedule: Optional[pulumi.Input['BucketInventoryScheduleArgs']] = None):
        """
        Input properties used for looking up and filtering BucketInventory resources.
        :param pulumi.Input[str] bucket: Bucket name.
        :param pulumi.Input['BucketInventoryDestinationArgs'] destination: Information about the inventory result destination.
        :param pulumi.Input['BucketInventoryFilterArgs'] filter: Filters objects prefixed with the specified value to analyze.
        :param pulumi.Input[str] included_object_versions: Whether to include object versions in the inventory. All or No.
        :param pulumi.Input[str] is_enabled: Whether to enable the inventory. true or false.
        :param pulumi.Input[str] name: Inventory Name.
        :param pulumi.Input['BucketInventoryOptionalFieldsArgs'] optional_fields: Analysis items to include in the inventory result	.
        :param pulumi.Input['BucketInventoryScheduleArgs'] schedule: Inventory job cycle.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if included_object_versions is not None:
            pulumi.set(__self__, "included_object_versions", included_object_versions)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional_fields is not None:
            pulumi.set(__self__, "optional_fields", optional_fields)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input['BucketInventoryDestinationArgs']]:
        """
        Information about the inventory result destination.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input['BucketInventoryDestinationArgs']]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['BucketInventoryFilterArgs']]:
        """
        Filters objects prefixed with the specified value to analyze.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['BucketInventoryFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="includedObjectVersions")
    def included_object_versions(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to include object versions in the inventory. All or No.
        """
        return pulumi.get(self, "included_object_versions")

    @included_object_versions.setter
    def included_object_versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "included_object_versions", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable the inventory. true or false.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Inventory Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']]:
        """
        Analysis items to include in the inventory result	.
        """
        return pulumi.get(self, "optional_fields")

    @optional_fields.setter
    def optional_fields(self, value: Optional[pulumi.Input['BucketInventoryOptionalFieldsArgs']]):
        pulumi.set(self, "optional_fields", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['BucketInventoryScheduleArgs']]:
        """
        Inventory job cycle.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['BucketInventoryScheduleArgs']]):
        pulumi.set(self, "schedule", value)


class BucketInventory(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[pulumi.InputType['BucketInventoryDestinationArgs']]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['BucketInventoryFilterArgs']]] = None,
                 included_object_versions: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional_fields: Optional[pulumi.Input[pulumi.InputType['BucketInventoryOptionalFieldsArgs']]] = None,
                 schedule: Optional[pulumi.Input[pulumi.InputType['BucketInventoryScheduleArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a cos bucket inventory

        > **NOTE:** The current resource does not support cdc.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        # create cos
        example_bucket = tencentcloud.cos.Bucket("exampleBucket",
            bucket=f"private-bucket-{app_id}",
            acl="private")
        # create cos bucket inventory
        example_bucket_inventory = tencentcloud.cos.BucketInventory("exampleBucketInventory",
            bucket=example_bucket.id,
            is_enabled="true",
            included_object_versions="Current",
            optional_fields=tencentcloud.cos.BucketInventoryOptionalFieldsArgs(
                fields=[
                    "Size",
                    "ETag",
                ],
            ),
            filter=tencentcloud.cos.BucketInventoryFilterArgs(
                period=tencentcloud.cos.BucketInventoryFilterPeriodArgs(
                    start_time="1687276800",
                ),
            ),
            schedule=tencentcloud.cos.BucketInventoryScheduleArgs(
                frequency="Daily",
            ),
            destination=tencentcloud.cos.BucketInventoryDestinationArgs(
                bucket="qcs::cos:ap-guangzhou::private-bucket-1309118522",
                format="CSV",
                prefix="frontends",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cos bucket inventory can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cos/bucketInventory:BucketInventory example private-bucket-1309118522#tf-example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: Bucket name.
        :param pulumi.Input[pulumi.InputType['BucketInventoryDestinationArgs']] destination: Information about the inventory result destination.
        :param pulumi.Input[pulumi.InputType['BucketInventoryFilterArgs']] filter: Filters objects prefixed with the specified value to analyze.
        :param pulumi.Input[str] included_object_versions: Whether to include object versions in the inventory. All or No.
        :param pulumi.Input[str] is_enabled: Whether to enable the inventory. true or false.
        :param pulumi.Input[str] name: Inventory Name.
        :param pulumi.Input[pulumi.InputType['BucketInventoryOptionalFieldsArgs']] optional_fields: Analysis items to include in the inventory result	.
        :param pulumi.Input[pulumi.InputType['BucketInventoryScheduleArgs']] schedule: Inventory job cycle.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketInventoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cos bucket inventory

        > **NOTE:** The current resource does not support cdc.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        app_id = info.app_id
        # create cos
        example_bucket = tencentcloud.cos.Bucket("exampleBucket",
            bucket=f"private-bucket-{app_id}",
            acl="private")
        # create cos bucket inventory
        example_bucket_inventory = tencentcloud.cos.BucketInventory("exampleBucketInventory",
            bucket=example_bucket.id,
            is_enabled="true",
            included_object_versions="Current",
            optional_fields=tencentcloud.cos.BucketInventoryOptionalFieldsArgs(
                fields=[
                    "Size",
                    "ETag",
                ],
            ),
            filter=tencentcloud.cos.BucketInventoryFilterArgs(
                period=tencentcloud.cos.BucketInventoryFilterPeriodArgs(
                    start_time="1687276800",
                ),
            ),
            schedule=tencentcloud.cos.BucketInventoryScheduleArgs(
                frequency="Daily",
            ),
            destination=tencentcloud.cos.BucketInventoryDestinationArgs(
                bucket="qcs::cos:ap-guangzhou::private-bucket-1309118522",
                format="CSV",
                prefix="frontends",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cos bucket inventory can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cos/bucketInventory:BucketInventory example private-bucket-1309118522#tf-example
        ```

        :param str resource_name: The name of the resource.
        :param BucketInventoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketInventoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[pulumi.InputType['BucketInventoryDestinationArgs']]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['BucketInventoryFilterArgs']]] = None,
                 included_object_versions: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional_fields: Optional[pulumi.Input[pulumi.InputType['BucketInventoryOptionalFieldsArgs']]] = None,
                 schedule: Optional[pulumi.Input[pulumi.InputType['BucketInventoryScheduleArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketInventoryArgs.__new__(BucketInventoryArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            __props__.__dict__["filter"] = filter
            if included_object_versions is None and not opts.urn:
                raise TypeError("Missing required property 'included_object_versions'")
            __props__.__dict__["included_object_versions"] = included_object_versions
            if is_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'is_enabled'")
            __props__.__dict__["is_enabled"] = is_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["optional_fields"] = optional_fields
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
        super(BucketInventory, __self__).__init__(
            'tencentcloud:Cos/bucketInventory:BucketInventory',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[pulumi.InputType['BucketInventoryDestinationArgs']]] = None,
            filter: Optional[pulumi.Input[pulumi.InputType['BucketInventoryFilterArgs']]] = None,
            included_object_versions: Optional[pulumi.Input[str]] = None,
            is_enabled: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            optional_fields: Optional[pulumi.Input[pulumi.InputType['BucketInventoryOptionalFieldsArgs']]] = None,
            schedule: Optional[pulumi.Input[pulumi.InputType['BucketInventoryScheduleArgs']]] = None) -> 'BucketInventory':
        """
        Get an existing BucketInventory resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: Bucket name.
        :param pulumi.Input[pulumi.InputType['BucketInventoryDestinationArgs']] destination: Information about the inventory result destination.
        :param pulumi.Input[pulumi.InputType['BucketInventoryFilterArgs']] filter: Filters objects prefixed with the specified value to analyze.
        :param pulumi.Input[str] included_object_versions: Whether to include object versions in the inventory. All or No.
        :param pulumi.Input[str] is_enabled: Whether to enable the inventory. true or false.
        :param pulumi.Input[str] name: Inventory Name.
        :param pulumi.Input[pulumi.InputType['BucketInventoryOptionalFieldsArgs']] optional_fields: Analysis items to include in the inventory result	.
        :param pulumi.Input[pulumi.InputType['BucketInventoryScheduleArgs']] schedule: Inventory job cycle.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketInventoryState.__new__(_BucketInventoryState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["destination"] = destination
        __props__.__dict__["filter"] = filter
        __props__.__dict__["included_object_versions"] = included_object_versions
        __props__.__dict__["is_enabled"] = is_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["optional_fields"] = optional_fields
        __props__.__dict__["schedule"] = schedule
        return BucketInventory(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        Bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output['outputs.BucketInventoryDestination']:
        """
        Information about the inventory result destination.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional['outputs.BucketInventoryFilter']]:
        """
        Filters objects prefixed with the specified value to analyze.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="includedObjectVersions")
    def included_object_versions(self) -> pulumi.Output[str]:
        """
        Whether to include object versions in the inventory. All or No.
        """
        return pulumi.get(self, "included_object_versions")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Output[str]:
        """
        Whether to enable the inventory. true or false.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Inventory Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="optionalFields")
    def optional_fields(self) -> pulumi.Output[Optional['outputs.BucketInventoryOptionalFields']]:
        """
        Analysis items to include in the inventory result	.
        """
        return pulumi.get(self, "optional_fields")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output['outputs.BucketInventorySchedule']:
        """
        Inventory job cycle.
        """
        return pulumi.get(self, "schedule")

