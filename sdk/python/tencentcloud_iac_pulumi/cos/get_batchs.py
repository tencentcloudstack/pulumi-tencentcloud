# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBatchsResult',
    'AwaitableGetBatchsResult',
    'get_batchs',
    'get_batchs_output',
]

@pulumi.output_type
class GetBatchsResult:
    """
    A collection of values returned by getBatchs.
    """
    def __init__(__self__, appid=None, id=None, job_statuses=None, jobs=None, result_output_file=None, uin=None):
        if appid and not isinstance(appid, int):
            raise TypeError("Expected argument 'appid' to be a int")
        pulumi.set(__self__, "appid", appid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_statuses and not isinstance(job_statuses, str):
            raise TypeError("Expected argument 'job_statuses' to be a str")
        pulumi.set(__self__, "job_statuses", job_statuses)
        if jobs and not isinstance(jobs, list):
            raise TypeError("Expected argument 'jobs' to be a list")
        pulumi.set(__self__, "jobs", jobs)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if uin and not isinstance(uin, str):
            raise TypeError("Expected argument 'uin' to be a str")
        pulumi.set(__self__, "uin", uin)

    @property
    @pulumi.getter
    def appid(self) -> int:
        return pulumi.get(self, "appid")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobStatuses")
    def job_statuses(self) -> Optional[str]:
        return pulumi.get(self, "job_statuses")

    @property
    @pulumi.getter
    def jobs(self) -> Sequence['outputs.GetBatchsJobResult']:
        """
        Multiple batch processing task information.
        """
        return pulumi.get(self, "jobs")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def uin(self) -> str:
        return pulumi.get(self, "uin")


class AwaitableGetBatchsResult(GetBatchsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBatchsResult(
            appid=self.appid,
            id=self.id,
            job_statuses=self.job_statuses,
            jobs=self.jobs,
            result_output_file=self.result_output_file,
            uin=self.uin)


def get_batchs(appid: Optional[int] = None,
               job_statuses: Optional[str] = None,
               result_output_file: Optional[str] = None,
               uin: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBatchsResult:
    """
    Use this data source to query the COS batch.

    > **NOTE:** The current resource does not support `cos_domain`.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cos_batchs = tencentcloud.Cos.get_batchs(appid="xxxxxx",
        uin="xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param int appid: Appid.
    :param str job_statuses: The task status information you need to query. If you do not specify a task status, COS returns the status of all tasks that have been executed, including those that are in progress. If you specify a task status, COS returns the task in the specified state. Optional task states include: Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
    :param str result_output_file: Used to save results.
    :param str uin: Uin.
    """
    __args__ = dict()
    __args__['appid'] = appid
    __args__['jobStatuses'] = job_statuses
    __args__['resultOutputFile'] = result_output_file
    __args__['uin'] = uin
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cos/getBatchs:getBatchs', __args__, opts=opts, typ=GetBatchsResult).value

    return AwaitableGetBatchsResult(
        appid=pulumi.get(__ret__, 'appid'),
        id=pulumi.get(__ret__, 'id'),
        job_statuses=pulumi.get(__ret__, 'job_statuses'),
        jobs=pulumi.get(__ret__, 'jobs'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        uin=pulumi.get(__ret__, 'uin'))


@_utilities.lift_output_func(get_batchs)
def get_batchs_output(appid: Optional[pulumi.Input[int]] = None,
                      job_statuses: Optional[pulumi.Input[Optional[str]]] = None,
                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      uin: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBatchsResult]:
    """
    Use this data source to query the COS batch.

    > **NOTE:** The current resource does not support `cos_domain`.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cos_batchs = tencentcloud.Cos.get_batchs(appid="xxxxxx",
        uin="xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param int appid: Appid.
    :param str job_statuses: The task status information you need to query. If you do not specify a task status, COS returns the status of all tasks that have been executed, including those that are in progress. If you specify a task status, COS returns the task in the specified state. Optional task states include: Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
    :param str result_output_file: Used to save results.
    :param str uin: Uin.
    """
    ...
