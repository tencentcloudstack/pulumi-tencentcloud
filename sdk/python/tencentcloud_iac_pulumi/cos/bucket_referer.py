# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BucketRefererArgs', 'BucketReferer']

@pulumi.input_type
class BucketRefererArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 domain_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 referer_type: pulumi.Input[str],
                 status: pulumi.Input[str],
                 empty_refer_configuration: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BucketReferer resource.
        :param pulumi.Input[str] bucket: Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_lists: A list of domain names in the blocklist/allowlist.
        :param pulumi.Input[str] referer_type: Hotlink protection type. Enumerated values: `Black-List`, `White-List`.
        :param pulumi.Input[str] status: Whether to enable hotlink protection. Enumerated values: `Enabled`, `Disabled`.
        :param pulumi.Input[str] empty_refer_configuration: Whether to allow access with an empty referer. Enumerated values: `Allow`, `Deny` (default).
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "domain_lists", domain_lists)
        pulumi.set(__self__, "referer_type", referer_type)
        pulumi.set(__self__, "status", status)
        if empty_refer_configuration is not None:
            pulumi.set(__self__, "empty_refer_configuration", empty_refer_configuration)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="domainLists")
    def domain_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of domain names in the blocklist/allowlist.
        """
        return pulumi.get(self, "domain_lists")

    @domain_lists.setter
    def domain_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "domain_lists", value)

    @property
    @pulumi.getter(name="refererType")
    def referer_type(self) -> pulumi.Input[str]:
        """
        Hotlink protection type. Enumerated values: `Black-List`, `White-List`.
        """
        return pulumi.get(self, "referer_type")

    @referer_type.setter
    def referer_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "referer_type", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Whether to enable hotlink protection. Enumerated values: `Enabled`, `Disabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="emptyReferConfiguration")
    def empty_refer_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to allow access with an empty referer. Enumerated values: `Allow`, `Deny` (default).
        """
        return pulumi.get(self, "empty_refer_configuration")

    @empty_refer_configuration.setter
    def empty_refer_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "empty_refer_configuration", value)


@pulumi.input_type
class _BucketRefererState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 empty_refer_configuration: Optional[pulumi.Input[str]] = None,
                 referer_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BucketReferer resources.
        :param pulumi.Input[str] bucket: Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_lists: A list of domain names in the blocklist/allowlist.
        :param pulumi.Input[str] empty_refer_configuration: Whether to allow access with an empty referer. Enumerated values: `Allow`, `Deny` (default).
        :param pulumi.Input[str] referer_type: Hotlink protection type. Enumerated values: `Black-List`, `White-List`.
        :param pulumi.Input[str] status: Whether to enable hotlink protection. Enumerated values: `Enabled`, `Disabled`.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if domain_lists is not None:
            pulumi.set(__self__, "domain_lists", domain_lists)
        if empty_refer_configuration is not None:
            pulumi.set(__self__, "empty_refer_configuration", empty_refer_configuration)
        if referer_type is not None:
            pulumi.set(__self__, "referer_type", referer_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="domainLists")
    def domain_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of domain names in the blocklist/allowlist.
        """
        return pulumi.get(self, "domain_lists")

    @domain_lists.setter
    def domain_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_lists", value)

    @property
    @pulumi.getter(name="emptyReferConfiguration")
    def empty_refer_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to allow access with an empty referer. Enumerated values: `Allow`, `Deny` (default).
        """
        return pulumi.get(self, "empty_refer_configuration")

    @empty_refer_configuration.setter
    def empty_refer_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "empty_refer_configuration", value)

    @property
    @pulumi.getter(name="refererType")
    def referer_type(self) -> Optional[pulumi.Input[str]]:
        """
        Hotlink protection type. Enumerated values: `Black-List`, `White-List`.
        """
        return pulumi.get(self, "referer_type")

    @referer_type.setter
    def referer_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "referer_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable hotlink protection. Enumerated values: `Enabled`, `Disabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class BucketReferer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 empty_refer_configuration: Optional[pulumi.Input[str]] = None,
                 referer_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cos bucket_referer

        > **NOTE:** The current resource does not support cdc.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        bucket_referer = tencentcloud.cos.BucketReferer("bucketReferer",
            bucket="mycos-1258798060",
            domain_lists=[
                "127.0.0.1",
                "terraform.com",
            ],
            empty_refer_configuration="Allow",
            referer_type="Black-List",
            status="Enabled")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cos bucket_referer can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cos/bucketReferer:BucketReferer bucket_referer bucket_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_lists: A list of domain names in the blocklist/allowlist.
        :param pulumi.Input[str] empty_refer_configuration: Whether to allow access with an empty referer. Enumerated values: `Allow`, `Deny` (default).
        :param pulumi.Input[str] referer_type: Hotlink protection type. Enumerated values: `Black-List`, `White-List`.
        :param pulumi.Input[str] status: Whether to enable hotlink protection. Enumerated values: `Enabled`, `Disabled`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketRefererArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cos bucket_referer

        > **NOTE:** The current resource does not support cdc.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        bucket_referer = tencentcloud.cos.BucketReferer("bucketReferer",
            bucket="mycos-1258798060",
            domain_lists=[
                "127.0.0.1",
                "terraform.com",
            ],
            empty_refer_configuration="Allow",
            referer_type="Black-List",
            status="Enabled")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cos bucket_referer can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cos/bucketReferer:BucketReferer bucket_referer bucket_id
        ```

        :param str resource_name: The name of the resource.
        :param BucketRefererArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketRefererArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 empty_refer_configuration: Optional[pulumi.Input[str]] = None,
                 referer_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketRefererArgs.__new__(BucketRefererArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if domain_lists is None and not opts.urn:
                raise TypeError("Missing required property 'domain_lists'")
            __props__.__dict__["domain_lists"] = domain_lists
            __props__.__dict__["empty_refer_configuration"] = empty_refer_configuration
            if referer_type is None and not opts.urn:
                raise TypeError("Missing required property 'referer_type'")
            __props__.__dict__["referer_type"] = referer_type
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
        super(BucketReferer, __self__).__init__(
            'tencentcloud:Cos/bucketReferer:BucketReferer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            empty_refer_configuration: Optional[pulumi.Input[str]] = None,
            referer_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'BucketReferer':
        """
        Get an existing BucketReferer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_lists: A list of domain names in the blocklist/allowlist.
        :param pulumi.Input[str] empty_refer_configuration: Whether to allow access with an empty referer. Enumerated values: `Allow`, `Deny` (default).
        :param pulumi.Input[str] referer_type: Hotlink protection type. Enumerated values: `Black-List`, `White-List`.
        :param pulumi.Input[str] status: Whether to enable hotlink protection. Enumerated values: `Enabled`, `Disabled`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketRefererState.__new__(_BucketRefererState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["domain_lists"] = domain_lists
        __props__.__dict__["empty_refer_configuration"] = empty_refer_configuration
        __props__.__dict__["referer_type"] = referer_type
        __props__.__dict__["status"] = status
        return BucketReferer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="domainLists")
    def domain_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of domain names in the blocklist/allowlist.
        """
        return pulumi.get(self, "domain_lists")

    @property
    @pulumi.getter(name="emptyReferConfiguration")
    def empty_refer_configuration(self) -> pulumi.Output[Optional[str]]:
        """
        Whether to allow access with an empty referer. Enumerated values: `Allow`, `Deny` (default).
        """
        return pulumi.get(self, "empty_refer_configuration")

    @property
    @pulumi.getter(name="refererType")
    def referer_type(self) -> pulumi.Output[str]:
        """
        Hotlink protection type. Enumerated values: `Black-List`, `White-List`.
        """
        return pulumi.get(self, "referer_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Whether to enable hotlink protection. Enumerated values: `Enabled`, `Disabled`.
        """
        return pulumi.get(self, "status")

