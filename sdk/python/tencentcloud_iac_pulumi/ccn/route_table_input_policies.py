# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouteTableInputPoliciesArgs', 'RouteTableInputPolicies']

@pulumi.input_type
class RouteTableInputPoliciesArgs:
    def __init__(__self__, *,
                 ccn_id: pulumi.Input[str],
                 route_table_id: pulumi.Input[str],
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['RouteTableInputPoliciesPolicyArgs']]]] = None):
        """
        The set of arguments for constructing a RouteTableInputPolicies resource.
        :param pulumi.Input[str] ccn_id: CCN Instance ID.
        :param pulumi.Input[str] route_table_id: CCN Route table ID.
        :param pulumi.Input[Sequence[pulumi.Input['RouteTableInputPoliciesPolicyArgs']]] policies: Routing reception strategy.
        """
        pulumi.set(__self__, "ccn_id", ccn_id)
        pulumi.set(__self__, "route_table_id", route_table_id)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> pulumi.Input[str]:
        """
        CCN Instance ID.
        """
        return pulumi.get(self, "ccn_id")

    @ccn_id.setter
    def ccn_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ccn_id", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Input[str]:
        """
        CCN Route table ID.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_table_id", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteTableInputPoliciesPolicyArgs']]]]:
        """
        Routing reception strategy.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteTableInputPoliciesPolicyArgs']]]]):
        pulumi.set(self, "policies", value)


@pulumi.input_type
class _RouteTableInputPoliciesState:
    def __init__(__self__, *,
                 ccn_id: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['RouteTableInputPoliciesPolicyArgs']]]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RouteTableInputPolicies resources.
        :param pulumi.Input[str] ccn_id: CCN Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['RouteTableInputPoliciesPolicyArgs']]] policies: Routing reception strategy.
        :param pulumi.Input[str] route_table_id: CCN Route table ID.
        """
        if ccn_id is not None:
            pulumi.set(__self__, "ccn_id", ccn_id)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> Optional[pulumi.Input[str]]:
        """
        CCN Instance ID.
        """
        return pulumi.get(self, "ccn_id")

    @ccn_id.setter
    def ccn_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ccn_id", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouteTableInputPoliciesPolicyArgs']]]]:
        """
        Routing reception strategy.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouteTableInputPoliciesPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[str]]:
        """
        CCN Route table ID.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_id", value)


class RouteTableInputPolicies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ccn_id: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteTableInputPoliciesPolicyArgs']]]]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a CCN Route table input policies.

        > **NOTE:** Use this resource to manage all input policies under the routing table of CCN instances.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "ap-guangzhou"
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="172.16.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="172.16.0.0/24",
            is_multicast=False)
        # create ccn
        example_instance = tencentcloud.ccn.Instance("exampleInstance",
            description="desc.",
            qos="AG",
            charge_type="PREPAID",
            bandwidth_limit_type="INTER_REGION_LIMIT",
            tags={
                "createBy": "terraform",
            })
        # create ccn route table
        example_route_table = tencentcloud.ccn.RouteTable("exampleRouteTable",
            ccn_id=example_instance.id,
            description="desc.")
        # attachment instance
        attachment = tencentcloud.ccn.Attachment("attachment",
            ccn_id=example_instance.id,
            instance_id=vpc.id,
            instance_type="VPC",
            instance_region=region,
            route_table_id=example_route_table.id)
        # create route table input policy
        example_route_table_input_policies = tencentcloud.ccn.RouteTableInputPolicies("exampleRouteTableInputPolicies",
            ccn_id=example_instance.id,
            route_table_id=example_route_table.id,
            policies=[tencentcloud.ccn.RouteTableInputPoliciesPolicyArgs(
                action="accept",
                description="desc.",
                route_conditions=[tencentcloud.ccn.RouteTableInputPoliciesPolicyRouteConditionArgs(
                    name="instance-region",
                    values=[region],
                    match_pattern=1,
                )],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Ccn instance can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Ccn/routeTableInputPolicies:RouteTableInputPolicies example ccn-gr7nynbd#ccnrtb-jpf7bzn3
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ccn_id: CCN Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteTableInputPoliciesPolicyArgs']]]] policies: Routing reception strategy.
        :param pulumi.Input[str] route_table_id: CCN Route table ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteTableInputPoliciesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a CCN Route table input policies.

        > **NOTE:** Use this resource to manage all input policies under the routing table of CCN instances.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "ap-guangzhou"
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="172.16.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="172.16.0.0/24",
            is_multicast=False)
        # create ccn
        example_instance = tencentcloud.ccn.Instance("exampleInstance",
            description="desc.",
            qos="AG",
            charge_type="PREPAID",
            bandwidth_limit_type="INTER_REGION_LIMIT",
            tags={
                "createBy": "terraform",
            })
        # create ccn route table
        example_route_table = tencentcloud.ccn.RouteTable("exampleRouteTable",
            ccn_id=example_instance.id,
            description="desc.")
        # attachment instance
        attachment = tencentcloud.ccn.Attachment("attachment",
            ccn_id=example_instance.id,
            instance_id=vpc.id,
            instance_type="VPC",
            instance_region=region,
            route_table_id=example_route_table.id)
        # create route table input policy
        example_route_table_input_policies = tencentcloud.ccn.RouteTableInputPolicies("exampleRouteTableInputPolicies",
            ccn_id=example_instance.id,
            route_table_id=example_route_table.id,
            policies=[tencentcloud.ccn.RouteTableInputPoliciesPolicyArgs(
                action="accept",
                description="desc.",
                route_conditions=[tencentcloud.ccn.RouteTableInputPoliciesPolicyRouteConditionArgs(
                    name="instance-region",
                    values=[region],
                    match_pattern=1,
                )],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Ccn instance can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Ccn/routeTableInputPolicies:RouteTableInputPolicies example ccn-gr7nynbd#ccnrtb-jpf7bzn3
        ```

        :param str resource_name: The name of the resource.
        :param RouteTableInputPoliciesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteTableInputPoliciesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ccn_id: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteTableInputPoliciesPolicyArgs']]]]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteTableInputPoliciesArgs.__new__(RouteTableInputPoliciesArgs)

            if ccn_id is None and not opts.urn:
                raise TypeError("Missing required property 'ccn_id'")
            __props__.__dict__["ccn_id"] = ccn_id
            __props__.__dict__["policies"] = policies
            if route_table_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_table_id'")
            __props__.__dict__["route_table_id"] = route_table_id
        super(RouteTableInputPolicies, __self__).__init__(
            'tencentcloud:Ccn/routeTableInputPolicies:RouteTableInputPolicies',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ccn_id: Optional[pulumi.Input[str]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteTableInputPoliciesPolicyArgs']]]]] = None,
            route_table_id: Optional[pulumi.Input[str]] = None) -> 'RouteTableInputPolicies':
        """
        Get an existing RouteTableInputPolicies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ccn_id: CCN Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RouteTableInputPoliciesPolicyArgs']]]] policies: Routing reception strategy.
        :param pulumi.Input[str] route_table_id: CCN Route table ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteTableInputPoliciesState.__new__(_RouteTableInputPoliciesState)

        __props__.__dict__["ccn_id"] = ccn_id
        __props__.__dict__["policies"] = policies
        __props__.__dict__["route_table_id"] = route_table_id
        return RouteTableInputPolicies(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> pulumi.Output[str]:
        """
        CCN Instance ID.
        """
        return pulumi.get(self, "ccn_id")

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Optional[Sequence['outputs.RouteTableInputPoliciesPolicy']]]:
        """
        Routing reception strategy.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[str]:
        """
        CCN Route table ID.
        """
        return pulumi.get(self, "route_table_id")

