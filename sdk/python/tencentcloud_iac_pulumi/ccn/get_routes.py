# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRoutesResult',
    'AwaitableGetRoutesResult',
    'get_routes',
    'get_routes_output',
]

@pulumi.output_type
class GetRoutesResult:
    """
    A collection of values returned by getRoutes.
    """
    def __init__(__self__, ccn_id=None, filters=None, id=None, result_output_file=None, route_lists=None):
        if ccn_id and not isinstance(ccn_id, str):
            raise TypeError("Expected argument 'ccn_id' to be a str")
        pulumi.set(__self__, "ccn_id", ccn_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if route_lists and not isinstance(route_lists, list):
            raise TypeError("Expected argument 'route_lists' to be a list")
        pulumi.set(__self__, "route_lists", route_lists)

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> str:
        return pulumi.get(self, "ccn_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetRoutesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="routeLists")
    def route_lists(self) -> Sequence['outputs.GetRoutesRouteListResult']:
        """
        CCN route list.
        """
        return pulumi.get(self, "route_lists")


class AwaitableGetRoutesResult(GetRoutesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoutesResult(
            ccn_id=self.ccn_id,
            filters=self.filters,
            id=self.id,
            result_output_file=self.result_output_file,
            route_lists=self.route_lists)


def get_routes(ccn_id: Optional[str] = None,
               filters: Optional[Sequence[pulumi.InputType['GetRoutesFilterArgs']]] = None,
               result_output_file: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoutesResult:
    """
    Use this data source to query detailed information of CCN routes.

    ## Example Usage

    ### Query CCN instance all routes

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    routes = tencentcloud.Ccn.get_routes(ccn_id="ccn-gr7nynbd")
    ```
    <!--End PulumiCodeChooser -->

    ### Query CCN instance routes by filter

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    routes = tencentcloud.Ccn.get_routes(ccn_id="ccn-gr7nynbd",
        filters=[tencentcloud.ccn.GetRoutesFilterArgs(
            name="route-table-id",
            values=["ccnrtb-jpf7bzn3"],
        )])
    ```
    <!--End PulumiCodeChooser -->


    :param str ccn_id: ID of the CCN to be queried.
    :param Sequence[pulumi.InputType['GetRoutesFilterArgs']] filters: Filter conditions.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['ccnId'] = ccn_id
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ccn/getRoutes:getRoutes', __args__, opts=opts, typ=GetRoutesResult).value

    return AwaitableGetRoutesResult(
        ccn_id=pulumi.get(__ret__, 'ccn_id'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        route_lists=pulumi.get(__ret__, 'route_lists'))


@_utilities.lift_output_func(get_routes)
def get_routes_output(ccn_id: Optional[pulumi.Input[str]] = None,
                      filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetRoutesFilterArgs']]]]] = None,
                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRoutesResult]:
    """
    Use this data source to query detailed information of CCN routes.

    ## Example Usage

    ### Query CCN instance all routes

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    routes = tencentcloud.Ccn.get_routes(ccn_id="ccn-gr7nynbd")
    ```
    <!--End PulumiCodeChooser -->

    ### Query CCN instance routes by filter

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    routes = tencentcloud.Ccn.get_routes(ccn_id="ccn-gr7nynbd",
        filters=[tencentcloud.ccn.GetRoutesFilterArgs(
            name="route-table-id",
            values=["ccnrtb-jpf7bzn3"],
        )])
    ```
    <!--End PulumiCodeChooser -->


    :param str ccn_id: ID of the CCN to be queried.
    :param Sequence[pulumi.InputType['GetRoutesFilterArgs']] filters: Filter conditions.
    :param str result_output_file: Used to save results.
    """
    ...
