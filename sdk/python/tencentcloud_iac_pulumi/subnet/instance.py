# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[str],
                 cidr_block: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 is_multicast: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] availability_zone: The availability zone within which the subnet should be created.
        :param pulumi.Input[str] cidr_block: A network address block of the subnet.
        :param pulumi.Input[str] vpc_id: ID of the VPC to be associated.
        :param pulumi.Input[str] cdc_id: ID of CDC instance.
        :param pulumi.Input[bool] is_multicast: Indicates whether multicast is enabled. The default value is 'true'.
        :param pulumi.Input[str] name: The name of subnet to be created.
        :param pulumi.Input[str] route_table_id: ID of a routing table to which the subnet should be associated.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the subnet.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if is_multicast is not None:
            pulumi.set(__self__, "is_multicast", is_multicast)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[str]:
        """
        The availability zone within which the subnet should be created.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Input[str]:
        """
        A network address block of the subnet.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        ID of the VPC to be associated.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of CDC instance.
        """
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="isMulticast")
    def is_multicast(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether multicast is enabled. The default value is 'true'.
        """
        return pulumi.get(self, "is_multicast")

    @is_multicast.setter
    def is_multicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_multicast", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of subnet to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of a routing table to which the subnet should be associated.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of the subnet.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 available_ip_count: Optional[pulumi.Input[int]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 is_multicast: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] availability_zone: The availability zone within which the subnet should be created.
        :param pulumi.Input[int] available_ip_count: The number of available IPs.
        :param pulumi.Input[str] cdc_id: ID of CDC instance.
        :param pulumi.Input[str] cidr_block: A network address block of the subnet.
        :param pulumi.Input[str] create_time: Creation time of subnet resource.
        :param pulumi.Input[bool] is_default: Indicates whether it is the default VPC for this region.
        :param pulumi.Input[bool] is_multicast: Indicates whether multicast is enabled. The default value is 'true'.
        :param pulumi.Input[str] name: The name of subnet to be created.
        :param pulumi.Input[str] route_table_id: ID of a routing table to which the subnet should be associated.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the subnet.
        :param pulumi.Input[str] vpc_id: ID of the VPC to be associated.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if available_ip_count is not None:
            pulumi.set(__self__, "available_ip_count", available_ip_count)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_multicast is not None:
            pulumi.set(__self__, "is_multicast", is_multicast)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The availability zone within which the subnet should be created.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="availableIpCount")
    def available_ip_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of available IPs.
        """
        return pulumi.get(self, "available_ip_count")

    @available_ip_count.setter
    def available_ip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "available_ip_count", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of CDC instance.
        """
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        A network address block of the subnet.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of subnet resource.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether it is the default VPC for this region.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="isMulticast")
    def is_multicast(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether multicast is enabled. The default value is 'true'.
        """
        return pulumi.get(self, "is_multicast")

    @is_multicast.setter
    def is_multicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_multicast", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of subnet to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of a routing table to which the subnet should be associated.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of the subnet.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC to be associated.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 is_multicast: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to create a VPC subnet.

        ## Example Usage

        ## Import

        Vpc subnet instance can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Subnet/instance:Instance subnet subnet-b8j03v0c
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] availability_zone: The availability zone within which the subnet should be created.
        :param pulumi.Input[str] cdc_id: ID of CDC instance.
        :param pulumi.Input[str] cidr_block: A network address block of the subnet.
        :param pulumi.Input[bool] is_multicast: Indicates whether multicast is enabled. The default value is 'true'.
        :param pulumi.Input[str] name: The name of subnet to be created.
        :param pulumi.Input[str] route_table_id: ID of a routing table to which the subnet should be associated.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the subnet.
        :param pulumi.Input[str] vpc_id: ID of the VPC to be associated.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a VPC subnet.

        ## Example Usage

        ## Import

        Vpc subnet instance can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Subnet/instance:Instance subnet subnet-b8j03v0c
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 is_multicast: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if availability_zone is None and not opts.urn:
                raise TypeError("Missing required property 'availability_zone'")
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["cdc_id"] = cdc_id
            if cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'cidr_block'")
            __props__.__dict__["cidr_block"] = cidr_block
            __props__.__dict__["is_multicast"] = is_multicast
            __props__.__dict__["name"] = name
            __props__.__dict__["route_table_id"] = route_table_id
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["available_ip_count"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["is_default"] = None
        super(Instance, __self__).__init__(
            'tencentcloud:Subnet/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            available_ip_count: Optional[pulumi.Input[int]] = None,
            cdc_id: Optional[pulumi.Input[str]] = None,
            cidr_block: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            is_default: Optional[pulumi.Input[bool]] = None,
            is_multicast: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            route_table_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] availability_zone: The availability zone within which the subnet should be created.
        :param pulumi.Input[int] available_ip_count: The number of available IPs.
        :param pulumi.Input[str] cdc_id: ID of CDC instance.
        :param pulumi.Input[str] cidr_block: A network address block of the subnet.
        :param pulumi.Input[str] create_time: Creation time of subnet resource.
        :param pulumi.Input[bool] is_default: Indicates whether it is the default VPC for this region.
        :param pulumi.Input[bool] is_multicast: Indicates whether multicast is enabled. The default value is 'true'.
        :param pulumi.Input[str] name: The name of subnet to be created.
        :param pulumi.Input[str] route_table_id: ID of a routing table to which the subnet should be associated.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the subnet.
        :param pulumi.Input[str] vpc_id: ID of the VPC to be associated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["available_ip_count"] = available_ip_count
        __props__.__dict__["cdc_id"] = cdc_id
        __props__.__dict__["cidr_block"] = cidr_block
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["is_multicast"] = is_multicast
        __props__.__dict__["name"] = name
        __props__.__dict__["route_table_id"] = route_table_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        """
        The availability zone within which the subnet should be created.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="availableIpCount")
    def available_ip_count(self) -> pulumi.Output[int]:
        """
        The number of available IPs.
        """
        return pulumi.get(self, "available_ip_count")

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of CDC instance.
        """
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Output[str]:
        """
        A network address block of the subnet.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time of subnet resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[bool]:
        """
        Indicates whether it is the default VPC for this region.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isMulticast")
    def is_multicast(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether multicast is enabled. The default value is 'true'.
        """
        return pulumi.get(self, "is_multicast")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of subnet to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[str]:
        """
        ID of a routing table to which the subnet should be associated.
        """
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tags of the subnet.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of the VPC to be associated.
        """
        return pulumi.get(self, "vpc_id")

