# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDedicatedClusterOrdersResult',
    'AwaitableGetDedicatedClusterOrdersResult',
    'get_dedicated_cluster_orders',
    'get_dedicated_cluster_orders_output',
]

@pulumi.output_type
class GetDedicatedClusterOrdersResult:
    """
    A collection of values returned by getDedicatedClusterOrders.
    """
    def __init__(__self__, action_type=None, dedicated_cluster_ids=None, dedicated_cluster_order_sets=None, id=None, result_output_file=None, status=None):
        if action_type and not isinstance(action_type, str):
            raise TypeError("Expected argument 'action_type' to be a str")
        pulumi.set(__self__, "action_type", action_type)
        if dedicated_cluster_ids and not isinstance(dedicated_cluster_ids, list):
            raise TypeError("Expected argument 'dedicated_cluster_ids' to be a list")
        pulumi.set(__self__, "dedicated_cluster_ids", dedicated_cluster_ids)
        if dedicated_cluster_order_sets and not isinstance(dedicated_cluster_order_sets, list):
            raise TypeError("Expected argument 'dedicated_cluster_order_sets' to be a list")
        pulumi.set(__self__, "dedicated_cluster_order_sets", dedicated_cluster_order_sets)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="dedicatedClusterIds")
    def dedicated_cluster_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dedicated_cluster_ids")

    @property
    @pulumi.getter(name="dedicatedClusterOrderSets")
    def dedicated_cluster_order_sets(self) -> Sequence['outputs.GetDedicatedClusterOrdersDedicatedClusterOrderSetResult']:
        """
        Filter by Dedicated Cluster Order.
        """
        return pulumi.get(self, "dedicated_cluster_order_sets")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


class AwaitableGetDedicatedClusterOrdersResult(GetDedicatedClusterOrdersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDedicatedClusterOrdersResult(
            action_type=self.action_type,
            dedicated_cluster_ids=self.dedicated_cluster_ids,
            dedicated_cluster_order_sets=self.dedicated_cluster_order_sets,
            id=self.id,
            result_output_file=self.result_output_file,
            status=self.status)


def get_dedicated_cluster_orders(action_type: Optional[str] = None,
                                 dedicated_cluster_ids: Optional[Sequence[str]] = None,
                                 result_output_file: Optional[str] = None,
                                 status: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDedicatedClusterOrdersResult:
    """
    Use this data source to query detailed information of CDC dedicated cluster orders

    ## Example Usage

    ### Query all orders

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    orders = tencentcloud.Cdc.get_dedicated_cluster_orders()
    ```
    <!--End PulumiCodeChooser -->

    ### Query orders by filter

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    orders1 = tencentcloud.Cdc.get_dedicated_cluster_orders(dedicated_cluster_ids=["cluster-262n63e8"])
    orders3 = tencentcloud.Cdc.get_dedicated_cluster_orders(action_type="CREATE",
        status="PENDING")
    ```
    <!--End PulumiCodeChooser -->


    :param str action_type: Filter by Dedicated Cluster Order Action Type. Allow filter value: CREATE, EXTEND.
    :param Sequence[str] dedicated_cluster_ids: Filter by Dedicated Cluster ID.
    :param str result_output_file: Used to save results.
    :param str status: Filter by Dedicated Cluster Order Status. Allow filter value: PENDING, INCONSTRUCTION, DELIVERING, DELIVERED, EXPIRED, CANCELLED, OFFLINE.
    """
    __args__ = dict()
    __args__['actionType'] = action_type
    __args__['dedicatedClusterIds'] = dedicated_cluster_ids
    __args__['resultOutputFile'] = result_output_file
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cdc/getDedicatedClusterOrders:getDedicatedClusterOrders', __args__, opts=opts, typ=GetDedicatedClusterOrdersResult).value

    return AwaitableGetDedicatedClusterOrdersResult(
        action_type=pulumi.get(__ret__, 'action_type'),
        dedicated_cluster_ids=pulumi.get(__ret__, 'dedicated_cluster_ids'),
        dedicated_cluster_order_sets=pulumi.get(__ret__, 'dedicated_cluster_order_sets'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_dedicated_cluster_orders)
def get_dedicated_cluster_orders_output(action_type: Optional[pulumi.Input[Optional[str]]] = None,
                                        dedicated_cluster_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                        status: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDedicatedClusterOrdersResult]:
    """
    Use this data source to query detailed information of CDC dedicated cluster orders

    ## Example Usage

    ### Query all orders

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    orders = tencentcloud.Cdc.get_dedicated_cluster_orders()
    ```
    <!--End PulumiCodeChooser -->

    ### Query orders by filter

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    orders1 = tencentcloud.Cdc.get_dedicated_cluster_orders(dedicated_cluster_ids=["cluster-262n63e8"])
    orders3 = tencentcloud.Cdc.get_dedicated_cluster_orders(action_type="CREATE",
        status="PENDING")
    ```
    <!--End PulumiCodeChooser -->


    :param str action_type: Filter by Dedicated Cluster Order Action Type. Allow filter value: CREATE, EXTEND.
    :param Sequence[str] dedicated_cluster_ids: Filter by Dedicated Cluster ID.
    :param str result_output_file: Used to save results.
    :param str status: Filter by Dedicated Cluster Order Status. Allow filter value: PENDING, INCONSTRUCTION, DELIVERING, DELIVERED, EXPIRED, CANCELLED, OFFLINE.
    """
    ...
