# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SiteArgs', 'Site']

@pulumi.input_type
class SiteArgs:
    def __init__(__self__, *,
                 address_line: pulumi.Input[str],
                 city: pulumi.Input[str],
                 country: pulumi.Input[str],
                 province: pulumi.Input[str],
                 breaker_requirement: Optional[pulumi.Input[bool]] = None,
                 condition_requirement: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dimension_requirement: Optional[pulumi.Input[bool]] = None,
                 fiber_type: Optional[pulumi.Input[str]] = None,
                 max_weight: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_help: Optional[pulumi.Input[bool]] = None,
                 optical_standard: Optional[pulumi.Input[str]] = None,
                 optional_address_line: Optional[pulumi.Input[str]] = None,
                 power_connectors: Optional[pulumi.Input[str]] = None,
                 power_draw_kva: Optional[pulumi.Input[int]] = None,
                 power_feed_drop: Optional[pulumi.Input[str]] = None,
                 redundant_networking: Optional[pulumi.Input[bool]] = None,
                 redundant_power: Optional[pulumi.Input[bool]] = None,
                 uplink_count: Optional[pulumi.Input[int]] = None,
                 uplink_speed_gbps: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Site resource.
        :param pulumi.Input[str] address_line: Site Detail Address.
        :param pulumi.Input[str] city: Site City.
        :param pulumi.Input[str] country: Site Country.
        :param pulumi.Input[str] province: Site Province.
        :param pulumi.Input[bool] breaker_requirement: Whether there is an upstream circuit breaker.
        :param pulumi.Input[bool] condition_requirement: Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
        :param pulumi.Input[str] description: Site Description.
        :param pulumi.Input[bool] dimension_requirement: Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
        :param pulumi.Input[str] fiber_type: Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
        :param pulumi.Input[int] max_weight: Site Max Weight capacity (KG).
        :param pulumi.Input[str] name: Site Name.
        :param pulumi.Input[bool] need_help: Whether you need help from Tencent Cloud for rack installation.
        :param pulumi.Input[str] optical_standard: Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
        :param pulumi.Input[str] optional_address_line: Detailed address of the site area (to be added).
        :param pulumi.Input[str] power_connectors: Site Power Connectors. Example: 380VAC3P.
        :param pulumi.Input[int] power_draw_kva: Site Power DrawKva (KW).
        :param pulumi.Input[str] power_feed_drop: Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
        :param pulumi.Input[bool] redundant_networking: Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
        :param pulumi.Input[bool] redundant_power: Whether there is power redundancy.
        :param pulumi.Input[int] uplink_count: Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
        :param pulumi.Input[int] uplink_speed_gbps: Uplink speed from the network to Tencent Cloud Region.
        """
        pulumi.set(__self__, "address_line", address_line)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "province", province)
        if breaker_requirement is not None:
            pulumi.set(__self__, "breaker_requirement", breaker_requirement)
        if condition_requirement is not None:
            pulumi.set(__self__, "condition_requirement", condition_requirement)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dimension_requirement is not None:
            pulumi.set(__self__, "dimension_requirement", dimension_requirement)
        if fiber_type is not None:
            pulumi.set(__self__, "fiber_type", fiber_type)
        if max_weight is not None:
            pulumi.set(__self__, "max_weight", max_weight)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_help is not None:
            pulumi.set(__self__, "need_help", need_help)
        if optical_standard is not None:
            pulumi.set(__self__, "optical_standard", optical_standard)
        if optional_address_line is not None:
            pulumi.set(__self__, "optional_address_line", optional_address_line)
        if power_connectors is not None:
            pulumi.set(__self__, "power_connectors", power_connectors)
        if power_draw_kva is not None:
            pulumi.set(__self__, "power_draw_kva", power_draw_kva)
        if power_feed_drop is not None:
            pulumi.set(__self__, "power_feed_drop", power_feed_drop)
        if redundant_networking is not None:
            pulumi.set(__self__, "redundant_networking", redundant_networking)
        if redundant_power is not None:
            pulumi.set(__self__, "redundant_power", redundant_power)
        if uplink_count is not None:
            pulumi.set(__self__, "uplink_count", uplink_count)
        if uplink_speed_gbps is not None:
            pulumi.set(__self__, "uplink_speed_gbps", uplink_speed_gbps)

    @property
    @pulumi.getter(name="addressLine")
    def address_line(self) -> pulumi.Input[str]:
        """
        Site Detail Address.
        """
        return pulumi.get(self, "address_line")

    @address_line.setter
    def address_line(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_line", value)

    @property
    @pulumi.getter
    def city(self) -> pulumi.Input[str]:
        """
        Site City.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: pulumi.Input[str]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        """
        Site Country.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def province(self) -> pulumi.Input[str]:
        """
        Site Province.
        """
        return pulumi.get(self, "province")

    @province.setter
    def province(self, value: pulumi.Input[str]):
        pulumi.set(self, "province", value)

    @property
    @pulumi.getter(name="breakerRequirement")
    def breaker_requirement(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether there is an upstream circuit breaker.
        """
        return pulumi.get(self, "breaker_requirement")

    @breaker_requirement.setter
    def breaker_requirement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "breaker_requirement", value)

    @property
    @pulumi.getter(name="conditionRequirement")
    def condition_requirement(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
        """
        return pulumi.get(self, "condition_requirement")

    @condition_requirement.setter
    def condition_requirement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "condition_requirement", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Site Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dimensionRequirement")
    def dimension_requirement(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
        """
        return pulumi.get(self, "dimension_requirement")

    @dimension_requirement.setter
    def dimension_requirement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dimension_requirement", value)

    @property
    @pulumi.getter(name="fiberType")
    def fiber_type(self) -> Optional[pulumi.Input[str]]:
        """
        Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
        """
        return pulumi.get(self, "fiber_type")

    @fiber_type.setter
    def fiber_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fiber_type", value)

    @property
    @pulumi.getter(name="maxWeight")
    def max_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Site Max Weight capacity (KG).
        """
        return pulumi.get(self, "max_weight")

    @max_weight.setter
    def max_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_weight", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Site Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="needHelp")
    def need_help(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether you need help from Tencent Cloud for rack installation.
        """
        return pulumi.get(self, "need_help")

    @need_help.setter
    def need_help(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_help", value)

    @property
    @pulumi.getter(name="opticalStandard")
    def optical_standard(self) -> Optional[pulumi.Input[str]]:
        """
        Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
        """
        return pulumi.get(self, "optical_standard")

    @optical_standard.setter
    def optical_standard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optical_standard", value)

    @property
    @pulumi.getter(name="optionalAddressLine")
    def optional_address_line(self) -> Optional[pulumi.Input[str]]:
        """
        Detailed address of the site area (to be added).
        """
        return pulumi.get(self, "optional_address_line")

    @optional_address_line.setter
    def optional_address_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_address_line", value)

    @property
    @pulumi.getter(name="powerConnectors")
    def power_connectors(self) -> Optional[pulumi.Input[str]]:
        """
        Site Power Connectors. Example: 380VAC3P.
        """
        return pulumi.get(self, "power_connectors")

    @power_connectors.setter
    def power_connectors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_connectors", value)

    @property
    @pulumi.getter(name="powerDrawKva")
    def power_draw_kva(self) -> Optional[pulumi.Input[int]]:
        """
        Site Power DrawKva (KW).
        """
        return pulumi.get(self, "power_draw_kva")

    @power_draw_kva.setter
    def power_draw_kva(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_draw_kva", value)

    @property
    @pulumi.getter(name="powerFeedDrop")
    def power_feed_drop(self) -> Optional[pulumi.Input[str]]:
        """
        Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
        """
        return pulumi.get(self, "power_feed_drop")

    @power_feed_drop.setter
    def power_feed_drop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_feed_drop", value)

    @property
    @pulumi.getter(name="redundantNetworking")
    def redundant_networking(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
        """
        return pulumi.get(self, "redundant_networking")

    @redundant_networking.setter
    def redundant_networking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redundant_networking", value)

    @property
    @pulumi.getter(name="redundantPower")
    def redundant_power(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether there is power redundancy.
        """
        return pulumi.get(self, "redundant_power")

    @redundant_power.setter
    def redundant_power(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redundant_power", value)

    @property
    @pulumi.getter(name="uplinkCount")
    def uplink_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
        """
        return pulumi.get(self, "uplink_count")

    @uplink_count.setter
    def uplink_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink_count", value)

    @property
    @pulumi.getter(name="uplinkSpeedGbps")
    def uplink_speed_gbps(self) -> Optional[pulumi.Input[int]]:
        """
        Uplink speed from the network to Tencent Cloud Region.
        """
        return pulumi.get(self, "uplink_speed_gbps")

    @uplink_speed_gbps.setter
    def uplink_speed_gbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink_speed_gbps", value)


@pulumi.input_type
class _SiteState:
    def __init__(__self__, *,
                 address_line: Optional[pulumi.Input[str]] = None,
                 breaker_requirement: Optional[pulumi.Input[bool]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 condition_requirement: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dimension_requirement: Optional[pulumi.Input[bool]] = None,
                 fiber_type: Optional[pulumi.Input[str]] = None,
                 max_weight: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_help: Optional[pulumi.Input[bool]] = None,
                 optical_standard: Optional[pulumi.Input[str]] = None,
                 optional_address_line: Optional[pulumi.Input[str]] = None,
                 power_connectors: Optional[pulumi.Input[str]] = None,
                 power_draw_kva: Optional[pulumi.Input[int]] = None,
                 power_feed_drop: Optional[pulumi.Input[str]] = None,
                 province: Optional[pulumi.Input[str]] = None,
                 redundant_networking: Optional[pulumi.Input[bool]] = None,
                 redundant_power: Optional[pulumi.Input[bool]] = None,
                 uplink_count: Optional[pulumi.Input[int]] = None,
                 uplink_speed_gbps: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Site resources.
        :param pulumi.Input[str] address_line: Site Detail Address.
        :param pulumi.Input[bool] breaker_requirement: Whether there is an upstream circuit breaker.
        :param pulumi.Input[str] city: Site City.
        :param pulumi.Input[bool] condition_requirement: Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
        :param pulumi.Input[str] country: Site Country.
        :param pulumi.Input[str] description: Site Description.
        :param pulumi.Input[bool] dimension_requirement: Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
        :param pulumi.Input[str] fiber_type: Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
        :param pulumi.Input[int] max_weight: Site Max Weight capacity (KG).
        :param pulumi.Input[str] name: Site Name.
        :param pulumi.Input[bool] need_help: Whether you need help from Tencent Cloud for rack installation.
        :param pulumi.Input[str] optical_standard: Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
        :param pulumi.Input[str] optional_address_line: Detailed address of the site area (to be added).
        :param pulumi.Input[str] power_connectors: Site Power Connectors. Example: 380VAC3P.
        :param pulumi.Input[int] power_draw_kva: Site Power DrawKva (KW).
        :param pulumi.Input[str] power_feed_drop: Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
        :param pulumi.Input[str] province: Site Province.
        :param pulumi.Input[bool] redundant_networking: Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
        :param pulumi.Input[bool] redundant_power: Whether there is power redundancy.
        :param pulumi.Input[int] uplink_count: Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
        :param pulumi.Input[int] uplink_speed_gbps: Uplink speed from the network to Tencent Cloud Region.
        """
        if address_line is not None:
            pulumi.set(__self__, "address_line", address_line)
        if breaker_requirement is not None:
            pulumi.set(__self__, "breaker_requirement", breaker_requirement)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if condition_requirement is not None:
            pulumi.set(__self__, "condition_requirement", condition_requirement)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dimension_requirement is not None:
            pulumi.set(__self__, "dimension_requirement", dimension_requirement)
        if fiber_type is not None:
            pulumi.set(__self__, "fiber_type", fiber_type)
        if max_weight is not None:
            pulumi.set(__self__, "max_weight", max_weight)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_help is not None:
            pulumi.set(__self__, "need_help", need_help)
        if optical_standard is not None:
            pulumi.set(__self__, "optical_standard", optical_standard)
        if optional_address_line is not None:
            pulumi.set(__self__, "optional_address_line", optional_address_line)
        if power_connectors is not None:
            pulumi.set(__self__, "power_connectors", power_connectors)
        if power_draw_kva is not None:
            pulumi.set(__self__, "power_draw_kva", power_draw_kva)
        if power_feed_drop is not None:
            pulumi.set(__self__, "power_feed_drop", power_feed_drop)
        if province is not None:
            pulumi.set(__self__, "province", province)
        if redundant_networking is not None:
            pulumi.set(__self__, "redundant_networking", redundant_networking)
        if redundant_power is not None:
            pulumi.set(__self__, "redundant_power", redundant_power)
        if uplink_count is not None:
            pulumi.set(__self__, "uplink_count", uplink_count)
        if uplink_speed_gbps is not None:
            pulumi.set(__self__, "uplink_speed_gbps", uplink_speed_gbps)

    @property
    @pulumi.getter(name="addressLine")
    def address_line(self) -> Optional[pulumi.Input[str]]:
        """
        Site Detail Address.
        """
        return pulumi.get(self, "address_line")

    @address_line.setter
    def address_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_line", value)

    @property
    @pulumi.getter(name="breakerRequirement")
    def breaker_requirement(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether there is an upstream circuit breaker.
        """
        return pulumi.get(self, "breaker_requirement")

    @breaker_requirement.setter
    def breaker_requirement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "breaker_requirement", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        """
        Site City.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="conditionRequirement")
    def condition_requirement(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
        """
        return pulumi.get(self, "condition_requirement")

    @condition_requirement.setter
    def condition_requirement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "condition_requirement", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Site Country.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Site Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dimensionRequirement")
    def dimension_requirement(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
        """
        return pulumi.get(self, "dimension_requirement")

    @dimension_requirement.setter
    def dimension_requirement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dimension_requirement", value)

    @property
    @pulumi.getter(name="fiberType")
    def fiber_type(self) -> Optional[pulumi.Input[str]]:
        """
        Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
        """
        return pulumi.get(self, "fiber_type")

    @fiber_type.setter
    def fiber_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fiber_type", value)

    @property
    @pulumi.getter(name="maxWeight")
    def max_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Site Max Weight capacity (KG).
        """
        return pulumi.get(self, "max_weight")

    @max_weight.setter
    def max_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_weight", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Site Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="needHelp")
    def need_help(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether you need help from Tencent Cloud for rack installation.
        """
        return pulumi.get(self, "need_help")

    @need_help.setter
    def need_help(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_help", value)

    @property
    @pulumi.getter(name="opticalStandard")
    def optical_standard(self) -> Optional[pulumi.Input[str]]:
        """
        Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
        """
        return pulumi.get(self, "optical_standard")

    @optical_standard.setter
    def optical_standard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optical_standard", value)

    @property
    @pulumi.getter(name="optionalAddressLine")
    def optional_address_line(self) -> Optional[pulumi.Input[str]]:
        """
        Detailed address of the site area (to be added).
        """
        return pulumi.get(self, "optional_address_line")

    @optional_address_line.setter
    def optional_address_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_address_line", value)

    @property
    @pulumi.getter(name="powerConnectors")
    def power_connectors(self) -> Optional[pulumi.Input[str]]:
        """
        Site Power Connectors. Example: 380VAC3P.
        """
        return pulumi.get(self, "power_connectors")

    @power_connectors.setter
    def power_connectors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_connectors", value)

    @property
    @pulumi.getter(name="powerDrawKva")
    def power_draw_kva(self) -> Optional[pulumi.Input[int]]:
        """
        Site Power DrawKva (KW).
        """
        return pulumi.get(self, "power_draw_kva")

    @power_draw_kva.setter
    def power_draw_kva(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_draw_kva", value)

    @property
    @pulumi.getter(name="powerFeedDrop")
    def power_feed_drop(self) -> Optional[pulumi.Input[str]]:
        """
        Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
        """
        return pulumi.get(self, "power_feed_drop")

    @power_feed_drop.setter
    def power_feed_drop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_feed_drop", value)

    @property
    @pulumi.getter
    def province(self) -> Optional[pulumi.Input[str]]:
        """
        Site Province.
        """
        return pulumi.get(self, "province")

    @province.setter
    def province(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "province", value)

    @property
    @pulumi.getter(name="redundantNetworking")
    def redundant_networking(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
        """
        return pulumi.get(self, "redundant_networking")

    @redundant_networking.setter
    def redundant_networking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redundant_networking", value)

    @property
    @pulumi.getter(name="redundantPower")
    def redundant_power(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether there is power redundancy.
        """
        return pulumi.get(self, "redundant_power")

    @redundant_power.setter
    def redundant_power(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redundant_power", value)

    @property
    @pulumi.getter(name="uplinkCount")
    def uplink_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
        """
        return pulumi.get(self, "uplink_count")

    @uplink_count.setter
    def uplink_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink_count", value)

    @property
    @pulumi.getter(name="uplinkSpeedGbps")
    def uplink_speed_gbps(self) -> Optional[pulumi.Input[int]]:
        """
        Uplink speed from the network to Tencent Cloud Region.
        """
        return pulumi.get(self, "uplink_speed_gbps")

    @uplink_speed_gbps.setter
    def uplink_speed_gbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uplink_speed_gbps", value)


class Site(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_line: Optional[pulumi.Input[str]] = None,
                 breaker_requirement: Optional[pulumi.Input[bool]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 condition_requirement: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dimension_requirement: Optional[pulumi.Input[bool]] = None,
                 fiber_type: Optional[pulumi.Input[str]] = None,
                 max_weight: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_help: Optional[pulumi.Input[bool]] = None,
                 optical_standard: Optional[pulumi.Input[str]] = None,
                 optional_address_line: Optional[pulumi.Input[str]] = None,
                 power_connectors: Optional[pulumi.Input[str]] = None,
                 power_draw_kva: Optional[pulumi.Input[int]] = None,
                 power_feed_drop: Optional[pulumi.Input[str]] = None,
                 province: Optional[pulumi.Input[str]] = None,
                 redundant_networking: Optional[pulumi.Input[bool]] = None,
                 redundant_power: Optional[pulumi.Input[bool]] = None,
                 uplink_count: Optional[pulumi.Input[int]] = None,
                 uplink_speed_gbps: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a CDC site

        ## Example Usage

        ### Create a basic CDC site

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cdc.Site("example",
            address_line="Tencent Building",
            city="Guangzhou",
            country="China",
            description="desc.",
            province="Guangdong Province")
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete CDC site

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cdc.Site("example",
            address_line="Shenzhen Tencent Building",
            breaker_requirement=True,
            city="Guangzhou",
            condition_requirement=True,
            country="China",
            description="desc.",
            dimension_requirement=True,
            fiber_type="MM",
            max_weight=100,
            need_help=True,
            optical_standard="MM",
            optional_address_line="Shenzhen Tencent Building of Binhai",
            power_connectors="380VAC3P",
            power_draw_kva=10,
            power_feed_drop="DOWN",
            province="Guangdong Province",
            redundant_networking=True,
            redundant_power=True,
            uplink_count=2,
            uplink_speed_gbps=10)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CDC site can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cdc/site:Site example site-43qcf1ag
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address_line: Site Detail Address.
        :param pulumi.Input[bool] breaker_requirement: Whether there is an upstream circuit breaker.
        :param pulumi.Input[str] city: Site City.
        :param pulumi.Input[bool] condition_requirement: Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
        :param pulumi.Input[str] country: Site Country.
        :param pulumi.Input[str] description: Site Description.
        :param pulumi.Input[bool] dimension_requirement: Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
        :param pulumi.Input[str] fiber_type: Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
        :param pulumi.Input[int] max_weight: Site Max Weight capacity (KG).
        :param pulumi.Input[str] name: Site Name.
        :param pulumi.Input[bool] need_help: Whether you need help from Tencent Cloud for rack installation.
        :param pulumi.Input[str] optical_standard: Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
        :param pulumi.Input[str] optional_address_line: Detailed address of the site area (to be added).
        :param pulumi.Input[str] power_connectors: Site Power Connectors. Example: 380VAC3P.
        :param pulumi.Input[int] power_draw_kva: Site Power DrawKva (KW).
        :param pulumi.Input[str] power_feed_drop: Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
        :param pulumi.Input[str] province: Site Province.
        :param pulumi.Input[bool] redundant_networking: Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
        :param pulumi.Input[bool] redundant_power: Whether there is power redundancy.
        :param pulumi.Input[int] uplink_count: Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
        :param pulumi.Input[int] uplink_speed_gbps: Uplink speed from the network to Tencent Cloud Region.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SiteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a CDC site

        ## Example Usage

        ### Create a basic CDC site

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cdc.Site("example",
            address_line="Tencent Building",
            city="Guangzhou",
            country="China",
            description="desc.",
            province="Guangdong Province")
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete CDC site

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cdc.Site("example",
            address_line="Shenzhen Tencent Building",
            breaker_requirement=True,
            city="Guangzhou",
            condition_requirement=True,
            country="China",
            description="desc.",
            dimension_requirement=True,
            fiber_type="MM",
            max_weight=100,
            need_help=True,
            optical_standard="MM",
            optional_address_line="Shenzhen Tencent Building of Binhai",
            power_connectors="380VAC3P",
            power_draw_kva=10,
            power_feed_drop="DOWN",
            province="Guangdong Province",
            redundant_networking=True,
            redundant_power=True,
            uplink_count=2,
            uplink_speed_gbps=10)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CDC site can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cdc/site:Site example site-43qcf1ag
        ```

        :param str resource_name: The name of the resource.
        :param SiteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SiteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_line: Optional[pulumi.Input[str]] = None,
                 breaker_requirement: Optional[pulumi.Input[bool]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 condition_requirement: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dimension_requirement: Optional[pulumi.Input[bool]] = None,
                 fiber_type: Optional[pulumi.Input[str]] = None,
                 max_weight: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_help: Optional[pulumi.Input[bool]] = None,
                 optical_standard: Optional[pulumi.Input[str]] = None,
                 optional_address_line: Optional[pulumi.Input[str]] = None,
                 power_connectors: Optional[pulumi.Input[str]] = None,
                 power_draw_kva: Optional[pulumi.Input[int]] = None,
                 power_feed_drop: Optional[pulumi.Input[str]] = None,
                 province: Optional[pulumi.Input[str]] = None,
                 redundant_networking: Optional[pulumi.Input[bool]] = None,
                 redundant_power: Optional[pulumi.Input[bool]] = None,
                 uplink_count: Optional[pulumi.Input[int]] = None,
                 uplink_speed_gbps: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SiteArgs.__new__(SiteArgs)

            if address_line is None and not opts.urn:
                raise TypeError("Missing required property 'address_line'")
            __props__.__dict__["address_line"] = address_line
            __props__.__dict__["breaker_requirement"] = breaker_requirement
            if city is None and not opts.urn:
                raise TypeError("Missing required property 'city'")
            __props__.__dict__["city"] = city
            __props__.__dict__["condition_requirement"] = condition_requirement
            if country is None and not opts.urn:
                raise TypeError("Missing required property 'country'")
            __props__.__dict__["country"] = country
            __props__.__dict__["description"] = description
            __props__.__dict__["dimension_requirement"] = dimension_requirement
            __props__.__dict__["fiber_type"] = fiber_type
            __props__.__dict__["max_weight"] = max_weight
            __props__.__dict__["name"] = name
            __props__.__dict__["need_help"] = need_help
            __props__.__dict__["optical_standard"] = optical_standard
            __props__.__dict__["optional_address_line"] = optional_address_line
            __props__.__dict__["power_connectors"] = power_connectors
            __props__.__dict__["power_draw_kva"] = power_draw_kva
            __props__.__dict__["power_feed_drop"] = power_feed_drop
            if province is None and not opts.urn:
                raise TypeError("Missing required property 'province'")
            __props__.__dict__["province"] = province
            __props__.__dict__["redundant_networking"] = redundant_networking
            __props__.__dict__["redundant_power"] = redundant_power
            __props__.__dict__["uplink_count"] = uplink_count
            __props__.__dict__["uplink_speed_gbps"] = uplink_speed_gbps
        super(Site, __self__).__init__(
            'tencentcloud:Cdc/site:Site',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_line: Optional[pulumi.Input[str]] = None,
            breaker_requirement: Optional[pulumi.Input[bool]] = None,
            city: Optional[pulumi.Input[str]] = None,
            condition_requirement: Optional[pulumi.Input[bool]] = None,
            country: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dimension_requirement: Optional[pulumi.Input[bool]] = None,
            fiber_type: Optional[pulumi.Input[str]] = None,
            max_weight: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            need_help: Optional[pulumi.Input[bool]] = None,
            optical_standard: Optional[pulumi.Input[str]] = None,
            optional_address_line: Optional[pulumi.Input[str]] = None,
            power_connectors: Optional[pulumi.Input[str]] = None,
            power_draw_kva: Optional[pulumi.Input[int]] = None,
            power_feed_drop: Optional[pulumi.Input[str]] = None,
            province: Optional[pulumi.Input[str]] = None,
            redundant_networking: Optional[pulumi.Input[bool]] = None,
            redundant_power: Optional[pulumi.Input[bool]] = None,
            uplink_count: Optional[pulumi.Input[int]] = None,
            uplink_speed_gbps: Optional[pulumi.Input[int]] = None) -> 'Site':
        """
        Get an existing Site resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address_line: Site Detail Address.
        :param pulumi.Input[bool] breaker_requirement: Whether there is an upstream circuit breaker.
        :param pulumi.Input[str] city: Site City.
        :param pulumi.Input[bool] condition_requirement: Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
        :param pulumi.Input[str] country: Site Country.
        :param pulumi.Input[str] description: Site Description.
        :param pulumi.Input[bool] dimension_requirement: Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
        :param pulumi.Input[str] fiber_type: Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
        :param pulumi.Input[int] max_weight: Site Max Weight capacity (KG).
        :param pulumi.Input[str] name: Site Name.
        :param pulumi.Input[bool] need_help: Whether you need help from Tencent Cloud for rack installation.
        :param pulumi.Input[str] optical_standard: Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
        :param pulumi.Input[str] optional_address_line: Detailed address of the site area (to be added).
        :param pulumi.Input[str] power_connectors: Site Power Connectors. Example: 380VAC3P.
        :param pulumi.Input[int] power_draw_kva: Site Power DrawKva (KW).
        :param pulumi.Input[str] power_feed_drop: Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
        :param pulumi.Input[str] province: Site Province.
        :param pulumi.Input[bool] redundant_networking: Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
        :param pulumi.Input[bool] redundant_power: Whether there is power redundancy.
        :param pulumi.Input[int] uplink_count: Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
        :param pulumi.Input[int] uplink_speed_gbps: Uplink speed from the network to Tencent Cloud Region.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SiteState.__new__(_SiteState)

        __props__.__dict__["address_line"] = address_line
        __props__.__dict__["breaker_requirement"] = breaker_requirement
        __props__.__dict__["city"] = city
        __props__.__dict__["condition_requirement"] = condition_requirement
        __props__.__dict__["country"] = country
        __props__.__dict__["description"] = description
        __props__.__dict__["dimension_requirement"] = dimension_requirement
        __props__.__dict__["fiber_type"] = fiber_type
        __props__.__dict__["max_weight"] = max_weight
        __props__.__dict__["name"] = name
        __props__.__dict__["need_help"] = need_help
        __props__.__dict__["optical_standard"] = optical_standard
        __props__.__dict__["optional_address_line"] = optional_address_line
        __props__.__dict__["power_connectors"] = power_connectors
        __props__.__dict__["power_draw_kva"] = power_draw_kva
        __props__.__dict__["power_feed_drop"] = power_feed_drop
        __props__.__dict__["province"] = province
        __props__.__dict__["redundant_networking"] = redundant_networking
        __props__.__dict__["redundant_power"] = redundant_power
        __props__.__dict__["uplink_count"] = uplink_count
        __props__.__dict__["uplink_speed_gbps"] = uplink_speed_gbps
        return Site(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressLine")
    def address_line(self) -> pulumi.Output[str]:
        """
        Site Detail Address.
        """
        return pulumi.get(self, "address_line")

    @property
    @pulumi.getter(name="breakerRequirement")
    def breaker_requirement(self) -> pulumi.Output[bool]:
        """
        Whether there is an upstream circuit breaker.
        """
        return pulumi.get(self, "breaker_requirement")

    @property
    @pulumi.getter
    def city(self) -> pulumi.Output[str]:
        """
        Site City.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="conditionRequirement")
    def condition_requirement(self) -> pulumi.Output[bool]:
        """
        Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
        """
        return pulumi.get(self, "condition_requirement")

    @property
    @pulumi.getter
    def country(self) -> pulumi.Output[str]:
        """
        Site Country.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Site Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dimensionRequirement")
    def dimension_requirement(self) -> pulumi.Output[bool]:
        """
        Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
        """
        return pulumi.get(self, "dimension_requirement")

    @property
    @pulumi.getter(name="fiberType")
    def fiber_type(self) -> pulumi.Output[Optional[str]]:
        """
        Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
        """
        return pulumi.get(self, "fiber_type")

    @property
    @pulumi.getter(name="maxWeight")
    def max_weight(self) -> pulumi.Output[int]:
        """
        Site Max Weight capacity (KG).
        """
        return pulumi.get(self, "max_weight")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Site Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="needHelp")
    def need_help(self) -> pulumi.Output[bool]:
        """
        Whether you need help from Tencent Cloud for rack installation.
        """
        return pulumi.get(self, "need_help")

    @property
    @pulumi.getter(name="opticalStandard")
    def optical_standard(self) -> pulumi.Output[Optional[str]]:
        """
        Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
        """
        return pulumi.get(self, "optical_standard")

    @property
    @pulumi.getter(name="optionalAddressLine")
    def optional_address_line(self) -> pulumi.Output[Optional[str]]:
        """
        Detailed address of the site area (to be added).
        """
        return pulumi.get(self, "optional_address_line")

    @property
    @pulumi.getter(name="powerConnectors")
    def power_connectors(self) -> pulumi.Output[Optional[str]]:
        """
        Site Power Connectors. Example: 380VAC3P.
        """
        return pulumi.get(self, "power_connectors")

    @property
    @pulumi.getter(name="powerDrawKva")
    def power_draw_kva(self) -> pulumi.Output[int]:
        """
        Site Power DrawKva (KW).
        """
        return pulumi.get(self, "power_draw_kva")

    @property
    @pulumi.getter(name="powerFeedDrop")
    def power_feed_drop(self) -> pulumi.Output[Optional[str]]:
        """
        Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
        """
        return pulumi.get(self, "power_feed_drop")

    @property
    @pulumi.getter
    def province(self) -> pulumi.Output[str]:
        """
        Site Province.
        """
        return pulumi.get(self, "province")

    @property
    @pulumi.getter(name="redundantNetworking")
    def redundant_networking(self) -> pulumi.Output[bool]:
        """
        Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
        """
        return pulumi.get(self, "redundant_networking")

    @property
    @pulumi.getter(name="redundantPower")
    def redundant_power(self) -> pulumi.Output[bool]:
        """
        Whether there is power redundancy.
        """
        return pulumi.get(self, "redundant_power")

    @property
    @pulumi.getter(name="uplinkCount")
    def uplink_count(self) -> pulumi.Output[int]:
        """
        Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
        """
        return pulumi.get(self, "uplink_count")

    @property
    @pulumi.getter(name="uplinkSpeedGbps")
    def uplink_speed_gbps(self) -> pulumi.Output[int]:
        """
        Uplink speed from the network to Tencent Cloud Region.
        """
        return pulumi.get(self, "uplink_speed_gbps")

