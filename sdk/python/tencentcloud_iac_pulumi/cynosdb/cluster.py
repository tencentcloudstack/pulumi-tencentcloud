# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 available_zone: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 db_type: pulumi.Input[str],
                 db_version: pulumi.Input[str],
                 password: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 auto_pause: Optional[pulumi.Input[str]] = None,
                 auto_pause_delay: Optional[pulumi.Input[int]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_cpu_core: Optional[pulumi.Input[int]] = None,
                 instance_maintain_duration: Optional[pulumi.Input[int]] = None,
                 instance_maintain_start_time: Optional[pulumi.Input[int]] = None,
                 instance_maintain_weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_memory_size: Optional[pulumi.Input[int]] = None,
                 max_cpu: Optional[pulumi.Input[float]] = None,
                 min_cpu: Optional[pulumi.Input[float]] = None,
                 old_ip_reserve_hours: Optional[pulumi.Input[int]] = None,
                 param_items: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterParamItemArgs']]]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prarm_template_id: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 ro_group_sgs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rw_group_sgs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 serverless_status_flag: Optional[pulumi.Input[str]] = None,
                 slave_zone: Optional[pulumi.Input[str]] = None,
                 storage_limit: Optional[pulumi.Input[int]] = None,
                 storage_pay_mode: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] available_zone: The available zone of the CynosDB Cluster.
        :param pulumi.Input[str] cluster_name: Name of CynosDB cluster.
        :param pulumi.Input[str] db_type: Type of CynosDB, and available values include `MYSQL`.
        :param pulumi.Input[str] db_version: Version of CynosDB, which is related to `db_type`. For `MYSQL`, available value is `5.7`, `8.0`.
        :param pulumi.Input[str] password: Password of `root` account.
        :param pulumi.Input[str] subnet_id: ID of the subnet within this VPC.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        :param pulumi.Input[str] auto_pause: Specify whether the cluster can auto-pause while `db_mode` is `SERVERLESS`. Values: `yes` (default), `no`.
        :param pulumi.Input[int] auto_pause_delay: Specify auto-pause delay in second while `db_mode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
        :param pulumi.Input[str] db_mode: Specify DB mode, only available when `db_type` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
        :param pulumi.Input[int] instance_cpu_core: The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        :param pulumi.Input[int] instance_maintain_duration: Duration time for maintenance, unit in second. `3600` by default.
        :param pulumi.Input[int] instance_maintain_start_time: Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_maintain_weekdays: Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
        :param pulumi.Input[int] instance_memory_size: Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        :param pulumi.Input[float] max_cpu: Maximum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        :param pulumi.Input[float] min_cpu: Minimum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        :param pulumi.Input[int] old_ip_reserve_hours: Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterParamItemArgs']]] param_items: Specify parameter list of database. It is valid when `param_template_id` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
        :param pulumi.Input[int] param_template_id: The ID of the parameter template.
        :param pulumi.Input[int] port: Port of CynosDB cluster.
        :param pulumi.Input[int] prarm_template_id: It will be deprecated. Use `param_template_id` instead. The ID of the parameter template.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[int] project_id: ID of the project. `0` by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ro_group_sgs: IDs of security group for `ro_group`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rw_group_sgs: IDs of security group for `rw_group`.
        :param pulumi.Input[str] serverless_status_flag: Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
        :param pulumi.Input[str] slave_zone: Multi zone Addresses of the CynosDB Cluster.
        :param pulumi.Input[int] storage_limit: Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is `MYSQL` and charge_type is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when charge_type is `POSTPAID_BY_HOUR`, this argument is unnecessary.
        :param pulumi.Input[int] storage_pay_mode: Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the CynosDB cluster.
        """
        pulumi.set(__self__, "available_zone", available_zone)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "db_type", db_type)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if auto_pause is not None:
            pulumi.set(__self__, "auto_pause", auto_pause)
        if auto_pause_delay is not None:
            pulumi.set(__self__, "auto_pause_delay", auto_pause_delay)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if db_mode is not None:
            pulumi.set(__self__, "db_mode", db_mode)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if instance_cpu_core is not None:
            pulumi.set(__self__, "instance_cpu_core", instance_cpu_core)
        if instance_maintain_duration is not None:
            pulumi.set(__self__, "instance_maintain_duration", instance_maintain_duration)
        if instance_maintain_start_time is not None:
            pulumi.set(__self__, "instance_maintain_start_time", instance_maintain_start_time)
        if instance_maintain_weekdays is not None:
            pulumi.set(__self__, "instance_maintain_weekdays", instance_maintain_weekdays)
        if instance_memory_size is not None:
            pulumi.set(__self__, "instance_memory_size", instance_memory_size)
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if old_ip_reserve_hours is not None:
            pulumi.set(__self__, "old_ip_reserve_hours", old_ip_reserve_hours)
        if param_items is not None:
            pulumi.set(__self__, "param_items", param_items)
        if param_template_id is not None:
            pulumi.set(__self__, "param_template_id", param_template_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prarm_template_id is not None:
            warnings.warn("""It will be deprecated. Use `param_template_id` instead.""", DeprecationWarning)
            pulumi.log.warn("""prarm_template_id is deprecated: It will be deprecated. Use `param_template_id` instead.""")
        if prarm_template_id is not None:
            pulumi.set(__self__, "prarm_template_id", prarm_template_id)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if ro_group_sgs is not None:
            pulumi.set(__self__, "ro_group_sgs", ro_group_sgs)
        if rw_group_sgs is not None:
            pulumi.set(__self__, "rw_group_sgs", rw_group_sgs)
        if serverless_status_flag is not None:
            pulumi.set(__self__, "serverless_status_flag", serverless_status_flag)
        if slave_zone is not None:
            pulumi.set(__self__, "slave_zone", slave_zone)
        if storage_limit is not None:
            pulumi.set(__self__, "storage_limit", storage_limit)
        if storage_pay_mode is not None:
            pulumi.set(__self__, "storage_pay_mode", storage_pay_mode)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> pulumi.Input[str]:
        """
        The available zone of the CynosDB Cluster.
        """
        return pulumi.get(self, "available_zone")

    @available_zone.setter
    def available_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "available_zone", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        Name of CynosDB cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> pulumi.Input[str]:
        """
        Type of CynosDB, and available values include `MYSQL`.
        """
        return pulumi.get(self, "db_type")

    @db_type.setter
    def db_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_type", value)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> pulumi.Input[str]:
        """
        Version of CynosDB, which is related to `db_type`. For `MYSQL`, available value is `5.7`, `8.0`.
        """
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password of `root` account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        ID of the subnet within this VPC.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="autoPause")
    def auto_pause(self) -> Optional[pulumi.Input[str]]:
        """
        Specify whether the cluster can auto-pause while `db_mode` is `SERVERLESS`. Values: `yes` (default), `no`.
        """
        return pulumi.get(self, "auto_pause")

    @auto_pause.setter
    def auto_pause(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_pause", value)

    @property
    @pulumi.getter(name="autoPauseDelay")
    def auto_pause_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Specify auto-pause delay in second while `db_mode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
        """
        return pulumi.get(self, "auto_pause_delay")

    @auto_pause_delay.setter
    def auto_pause_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_pause_delay", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specify DB mode, only available when `db_type` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
        """
        return pulumi.get(self, "db_mode")

    @db_mode.setter
    def db_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_mode", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="instanceCpuCore")
    def instance_cpu_core(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        """
        return pulumi.get(self, "instance_cpu_core")

    @instance_cpu_core.setter
    def instance_cpu_core(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_cpu_core", value)

    @property
    @pulumi.getter(name="instanceMaintainDuration")
    def instance_maintain_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration time for maintenance, unit in second. `3600` by default.
        """
        return pulumi.get(self, "instance_maintain_duration")

    @instance_maintain_duration.setter
    def instance_maintain_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_maintain_duration", value)

    @property
    @pulumi.getter(name="instanceMaintainStartTime")
    def instance_maintain_start_time(self) -> Optional[pulumi.Input[int]]:
        """
        Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
        """
        return pulumi.get(self, "instance_maintain_start_time")

    @instance_maintain_start_time.setter
    def instance_maintain_start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_maintain_start_time", value)

    @property
    @pulumi.getter(name="instanceMaintainWeekdays")
    def instance_maintain_weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
        """
        return pulumi.get(self, "instance_maintain_weekdays")

    @instance_maintain_weekdays.setter
    def instance_maintain_weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_maintain_weekdays", value)

    @property
    @pulumi.getter(name="instanceMemorySize")
    def instance_memory_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        """
        return pulumi.get(self, "instance_memory_size")

    @instance_memory_size.setter
    def instance_memory_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_memory_size", value)

    @property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        """
        return pulumi.get(self, "max_cpu")

    @max_cpu.setter
    def max_cpu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_cpu", value)

    @property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        """
        return pulumi.get(self, "min_cpu")

    @min_cpu.setter
    def min_cpu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_cpu", value)

    @property
    @pulumi.getter(name="oldIpReserveHours")
    def old_ip_reserve_hours(self) -> Optional[pulumi.Input[int]]:
        """
        Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
        """
        return pulumi.get(self, "old_ip_reserve_hours")

    @old_ip_reserve_hours.setter
    def old_ip_reserve_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "old_ip_reserve_hours", value)

    @property
    @pulumi.getter(name="paramItems")
    def param_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterParamItemArgs']]]]:
        """
        Specify parameter list of database. It is valid when `param_template_id` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
        """
        return pulumi.get(self, "param_items")

    @param_items.setter
    def param_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterParamItemArgs']]]]):
        pulumi.set(self, "param_items", value)

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the parameter template.
        """
        return pulumi.get(self, "param_template_id")

    @param_template_id.setter
    def param_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "param_template_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of CynosDB cluster.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="prarmTemplateId")
    def prarm_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        It will be deprecated. Use `param_template_id` instead. The ID of the parameter template.
        """
        warnings.warn("""It will be deprecated. Use `param_template_id` instead.""", DeprecationWarning)
        pulumi.log.warn("""prarm_template_id is deprecated: It will be deprecated. Use `param_template_id` instead.""")

        return pulumi.get(self, "prarm_template_id")

    @prarm_template_id.setter
    def prarm_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prarm_template_id", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the project. `0` by default.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="roGroupSgs")
    def ro_group_sgs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IDs of security group for `ro_group`.
        """
        return pulumi.get(self, "ro_group_sgs")

    @ro_group_sgs.setter
    def ro_group_sgs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ro_group_sgs", value)

    @property
    @pulumi.getter(name="rwGroupSgs")
    def rw_group_sgs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IDs of security group for `rw_group`.
        """
        return pulumi.get(self, "rw_group_sgs")

    @rw_group_sgs.setter
    def rw_group_sgs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rw_group_sgs", value)

    @property
    @pulumi.getter(name="serverlessStatusFlag")
    def serverless_status_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
        """
        return pulumi.get(self, "serverless_status_flag")

    @serverless_status_flag.setter
    def serverless_status_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serverless_status_flag", value)

    @property
    @pulumi.getter(name="slaveZone")
    def slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Multi zone Addresses of the CynosDB Cluster.
        """
        return pulumi.get(self, "slave_zone")

    @slave_zone.setter
    def slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_zone", value)

    @property
    @pulumi.getter(name="storageLimit")
    def storage_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is `MYSQL` and charge_type is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when charge_type is `POSTPAID_BY_HOUR`, this argument is unnecessary.
        """
        return pulumi.get(self, "storage_limit")

    @storage_limit.setter
    def storage_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_limit", value)

    @property
    @pulumi.getter(name="storagePayMode")
    def storage_pay_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
        """
        return pulumi.get(self, "storage_pay_mode")

    @storage_pay_mode.setter
    def storage_pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_pay_mode", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of the CynosDB cluster.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 auto_pause: Optional[pulumi.Input[str]] = None,
                 auto_pause_delay: Optional[pulumi.Input[int]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 available_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_status: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 db_type: Optional[pulumi.Input[str]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_cpu_core: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_maintain_duration: Optional[pulumi.Input[int]] = None,
                 instance_maintain_start_time: Optional[pulumi.Input[int]] = None,
                 instance_maintain_weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_memory_size: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_status: Optional[pulumi.Input[str]] = None,
                 instance_storage_size: Optional[pulumi.Input[int]] = None,
                 max_cpu: Optional[pulumi.Input[float]] = None,
                 min_cpu: Optional[pulumi.Input[float]] = None,
                 old_ip_reserve_hours: Optional[pulumi.Input[int]] = None,
                 param_items: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterParamItemArgs']]]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prarm_template_id: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 ro_group_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoGroupAddrArgs']]]] = None,
                 ro_group_id: Optional[pulumi.Input[str]] = None,
                 ro_group_instances: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoGroupInstanceArgs']]]] = None,
                 ro_group_sgs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rw_group_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRwGroupAddrArgs']]]] = None,
                 rw_group_id: Optional[pulumi.Input[str]] = None,
                 rw_group_instances: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRwGroupInstanceArgs']]]] = None,
                 rw_group_sgs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 serverless_status: Optional[pulumi.Input[str]] = None,
                 serverless_status_flag: Optional[pulumi.Input[str]] = None,
                 slave_zone: Optional[pulumi.Input[str]] = None,
                 storage_limit: Optional[pulumi.Input[int]] = None,
                 storage_pay_mode: Optional[pulumi.Input[int]] = None,
                 storage_used: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[str] auto_pause: Specify whether the cluster can auto-pause while `db_mode` is `SERVERLESS`. Values: `yes` (default), `no`.
        :param pulumi.Input[int] auto_pause_delay: Specify auto-pause delay in second while `db_mode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
        :param pulumi.Input[str] available_zone: The available zone of the CynosDB Cluster.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
        :param pulumi.Input[str] charset: Charset used by CynosDB cluster.
        :param pulumi.Input[str] cluster_name: Name of CynosDB cluster.
        :param pulumi.Input[str] cluster_status: Status of the Cynosdb cluster.
        :param pulumi.Input[str] create_time: Creation time of the CynosDB cluster.
        :param pulumi.Input[str] db_mode: Specify DB mode, only available when `db_type` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
        :param pulumi.Input[str] db_type: Type of CynosDB, and available values include `MYSQL`.
        :param pulumi.Input[str] db_version: Version of CynosDB, which is related to `db_type`. For `MYSQL`, available value is `5.7`, `8.0`.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
        :param pulumi.Input[int] instance_cpu_core: The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        :param pulumi.Input[str] instance_id: ID of instance.
        :param pulumi.Input[int] instance_maintain_duration: Duration time for maintenance, unit in second. `3600` by default.
        :param pulumi.Input[int] instance_maintain_start_time: Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_maintain_weekdays: Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
        :param pulumi.Input[int] instance_memory_size: Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        :param pulumi.Input[str] instance_name: Name of instance.
        :param pulumi.Input[str] instance_status: Status of the instance.
        :param pulumi.Input[int] instance_storage_size: Storage size of the instance, unit in GB.
        :param pulumi.Input[float] max_cpu: Maximum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        :param pulumi.Input[float] min_cpu: Minimum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        :param pulumi.Input[int] old_ip_reserve_hours: Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterParamItemArgs']]] param_items: Specify parameter list of database. It is valid when `param_template_id` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
        :param pulumi.Input[int] param_template_id: The ID of the parameter template.
        :param pulumi.Input[str] password: Password of `root` account.
        :param pulumi.Input[int] port: Port of CynosDB cluster.
        :param pulumi.Input[int] prarm_template_id: It will be deprecated. Use `param_template_id` instead. The ID of the parameter template.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[int] project_id: ID of the project. `0` by default.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRoGroupAddrArgs']]] ro_group_addrs: Readonly addresses. Each element contains the following attributes:
        :param pulumi.Input[str] ro_group_id: ID of read-only instance group.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRoGroupInstanceArgs']]] ro_group_instances: List of instances in the read-only instance group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ro_group_sgs: IDs of security group for `ro_group`.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRwGroupAddrArgs']]] rw_group_addrs: Read-write addresses. Each element contains the following attributes:
        :param pulumi.Input[str] rw_group_id: ID of read-write instance group.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRwGroupInstanceArgs']]] rw_group_instances: List of instances in the read-write instance group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rw_group_sgs: IDs of security group for `rw_group`.
        :param pulumi.Input[str] serverless_status: Serverless cluster status. NOTE: This is a readonly attribute, to modify, please set `serverless_status_flag`.
        :param pulumi.Input[str] serverless_status_flag: Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
        :param pulumi.Input[str] slave_zone: Multi zone Addresses of the CynosDB Cluster.
        :param pulumi.Input[int] storage_limit: Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is `MYSQL` and charge_type is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when charge_type is `POSTPAID_BY_HOUR`, this argument is unnecessary.
        :param pulumi.Input[int] storage_pay_mode: Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
        :param pulumi.Input[int] storage_used: Used storage of CynosDB cluster, unit in MB.
        :param pulumi.Input[str] subnet_id: ID of the subnet within this VPC.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the CynosDB cluster.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        """
        if auto_pause is not None:
            pulumi.set(__self__, "auto_pause", auto_pause)
        if auto_pause_delay is not None:
            pulumi.set(__self__, "auto_pause_delay", auto_pause_delay)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if available_zone is not None:
            pulumi.set(__self__, "available_zone", available_zone)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if charset is not None:
            pulumi.set(__self__, "charset", charset)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_status is not None:
            pulumi.set(__self__, "cluster_status", cluster_status)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if db_mode is not None:
            pulumi.set(__self__, "db_mode", db_mode)
        if db_type is not None:
            pulumi.set(__self__, "db_type", db_type)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if instance_cpu_core is not None:
            pulumi.set(__self__, "instance_cpu_core", instance_cpu_core)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_maintain_duration is not None:
            pulumi.set(__self__, "instance_maintain_duration", instance_maintain_duration)
        if instance_maintain_start_time is not None:
            pulumi.set(__self__, "instance_maintain_start_time", instance_maintain_start_time)
        if instance_maintain_weekdays is not None:
            pulumi.set(__self__, "instance_maintain_weekdays", instance_maintain_weekdays)
        if instance_memory_size is not None:
            pulumi.set(__self__, "instance_memory_size", instance_memory_size)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_status is not None:
            pulumi.set(__self__, "instance_status", instance_status)
        if instance_storage_size is not None:
            pulumi.set(__self__, "instance_storage_size", instance_storage_size)
        if max_cpu is not None:
            pulumi.set(__self__, "max_cpu", max_cpu)
        if min_cpu is not None:
            pulumi.set(__self__, "min_cpu", min_cpu)
        if old_ip_reserve_hours is not None:
            pulumi.set(__self__, "old_ip_reserve_hours", old_ip_reserve_hours)
        if param_items is not None:
            pulumi.set(__self__, "param_items", param_items)
        if param_template_id is not None:
            pulumi.set(__self__, "param_template_id", param_template_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prarm_template_id is not None:
            warnings.warn("""It will be deprecated. Use `param_template_id` instead.""", DeprecationWarning)
            pulumi.log.warn("""prarm_template_id is deprecated: It will be deprecated. Use `param_template_id` instead.""")
        if prarm_template_id is not None:
            pulumi.set(__self__, "prarm_template_id", prarm_template_id)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if ro_group_addrs is not None:
            pulumi.set(__self__, "ro_group_addrs", ro_group_addrs)
        if ro_group_id is not None:
            pulumi.set(__self__, "ro_group_id", ro_group_id)
        if ro_group_instances is not None:
            pulumi.set(__self__, "ro_group_instances", ro_group_instances)
        if ro_group_sgs is not None:
            pulumi.set(__self__, "ro_group_sgs", ro_group_sgs)
        if rw_group_addrs is not None:
            pulumi.set(__self__, "rw_group_addrs", rw_group_addrs)
        if rw_group_id is not None:
            pulumi.set(__self__, "rw_group_id", rw_group_id)
        if rw_group_instances is not None:
            pulumi.set(__self__, "rw_group_instances", rw_group_instances)
        if rw_group_sgs is not None:
            pulumi.set(__self__, "rw_group_sgs", rw_group_sgs)
        if serverless_status is not None:
            pulumi.set(__self__, "serverless_status", serverless_status)
        if serverless_status_flag is not None:
            pulumi.set(__self__, "serverless_status_flag", serverless_status_flag)
        if slave_zone is not None:
            pulumi.set(__self__, "slave_zone", slave_zone)
        if storage_limit is not None:
            pulumi.set(__self__, "storage_limit", storage_limit)
        if storage_pay_mode is not None:
            pulumi.set(__self__, "storage_pay_mode", storage_pay_mode)
        if storage_used is not None:
            pulumi.set(__self__, "storage_used", storage_used)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="autoPause")
    def auto_pause(self) -> Optional[pulumi.Input[str]]:
        """
        Specify whether the cluster can auto-pause while `db_mode` is `SERVERLESS`. Values: `yes` (default), `no`.
        """
        return pulumi.get(self, "auto_pause")

    @auto_pause.setter
    def auto_pause(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_pause", value)

    @property
    @pulumi.getter(name="autoPauseDelay")
    def auto_pause_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Specify auto-pause delay in second while `db_mode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
        """
        return pulumi.get(self, "auto_pause_delay")

    @auto_pause_delay.setter
    def auto_pause_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_pause_delay", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The available zone of the CynosDB Cluster.
        """
        return pulumi.get(self, "available_zone")

    @available_zone.setter
    def available_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "available_zone", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def charset(self) -> Optional[pulumi.Input[str]]:
        """
        Charset used by CynosDB cluster.
        """
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charset", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of CynosDB cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the Cynosdb cluster.
        """
        return pulumi.get(self, "cluster_status")

    @cluster_status.setter
    def cluster_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_status", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of the CynosDB cluster.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specify DB mode, only available when `db_type` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
        """
        return pulumi.get(self, "db_mode")

    @db_mode.setter
    def db_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_mode", value)

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of CynosDB, and available values include `MYSQL`.
        """
        return pulumi.get(self, "db_type")

    @db_type.setter
    def db_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_type", value)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of CynosDB, which is related to `db_type`. For `MYSQL`, available value is `5.7`, `8.0`.
        """
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="instanceCpuCore")
    def instance_cpu_core(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        """
        return pulumi.get(self, "instance_cpu_core")

    @instance_cpu_core.setter
    def instance_cpu_core(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_cpu_core", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceMaintainDuration")
    def instance_maintain_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration time for maintenance, unit in second. `3600` by default.
        """
        return pulumi.get(self, "instance_maintain_duration")

    @instance_maintain_duration.setter
    def instance_maintain_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_maintain_duration", value)

    @property
    @pulumi.getter(name="instanceMaintainStartTime")
    def instance_maintain_start_time(self) -> Optional[pulumi.Input[int]]:
        """
        Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
        """
        return pulumi.get(self, "instance_maintain_start_time")

    @instance_maintain_start_time.setter
    def instance_maintain_start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_maintain_start_time", value)

    @property
    @pulumi.getter(name="instanceMaintainWeekdays")
    def instance_maintain_weekdays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
        """
        return pulumi.get(self, "instance_maintain_weekdays")

    @instance_maintain_weekdays.setter
    def instance_maintain_weekdays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_maintain_weekdays", value)

    @property
    @pulumi.getter(name="instanceMemorySize")
    def instance_memory_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        """
        return pulumi.get(self, "instance_memory_size")

    @instance_memory_size.setter
    def instance_memory_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_memory_size", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the instance.
        """
        return pulumi.get(self, "instance_status")

    @instance_status.setter
    def instance_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_status", value)

    @property
    @pulumi.getter(name="instanceStorageSize")
    def instance_storage_size(self) -> Optional[pulumi.Input[int]]:
        """
        Storage size of the instance, unit in GB.
        """
        return pulumi.get(self, "instance_storage_size")

    @instance_storage_size.setter
    def instance_storage_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_storage_size", value)

    @property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        """
        return pulumi.get(self, "max_cpu")

    @max_cpu.setter
    def max_cpu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_cpu", value)

    @property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        """
        return pulumi.get(self, "min_cpu")

    @min_cpu.setter
    def min_cpu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_cpu", value)

    @property
    @pulumi.getter(name="oldIpReserveHours")
    def old_ip_reserve_hours(self) -> Optional[pulumi.Input[int]]:
        """
        Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
        """
        return pulumi.get(self, "old_ip_reserve_hours")

    @old_ip_reserve_hours.setter
    def old_ip_reserve_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "old_ip_reserve_hours", value)

    @property
    @pulumi.getter(name="paramItems")
    def param_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterParamItemArgs']]]]:
        """
        Specify parameter list of database. It is valid when `param_template_id` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
        """
        return pulumi.get(self, "param_items")

    @param_items.setter
    def param_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterParamItemArgs']]]]):
        pulumi.set(self, "param_items", value)

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the parameter template.
        """
        return pulumi.get(self, "param_template_id")

    @param_template_id.setter
    def param_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "param_template_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of `root` account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of CynosDB cluster.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="prarmTemplateId")
    def prarm_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        It will be deprecated. Use `param_template_id` instead. The ID of the parameter template.
        """
        warnings.warn("""It will be deprecated. Use `param_template_id` instead.""", DeprecationWarning)
        pulumi.log.warn("""prarm_template_id is deprecated: It will be deprecated. Use `param_template_id` instead.""")

        return pulumi.get(self, "prarm_template_id")

    @prarm_template_id.setter
    def prarm_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prarm_template_id", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the project. `0` by default.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="roGroupAddrs")
    def ro_group_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoGroupAddrArgs']]]]:
        """
        Readonly addresses. Each element contains the following attributes:
        """
        return pulumi.get(self, "ro_group_addrs")

    @ro_group_addrs.setter
    def ro_group_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoGroupAddrArgs']]]]):
        pulumi.set(self, "ro_group_addrs", value)

    @property
    @pulumi.getter(name="roGroupId")
    def ro_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of read-only instance group.
        """
        return pulumi.get(self, "ro_group_id")

    @ro_group_id.setter
    def ro_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ro_group_id", value)

    @property
    @pulumi.getter(name="roGroupInstances")
    def ro_group_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoGroupInstanceArgs']]]]:
        """
        List of instances in the read-only instance group.
        """
        return pulumi.get(self, "ro_group_instances")

    @ro_group_instances.setter
    def ro_group_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoGroupInstanceArgs']]]]):
        pulumi.set(self, "ro_group_instances", value)

    @property
    @pulumi.getter(name="roGroupSgs")
    def ro_group_sgs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IDs of security group for `ro_group`.
        """
        return pulumi.get(self, "ro_group_sgs")

    @ro_group_sgs.setter
    def ro_group_sgs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ro_group_sgs", value)

    @property
    @pulumi.getter(name="rwGroupAddrs")
    def rw_group_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRwGroupAddrArgs']]]]:
        """
        Read-write addresses. Each element contains the following attributes:
        """
        return pulumi.get(self, "rw_group_addrs")

    @rw_group_addrs.setter
    def rw_group_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRwGroupAddrArgs']]]]):
        pulumi.set(self, "rw_group_addrs", value)

    @property
    @pulumi.getter(name="rwGroupId")
    def rw_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of read-write instance group.
        """
        return pulumi.get(self, "rw_group_id")

    @rw_group_id.setter
    def rw_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rw_group_id", value)

    @property
    @pulumi.getter(name="rwGroupInstances")
    def rw_group_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRwGroupInstanceArgs']]]]:
        """
        List of instances in the read-write instance group.
        """
        return pulumi.get(self, "rw_group_instances")

    @rw_group_instances.setter
    def rw_group_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRwGroupInstanceArgs']]]]):
        pulumi.set(self, "rw_group_instances", value)

    @property
    @pulumi.getter(name="rwGroupSgs")
    def rw_group_sgs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IDs of security group for `rw_group`.
        """
        return pulumi.get(self, "rw_group_sgs")

    @rw_group_sgs.setter
    def rw_group_sgs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rw_group_sgs", value)

    @property
    @pulumi.getter(name="serverlessStatus")
    def serverless_status(self) -> Optional[pulumi.Input[str]]:
        """
        Serverless cluster status. NOTE: This is a readonly attribute, to modify, please set `serverless_status_flag`.
        """
        return pulumi.get(self, "serverless_status")

    @serverless_status.setter
    def serverless_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serverless_status", value)

    @property
    @pulumi.getter(name="serverlessStatusFlag")
    def serverless_status_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
        """
        return pulumi.get(self, "serverless_status_flag")

    @serverless_status_flag.setter
    def serverless_status_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serverless_status_flag", value)

    @property
    @pulumi.getter(name="slaveZone")
    def slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Multi zone Addresses of the CynosDB Cluster.
        """
        return pulumi.get(self, "slave_zone")

    @slave_zone.setter
    def slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_zone", value)

    @property
    @pulumi.getter(name="storageLimit")
    def storage_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is `MYSQL` and charge_type is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when charge_type is `POSTPAID_BY_HOUR`, this argument is unnecessary.
        """
        return pulumi.get(self, "storage_limit")

    @storage_limit.setter
    def storage_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_limit", value)

    @property
    @pulumi.getter(name="storagePayMode")
    def storage_pay_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
        """
        return pulumi.get(self, "storage_pay_mode")

    @storage_pay_mode.setter
    def storage_pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_pay_mode", value)

    @property
    @pulumi.getter(name="storageUsed")
    def storage_used(self) -> Optional[pulumi.Input[int]]:
        """
        Used storage of CynosDB cluster, unit in MB.
        """
        return pulumi.get(self, "storage_used")

    @storage_used.setter
    def storage_used(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_used", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the subnet within this VPC.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of the CynosDB cluster.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_pause: Optional[pulumi.Input[str]] = None,
                 auto_pause_delay: Optional[pulumi.Input[int]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 available_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 db_type: Optional[pulumi.Input[str]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_cpu_core: Optional[pulumi.Input[int]] = None,
                 instance_maintain_duration: Optional[pulumi.Input[int]] = None,
                 instance_maintain_start_time: Optional[pulumi.Input[int]] = None,
                 instance_maintain_weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_memory_size: Optional[pulumi.Input[int]] = None,
                 max_cpu: Optional[pulumi.Input[float]] = None,
                 min_cpu: Optional[pulumi.Input[float]] = None,
                 old_ip_reserve_hours: Optional[pulumi.Input[int]] = None,
                 param_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterParamItemArgs']]]]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prarm_template_id: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 ro_group_sgs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rw_group_sgs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 serverless_status_flag: Optional[pulumi.Input[str]] = None,
                 slave_zone: Optional[pulumi.Input[str]] = None,
                 storage_limit: Optional[pulumi.Input[int]] = None,
                 storage_pay_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to create a CynosDB cluster.

        ## Example Usage

        ### Create a single availability zone NORMAL CynosDB cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create cynosdb cluster
        example_cluster = tencentcloud.cynosdb.Cluster("exampleCluster",
            available_zone=availability_zone,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_mode="NORMAL",
            db_type="MYSQL",
            db_version="5.7",
            port=3306,
            storage_limit=1000,
            cluster_name="tf-example",
            password="cynosDB@123",
            instance_maintain_duration=7200,
            instance_maintain_start_time=10800,
            instance_cpu_core=2,
            instance_memory_size=4,
            force_delete=False,
            instance_maintain_weekdays=[
                "Fri",
                "Mon",
                "Sat",
                "Sun",
                "Thu",
                "Wed",
                "Tue",
            ],
            param_items=[
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="character_set_server",
                    current_value="utf8mb4",
                ),
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="lower_case_table_names",
                    current_value="0",
                ),
            ],
            rw_group_sgs=[example_group.id],
            ro_group_sgs=[example_group.id],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a multiple availability zone SERVERLESS CynosDB cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        slave_zone = config.get("slaveZone")
        if slave_zone is None:
            slave_zone = "ap-guangzhou-6"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create param template
        example_param_template = tencentcloud.cynosdb.ParamTemplate("exampleParamTemplate",
            db_mode="SERVERLESS",
            engine_version="8.0",
            template_name="tf-example",
            template_description="terraform-template",
            param_lists=[tencentcloud.cynosdb.ParamTemplateParamListArgs(
                current_value="-1",
                param_name="optimizer_trace_offset",
            )])
        # create cynosdb cluster
        example_cluster = tencentcloud.cynosdb.Cluster("exampleCluster",
            available_zone=availability_zone,
            slave_zone=slave_zone,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_mode="SERVERLESS",
            db_type="MYSQL",
            db_version="8.0",
            port=3306,
            storage_limit=1000,
            cluster_name="tf-example",
            password="cynosDB@123",
            instance_maintain_duration=7200,
            instance_maintain_start_time=10800,
            min_cpu=2,
            max_cpu=4,
            param_template_id=example_param_template.template_id,
            force_delete=False,
            instance_maintain_weekdays=[
                "Fri",
                "Mon",
                "Sat",
                "Sun",
                "Thu",
                "Wed",
                "Tue",
            ],
            rw_group_sgs=[example_group.id],
            ro_group_sgs=[example_group.id],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CynosDB cluster can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cynosdb/cluster:Cluster example cynosdbmysql-dzj5l8gz
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_pause: Specify whether the cluster can auto-pause while `db_mode` is `SERVERLESS`. Values: `yes` (default), `no`.
        :param pulumi.Input[int] auto_pause_delay: Specify auto-pause delay in second while `db_mode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
        :param pulumi.Input[str] available_zone: The available zone of the CynosDB Cluster.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
        :param pulumi.Input[str] cluster_name: Name of CynosDB cluster.
        :param pulumi.Input[str] db_mode: Specify DB mode, only available when `db_type` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
        :param pulumi.Input[str] db_type: Type of CynosDB, and available values include `MYSQL`.
        :param pulumi.Input[str] db_version: Version of CynosDB, which is related to `db_type`. For `MYSQL`, available value is `5.7`, `8.0`.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
        :param pulumi.Input[int] instance_cpu_core: The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        :param pulumi.Input[int] instance_maintain_duration: Duration time for maintenance, unit in second. `3600` by default.
        :param pulumi.Input[int] instance_maintain_start_time: Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_maintain_weekdays: Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
        :param pulumi.Input[int] instance_memory_size: Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        :param pulumi.Input[float] max_cpu: Maximum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        :param pulumi.Input[float] min_cpu: Minimum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        :param pulumi.Input[int] old_ip_reserve_hours: Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterParamItemArgs']]]] param_items: Specify parameter list of database. It is valid when `param_template_id` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
        :param pulumi.Input[int] param_template_id: The ID of the parameter template.
        :param pulumi.Input[str] password: Password of `root` account.
        :param pulumi.Input[int] port: Port of CynosDB cluster.
        :param pulumi.Input[int] prarm_template_id: It will be deprecated. Use `param_template_id` instead. The ID of the parameter template.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[int] project_id: ID of the project. `0` by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ro_group_sgs: IDs of security group for `ro_group`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rw_group_sgs: IDs of security group for `rw_group`.
        :param pulumi.Input[str] serverless_status_flag: Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
        :param pulumi.Input[str] slave_zone: Multi zone Addresses of the CynosDB Cluster.
        :param pulumi.Input[int] storage_limit: Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is `MYSQL` and charge_type is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when charge_type is `POSTPAID_BY_HOUR`, this argument is unnecessary.
        :param pulumi.Input[int] storage_pay_mode: Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
        :param pulumi.Input[str] subnet_id: ID of the subnet within this VPC.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the CynosDB cluster.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a CynosDB cluster.

        ## Example Usage

        ### Create a single availability zone NORMAL CynosDB cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create cynosdb cluster
        example_cluster = tencentcloud.cynosdb.Cluster("exampleCluster",
            available_zone=availability_zone,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_mode="NORMAL",
            db_type="MYSQL",
            db_version="5.7",
            port=3306,
            storage_limit=1000,
            cluster_name="tf-example",
            password="cynosDB@123",
            instance_maintain_duration=7200,
            instance_maintain_start_time=10800,
            instance_cpu_core=2,
            instance_memory_size=4,
            force_delete=False,
            instance_maintain_weekdays=[
                "Fri",
                "Mon",
                "Sat",
                "Sun",
                "Thu",
                "Wed",
                "Tue",
            ],
            param_items=[
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="character_set_server",
                    current_value="utf8mb4",
                ),
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="lower_case_table_names",
                    current_value="0",
                ),
            ],
            rw_group_sgs=[example_group.id],
            ro_group_sgs=[example_group.id],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a multiple availability zone SERVERLESS CynosDB cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        slave_zone = config.get("slaveZone")
        if slave_zone is None:
            slave_zone = "ap-guangzhou-6"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=availability_zone,
            vpc_id=vpc.id,
            cidr_block="10.0.20.0/28",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create param template
        example_param_template = tencentcloud.cynosdb.ParamTemplate("exampleParamTemplate",
            db_mode="SERVERLESS",
            engine_version="8.0",
            template_name="tf-example",
            template_description="terraform-template",
            param_lists=[tencentcloud.cynosdb.ParamTemplateParamListArgs(
                current_value="-1",
                param_name="optimizer_trace_offset",
            )])
        # create cynosdb cluster
        example_cluster = tencentcloud.cynosdb.Cluster("exampleCluster",
            available_zone=availability_zone,
            slave_zone=slave_zone,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            db_mode="SERVERLESS",
            db_type="MYSQL",
            db_version="8.0",
            port=3306,
            storage_limit=1000,
            cluster_name="tf-example",
            password="cynosDB@123",
            instance_maintain_duration=7200,
            instance_maintain_start_time=10800,
            min_cpu=2,
            max_cpu=4,
            param_template_id=example_param_template.template_id,
            force_delete=False,
            instance_maintain_weekdays=[
                "Fri",
                "Mon",
                "Sat",
                "Sun",
                "Thu",
                "Wed",
                "Tue",
            ],
            rw_group_sgs=[example_group.id],
            ro_group_sgs=[example_group.id],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CynosDB cluster can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cynosdb/cluster:Cluster example cynosdbmysql-dzj5l8gz
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_pause: Optional[pulumi.Input[str]] = None,
                 auto_pause_delay: Optional[pulumi.Input[int]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 available_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 db_type: Optional[pulumi.Input[str]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_cpu_core: Optional[pulumi.Input[int]] = None,
                 instance_maintain_duration: Optional[pulumi.Input[int]] = None,
                 instance_maintain_start_time: Optional[pulumi.Input[int]] = None,
                 instance_maintain_weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_memory_size: Optional[pulumi.Input[int]] = None,
                 max_cpu: Optional[pulumi.Input[float]] = None,
                 min_cpu: Optional[pulumi.Input[float]] = None,
                 old_ip_reserve_hours: Optional[pulumi.Input[int]] = None,
                 param_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterParamItemArgs']]]]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prarm_template_id: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 ro_group_sgs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rw_group_sgs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 serverless_status_flag: Optional[pulumi.Input[str]] = None,
                 slave_zone: Optional[pulumi.Input[str]] = None,
                 storage_limit: Optional[pulumi.Input[int]] = None,
                 storage_pay_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["auto_pause"] = auto_pause
            __props__.__dict__["auto_pause_delay"] = auto_pause_delay
            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            if available_zone is None and not opts.urn:
                raise TypeError("Missing required property 'available_zone'")
            __props__.__dict__["available_zone"] = available_zone
            __props__.__dict__["charge_type"] = charge_type
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["db_mode"] = db_mode
            if db_type is None and not opts.urn:
                raise TypeError("Missing required property 'db_type'")
            __props__.__dict__["db_type"] = db_type
            if db_version is None and not opts.urn:
                raise TypeError("Missing required property 'db_version'")
            __props__.__dict__["db_version"] = db_version
            __props__.__dict__["force_delete"] = force_delete
            __props__.__dict__["instance_cpu_core"] = instance_cpu_core
            __props__.__dict__["instance_maintain_duration"] = instance_maintain_duration
            __props__.__dict__["instance_maintain_start_time"] = instance_maintain_start_time
            __props__.__dict__["instance_maintain_weekdays"] = instance_maintain_weekdays
            __props__.__dict__["instance_memory_size"] = instance_memory_size
            __props__.__dict__["max_cpu"] = max_cpu
            __props__.__dict__["min_cpu"] = min_cpu
            __props__.__dict__["old_ip_reserve_hours"] = old_ip_reserve_hours
            __props__.__dict__["param_items"] = param_items
            __props__.__dict__["param_template_id"] = param_template_id
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["port"] = port
            __props__.__dict__["prarm_template_id"] = prarm_template_id
            __props__.__dict__["prepaid_period"] = prepaid_period
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["ro_group_sgs"] = ro_group_sgs
            __props__.__dict__["rw_group_sgs"] = rw_group_sgs
            __props__.__dict__["serverless_status_flag"] = serverless_status_flag
            __props__.__dict__["slave_zone"] = slave_zone
            __props__.__dict__["storage_limit"] = storage_limit
            __props__.__dict__["storage_pay_mode"] = storage_pay_mode
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["charset"] = None
            __props__.__dict__["cluster_status"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["instance_name"] = None
            __props__.__dict__["instance_status"] = None
            __props__.__dict__["instance_storage_size"] = None
            __props__.__dict__["ro_group_addrs"] = None
            __props__.__dict__["ro_group_id"] = None
            __props__.__dict__["ro_group_instances"] = None
            __props__.__dict__["rw_group_addrs"] = None
            __props__.__dict__["rw_group_id"] = None
            __props__.__dict__["rw_group_instances"] = None
            __props__.__dict__["serverless_status"] = None
            __props__.__dict__["storage_used"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Cluster, __self__).__init__(
            'tencentcloud:Cynosdb/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_pause: Optional[pulumi.Input[str]] = None,
            auto_pause_delay: Optional[pulumi.Input[int]] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            available_zone: Optional[pulumi.Input[str]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            charset: Optional[pulumi.Input[str]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            cluster_status: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            db_mode: Optional[pulumi.Input[str]] = None,
            db_type: Optional[pulumi.Input[str]] = None,
            db_version: Optional[pulumi.Input[str]] = None,
            force_delete: Optional[pulumi.Input[bool]] = None,
            instance_cpu_core: Optional[pulumi.Input[int]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            instance_maintain_duration: Optional[pulumi.Input[int]] = None,
            instance_maintain_start_time: Optional[pulumi.Input[int]] = None,
            instance_maintain_weekdays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            instance_memory_size: Optional[pulumi.Input[int]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_status: Optional[pulumi.Input[str]] = None,
            instance_storage_size: Optional[pulumi.Input[int]] = None,
            max_cpu: Optional[pulumi.Input[float]] = None,
            min_cpu: Optional[pulumi.Input[float]] = None,
            old_ip_reserve_hours: Optional[pulumi.Input[int]] = None,
            param_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterParamItemArgs']]]]] = None,
            param_template_id: Optional[pulumi.Input[int]] = None,
            password: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            prarm_template_id: Optional[pulumi.Input[int]] = None,
            prepaid_period: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            ro_group_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRoGroupAddrArgs']]]]] = None,
            ro_group_id: Optional[pulumi.Input[str]] = None,
            ro_group_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRoGroupInstanceArgs']]]]] = None,
            ro_group_sgs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            rw_group_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRwGroupAddrArgs']]]]] = None,
            rw_group_id: Optional[pulumi.Input[str]] = None,
            rw_group_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRwGroupInstanceArgs']]]]] = None,
            rw_group_sgs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            serverless_status: Optional[pulumi.Input[str]] = None,
            serverless_status_flag: Optional[pulumi.Input[str]] = None,
            slave_zone: Optional[pulumi.Input[str]] = None,
            storage_limit: Optional[pulumi.Input[int]] = None,
            storage_pay_mode: Optional[pulumi.Input[int]] = None,
            storage_used: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_pause: Specify whether the cluster can auto-pause while `db_mode` is `SERVERLESS`. Values: `yes` (default), `no`.
        :param pulumi.Input[int] auto_pause_delay: Specify auto-pause delay in second while `db_mode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
        :param pulumi.Input[str] available_zone: The available zone of the CynosDB Cluster.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
        :param pulumi.Input[str] charset: Charset used by CynosDB cluster.
        :param pulumi.Input[str] cluster_name: Name of CynosDB cluster.
        :param pulumi.Input[str] cluster_status: Status of the Cynosdb cluster.
        :param pulumi.Input[str] create_time: Creation time of the CynosDB cluster.
        :param pulumi.Input[str] db_mode: Specify DB mode, only available when `db_type` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
        :param pulumi.Input[str] db_type: Type of CynosDB, and available values include `MYSQL`.
        :param pulumi.Input[str] db_version: Version of CynosDB, which is related to `db_type`. For `MYSQL`, available value is `5.7`, `8.0`.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
        :param pulumi.Input[int] instance_cpu_core: The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        :param pulumi.Input[str] instance_id: ID of instance.
        :param pulumi.Input[int] instance_maintain_duration: Duration time for maintenance, unit in second. `3600` by default.
        :param pulumi.Input[int] instance_maintain_start_time: Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_maintain_weekdays: Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
        :param pulumi.Input[int] instance_memory_size: Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        :param pulumi.Input[str] instance_name: Name of instance.
        :param pulumi.Input[str] instance_status: Status of the instance.
        :param pulumi.Input[int] instance_storage_size: Storage size of the instance, unit in GB.
        :param pulumi.Input[float] max_cpu: Maximum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        :param pulumi.Input[float] min_cpu: Minimum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        :param pulumi.Input[int] old_ip_reserve_hours: Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterParamItemArgs']]]] param_items: Specify parameter list of database. It is valid when `param_template_id` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
        :param pulumi.Input[int] param_template_id: The ID of the parameter template.
        :param pulumi.Input[str] password: Password of `root` account.
        :param pulumi.Input[int] port: Port of CynosDB cluster.
        :param pulumi.Input[int] prarm_template_id: It will be deprecated. Use `param_template_id` instead. The ID of the parameter template.
        :param pulumi.Input[int] prepaid_period: The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[int] project_id: ID of the project. `0` by default.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRoGroupAddrArgs']]]] ro_group_addrs: Readonly addresses. Each element contains the following attributes:
        :param pulumi.Input[str] ro_group_id: ID of read-only instance group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRoGroupInstanceArgs']]]] ro_group_instances: List of instances in the read-only instance group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ro_group_sgs: IDs of security group for `ro_group`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRwGroupAddrArgs']]]] rw_group_addrs: Read-write addresses. Each element contains the following attributes:
        :param pulumi.Input[str] rw_group_id: ID of read-write instance group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRwGroupInstanceArgs']]]] rw_group_instances: List of instances in the read-write instance group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rw_group_sgs: IDs of security group for `rw_group`.
        :param pulumi.Input[str] serverless_status: Serverless cluster status. NOTE: This is a readonly attribute, to modify, please set `serverless_status_flag`.
        :param pulumi.Input[str] serverless_status_flag: Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
        :param pulumi.Input[str] slave_zone: Multi zone Addresses of the CynosDB Cluster.
        :param pulumi.Input[int] storage_limit: Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is `MYSQL` and charge_type is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when charge_type is `POSTPAID_BY_HOUR`, this argument is unnecessary.
        :param pulumi.Input[int] storage_pay_mode: Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
        :param pulumi.Input[int] storage_used: Used storage of CynosDB cluster, unit in MB.
        :param pulumi.Input[str] subnet_id: ID of the subnet within this VPC.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the CynosDB cluster.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["auto_pause"] = auto_pause
        __props__.__dict__["auto_pause_delay"] = auto_pause_delay
        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["available_zone"] = available_zone
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["charset"] = charset
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cluster_status"] = cluster_status
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["db_mode"] = db_mode
        __props__.__dict__["db_type"] = db_type
        __props__.__dict__["db_version"] = db_version
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["instance_cpu_core"] = instance_cpu_core
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_maintain_duration"] = instance_maintain_duration
        __props__.__dict__["instance_maintain_start_time"] = instance_maintain_start_time
        __props__.__dict__["instance_maintain_weekdays"] = instance_maintain_weekdays
        __props__.__dict__["instance_memory_size"] = instance_memory_size
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_status"] = instance_status
        __props__.__dict__["instance_storage_size"] = instance_storage_size
        __props__.__dict__["max_cpu"] = max_cpu
        __props__.__dict__["min_cpu"] = min_cpu
        __props__.__dict__["old_ip_reserve_hours"] = old_ip_reserve_hours
        __props__.__dict__["param_items"] = param_items
        __props__.__dict__["param_template_id"] = param_template_id
        __props__.__dict__["password"] = password
        __props__.__dict__["port"] = port
        __props__.__dict__["prarm_template_id"] = prarm_template_id
        __props__.__dict__["prepaid_period"] = prepaid_period
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["ro_group_addrs"] = ro_group_addrs
        __props__.__dict__["ro_group_id"] = ro_group_id
        __props__.__dict__["ro_group_instances"] = ro_group_instances
        __props__.__dict__["ro_group_sgs"] = ro_group_sgs
        __props__.__dict__["rw_group_addrs"] = rw_group_addrs
        __props__.__dict__["rw_group_id"] = rw_group_id
        __props__.__dict__["rw_group_instances"] = rw_group_instances
        __props__.__dict__["rw_group_sgs"] = rw_group_sgs
        __props__.__dict__["serverless_status"] = serverless_status
        __props__.__dict__["serverless_status_flag"] = serverless_status_flag
        __props__.__dict__["slave_zone"] = slave_zone
        __props__.__dict__["storage_limit"] = storage_limit
        __props__.__dict__["storage_pay_mode"] = storage_pay_mode
        __props__.__dict__["storage_used"] = storage_used
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoPause")
    def auto_pause(self) -> pulumi.Output[Optional[str]]:
        """
        Specify whether the cluster can auto-pause while `db_mode` is `SERVERLESS`. Values: `yes` (default), `no`.
        """
        return pulumi.get(self, "auto_pause")

    @property
    @pulumi.getter(name="autoPauseDelay")
    def auto_pause_delay(self) -> pulumi.Output[Optional[int]]:
        """
        Specify auto-pause delay in second while `db_mode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
        """
        return pulumi.get(self, "auto_pause_delay")

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> pulumi.Output[str]:
        """
        The available zone of the CynosDB Cluster.
        """
        return pulumi.get(self, "available_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def charset(self) -> pulumi.Output[str]:
        """
        Charset used by CynosDB cluster.
        """
        return pulumi.get(self, "charset")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        Name of CynosDB cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> pulumi.Output[str]:
        """
        Status of the Cynosdb cluster.
        """
        return pulumi.get(self, "cluster_status")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time of the CynosDB cluster.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Specify DB mode, only available when `db_type` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
        """
        return pulumi.get(self, "db_mode")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> pulumi.Output[str]:
        """
        Type of CynosDB, and available values include `MYSQL`.
        """
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> pulumi.Output[str]:
        """
        Version of CynosDB, which is related to `db_type`. For `MYSQL`, available value is `5.7`, `8.0`.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
        """
        return pulumi.get(self, "force_delete")

    @property
    @pulumi.getter(name="instanceCpuCore")
    def instance_cpu_core(self) -> pulumi.Output[Optional[int]]:
        """
        The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        """
        return pulumi.get(self, "instance_cpu_core")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceMaintainDuration")
    def instance_maintain_duration(self) -> pulumi.Output[Optional[int]]:
        """
        Duration time for maintenance, unit in second. `3600` by default.
        """
        return pulumi.get(self, "instance_maintain_duration")

    @property
    @pulumi.getter(name="instanceMaintainStartTime")
    def instance_maintain_start_time(self) -> pulumi.Output[Optional[int]]:
        """
        Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
        """
        return pulumi.get(self, "instance_maintain_start_time")

    @property
    @pulumi.getter(name="instanceMaintainWeekdays")
    def instance_maintain_weekdays(self) -> pulumi.Output[Sequence[str]]:
        """
        Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
        """
        return pulumi.get(self, "instance_maintain_weekdays")

    @property
    @pulumi.getter(name="instanceMemorySize")
    def instance_memory_size(self) -> pulumi.Output[Optional[int]]:
        """
        Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
        """
        return pulumi.get(self, "instance_memory_size")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Name of instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> pulumi.Output[str]:
        """
        Status of the instance.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="instanceStorageSize")
    def instance_storage_size(self) -> pulumi.Output[int]:
        """
        Storage size of the instance, unit in GB.
        """
        return pulumi.get(self, "instance_storage_size")

    @property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> pulumi.Output[Optional[float]]:
        """
        Maximum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        """
        return pulumi.get(self, "max_cpu")

    @property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> pulumi.Output[Optional[float]]:
        """
        Minimum CPU core count, required while `db_mode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
        """
        return pulumi.get(self, "min_cpu")

    @property
    @pulumi.getter(name="oldIpReserveHours")
    def old_ip_reserve_hours(self) -> pulumi.Output[Optional[int]]:
        """
        Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
        """
        return pulumi.get(self, "old_ip_reserve_hours")

    @property
    @pulumi.getter(name="paramItems")
    def param_items(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterParamItem']]]:
        """
        Specify parameter list of database. It is valid when `param_template_id` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
        """
        return pulumi.get(self, "param_items")

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> pulumi.Output[int]:
        """
        The ID of the parameter template.
        """
        return pulumi.get(self, "param_template_id")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password of `root` account.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[int]]:
        """
        Port of CynosDB cluster.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="prarmTemplateId")
    def prarm_template_id(self) -> pulumi.Output[int]:
        """
        It will be deprecated. Use `param_template_id` instead. The ID of the parameter template.
        """
        warnings.warn("""It will be deprecated. Use `param_template_id` instead.""", DeprecationWarning)
        pulumi.log.warn("""prarm_template_id is deprecated: It will be deprecated. Use `param_template_id` instead.""")

        return pulumi.get(self, "prarm_template_id")

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> pulumi.Output[Optional[int]]:
        """
        The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "prepaid_period")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the project. `0` by default.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="roGroupAddrs")
    def ro_group_addrs(self) -> pulumi.Output[Sequence['outputs.ClusterRoGroupAddr']]:
        """
        Readonly addresses. Each element contains the following attributes:
        """
        return pulumi.get(self, "ro_group_addrs")

    @property
    @pulumi.getter(name="roGroupId")
    def ro_group_id(self) -> pulumi.Output[str]:
        """
        ID of read-only instance group.
        """
        return pulumi.get(self, "ro_group_id")

    @property
    @pulumi.getter(name="roGroupInstances")
    def ro_group_instances(self) -> pulumi.Output[Sequence['outputs.ClusterRoGroupInstance']]:
        """
        List of instances in the read-only instance group.
        """
        return pulumi.get(self, "ro_group_instances")

    @property
    @pulumi.getter(name="roGroupSgs")
    def ro_group_sgs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IDs of security group for `ro_group`.
        """
        return pulumi.get(self, "ro_group_sgs")

    @property
    @pulumi.getter(name="rwGroupAddrs")
    def rw_group_addrs(self) -> pulumi.Output[Sequence['outputs.ClusterRwGroupAddr']]:
        """
        Read-write addresses. Each element contains the following attributes:
        """
        return pulumi.get(self, "rw_group_addrs")

    @property
    @pulumi.getter(name="rwGroupId")
    def rw_group_id(self) -> pulumi.Output[str]:
        """
        ID of read-write instance group.
        """
        return pulumi.get(self, "rw_group_id")

    @property
    @pulumi.getter(name="rwGroupInstances")
    def rw_group_instances(self) -> pulumi.Output[Sequence['outputs.ClusterRwGroupInstance']]:
        """
        List of instances in the read-write instance group.
        """
        return pulumi.get(self, "rw_group_instances")

    @property
    @pulumi.getter(name="rwGroupSgs")
    def rw_group_sgs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IDs of security group for `rw_group`.
        """
        return pulumi.get(self, "rw_group_sgs")

    @property
    @pulumi.getter(name="serverlessStatus")
    def serverless_status(self) -> pulumi.Output[str]:
        """
        Serverless cluster status. NOTE: This is a readonly attribute, to modify, please set `serverless_status_flag`.
        """
        return pulumi.get(self, "serverless_status")

    @property
    @pulumi.getter(name="serverlessStatusFlag")
    def serverless_status_flag(self) -> pulumi.Output[Optional[str]]:
        """
        Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
        """
        return pulumi.get(self, "serverless_status_flag")

    @property
    @pulumi.getter(name="slaveZone")
    def slave_zone(self) -> pulumi.Output[Optional[str]]:
        """
        Multi zone Addresses of the CynosDB Cluster.
        """
        return pulumi.get(self, "slave_zone")

    @property
    @pulumi.getter(name="storageLimit")
    def storage_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If db_type is `MYSQL` and charge_type is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when charge_type is `POSTPAID_BY_HOUR`, this argument is unnecessary.
        """
        return pulumi.get(self, "storage_limit")

    @property
    @pulumi.getter(name="storagePayMode")
    def storage_pay_mode(self) -> pulumi.Output[int]:
        """
        Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
        """
        return pulumi.get(self, "storage_pay_mode")

    @property
    @pulumi.getter(name="storageUsed")
    def storage_used(self) -> pulumi.Output[int]:
        """
        Used storage of CynosDB cluster, unit in MB.
        """
        return pulumi.get(self, "storage_used")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        ID of the subnet within this VPC.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The tags of the CynosDB cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

