# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CenterScimCredentialArgs', 'CenterScimCredential']

@pulumi.input_type
class CenterScimCredentialArgs:
    def __init__(__self__, *,
                 zone_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a CenterScimCredential resource.
        :param pulumi.Input[str] zone_id: Space ID. z-prefix starts with 12 random digits/lowercase letters.
        """
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Space ID. z-prefix starts with 12 random digits/lowercase letters.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class _CenterScimCredentialState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 credential_id: Optional[pulumi.Input[str]] = None,
                 credential_type: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CenterScimCredential resources.
        :param pulumi.Input[str] create_time: SCIM create time.
        :param pulumi.Input[str] credential_id: SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
        :param pulumi.Input[str] credential_type: SCIM credential type.
        :param pulumi.Input[str] expire_time: SCIM expire time.
        :param pulumi.Input[str] status: SCIM key status, Enabled-On, Disabled-Closed.
        :param pulumi.Input[str] zone_id: Space ID. z-prefix starts with 12 random digits/lowercase letters.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if credential_id is not None:
            pulumi.set(__self__, "credential_id", credential_id)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        SCIM create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
        """
        return pulumi.get(self, "credential_id")

    @credential_id.setter
    def credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_id", value)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        SCIM credential type.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        SCIM expire time.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        SCIM key status, Enabled-On, Disabled-Closed.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Space ID. z-prefix starts with 12 random digits/lowercase letters.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class CenterScimCredential(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create an identity center scim credential

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        identity_center_scim_credential = tencentcloud.identity.CenterScimCredential("identityCenterScimCredential", zone_id="z-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization identity_center_scim_credential can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Identity/centerScimCredential:CenterScimCredential identity_center_scim_credential ${zone_id}#${credential_id}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] zone_id: Space ID. z-prefix starts with 12 random digits/lowercase letters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CenterScimCredentialArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create an identity center scim credential

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        identity_center_scim_credential = tencentcloud.identity.CenterScimCredential("identityCenterScimCredential", zone_id="z-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization identity_center_scim_credential can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Identity/centerScimCredential:CenterScimCredential identity_center_scim_credential ${zone_id}#${credential_id}
        ```

        :param str resource_name: The name of the resource.
        :param CenterScimCredentialArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CenterScimCredentialArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CenterScimCredentialArgs.__new__(CenterScimCredentialArgs)

            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["credential_id"] = None
            __props__.__dict__["credential_type"] = None
            __props__.__dict__["expire_time"] = None
            __props__.__dict__["status"] = None
        super(CenterScimCredential, __self__).__init__(
            'tencentcloud:Identity/centerScimCredential:CenterScimCredential',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            credential_id: Optional[pulumi.Input[str]] = None,
            credential_type: Optional[pulumi.Input[str]] = None,
            expire_time: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'CenterScimCredential':
        """
        Get an existing CenterScimCredential resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: SCIM create time.
        :param pulumi.Input[str] credential_id: SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
        :param pulumi.Input[str] credential_type: SCIM credential type.
        :param pulumi.Input[str] expire_time: SCIM expire time.
        :param pulumi.Input[str] status: SCIM key status, Enabled-On, Disabled-Closed.
        :param pulumi.Input[str] zone_id: Space ID. z-prefix starts with 12 random digits/lowercase letters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CenterScimCredentialState.__new__(_CenterScimCredentialState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["credential_id"] = credential_id
        __props__.__dict__["credential_type"] = credential_type
        __props__.__dict__["expire_time"] = expire_time
        __props__.__dict__["status"] = status
        __props__.__dict__["zone_id"] = zone_id
        return CenterScimCredential(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        SCIM create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> pulumi.Output[str]:
        """
        SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
        """
        return pulumi.get(self, "credential_id")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Output[str]:
        """
        SCIM credential type.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Output[str]:
        """
        SCIM expire time.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        SCIM key status, Enabled-On, Disabled-Closed.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Space ID. z-prefix starts with 12 random digits/lowercase letters.
        """
        return pulumi.get(self, "zone_id")

