# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CenterRoleAssignmentArgs', 'CenterRoleAssignment']

@pulumi.input_type
class CenterRoleAssignmentArgs:
    def __init__(__self__, *,
                 principal_id: pulumi.Input[str],
                 principal_type: pulumi.Input[str],
                 role_configuration_id: pulumi.Input[str],
                 target_type: pulumi.Input[str],
                 target_uin: pulumi.Input[int],
                 zone_id: pulumi.Input[str],
                 deprovision_strategy: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CenterRoleAssignment resource.
        :param pulumi.Input[str] principal_id: Identity ID for the CAM user synchronization. Valid values:
               When the PrincipalType value is Group, it is the CIC user group ID (g-********).
               When the PrincipalType value is User, it is the CIC user ID (u-********).
        :param pulumi.Input[str] principal_type: Identity type for the CAM user synchronization. Valid values:
               
               User: indicates that the identity for the CAM user synchronization is a CIC user.
               Group: indicates that the identity for the CAM user synchronization is a CIC user group.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[str] target_type: Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
        :param pulumi.Input[int] target_uin: UIN of the synchronized target account of the Tencent Cloud Organization.
        :param pulumi.Input[str] zone_id: Space ID.
        :param pulumi.Input[str] deprovision_strategy: When you remove the last authorization configured with a certain privilege on a group account target account, whether to cancel the privilege configuration deployment at the same time. Value: DeprovisionForLastRoleAssignmentOnAccount: Remove privileges to configure deployment. None (default): Configure deployment without delegating privileges.
        """
        pulumi.set(__self__, "principal_id", principal_id)
        pulumi.set(__self__, "principal_type", principal_type)
        pulumi.set(__self__, "role_configuration_id", role_configuration_id)
        pulumi.set(__self__, "target_type", target_type)
        pulumi.set(__self__, "target_uin", target_uin)
        pulumi.set(__self__, "zone_id", zone_id)
        if deprovision_strategy is not None:
            pulumi.set(__self__, "deprovision_strategy", deprovision_strategy)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Input[str]:
        """
        Identity ID for the CAM user synchronization. Valid values:
        When the PrincipalType value is Group, it is the CIC user group ID (g-********).
        When the PrincipalType value is User, it is the CIC user ID (u-********).
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> pulumi.Input[str]:
        """
        Identity type for the CAM user synchronization. Valid values:

        User: indicates that the identity for the CAM user synchronization is a CIC user.
        Group: indicates that the identity for the CAM user synchronization is a CIC user group.
        """
        return pulumi.get(self, "principal_type")

    @principal_type.setter
    def principal_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal_type", value)

    @property
    @pulumi.getter(name="roleConfigurationId")
    def role_configuration_id(self) -> pulumi.Input[str]:
        """
        Permission configuration ID.
        """
        return pulumi.get(self, "role_configuration_id")

    @role_configuration_id.setter
    def role_configuration_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_configuration_id", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[str]:
        """
        Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="targetUin")
    def target_uin(self) -> pulumi.Input[int]:
        """
        UIN of the synchronized target account of the Tencent Cloud Organization.
        """
        return pulumi.get(self, "target_uin")

    @target_uin.setter
    def target_uin(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_uin", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="deprovisionStrategy")
    def deprovision_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        When you remove the last authorization configured with a certain privilege on a group account target account, whether to cancel the privilege configuration deployment at the same time. Value: DeprovisionForLastRoleAssignmentOnAccount: Remove privileges to configure deployment. None (default): Configure deployment without delegating privileges.
        """
        return pulumi.get(self, "deprovision_strategy")

    @deprovision_strategy.setter
    def deprovision_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deprovision_strategy", value)


@pulumi.input_type
class _CenterRoleAssignmentState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 deprovision_strategy: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 principal_name: Optional[pulumi.Input[str]] = None,
                 principal_type: Optional[pulumi.Input[str]] = None,
                 role_configuration_id: Optional[pulumi.Input[str]] = None,
                 role_configuration_name: Optional[pulumi.Input[str]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 target_uin: Optional[pulumi.Input[int]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CenterRoleAssignment resources.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] deprovision_strategy: When you remove the last authorization configured with a certain privilege on a group account target account, whether to cancel the privilege configuration deployment at the same time. Value: DeprovisionForLastRoleAssignmentOnAccount: Remove privileges to configure deployment. None (default): Configure deployment without delegating privileges.
        :param pulumi.Input[str] principal_id: Identity ID for the CAM user synchronization. Valid values:
               When the PrincipalType value is Group, it is the CIC user group ID (g-********).
               When the PrincipalType value is User, it is the CIC user ID (u-********).
        :param pulumi.Input[str] principal_name: Principal name.
        :param pulumi.Input[str] principal_type: Identity type for the CAM user synchronization. Valid values:
               
               User: indicates that the identity for the CAM user synchronization is a CIC user.
               Group: indicates that the identity for the CAM user synchronization is a CIC user group.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[str] role_configuration_name: Role configuration name.
        :param pulumi.Input[str] target_name: Target name.
        :param pulumi.Input[str] target_type: Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
        :param pulumi.Input[int] target_uin: UIN of the synchronized target account of the Tencent Cloud Organization.
        :param pulumi.Input[str] update_time: Update time.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if deprovision_strategy is not None:
            pulumi.set(__self__, "deprovision_strategy", deprovision_strategy)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if principal_name is not None:
            pulumi.set(__self__, "principal_name", principal_name)
        if principal_type is not None:
            pulumi.set(__self__, "principal_type", principal_type)
        if role_configuration_id is not None:
            pulumi.set(__self__, "role_configuration_id", role_configuration_id)
        if role_configuration_name is not None:
            pulumi.set(__self__, "role_configuration_name", role_configuration_name)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if target_uin is not None:
            pulumi.set(__self__, "target_uin", target_uin)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="deprovisionStrategy")
    def deprovision_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        When you remove the last authorization configured with a certain privilege on a group account target account, whether to cancel the privilege configuration deployment at the same time. Value: DeprovisionForLastRoleAssignmentOnAccount: Remove privileges to configure deployment. None (default): Configure deployment without delegating privileges.
        """
        return pulumi.get(self, "deprovision_strategy")

    @deprovision_strategy.setter
    def deprovision_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deprovision_strategy", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identity ID for the CAM user synchronization. Valid values:
        When the PrincipalType value is Group, it is the CIC user group ID (g-********).
        When the PrincipalType value is User, it is the CIC user ID (u-********).
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> Optional[pulumi.Input[str]]:
        """
        Principal name.
        """
        return pulumi.get(self, "principal_name")

    @principal_name.setter
    def principal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_name", value)

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> Optional[pulumi.Input[str]]:
        """
        Identity type for the CAM user synchronization. Valid values:

        User: indicates that the identity for the CAM user synchronization is a CIC user.
        Group: indicates that the identity for the CAM user synchronization is a CIC user group.
        """
        return pulumi.get(self, "principal_type")

    @principal_type.setter
    def principal_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal_type", value)

    @property
    @pulumi.getter(name="roleConfigurationId")
    def role_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Permission configuration ID.
        """
        return pulumi.get(self, "role_configuration_id")

    @role_configuration_id.setter
    def role_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_configuration_id", value)

    @property
    @pulumi.getter(name="roleConfigurationName")
    def role_configuration_name(self) -> Optional[pulumi.Input[str]]:
        """
        Role configuration name.
        """
        return pulumi.get(self, "role_configuration_name")

    @role_configuration_name.setter
    def role_configuration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_configuration_name", value)

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[pulumi.Input[str]]:
        """
        Target name.
        """
        return pulumi.get(self, "target_name")

    @target_name.setter
    def target_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_name", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="targetUin")
    def target_uin(self) -> Optional[pulumi.Input[int]]:
        """
        UIN of the synchronized target account of the Tencent Cloud Organization.
        """
        return pulumi.get(self, "target_uin")

    @target_uin.setter
    def target_uin(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_uin", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class CenterRoleAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deprovision_strategy: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 principal_type: Optional[pulumi.Input[str]] = None,
                 role_configuration_id: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 target_uin: Optional[pulumi.Input[int]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization identity_center_role_assignment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        identity_center_role_assignment = tencentcloud.identity.CenterRoleAssignment("identityCenterRoleAssignment",
            principal_id="u-xxxxxx",
            principal_type="User",
            role_configuration_id="rc-xxxxxx",
            target_type="MemberUin",
            target_uin="xxxxxx",
            zone_id="z-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization identity_center_role_assignment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Identity/centerRoleAssignment:CenterRoleAssignment identity_center_role_assignment {zoneId}#{roleConfigurationId}#{targetType}#{targetUinString}#{principalType}#{principalId}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] deprovision_strategy: When you remove the last authorization configured with a certain privilege on a group account target account, whether to cancel the privilege configuration deployment at the same time. Value: DeprovisionForLastRoleAssignmentOnAccount: Remove privileges to configure deployment. None (default): Configure deployment without delegating privileges.
        :param pulumi.Input[str] principal_id: Identity ID for the CAM user synchronization. Valid values:
               When the PrincipalType value is Group, it is the CIC user group ID (g-********).
               When the PrincipalType value is User, it is the CIC user ID (u-********).
        :param pulumi.Input[str] principal_type: Identity type for the CAM user synchronization. Valid values:
               
               User: indicates that the identity for the CAM user synchronization is a CIC user.
               Group: indicates that the identity for the CAM user synchronization is a CIC user group.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[str] target_type: Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
        :param pulumi.Input[int] target_uin: UIN of the synchronized target account of the Tencent Cloud Organization.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CenterRoleAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization identity_center_role_assignment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        identity_center_role_assignment = tencentcloud.identity.CenterRoleAssignment("identityCenterRoleAssignment",
            principal_id="u-xxxxxx",
            principal_type="User",
            role_configuration_id="rc-xxxxxx",
            target_type="MemberUin",
            target_uin="xxxxxx",
            zone_id="z-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization identity_center_role_assignment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Identity/centerRoleAssignment:CenterRoleAssignment identity_center_role_assignment {zoneId}#{roleConfigurationId}#{targetType}#{targetUinString}#{principalType}#{principalId}
        ```

        :param str resource_name: The name of the resource.
        :param CenterRoleAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CenterRoleAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deprovision_strategy: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[str]] = None,
                 principal_type: Optional[pulumi.Input[str]] = None,
                 role_configuration_id: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 target_uin: Optional[pulumi.Input[int]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CenterRoleAssignmentArgs.__new__(CenterRoleAssignmentArgs)

            __props__.__dict__["deprovision_strategy"] = deprovision_strategy
            if principal_id is None and not opts.urn:
                raise TypeError("Missing required property 'principal_id'")
            __props__.__dict__["principal_id"] = principal_id
            if principal_type is None and not opts.urn:
                raise TypeError("Missing required property 'principal_type'")
            __props__.__dict__["principal_type"] = principal_type
            if role_configuration_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_configuration_id'")
            __props__.__dict__["role_configuration_id"] = role_configuration_id
            if target_type is None and not opts.urn:
                raise TypeError("Missing required property 'target_type'")
            __props__.__dict__["target_type"] = target_type
            if target_uin is None and not opts.urn:
                raise TypeError("Missing required property 'target_uin'")
            __props__.__dict__["target_uin"] = target_uin
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["principal_name"] = None
            __props__.__dict__["role_configuration_name"] = None
            __props__.__dict__["target_name"] = None
            __props__.__dict__["update_time"] = None
        super(CenterRoleAssignment, __self__).__init__(
            'tencentcloud:Identity/centerRoleAssignment:CenterRoleAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            deprovision_strategy: Optional[pulumi.Input[str]] = None,
            principal_id: Optional[pulumi.Input[str]] = None,
            principal_name: Optional[pulumi.Input[str]] = None,
            principal_type: Optional[pulumi.Input[str]] = None,
            role_configuration_id: Optional[pulumi.Input[str]] = None,
            role_configuration_name: Optional[pulumi.Input[str]] = None,
            target_name: Optional[pulumi.Input[str]] = None,
            target_type: Optional[pulumi.Input[str]] = None,
            target_uin: Optional[pulumi.Input[int]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'CenterRoleAssignment':
        """
        Get an existing CenterRoleAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] deprovision_strategy: When you remove the last authorization configured with a certain privilege on a group account target account, whether to cancel the privilege configuration deployment at the same time. Value: DeprovisionForLastRoleAssignmentOnAccount: Remove privileges to configure deployment. None (default): Configure deployment without delegating privileges.
        :param pulumi.Input[str] principal_id: Identity ID for the CAM user synchronization. Valid values:
               When the PrincipalType value is Group, it is the CIC user group ID (g-********).
               When the PrincipalType value is User, it is the CIC user ID (u-********).
        :param pulumi.Input[str] principal_name: Principal name.
        :param pulumi.Input[str] principal_type: Identity type for the CAM user synchronization. Valid values:
               
               User: indicates that the identity for the CAM user synchronization is a CIC user.
               Group: indicates that the identity for the CAM user synchronization is a CIC user group.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[str] role_configuration_name: Role configuration name.
        :param pulumi.Input[str] target_name: Target name.
        :param pulumi.Input[str] target_type: Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
        :param pulumi.Input[int] target_uin: UIN of the synchronized target account of the Tencent Cloud Organization.
        :param pulumi.Input[str] update_time: Update time.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CenterRoleAssignmentState.__new__(_CenterRoleAssignmentState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["deprovision_strategy"] = deprovision_strategy
        __props__.__dict__["principal_id"] = principal_id
        __props__.__dict__["principal_name"] = principal_name
        __props__.__dict__["principal_type"] = principal_type
        __props__.__dict__["role_configuration_id"] = role_configuration_id
        __props__.__dict__["role_configuration_name"] = role_configuration_name
        __props__.__dict__["target_name"] = target_name
        __props__.__dict__["target_type"] = target_type
        __props__.__dict__["target_uin"] = target_uin
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["zone_id"] = zone_id
        return CenterRoleAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deprovisionStrategy")
    def deprovision_strategy(self) -> pulumi.Output[Optional[str]]:
        """
        When you remove the last authorization configured with a certain privilege on a group account target account, whether to cancel the privilege configuration deployment at the same time. Value: DeprovisionForLastRoleAssignmentOnAccount: Remove privileges to configure deployment. None (default): Configure deployment without delegating privileges.
        """
        return pulumi.get(self, "deprovision_strategy")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Output[str]:
        """
        Identity ID for the CAM user synchronization. Valid values:
        When the PrincipalType value is Group, it is the CIC user group ID (g-********).
        When the PrincipalType value is User, it is the CIC user ID (u-********).
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="principalName")
    def principal_name(self) -> pulumi.Output[str]:
        """
        Principal name.
        """
        return pulumi.get(self, "principal_name")

    @property
    @pulumi.getter(name="principalType")
    def principal_type(self) -> pulumi.Output[str]:
        """
        Identity type for the CAM user synchronization. Valid values:

        User: indicates that the identity for the CAM user synchronization is a CIC user.
        Group: indicates that the identity for the CAM user synchronization is a CIC user group.
        """
        return pulumi.get(self, "principal_type")

    @property
    @pulumi.getter(name="roleConfigurationId")
    def role_configuration_id(self) -> pulumi.Output[str]:
        """
        Permission configuration ID.
        """
        return pulumi.get(self, "role_configuration_id")

    @property
    @pulumi.getter(name="roleConfigurationName")
    def role_configuration_name(self) -> pulumi.Output[str]:
        """
        Role configuration name.
        """
        return pulumi.get(self, "role_configuration_name")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> pulumi.Output[str]:
        """
        Target name.
        """
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[str]:
        """
        Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="targetUin")
    def target_uin(self) -> pulumi.Output[int]:
        """
        UIN of the synchronized target account of the Tencent Cloud Organization.
        """
        return pulumi.get(self, "target_uin")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

