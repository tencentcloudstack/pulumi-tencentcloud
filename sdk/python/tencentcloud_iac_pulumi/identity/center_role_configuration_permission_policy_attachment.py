# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CenterRoleConfigurationPermissionPolicyAttachmentArgs', 'CenterRoleConfigurationPermissionPolicyAttachment']

@pulumi.input_type
class CenterRoleConfigurationPermissionPolicyAttachmentArgs:
    def __init__(__self__, *,
                 role_configuration_id: pulumi.Input[str],
                 role_policy_id: pulumi.Input[int],
                 zone_id: pulumi.Input[str],
                 role_policy_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CenterRoleConfigurationPermissionPolicyAttachment resource.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[int] role_policy_id: Role policy id.
        :param pulumi.Input[str] zone_id: Space ID.
        :param pulumi.Input[str] role_policy_name: Role policy name.
        """
        pulumi.set(__self__, "role_configuration_id", role_configuration_id)
        pulumi.set(__self__, "role_policy_id", role_policy_id)
        pulumi.set(__self__, "zone_id", zone_id)
        if role_policy_name is not None:
            pulumi.set(__self__, "role_policy_name", role_policy_name)

    @property
    @pulumi.getter(name="roleConfigurationId")
    def role_configuration_id(self) -> pulumi.Input[str]:
        """
        Permission configuration ID.
        """
        return pulumi.get(self, "role_configuration_id")

    @role_configuration_id.setter
    def role_configuration_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_configuration_id", value)

    @property
    @pulumi.getter(name="rolePolicyId")
    def role_policy_id(self) -> pulumi.Input[int]:
        """
        Role policy id.
        """
        return pulumi.get(self, "role_policy_id")

    @role_policy_id.setter
    def role_policy_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "role_policy_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="rolePolicyName")
    def role_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Role policy name.
        """
        return pulumi.get(self, "role_policy_name")

    @role_policy_name.setter
    def role_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_policy_name", value)


@pulumi.input_type
class _CenterRoleConfigurationPermissionPolicyAttachmentState:
    def __init__(__self__, *,
                 add_time: Optional[pulumi.Input[str]] = None,
                 role_configuration_id: Optional[pulumi.Input[str]] = None,
                 role_policy_document: Optional[pulumi.Input[str]] = None,
                 role_policy_id: Optional[pulumi.Input[int]] = None,
                 role_policy_name: Optional[pulumi.Input[str]] = None,
                 role_policy_type: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CenterRoleConfigurationPermissionPolicyAttachment resources.
        :param pulumi.Input[str] add_time: Role policy add time.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[str] role_policy_document: Role policy document.
        :param pulumi.Input[int] role_policy_id: Role policy id.
        :param pulumi.Input[str] role_policy_name: Role policy name.
        :param pulumi.Input[str] role_policy_type: Role policy type.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        if add_time is not None:
            pulumi.set(__self__, "add_time", add_time)
        if role_configuration_id is not None:
            pulumi.set(__self__, "role_configuration_id", role_configuration_id)
        if role_policy_document is not None:
            pulumi.set(__self__, "role_policy_document", role_policy_document)
        if role_policy_id is not None:
            pulumi.set(__self__, "role_policy_id", role_policy_id)
        if role_policy_name is not None:
            pulumi.set(__self__, "role_policy_name", role_policy_name)
        if role_policy_type is not None:
            pulumi.set(__self__, "role_policy_type", role_policy_type)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> Optional[pulumi.Input[str]]:
        """
        Role policy add time.
        """
        return pulumi.get(self, "add_time")

    @add_time.setter
    def add_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_time", value)

    @property
    @pulumi.getter(name="roleConfigurationId")
    def role_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Permission configuration ID.
        """
        return pulumi.get(self, "role_configuration_id")

    @role_configuration_id.setter
    def role_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_configuration_id", value)

    @property
    @pulumi.getter(name="rolePolicyDocument")
    def role_policy_document(self) -> Optional[pulumi.Input[str]]:
        """
        Role policy document.
        """
        return pulumi.get(self, "role_policy_document")

    @role_policy_document.setter
    def role_policy_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_policy_document", value)

    @property
    @pulumi.getter(name="rolePolicyId")
    def role_policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        Role policy id.
        """
        return pulumi.get(self, "role_policy_id")

    @role_policy_id.setter
    def role_policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "role_policy_id", value)

    @property
    @pulumi.getter(name="rolePolicyName")
    def role_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Role policy name.
        """
        return pulumi.get(self, "role_policy_name")

    @role_policy_name.setter
    def role_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_policy_name", value)

    @property
    @pulumi.getter(name="rolePolicyType")
    def role_policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Role policy type.
        """
        return pulumi.get(self, "role_policy_type")

    @role_policy_type.setter
    def role_policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_policy_type", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class CenterRoleConfigurationPermissionPolicyAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 role_configuration_id: Optional[pulumi.Input[str]] = None,
                 role_policy_id: Optional[pulumi.Input[int]] = None,
                 role_policy_name: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization identity_center_role_configuration_permission_policy_attachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        identity_center_role_configuration_permission_policy_attachment = tencentcloud.identity.CenterRoleConfigurationPermissionPolicyAttachment("identityCenterRoleConfigurationPermissionPolicyAttachment",
            zone_id="z-xxxxxx",
            role_configuration_id="rc-xxxxxx",
            role_policy_id=xxxxxx)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization identity_center_role_configuration_permission_policy_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Identity/centerRoleConfigurationPermissionPolicyAttachment:CenterRoleConfigurationPermissionPolicyAttachment identity_center_role_configuration_permission_policy_attachment ${zoneId}#${roleConfigurationId}#${rolePolicyIdString}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[int] role_policy_id: Role policy id.
        :param pulumi.Input[str] role_policy_name: Role policy name.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CenterRoleConfigurationPermissionPolicyAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization identity_center_role_configuration_permission_policy_attachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        identity_center_role_configuration_permission_policy_attachment = tencentcloud.identity.CenterRoleConfigurationPermissionPolicyAttachment("identityCenterRoleConfigurationPermissionPolicyAttachment",
            zone_id="z-xxxxxx",
            role_configuration_id="rc-xxxxxx",
            role_policy_id=xxxxxx)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization identity_center_role_configuration_permission_policy_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Identity/centerRoleConfigurationPermissionPolicyAttachment:CenterRoleConfigurationPermissionPolicyAttachment identity_center_role_configuration_permission_policy_attachment ${zoneId}#${roleConfigurationId}#${rolePolicyIdString}
        ```

        :param str resource_name: The name of the resource.
        :param CenterRoleConfigurationPermissionPolicyAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CenterRoleConfigurationPermissionPolicyAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 role_configuration_id: Optional[pulumi.Input[str]] = None,
                 role_policy_id: Optional[pulumi.Input[int]] = None,
                 role_policy_name: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CenterRoleConfigurationPermissionPolicyAttachmentArgs.__new__(CenterRoleConfigurationPermissionPolicyAttachmentArgs)

            if role_configuration_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_configuration_id'")
            __props__.__dict__["role_configuration_id"] = role_configuration_id
            if role_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_policy_id'")
            __props__.__dict__["role_policy_id"] = role_policy_id
            __props__.__dict__["role_policy_name"] = role_policy_name
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["add_time"] = None
            __props__.__dict__["role_policy_document"] = None
            __props__.__dict__["role_policy_type"] = None
        super(CenterRoleConfigurationPermissionPolicyAttachment, __self__).__init__(
            'tencentcloud:Identity/centerRoleConfigurationPermissionPolicyAttachment:CenterRoleConfigurationPermissionPolicyAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_time: Optional[pulumi.Input[str]] = None,
            role_configuration_id: Optional[pulumi.Input[str]] = None,
            role_policy_document: Optional[pulumi.Input[str]] = None,
            role_policy_id: Optional[pulumi.Input[int]] = None,
            role_policy_name: Optional[pulumi.Input[str]] = None,
            role_policy_type: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'CenterRoleConfigurationPermissionPolicyAttachment':
        """
        Get an existing CenterRoleConfigurationPermissionPolicyAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_time: Role policy add time.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[str] role_policy_document: Role policy document.
        :param pulumi.Input[int] role_policy_id: Role policy id.
        :param pulumi.Input[str] role_policy_name: Role policy name.
        :param pulumi.Input[str] role_policy_type: Role policy type.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CenterRoleConfigurationPermissionPolicyAttachmentState.__new__(_CenterRoleConfigurationPermissionPolicyAttachmentState)

        __props__.__dict__["add_time"] = add_time
        __props__.__dict__["role_configuration_id"] = role_configuration_id
        __props__.__dict__["role_policy_document"] = role_policy_document
        __props__.__dict__["role_policy_id"] = role_policy_id
        __props__.__dict__["role_policy_name"] = role_policy_name
        __props__.__dict__["role_policy_type"] = role_policy_type
        __props__.__dict__["zone_id"] = zone_id
        return CenterRoleConfigurationPermissionPolicyAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> pulumi.Output[str]:
        """
        Role policy add time.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="roleConfigurationId")
    def role_configuration_id(self) -> pulumi.Output[str]:
        """
        Permission configuration ID.
        """
        return pulumi.get(self, "role_configuration_id")

    @property
    @pulumi.getter(name="rolePolicyDocument")
    def role_policy_document(self) -> pulumi.Output[str]:
        """
        Role policy document.
        """
        return pulumi.get(self, "role_policy_document")

    @property
    @pulumi.getter(name="rolePolicyId")
    def role_policy_id(self) -> pulumi.Output[int]:
        """
        Role policy id.
        """
        return pulumi.get(self, "role_policy_id")

    @property
    @pulumi.getter(name="rolePolicyName")
    def role_policy_name(self) -> pulumi.Output[str]:
        """
        Role policy name.
        """
        return pulumi.get(self, "role_policy_name")

    @property
    @pulumi.getter(name="rolePolicyType")
    def role_policy_type(self) -> pulumi.Output[str]:
        """
        Role policy type.
        """
        return pulumi.get(self, "role_policy_type")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

