# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CenterRoleConfigurationPermissionCustomPoliciesAttachmentArgs', 'CenterRoleConfigurationPermissionCustomPoliciesAttachment']

@pulumi.input_type
class CenterRoleConfigurationPermissionCustomPoliciesAttachmentArgs:
    def __init__(__self__, *,
                 policies: pulumi.Input[Sequence[pulumi.Input['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]],
                 role_configuration_id: pulumi.Input[str],
                 zone_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a CenterRoleConfigurationPermissionCustomPoliciesAttachment resource.
        :param pulumi.Input[Sequence[pulumi.Input['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]] policies: Policies.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        pulumi.set(__self__, "policies", policies)
        pulumi.set(__self__, "role_configuration_id", role_configuration_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Input[Sequence[pulumi.Input['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]]:
        """
        Policies.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: pulumi.Input[Sequence[pulumi.Input['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="roleConfigurationId")
    def role_configuration_id(self) -> pulumi.Input[str]:
        """
        Permission configuration ID.
        """
        return pulumi.get(self, "role_configuration_id")

    @role_configuration_id.setter
    def role_configuration_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_configuration_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class _CenterRoleConfigurationPermissionCustomPoliciesAttachmentState:
    def __init__(__self__, *,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]]] = None,
                 role_configuration_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CenterRoleConfigurationPermissionCustomPoliciesAttachment resources.
        :param pulumi.Input[Sequence[pulumi.Input['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]] policies: Policies.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if role_configuration_id is not None:
            pulumi.set(__self__, "role_configuration_id", role_configuration_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]]]:
        """
        Policies.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="roleConfigurationId")
    def role_configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        Permission configuration ID.
        """
        return pulumi.get(self, "role_configuration_id")

    @role_configuration_id.setter
    def role_configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_configuration_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class CenterRoleConfigurationPermissionCustomPoliciesAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]]]] = None,
                 role_configuration_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization Identity.CenterRoleConfigurationPermissionCustomPoliciesAttachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        identity_center_role_configuration_permission_custom_policies_attachment = tencentcloud.identity.CenterRoleConfigurationPermissionCustomPoliciesAttachment("identityCenterRoleConfigurationPermissionCustomPoliciesAttachment",
            zone_id="z-xxxxxx",
            role_configuration_id="rc-xxxxxx",
            policies=[
                tencentcloud.identity.CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs(
                    role_policy_name="CustomPolicy2",
                    role_policy_document=\"\"\"{
            "version": "2.0",
            "statement": [
                {
                    "effect": "allow",
                    "action": [
                        "vpc:AcceptAttachCcnInstances"
                    ],
                    "resource": [
                        "*"
                    ]
                }
            ]
        }
        \"\"\",
                ),
                tencentcloud.identity.CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs(
                    role_policy_name="CustomPolicy1",
                    role_policy_document=\"\"\"{
            "version": "2.0",
            "statement": [
                {
                    "effect": "allow",
                    "action": [
                        "vpc:AcceptAttachCcnInstances"
                    ],
                    "resource": [
                        "*"
                    ]
                }
            ]
        }
        \"\"\",
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization tencentcloud_identity_center_role_configuration_permission_custom_policies_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Identity/centerRoleConfigurationPermissionCustomPoliciesAttachment:CenterRoleConfigurationPermissionCustomPoliciesAttachment identity_center_role_configuration_permission_custom_policies_attachment ${zoneId}#${roleConfigurationId}#${rolePolicyName1},...${rolePolicyNameN}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]]] policies: Policies.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CenterRoleConfigurationPermissionCustomPoliciesAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization Identity.CenterRoleConfigurationPermissionCustomPoliciesAttachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        identity_center_role_configuration_permission_custom_policies_attachment = tencentcloud.identity.CenterRoleConfigurationPermissionCustomPoliciesAttachment("identityCenterRoleConfigurationPermissionCustomPoliciesAttachment",
            zone_id="z-xxxxxx",
            role_configuration_id="rc-xxxxxx",
            policies=[
                tencentcloud.identity.CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs(
                    role_policy_name="CustomPolicy2",
                    role_policy_document=\"\"\"{
            "version": "2.0",
            "statement": [
                {
                    "effect": "allow",
                    "action": [
                        "vpc:AcceptAttachCcnInstances"
                    ],
                    "resource": [
                        "*"
                    ]
                }
            ]
        }
        \"\"\",
                ),
                tencentcloud.identity.CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs(
                    role_policy_name="CustomPolicy1",
                    role_policy_document=\"\"\"{
            "version": "2.0",
            "statement": [
                {
                    "effect": "allow",
                    "action": [
                        "vpc:AcceptAttachCcnInstances"
                    ],
                    "resource": [
                        "*"
                    ]
                }
            ]
        }
        \"\"\",
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization tencentcloud_identity_center_role_configuration_permission_custom_policies_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Identity/centerRoleConfigurationPermissionCustomPoliciesAttachment:CenterRoleConfigurationPermissionCustomPoliciesAttachment identity_center_role_configuration_permission_custom_policies_attachment ${zoneId}#${roleConfigurationId}#${rolePolicyName1},...${rolePolicyNameN}
        ```

        :param str resource_name: The name of the resource.
        :param CenterRoleConfigurationPermissionCustomPoliciesAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CenterRoleConfigurationPermissionCustomPoliciesAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]]]] = None,
                 role_configuration_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CenterRoleConfigurationPermissionCustomPoliciesAttachmentArgs.__new__(CenterRoleConfigurationPermissionCustomPoliciesAttachmentArgs)

            if policies is None and not opts.urn:
                raise TypeError("Missing required property 'policies'")
            __props__.__dict__["policies"] = policies
            if role_configuration_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_configuration_id'")
            __props__.__dict__["role_configuration_id"] = role_configuration_id
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
        super(CenterRoleConfigurationPermissionCustomPoliciesAttachment, __self__).__init__(
            'tencentcloud:Identity/centerRoleConfigurationPermissionCustomPoliciesAttachment:CenterRoleConfigurationPermissionCustomPoliciesAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]]]] = None,
            role_configuration_id: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'CenterRoleConfigurationPermissionCustomPoliciesAttachment':
        """
        Get an existing CenterRoleConfigurationPermissionCustomPoliciesAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicyArgs']]]] policies: Policies.
        :param pulumi.Input[str] role_configuration_id: Permission configuration ID.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CenterRoleConfigurationPermissionCustomPoliciesAttachmentState.__new__(_CenterRoleConfigurationPermissionCustomPoliciesAttachmentState)

        __props__.__dict__["policies"] = policies
        __props__.__dict__["role_configuration_id"] = role_configuration_id
        __props__.__dict__["zone_id"] = zone_id
        return CenterRoleConfigurationPermissionCustomPoliciesAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Sequence['outputs.CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicy']]:
        """
        Policies.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="roleConfigurationId")
    def role_configuration_id(self) -> pulumi.Output[str]:
        """
        Permission configuration ID.
        """
        return pulumi.get(self, "role_configuration_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

