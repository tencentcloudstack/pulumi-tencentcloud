# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CenterExternalSamlIdentityProviderArgs', 'CenterExternalSamlIdentityProvider']

@pulumi.input_type
class CenterExternalSamlIdentityProviderArgs:
    def __init__(__self__, *,
                 zone_id: pulumi.Input[str],
                 encoded_metadata_document: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 login_url: Optional[pulumi.Input[str]] = None,
                 sso_status: Optional[pulumi.Input[str]] = None,
                 x509_certificate: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CenterExternalSamlIdentityProvider resource.
        :param pulumi.Input[str] zone_id: Space ID.
        :param pulumi.Input[str] encoded_metadata_document: IdP metadata document (Base64 encoded). Provided by an IdP that supports the SAML 2.0 protocol.
        :param pulumi.Input[str] entity_id: IdP identifier.
        :param pulumi.Input[str] login_url: IdP login URL.
        :param pulumi.Input[str] sso_status: SSO enabling status. Valid values: Enabled, Disabled (default).
        :param pulumi.Input[str] x509_certificate: X509 certificate in PEM format. If this parameter is specified, all existing certificates will be replaced.
        """
        pulumi.set(__self__, "zone_id", zone_id)
        if encoded_metadata_document is not None:
            pulumi.set(__self__, "encoded_metadata_document", encoded_metadata_document)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if login_url is not None:
            pulumi.set(__self__, "login_url", login_url)
        if sso_status is not None:
            pulumi.set(__self__, "sso_status", sso_status)
        if x509_certificate is not None:
            pulumi.set(__self__, "x509_certificate", x509_certificate)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="encodedMetadataDocument")
    def encoded_metadata_document(self) -> Optional[pulumi.Input[str]]:
        """
        IdP metadata document (Base64 encoded). Provided by an IdP that supports the SAML 2.0 protocol.
        """
        return pulumi.get(self, "encoded_metadata_document")

    @encoded_metadata_document.setter
    def encoded_metadata_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoded_metadata_document", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        IdP identifier.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> Optional[pulumi.Input[str]]:
        """
        IdP login URL.
        """
        return pulumi.get(self, "login_url")

    @login_url.setter
    def login_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_url", value)

    @property
    @pulumi.getter(name="ssoStatus")
    def sso_status(self) -> Optional[pulumi.Input[str]]:
        """
        SSO enabling status. Valid values: Enabled, Disabled (default).
        """
        return pulumi.get(self, "sso_status")

    @sso_status.setter
    def sso_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_status", value)

    @property
    @pulumi.getter(name="x509Certificate")
    def x509_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        X509 certificate in PEM format. If this parameter is specified, all existing certificates will be replaced.
        """
        return pulumi.get(self, "x509_certificate")

    @x509_certificate.setter
    def x509_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x509_certificate", value)


@pulumi.input_type
class _CenterExternalSamlIdentityProviderState:
    def __init__(__self__, *,
                 acs_url: Optional[pulumi.Input[str]] = None,
                 certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 encoded_metadata_document: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 login_url: Optional[pulumi.Input[str]] = None,
                 sso_status: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 x509_certificate: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CenterExternalSamlIdentityProvider resources.
        :param pulumi.Input[str] acs_url: Acs url.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificate_ids: Certificate ids.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] encoded_metadata_document: IdP metadata document (Base64 encoded). Provided by an IdP that supports the SAML 2.0 protocol.
        :param pulumi.Input[str] entity_id: IdP identifier.
        :param pulumi.Input[str] login_url: IdP login URL.
        :param pulumi.Input[str] sso_status: SSO enabling status. Valid values: Enabled, Disabled (default).
        :param pulumi.Input[str] update_time: Update time.
        :param pulumi.Input[str] x509_certificate: X509 certificate in PEM format. If this parameter is specified, all existing certificates will be replaced.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        if acs_url is not None:
            pulumi.set(__self__, "acs_url", acs_url)
        if certificate_ids is not None:
            pulumi.set(__self__, "certificate_ids", certificate_ids)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if encoded_metadata_document is not None:
            pulumi.set(__self__, "encoded_metadata_document", encoded_metadata_document)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if login_url is not None:
            pulumi.set(__self__, "login_url", login_url)
        if sso_status is not None:
            pulumi.set(__self__, "sso_status", sso_status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if x509_certificate is not None:
            pulumi.set(__self__, "x509_certificate", x509_certificate)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="acsUrl")
    def acs_url(self) -> Optional[pulumi.Input[str]]:
        """
        Acs url.
        """
        return pulumi.get(self, "acs_url")

    @acs_url.setter
    def acs_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acs_url", value)

    @property
    @pulumi.getter(name="certificateIds")
    def certificate_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Certificate ids.
        """
        return pulumi.get(self, "certificate_ids")

    @certificate_ids.setter
    def certificate_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificate_ids", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="encodedMetadataDocument")
    def encoded_metadata_document(self) -> Optional[pulumi.Input[str]]:
        """
        IdP metadata document (Base64 encoded). Provided by an IdP that supports the SAML 2.0 protocol.
        """
        return pulumi.get(self, "encoded_metadata_document")

    @encoded_metadata_document.setter
    def encoded_metadata_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoded_metadata_document", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        IdP identifier.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> Optional[pulumi.Input[str]]:
        """
        IdP login URL.
        """
        return pulumi.get(self, "login_url")

    @login_url.setter
    def login_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_url", value)

    @property
    @pulumi.getter(name="ssoStatus")
    def sso_status(self) -> Optional[pulumi.Input[str]]:
        """
        SSO enabling status. Valid values: Enabled, Disabled (default).
        """
        return pulumi.get(self, "sso_status")

    @sso_status.setter
    def sso_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_status", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="x509Certificate")
    def x509_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        X509 certificate in PEM format. If this parameter is specified, all existing certificates will be replaced.
        """
        return pulumi.get(self, "x509_certificate")

    @x509_certificate.setter
    def x509_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x509_certificate", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class CenterExternalSamlIdentityProvider(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encoded_metadata_document: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 login_url: Optional[pulumi.Input[str]] = None,
                 sso_status: Optional[pulumi.Input[str]] = None,
                 x509_certificate: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization identity_center_external_saml_identity_provider

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        identity_center_external_saml_identity_provider = tencentcloud.identity.CenterExternalSamlIdentityProvider("identityCenterExternalSamlIdentityProvider",
            sso_status="Enabled",
            zone_id="z-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization identity_center_external_saml_identity_provider can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Identity/centerExternalSamlIdentityProvider:CenterExternalSamlIdentityProvider identity_center_external_saml_identity_provider ${zoneId}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] encoded_metadata_document: IdP metadata document (Base64 encoded). Provided by an IdP that supports the SAML 2.0 protocol.
        :param pulumi.Input[str] entity_id: IdP identifier.
        :param pulumi.Input[str] login_url: IdP login URL.
        :param pulumi.Input[str] sso_status: SSO enabling status. Valid values: Enabled, Disabled (default).
        :param pulumi.Input[str] x509_certificate: X509 certificate in PEM format. If this parameter is specified, all existing certificates will be replaced.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CenterExternalSamlIdentityProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization identity_center_external_saml_identity_provider

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        identity_center_external_saml_identity_provider = tencentcloud.identity.CenterExternalSamlIdentityProvider("identityCenterExternalSamlIdentityProvider",
            sso_status="Enabled",
            zone_id="z-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization identity_center_external_saml_identity_provider can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Identity/centerExternalSamlIdentityProvider:CenterExternalSamlIdentityProvider identity_center_external_saml_identity_provider ${zoneId}
        ```

        :param str resource_name: The name of the resource.
        :param CenterExternalSamlIdentityProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CenterExternalSamlIdentityProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encoded_metadata_document: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 login_url: Optional[pulumi.Input[str]] = None,
                 sso_status: Optional[pulumi.Input[str]] = None,
                 x509_certificate: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CenterExternalSamlIdentityProviderArgs.__new__(CenterExternalSamlIdentityProviderArgs)

            __props__.__dict__["encoded_metadata_document"] = encoded_metadata_document
            __props__.__dict__["entity_id"] = entity_id
            __props__.__dict__["login_url"] = login_url
            __props__.__dict__["sso_status"] = sso_status
            __props__.__dict__["x509_certificate"] = x509_certificate
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["acs_url"] = None
            __props__.__dict__["certificate_ids"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(CenterExternalSamlIdentityProvider, __self__).__init__(
            'tencentcloud:Identity/centerExternalSamlIdentityProvider:CenterExternalSamlIdentityProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acs_url: Optional[pulumi.Input[str]] = None,
            certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            encoded_metadata_document: Optional[pulumi.Input[str]] = None,
            entity_id: Optional[pulumi.Input[str]] = None,
            login_url: Optional[pulumi.Input[str]] = None,
            sso_status: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            x509_certificate: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'CenterExternalSamlIdentityProvider':
        """
        Get an existing CenterExternalSamlIdentityProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acs_url: Acs url.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificate_ids: Certificate ids.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] encoded_metadata_document: IdP metadata document (Base64 encoded). Provided by an IdP that supports the SAML 2.0 protocol.
        :param pulumi.Input[str] entity_id: IdP identifier.
        :param pulumi.Input[str] login_url: IdP login URL.
        :param pulumi.Input[str] sso_status: SSO enabling status. Valid values: Enabled, Disabled (default).
        :param pulumi.Input[str] update_time: Update time.
        :param pulumi.Input[str] x509_certificate: X509 certificate in PEM format. If this parameter is specified, all existing certificates will be replaced.
        :param pulumi.Input[str] zone_id: Space ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CenterExternalSamlIdentityProviderState.__new__(_CenterExternalSamlIdentityProviderState)

        __props__.__dict__["acs_url"] = acs_url
        __props__.__dict__["certificate_ids"] = certificate_ids
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["encoded_metadata_document"] = encoded_metadata_document
        __props__.__dict__["entity_id"] = entity_id
        __props__.__dict__["login_url"] = login_url
        __props__.__dict__["sso_status"] = sso_status
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["x509_certificate"] = x509_certificate
        __props__.__dict__["zone_id"] = zone_id
        return CenterExternalSamlIdentityProvider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acsUrl")
    def acs_url(self) -> pulumi.Output[str]:
        """
        Acs url.
        """
        return pulumi.get(self, "acs_url")

    @property
    @pulumi.getter(name="certificateIds")
    def certificate_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Certificate ids.
        """
        return pulumi.get(self, "certificate_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="encodedMetadataDocument")
    def encoded_metadata_document(self) -> pulumi.Output[str]:
        """
        IdP metadata document (Base64 encoded). Provided by an IdP that supports the SAML 2.0 protocol.
        """
        return pulumi.get(self, "encoded_metadata_document")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Output[str]:
        """
        IdP identifier.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="loginUrl")
    def login_url(self) -> pulumi.Output[str]:
        """
        IdP login URL.
        """
        return pulumi.get(self, "login_url")

    @property
    @pulumi.getter(name="ssoStatus")
    def sso_status(self) -> pulumi.Output[str]:
        """
        SSO enabling status. Valid values: Enabled, Disabled (default).
        """
        return pulumi.get(self, "sso_status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="x509Certificate")
    def x509_certificate(self) -> pulumi.Output[str]:
        """
        X509 certificate in PEM format. If this parameter is specified, all existing certificates will be replaced.
        """
        return pulumi.get(self, "x509_certificate")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Space ID.
        """
        return pulumi.get(self, "zone_id")

