# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicy',
    'GetCenterGroupsGroupResult',
    'GetCenterRoleConfigurationsRoleConfigurationResult',
    'GetCenterUsersUserResult',
]

@pulumi.output_type
class CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rolePolicyDocument":
            suggest = "role_policy_document"
        elif key == "rolePolicyName":
            suggest = "role_policy_name"
        elif key == "addTime":
            suggest = "add_time"
        elif key == "rolePolicyType":
            suggest = "role_policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CenterRoleConfigurationPermissionCustomPoliciesAttachmentPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_policy_document: str,
                 role_policy_name: str,
                 add_time: Optional[str] = None,
                 role_policy_type: Optional[str] = None):
        """
        :param str role_policy_document: Role policy document.
        :param str role_policy_name: Role policy name.
        :param str add_time: Role policy add time.
        :param str role_policy_type: Role policy type.
        """
        pulumi.set(__self__, "role_policy_document", role_policy_document)
        pulumi.set(__self__, "role_policy_name", role_policy_name)
        if add_time is not None:
            pulumi.set(__self__, "add_time", add_time)
        if role_policy_type is not None:
            pulumi.set(__self__, "role_policy_type", role_policy_type)

    @property
    @pulumi.getter(name="rolePolicyDocument")
    def role_policy_document(self) -> str:
        """
        Role policy document.
        """
        return pulumi.get(self, "role_policy_document")

    @property
    @pulumi.getter(name="rolePolicyName")
    def role_policy_name(self) -> str:
        """
        Role policy name.
        """
        return pulumi.get(self, "role_policy_name")

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> Optional[str]:
        """
        Role policy add time.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="rolePolicyType")
    def role_policy_type(self) -> Optional[str]:
        """
        Role policy type.
        """
        return pulumi.get(self, "role_policy_type")


@pulumi.output_type
class GetCenterGroupsGroupResult(dict):
    def __init__(__self__, *,
                 create_time: Optional[str] = None,
                 description: Optional[str] = None,
                 group_id: Optional[str] = None,
                 group_name: Optional[str] = None,
                 group_type: Optional[str] = None,
                 is_selected: Optional[bool] = None,
                 member_count: Optional[int] = None,
                 update_time: Optional[str] = None):
        """
        :param str create_time: Creation time of the user group.
        :param str description: User group description.
        :param str group_id: User group ID.
        :param str group_name: User group name.
        :param str group_type: User group type. Manual: manually created; Synchronized: externally imported.
        :param bool is_selected: If the input parameter FilterUsers is provided, return true when the user is in the user group; otherwise, return false.
        :param int member_count: Number of group members.
        :param str update_time: Modification time of the user group.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if is_selected is not None:
            pulumi.set(__self__, "is_selected", is_selected)
        if member_count is not None:
            pulumi.set(__self__, "member_count", member_count)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Creation time of the user group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User group description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        User group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        User group name.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[str]:
        """
        User group type. Manual: manually created; Synchronized: externally imported.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter(name="isSelected")
    def is_selected(self) -> Optional[bool]:
        """
        If the input parameter FilterUsers is provided, return true when the user is in the user group; otherwise, return false.
        """
        return pulumi.get(self, "is_selected")

    @property
    @pulumi.getter(name="memberCount")
    def member_count(self) -> Optional[int]:
        """
        Number of group members.
        """
        return pulumi.get(self, "member_count")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Modification time of the user group.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetCenterRoleConfigurationsRoleConfigurationResult(dict):
    def __init__(__self__, *,
                 create_time: Optional[str] = None,
                 description: Optional[str] = None,
                 is_selected: Optional[bool] = None,
                 relay_state: Optional[str] = None,
                 role_configuration_id: Optional[str] = None,
                 role_configuration_name: Optional[str] = None,
                 session_duration: Optional[int] = None,
                 update_time: Optional[str] = None):
        """
        :param str create_time: Creation time of the permission configuration.
        :param str description: Permission configuration description.
        :param bool is_selected: If the input parameter FilterTargets is provided, check whether the member account has been configured with permissions. If configured, return true; otherwise, return false.
        :param str relay_state: Initial access page. It indicates the initial access page URL when CIC users use the access configuration to access member accounts.
        :param str role_configuration_id: Permission configuration ID.
        :param str role_configuration_name: Permission configuration name.
        :param int session_duration: Session duration. It indicates the maximum session duration when CIC users use the access configuration to access member accounts.
               Unit: seconds.
        :param str update_time: Update time of the permission configuration.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_selected is not None:
            pulumi.set(__self__, "is_selected", is_selected)
        if relay_state is not None:
            pulumi.set(__self__, "relay_state", relay_state)
        if role_configuration_id is not None:
            pulumi.set(__self__, "role_configuration_id", role_configuration_id)
        if role_configuration_name is not None:
            pulumi.set(__self__, "role_configuration_name", role_configuration_name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Creation time of the permission configuration.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Permission configuration description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isSelected")
    def is_selected(self) -> Optional[bool]:
        """
        If the input parameter FilterTargets is provided, check whether the member account has been configured with permissions. If configured, return true; otherwise, return false.
        """
        return pulumi.get(self, "is_selected")

    @property
    @pulumi.getter(name="relayState")
    def relay_state(self) -> Optional[str]:
        """
        Initial access page. It indicates the initial access page URL when CIC users use the access configuration to access member accounts.
        """
        return pulumi.get(self, "relay_state")

    @property
    @pulumi.getter(name="roleConfigurationId")
    def role_configuration_id(self) -> Optional[str]:
        """
        Permission configuration ID.
        """
        return pulumi.get(self, "role_configuration_id")

    @property
    @pulumi.getter(name="roleConfigurationName")
    def role_configuration_name(self) -> Optional[str]:
        """
        Permission configuration name.
        """
        return pulumi.get(self, "role_configuration_name")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        """
        Session duration. It indicates the maximum session duration when CIC users use the access configuration to access member accounts.
        Unit: seconds.
        """
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Update time of the permission configuration.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetCenterUsersUserResult(dict):
    def __init__(__self__, *,
                 create_time: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 is_selected: Optional[bool] = None,
                 last_name: Optional[str] = None,
                 update_time: Optional[str] = None,
                 user_id: Optional[str] = None,
                 user_name: Optional[str] = None,
                 user_status: Optional[str] = None,
                 user_type: Optional[str] = None):
        """
        :param str create_time: Creation time of the user.
        :param str description: User description.
        :param str display_name: Display name of the user.
        :param str email: Email address of the user, which must be unique within the directory.
        :param str first_name: First name of the user.
        :param bool is_selected: Whether selected.
        :param str last_name: Last name of the user.
        :param str update_time: Modification time of the user.
        :param str user_id: User ID.
        :param str user_name: Queried username.
        :param str user_status: User status: Enabled, Disabled.
        :param str user_type: User type. Manual: manually created; Synchronized: externally imported.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if is_selected is not None:
            pulumi.set(__self__, "is_selected", is_selected)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_status is not None:
            pulumi.set(__self__, "user_status", user_status)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Creation time of the user.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        User description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name of the user.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email address of the user, which must be unique within the directory.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        """
        First name of the user.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="isSelected")
    def is_selected(self) -> Optional[bool]:
        """
        Whether selected.
        """
        return pulumi.get(self, "is_selected")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        """
        Last name of the user.
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Modification time of the user.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        Queried username.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="userStatus")
    def user_status(self) -> Optional[str]:
        """
        User status: Enabled, Disabled.
        """
        return pulumi.get(self, "user_status")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[str]:
        """
        User type. Manual: manually created; Synchronized: externally imported.
        """
        return pulumi.get(self, "user_type")


