# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCenterUsersResult',
    'AwaitableGetCenterUsersResult',
    'get_center_users',
    'get_center_users_output',
]

@pulumi.output_type
class GetCenterUsersResult:
    """
    A collection of values returned by getCenterUsers.
    """
    def __init__(__self__, filter=None, filter_groups=None, id=None, result_output_file=None, sort_field=None, sort_type=None, user_status=None, user_type=None, users=None, zone_id=None):
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if filter_groups and not isinstance(filter_groups, list):
            raise TypeError("Expected argument 'filter_groups' to be a list")
        pulumi.set(__self__, "filter_groups", filter_groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if sort_field and not isinstance(sort_field, str):
            raise TypeError("Expected argument 'sort_field' to be a str")
        pulumi.set(__self__, "sort_field", sort_field)
        if sort_type and not isinstance(sort_type, str):
            raise TypeError("Expected argument 'sort_type' to be a str")
        pulumi.set(__self__, "sort_type", sort_type)
        if user_status and not isinstance(user_status, str):
            raise TypeError("Expected argument 'user_status' to be a str")
        pulumi.set(__self__, "user_status", user_status)
        if user_type and not isinstance(user_type, str):
            raise TypeError("Expected argument 'user_type' to be a str")
        pulumi.set(__self__, "user_type", user_type)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filter_groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="sortField")
    def sort_field(self) -> Optional[str]:
        return pulumi.get(self, "sort_field")

    @property
    @pulumi.getter(name="sortType")
    def sort_type(self) -> Optional[str]:
        return pulumi.get(self, "sort_type")

    @property
    @pulumi.getter(name="userStatus")
    def user_status(self) -> Optional[str]:
        return pulumi.get(self, "user_status")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[str]:
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetCenterUsersUserResult']:
        """
        User list.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


class AwaitableGetCenterUsersResult(GetCenterUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCenterUsersResult(
            filter=self.filter,
            filter_groups=self.filter_groups,
            id=self.id,
            result_output_file=self.result_output_file,
            sort_field=self.sort_field,
            sort_type=self.sort_type,
            user_status=self.user_status,
            user_type=self.user_type,
            users=self.users,
            zone_id=self.zone_id)


def get_center_users(filter: Optional[str] = None,
                     filter_groups: Optional[Sequence[str]] = None,
                     result_output_file: Optional[str] = None,
                     sort_field: Optional[str] = None,
                     sort_type: Optional[str] = None,
                     user_status: Optional[str] = None,
                     user_type: Optional[str] = None,
                     zone_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCenterUsersResult:
    """
    Use this data source to query detailed information of identity center users

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    identity_center_users = tencentcloud.Identity.get_center_users(zone_id="z-xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str filter: Filter criterion, which currently only supports username, email address, userId, and description.
    :param Sequence[str] filter_groups: Filtered user group. IsSelected=1 will be returned for the sub-user associated with this user group.
    :param str result_output_file: Used to save results.
    :param str sort_field: Sorting field, which currently only supports CreateTime. The default is the CreateTime field.
    :param str sort_type: Sorting type. Desc: descending order; Asc: ascending order. It should be set along with SortField.
    :param str user_status: User status: Enabled, Disabled.
    :param str user_type: User type. Manual: manually created; Synchronized: externally imported.
    :param str zone_id: Space ID.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['filterGroups'] = filter_groups
    __args__['resultOutputFile'] = result_output_file
    __args__['sortField'] = sort_field
    __args__['sortType'] = sort_type
    __args__['userStatus'] = user_status
    __args__['userType'] = user_type
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Identity/getCenterUsers:getCenterUsers', __args__, opts=opts, typ=GetCenterUsersResult).value

    return AwaitableGetCenterUsersResult(
        filter=pulumi.get(__ret__, 'filter'),
        filter_groups=pulumi.get(__ret__, 'filter_groups'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        sort_field=pulumi.get(__ret__, 'sort_field'),
        sort_type=pulumi.get(__ret__, 'sort_type'),
        user_status=pulumi.get(__ret__, 'user_status'),
        user_type=pulumi.get(__ret__, 'user_type'),
        users=pulumi.get(__ret__, 'users'),
        zone_id=pulumi.get(__ret__, 'zone_id'))


@_utilities.lift_output_func(get_center_users)
def get_center_users_output(filter: Optional[pulumi.Input[Optional[str]]] = None,
                            filter_groups: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            sort_field: Optional[pulumi.Input[Optional[str]]] = None,
                            sort_type: Optional[pulumi.Input[Optional[str]]] = None,
                            user_status: Optional[pulumi.Input[Optional[str]]] = None,
                            user_type: Optional[pulumi.Input[Optional[str]]] = None,
                            zone_id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCenterUsersResult]:
    """
    Use this data source to query detailed information of identity center users

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    identity_center_users = tencentcloud.Identity.get_center_users(zone_id="z-xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str filter: Filter criterion, which currently only supports username, email address, userId, and description.
    :param Sequence[str] filter_groups: Filtered user group. IsSelected=1 will be returned for the sub-user associated with this user group.
    :param str result_output_file: Used to save results.
    :param str sort_field: Sorting field, which currently only supports CreateTime. The default is the CreateTime field.
    :param str sort_type: Sorting type. Desc: descending order; Asc: ascending order. It should be set along with SortField.
    :param str user_status: User status: Enabled, Disabled.
    :param str user_type: User type. Manual: manually created; Synchronized: externally imported.
    :param str zone_id: Space ID.
    """
    ...
