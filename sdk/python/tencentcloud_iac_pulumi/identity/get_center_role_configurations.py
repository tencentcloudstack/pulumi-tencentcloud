# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCenterRoleConfigurationsResult',
    'AwaitableGetCenterRoleConfigurationsResult',
    'get_center_role_configurations',
    'get_center_role_configurations_output',
]

@pulumi.output_type
class GetCenterRoleConfigurationsResult:
    """
    A collection of values returned by getCenterRoleConfigurations.
    """
    def __init__(__self__, filter=None, filter_targets=None, id=None, principal_id=None, result_output_file=None, role_configurations=None, zone_id=None):
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if filter_targets and not isinstance(filter_targets, list):
            raise TypeError("Expected argument 'filter_targets' to be a list")
        pulumi.set(__self__, "filter_targets", filter_targets)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if principal_id and not isinstance(principal_id, str):
            raise TypeError("Expected argument 'principal_id' to be a str")
        pulumi.set(__self__, "principal_id", principal_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if role_configurations and not isinstance(role_configurations, list):
            raise TypeError("Expected argument 'role_configurations' to be a list")
        pulumi.set(__self__, "role_configurations", role_configurations)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="filterTargets")
    def filter_targets(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "filter_targets")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[str]:
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="roleConfigurations")
    def role_configurations(self) -> Sequence['outputs.GetCenterRoleConfigurationsRoleConfigurationResult']:
        """
        Permission configuration list.
        """
        return pulumi.get(self, "role_configurations")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


class AwaitableGetCenterRoleConfigurationsResult(GetCenterRoleConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCenterRoleConfigurationsResult(
            filter=self.filter,
            filter_targets=self.filter_targets,
            id=self.id,
            principal_id=self.principal_id,
            result_output_file=self.result_output_file,
            role_configurations=self.role_configurations,
            zone_id=self.zone_id)


def get_center_role_configurations(filter: Optional[str] = None,
                                   filter_targets: Optional[Sequence[int]] = None,
                                   principal_id: Optional[str] = None,
                                   result_output_file: Optional[str] = None,
                                   zone_id: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCenterRoleConfigurationsResult:
    """
    Use this data source to query detailed information of identity center role configurations

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    identity_center_role_configurations = tencentcloud.Identity.get_center_role_configurations(zone_id="z-xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str filter: Filter criteria, which are case insensitive. Currently, only RoleConfigurationName is supported and only eq (Equals) and sw (Start With) are supported. Example: Filter = "RoleConfigurationName, only sw test" means querying all permission configurations starting with test. Filter = "RoleConfigurationName, only eq TestRoleConfiguration" means querying the permission configuration named TestRoleConfiguration.
    :param Sequence[int] filter_targets: Check whether the member account has been configured with permissions. If configured, return IsSelected: true; otherwise, return false.
    :param str principal_id: UserId of the authorized user or GroupId of the authorized user group, which must be set together with the input parameter FilterTargets.
    :param str result_output_file: Used to save results.
    :param str zone_id: Space ID.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['filterTargets'] = filter_targets
    __args__['principalId'] = principal_id
    __args__['resultOutputFile'] = result_output_file
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Identity/getCenterRoleConfigurations:getCenterRoleConfigurations', __args__, opts=opts, typ=GetCenterRoleConfigurationsResult).value

    return AwaitableGetCenterRoleConfigurationsResult(
        filter=pulumi.get(__ret__, 'filter'),
        filter_targets=pulumi.get(__ret__, 'filter_targets'),
        id=pulumi.get(__ret__, 'id'),
        principal_id=pulumi.get(__ret__, 'principal_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        role_configurations=pulumi.get(__ret__, 'role_configurations'),
        zone_id=pulumi.get(__ret__, 'zone_id'))


@_utilities.lift_output_func(get_center_role_configurations)
def get_center_role_configurations_output(filter: Optional[pulumi.Input[Optional[str]]] = None,
                                          filter_targets: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                                          principal_id: Optional[pulumi.Input[Optional[str]]] = None,
                                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                          zone_id: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCenterRoleConfigurationsResult]:
    """
    Use this data source to query detailed information of identity center role configurations

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    identity_center_role_configurations = tencentcloud.Identity.get_center_role_configurations(zone_id="z-xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str filter: Filter criteria, which are case insensitive. Currently, only RoleConfigurationName is supported and only eq (Equals) and sw (Start With) are supported. Example: Filter = "RoleConfigurationName, only sw test" means querying all permission configurations starting with test. Filter = "RoleConfigurationName, only eq TestRoleConfiguration" means querying the permission configuration named TestRoleConfiguration.
    :param Sequence[int] filter_targets: Check whether the member account has been configured with permissions. If configured, return IsSelected: true; otherwise, return false.
    :param str principal_id: UserId of the authorized user or GroupId of the authorized user group, which must be set together with the input parameter FilterTargets.
    :param str result_output_file: Used to save results.
    :param str zone_id: Space ID.
    """
    ...
