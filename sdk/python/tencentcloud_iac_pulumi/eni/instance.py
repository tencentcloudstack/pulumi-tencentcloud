# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 ipv4_count: Optional[pulumi.Input[int]] = None,
                 ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpv4Args']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] subnet_id: ID of the subnet within this vpc.
        :param pulumi.Input[str] vpc_id: ID of the vpc.
        :param pulumi.Input[str] description: Description of the IP, maximum length 25.
        :param pulumi.Input[int] ipv4_count: The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary intranet IPs, which conflict with `ipv4s`.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceIpv4Args']]] ipv4s: Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
        :param pulumi.Input[str] name: Name of the ENI, maximum length 60.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A set of security group IDs.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the ENI.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ipv4_count is not None:
            pulumi.set(__self__, "ipv4_count", ipv4_count)
        if ipv4s is not None:
            pulumi.set(__self__, "ipv4s", ipv4s)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        ID of the subnet within this vpc.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the IP, maximum length 25.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipv4Count")
    def ipv4_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary intranet IPs, which conflict with `ipv4s`.
        """
        return pulumi.get(self, "ipv4_count")

    @ipv4_count.setter
    def ipv4_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv4_count", value)

    @property
    @pulumi.getter
    def ipv4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpv4Args']]]]:
        """
        Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
        """
        return pulumi.get(self, "ipv4s")

    @ipv4s.setter
    def ipv4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpv4Args']]]]):
        pulumi.set(self, "ipv4s", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ENI, maximum length 60.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of security group IDs.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of the ENI.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ipv4_count: Optional[pulumi.Input[int]] = None,
                 ipv4_infos: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpv4InfoArgs']]]] = None,
                 ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpv4Args']]]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] cdc_id: CDC instance ID.
        :param pulumi.Input[str] create_time: Creation time of the ENI.
        :param pulumi.Input[str] description: Description of the IP, maximum length 25.
        :param pulumi.Input[int] ipv4_count: The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary intranet IPs, which conflict with `ipv4s`.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceIpv4InfoArgs']]] ipv4_infos: An information list of IPv4s. Each element contains the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input['InstanceIpv4Args']]] ipv4s: Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
        :param pulumi.Input[str] mac: MAC address.
        :param pulumi.Input[str] name: Name of the ENI, maximum length 60.
        :param pulumi.Input[bool] primary: Indicates whether the IP is primary.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A set of security group IDs.
        :param pulumi.Input[str] state: State of the ENI.
        :param pulumi.Input[str] subnet_id: ID of the subnet within this vpc.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the ENI.
        :param pulumi.Input[str] vpc_id: ID of the vpc.
        """
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ipv4_count is not None:
            pulumi.set(__self__, "ipv4_count", ipv4_count)
        if ipv4_infos is not None:
            pulumi.set(__self__, "ipv4_infos", ipv4_infos)
        if ipv4s is not None:
            pulumi.set(__self__, "ipv4s", ipv4s)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        CDC instance ID.
        """
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of the ENI.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the IP, maximum length 25.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipv4Count")
    def ipv4_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary intranet IPs, which conflict with `ipv4s`.
        """
        return pulumi.get(self, "ipv4_count")

    @ipv4_count.setter
    def ipv4_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv4_count", value)

    @property
    @pulumi.getter(name="ipv4Infos")
    def ipv4_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpv4InfoArgs']]]]:
        """
        An information list of IPv4s. Each element contains the following attributes:
        """
        return pulumi.get(self, "ipv4_infos")

    @ipv4_infos.setter
    def ipv4_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpv4InfoArgs']]]]):
        pulumi.set(self, "ipv4_infos", value)

    @property
    @pulumi.getter
    def ipv4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpv4Args']]]]:
        """
        Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
        """
        return pulumi.get(self, "ipv4s")

    @ipv4s.setter
    def ipv4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpv4Args']]]]):
        pulumi.set(self, "ipv4s", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the ENI, maximum length 60.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the IP is primary.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of security group IDs.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the ENI.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the subnet within this vpc.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of the ENI.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ipv4_count: Optional[pulumi.Input[int]] = None,
                 ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceIpv4Args']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create an ENI.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="vpc")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        example1 = tencentcloud.security.Group("example1",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        example2 = tencentcloud.security.Group("example2",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        example = tencentcloud.eni.Instance("example",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            description="eni desc.",
            ipv4_count=1,
            security_groups=[
                example1.id,
                example2.id,
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ENI can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Eni/instance:Instance tencentcloud_eni.foo eni-qka182br
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the IP, maximum length 25.
        :param pulumi.Input[int] ipv4_count: The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary intranet IPs, which conflict with `ipv4s`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceIpv4Args']]]] ipv4s: Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
        :param pulumi.Input[str] name: Name of the ENI, maximum length 60.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A set of security group IDs.
        :param pulumi.Input[str] subnet_id: ID of the subnet within this vpc.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the ENI.
        :param pulumi.Input[str] vpc_id: ID of the vpc.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create an ENI.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="vpc")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        example1 = tencentcloud.security.Group("example1",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        example2 = tencentcloud.security.Group("example2",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        example = tencentcloud.eni.Instance("example",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            description="eni desc.",
            ipv4_count=1,
            security_groups=[
                example1.id,
                example2.id,
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ENI can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Eni/instance:Instance tencentcloud_eni.foo eni-qka182br
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ipv4_count: Optional[pulumi.Input[int]] = None,
                 ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceIpv4Args']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["ipv4_count"] = ipv4_count
            __props__.__dict__["ipv4s"] = ipv4s
            __props__.__dict__["name"] = name
            __props__.__dict__["security_groups"] = security_groups
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["cdc_id"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["ipv4_infos"] = None
            __props__.__dict__["mac"] = None
            __props__.__dict__["primary"] = None
            __props__.__dict__["state"] = None
        super(Instance, __self__).__init__(
            'tencentcloud:Eni/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cdc_id: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            ipv4_count: Optional[pulumi.Input[int]] = None,
            ipv4_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceIpv4InfoArgs']]]]] = None,
            ipv4s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceIpv4Args']]]]] = None,
            mac: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            primary: Optional[pulumi.Input[bool]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cdc_id: CDC instance ID.
        :param pulumi.Input[str] create_time: Creation time of the ENI.
        :param pulumi.Input[str] description: Description of the IP, maximum length 25.
        :param pulumi.Input[int] ipv4_count: The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary intranet IPs, which conflict with `ipv4s`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceIpv4InfoArgs']]]] ipv4_infos: An information list of IPv4s. Each element contains the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceIpv4Args']]]] ipv4s: Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
        :param pulumi.Input[str] mac: MAC address.
        :param pulumi.Input[str] name: Name of the ENI, maximum length 60.
        :param pulumi.Input[bool] primary: Indicates whether the IP is primary.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: A set of security group IDs.
        :param pulumi.Input[str] state: State of the ENI.
        :param pulumi.Input[str] subnet_id: ID of the subnet within this vpc.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of the ENI.
        :param pulumi.Input[str] vpc_id: ID of the vpc.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["cdc_id"] = cdc_id
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["ipv4_count"] = ipv4_count
        __props__.__dict__["ipv4_infos"] = ipv4_infos
        __props__.__dict__["ipv4s"] = ipv4s
        __props__.__dict__["mac"] = mac
        __props__.__dict__["name"] = name
        __props__.__dict__["primary"] = primary
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["state"] = state
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> pulumi.Output[str]:
        """
        CDC instance ID.
        """
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time of the ENI.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the IP, maximum length 25.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipv4Count")
    def ipv4_count(self) -> pulumi.Output[Optional[int]]:
        """
        The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary intranet IPs, which conflict with `ipv4s`.
        """
        return pulumi.get(self, "ipv4_count")

    @property
    @pulumi.getter(name="ipv4Infos")
    def ipv4_infos(self) -> pulumi.Output[Sequence['outputs.InstanceIpv4Info']]:
        """
        An information list of IPv4s. Each element contains the following attributes:
        """
        return pulumi.get(self, "ipv4_infos")

    @property
    @pulumi.getter
    def ipv4s(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceIpv4']]]:
        """
        Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[str]:
        """
        MAC address.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the ENI, maximum length 60.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> pulumi.Output[bool]:
        """
        Indicates whether the IP is primary.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[str]]:
        """
        A set of security group IDs.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the ENI.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        ID of the subnet within this vpc.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tags of the ENI.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")

