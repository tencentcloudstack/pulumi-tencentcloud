# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TmpAlertRuleArgs', 'TmpAlertRule']

@pulumi.input_type
class TmpAlertRuleArgs:
    def __init__(__self__, *,
                 expr: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 receivers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_name: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleAnnotationArgs']]]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleLabelArgs']]]] = None,
                 rule_state: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TmpAlertRule resource.
        :param pulumi.Input[str] expr: Rule expression, reference documentation: `https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/`.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] receivers: Alarm notification template id list.
        :param pulumi.Input[str] rule_name: Rule name.
        :param pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleAnnotationArgs']]] annotations: Rule alarm duration.
        :param pulumi.Input[str] duration: Rule alarm duration.
        :param pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleLabelArgs']]] labels: Rule alarm duration.
        :param pulumi.Input[int] rule_state: Rule state code.
        :param pulumi.Input[str] type: Alarm Policy Template Classification.
        """
        pulumi.set(__self__, "expr", expr)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "receivers", receivers)
        pulumi.set(__self__, "rule_name", rule_name)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if rule_state is not None:
            pulumi.set(__self__, "rule_state", rule_state)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def expr(self) -> pulumi.Input[str]:
        """
        Rule expression, reference documentation: `https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/`.
        """
        return pulumi.get(self, "expr")

    @expr.setter
    def expr(self, value: pulumi.Input[str]):
        pulumi.set(self, "expr", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def receivers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Alarm notification template id list.
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "receivers", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleAnnotationArgs']]]]:
        """
        Rule alarm duration.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleAnnotationArgs']]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Rule alarm duration.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleLabelArgs']]]]:
        """
        Rule alarm duration.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="ruleState")
    def rule_state(self) -> Optional[pulumi.Input[int]]:
        """
        Rule state code.
        """
        return pulumi.get(self, "rule_state")

    @rule_state.setter
    def rule_state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Alarm Policy Template Classification.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _TmpAlertRuleState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleAnnotationArgs']]]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 expr: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleLabelArgs']]]] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_state: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TmpAlertRule resources.
        :param pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleAnnotationArgs']]] annotations: Rule alarm duration.
        :param pulumi.Input[str] duration: Rule alarm duration.
        :param pulumi.Input[str] expr: Rule expression, reference documentation: `https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/`.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleLabelArgs']]] labels: Rule alarm duration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] receivers: Alarm notification template id list.
        :param pulumi.Input[str] rule_name: Rule name.
        :param pulumi.Input[int] rule_state: Rule state code.
        :param pulumi.Input[str] type: Alarm Policy Template Classification.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if expr is not None:
            pulumi.set(__self__, "expr", expr)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_state is not None:
            pulumi.set(__self__, "rule_state", rule_state)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleAnnotationArgs']]]]:
        """
        Rule alarm duration.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleAnnotationArgs']]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Rule alarm duration.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def expr(self) -> Optional[pulumi.Input[str]]:
        """
        Rule expression, reference documentation: `https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/`.
        """
        return pulumi.get(self, "expr")

    @expr.setter
    def expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expr", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleLabelArgs']]]]:
        """
        Rule alarm duration.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpAlertRuleLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Alarm notification template id list.
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "receivers", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleState")
    def rule_state(self) -> Optional[pulumi.Input[int]]:
        """
        Rule state code.
        """
        return pulumi.get(self, "rule_state")

    @rule_state.setter
    def rule_state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Alarm Policy Template Classification.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class TmpAlertRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpAlertRuleAnnotationArgs']]]]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 expr: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpAlertRuleLabelArgs']]]]] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_state: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a monitor tmpAlertRule

        > **NOTE:** This resource will be deprecated in a future version, please use `Monitor.TmpAlertGroup`.

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        foo_tmp_instance = tencentcloud.monitor.TmpInstance("fooTmpInstance",
            instance_name="tf-tmp-instance",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            data_retention_time=30,
            zone=availability_zone,
            tags={
                "createdBy": "terraform",
            })
        foo_tmp_cvm_agent = tencentcloud.monitor.TmpCvmAgent("fooTmpCvmAgent", instance_id=foo_tmp_instance.id)
        foo_tmp_alert_rule = tencentcloud.monitor.TmpAlertRule("fooTmpAlertRule",
            duration="2m",
            expr="avg by (instance) (mysql_global_status_threads_connected) / avg by (instance) (mysql_global_variables_max_connections)  > 0.8",
            instance_id=foo_tmp_instance.id,
            receivers=["notice-f2svbu3w"],
            rule_name="MySQL 连接数过多",
            rule_state=2,
            type="MySQL/MySQL 连接数过多",
            annotations=[
                tencentcloud.monitor.TmpAlertRuleAnnotationArgs(
                    key="description",
                    value="MySQL 连接数过多, 实例: {{$labels.instance}}，当前值: {{ $value | humanizePercentage }}。",
                ),
                tencentcloud.monitor.TmpAlertRuleAnnotationArgs(
                    key="summary",
                    value="MySQL 连接数过多(>80%)",
                ),
            ],
            labels=[tencentcloud.monitor.TmpAlertRuleLabelArgs(
                key="severity",
                value="warning",
            )])
        ```

        ## Import

        monitor tmpAlertRule can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Monitor/tmpAlertRule:TmpAlertRule tmpAlertRule instanceId#Rule_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpAlertRuleAnnotationArgs']]]] annotations: Rule alarm duration.
        :param pulumi.Input[str] duration: Rule alarm duration.
        :param pulumi.Input[str] expr: Rule expression, reference documentation: `https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/`.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpAlertRuleLabelArgs']]]] labels: Rule alarm duration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] receivers: Alarm notification template id list.
        :param pulumi.Input[str] rule_name: Rule name.
        :param pulumi.Input[int] rule_state: Rule state code.
        :param pulumi.Input[str] type: Alarm Policy Template Classification.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TmpAlertRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a monitor tmpAlertRule

        > **NOTE:** This resource will be deprecated in a future version, please use `Monitor.TmpAlertGroup`.

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        foo_tmp_instance = tencentcloud.monitor.TmpInstance("fooTmpInstance",
            instance_name="tf-tmp-instance",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            data_retention_time=30,
            zone=availability_zone,
            tags={
                "createdBy": "terraform",
            })
        foo_tmp_cvm_agent = tencentcloud.monitor.TmpCvmAgent("fooTmpCvmAgent", instance_id=foo_tmp_instance.id)
        foo_tmp_alert_rule = tencentcloud.monitor.TmpAlertRule("fooTmpAlertRule",
            duration="2m",
            expr="avg by (instance) (mysql_global_status_threads_connected) / avg by (instance) (mysql_global_variables_max_connections)  > 0.8",
            instance_id=foo_tmp_instance.id,
            receivers=["notice-f2svbu3w"],
            rule_name="MySQL 连接数过多",
            rule_state=2,
            type="MySQL/MySQL 连接数过多",
            annotations=[
                tencentcloud.monitor.TmpAlertRuleAnnotationArgs(
                    key="description",
                    value="MySQL 连接数过多, 实例: {{$labels.instance}}，当前值: {{ $value | humanizePercentage }}。",
                ),
                tencentcloud.monitor.TmpAlertRuleAnnotationArgs(
                    key="summary",
                    value="MySQL 连接数过多(>80%)",
                ),
            ],
            labels=[tencentcloud.monitor.TmpAlertRuleLabelArgs(
                key="severity",
                value="warning",
            )])
        ```

        ## Import

        monitor tmpAlertRule can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Monitor/tmpAlertRule:TmpAlertRule tmpAlertRule instanceId#Rule_id
        ```

        :param str resource_name: The name of the resource.
        :param TmpAlertRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TmpAlertRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpAlertRuleAnnotationArgs']]]]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 expr: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpAlertRuleLabelArgs']]]]] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_state: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TmpAlertRuleArgs.__new__(TmpAlertRuleArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["duration"] = duration
            if expr is None and not opts.urn:
                raise TypeError("Missing required property 'expr'")
            __props__.__dict__["expr"] = expr
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["labels"] = labels
            if receivers is None and not opts.urn:
                raise TypeError("Missing required property 'receivers'")
            __props__.__dict__["receivers"] = receivers
            if rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_name'")
            __props__.__dict__["rule_name"] = rule_name
            __props__.__dict__["rule_state"] = rule_state
            __props__.__dict__["type"] = type
        super(TmpAlertRule, __self__).__init__(
            'tencentcloud:Monitor/tmpAlertRule:TmpAlertRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpAlertRuleAnnotationArgs']]]]] = None,
            duration: Optional[pulumi.Input[str]] = None,
            expr: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpAlertRuleLabelArgs']]]]] = None,
            receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            rule_name: Optional[pulumi.Input[str]] = None,
            rule_state: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'TmpAlertRule':
        """
        Get an existing TmpAlertRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpAlertRuleAnnotationArgs']]]] annotations: Rule alarm duration.
        :param pulumi.Input[str] duration: Rule alarm duration.
        :param pulumi.Input[str] expr: Rule expression, reference documentation: `https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/`.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpAlertRuleLabelArgs']]]] labels: Rule alarm duration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] receivers: Alarm notification template id list.
        :param pulumi.Input[str] rule_name: Rule name.
        :param pulumi.Input[int] rule_state: Rule state code.
        :param pulumi.Input[str] type: Alarm Policy Template Classification.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TmpAlertRuleState.__new__(_TmpAlertRuleState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["duration"] = duration
        __props__.__dict__["expr"] = expr
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["labels"] = labels
        __props__.__dict__["receivers"] = receivers
        __props__.__dict__["rule_name"] = rule_name
        __props__.__dict__["rule_state"] = rule_state
        __props__.__dict__["type"] = type
        return TmpAlertRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Sequence['outputs.TmpAlertRuleAnnotation']]]:
        """
        Rule alarm duration.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Output[Optional[str]]:
        """
        Rule alarm duration.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def expr(self) -> pulumi.Output[str]:
        """
        Rule expression, reference documentation: `https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/`.
        """
        return pulumi.get(self, "expr")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence['outputs.TmpAlertRuleLabel']]]:
        """
        Rule alarm duration.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def receivers(self) -> pulumi.Output[Sequence[str]]:
        """
        Alarm notification template id list.
        """
        return pulumi.get(self, "receivers")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[str]:
        """
        Rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleState")
    def rule_state(self) -> pulumi.Output[Optional[int]]:
        """
        Rule state code.
        """
        return pulumi.get(self, "rule_state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Alarm Policy Template Classification.
        """
        return pulumi.get(self, "type")

