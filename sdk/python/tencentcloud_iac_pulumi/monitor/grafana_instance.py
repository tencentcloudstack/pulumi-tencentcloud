# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GrafanaInstanceArgs', 'GrafanaInstance']

@pulumi.input_type
class GrafanaInstanceArgs:
    def __init__(__self__, *,
                 instance_name: pulumi.Input[str],
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 enable_internet: Optional[pulumi.Input[bool]] = None,
                 grafana_init_password: Optional[pulumi.Input[str]] = None,
                 is_destroy: Optional[pulumi.Input[bool]] = None,
                 is_distroy: Optional[pulumi.Input[bool]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GrafanaInstance resource.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use vouchers.
        :param pulumi.Input[bool] enable_internet: Control whether grafana could be accessed by internet.
        :param pulumi.Input[str] grafana_init_password: Grafana server admin password.
        :param pulumi.Input[bool] is_destroy: Whether to clean up completely, the default is false.
        :param pulumi.Input[bool] is_distroy: It has been deprecated from version 1.81.16. Whether to clean up completely, the default is false.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet Id array.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] vpc_id: Vpc Id.
        """
        pulumi.set(__self__, "instance_name", instance_name)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if enable_internet is not None:
            pulumi.set(__self__, "enable_internet", enable_internet)
        if grafana_init_password is not None:
            pulumi.set(__self__, "grafana_init_password", grafana_init_password)
        if is_destroy is not None:
            pulumi.set(__self__, "is_destroy", is_destroy)
        if is_distroy is not None:
            warnings.warn("""It has been deprecated from version 1.81.16.""", DeprecationWarning)
            pulumi.log.warn("""is_distroy is deprecated: It has been deprecated from version 1.81.16.""")
        if is_distroy is not None:
            pulumi.set(__self__, "is_distroy", is_distroy)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically use vouchers.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="enableInternet")
    def enable_internet(self) -> Optional[pulumi.Input[bool]]:
        """
        Control whether grafana could be accessed by internet.
        """
        return pulumi.get(self, "enable_internet")

    @enable_internet.setter
    def enable_internet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_internet", value)

    @property
    @pulumi.getter(name="grafanaInitPassword")
    def grafana_init_password(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana server admin password.
        """
        return pulumi.get(self, "grafana_init_password")

    @grafana_init_password.setter
    def grafana_init_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_init_password", value)

    @property
    @pulumi.getter(name="isDestroy")
    def is_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to clean up completely, the default is false.
        """
        return pulumi.get(self, "is_destroy")

    @is_destroy.setter
    def is_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_destroy", value)

    @property
    @pulumi.getter(name="isDistroy")
    def is_distroy(self) -> Optional[pulumi.Input[bool]]:
        """
        It has been deprecated from version 1.81.16. Whether to clean up completely, the default is false.
        """
        return pulumi.get(self, "is_distroy")

    @is_distroy.setter
    def is_distroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_distroy", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Subnet Id array.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc Id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _GrafanaInstanceState:
    def __init__(__self__, *,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 enable_internet: Optional[pulumi.Input[bool]] = None,
                 grafana_init_password: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_status: Optional[pulumi.Input[int]] = None,
                 internal_url: Optional[pulumi.Input[str]] = None,
                 internet_url: Optional[pulumi.Input[str]] = None,
                 is_destroy: Optional[pulumi.Input[bool]] = None,
                 is_distroy: Optional[pulumi.Input[bool]] = None,
                 root_url: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GrafanaInstance resources.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use vouchers.
        :param pulumi.Input[bool] enable_internet: Control whether grafana could be accessed by internet.
        :param pulumi.Input[str] grafana_init_password: Grafana server admin password.
        :param pulumi.Input[str] instance_id: Grafana instance id.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[int] instance_status: Grafana instance status, 1: Creating, 2: Running, 6: Stopped.
        :param pulumi.Input[str] internal_url: Grafana public address.
        :param pulumi.Input[str] internet_url: Grafana intranet address.
        :param pulumi.Input[bool] is_destroy: Whether to clean up completely, the default is false.
        :param pulumi.Input[bool] is_distroy: It has been deprecated from version 1.81.16. Whether to clean up completely, the default is false.
        :param pulumi.Input[str] root_url: Grafana external url which could be accessed by user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet Id array.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] vpc_id: Vpc Id.
        """
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if enable_internet is not None:
            pulumi.set(__self__, "enable_internet", enable_internet)
        if grafana_init_password is not None:
            pulumi.set(__self__, "grafana_init_password", grafana_init_password)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_status is not None:
            pulumi.set(__self__, "instance_status", instance_status)
        if internal_url is not None:
            pulumi.set(__self__, "internal_url", internal_url)
        if internet_url is not None:
            pulumi.set(__self__, "internet_url", internet_url)
        if is_destroy is not None:
            pulumi.set(__self__, "is_destroy", is_destroy)
        if is_distroy is not None:
            warnings.warn("""It has been deprecated from version 1.81.16.""", DeprecationWarning)
            pulumi.log.warn("""is_distroy is deprecated: It has been deprecated from version 1.81.16.""")
        if is_distroy is not None:
            pulumi.set(__self__, "is_distroy", is_distroy)
        if root_url is not None:
            pulumi.set(__self__, "root_url", root_url)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically use vouchers.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="enableInternet")
    def enable_internet(self) -> Optional[pulumi.Input[bool]]:
        """
        Control whether grafana could be accessed by internet.
        """
        return pulumi.get(self, "enable_internet")

    @enable_internet.setter
    def enable_internet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_internet", value)

    @property
    @pulumi.getter(name="grafanaInitPassword")
    def grafana_init_password(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana server admin password.
        """
        return pulumi.get(self, "grafana_init_password")

    @grafana_init_password.setter
    def grafana_init_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_init_password", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> Optional[pulumi.Input[int]]:
        """
        Grafana instance status, 1: Creating, 2: Running, 6: Stopped.
        """
        return pulumi.get(self, "instance_status")

    @instance_status.setter
    def instance_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_status", value)

    @property
    @pulumi.getter(name="internalUrl")
    def internal_url(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana public address.
        """
        return pulumi.get(self, "internal_url")

    @internal_url.setter
    def internal_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_url", value)

    @property
    @pulumi.getter(name="internetUrl")
    def internet_url(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana intranet address.
        """
        return pulumi.get(self, "internet_url")

    @internet_url.setter
    def internet_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_url", value)

    @property
    @pulumi.getter(name="isDestroy")
    def is_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to clean up completely, the default is false.
        """
        return pulumi.get(self, "is_destroy")

    @is_destroy.setter
    def is_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_destroy", value)

    @property
    @pulumi.getter(name="isDistroy")
    def is_distroy(self) -> Optional[pulumi.Input[bool]]:
        """
        It has been deprecated from version 1.81.16. Whether to clean up completely, the default is false.
        """
        return pulumi.get(self, "is_distroy")

    @is_distroy.setter
    def is_distroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_distroy", value)

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana external url which could be accessed by user.
        """
        return pulumi.get(self, "root_url")

    @root_url.setter
    def root_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_url", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Subnet Id array.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc Id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class GrafanaInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 enable_internet: Optional[pulumi.Input[bool]] = None,
                 grafana_init_password: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 is_destroy: Optional[pulumi.Input[bool]] = None,
                 is_distroy: Optional[pulumi.Input[bool]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a monitor grafanaInstance

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        foo = tencentcloud.monitor.GrafanaInstance("foo",
            instance_name="test-grafana",
            vpc_id=vpc.id,
            subnet_ids=[subnet.id],
            grafana_init_password="1234567890",
            enable_internet=False,
            is_destroy=True,
            tags={
                "createdBy": "test",
            })
        ```

        ## Import

        monitor grafanaInstance can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Monitor/grafanaInstance:GrafanaInstance foo grafanaInstance_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use vouchers.
        :param pulumi.Input[bool] enable_internet: Control whether grafana could be accessed by internet.
        :param pulumi.Input[str] grafana_init_password: Grafana server admin password.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[bool] is_destroy: Whether to clean up completely, the default is false.
        :param pulumi.Input[bool] is_distroy: It has been deprecated from version 1.81.16. Whether to clean up completely, the default is false.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet Id array.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] vpc_id: Vpc Id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GrafanaInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a monitor grafanaInstance

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        foo = tencentcloud.monitor.GrafanaInstance("foo",
            instance_name="test-grafana",
            vpc_id=vpc.id,
            subnet_ids=[subnet.id],
            grafana_init_password="1234567890",
            enable_internet=False,
            is_destroy=True,
            tags={
                "createdBy": "test",
            })
        ```

        ## Import

        monitor grafanaInstance can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Monitor/grafanaInstance:GrafanaInstance foo grafanaInstance_id
        ```

        :param str resource_name: The name of the resource.
        :param GrafanaInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GrafanaInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 enable_internet: Optional[pulumi.Input[bool]] = None,
                 grafana_init_password: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 is_destroy: Optional[pulumi.Input[bool]] = None,
                 is_distroy: Optional[pulumi.Input[bool]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GrafanaInstanceArgs.__new__(GrafanaInstanceArgs)

            __props__.__dict__["auto_voucher"] = auto_voucher
            __props__.__dict__["enable_internet"] = enable_internet
            __props__.__dict__["grafana_init_password"] = grafana_init_password
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["is_destroy"] = is_destroy
            if is_distroy is not None and not opts.urn:
                warnings.warn("""It has been deprecated from version 1.81.16.""", DeprecationWarning)
                pulumi.log.warn("""is_distroy is deprecated: It has been deprecated from version 1.81.16.""")
            __props__.__dict__["is_distroy"] = is_distroy
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["tags"] = tags
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["instance_status"] = None
            __props__.__dict__["internal_url"] = None
            __props__.__dict__["internet_url"] = None
            __props__.__dict__["root_url"] = None
        super(GrafanaInstance, __self__).__init__(
            'tencentcloud:Monitor/grafanaInstance:GrafanaInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_voucher: Optional[pulumi.Input[bool]] = None,
            enable_internet: Optional[pulumi.Input[bool]] = None,
            grafana_init_password: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_status: Optional[pulumi.Input[int]] = None,
            internal_url: Optional[pulumi.Input[str]] = None,
            internet_url: Optional[pulumi.Input[str]] = None,
            is_destroy: Optional[pulumi.Input[bool]] = None,
            is_distroy: Optional[pulumi.Input[bool]] = None,
            root_url: Optional[pulumi.Input[str]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'GrafanaInstance':
        """
        Get an existing GrafanaInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use vouchers.
        :param pulumi.Input[bool] enable_internet: Control whether grafana could be accessed by internet.
        :param pulumi.Input[str] grafana_init_password: Grafana server admin password.
        :param pulumi.Input[str] instance_id: Grafana instance id.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[int] instance_status: Grafana instance status, 1: Creating, 2: Running, 6: Stopped.
        :param pulumi.Input[str] internal_url: Grafana public address.
        :param pulumi.Input[str] internet_url: Grafana intranet address.
        :param pulumi.Input[bool] is_destroy: Whether to clean up completely, the default is false.
        :param pulumi.Input[bool] is_distroy: It has been deprecated from version 1.81.16. Whether to clean up completely, the default is false.
        :param pulumi.Input[str] root_url: Grafana external url which could be accessed by user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet Id array.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] vpc_id: Vpc Id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GrafanaInstanceState.__new__(_GrafanaInstanceState)

        __props__.__dict__["auto_voucher"] = auto_voucher
        __props__.__dict__["enable_internet"] = enable_internet
        __props__.__dict__["grafana_init_password"] = grafana_init_password
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_status"] = instance_status
        __props__.__dict__["internal_url"] = internal_url
        __props__.__dict__["internet_url"] = internet_url
        __props__.__dict__["is_destroy"] = is_destroy
        __props__.__dict__["is_distroy"] = is_distroy
        __props__.__dict__["root_url"] = root_url
        __props__.__dict__["subnet_ids"] = subnet_ids
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return GrafanaInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to automatically use vouchers.
        """
        return pulumi.get(self, "auto_voucher")

    @property
    @pulumi.getter(name="enableInternet")
    def enable_internet(self) -> pulumi.Output[bool]:
        """
        Control whether grafana could be accessed by internet.
        """
        return pulumi.get(self, "enable_internet")

    @property
    @pulumi.getter(name="grafanaInitPassword")
    def grafana_init_password(self) -> pulumi.Output[str]:
        """
        Grafana server admin password.
        """
        return pulumi.get(self, "grafana_init_password")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Grafana instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> pulumi.Output[int]:
        """
        Grafana instance status, 1: Creating, 2: Running, 6: Stopped.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="internalUrl")
    def internal_url(self) -> pulumi.Output[str]:
        """
        Grafana public address.
        """
        return pulumi.get(self, "internal_url")

    @property
    @pulumi.getter(name="internetUrl")
    def internet_url(self) -> pulumi.Output[str]:
        """
        Grafana intranet address.
        """
        return pulumi.get(self, "internet_url")

    @property
    @pulumi.getter(name="isDestroy")
    def is_destroy(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to clean up completely, the default is false.
        """
        return pulumi.get(self, "is_destroy")

    @property
    @pulumi.getter(name="isDistroy")
    def is_distroy(self) -> pulumi.Output[Optional[bool]]:
        """
        It has been deprecated from version 1.81.16. Whether to clean up completely, the default is false.
        """
        return pulumi.get(self, "is_distroy")

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> pulumi.Output[str]:
        """
        Grafana external url which could be accessed by user.
        """
        return pulumi.get(self, "root_url")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Subnet Id array.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Vpc Id.
        """
        return pulumi.get(self, "vpc_id")

