# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TmpTkeAlertPolicyArgs', 'TmpTkeAlertPolicy']

@pulumi.input_type
class TmpTkeAlertPolicyArgs:
    def __init__(__self__, *,
                 alert_rule: pulumi.Input['TmpTkeAlertPolicyAlertRuleArgs'],
                 instance_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a TmpTkeAlertPolicy resource.
        :param pulumi.Input['TmpTkeAlertPolicyAlertRuleArgs'] alert_rule: Alarm notification channels.
        :param pulumi.Input[str] instance_id: Instance Id.
        """
        pulumi.set(__self__, "alert_rule", alert_rule)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="alertRule")
    def alert_rule(self) -> pulumi.Input['TmpTkeAlertPolicyAlertRuleArgs']:
        """
        Alarm notification channels.
        """
        return pulumi.get(self, "alert_rule")

    @alert_rule.setter
    def alert_rule(self, value: pulumi.Input['TmpTkeAlertPolicyAlertRuleArgs']):
        pulumi.set(self, "alert_rule", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)


@pulumi.input_type
class _TmpTkeAlertPolicyState:
    def __init__(__self__, *,
                 alert_rule: Optional[pulumi.Input['TmpTkeAlertPolicyAlertRuleArgs']] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TmpTkeAlertPolicy resources.
        :param pulumi.Input['TmpTkeAlertPolicyAlertRuleArgs'] alert_rule: Alarm notification channels.
        :param pulumi.Input[str] instance_id: Instance Id.
        """
        if alert_rule is not None:
            pulumi.set(__self__, "alert_rule", alert_rule)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="alertRule")
    def alert_rule(self) -> Optional[pulumi.Input['TmpTkeAlertPolicyAlertRuleArgs']]:
        """
        Alarm notification channels.
        """
        return pulumi.get(self, "alert_rule")

    @alert_rule.setter
    def alert_rule(self, value: Optional[pulumi.Input['TmpTkeAlertPolicyAlertRuleArgs']]):
        pulumi.set(self, "alert_rule", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


class TmpTkeAlertPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_rule: Optional[pulumi.Input[pulumi.InputType['TmpTkeAlertPolicyAlertRuleArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tke tmpAlertPolicy

        > **NOTE:** This resource will be deprecated in a future version, please use `Monitor.TmpAlertGroup`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        default_instance_type = config.get("defaultInstanceType")
        if default_instance_type is None:
            default_instance_type = "SA1.MEDIUM2"
        availability_zone_first = config.get("availabilityZoneFirst")
        if availability_zone_first is None:
            availability_zone_first = "ap-guangzhou-3"
        availability_zone_second = config.get("availabilityZoneSecond")
        if availability_zone_second is None:
            availability_zone_second = "ap-guangzhou-4"
        example_cluster_cidr = config.get("exampleClusterCidr")
        if example_cluster_cidr is None:
            example_cluster_cidr = "10.31.0.0/16"
        vpc_one = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone_first)
        first_vpc_id = vpc_one.instance_lists[0].vpc_id
        first_subnet_id = vpc_one.instance_lists[0].subnet_id
        vpc_two = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone_second)
        second_vpc_id = vpc_two.instance_lists[0].vpc_id
        second_subnet_id = vpc_two.instance_lists[0].subnet_id
        sg = tencentcloud.security.Group("sg")
        sg_id = sg.id
        default = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            image_name_regex="Final")
        image_id = default.image_id
        sg_rule = tencentcloud.security.GroupLiteRule("sgRule",
            security_group_id=sg.id,
            ingresses=[
                "ACCEPT#10.0.0.0/16#ALL#ALL",
                "ACCEPT#172.16.0.0/22#ALL#ALL",
                "DROP#0.0.0.0/0#ALL#ALL",
            ],
            egresses=["ACCEPT#172.16.0.0/22#ALL#ALL"])
        example = tencentcloud.kubernetes.Cluster("example",
            vpc_id=first_vpc_id,
            cluster_cidr=example_cluster_cidr,
            cluster_max_pod_num=32,
            cluster_name="tf_example_cluster",
            cluster_desc="example for tke cluster",
            cluster_max_service_num=32,
            cluster_internet=False,
            cluster_internet_security_group=sg_id,
            cluster_version="1.22.5",
            cluster_deploy_type="MANAGED_CLUSTER",
            worker_configs=[
                tencentcloud.kubernetes.ClusterWorkerConfigArgs(
                    count=1,
                    availability_zone=availability_zone_first,
                    instance_type=default_instance_type,
                    system_disk_type="CLOUD_SSD",
                    system_disk_size=60,
                    internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                    internet_max_bandwidth_out=100,
                    public_ip_assigned=True,
                    subnet_id=first_subnet_id,
                    img_id=image_id,
                    data_disks=[tencentcloud.kubernetes.ClusterWorkerConfigDataDiskArgs(
                        disk_type="CLOUD_PREMIUM",
                        disk_size=50,
                    )],
                    enhanced_security_service=False,
                    enhanced_monitor_service=False,
                    user_data="dGVzdA==",
                    password="ZZXXccvv1212",
                ),
                tencentcloud.kubernetes.ClusterWorkerConfigArgs(
                    count=1,
                    availability_zone=availability_zone_second,
                    instance_type=default_instance_type,
                    system_disk_type="CLOUD_SSD",
                    system_disk_size=60,
                    internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                    internet_max_bandwidth_out=100,
                    public_ip_assigned=True,
                    subnet_id=second_subnet_id,
                    data_disks=[tencentcloud.kubernetes.ClusterWorkerConfigDataDiskArgs(
                        disk_type="CLOUD_PREMIUM",
                        disk_size=50,
                    )],
                    enhanced_security_service=False,
                    enhanced_monitor_service=False,
                    user_data="dGVzdA==",
                    cam_role_name="CVM_QcsRole",
                    password="ZZXXccvv1212",
                ),
            ],
            labels={
                "test1": "test1",
                "test2": "test2",
            })
        zone = config.get("zone")
        if zone is None:
            zone = "ap-guangzhou"
        cluster_type = config.get("clusterType")
        if cluster_type is None:
            cluster_type = "tke"
        foo_tmp_instance = tencentcloud.monitor.TmpInstance("fooTmpInstance",
            instance_name="tf-tmp-instance",
            vpc_id=first_vpc_id,
            subnet_id=first_subnet_id,
            data_retention_time=30,
            zone=availability_zone_second,
            tags={
                "createdBy": "terraform",
            })
        # tmp tke bind
        foo_tmp_tke_cluster_agent = tencentcloud.monitor.TmpTkeClusterAgent("fooTmpTkeClusterAgent",
            instance_id=foo_tmp_instance.id,
            agents=tencentcloud.monitor.TmpTkeClusterAgentAgentsArgs(
                region=zone,
                cluster_type=cluster_type,
                cluster_id=example.id,
                enable_external=False,
            ))
        # create record rule
        basic = tencentcloud.monitor.TmpTkeAlertPolicy("basic",
            instance_id=foo_tmp_instance.id,
            alert_rule=tencentcloud.monitor.TmpTkeAlertPolicyAlertRuleArgs(
                name="alert_rule-test",
                rules=[tencentcloud.monitor.TmpTkeAlertPolicyAlertRuleRuleArgs(
                    name="rules-test",
                    rule="(count(kube_node_status_allocatable_cpu_cores) by (cluster) -1)   / count(kube_node_status_allocatable_cpu_cores) by (cluster)",
                    template="The CPU requested by the Pod in the cluster {{ $labels.cluster }} is overloaded, and the current CPU application ratio is {{ $value | humanizePercentage }}",
                    for_="5m",
                    labels=[tencentcloud.monitor.TmpTkeAlertPolicyAlertRuleRuleLabelArgs(
                        name="severity",
                        value="warning",
                    )],
                )],
                notification=tencentcloud.monitor.TmpTkeAlertPolicyAlertRuleNotificationArgs(
                    type="amp",
                    enabled=True,
                    alert_manager=tencentcloud.monitor.TmpTkeAlertPolicyAlertRuleNotificationAlertManagerArgs(
                        url="xxx",
                    ),
                ),
            ),
            opts=pulumi.ResourceOptions(depends_on=[foo_tmp_tke_cluster_agent]))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TmpTkeAlertPolicyAlertRuleArgs']] alert_rule: Alarm notification channels.
        :param pulumi.Input[str] instance_id: Instance Id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TmpTkeAlertPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tke tmpAlertPolicy

        > **NOTE:** This resource will be deprecated in a future version, please use `Monitor.TmpAlertGroup`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        default_instance_type = config.get("defaultInstanceType")
        if default_instance_type is None:
            default_instance_type = "SA1.MEDIUM2"
        availability_zone_first = config.get("availabilityZoneFirst")
        if availability_zone_first is None:
            availability_zone_first = "ap-guangzhou-3"
        availability_zone_second = config.get("availabilityZoneSecond")
        if availability_zone_second is None:
            availability_zone_second = "ap-guangzhou-4"
        example_cluster_cidr = config.get("exampleClusterCidr")
        if example_cluster_cidr is None:
            example_cluster_cidr = "10.31.0.0/16"
        vpc_one = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone_first)
        first_vpc_id = vpc_one.instance_lists[0].vpc_id
        first_subnet_id = vpc_one.instance_lists[0].subnet_id
        vpc_two = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone_second)
        second_vpc_id = vpc_two.instance_lists[0].vpc_id
        second_subnet_id = vpc_two.instance_lists[0].subnet_id
        sg = tencentcloud.security.Group("sg")
        sg_id = sg.id
        default = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            image_name_regex="Final")
        image_id = default.image_id
        sg_rule = tencentcloud.security.GroupLiteRule("sgRule",
            security_group_id=sg.id,
            ingresses=[
                "ACCEPT#10.0.0.0/16#ALL#ALL",
                "ACCEPT#172.16.0.0/22#ALL#ALL",
                "DROP#0.0.0.0/0#ALL#ALL",
            ],
            egresses=["ACCEPT#172.16.0.0/22#ALL#ALL"])
        example = tencentcloud.kubernetes.Cluster("example",
            vpc_id=first_vpc_id,
            cluster_cidr=example_cluster_cidr,
            cluster_max_pod_num=32,
            cluster_name="tf_example_cluster",
            cluster_desc="example for tke cluster",
            cluster_max_service_num=32,
            cluster_internet=False,
            cluster_internet_security_group=sg_id,
            cluster_version="1.22.5",
            cluster_deploy_type="MANAGED_CLUSTER",
            worker_configs=[
                tencentcloud.kubernetes.ClusterWorkerConfigArgs(
                    count=1,
                    availability_zone=availability_zone_first,
                    instance_type=default_instance_type,
                    system_disk_type="CLOUD_SSD",
                    system_disk_size=60,
                    internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                    internet_max_bandwidth_out=100,
                    public_ip_assigned=True,
                    subnet_id=first_subnet_id,
                    img_id=image_id,
                    data_disks=[tencentcloud.kubernetes.ClusterWorkerConfigDataDiskArgs(
                        disk_type="CLOUD_PREMIUM",
                        disk_size=50,
                    )],
                    enhanced_security_service=False,
                    enhanced_monitor_service=False,
                    user_data="dGVzdA==",
                    password="ZZXXccvv1212",
                ),
                tencentcloud.kubernetes.ClusterWorkerConfigArgs(
                    count=1,
                    availability_zone=availability_zone_second,
                    instance_type=default_instance_type,
                    system_disk_type="CLOUD_SSD",
                    system_disk_size=60,
                    internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
                    internet_max_bandwidth_out=100,
                    public_ip_assigned=True,
                    subnet_id=second_subnet_id,
                    data_disks=[tencentcloud.kubernetes.ClusterWorkerConfigDataDiskArgs(
                        disk_type="CLOUD_PREMIUM",
                        disk_size=50,
                    )],
                    enhanced_security_service=False,
                    enhanced_monitor_service=False,
                    user_data="dGVzdA==",
                    cam_role_name="CVM_QcsRole",
                    password="ZZXXccvv1212",
                ),
            ],
            labels={
                "test1": "test1",
                "test2": "test2",
            })
        zone = config.get("zone")
        if zone is None:
            zone = "ap-guangzhou"
        cluster_type = config.get("clusterType")
        if cluster_type is None:
            cluster_type = "tke"
        foo_tmp_instance = tencentcloud.monitor.TmpInstance("fooTmpInstance",
            instance_name="tf-tmp-instance",
            vpc_id=first_vpc_id,
            subnet_id=first_subnet_id,
            data_retention_time=30,
            zone=availability_zone_second,
            tags={
                "createdBy": "terraform",
            })
        # tmp tke bind
        foo_tmp_tke_cluster_agent = tencentcloud.monitor.TmpTkeClusterAgent("fooTmpTkeClusterAgent",
            instance_id=foo_tmp_instance.id,
            agents=tencentcloud.monitor.TmpTkeClusterAgentAgentsArgs(
                region=zone,
                cluster_type=cluster_type,
                cluster_id=example.id,
                enable_external=False,
            ))
        # create record rule
        basic = tencentcloud.monitor.TmpTkeAlertPolicy("basic",
            instance_id=foo_tmp_instance.id,
            alert_rule=tencentcloud.monitor.TmpTkeAlertPolicyAlertRuleArgs(
                name="alert_rule-test",
                rules=[tencentcloud.monitor.TmpTkeAlertPolicyAlertRuleRuleArgs(
                    name="rules-test",
                    rule="(count(kube_node_status_allocatable_cpu_cores) by (cluster) -1)   / count(kube_node_status_allocatable_cpu_cores) by (cluster)",
                    template="The CPU requested by the Pod in the cluster {{ $labels.cluster }} is overloaded, and the current CPU application ratio is {{ $value | humanizePercentage }}",
                    for_="5m",
                    labels=[tencentcloud.monitor.TmpTkeAlertPolicyAlertRuleRuleLabelArgs(
                        name="severity",
                        value="warning",
                    )],
                )],
                notification=tencentcloud.monitor.TmpTkeAlertPolicyAlertRuleNotificationArgs(
                    type="amp",
                    enabled=True,
                    alert_manager=tencentcloud.monitor.TmpTkeAlertPolicyAlertRuleNotificationAlertManagerArgs(
                        url="xxx",
                    ),
                ),
            ),
            opts=pulumi.ResourceOptions(depends_on=[foo_tmp_tke_cluster_agent]))
        ```

        :param str resource_name: The name of the resource.
        :param TmpTkeAlertPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TmpTkeAlertPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_rule: Optional[pulumi.Input[pulumi.InputType['TmpTkeAlertPolicyAlertRuleArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TmpTkeAlertPolicyArgs.__new__(TmpTkeAlertPolicyArgs)

            if alert_rule is None and not opts.urn:
                raise TypeError("Missing required property 'alert_rule'")
            __props__.__dict__["alert_rule"] = alert_rule
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
        super(TmpTkeAlertPolicy, __self__).__init__(
            'tencentcloud:Monitor/tmpTkeAlertPolicy:TmpTkeAlertPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_rule: Optional[pulumi.Input[pulumi.InputType['TmpTkeAlertPolicyAlertRuleArgs']]] = None,
            instance_id: Optional[pulumi.Input[str]] = None) -> 'TmpTkeAlertPolicy':
        """
        Get an existing TmpTkeAlertPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TmpTkeAlertPolicyAlertRuleArgs']] alert_rule: Alarm notification channels.
        :param pulumi.Input[str] instance_id: Instance Id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TmpTkeAlertPolicyState.__new__(_TmpTkeAlertPolicyState)

        __props__.__dict__["alert_rule"] = alert_rule
        __props__.__dict__["instance_id"] = instance_id
        return TmpTkeAlertPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertRule")
    def alert_rule(self) -> pulumi.Output['outputs.TmpTkeAlertPolicyAlertRule']:
        """
        Alarm notification channels.
        """
        return pulumi.get(self, "alert_rule")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

