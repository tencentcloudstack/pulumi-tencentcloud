# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AlarmNoticeClsNotice',
    'AlarmNoticeUrlNotice',
    'AlarmNoticeUserNotice',
    'AlarmPolicyConditions',
    'AlarmPolicyConditionsRule',
    'AlarmPolicyConditionsRuleFilter',
    'AlarmPolicyEventCondition',
    'AlarmPolicyEventConditionFilter',
    'AlarmPolicyFilter',
    'AlarmPolicyPolicyTag',
    'AlarmPolicyTriggerTask',
    'BindingReceiverReceivers',
    'GrafanaSsoAccountRole',
    'PolicyBindingObjectDimension',
    'TmpAlertGroupCustomReceiver',
    'TmpAlertGroupCustomReceiverAllowedTimeRange',
    'TmpAlertGroupRule',
    'TmpAlertRuleAnnotation',
    'TmpAlertRuleLabel',
    'TmpTkeAlertPolicyAlertRule',
    'TmpTkeAlertPolicyAlertRuleNotification',
    'TmpTkeAlertPolicyAlertRuleNotificationAlertManager',
    'TmpTkeAlertPolicyAlertRuleRule',
    'TmpTkeAlertPolicyAlertRuleRuleAnnotation',
    'TmpTkeAlertPolicyAlertRuleRuleLabel',
    'TmpTkeClusterAgentAgents',
    'TmpTkeClusterAgentAgentsExternalLabel',
    'TmpTkeClusterAgentAgentsInClusterPodConfig',
    'TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector',
    'TmpTkeClusterAgentAgentsInClusterPodConfigToleration',
    'TmpTkeConfigPodMonitor',
    'TmpTkeConfigRawJob',
    'TmpTkeConfigServiceMonitor',
    'TmpTkeGlobalNotificationNotification',
    'TmpTkeGlobalNotificationNotificationAlertManager',
    'TmpTkeTemplateAttachmentTargets',
    'TmpTkeTemplateTemplate',
    'TmpTkeTemplateTemplatePodMonitor',
    'TmpTkeTemplateTemplateRawJob',
    'TmpTkeTemplateTemplateRecordRule',
    'TmpTkeTemplateTemplateServiceMonitor',
    'GetAlarmAllNamespacesCommonNamespaceResult',
    'GetAlarmAllNamespacesCommonNamespaceDimensionResult',
    'GetAlarmAllNamespacesCommonNamespaceDimensionOperatorResult',
    'GetAlarmAllNamespacesCustomNamespacesNewsResult',
    'GetAlarmAllNamespacesQceNamespacesNewsResult',
    'GetAlarmBasicAlarmsAlarmResult',
    'GetAlarmBasicAlarmsAlarmInstanceGroupResult',
    'GetAlarmBasicMetricMetricSetResult',
    'GetAlarmBasicMetricMetricSetDimensionResult',
    'GetAlarmBasicMetricMetricSetMeaningResult',
    'GetAlarmBasicMetricMetricSetPeriodResult',
    'GetAlarmConditionsTemplateTemplateGroupListResult',
    'GetAlarmConditionsTemplateTemplateGroupListConditionResult',
    'GetAlarmConditionsTemplateTemplateGroupListEventConditionResult',
    'GetAlarmConditionsTemplateTemplateGroupListPolicyGroupResult',
    'GetAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfoResult',
    'GetAlarmHistoryHistoryResult',
    'GetAlarmHistoryHistoryInstanceGroupResult',
    'GetAlarmHistoryHistoryMetricsInfoResult',
    'GetAlarmHistoryNamespaceResult',
    'GetAlarmMetricMetricResult',
    'GetAlarmMetricMetricMetricConfigResult',
    'GetAlarmMetricMetricOperatorResult',
    'GetAlarmMonitorTypeMonitorTypeInfoResult',
    'GetAlarmNoticeCallbacksUrlNoticeResult',
    'GetAlarmNoticesAlarmNoticeResult',
    'GetAlarmNoticesAlarmNoticeClsNoticeResult',
    'GetAlarmNoticesAlarmNoticeUrlNoticeResult',
    'GetAlarmNoticesAlarmNoticeUserNoticeResult',
    'GetAlarmPolicyPolicyResult',
    'GetAlarmPolicyPolicyConditionResult',
    'GetAlarmPolicyPolicyConditionRuleResult',
    'GetAlarmPolicyPolicyConditionRuleFilterResult',
    'GetAlarmPolicyPolicyConditionRuleHierarchicalValueResult',
    'GetAlarmPolicyPolicyConditionsTempResult',
    'GetAlarmPolicyPolicyConditionsTempConditionResult',
    'GetAlarmPolicyPolicyConditionsTempConditionRuleResult',
    'GetAlarmPolicyPolicyConditionsTempConditionRuleFilterResult',
    'GetAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValueResult',
    'GetAlarmPolicyPolicyConditionsTempEventConditionResult',
    'GetAlarmPolicyPolicyConditionsTempEventConditionRuleResult',
    'GetAlarmPolicyPolicyConditionsTempEventConditionRuleFilterResult',
    'GetAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValueResult',
    'GetAlarmPolicyPolicyEventConditionResult',
    'GetAlarmPolicyPolicyEventConditionRuleResult',
    'GetAlarmPolicyPolicyEventConditionRuleFilterResult',
    'GetAlarmPolicyPolicyEventConditionRuleHierarchicalValueResult',
    'GetAlarmPolicyPolicyNoticeResult',
    'GetAlarmPolicyPolicyNoticeClsNoticeResult',
    'GetAlarmPolicyPolicyNoticeTagResult',
    'GetAlarmPolicyPolicyNoticeUrlNoticeResult',
    'GetAlarmPolicyPolicyNoticeUserNoticeResult',
    'GetAlarmPolicyPolicyTagResult',
    'GetAlarmPolicyPolicyTagInstanceResult',
    'GetAlarmPolicyPolicyTriggerTaskResult',
    'GetAlarmPolicyTriggerTaskResult',
    'GetBindingObjectsListResult',
    'GetDataDimensionResult',
    'GetDataListResult',
    'GetGrafanaPluginOverviewsPluginSetResult',
    'GetPolicyConditionsListResult',
    'GetPolicyConditionsListEventMetricResult',
    'GetPolicyConditionsListMetricResult',
    'GetPolicyGroupsListResult',
    'GetPolicyGroupsListConditionResult',
    'GetPolicyGroupsListEventConditionResult',
    'GetPolicyGroupsListReceiverResult',
    'GetProductEventDimensionResult',
    'GetProductEventListResult',
    'GetProductEventListAdditionMsgResult',
    'GetProductEventListDimensionResult',
    'GetProductEventListGroupInfoResult',
    'GetProductNamespaceListResult',
    'GetStatisticDataConditionResult',
    'GetStatisticDataDataResult',
    'GetStatisticDataDataPointResult',
    'GetStatisticDataDataPointDimensionResult',
    'GetStatisticDataDataPointValueResult',
    'GetTmpInstancesInstanceSetResult',
    'GetTmpInstancesInstanceSetGrantResult',
    'GetTmpInstancesInstanceSetTagSpecificationResult',
    'GetTmpInstancesTagFilterResult',
    'GetTmpRegionsRegionSetResult',
]

@pulumi.output_type
class AlarmNoticeClsNotice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logSetId":
            suggest = "log_set_id"
        elif key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmNoticeClsNotice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmNoticeClsNotice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmNoticeClsNotice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_set_id: str,
                 region: str,
                 topic_id: str,
                 enable: Optional[int] = None):
        """
        :param str log_set_id: Log collection Id.
        :param str region: Regional.
        :param str topic_id: Theme Id.
        :param int enable: Start-stop status, can not be transmitted, default enabled. 0= Disabled, 1= enabled.
        """
        pulumi.set(__self__, "log_set_id", log_set_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "topic_id", topic_id)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> str:
        """
        Log collection Id.
        """
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Regional.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        Theme Id.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter
    def enable(self) -> Optional[int]:
        """
        Start-stop status, can not be transmitted, default enabled. 0= Disabled, 1= enabled.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class AlarmNoticeUrlNotice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "isValid":
            suggest = "is_valid"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "validationCode":
            suggest = "validation_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmNoticeUrlNotice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmNoticeUrlNotice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmNoticeUrlNotice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 end_time: Optional[int] = None,
                 is_valid: Optional[int] = None,
                 start_time: Optional[int] = None,
                 validation_code: Optional[str] = None,
                 weekdays: Optional[Sequence[int]] = None):
        """
        :param str url: Callback URL (limited to 256 characters).
        :param int end_time: Notification End Time Seconds at the start of a day.
        :param int is_valid: If passed verification `0` is no, `1` is yes. Default `0`.
        :param int start_time: Notification Start Time Number of seconds at the start of a day.
        :param str validation_code: Verification code.
        :param Sequence[int] weekdays: Notification period 1-7 indicates Monday to Sunday.
        """
        pulumi.set(__self__, "url", url)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if is_valid is not None:
            pulumi.set(__self__, "is_valid", is_valid)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if validation_code is not None:
            pulumi.set(__self__, "validation_code", validation_code)
        if weekdays is not None:
            pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Callback URL (limited to 256 characters).
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[int]:
        """
        Notification End Time Seconds at the start of a day.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> Optional[int]:
        """
        If passed verification `0` is no, `1` is yes. Default `0`.
        """
        return pulumi.get(self, "is_valid")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        """
        Notification Start Time Number of seconds at the start of a day.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="validationCode")
    def validation_code(self) -> Optional[str]:
        """
        Verification code.
        """
        return pulumi.get(self, "validation_code")

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[Sequence[int]]:
        """
        Notification period 1-7 indicates Monday to Sunday.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class AlarmNoticeUserNotice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "noticeWays":
            suggest = "notice_ways"
        elif key == "receiverType":
            suggest = "receiver_type"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "groupIds":
            suggest = "group_ids"
        elif key == "needPhoneArriveNotice":
            suggest = "need_phone_arrive_notice"
        elif key == "phoneCallType":
            suggest = "phone_call_type"
        elif key == "phoneCircleInterval":
            suggest = "phone_circle_interval"
        elif key == "phoneCircleTimes":
            suggest = "phone_circle_times"
        elif key == "phoneInnerInterval":
            suggest = "phone_inner_interval"
        elif key == "phoneOrders":
            suggest = "phone_orders"
        elif key == "userIds":
            suggest = "user_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmNoticeUserNotice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmNoticeUserNotice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmNoticeUserNotice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: int,
                 notice_ways: Sequence[str],
                 receiver_type: str,
                 start_time: int,
                 group_ids: Optional[Sequence[int]] = None,
                 need_phone_arrive_notice: Optional[int] = None,
                 phone_call_type: Optional[str] = None,
                 phone_circle_interval: Optional[int] = None,
                 phone_circle_times: Optional[int] = None,
                 phone_inner_interval: Optional[int] = None,
                 phone_orders: Optional[Sequence[int]] = None,
                 user_ids: Optional[Sequence[int]] = None,
                 weekdays: Optional[Sequence[int]] = None):
        """
        :param int end_time: The number of seconds since the notification end time 00:00:00 (value range 0-86399).
        :param Sequence[str] notice_ways: Notification Channel List EMAIL=Mail SMS=SMS CALL=Telephone WECHAT=WeChat RTX=Enterprise WeChat.
        :param str receiver_type: Recipient Type USER=User GROUP=User Group.
        :param int start_time: The number of seconds since the notification start time 00:00:00 (value range 0-86399).
        :param Sequence[int] group_ids: User group ID list.
        :param int need_phone_arrive_notice: Contact notification required 0= No 1= Yes.
        :param str phone_call_type: Call type SYNC= Simultaneous call CIRCLE= Round call If this parameter is not specified, the default value is round call.
        :param int phone_circle_interval: Number of seconds between polls (value range: 60-900).
        :param int phone_circle_times: Number of telephone polls (value range: 1-5).
        :param int phone_inner_interval: Number of seconds between calls in a polling session (value range: 60-900).
        :param Sequence[int] phone_orders: Telephone polling list.
        :param Sequence[int] user_ids: User UID List.
        :param Sequence[int] weekdays: Notification period 1-7 indicates Monday to Sunday.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "notice_ways", notice_ways)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "start_time", start_time)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if need_phone_arrive_notice is not None:
            pulumi.set(__self__, "need_phone_arrive_notice", need_phone_arrive_notice)
        if phone_call_type is not None:
            pulumi.set(__self__, "phone_call_type", phone_call_type)
        if phone_circle_interval is not None:
            pulumi.set(__self__, "phone_circle_interval", phone_circle_interval)
        if phone_circle_times is not None:
            pulumi.set(__self__, "phone_circle_times", phone_circle_times)
        if phone_inner_interval is not None:
            pulumi.set(__self__, "phone_inner_interval", phone_inner_interval)
        if phone_orders is not None:
            pulumi.set(__self__, "phone_orders", phone_orders)
        if user_ids is not None:
            pulumi.set(__self__, "user_ids", user_ids)
        if weekdays is not None:
            pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        """
        The number of seconds since the notification end time 00:00:00 (value range 0-86399).
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="noticeWays")
    def notice_ways(self) -> Sequence[str]:
        """
        Notification Channel List EMAIL=Mail SMS=SMS CALL=Telephone WECHAT=WeChat RTX=Enterprise WeChat.
        """
        return pulumi.get(self, "notice_ways")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        """
        Recipient Type USER=User GROUP=User Group.
        """
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        The number of seconds since the notification start time 00:00:00 (value range 0-86399).
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[int]]:
        """
        User group ID list.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="needPhoneArriveNotice")
    def need_phone_arrive_notice(self) -> Optional[int]:
        """
        Contact notification required 0= No 1= Yes.
        """
        return pulumi.get(self, "need_phone_arrive_notice")

    @property
    @pulumi.getter(name="phoneCallType")
    def phone_call_type(self) -> Optional[str]:
        """
        Call type SYNC= Simultaneous call CIRCLE= Round call If this parameter is not specified, the default value is round call.
        """
        return pulumi.get(self, "phone_call_type")

    @property
    @pulumi.getter(name="phoneCircleInterval")
    def phone_circle_interval(self) -> Optional[int]:
        """
        Number of seconds between polls (value range: 60-900).
        """
        return pulumi.get(self, "phone_circle_interval")

    @property
    @pulumi.getter(name="phoneCircleTimes")
    def phone_circle_times(self) -> Optional[int]:
        """
        Number of telephone polls (value range: 1-5).
        """
        return pulumi.get(self, "phone_circle_times")

    @property
    @pulumi.getter(name="phoneInnerInterval")
    def phone_inner_interval(self) -> Optional[int]:
        """
        Number of seconds between calls in a polling session (value range: 60-900).
        """
        return pulumi.get(self, "phone_inner_interval")

    @property
    @pulumi.getter(name="phoneOrders")
    def phone_orders(self) -> Optional[Sequence[int]]:
        """
        Telephone polling list.
        """
        return pulumi.get(self, "phone_orders")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[Sequence[int]]:
        """
        User UID List.
        """
        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[Sequence[int]]:
        """
        Notification period 1-7 indicates Monday to Sunday.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class AlarmPolicyConditions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isUnionRule":
            suggest = "is_union_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_union_rule: Optional[int] = None,
                 rules: Optional[Sequence['outputs.AlarmPolicyConditionsRule']] = None):
        """
        :param int is_union_rule: The and or relation of indicator alarm rule.
        :param Sequence['AlarmPolicyConditionsRuleArgs'] rules: A list of metric trigger condition.
        """
        if is_union_rule is not None:
            pulumi.set(__self__, "is_union_rule", is_union_rule)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> Optional[int]:
        """
        The and or relation of indicator alarm rule.
        """
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.AlarmPolicyConditionsRule']]:
        """
        A list of metric trigger condition.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class AlarmPolicyConditionsRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuePeriod":
            suggest = "continue_period"
        elif key == "isPowerNotice":
            suggest = "is_power_notice"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "noticeFrequency":
            suggest = "notice_frequency"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyConditionsRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyConditionsRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyConditionsRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continue_period: Optional[int] = None,
                 description: Optional[str] = None,
                 filter: Optional['outputs.AlarmPolicyConditionsRuleFilter'] = None,
                 is_power_notice: Optional[int] = None,
                 metric_name: Optional[str] = None,
                 notice_frequency: Optional[int] = None,
                 operator: Optional[str] = None,
                 period: Optional[int] = None,
                 rule_type: Optional[str] = None,
                 unit: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param int continue_period: Number of periods.
        :param str description: Metric display name, which is used in the output parameter.
        :param 'AlarmPolicyConditionsRuleFilterArgs' filter: Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
        :param int is_power_notice: Whether the alarm frequency increases exponentially.
        :param str metric_name: Metric name or event name.
        :param int notice_frequency: Alarm interval in seconds.
        :param str operator: Operator.
        :param int period: Statistical period in seconds.
        :param str rule_type: Trigger condition type.
        :param str unit: Unit, which is used in the output parameter.
        :param str value: Threshold.
        """
        if continue_period is not None:
            pulumi.set(__self__, "continue_period", continue_period)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if is_power_notice is not None:
            pulumi.set(__self__, "is_power_notice", is_power_notice)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if notice_frequency is not None:
            pulumi.set(__self__, "notice_frequency", notice_frequency)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> Optional[int]:
        """
        Number of periods.
        """
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Metric display name, which is used in the output parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.AlarmPolicyConditionsRuleFilter']:
        """
        Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> Optional[int]:
        """
        Whether the alarm frequency increases exponentially.
        """
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        """
        Metric name or event name.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> Optional[int]:
        """
        Alarm interval in seconds.
        """
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        """
        Statistical period in seconds.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        """
        Trigger condition type.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        Unit, which is used in the output parameter.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Threshold.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmPolicyConditionsRuleFilter(dict):
    def __init__(__self__, *,
                 dimensions: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str dimensions: JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
        :param str type: Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
        """
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[str]:
        """
        JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmPolicyEventCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continuePeriod":
            suggest = "continue_period"
        elif key == "isPowerNotice":
            suggest = "is_power_notice"
        elif key == "metricName":
            suggest = "metric_name"
        elif key == "noticeFrequency":
            suggest = "notice_frequency"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyEventCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyEventCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyEventCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continue_period: Optional[int] = None,
                 description: Optional[str] = None,
                 filter: Optional['outputs.AlarmPolicyEventConditionFilter'] = None,
                 is_power_notice: Optional[int] = None,
                 metric_name: Optional[str] = None,
                 notice_frequency: Optional[int] = None,
                 operator: Optional[str] = None,
                 period: Optional[int] = None,
                 rule_type: Optional[str] = None,
                 unit: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param int continue_period: Number of periods.
        :param str description: Metric display name, which is used in the output parameter.
        :param 'AlarmPolicyEventConditionFilterArgs' filter: Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
        :param int is_power_notice: Whether the alarm frequency increases exponentially.
        :param str metric_name: Metric name or event name.
        :param int notice_frequency: Alarm interval in seconds.
        :param str operator: Operator.
        :param int period: Statistical period in seconds.
        :param str rule_type: Trigger condition type.
        :param str unit: Unit, which is used in the output parameter.
        :param str value: Threshold.
        """
        if continue_period is not None:
            pulumi.set(__self__, "continue_period", continue_period)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if is_power_notice is not None:
            pulumi.set(__self__, "is_power_notice", is_power_notice)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if notice_frequency is not None:
            pulumi.set(__self__, "notice_frequency", notice_frequency)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> Optional[int]:
        """
        Number of periods.
        """
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Metric display name, which is used in the output parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.AlarmPolicyEventConditionFilter']:
        """
        Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> Optional[int]:
        """
        Whether the alarm frequency increases exponentially.
        """
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        """
        Metric name or event name.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> Optional[int]:
        """
        Alarm interval in seconds.
        """
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        """
        Statistical period in seconds.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        """
        Trigger condition type.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        """
        Unit, which is used in the output parameter.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Threshold.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmPolicyEventConditionFilter(dict):
    def __init__(__self__, *,
                 dimensions: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str dimensions: JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
        :param str type: Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
        """
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[str]:
        """
        JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmPolicyFilter(dict):
    def __init__(__self__, *,
                 type: str,
                 dimensions: Optional[str] = None):
        """
        :param str type: Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
        :param str dimensions: JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
        """
        pulumi.set(__self__, "type", type)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[str]:
        """
        JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class AlarmPolicyPolicyTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag key.
        :param str value: Tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmPolicyTriggerTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "taskConfig":
            suggest = "task_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmPolicyTriggerTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmPolicyTriggerTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmPolicyTriggerTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 task_config: str,
                 type: str):
        """
        :param str task_config: Configuration information in JSON format.
        :param str type: Triggered task type.
        """
        pulumi.set(__self__, "task_config", task_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="taskConfig")
    def task_config(self) -> str:
        """
        Configuration information in JSON format.
        """
        return pulumi.get(self, "task_config")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Triggered task type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class BindingReceiverReceivers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notifyWays":
            suggest = "notify_ways"
        elif key == "receiverType":
            suggest = "receiver_type"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "receiveLanguage":
            suggest = "receive_language"
        elif key == "receiverGroupLists":
            suggest = "receiver_group_lists"
        elif key == "receiverUserLists":
            suggest = "receiver_user_lists"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BindingReceiverReceivers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BindingReceiverReceivers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BindingReceiverReceivers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notify_ways: Sequence[str],
                 receiver_type: str,
                 end_time: Optional[int] = None,
                 receive_language: Optional[str] = None,
                 receiver_group_lists: Optional[Sequence[int]] = None,
                 receiver_user_lists: Optional[Sequence[int]] = None,
                 start_time: Optional[int] = None):
        """
        :param Sequence[str] notify_ways: Method of warning notification.Optional `CALL`,`EMAIL`,`SITE`,`SMS`,`WECHAT`.
        :param str receiver_type: Receive type. Optional `group`,`user`.
        :param int end_time: End of alarm period. Meaning with `start_time`.
        :param str receive_language: Alert sending language. Optional `en-US`,`zh-CN`.
        :param Sequence[int] receiver_group_lists: Alarm receive group ID list.
        :param Sequence[int] receiver_user_lists: Alarm receiver ID list.
        :param int start_time: Alarm period start time. Valid value ranges: (0~86399). which removes the date after it is converted to Beijing time as a Unix timestamp, for example 7200 means '10:0:0'.
        """
        pulumi.set(__self__, "notify_ways", notify_ways)
        pulumi.set(__self__, "receiver_type", receiver_type)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if receive_language is not None:
            pulumi.set(__self__, "receive_language", receive_language)
        if receiver_group_lists is not None:
            pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        if receiver_user_lists is not None:
            pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Sequence[str]:
        """
        Method of warning notification.Optional `CALL`,`EMAIL`,`SITE`,`SMS`,`WECHAT`.
        """
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        """
        Receive type. Optional `group`,`user`.
        """
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[int]:
        """
        End of alarm period. Meaning with `start_time`.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="receiveLanguage")
    def receive_language(self) -> Optional[str]:
        """
        Alert sending language. Optional `en-US`,`zh-CN`.
        """
        return pulumi.get(self, "receive_language")

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Optional[Sequence[int]]:
        """
        Alarm receive group ID list.
        """
        return pulumi.get(self, "receiver_group_lists")

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Optional[Sequence[int]]:
        """
        Alarm receiver ID list.
        """
        return pulumi.get(self, "receiver_user_lists")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        """
        Alarm period start time. Valid value ranges: (0~86399). which removes the date after it is converted to Beijing time as a Unix timestamp, for example 7200 means '10:0:0'.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GrafanaSsoAccountRole(dict):
    def __init__(__self__, *,
                 organization: str,
                 role: str):
        """
        :param str organization: Grafana organization id string.
        :param str role: Grafana role, one of {Admin,Editor,Viewer}.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        Grafana organization id string.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Grafana role, one of {Admin,Editor,Viewer}.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class PolicyBindingObjectDimension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionsJson":
            suggest = "dimensions_json"
        elif key == "uniqueId":
            suggest = "unique_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyBindingObjectDimension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyBindingObjectDimension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyBindingObjectDimension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions_json: str,
                 unique_id: Optional[str] = None):
        """
        :param str dimensions_json: Represents a collection of dimensions of an object instance, json format.eg:'{"unInstanceId":"ins-ot3cq4bi"}'.
        :param str unique_id: Object unique ID.
        """
        pulumi.set(__self__, "dimensions_json", dimensions_json)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> str:
        """
        Represents a collection of dimensions of an object instance, json format.eg:'{"unInstanceId":"ins-ot3cq4bi"}'.
        """
        return pulumi.get(self, "dimensions_json")

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[str]:
        """
        Object unique ID.
        """
        return pulumi.get(self, "unique_id")


@pulumi.output_type
class TmpAlertGroupCustomReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedTimeRanges":
            suggest = "allowed_time_ranges"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterType":
            suggest = "cluster_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpAlertGroupCustomReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpAlertGroupCustomReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpAlertGroupCustomReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_time_ranges: Optional[Sequence['outputs.TmpAlertGroupCustomReceiverAllowedTimeRange']] = None,
                 cluster_id: Optional[str] = None,
                 cluster_type: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param Sequence['TmpAlertGroupCustomReceiverAllowedTimeRangeArgs'] allowed_time_ranges: Time ranges which allow alert message send.
        :param str cluster_id: Only effect when alertmanager in user cluster, this cluster id.
        :param str cluster_type: Only effect when alertmanager in user cluster, this cluster type (tke|eks|tdcc).
        :param str type: Custom receiver type, webhook|alertmanager.
        :param str url: Custom receiver address, can be accessed by process in prometheus instance subnet.
        """
        if allowed_time_ranges is not None:
            pulumi.set(__self__, "allowed_time_ranges", allowed_time_ranges)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="allowedTimeRanges")
    def allowed_time_ranges(self) -> Optional[Sequence['outputs.TmpAlertGroupCustomReceiverAllowedTimeRange']]:
        """
        Time ranges which allow alert message send.
        """
        return pulumi.get(self, "allowed_time_ranges")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        Only effect when alertmanager in user cluster, this cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        """
        Only effect when alertmanager in user cluster, this cluster type (tke|eks|tdcc).
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Custom receiver type, webhook|alertmanager.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Custom receiver address, can be accessed by process in prometheus instance subnet.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class TmpAlertGroupCustomReceiverAllowedTimeRange(dict):
    def __init__(__self__, *,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        """
        :param str end: Time range end, seconds since 0 o'clock.
        :param str start: Time range start, seconds since 0 o'clock.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        Time range end, seconds since 0 o'clock.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        Time range start, seconds since 0 o'clock.
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class TmpAlertGroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpAlertGroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpAlertGroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpAlertGroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 duration: Optional[str] = None,
                 expr: Optional[str] = None,
                 labels: Optional[Mapping[str, Any]] = None,
                 rule_name: Optional[str] = None,
                 state: Optional[int] = None):
        """
        :param Mapping[str, Any] annotations: Annotation of alert rule. `summary`, `description` is special annotation in prometheus, mapping `Alarm Object`, `Alarm Information` in alarm message.
        :param str duration: Rule alarm duration.
        :param str expr: Prometheus alert expression.
        :param Mapping[str, Any] labels: Labels of alert rule.
        :param str rule_name: Alert rule name.
        :param int state: Rule state. `2`-enable, `3`-disable, default `2`.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if expr is not None:
            pulumi.set(__self__, "expr", expr)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        """
        Annotation of alert rule. `summary`, `description` is special annotation in prometheus, mapping `Alarm Object`, `Alarm Information` in alarm message.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        """
        Rule alarm duration.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def expr(self) -> Optional[str]:
        """
        Prometheus alert expression.
        """
        return pulumi.get(self, "expr")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, Any]]:
        """
        Labels of alert rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        """
        Alert rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[int]:
        """
        Rule state. `2`-enable, `3`-disable, default `2`.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class TmpAlertRuleAnnotation(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: key.
        :param str value: value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpAlertRuleLabel(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: key.
        :param str value: value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "templateId":
            suggest = "template_id"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeAlertPolicyAlertRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeAlertPolicyAlertRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeAlertPolicyAlertRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 rules: Sequence['outputs.TmpTkeAlertPolicyAlertRuleRule'],
                 cluster_id: Optional[str] = None,
                 id: Optional[str] = None,
                 notification: Optional['outputs.TmpTkeAlertPolicyAlertRuleNotification'] = None,
                 template_id: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str name: Policy name.
        :param Sequence['TmpTkeAlertPolicyAlertRuleRuleArgs'] rules: A list of rules.
        :param str cluster_id: If the alarm policy is derived from the CRD resource definition of the user cluster, the ClusterId is the cluster ID to which it belongs.
        :param str id: Alarm policy ID. Note: This field may return null, indicating that a valid value could not be retrieved.
        :param 'TmpTkeAlertPolicyAlertRuleNotificationArgs' notification: Alarm channels, which may be returned using null in the template.
        :param str template_id: If the alarm is sent from a template, the TemplateId is the template id.
        :param str updated_at: Last modified time.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rules", rules)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if notification is not None:
            pulumi.set(__self__, "notification", notification)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.TmpTkeAlertPolicyAlertRuleRule']:
        """
        A list of rules.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        If the alarm policy is derived from the CRD resource definition of the user cluster, the ClusterId is the cluster ID to which it belongs.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Alarm policy ID. Note: This field may return null, indicating that a valid value could not be retrieved.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def notification(self) -> Optional['outputs.TmpTkeAlertPolicyAlertRuleNotification']:
        """
        Alarm channels, which may be returned using null in the template.
        """
        return pulumi.get(self, "notification")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        """
        If the alarm is sent from a template, the TemplateId is the template id.
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Last modified time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRuleNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertManager":
            suggest = "alert_manager"
        elif key == "notifyWays":
            suggest = "notify_ways"
        elif key == "phoneArriveNotice":
            suggest = "phone_arrive_notice"
        elif key == "phoneCircleInterval":
            suggest = "phone_circle_interval"
        elif key == "phoneCircleTimes":
            suggest = "phone_circle_times"
        elif key == "phoneInnerInterval":
            suggest = "phone_inner_interval"
        elif key == "phoneNotifyOrders":
            suggest = "phone_notify_orders"
        elif key == "receiverGroups":
            suggest = "receiver_groups"
        elif key == "repeatInterval":
            suggest = "repeat_interval"
        elif key == "timeRangeEnd":
            suggest = "time_range_end"
        elif key == "timeRangeStart":
            suggest = "time_range_start"
        elif key == "webHook":
            suggest = "web_hook"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeAlertPolicyAlertRuleNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeAlertPolicyAlertRuleNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeAlertPolicyAlertRuleNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 type: str,
                 alert_manager: Optional['outputs.TmpTkeAlertPolicyAlertRuleNotificationAlertManager'] = None,
                 notify_ways: Optional[Sequence[str]] = None,
                 phone_arrive_notice: Optional[bool] = None,
                 phone_circle_interval: Optional[int] = None,
                 phone_circle_times: Optional[int] = None,
                 phone_inner_interval: Optional[int] = None,
                 phone_notify_orders: Optional[Sequence[int]] = None,
                 receiver_groups: Optional[Sequence[str]] = None,
                 repeat_interval: Optional[str] = None,
                 time_range_end: Optional[str] = None,
                 time_range_start: Optional[str] = None,
                 web_hook: Optional[str] = None):
        """
        :param bool enabled: Whether it is enabled.
        :param str type: The channel type, which defaults to amp, supports the following `amp`, `webhook`, `alertmanager`.
        :param 'TmpTkeAlertPolicyAlertRuleNotificationAlertManagerArgs' alert_manager: If Type is alertmanager, the field is required. Note: This field may return null, indicating that a valid value could not be retrieved..
        :param Sequence[str] notify_ways: Alarm notification method. At present, there are SMS, EMAIL, CALL, WECHAT methods.
        :param bool phone_arrive_notice: Telephone alerts reach notifications.
        :param int phone_circle_interval: Effective end timeTelephone alarm wheel interval. Units: Seconds.
        :param int phone_circle_times: PhoneCircleTimes.
        :param int phone_inner_interval: Telephone alarm wheel intervals. Units: Seconds.
        :param Sequence[int] phone_notify_orders: Telephone alarm sequence.
        :param Sequence[str] receiver_groups: Alert Receiving Group (User Group).
        :param str repeat_interval: Convergence time.
        :param str time_range_end: Effective end time.
        :param str time_range_start: The time from which it takes effect.
        :param str web_hook: If Type is webhook, the field is required. Note: This field may return null, indicating that a valid value could not be retrieved.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "type", type)
        if alert_manager is not None:
            pulumi.set(__self__, "alert_manager", alert_manager)
        if notify_ways is not None:
            pulumi.set(__self__, "notify_ways", notify_ways)
        if phone_arrive_notice is not None:
            pulumi.set(__self__, "phone_arrive_notice", phone_arrive_notice)
        if phone_circle_interval is not None:
            pulumi.set(__self__, "phone_circle_interval", phone_circle_interval)
        if phone_circle_times is not None:
            pulumi.set(__self__, "phone_circle_times", phone_circle_times)
        if phone_inner_interval is not None:
            pulumi.set(__self__, "phone_inner_interval", phone_inner_interval)
        if phone_notify_orders is not None:
            pulumi.set(__self__, "phone_notify_orders", phone_notify_orders)
        if receiver_groups is not None:
            pulumi.set(__self__, "receiver_groups", receiver_groups)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if time_range_end is not None:
            pulumi.set(__self__, "time_range_end", time_range_end)
        if time_range_start is not None:
            pulumi.set(__self__, "time_range_start", time_range_start)
        if web_hook is not None:
            pulumi.set(__self__, "web_hook", web_hook)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether it is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The channel type, which defaults to amp, supports the following `amp`, `webhook`, `alertmanager`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="alertManager")
    def alert_manager(self) -> Optional['outputs.TmpTkeAlertPolicyAlertRuleNotificationAlertManager']:
        """
        If Type is alertmanager, the field is required. Note: This field may return null, indicating that a valid value could not be retrieved..
        """
        return pulumi.get(self, "alert_manager")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Optional[Sequence[str]]:
        """
        Alarm notification method. At present, there are SMS, EMAIL, CALL, WECHAT methods.
        """
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="phoneArriveNotice")
    def phone_arrive_notice(self) -> Optional[bool]:
        """
        Telephone alerts reach notifications.
        """
        return pulumi.get(self, "phone_arrive_notice")

    @property
    @pulumi.getter(name="phoneCircleInterval")
    def phone_circle_interval(self) -> Optional[int]:
        """
        Effective end timeTelephone alarm wheel interval. Units: Seconds.
        """
        return pulumi.get(self, "phone_circle_interval")

    @property
    @pulumi.getter(name="phoneCircleTimes")
    def phone_circle_times(self) -> Optional[int]:
        """
        PhoneCircleTimes.
        """
        return pulumi.get(self, "phone_circle_times")

    @property
    @pulumi.getter(name="phoneInnerInterval")
    def phone_inner_interval(self) -> Optional[int]:
        """
        Telephone alarm wheel intervals. Units: Seconds.
        """
        return pulumi.get(self, "phone_inner_interval")

    @property
    @pulumi.getter(name="phoneNotifyOrders")
    def phone_notify_orders(self) -> Optional[Sequence[int]]:
        """
        Telephone alarm sequence.
        """
        return pulumi.get(self, "phone_notify_orders")

    @property
    @pulumi.getter(name="receiverGroups")
    def receiver_groups(self) -> Optional[Sequence[str]]:
        """
        Alert Receiving Group (User Group).
        """
        return pulumi.get(self, "receiver_groups")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        """
        Convergence time.
        """
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter(name="timeRangeEnd")
    def time_range_end(self) -> Optional[str]:
        """
        Effective end time.
        """
        return pulumi.get(self, "time_range_end")

    @property
    @pulumi.getter(name="timeRangeStart")
    def time_range_start(self) -> Optional[str]:
        """
        The time from which it takes effect.
        """
        return pulumi.get(self, "time_range_start")

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> Optional[str]:
        """
        If Type is webhook, the field is required. Note: This field may return null, indicating that a valid value could not be retrieved.
        """
        return pulumi.get(self, "web_hook")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRuleNotificationAlertManager(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterType":
            suggest = "cluster_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeAlertPolicyAlertRuleNotificationAlertManager. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeAlertPolicyAlertRuleNotificationAlertManager.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeAlertPolicyAlertRuleNotificationAlertManager.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 cluster_id: Optional[str] = None,
                 cluster_type: Optional[str] = None):
        """
        :param str url: Alertmanager url.
        :param str cluster_id: The ID of the cluster where the alertmanager is deployed. Note: This field may return null, indicating that a valid value could not be retrieved.
        :param str cluster_type: Alertmanager is deployed in the cluster type. Note: This field may return null, indicating that a valid value could not be retrieved.
        """
        pulumi.set(__self__, "url", url)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Alertmanager url.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        The ID of the cluster where the alertmanager is deployed. Note: This field may return null, indicating that a valid value could not be retrieved.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        """
        Alertmanager is deployed in the cluster type. Note: This field may return null, indicating that a valid value could not be retrieved.
        """
        return pulumi.get(self, "cluster_type")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRuleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "for":
            suggest = "for_"
        elif key == "ruleState":
            suggest = "rule_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeAlertPolicyAlertRuleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeAlertPolicyAlertRuleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeAlertPolicyAlertRuleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 for_: str,
                 labels: Sequence['outputs.TmpTkeAlertPolicyAlertRuleRuleLabel'],
                 name: str,
                 rule: str,
                 template: str,
                 annotations: Optional[Sequence['outputs.TmpTkeAlertPolicyAlertRuleRuleAnnotation']] = None,
                 describe: Optional[str] = None,
                 rule_state: Optional[int] = None):
        """
        :param str for_: Time of duration.
        :param Sequence['TmpTkeAlertPolicyAlertRuleRuleLabelArgs'] labels: Extra labels.
        :param str name: Rule name.
        :param str rule: Prometheus statement.
        :param str template: Alert sending template.
        :param Sequence['TmpTkeAlertPolicyAlertRuleRuleAnnotationArgs'] annotations: Refer to annotations in prometheus rule.
        :param str describe: A description of the rule.
        :param int rule_state: Alarm rule status.
        """
        pulumi.set(__self__, "for_", for_)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rule", rule)
        pulumi.set(__self__, "template", template)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if describe is not None:
            pulumi.set(__self__, "describe", describe)
        if rule_state is not None:
            pulumi.set(__self__, "rule_state", rule_state)

    @property
    @pulumi.getter(name="for")
    def for_(self) -> str:
        """
        Time of duration.
        """
        return pulumi.get(self, "for_")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.TmpTkeAlertPolicyAlertRuleRuleLabel']:
        """
        Extra labels.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rule(self) -> str:
        """
        Prometheus statement.
        """
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter
    def template(self) -> str:
        """
        Alert sending template.
        """
        return pulumi.get(self, "template")

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Sequence['outputs.TmpTkeAlertPolicyAlertRuleRuleAnnotation']]:
        """
        Refer to annotations in prometheus rule.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def describe(self) -> Optional[str]:
        """
        A description of the rule.
        """
        return pulumi.get(self, "describe")

    @property
    @pulumi.getter(name="ruleState")
    def rule_state(self) -> Optional[int]:
        """
        Alarm rule status.
        """
        return pulumi.get(self, "rule_state")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRuleRuleAnnotation(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Name of map.
        :param str value: Value of map.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of map.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of map.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpTkeAlertPolicyAlertRuleRuleLabel(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Name of map.
        :param str value: Value of map.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of map.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of map.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpTkeClusterAgentAgents(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "enableExternal":
            suggest = "enable_external"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "externalLabels":
            suggest = "external_labels"
        elif key == "inClusterPodConfig":
            suggest = "in_cluster_pod_config"
        elif key == "notInstallBasicScrape":
            suggest = "not_install_basic_scrape"
        elif key == "notScrape":
            suggest = "not_scrape"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeClusterAgentAgents. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeClusterAgentAgents.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeClusterAgentAgents.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_type: str,
                 enable_external: bool,
                 region: str,
                 cluster_name: Optional[str] = None,
                 external_labels: Optional[Sequence['outputs.TmpTkeClusterAgentAgentsExternalLabel']] = None,
                 in_cluster_pod_config: Optional['outputs.TmpTkeClusterAgentAgentsInClusterPodConfig'] = None,
                 not_install_basic_scrape: Optional[bool] = None,
                 not_scrape: Optional[bool] = None,
                 status: Optional[str] = None):
        """
        :param str cluster_id: An id identify the cluster, like `cls-xxxxxx`.
        :param str cluster_type: Type of cluster.
        :param bool enable_external: Whether to enable the public network CLB.
        :param str region: Limitation of region.
        :param str cluster_name: the name of the cluster.
        :param Sequence['TmpTkeClusterAgentAgentsExternalLabelArgs'] external_labels: All metrics collected by the cluster will carry these labels.
        :param 'TmpTkeClusterAgentAgentsInClusterPodConfigArgs' in_cluster_pod_config: Pod configuration for components deployed in the cluster.
        :param bool not_install_basic_scrape: Whether to install the default collection configuration.
        :param bool not_scrape: Whether to collect indicators, true means drop all indicators, false means collect default indicators.
        :param str status: agent state, `normal`, `abnormal`.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "enable_external", enable_external)
        pulumi.set(__self__, "region", region)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if external_labels is not None:
            pulumi.set(__self__, "external_labels", external_labels)
        if in_cluster_pod_config is not None:
            pulumi.set(__self__, "in_cluster_pod_config", in_cluster_pod_config)
        if not_install_basic_scrape is not None:
            pulumi.set(__self__, "not_install_basic_scrape", not_install_basic_scrape)
        if not_scrape is not None:
            pulumi.set(__self__, "not_scrape", not_scrape)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        An id identify the cluster, like `cls-xxxxxx`.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        Type of cluster.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="enableExternal")
    def enable_external(self) -> bool:
        """
        Whether to enable the public network CLB.
        """
        return pulumi.get(self, "enable_external")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Limitation of region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        the name of the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="externalLabels")
    def external_labels(self) -> Optional[Sequence['outputs.TmpTkeClusterAgentAgentsExternalLabel']]:
        """
        All metrics collected by the cluster will carry these labels.
        """
        return pulumi.get(self, "external_labels")

    @property
    @pulumi.getter(name="inClusterPodConfig")
    def in_cluster_pod_config(self) -> Optional['outputs.TmpTkeClusterAgentAgentsInClusterPodConfig']:
        """
        Pod configuration for components deployed in the cluster.
        """
        return pulumi.get(self, "in_cluster_pod_config")

    @property
    @pulumi.getter(name="notInstallBasicScrape")
    def not_install_basic_scrape(self) -> Optional[bool]:
        """
        Whether to install the default collection configuration.
        """
        return pulumi.get(self, "not_install_basic_scrape")

    @property
    @pulumi.getter(name="notScrape")
    def not_scrape(self) -> Optional[bool]:
        """
        Whether to collect indicators, true means drop all indicators, false means collect default indicators.
        """
        return pulumi.get(self, "not_scrape")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        agent state, `normal`, `abnormal`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class TmpTkeClusterAgentAgentsExternalLabel(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None):
        """
        :param str name: Indicator name.
        :param str value: Index value.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Indicator name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Index value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpTkeClusterAgentAgentsInClusterPodConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostNet":
            suggest = "host_net"
        elif key == "nodeSelectors":
            suggest = "node_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeClusterAgentAgentsInClusterPodConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeClusterAgentAgentsInClusterPodConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeClusterAgentAgentsInClusterPodConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_net: bool,
                 node_selectors: Optional[Sequence['outputs.TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector']] = None,
                 tolerations: Optional[Sequence['outputs.TmpTkeClusterAgentAgentsInClusterPodConfigToleration']] = None):
        """
        :param bool host_net: Whether to use HostNetWork.
        :param Sequence['TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelectorArgs'] node_selectors: Specify the pod to run the node.
        :param Sequence['TmpTkeClusterAgentAgentsInClusterPodConfigTolerationArgs'] tolerations: Tolerate Stain.
        """
        pulumi.set(__self__, "host_net", host_net)
        if node_selectors is not None:
            pulumi.set(__self__, "node_selectors", node_selectors)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter(name="hostNet")
    def host_net(self) -> bool:
        """
        Whether to use HostNetWork.
        """
        return pulumi.get(self, "host_net")

    @property
    @pulumi.getter(name="nodeSelectors")
    def node_selectors(self) -> Optional[Sequence['outputs.TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector']]:
        """
        Specify the pod to run the node.
        """
        return pulumi.get(self, "node_selectors")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.TmpTkeClusterAgentAgentsInClusterPodConfigToleration']]:
        """
        Tolerate Stain.
        """
        return pulumi.get(self, "tolerations")


@pulumi.output_type
class TmpTkeClusterAgentAgentsInClusterPodConfigNodeSelector(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: The pod configuration name of the component deployed in the cluster.
        :param str value: Pod configuration values for components deployed in the cluster.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The pod configuration name of the component deployed in the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Pod configuration values for components deployed in the cluster.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TmpTkeClusterAgentAgentsInClusterPodConfigToleration(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None):
        """
        :param str effect: blemish effect to match.
        :param str key: The taint key to which the tolerance applies.
        :param str operator: key-value relationship.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        blemish effect to match.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The taint key to which the tolerance applies.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        key-value relationship.
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class TmpTkeConfigPodMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeConfigPodMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeConfigPodMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeConfigPodMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        """
        :param str config: Config.
        :param str name: Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
        :param str template_id: Used for output parameters, if the configuration comes from a template, it is the template id.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        Config.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        """
        Used for output parameters, if the configuration comes from a template, it is the template id.
        """
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeConfigRawJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeConfigRawJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeConfigRawJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeConfigRawJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        """
        :param str config: Config.
        :param str name: Name.
        :param str template_id: Used for output parameters, if the configuration comes from a template, it is the template id.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        Config.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        """
        Used for output parameters, if the configuration comes from a template, it is the template id.
        """
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeConfigServiceMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeConfigServiceMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeConfigServiceMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeConfigServiceMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        """
        :param str config: Config.
        :param str name: Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
        :param str template_id: Used for output parameters, if the configuration comes from a template, it is the template id.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        Config.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        """
        Used for output parameters, if the configuration comes from a template, it is the template id.
        """
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeGlobalNotificationNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertManagers":
            suggest = "alert_managers"
        elif key == "notifyWays":
            suggest = "notify_ways"
        elif key == "phoneArriveNotice":
            suggest = "phone_arrive_notice"
        elif key == "phoneCircleInterval":
            suggest = "phone_circle_interval"
        elif key == "phoneCircleTimes":
            suggest = "phone_circle_times"
        elif key == "phoneInnerInterval":
            suggest = "phone_inner_interval"
        elif key == "phoneNotifyOrders":
            suggest = "phone_notify_orders"
        elif key == "receiverGroups":
            suggest = "receiver_groups"
        elif key == "repeatInterval":
            suggest = "repeat_interval"
        elif key == "timeRangeEnd":
            suggest = "time_range_end"
        elif key == "timeRangeStart":
            suggest = "time_range_start"
        elif key == "webHook":
            suggest = "web_hook"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeGlobalNotificationNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeGlobalNotificationNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeGlobalNotificationNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 type: str,
                 alert_managers: Optional[Sequence['outputs.TmpTkeGlobalNotificationNotificationAlertManager']] = None,
                 notify_ways: Optional[Sequence[str]] = None,
                 phone_arrive_notice: Optional[bool] = None,
                 phone_circle_interval: Optional[int] = None,
                 phone_circle_times: Optional[int] = None,
                 phone_inner_interval: Optional[int] = None,
                 phone_notify_orders: Optional[Sequence[int]] = None,
                 receiver_groups: Optional[Sequence[str]] = None,
                 repeat_interval: Optional[str] = None,
                 time_range_end: Optional[str] = None,
                 time_range_start: Optional[str] = None,
                 web_hook: Optional[str] = None):
        """
        :param bool enabled: Alarm notification switch.
        :param str type: Alarm notification type, Valid values: `amp`, `webhook`, `alertmanager`.
        :param Sequence['TmpTkeGlobalNotificationNotificationAlertManagerArgs'] alert_managers: Alert manager, if Type is `alertmanager`, this field is required.
        :param Sequence[str] notify_ways: Alarm notification method, Valid values: `SMS`, `EMAIL`, `CALL`, `WECHAT`.
        :param bool phone_arrive_notice: Phone Alarm Reach Notification, NotifyWay is `CALL`, and this parameter is used.
        :param int phone_circle_interval: Telephone alarm off-wheel interval, NotifyWay is `CALL`, and this parameter is used.
        :param int phone_circle_times: Number of phone alerts (user group), NotifyWay is `CALL`, and this parameter is used.
        :param int phone_inner_interval: Interval between telephone alarm rounds, NotifyWay is `CALL`, and this parameter is used.
        :param Sequence[int] phone_notify_orders: Phone alert sequence, NotifyWay is `CALL`, and this parameter is used.
        :param Sequence[str] receiver_groups: Alarm receiving group(user group).
        :param str repeat_interval: Convergence time.
        :param str time_range_end: Effective end time.
        :param str time_range_start: Effective start time.
        :param str web_hook: Web hook, if Type is `webhook`, this field is required.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "type", type)
        if alert_managers is not None:
            pulumi.set(__self__, "alert_managers", alert_managers)
        if notify_ways is not None:
            pulumi.set(__self__, "notify_ways", notify_ways)
        if phone_arrive_notice is not None:
            pulumi.set(__self__, "phone_arrive_notice", phone_arrive_notice)
        if phone_circle_interval is not None:
            pulumi.set(__self__, "phone_circle_interval", phone_circle_interval)
        if phone_circle_times is not None:
            pulumi.set(__self__, "phone_circle_times", phone_circle_times)
        if phone_inner_interval is not None:
            pulumi.set(__self__, "phone_inner_interval", phone_inner_interval)
        if phone_notify_orders is not None:
            pulumi.set(__self__, "phone_notify_orders", phone_notify_orders)
        if receiver_groups is not None:
            pulumi.set(__self__, "receiver_groups", receiver_groups)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if time_range_end is not None:
            pulumi.set(__self__, "time_range_end", time_range_end)
        if time_range_start is not None:
            pulumi.set(__self__, "time_range_start", time_range_start)
        if web_hook is not None:
            pulumi.set(__self__, "web_hook", web_hook)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Alarm notification switch.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Alarm notification type, Valid values: `amp`, `webhook`, `alertmanager`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="alertManagers")
    def alert_managers(self) -> Optional[Sequence['outputs.TmpTkeGlobalNotificationNotificationAlertManager']]:
        """
        Alert manager, if Type is `alertmanager`, this field is required.
        """
        return pulumi.get(self, "alert_managers")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Optional[Sequence[str]]:
        """
        Alarm notification method, Valid values: `SMS`, `EMAIL`, `CALL`, `WECHAT`.
        """
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="phoneArriveNotice")
    def phone_arrive_notice(self) -> Optional[bool]:
        """
        Phone Alarm Reach Notification, NotifyWay is `CALL`, and this parameter is used.
        """
        return pulumi.get(self, "phone_arrive_notice")

    @property
    @pulumi.getter(name="phoneCircleInterval")
    def phone_circle_interval(self) -> Optional[int]:
        """
        Telephone alarm off-wheel interval, NotifyWay is `CALL`, and this parameter is used.
        """
        return pulumi.get(self, "phone_circle_interval")

    @property
    @pulumi.getter(name="phoneCircleTimes")
    def phone_circle_times(self) -> Optional[int]:
        """
        Number of phone alerts (user group), NotifyWay is `CALL`, and this parameter is used.
        """
        return pulumi.get(self, "phone_circle_times")

    @property
    @pulumi.getter(name="phoneInnerInterval")
    def phone_inner_interval(self) -> Optional[int]:
        """
        Interval between telephone alarm rounds, NotifyWay is `CALL`, and this parameter is used.
        """
        return pulumi.get(self, "phone_inner_interval")

    @property
    @pulumi.getter(name="phoneNotifyOrders")
    def phone_notify_orders(self) -> Optional[Sequence[int]]:
        """
        Phone alert sequence, NotifyWay is `CALL`, and this parameter is used.
        """
        return pulumi.get(self, "phone_notify_orders")

    @property
    @pulumi.getter(name="receiverGroups")
    def receiver_groups(self) -> Optional[Sequence[str]]:
        """
        Alarm receiving group(user group).
        """
        return pulumi.get(self, "receiver_groups")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        """
        Convergence time.
        """
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter(name="timeRangeEnd")
    def time_range_end(self) -> Optional[str]:
        """
        Effective end time.
        """
        return pulumi.get(self, "time_range_end")

    @property
    @pulumi.getter(name="timeRangeStart")
    def time_range_start(self) -> Optional[str]:
        """
        Effective start time.
        """
        return pulumi.get(self, "time_range_start")

    @property
    @pulumi.getter(name="webHook")
    def web_hook(self) -> Optional[str]:
        """
        Web hook, if Type is `webhook`, this field is required.
        """
        return pulumi.get(self, "web_hook")


@pulumi.output_type
class TmpTkeGlobalNotificationNotificationAlertManager(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterType":
            suggest = "cluster_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeGlobalNotificationNotificationAlertManager. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeGlobalNotificationNotificationAlertManager.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeGlobalNotificationNotificationAlertManager.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 cluster_id: Optional[str] = None,
                 cluster_type: Optional[str] = None):
        """
        :param str url: Alert manager url.
        :param str cluster_id: Cluster id.
        :param str cluster_type: Cluster type.
        """
        pulumi.set(__self__, "url", url)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Alert manager url.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        Cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        """
        Cluster type.
        """
        return pulumi.get(self, "cluster_type")


@pulumi.output_type
class TmpTkeTemplateAttachmentTargets(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "syncTime":
            suggest = "sync_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateAttachmentTargets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateAttachmentTargets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateAttachmentTargets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 region: str,
                 cluster_id: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 cluster_type: Optional[str] = None,
                 instance_name: Optional[str] = None,
                 sync_time: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str instance_id: instance id.
        :param str region: target area.
        :param str cluster_id: ID of the cluster.
        :param str cluster_name: Name the cluster.
        :param str cluster_type: Cluster type.
        :param str instance_name: Name of the prometheus instance.
        :param str sync_time: Last sync template time.
        :param str version: Template version currently in use.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "region", region)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if sync_time is not None:
            pulumi.set(__self__, "sync_time", sync_time)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        target area.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        Name the cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        """
        Cluster type.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        Name of the prometheus instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="syncTime")
    def sync_time(self) -> Optional[str]:
        """
        Last sync template time.
        """
        return pulumi.get(self, "sync_time")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Template version currently in use.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class TmpTkeTemplateTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDefault":
            suggest = "is_default"
        elif key == "podMonitors":
            suggest = "pod_monitors"
        elif key == "rawJobs":
            suggest = "raw_jobs"
        elif key == "recordRules":
            suggest = "record_rules"
        elif key == "serviceMonitors":
            suggest = "service_monitors"
        elif key == "templateId":
            suggest = "template_id"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: str,
                 name: str,
                 describe: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 pod_monitors: Optional[Sequence['outputs.TmpTkeTemplateTemplatePodMonitor']] = None,
                 raw_jobs: Optional[Sequence['outputs.TmpTkeTemplateTemplateRawJob']] = None,
                 record_rules: Optional[Sequence['outputs.TmpTkeTemplateTemplateRecordRule']] = None,
                 service_monitors: Optional[Sequence['outputs.TmpTkeTemplateTemplateServiceMonitor']] = None,
                 template_id: Optional[str] = None,
                 update_time: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str level: Template dimensions, the following types are supported `instance` instance level, `cluster` cluster level.
        :param str name: Template name.
        :param str describe: Template description.
        :param bool is_default: Whether the system-supplied default template is used for outgoing references.
        :param Sequence['TmpTkeTemplateTemplatePodMonitorArgs'] pod_monitors: Effective when Level is a cluster, A list of PodMonitors rules in the template.
        :param Sequence['TmpTkeTemplateTemplateRawJobArgs'] raw_jobs: Effective when Level is a cluster, A list of RawJobs rules in the template.
        :param Sequence['TmpTkeTemplateTemplateRecordRuleArgs'] record_rules: Effective when Level is instance, A list of aggregation rules in the template.
        :param Sequence['TmpTkeTemplateTemplateServiceMonitorArgs'] service_monitors: Effective when Level is a cluster, A list of ServiceMonitor rules in the template.
        :param str template_id: The ID of the template, which is used for the outgoing reference.
        :param str update_time: Last updated, for outgoing references.
        :param str version: Whether the system-supplied default template is used for outgoing references.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "name", name)
        if describe is not None:
            pulumi.set(__self__, "describe", describe)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if pod_monitors is not None:
            pulumi.set(__self__, "pod_monitors", pod_monitors)
        if raw_jobs is not None:
            pulumi.set(__self__, "raw_jobs", raw_jobs)
        if record_rules is not None:
            pulumi.set(__self__, "record_rules", record_rules)
        if service_monitors is not None:
            pulumi.set(__self__, "service_monitors", service_monitors)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        Template dimensions, the following types are supported `instance` instance level, `cluster` cluster level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Template name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def describe(self) -> Optional[str]:
        """
        Template description.
        """
        return pulumi.get(self, "describe")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        Whether the system-supplied default template is used for outgoing references.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="podMonitors")
    def pod_monitors(self) -> Optional[Sequence['outputs.TmpTkeTemplateTemplatePodMonitor']]:
        """
        Effective when Level is a cluster, A list of PodMonitors rules in the template.
        """
        return pulumi.get(self, "pod_monitors")

    @property
    @pulumi.getter(name="rawJobs")
    def raw_jobs(self) -> Optional[Sequence['outputs.TmpTkeTemplateTemplateRawJob']]:
        """
        Effective when Level is a cluster, A list of RawJobs rules in the template.
        """
        return pulumi.get(self, "raw_jobs")

    @property
    @pulumi.getter(name="recordRules")
    def record_rules(self) -> Optional[Sequence['outputs.TmpTkeTemplateTemplateRecordRule']]:
        """
        Effective when Level is instance, A list of aggregation rules in the template.
        """
        return pulumi.get(self, "record_rules")

    @property
    @pulumi.getter(name="serviceMonitors")
    def service_monitors(self) -> Optional[Sequence['outputs.TmpTkeTemplateTemplateServiceMonitor']]:
        """
        Effective when Level is a cluster, A list of ServiceMonitor rules in the template.
        """
        return pulumi.get(self, "service_monitors")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        """
        The ID of the template, which is used for the outgoing reference.
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Last updated, for outgoing references.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Whether the system-supplied default template is used for outgoing references.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class TmpTkeTemplateTemplatePodMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateTemplatePodMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateTemplatePodMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateTemplatePodMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        """
        :param str config: Config.
        :param str name: Name.
        :param str template_id: Used for the argument, if the configuration comes to the template, the template id.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        Config.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        """
        Used for the argument, if the configuration comes to the template, the template id.
        """
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeTemplateTemplateRawJob(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateTemplateRawJob. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateTemplateRawJob.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateTemplateRawJob.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        """
        :param str config: Config.
        :param str name: Name.
        :param str template_id: Used for the argument, if the configuration comes to the template, the template id.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        Config.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        """
        Used for the argument, if the configuration comes to the template, the template id.
        """
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeTemplateTemplateRecordRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateTemplateRecordRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateTemplateRecordRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateTemplateRecordRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        """
        :param str config: Config.
        :param str name: Name.
        :param str template_id: Used for the argument, if the configuration comes to the template, the template id.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        Config.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        """
        Used for the argument, if the configuration comes to the template, the template id.
        """
        return pulumi.get(self, "template_id")


@pulumi.output_type
class TmpTkeTemplateTemplateServiceMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TmpTkeTemplateTemplateServiceMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TmpTkeTemplateTemplateServiceMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TmpTkeTemplateTemplateServiceMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: str,
                 name: str,
                 template_id: Optional[str] = None):
        """
        :param str config: Config.
        :param str name: Name.
        :param str template_id: Used for the argument, if the configuration comes to the template, the template id.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "name", name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        Config.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        """
        Used for the argument, if the configuration comes to the template, the template id.
        """
        return pulumi.get(self, "template_id")


@pulumi.output_type
class GetAlarmAllNamespacesCommonNamespaceResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetAlarmAllNamespacesCommonNamespaceDimensionResult'],
                 id: str,
                 monitor_type: str,
                 name: str):
        """
        :param Sequence['GetAlarmAllNamespacesCommonNamespaceDimensionArgs'] dimensions: Dimension Information.
        :param str id: Namespace labeling.
        :param str monitor_type: Monitoring type.
        :param str name: Namespace name.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monitor_type", monitor_type)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetAlarmAllNamespacesCommonNamespaceDimensionResult']:
        """
        Dimension Information.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Namespace labeling.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> str:
        """
        Monitoring type.
        """
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Namespace name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAlarmAllNamespacesCommonNamespaceDimensionResult(dict):
    def __init__(__self__, *,
                 can_filter_history: bool,
                 can_filter_policy: bool,
                 can_group_by: bool,
                 is_multiple: bool,
                 is_mutable: bool,
                 is_required: bool,
                 is_visible: bool,
                 key: str,
                 must_group_by: bool,
                 name: str,
                 operators: Sequence['outputs.GetAlarmAllNamespacesCommonNamespaceDimensionOperatorResult'],
                 show_value_replace: str):
        """
        :param bool can_filter_history: Can it be used to filter alarm history.
        :param bool can_filter_policy: Can it be used to filter the policy list.
        :param bool can_group_by: Can it be used as an aggregation dimension.
        :param bool is_multiple: Do you support multiple selections.
        :param bool is_mutable: Can I modify it after creation.
        :param bool is_required: Required or not.
        :param bool is_visible: Whether to display to users.
        :param str key: Dimension key identifier, backend English name.
        :param bool must_group_by: Must it be used as an aggregation dimension.
        :param str name: Namespace name.
        :param Sequence['GetAlarmAllNamespacesCommonNamespaceDimensionOperatorArgs'] operators: List of supported operators.
        :param str show_value_replace: Key to replace in front-end translation.
        """
        pulumi.set(__self__, "can_filter_history", can_filter_history)
        pulumi.set(__self__, "can_filter_policy", can_filter_policy)
        pulumi.set(__self__, "can_group_by", can_group_by)
        pulumi.set(__self__, "is_multiple", is_multiple)
        pulumi.set(__self__, "is_mutable", is_mutable)
        pulumi.set(__self__, "is_required", is_required)
        pulumi.set(__self__, "is_visible", is_visible)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "must_group_by", must_group_by)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operators", operators)
        pulumi.set(__self__, "show_value_replace", show_value_replace)

    @property
    @pulumi.getter(name="canFilterHistory")
    def can_filter_history(self) -> bool:
        """
        Can it be used to filter alarm history.
        """
        return pulumi.get(self, "can_filter_history")

    @property
    @pulumi.getter(name="canFilterPolicy")
    def can_filter_policy(self) -> bool:
        """
        Can it be used to filter the policy list.
        """
        return pulumi.get(self, "can_filter_policy")

    @property
    @pulumi.getter(name="canGroupBy")
    def can_group_by(self) -> bool:
        """
        Can it be used as an aggregation dimension.
        """
        return pulumi.get(self, "can_group_by")

    @property
    @pulumi.getter(name="isMultiple")
    def is_multiple(self) -> bool:
        """
        Do you support multiple selections.
        """
        return pulumi.get(self, "is_multiple")

    @property
    @pulumi.getter(name="isMutable")
    def is_mutable(self) -> bool:
        """
        Can I modify it after creation.
        """
        return pulumi.get(self, "is_mutable")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> bool:
        """
        Required or not.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter(name="isVisible")
    def is_visible(self) -> bool:
        """
        Whether to display to users.
        """
        return pulumi.get(self, "is_visible")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Dimension key identifier, backend English name.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="mustGroupBy")
    def must_group_by(self) -> bool:
        """
        Must it be used as an aggregation dimension.
        """
        return pulumi.get(self, "must_group_by")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Namespace name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operators(self) -> Sequence['outputs.GetAlarmAllNamespacesCommonNamespaceDimensionOperatorResult']:
        """
        List of supported operators.
        """
        return pulumi.get(self, "operators")

    @property
    @pulumi.getter(name="showValueReplace")
    def show_value_replace(self) -> str:
        """
        Key to replace in front-end translation.
        """
        return pulumi.get(self, "show_value_replace")


@pulumi.output_type
class GetAlarmAllNamespacesCommonNamespaceDimensionOperatorResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Namespace labeling.
        :param str name: Namespace name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Namespace labeling.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Namespace name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAlarmAllNamespacesCustomNamespacesNewsResult(dict):
    def __init__(__self__, *,
                 available_regions: Sequence[str],
                 config: str,
                 dashboard_id: str,
                 id: str,
                 name: str,
                 product_name: str,
                 sort_id: int,
                 value: str):
        """
        :param Sequence[str] available_regions: List of supported regions.
        :param str config: Configuration information.
        :param str dashboard_id: Unique representation in dashboard.
        :param str id: Namespace labeling.
        :param str name: Namespace name.
        :param str product_name: Product Name.
        :param int sort_id: Sort Id.
        :param str value: Namespace value.
        """
        pulumi.set(__self__, "available_regions", available_regions)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "dashboard_id", dashboard_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "sort_id", sort_id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="availableRegions")
    def available_regions(self) -> Sequence[str]:
        """
        List of supported regions.
        """
        return pulumi.get(self, "available_regions")

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        Configuration information.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> str:
        """
        Unique representation in dashboard.
        """
        return pulumi.get(self, "dashboard_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Namespace labeling.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Namespace name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        """
        Product Name.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="sortId")
    def sort_id(self) -> int:
        """
        Sort Id.
        """
        return pulumi.get(self, "sort_id")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Namespace value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmAllNamespacesQceNamespacesNewsResult(dict):
    def __init__(__self__, *,
                 available_regions: Sequence[str],
                 config: str,
                 dashboard_id: str,
                 id: str,
                 name: str,
                 product_name: str,
                 sort_id: int,
                 value: str):
        """
        :param Sequence[str] available_regions: List of supported regions.
        :param str config: Configuration information.
        :param str dashboard_id: Unique representation in dashboard.
        :param str id: Namespace labeling.
        :param str name: Namespace name.
        :param str product_name: Product Name.
        :param int sort_id: Sort Id.
        :param str value: Namespace value.
        """
        pulumi.set(__self__, "available_regions", available_regions)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "dashboard_id", dashboard_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "sort_id", sort_id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="availableRegions")
    def available_regions(self) -> Sequence[str]:
        """
        List of supported regions.
        """
        return pulumi.get(self, "available_regions")

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        Configuration information.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> str:
        """
        Unique representation in dashboard.
        """
        return pulumi.get(self, "dashboard_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Namespace labeling.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Namespace name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        """
        Product Name.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="sortId")
    def sort_id(self) -> int:
        """
        Sort Id.
        """
        return pulumi.get(self, "sort_id")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Namespace value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmBasicAlarmsAlarmResult(dict):
    def __init__(__self__, *,
                 alarm_status: str,
                 alarm_type: int,
                 content: str,
                 dimensions: str,
                 duration: int,
                 first_occur_time: str,
                 group_id: int,
                 group_name: str,
                 id: int,
                 instance_groups: Sequence['outputs.GetAlarmBasicAlarmsAlarmInstanceGroupResult'],
                 last_occur_time: str,
                 metric_id: int,
                 metric_name: str,
                 notify_ways: Sequence[str],
                 obj_id: str,
                 obj_name: str,
                 project_id: int,
                 project_name: str,
                 region: str,
                 status: int,
                 view_name: str,
                 vpc: str):
        """
        :param str alarm_status: Filter based on alarm status.
        :param int alarm_type: Alarm type, 0 represents indicator alarm, 2 represents product event alarm, and 3 represents platform event alarm.
        :param str content: Alarm content.
        :param str dimensions: Alarm object dimension information.
        :param int duration: Duration in seconds.
        :param str first_occur_time: Time of occurrence.
        :param int group_id: Policy Group ID.
        :param str group_name: Policy Group Name.
        :param int id: The ID of this alarm.
        :param Sequence['GetAlarmBasicAlarmsAlarmInstanceGroupArgs'] instance_groups: Instance Group Information.
        :param str last_occur_time: End time.
        :param int metric_id: Indicator ID.
        :param str metric_name: Indicator Name.
        :param Sequence[str] notify_ways: Notification method.
        :param str obj_id: Alarm object ID.
        :param str obj_name: Alarm Object.
        :param int project_id: Project ID.
        :param str project_name: Entry name.
        :param str region: Region.
        :param int status: Alarm status ID, 0 indicates not recovered; 1 indicates that it has been restored; 2,3,5 indicates insufficient data; 4 indicates it has expired.
        :param str view_name: Policy Type.
        :param str vpc: VPC, only CVM has.
        """
        pulumi.set(__self__, "alarm_status", alarm_status)
        pulumi.set(__self__, "alarm_type", alarm_type)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "first_occur_time", first_occur_time)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_groups", instance_groups)
        pulumi.set(__self__, "last_occur_time", last_occur_time)
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notify_ways", notify_ways)
        pulumi.set(__self__, "obj_id", obj_id)
        pulumi.set(__self__, "obj_name", obj_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "view_name", view_name)
        pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter(name="alarmStatus")
    def alarm_status(self) -> str:
        """
        Filter based on alarm status.
        """
        return pulumi.get(self, "alarm_status")

    @property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> int:
        """
        Alarm type, 0 represents indicator alarm, 2 represents product event alarm, and 3 represents platform event alarm.
        """
        return pulumi.get(self, "alarm_type")

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Alarm content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        """
        Alarm object dimension information.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def duration(self) -> int:
        """
        Duration in seconds.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="firstOccurTime")
    def first_occur_time(self) -> str:
        """
        Time of occurrence.
        """
        return pulumi.get(self, "first_occur_time")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        """
        Policy Group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Policy Group Name.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this alarm.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceGroups")
    def instance_groups(self) -> Sequence['outputs.GetAlarmBasicAlarmsAlarmInstanceGroupResult']:
        """
        Instance Group Information.
        """
        return pulumi.get(self, "instance_groups")

    @property
    @pulumi.getter(name="lastOccurTime")
    def last_occur_time(self) -> str:
        """
        End time.
        """
        return pulumi.get(self, "last_occur_time")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        """
        Indicator ID.
        """
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Indicator Name.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Sequence[str]:
        """
        Notification method.
        """
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="objId")
    def obj_id(self) -> str:
        """
        Alarm object ID.
        """
        return pulumi.get(self, "obj_id")

    @property
    @pulumi.getter(name="objName")
    def obj_name(self) -> str:
        """
        Alarm Object.
        """
        return pulumi.get(self, "obj_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        Entry name.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Alarm status ID, 0 indicates not recovered; 1 indicates that it has been restored; 2,3,5 indicates insufficient data; 4 indicates it has expired.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> str:
        """
        Policy Type.
        """
        return pulumi.get(self, "view_name")

    @property
    @pulumi.getter
    def vpc(self) -> str:
        """
        VPC, only CVM has.
        """
        return pulumi.get(self, "vpc")


@pulumi.output_type
class GetAlarmBasicAlarmsAlarmInstanceGroupResult(dict):
    def __init__(__self__, *,
                 instance_group_id: int,
                 instance_group_name: str):
        """
        :param int instance_group_id: Instance Group ID.
        :param str instance_group_name: Instance Group Name.
        """
        pulumi.set(__self__, "instance_group_id", instance_group_id)
        pulumi.set(__self__, "instance_group_name", instance_group_name)

    @property
    @pulumi.getter(name="instanceGroupId")
    def instance_group_id(self) -> int:
        """
        Instance Group ID.
        """
        return pulumi.get(self, "instance_group_id")

    @property
    @pulumi.getter(name="instanceGroupName")
    def instance_group_name(self) -> str:
        """
        Instance Group Name.
        """
        return pulumi.get(self, "instance_group_name")


@pulumi.output_type
class GetAlarmBasicMetricMetricSetResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetAlarmBasicMetricMetricSetDimensionResult'],
                 meanings: Sequence['outputs.GetAlarmBasicMetricMetricSetMeaningResult'],
                 metric_c_name: str,
                 metric_e_name: str,
                 metric_name: str,
                 namespace: str,
                 period: Sequence[int],
                 periods: Sequence['outputs.GetAlarmBasicMetricMetricSetPeriodResult'],
                 unit: str,
                 unit_cname: str):
        """
        :param Sequence['GetAlarmBasicMetricMetricSetDimensionArgs'] dimensions: Optional parameters, filtered by dimension.
        :param Sequence['GetAlarmBasicMetricMetricSetMeaningArgs'] meanings: Explanation of the meaning of statistical indicators.
        :param str metric_c_name: Indicator Chinese Name.
        :param str metric_e_name: Indicator English name.
        :param str metric_name: Indicator names are different for each cloud product. To obtain indicator names, please go to the monitoring indicator documents of each product, such as the indicator names of cloud servers, which can be found in Cloud Server Monitoring Indicators.
        :param str namespace: The business namespace is different for each cloud product. To obtain the business namespace, please go to the product monitoring indicator documents, such as the namespace of the cloud server, which can be found in [Cloud Server Monitoring Indicators](https://cloud.tencent.com/document/product/248/6843 ).
        :param Sequence[int] period: Cycle.
        :param Sequence['GetAlarmBasicMetricMetricSetPeriodArgs'] periods: Indicator method within the statistical cycle.
        :param str unit: Units used for indicators.
        :param str unit_cname: Units used for indicators.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "meanings", meanings)
        pulumi.set(__self__, "metric_c_name", metric_c_name)
        pulumi.set(__self__, "metric_e_name", metric_e_name)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "periods", periods)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "unit_cname", unit_cname)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetAlarmBasicMetricMetricSetDimensionResult']:
        """
        Optional parameters, filtered by dimension.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def meanings(self) -> Sequence['outputs.GetAlarmBasicMetricMetricSetMeaningResult']:
        """
        Explanation of the meaning of statistical indicators.
        """
        return pulumi.get(self, "meanings")

    @property
    @pulumi.getter(name="metricCName")
    def metric_c_name(self) -> str:
        """
        Indicator Chinese Name.
        """
        return pulumi.get(self, "metric_c_name")

    @property
    @pulumi.getter(name="metricEName")
    def metric_e_name(self) -> str:
        """
        Indicator English name.
        """
        return pulumi.get(self, "metric_e_name")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Indicator names are different for each cloud product. To obtain indicator names, please go to the monitoring indicator documents of each product, such as the indicator names of cloud servers, which can be found in Cloud Server Monitoring Indicators.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The business namespace is different for each cloud product. To obtain the business namespace, please go to the product monitoring indicator documents, such as the namespace of the cloud server, which can be found in [Cloud Server Monitoring Indicators](https://cloud.tencent.com/document/product/248/6843 ).
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def period(self) -> Sequence[int]:
        """
        Cycle.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def periods(self) -> Sequence['outputs.GetAlarmBasicMetricMetricSetPeriodResult']:
        """
        Indicator method within the statistical cycle.
        """
        return pulumi.get(self, "periods")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Units used for indicators.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter(name="unitCname")
    def unit_cname(self) -> str:
        """
        Units used for indicators.
        """
        return pulumi.get(self, "unit_cname")


@pulumi.output_type
class GetAlarmBasicMetricMetricSetDimensionResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence[str]):
        """
        :param Sequence[str] dimensions: Optional parameters, filtered by dimension.
        """
        pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence[str]:
        """
        Optional parameters, filtered by dimension.
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetAlarmBasicMetricMetricSetMeaningResult(dict):
    def __init__(__self__, *,
                 en: str,
                 zh: str):
        """
        :param str en: Explanation of indicators in English.
        :param str zh: Chinese interpretation of indicators.
        """
        pulumi.set(__self__, "en", en)
        pulumi.set(__self__, "zh", zh)

    @property
    @pulumi.getter
    def en(self) -> str:
        """
        Explanation of indicators in English.
        """
        return pulumi.get(self, "en")

    @property
    @pulumi.getter
    def zh(self) -> str:
        """
        Chinese interpretation of indicators.
        """
        return pulumi.get(self, "zh")


@pulumi.output_type
class GetAlarmBasicMetricMetricSetPeriodResult(dict):
    def __init__(__self__, *,
                 period: str,
                 stat_types: Sequence[str]):
        """
        :param str period: Cycle.
        :param Sequence[str] stat_types: Statistical methods.
        """
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "stat_types", stat_types)

    @property
    @pulumi.getter
    def period(self) -> str:
        """
        Cycle.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="statTypes")
    def stat_types(self) -> Sequence[str]:
        """
        Statistical methods.
        """
        return pulumi.get(self, "stat_types")


@pulumi.output_type
class GetAlarmConditionsTemplateTemplateGroupListResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListConditionResult'],
                 event_conditions: Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListEventConditionResult'],
                 group_id: int,
                 group_name: str,
                 insert_time: int,
                 is_union_rule: int,
                 last_edit_uin: int,
                 policy_groups: Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListPolicyGroupResult'],
                 remark: str,
                 update_time: int,
                 view_name: str):
        """
        :param Sequence['GetAlarmConditionsTemplateTemplateGroupListConditionArgs'] conditions: Indicator alarm rules.
        :param Sequence['GetAlarmConditionsTemplateTemplateGroupListEventConditionArgs'] event_conditions: Event alarm rules.
        :param int group_id: Filter queries based on trigger condition template ID.
        :param str group_name: Filter queries based on trigger condition template names.
        :param int insert_time: Creation time.
        :param int is_union_rule: Is it a relationship rule with.
        :param int last_edit_uin: Last modified by UIN.
        :param Sequence['GetAlarmConditionsTemplateTemplateGroupListPolicyGroupArgs'] policy_groups: Associate Alert Policy Group.
        :param str remark: Remarks.
        :param int update_time: Update time.
        :param str view_name: View name, composed of DescribeAllNamespacesObtain. For cloud product monitoring, retrieve the QceNamespacesNew. N.ID parameter from the interface, such as cvm_ Device.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "event_conditions", event_conditions)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "is_union_rule", is_union_rule)
        pulumi.set(__self__, "last_edit_uin", last_edit_uin)
        pulumi.set(__self__, "policy_groups", policy_groups)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListConditionResult']:
        """
        Indicator alarm rules.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListEventConditionResult']:
        """
        Event alarm rules.
        """
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        """
        Filter queries based on trigger condition template ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Filter queries based on trigger condition template names.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> int:
        """
        Creation time.
        """
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> int:
        """
        Is it a relationship rule with.
        """
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> int:
        """
        Last modified by UIN.
        """
        return pulumi.get(self, "last_edit_uin")

    @property
    @pulumi.getter(name="policyGroups")
    def policy_groups(self) -> Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListPolicyGroupResult']:
        """
        Associate Alert Policy Group.
        """
        return pulumi.get(self, "policy_groups")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> str:
        """
        View name, composed of DescribeAllNamespacesObtain. For cloud product monitoring, retrieve the QceNamespacesNew. N.ID parameter from the interface, such as cvm_ Device.
        """
        return pulumi.get(self, "view_name")


@pulumi.output_type
class GetAlarmConditionsTemplateTemplateGroupListConditionResult(dict):
    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 calc_type: str,
                 calc_value: str,
                 continue_time: str,
                 is_advanced: int,
                 is_open: int,
                 metric_display_name: str,
                 metric_id: int,
                 period: int,
                 product_id: str,
                 rule_id: int,
                 unit: str):
        """
        :param int alarm_notify_period: Alarm notification frequency.
        :param int alarm_notify_type: Predefined repeated notification strategy (0- alarm only once, 1- exponential alarm, 2- connection alarm).
        :param str calc_type: Detection method.
        :param str calc_value: Detection value.
        :param str continue_time: Duration in seconds.
        :param int is_advanced: Whether it is an advanced indicator, 0: No; 1: Yes.
        :param int is_open: Whether to activate advanced indicators, 0: No; 1: Yes.
        :param str metric_display_name: Indicator display name (external).
        :param int metric_id: Indicator ID.
        :param int period: Cycle.
        :param str product_id: Product ID.
        :param int rule_id: Rule ID.
        :param str unit: Indicator unit.
        """
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "calc_type", calc_type)
        pulumi.set(__self__, "calc_value", calc_value)
        pulumi.set(__self__, "continue_time", continue_time)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "metric_display_name", metric_display_name)
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        """
        Alarm notification frequency.
        """
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        """
        Predefined repeated notification strategy (0- alarm only once, 1- exponential alarm, 2- connection alarm).
        """
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="calcType")
    def calc_type(self) -> str:
        """
        Detection method.
        """
        return pulumi.get(self, "calc_type")

    @property
    @pulumi.getter(name="calcValue")
    def calc_value(self) -> str:
        """
        Detection value.
        """
        return pulumi.get(self, "calc_value")

    @property
    @pulumi.getter(name="continueTime")
    def continue_time(self) -> str:
        """
        Duration in seconds.
        """
        return pulumi.get(self, "continue_time")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        """
        Whether it is an advanced indicator, 0: No; 1: Yes.
        """
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        """
        Whether to activate advanced indicators, 0: No; 1: Yes.
        """
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="metricDisplayName")
    def metric_display_name(self) -> str:
        """
        Indicator display name (external).
        """
        return pulumi.get(self, "metric_display_name")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        """
        Indicator ID.
        """
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Cycle.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        """
        Product ID.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Indicator unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetAlarmConditionsTemplateTemplateGroupListEventConditionResult(dict):
    def __init__(__self__, *,
                 alarm_notify_period: str,
                 alarm_notify_type: str,
                 event_display_name: str,
                 event_id: str,
                 rule_id: str):
        """
        :param str alarm_notify_period: Alarm notification frequency.
        :param str alarm_notify_type: Predefined repeated notification strategy (0- alarm only once, 1- exponential alarm, 2- connection alarm).
        :param str event_display_name: Event Display Name (External).
        :param str event_id: Event ID.
        :param str rule_id: Rule ID.
        """
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "event_display_name", event_display_name)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> str:
        """
        Alarm notification frequency.
        """
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> str:
        """
        Predefined repeated notification strategy (0- alarm only once, 1- exponential alarm, 2- connection alarm).
        """
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="eventDisplayName")
    def event_display_name(self) -> str:
        """
        Event Display Name (External).
        """
        return pulumi.get(self, "event_display_name")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> str:
        """
        Event ID.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class GetAlarmConditionsTemplateTemplateGroupListPolicyGroupResult(dict):
    def __init__(__self__, *,
                 can_set_default: bool,
                 enable: bool,
                 group_id: int,
                 group_name: str,
                 insert_time: int,
                 is_default: int,
                 is_union_rule: int,
                 last_edit_uin: int,
                 no_shielded_instance_count: int,
                 parent_group_id: int,
                 project_id: int,
                 receiver_infos: Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfoResult'],
                 remark: str,
                 total_instance_count: int,
                 update_time: int,
                 view_name: str):
        """
        :param bool can_set_default: Can it be set as the default alarm strategy.
        :param bool enable: Alarm Policy Enable Status.
        :param int group_id: Filter queries based on trigger condition template ID.
        :param str group_name: Filter queries based on trigger condition template names.
        :param int insert_time: Creation time.
        :param int is_default: Is it the default alarm policy.
        :param int is_union_rule: Is it a relationship rule with.
        :param int last_edit_uin: Last modified by UIN.
        :param int no_shielded_instance_count: Number of unshielded instances.
        :param int parent_group_id: Parent Policy Group ID.
        :param int project_id: Project ID.
        :param Sequence['GetAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfoArgs'] receiver_infos: Alarm receiving object information.
        :param str remark: Remarks.
        :param int total_instance_count: Total number of bound instances.
        :param int update_time: Update time.
        :param str view_name: View name, composed of DescribeAllNamespacesObtain. For cloud product monitoring, retrieve the QceNamespacesNew. N.ID parameter from the interface, such as cvm_ Device.
        """
        pulumi.set(__self__, "can_set_default", can_set_default)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_union_rule", is_union_rule)
        pulumi.set(__self__, "last_edit_uin", last_edit_uin)
        pulumi.set(__self__, "no_shielded_instance_count", no_shielded_instance_count)
        pulumi.set(__self__, "parent_group_id", parent_group_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "receiver_infos", receiver_infos)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "total_instance_count", total_instance_count)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter(name="canSetDefault")
    def can_set_default(self) -> bool:
        """
        Can it be set as the default alarm strategy.
        """
        return pulumi.get(self, "can_set_default")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Alarm Policy Enable Status.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        """
        Filter queries based on trigger condition template ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Filter queries based on trigger condition template names.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> int:
        """
        Creation time.
        """
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> int:
        """
        Is it the default alarm policy.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> int:
        """
        Is it a relationship rule with.
        """
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> int:
        """
        Last modified by UIN.
        """
        return pulumi.get(self, "last_edit_uin")

    @property
    @pulumi.getter(name="noShieldedInstanceCount")
    def no_shielded_instance_count(self) -> int:
        """
        Number of unshielded instances.
        """
        return pulumi.get(self, "no_shielded_instance_count")

    @property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> int:
        """
        Parent Policy Group ID.
        """
        return pulumi.get(self, "parent_group_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="receiverInfos")
    def receiver_infos(self) -> Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfoResult']:
        """
        Alarm receiving object information.
        """
        return pulumi.get(self, "receiver_infos")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="totalInstanceCount")
    def total_instance_count(self) -> int:
        """
        Total number of bound instances.
        """
        return pulumi.get(self, "total_instance_count")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> str:
        """
        View name, composed of DescribeAllNamespacesObtain. For cloud product monitoring, retrieve the QceNamespacesNew. N.ID parameter from the interface, such as cvm_ Device.
        """
        return pulumi.get(self, "view_name")


@pulumi.output_type
class GetAlarmConditionsTemplateTemplateGroupListPolicyGroupReceiverInfoResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 need_send_notice: int,
                 notify_ways: Sequence[str],
                 person_interval: int,
                 receiver_group_lists: Sequence[int],
                 receiver_type: str,
                 receiver_user_lists: Sequence[int],
                 recover_notifies: Sequence[str],
                 round_interval: int,
                 round_number: int,
                 send_fors: Sequence[str],
                 start_time: int,
                 uid_lists: Sequence[int]):
        """
        :param int end_time: Effective period end time.
        :param int need_send_notice: Do you need to send a notification.
        :param Sequence[str] notify_ways: Alarm reception channel.
        :param int person_interval: Telephone alarm to personal interval (seconds).
        :param Sequence[int] receiver_group_lists: Message receiving group list.
        :param str receiver_type: Receiver type.
        :param Sequence[int] receiver_user_lists: Recipient list. List of recipient IDs queried through the platform interface.
        :param Sequence[str] recover_notifies: Alarm recovery notification method.
        :param int round_interval: Telephone alarm interval per round (seconds).
        :param int round_number: Number of phone alarm rounds.
        :param Sequence[str] send_fors: Timing of telephone alarm notification. Optional OCCUR (notification during alarm), RECOVER (notification during recovery).
        :param int start_time: Effective period start time.
        :param Sequence[int] uid_lists: Telephone alarm receiver uid.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "need_send_notice", need_send_notice)
        pulumi.set(__self__, "notify_ways", notify_ways)
        pulumi.set(__self__, "person_interval", person_interval)
        pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        pulumi.set(__self__, "recover_notifies", recover_notifies)
        pulumi.set(__self__, "round_interval", round_interval)
        pulumi.set(__self__, "round_number", round_number)
        pulumi.set(__self__, "send_fors", send_fors)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "uid_lists", uid_lists)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        """
        Effective period end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="needSendNotice")
    def need_send_notice(self) -> int:
        """
        Do you need to send a notification.
        """
        return pulumi.get(self, "need_send_notice")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Sequence[str]:
        """
        Alarm reception channel.
        """
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="personInterval")
    def person_interval(self) -> int:
        """
        Telephone alarm to personal interval (seconds).
        """
        return pulumi.get(self, "person_interval")

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Sequence[int]:
        """
        Message receiving group list.
        """
        return pulumi.get(self, "receiver_group_lists")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        """
        Receiver type.
        """
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Sequence[int]:
        """
        Recipient list. List of recipient IDs queried through the platform interface.
        """
        return pulumi.get(self, "receiver_user_lists")

    @property
    @pulumi.getter(name="recoverNotifies")
    def recover_notifies(self) -> Sequence[str]:
        """
        Alarm recovery notification method.
        """
        return pulumi.get(self, "recover_notifies")

    @property
    @pulumi.getter(name="roundInterval")
    def round_interval(self) -> int:
        """
        Telephone alarm interval per round (seconds).
        """
        return pulumi.get(self, "round_interval")

    @property
    @pulumi.getter(name="roundNumber")
    def round_number(self) -> int:
        """
        Number of phone alarm rounds.
        """
        return pulumi.get(self, "round_number")

    @property
    @pulumi.getter(name="sendFors")
    def send_fors(self) -> Sequence[str]:
        """
        Timing of telephone alarm notification. Optional OCCUR (notification during alarm), RECOVER (notification during recovery).
        """
        return pulumi.get(self, "send_fors")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        Effective period start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="uidLists")
    def uid_lists(self) -> Sequence[int]:
        """
        Telephone alarm receiver uid.
        """
        return pulumi.get(self, "uid_lists")


@pulumi.output_type
class GetAlarmHistoryHistoryResult(dict):
    def __init__(__self__, *,
                 alarm_id: str,
                 alarm_level: str,
                 alarm_object: str,
                 alarm_status: str,
                 alarm_type: str,
                 content: str,
                 dimensions: str,
                 event_id: int,
                 first_occur_time: int,
                 instance_groups: Sequence['outputs.GetAlarmHistoryHistoryInstanceGroupResult'],
                 last_occur_time: int,
                 metrics_infos: Sequence['outputs.GetAlarmHistoryHistoryMetricsInfoResult'],
                 monitor_type: str,
                 namespace: str,
                 notice_ways: Sequence[str],
                 origin_id: str,
                 policy_exists: int,
                 policy_id: str,
                 policy_name: str,
                 project_id: int,
                 project_name: str,
                 receiver_groups: Sequence[int],
                 receiver_uids: Sequence[int],
                 region: str,
                 vpc: str):
        """
        :param str alarm_id: Alarm record ID.
        :param str alarm_level: Alarm level.Note: this field may return null, indicating that no valid values can be obtained.
        :param str alarm_object: Filter by alarm object. Fuzzy search with string is supported.
        :param str alarm_status: Filter by alarm status. Valid values: ALARM (not resolved), OK (resolved), NO_CONF (expired), NO_DATA (insufficient data). If this parameter is left empty, all will be queried by default.
        :param str alarm_type: Alarm type.
        :param str content: Fuzzy search by alarm content.
        :param str dimensions: Dimension information of an instance that triggered alarms.Note: this field may return null, indicating that no valid values can be obtained.
        :param int event_id: Event ID.
        :param int first_occur_time: Timestamp of the first occurrence.
        :param Sequence['GetAlarmHistoryHistoryInstanceGroupArgs'] instance_groups: Instance group of alarm object.
        :param int last_occur_time: Timestamp of the last occurrence.
        :param Sequence['GetAlarmHistoryHistoryMetricsInfoArgs'] metrics_infos: Metric informationNote: this field may return null, indicating that no valid values can be obtained.
        :param str monitor_type: Monitor type.
        :param str namespace: Policy type.
        :param Sequence[str] notice_ways: Alarm channel list. Valid values: SMS (SMS), EMAIL (email), CALL (phone), WECHAT (WeChat).
        :param str origin_id: Alarm policy ID, which can be used when you call APIs (BindingPolicyObject, UnBindingAllPolicyObject, UnBindingPolicyObject) to bind/unbind instances or instance groups to/from an alarm policy.
        :param int policy_exists: Whether the policy exists. Valid values: 0 (no), 1 (yes).
        :param str policy_id: Alarm policy ID.
        :param str policy_name: Fuzzy search by policy name.
        :param int project_id: Project ID.
        :param str project_name: Project name.
        :param Sequence[int] receiver_groups: Search by recipient group.
        :param Sequence[int] receiver_uids: Search by recipient.
        :param str region: Region.
        :param str vpc: VPC of alarm object for basic product alarm.
        """
        pulumi.set(__self__, "alarm_id", alarm_id)
        pulumi.set(__self__, "alarm_level", alarm_level)
        pulumi.set(__self__, "alarm_object", alarm_object)
        pulumi.set(__self__, "alarm_status", alarm_status)
        pulumi.set(__self__, "alarm_type", alarm_type)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "first_occur_time", first_occur_time)
        pulumi.set(__self__, "instance_groups", instance_groups)
        pulumi.set(__self__, "last_occur_time", last_occur_time)
        pulumi.set(__self__, "metrics_infos", metrics_infos)
        pulumi.set(__self__, "monitor_type", monitor_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "notice_ways", notice_ways)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "policy_exists", policy_exists)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "receiver_groups", receiver_groups)
        pulumi.set(__self__, "receiver_uids", receiver_uids)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter(name="alarmId")
    def alarm_id(self) -> str:
        """
        Alarm record ID.
        """
        return pulumi.get(self, "alarm_id")

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> str:
        """
        Alarm level.Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "alarm_level")

    @property
    @pulumi.getter(name="alarmObject")
    def alarm_object(self) -> str:
        """
        Filter by alarm object. Fuzzy search with string is supported.
        """
        return pulumi.get(self, "alarm_object")

    @property
    @pulumi.getter(name="alarmStatus")
    def alarm_status(self) -> str:
        """
        Filter by alarm status. Valid values: ALARM (not resolved), OK (resolved), NO_CONF (expired), NO_DATA (insufficient data). If this parameter is left empty, all will be queried by default.
        """
        return pulumi.get(self, "alarm_status")

    @property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> str:
        """
        Alarm type.
        """
        return pulumi.get(self, "alarm_type")

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        Fuzzy search by alarm content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        """
        Dimension information of an instance that triggered alarms.Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        """
        Event ID.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="firstOccurTime")
    def first_occur_time(self) -> int:
        """
        Timestamp of the first occurrence.
        """
        return pulumi.get(self, "first_occur_time")

    @property
    @pulumi.getter(name="instanceGroups")
    def instance_groups(self) -> Sequence['outputs.GetAlarmHistoryHistoryInstanceGroupResult']:
        """
        Instance group of alarm object.
        """
        return pulumi.get(self, "instance_groups")

    @property
    @pulumi.getter(name="lastOccurTime")
    def last_occur_time(self) -> int:
        """
        Timestamp of the last occurrence.
        """
        return pulumi.get(self, "last_occur_time")

    @property
    @pulumi.getter(name="metricsInfos")
    def metrics_infos(self) -> Sequence['outputs.GetAlarmHistoryHistoryMetricsInfoResult']:
        """
        Metric informationNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "metrics_infos")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> str:
        """
        Monitor type.
        """
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Policy type.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="noticeWays")
    def notice_ways(self) -> Sequence[str]:
        """
        Alarm channel list. Valid values: SMS (SMS), EMAIL (email), CALL (phone), WECHAT (WeChat).
        """
        return pulumi.get(self, "notice_ways")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        """
        Alarm policy ID, which can be used when you call APIs (BindingPolicyObject, UnBindingAllPolicyObject, UnBindingPolicyObject) to bind/unbind instances or instance groups to/from an alarm policy.
        """
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="policyExists")
    def policy_exists(self) -> int:
        """
        Whether the policy exists. Valid values: 0 (no), 1 (yes).
        """
        return pulumi.get(self, "policy_exists")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        Alarm policy ID.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Fuzzy search by policy name.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        Project name.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="receiverGroups")
    def receiver_groups(self) -> Sequence[int]:
        """
        Search by recipient group.
        """
        return pulumi.get(self, "receiver_groups")

    @property
    @pulumi.getter(name="receiverUids")
    def receiver_uids(self) -> Sequence[int]:
        """
        Search by recipient.
        """
        return pulumi.get(self, "receiver_uids")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def vpc(self) -> str:
        """
        VPC of alarm object for basic product alarm.
        """
        return pulumi.get(self, "vpc")


@pulumi.output_type
class GetAlarmHistoryHistoryInstanceGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: Instance group ID.
        :param str name: Instance group name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Instance group ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Instance group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAlarmHistoryHistoryMetricsInfoResult(dict):
    def __init__(__self__, *,
                 description: str,
                 metric_name: str,
                 period: int,
                 qce_namespace: str,
                 value: str):
        """
        :param str description: Metric display name.
        :param str metric_name: Metric name.
        :param int period: Statistical period.
        :param str qce_namespace: Namespace used to query data by Tencent Cloud service monitoring type.
        :param str value: Value triggering alarm.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "qce_namespace", qce_namespace)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Metric display name.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Metric name.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Statistical period.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="qceNamespace")
    def qce_namespace(self) -> str:
        """
        Namespace used to query data by Tencent Cloud service monitoring type.
        """
        return pulumi.get(self, "qce_namespace")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value triggering alarm.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmHistoryNamespaceResult(dict):
    def __init__(__self__, *,
                 monitor_type: str,
                 namespace: str):
        """
        :param str monitor_type: Monitor type.
        :param str namespace: Policy type.
        """
        pulumi.set(__self__, "monitor_type", monitor_type)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> str:
        """
        Monitor type.
        """
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Policy type.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetAlarmMetricMetricResult(dict):
    def __init__(__self__, *,
                 description: str,
                 dimensions: Sequence[str],
                 is_advanced: int,
                 is_open: int,
                 max: float,
                 metric_configs: Sequence['outputs.GetAlarmMetricMetricMetricConfigResult'],
                 metric_name: str,
                 min: float,
                 namespace: str,
                 operators: Sequence['outputs.GetAlarmMetricMetricOperatorResult'],
                 periods: Sequence[int],
                 product_id: int,
                 unit: str):
        """
        :param str description: Indicator display name.
        :param Sequence[str] dimensions: Dimension List.
        :param int is_advanced: Is it a high-level indicator. 1 Yes 0 No.
        :param int is_open: Is the advanced indicator activated. 1 Yes 0 No.
        :param float max: Maximum value.
        :param Sequence['GetAlarmMetricMetricMetricConfigArgs'] metric_configs: Indicator configuration.
        :param str metric_name: Indicator Name.
        :param float min: Minimum value.
        :param str namespace: Alarm policy type, obtained from DescribeAllNamespaces, such as cvm_device.
        :param Sequence['GetAlarmMetricMetricOperatorArgs'] operators: Matching operator.
        :param Sequence[int] periods: Indicator trigger.
        :param int product_id: Integration Center Product ID.
        :param str unit: Unit.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "metric_configs", metric_configs)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "operators", operators)
        pulumi.set(__self__, "periods", periods)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Indicator display name.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence[str]:
        """
        Dimension List.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        """
        Is it a high-level indicator. 1 Yes 0 No.
        """
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        """
        Is the advanced indicator activated. 1 Yes 0 No.
        """
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter
    def max(self) -> float:
        """
        Maximum value.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter(name="metricConfigs")
    def metric_configs(self) -> Sequence['outputs.GetAlarmMetricMetricMetricConfigResult']:
        """
        Indicator configuration.
        """
        return pulumi.get(self, "metric_configs")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Indicator Name.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def min(self) -> float:
        """
        Minimum value.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Alarm policy type, obtained from DescribeAllNamespaces, such as cvm_device.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def operators(self) -> Sequence['outputs.GetAlarmMetricMetricOperatorResult']:
        """
        Matching operator.
        """
        return pulumi.get(self, "operators")

    @property
    @pulumi.getter
    def periods(self) -> Sequence[int]:
        """
        Indicator trigger.
        """
        return pulumi.get(self, "periods")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> int:
        """
        Integration Center Product ID.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class GetAlarmMetricMetricMetricConfigResult(dict):
    def __init__(__self__, *,
                 continue_periods: Sequence[int],
                 operators: Sequence[str],
                 periods: Sequence[int]):
        """
        :param Sequence[int] continue_periods: Number of allowed duration cycles for configuration.
        :param Sequence[str] operators: Allowed Operators.
        :param Sequence[int] periods: The data period allowed for configuration, in seconds.
        """
        pulumi.set(__self__, "continue_periods", continue_periods)
        pulumi.set(__self__, "operators", operators)
        pulumi.set(__self__, "periods", periods)

    @property
    @pulumi.getter(name="continuePeriods")
    def continue_periods(self) -> Sequence[int]:
        """
        Number of allowed duration cycles for configuration.
        """
        return pulumi.get(self, "continue_periods")

    @property
    @pulumi.getter
    def operators(self) -> Sequence[str]:
        """
        Allowed Operators.
        """
        return pulumi.get(self, "operators")

    @property
    @pulumi.getter
    def periods(self) -> Sequence[int]:
        """
        The data period allowed for configuration, in seconds.
        """
        return pulumi.get(self, "periods")


@pulumi.output_type
class GetAlarmMetricMetricOperatorResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        """
        :param str id: Operator identification.
        :param str name: Operator Display Name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Operator identification.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Operator Display Name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAlarmMonitorTypeMonitorTypeInfoResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 sort_id: int):
        """
        :param str id: Monitoring type ID.
        :param str name: Monitoring type.
        :param int sort_id: Sort order.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sort_id", sort_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Monitoring type ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Monitoring type.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sortId")
    def sort_id(self) -> int:
        """
        Sort order.
        """
        return pulumi.get(self, "sort_id")


@pulumi.output_type
class GetAlarmNoticeCallbacksUrlNoticeResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 is_valid: int,
                 start_time: int,
                 url: str,
                 validation_code: str,
                 weekdays: Sequence[int]):
        """
        :param int end_time: The number of seconds from the end of the notification day.
        :param int is_valid: Verified 0=No 1=Yes.
        :param int start_time: The number of seconds starting from the day of notification start time.
        :param str url: Callback URL (limited to 256 characters).
        :param str validation_code: Verification code.
        :param Sequence[int] weekdays: Notification period 1-7 represents Monday to Sunday.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "is_valid", is_valid)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "validation_code", validation_code)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        """
        The number of seconds from the end of the notification day.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> int:
        """
        Verified 0=No 1=Yes.
        """
        return pulumi.get(self, "is_valid")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        The number of seconds starting from the day of notification start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Callback URL (limited to 256 characters).
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="validationCode")
    def validation_code(self) -> str:
        """
        Verification code.
        """
        return pulumi.get(self, "validation_code")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[int]:
        """
        Notification period 1-7 represents Monday to Sunday.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetAlarmNoticesAlarmNoticeResult(dict):
    def __init__(__self__, *,
                 amp_consumer_id: str,
                 cls_notices: Sequence['outputs.GetAlarmNoticesAlarmNoticeClsNoticeResult'],
                 id: str,
                 is_preset: int,
                 name: str,
                 notice_language: str,
                 notice_type: str,
                 policy_ids: Sequence[str],
                 updated_at: str,
                 updated_by: str,
                 url_notices: Sequence['outputs.GetAlarmNoticesAlarmNoticeUrlNoticeResult'],
                 user_notices: Sequence['outputs.GetAlarmNoticesAlarmNoticeUserNoticeResult']):
        """
        :param str amp_consumer_id: AMP consumer ID.
        :param Sequence['GetAlarmNoticesAlarmNoticeClsNoticeArgs'] cls_notices: A maximum of one alarm notification can be pushed to the CLS service.
        :param str id: Alarm notification template ID.
        :param int is_preset: Whether it is the system default notification template 0=No 1=Yes.
        :param str name: Alarm notification template name Used for fuzzy search.
        :param str notice_language: Notification language zh-CN=Chinese en-US=English.
        :param str notice_type: Alarm notification type ALARM=Notification not restored OK=Notification restored ALL.
        :param Sequence[str] policy_ids: List of alarm policy IDs bound to the alarm notification template.
        :param str updated_at: Last modified time.
        :param str updated_by: Last Modified By.
        :param Sequence['GetAlarmNoticesAlarmNoticeUrlNoticeArgs'] url_notices: The maximum number of callback notifications is 3.
        :param Sequence['GetAlarmNoticesAlarmNoticeUserNoticeArgs'] user_notices: Alarm notification template list.(At most five).
        """
        pulumi.set(__self__, "amp_consumer_id", amp_consumer_id)
        pulumi.set(__self__, "cls_notices", cls_notices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_preset", is_preset)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notice_language", notice_language)
        pulumi.set(__self__, "notice_type", notice_type)
        pulumi.set(__self__, "policy_ids", policy_ids)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "url_notices", url_notices)
        pulumi.set(__self__, "user_notices", user_notices)

    @property
    @pulumi.getter(name="ampConsumerId")
    def amp_consumer_id(self) -> str:
        """
        AMP consumer ID.
        """
        return pulumi.get(self, "amp_consumer_id")

    @property
    @pulumi.getter(name="clsNotices")
    def cls_notices(self) -> Sequence['outputs.GetAlarmNoticesAlarmNoticeClsNoticeResult']:
        """
        A maximum of one alarm notification can be pushed to the CLS service.
        """
        return pulumi.get(self, "cls_notices")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Alarm notification template ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPreset")
    def is_preset(self) -> int:
        """
        Whether it is the system default notification template 0=No 1=Yes.
        """
        return pulumi.get(self, "is_preset")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Alarm notification template name Used for fuzzy search.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="noticeLanguage")
    def notice_language(self) -> str:
        """
        Notification language zh-CN=Chinese en-US=English.
        """
        return pulumi.get(self, "notice_language")

    @property
    @pulumi.getter(name="noticeType")
    def notice_type(self) -> str:
        """
        Alarm notification type ALARM=Notification not restored OK=Notification restored ALL.
        """
        return pulumi.get(self, "notice_type")

    @property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Sequence[str]:
        """
        List of alarm policy IDs bound to the alarm notification template.
        """
        return pulumi.get(self, "policy_ids")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Last modified time.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Last Modified By.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="urlNotices")
    def url_notices(self) -> Sequence['outputs.GetAlarmNoticesAlarmNoticeUrlNoticeResult']:
        """
        The maximum number of callback notifications is 3.
        """
        return pulumi.get(self, "url_notices")

    @property
    @pulumi.getter(name="userNotices")
    def user_notices(self) -> Sequence['outputs.GetAlarmNoticesAlarmNoticeUserNoticeResult']:
        """
        Alarm notification template list.(At most five).
        """
        return pulumi.get(self, "user_notices")


@pulumi.output_type
class GetAlarmNoticesAlarmNoticeClsNoticeResult(dict):
    def __init__(__self__, *,
                 enable: int,
                 log_set_id: str,
                 region: str,
                 topic_id: str):
        """
        :param int enable: Start-stop status, can not be transmitted, default enabled. 0= Disabled, 1= enabled.
        :param str log_set_id: Log collection Id.
        :param str region: Regional.
        :param str topic_id: Theme Id.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "log_set_id", log_set_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Start-stop status, can not be transmitted, default enabled. 0= Disabled, 1= enabled.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> str:
        """
        Log collection Id.
        """
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Regional.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        Theme Id.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetAlarmNoticesAlarmNoticeUrlNoticeResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 start_time: int,
                 url: str,
                 weekdays: Sequence[int]):
        """
        :param int end_time: The number of seconds since the notification end time 00:00:00 (value range 0-86399).
        :param int start_time: The number of seconds since the notification start time 00:00:00 (value range 0-86399).
        :param str url: Callback URL (limited to 256 characters).
        :param Sequence[int] weekdays: Notification period 1-7 indicates Monday to Sunday.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        """
        The number of seconds since the notification end time 00:00:00 (value range 0-86399).
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        The number of seconds since the notification start time 00:00:00 (value range 0-86399).
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Callback URL (limited to 256 characters).
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[int]:
        """
        Notification period 1-7 indicates Monday to Sunday.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetAlarmNoticesAlarmNoticeUserNoticeResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 group_ids: Sequence[int],
                 need_phone_arrive_notice: int,
                 notice_ways: Sequence[str],
                 phone_call_type: str,
                 phone_circle_interval: int,
                 phone_circle_times: int,
                 phone_inner_interval: int,
                 phone_orders: Sequence[int],
                 receiver_type: str,
                 start_time: int,
                 user_ids: Sequence[int],
                 weekdays: Sequence[int]):
        """
        :param int end_time: The number of seconds since the notification end time 00:00:00 (value range 0-86399).
        :param Sequence[int] group_ids: Receive group list.
        :param int need_phone_arrive_notice: Contact notification required 0= No 1= Yes.
        :param Sequence[str] notice_ways: Notification Channel List EMAIL=Mail SMS=SMS CALL=Telephone WECHAT=WeChat RTX=Enterprise WeChat.
        :param str phone_call_type: Call type SYNC= Simultaneous call CIRCLE= Round call If this parameter is not specified, the default value is round call.
        :param int phone_circle_interval: Number of seconds between polls (value range: 60-900).
        :param int phone_circle_times: Number of telephone polls (value range: 1-5).
        :param int phone_inner_interval: Number of seconds between calls in a polling session (value range: 60-900).
        :param Sequence[int] phone_orders: Telephone polling list.
        :param str receiver_type: To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
        :param int start_time: The number of seconds since the notification start time 00:00:00 (value range 0-86399).
        :param Sequence[int] user_ids: List of recipients.
        :param Sequence[int] weekdays: Notification period 1-7 indicates Monday to Sunday.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "need_phone_arrive_notice", need_phone_arrive_notice)
        pulumi.set(__self__, "notice_ways", notice_ways)
        pulumi.set(__self__, "phone_call_type", phone_call_type)
        pulumi.set(__self__, "phone_circle_interval", phone_circle_interval)
        pulumi.set(__self__, "phone_circle_times", phone_circle_times)
        pulumi.set(__self__, "phone_inner_interval", phone_inner_interval)
        pulumi.set(__self__, "phone_orders", phone_orders)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "user_ids", user_ids)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        """
        The number of seconds since the notification end time 00:00:00 (value range 0-86399).
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[int]:
        """
        Receive group list.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="needPhoneArriveNotice")
    def need_phone_arrive_notice(self) -> int:
        """
        Contact notification required 0= No 1= Yes.
        """
        return pulumi.get(self, "need_phone_arrive_notice")

    @property
    @pulumi.getter(name="noticeWays")
    def notice_ways(self) -> Sequence[str]:
        """
        Notification Channel List EMAIL=Mail SMS=SMS CALL=Telephone WECHAT=WeChat RTX=Enterprise WeChat.
        """
        return pulumi.get(self, "notice_ways")

    @property
    @pulumi.getter(name="phoneCallType")
    def phone_call_type(self) -> str:
        """
        Call type SYNC= Simultaneous call CIRCLE= Round call If this parameter is not specified, the default value is round call.
        """
        return pulumi.get(self, "phone_call_type")

    @property
    @pulumi.getter(name="phoneCircleInterval")
    def phone_circle_interval(self) -> int:
        """
        Number of seconds between polls (value range: 60-900).
        """
        return pulumi.get(self, "phone_circle_interval")

    @property
    @pulumi.getter(name="phoneCircleTimes")
    def phone_circle_times(self) -> int:
        """
        Number of telephone polls (value range: 1-5).
        """
        return pulumi.get(self, "phone_circle_times")

    @property
    @pulumi.getter(name="phoneInnerInterval")
    def phone_inner_interval(self) -> int:
        """
        Number of seconds between calls in a polling session (value range: 60-900).
        """
        return pulumi.get(self, "phone_inner_interval")

    @property
    @pulumi.getter(name="phoneOrders")
    def phone_orders(self) -> Sequence[int]:
        """
        Telephone polling list.
        """
        return pulumi.get(self, "phone_orders")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        """
        To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
        """
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        The number of seconds since the notification start time 00:00:00 (value range 0-86399).
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Sequence[int]:
        """
        List of recipients.
        """
        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[int]:
        """
        Notification period 1-7 indicates Monday to Sunday.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetAlarmPolicyPolicyResult(dict):
    def __init__(__self__, *,
                 advanced_metric_number: int,
                 can_set_default: int,
                 condition_template_id: str,
                 conditions: Sequence['outputs.GetAlarmPolicyPolicyConditionResult'],
                 conditions_temps: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempResult'],
                 enable: int,
                 event_conditions: Sequence['outputs.GetAlarmPolicyPolicyEventConditionResult'],
                 filter_dimensions_param: str,
                 insert_time: int,
                 instance_group_id: int,
                 instance_group_name: str,
                 instance_sum: int,
                 is_bind_all: int,
                 is_default: int,
                 is_one_click: int,
                 last_edit_uin: str,
                 monitor_type: str,
                 namespace: str,
                 namespace_show_name: str,
                 notice_ids: Sequence[str],
                 notices: Sequence['outputs.GetAlarmPolicyPolicyNoticeResult'],
                 one_click_status: int,
                 origin_id: str,
                 policy_id: str,
                 policy_name: str,
                 project_id: int,
                 project_name: str,
                 regions: Sequence[str],
                 remark: str,
                 rule_type: str,
                 tag_instances: Sequence['outputs.GetAlarmPolicyPolicyTagInstanceResult'],
                 tags: Sequence['outputs.GetAlarmPolicyPolicyTagResult'],
                 trigger_tasks: Sequence['outputs.GetAlarmPolicyPolicyTriggerTaskResult'],
                 update_time: int,
                 use_sum: int):
        """
        :param int advanced_metric_number: The number of advanced metrics.Note: This field may return null, indicating that no valid values can be obtained.
        :param int can_set_default: Whether the default policy can be set. Valid values: 1 (yes), 0 (no)Note: this field may return null, indicating that no valid values can be obtained.
        :param str condition_template_id: Trigger condition template IDNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionArgs'] conditions: Metric trigger conditionNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionsTempArgs'] conditions_temps: Template policy groupNote: this field may return null, indicating that no valid values can be obtained.
        :param int enable: Filter by alarm status. Valid values: [1]: enabled; [0]: disabled; [0, 1]: all.
        :param Sequence['GetAlarmPolicyPolicyEventConditionArgs'] event_conditions: Event trigger conditioNote: this field may return null, indicating that no valid values can be obtained.
        :param str filter_dimensions_param: Information on the filter dimension associated with a policy.Note: This field may return null, indicating that no valid values can be obtained.
        :param int insert_time: Creation timeNote: this field may return null, indicating that no valid values can be obtained.
        :param int instance_group_id: Instance group ID.
        :param str instance_group_name: Instance group nameNote: this field may return null, indicating that no valid values can be obtained.
        :param int instance_sum: Number of instancesNote: This field may return null, indicating that no valid values can be obtained.
        :param int is_bind_all: Whether the policy is associated with all objectsNote: This field may return null, indicating that no valid values can be obtained.
        :param int is_default: Whether it is the default policy. Valid values: 1 (yes), 0 (no)Note: this field may return null, indicating that no valid values can be obtained.
        :param int is_one_click: Whether it is a quick alarm policy.Note: This field may return null, indicating that no valid values can be obtained.
        :param str last_edit_uin: Uin of the last modifying userNote: this field may return null, indicating that no valid values can be obtained.
        :param str monitor_type: Monitor type. Valid values: MT_QCE (Tencent Cloud service monitoring)Note: this field may return null, indicating that no valid values can be obtained.
        :param str namespace: Alarm policy typeNote: this field may return null, indicating that no valid values can be obtained.
        :param str namespace_show_name: Namespace display nameNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence[str] notice_ids: List of the notification template IDs, which can be obtained by querying the notification template list.It can be queried with the API [DescribeAlarmNotices](https://www.tencentcloud.com/document/product/248/39300).
        :param Sequence['GetAlarmPolicyPolicyNoticeArgs'] notices: Notification rule listNote: this field may return null, indicating that no valid values can be obtained.
        :param int one_click_status: Whether the quick alarm policy is enabled.Note: This field may return null, indicating that no valid values can be obtained.
        :param str origin_id: Policy ID for instance/instance group binding and unbinding APIs (BindingPolicyObject, UnBindingAllPolicyObject, UnBindingPolicyObject)Note: this field may return null, indicating that no valid values can be obtained.
        :param str policy_id: Alarm policy IDNote: this field may return null, indicating that no valid values can be obtained.
        :param str policy_name: Fuzzy search by policy name.
        :param int project_id: Project ID. Valid values: -1 (no project), 0 (default project)Note: this field may return null, indicating that no valid values can be obtained.
        :param str project_name: Project nameNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence[str] regions: RegionNote: this field may return null, indicating that no valid values can be obtained.
        :param str remark: RemarksNote: this field may return null, indicating that no valid values can be obtained.
        :param str rule_type: Trigger condition type. Valid values: STATIC (static threshold), DYNAMIC (dynamic)Note: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyTagInstanceArgs'] tag_instances: TagNote: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyTagArgs'] tags: Policy tagNote: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyTriggerTaskArgs'] trigger_tasks: Filter alarm policy by triggered task (such as auto scaling task). Up to 10 tasks can be specified.
        :param int update_time: Update timeNote: this field may return null, indicating that no valid values can be obtained.
        :param int use_sum: Number of instances bound to policy groupNote: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "advanced_metric_number", advanced_metric_number)
        pulumi.set(__self__, "can_set_default", can_set_default)
        pulumi.set(__self__, "condition_template_id", condition_template_id)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "conditions_temps", conditions_temps)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "event_conditions", event_conditions)
        pulumi.set(__self__, "filter_dimensions_param", filter_dimensions_param)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "instance_group_id", instance_group_id)
        pulumi.set(__self__, "instance_group_name", instance_group_name)
        pulumi.set(__self__, "instance_sum", instance_sum)
        pulumi.set(__self__, "is_bind_all", is_bind_all)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_one_click", is_one_click)
        pulumi.set(__self__, "last_edit_uin", last_edit_uin)
        pulumi.set(__self__, "monitor_type", monitor_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "namespace_show_name", namespace_show_name)
        pulumi.set(__self__, "notice_ids", notice_ids)
        pulumi.set(__self__, "notices", notices)
        pulumi.set(__self__, "one_click_status", one_click_status)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "tag_instances", tag_instances)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "trigger_tasks", trigger_tasks)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "use_sum", use_sum)

    @property
    @pulumi.getter(name="advancedMetricNumber")
    def advanced_metric_number(self) -> int:
        """
        The number of advanced metrics.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "advanced_metric_number")

    @property
    @pulumi.getter(name="canSetDefault")
    def can_set_default(self) -> int:
        """
        Whether the default policy can be set. Valid values: 1 (yes), 0 (no)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "can_set_default")

    @property
    @pulumi.getter(name="conditionTemplateId")
    def condition_template_id(self) -> str:
        """
        Trigger condition template IDNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "condition_template_id")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionResult']:
        """
        Metric trigger conditionNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="conditionsTemps")
    def conditions_temps(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempResult']:
        """
        Template policy groupNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "conditions_temps")

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Filter by alarm status. Valid values: [1]: enabled; [0]: disabled; [0, 1]: all.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Sequence['outputs.GetAlarmPolicyPolicyEventConditionResult']:
        """
        Event trigger conditioNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter(name="filterDimensionsParam")
    def filter_dimensions_param(self) -> str:
        """
        Information on the filter dimension associated with a policy.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "filter_dimensions_param")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> int:
        """
        Creation timeNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="instanceGroupId")
    def instance_group_id(self) -> int:
        """
        Instance group ID.
        """
        return pulumi.get(self, "instance_group_id")

    @property
    @pulumi.getter(name="instanceGroupName")
    def instance_group_name(self) -> str:
        """
        Instance group nameNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "instance_group_name")

    @property
    @pulumi.getter(name="instanceSum")
    def instance_sum(self) -> int:
        """
        Number of instancesNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "instance_sum")

    @property
    @pulumi.getter(name="isBindAll")
    def is_bind_all(self) -> int:
        """
        Whether the policy is associated with all objectsNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_bind_all")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> int:
        """
        Whether it is the default policy. Valid values: 1 (yes), 0 (no)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isOneClick")
    def is_one_click(self) -> int:
        """
        Whether it is a quick alarm policy.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_one_click")

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> str:
        """
        Uin of the last modifying userNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "last_edit_uin")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> str:
        """
        Monitor type. Valid values: MT_QCE (Tencent Cloud service monitoring)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Alarm policy typeNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="namespaceShowName")
    def namespace_show_name(self) -> str:
        """
        Namespace display nameNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "namespace_show_name")

    @property
    @pulumi.getter(name="noticeIds")
    def notice_ids(self) -> Sequence[str]:
        """
        List of the notification template IDs, which can be obtained by querying the notification template list.It can be queried with the API [DescribeAlarmNotices](https://www.tencentcloud.com/document/product/248/39300).
        """
        return pulumi.get(self, "notice_ids")

    @property
    @pulumi.getter
    def notices(self) -> Sequence['outputs.GetAlarmPolicyPolicyNoticeResult']:
        """
        Notification rule listNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "notices")

    @property
    @pulumi.getter(name="oneClickStatus")
    def one_click_status(self) -> int:
        """
        Whether the quick alarm policy is enabled.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "one_click_status")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        """
        Policy ID for instance/instance group binding and unbinding APIs (BindingPolicyObject, UnBindingAllPolicyObject, UnBindingPolicyObject)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        Alarm policy IDNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Fuzzy search by policy name.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID. Valid values: -1 (no project), 0 (default project)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        Project nameNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def regions(self) -> Sequence[str]:
        """
        RegionNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        RemarksNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Trigger condition type. Valid values: STATIC (static threshold), DYNAMIC (dynamic)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="tagInstances")
    def tag_instances(self) -> Sequence['outputs.GetAlarmPolicyPolicyTagInstanceResult']:
        """
        TagNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tag_instances")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetAlarmPolicyPolicyTagResult']:
        """
        Policy tagNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="triggerTasks")
    def trigger_tasks(self) -> Sequence['outputs.GetAlarmPolicyPolicyTriggerTaskResult']:
        """
        Filter alarm policy by triggered task (such as auto scaling task). Up to 10 tasks can be specified.
        """
        return pulumi.get(self, "trigger_tasks")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        """
        Update timeNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="useSum")
    def use_sum(self) -> int:
        """
        Number of instances bound to policy groupNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "use_sum")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionResult(dict):
    def __init__(__self__, *,
                 complex_expression: str,
                 is_union_rule: int,
                 rules: Sequence['outputs.GetAlarmPolicyPolicyConditionRuleResult']):
        """
        :param str complex_expression: The judgment expression of composite alarm trigger conditions, which is valid when the value of IsUnionRule is 2. This parameter is used to determine that an alarm condition is met only when the expression values are True for multiple trigger conditions.Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_union_rule: Judgment condition of an alarm trigger condition (0: Any; 1: All; 2: Composite). When the value is set to 2 (i.e., composite trigger conditions), this parameter should be used together with ComplexExpression.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionRuleArgs'] rules: Alarm trigger condition lisNote: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "complex_expression", complex_expression)
        pulumi.set(__self__, "is_union_rule", is_union_rule)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="complexExpression")
    def complex_expression(self) -> str:
        """
        The judgment expression of composite alarm trigger conditions, which is valid when the value of IsUnionRule is 2. This parameter is used to determine that an alarm condition is met only when the expression values are True for multiple trigger conditions.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "complex_expression")

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> int:
        """
        Judgment condition of an alarm trigger condition (0: Any; 1: All; 2: Composite). When the value is set to 2 (i.e., composite trigger conditions), this parameter should be used together with ComplexExpression.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionRuleResult']:
        """
        Alarm trigger condition lisNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionRuleResult(dict):
    def __init__(__self__, *,
                 continue_period: int,
                 description: str,
                 filters: Sequence['outputs.GetAlarmPolicyPolicyConditionRuleFilterResult'],
                 hierarchical_values: Sequence['outputs.GetAlarmPolicyPolicyConditionRuleHierarchicalValueResult'],
                 is_advanced: int,
                 is_open: int,
                 is_power_notice: int,
                 metric_name: str,
                 notice_frequency: int,
                 operator: str,
                 period: int,
                 product_id: str,
                 rule_type: str,
                 unit: str,
                 value: str,
                 value_max: float,
                 value_min: float):
        """
        :param int continue_period: Number of periods. 1: continue for one period; 2: continue for two periods; and so on. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        :param str description: Metric display name, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionRuleFilterArgs'] filters: Filter condition for one single trigger ruleNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionRuleHierarchicalValueArgs'] hierarchical_values: The configuration of alarm level thresholdNote: This field may return null, indicating that no valid values can be obtained.
        :param int is_advanced: Whether it is an advanced metric. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_open: Whether the advanced metric feature is enabled. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_power_notice: Whether the alarm frequency increases exponentially. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        :param str metric_name: Metric name or event name. The supported metrics can be queried via DescribeAlarmMetrics and the supported events via DescribeAlarmEventsNote: this field may return null, indicating that no valid value is obtained.
        :param int notice_frequency: Alarm interval in seconds. Valid values: 0 (do not repeat), 300 (alarm once every 5 minutes), 600 (alarm once every 10 minutes), 900 (alarm once every 15 minutes), 1800 (alarm once every 30 minutes), 3600 (alarm once every hour), 7200 (alarm once every 2 hours), 10800 (alarm once every 3 hours), 21600 (alarm once every 6 hours), 43200 (alarm once every 12 hours), 86400 (alarm once every day)Note: this field may return null, indicating that no valid values can be obtained.
        :param str operator: Statistical period in seconds. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.Operator	String	No	Operatorintelligent = intelligent detection without thresholdeq = equal toge = greater than or equal togt = greater thanle = less than or equal tolt = less thanne = not equal today_increase = day-on-day increaseday_decrease = day-on-day decreaseday_wave = day-on-day fluctuationweek_increase = week-on-week increaseweek_decrease = week-on-week decreaseweek_wave = week-on-week fluctuationcycle_increase = cyclical increasecycle_decrease = cyclical decreasecycle_wave = cyclical fluctuationre = regex matchThe valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        :param int period: Statistical period in seconds. The valid values can be queried via DescribeAlarmMetricsNote: this field may return null, indicating that no valid value is obtained.
        :param str product_id: Integration center product ID.Note: This field may return null, indicating that no valid values can be obtained.
        :param str rule_type: Trigger condition type. Valid values: STATIC (static threshold), DYNAMIC (dynamic)Note: this field may return null, indicating that no valid values can be obtained.
        :param str unit: Unit, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        :param str value: Tag value.
        :param float value_max: Maximum valueNote: This field may return null, indicating that no valid values can be obtained.
        :param float value_min: Minimum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "continue_period", continue_period)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "hierarchical_values", hierarchical_values)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "is_power_notice", is_power_notice)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notice_frequency", notice_frequency)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_max", value_max)
        pulumi.set(__self__, "value_min", value_min)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> int:
        """
        Number of periods. 1: continue for one period; 2: continue for two periods; and so on. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Metric display name, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionRuleFilterResult']:
        """
        Filter condition for one single trigger ruleNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="hierarchicalValues")
    def hierarchical_values(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionRuleHierarchicalValueResult']:
        """
        The configuration of alarm level thresholdNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "hierarchical_values")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        """
        Whether it is an advanced metric. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        """
        Whether the advanced metric feature is enabled. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> int:
        """
        Whether the alarm frequency increases exponentially. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Metric name or event name. The supported metrics can be queried via DescribeAlarmMetrics and the supported events via DescribeAlarmEventsNote: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> int:
        """
        Alarm interval in seconds. Valid values: 0 (do not repeat), 300 (alarm once every 5 minutes), 600 (alarm once every 10 minutes), 900 (alarm once every 15 minutes), 1800 (alarm once every 30 minutes), 3600 (alarm once every hour), 7200 (alarm once every 2 hours), 10800 (alarm once every 3 hours), 21600 (alarm once every 6 hours), 43200 (alarm once every 12 hours), 86400 (alarm once every day)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Statistical period in seconds. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.Operator	String	No	Operatorintelligent = intelligent detection without thresholdeq = equal toge = greater than or equal togt = greater thanle = less than or equal tolt = less thanne = not equal today_increase = day-on-day increaseday_decrease = day-on-day decreaseday_wave = day-on-day fluctuationweek_increase = week-on-week increaseweek_decrease = week-on-week decreaseweek_wave = week-on-week fluctuationcycle_increase = cyclical increasecycle_decrease = cyclical decreasecycle_wave = cyclical fluctuationre = regex matchThe valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Statistical period in seconds. The valid values can be queried via DescribeAlarmMetricsNote: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        """
        Integration center product ID.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Trigger condition type. Valid values: STATIC (static threshold), DYNAMIC (dynamic)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueMax")
    def value_max(self) -> float:
        """
        Maximum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "value_max")

    @property
    @pulumi.getter(name="valueMin")
    def value_min(self) -> float:
        """
        Minimum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "value_min")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionRuleFilterResult(dict):
    def __init__(__self__, *,
                 dimensions: str,
                 type: str):
        """
        :param str dimensions: The alarm object list, which is a JSON string. The outer array corresponds to multiple instances, and the inner array is the dimension of an object.For example, 'CVM - Basic Monitor' can be written as: [ {Dimensions: {unInstanceId: ins-qr8d555g}}, {Dimensions: {unInstanceId: ins-qr8d555h}} ]You can also refer to the 'Example 2' below.For more information on the parameter samples of different Tencent Cloud services, see [Product Policy Type and Dimension Information](https://www.tencentcloud.com/document/product/248/39565?has_map=1).Note: If 1 is passed in for NeedCorrespondence, the relationship between a policy and an instance needs to be returned. You can pass in up to 20 alarm object dimensions to avoid request timeout.
        :param str type: Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        """
        The alarm object list, which is a JSON string. The outer array corresponds to multiple instances, and the inner array is the dimension of an object.For example, 'CVM - Basic Monitor' can be written as: [ {Dimensions: {unInstanceId: ins-qr8d555g}}, {Dimensions: {unInstanceId: ins-qr8d555h}} ]You can also refer to the 'Example 2' below.For more information on the parameter samples of different Tencent Cloud services, see [Product Policy Type and Dimension Information](https://www.tencentcloud.com/document/product/248/39565?has_map=1).Note: If 1 is passed in for NeedCorrespondence, the relationship between a policy and an instance needs to be returned. You can pass in up to 20 alarm object dimensions to avoid request timeout.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionRuleHierarchicalValueResult(dict):
    def __init__(__self__, *,
                 remind: str,
                 serious: str,
                 warn: str):
        """
        :param str remind: Threshold for the Remind levelNote: This field may return null, indicating that no valid values can be obtained.
        :param str serious: Threshold for the Serious levelNote: This field may return null, indicating that no valid values can be obtained.
        :param str warn: Threshold for the Warn levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "remind", remind)
        pulumi.set(__self__, "serious", serious)
        pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def remind(self) -> str:
        """
        Threshold for the Remind levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "remind")

    @property
    @pulumi.getter
    def serious(self) -> str:
        """
        Threshold for the Serious levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "serious")

    @property
    @pulumi.getter
    def warn(self) -> str:
        """
        Threshold for the Warn levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "warn")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionResult'],
                 event_conditions: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionResult'],
                 template_name: str):
        """
        :param Sequence['GetAlarmPolicyPolicyConditionsTempConditionArgs'] conditions: Metric trigger conditionNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionsTempEventConditionArgs'] event_conditions: Event trigger conditioNote: this field may return null, indicating that no valid values can be obtained.
        :param str template_name: Template nameNote: u200dThis field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "event_conditions", event_conditions)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionResult']:
        """
        Metric trigger conditionNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionResult']:
        """
        Event trigger conditioNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        """
        Template nameNote: u200dThis field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempConditionResult(dict):
    def __init__(__self__, *,
                 complex_expression: str,
                 is_union_rule: int,
                 rules: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleResult']):
        """
        :param str complex_expression: The judgment expression of composite alarm trigger conditions, which is valid when the value of IsUnionRule is 2. This parameter is used to determine that an alarm condition is met only when the expression values are True for multiple trigger conditions.Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_union_rule: Judgment condition of an alarm trigger condition (0: Any; 1: All; 2: Composite). When the value is set to 2 (i.e., composite trigger conditions), this parameter should be used together with ComplexExpression.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionsTempConditionRuleArgs'] rules: Alarm trigger condition lisNote: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "complex_expression", complex_expression)
        pulumi.set(__self__, "is_union_rule", is_union_rule)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="complexExpression")
    def complex_expression(self) -> str:
        """
        The judgment expression of composite alarm trigger conditions, which is valid when the value of IsUnionRule is 2. This parameter is used to determine that an alarm condition is met only when the expression values are True for multiple trigger conditions.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "complex_expression")

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> int:
        """
        Judgment condition of an alarm trigger condition (0: Any; 1: All; 2: Composite). When the value is set to 2 (i.e., composite trigger conditions), this parameter should be used together with ComplexExpression.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleResult']:
        """
        Alarm trigger condition lisNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempConditionRuleResult(dict):
    def __init__(__self__, *,
                 continue_period: int,
                 description: str,
                 filters: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleFilterResult'],
                 hierarchical_values: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValueResult'],
                 is_advanced: int,
                 is_open: int,
                 is_power_notice: int,
                 metric_name: str,
                 notice_frequency: int,
                 operator: str,
                 period: int,
                 product_id: str,
                 rule_type: str,
                 unit: str,
                 value: str,
                 value_max: float,
                 value_min: float):
        """
        :param int continue_period: Number of periods. 1: continue for one period; 2: continue for two periods; and so on. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        :param str description: Metric display name, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionsTempConditionRuleFilterArgs'] filters: Filter condition for one single trigger ruleNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValueArgs'] hierarchical_values: The configuration of alarm level thresholdNote: This field may return null, indicating that no valid values can be obtained.
        :param int is_advanced: Whether it is an advanced metric. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_open: Whether the advanced metric feature is enabled. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_power_notice: Whether the alarm frequency increases exponentially. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        :param str metric_name: Metric name or event name. The supported metrics can be queried via DescribeAlarmMetrics and the supported events via DescribeAlarmEventsNote: this field may return null, indicating that no valid value is obtained.
        :param int notice_frequency: Alarm interval in seconds. Valid values: 0 (do not repeat), 300 (alarm once every 5 minutes), 600 (alarm once every 10 minutes), 900 (alarm once every 15 minutes), 1800 (alarm once every 30 minutes), 3600 (alarm once every hour), 7200 (alarm once every 2 hours), 10800 (alarm once every 3 hours), 21600 (alarm once every 6 hours), 43200 (alarm once every 12 hours), 86400 (alarm once every day)Note: this field may return null, indicating that no valid values can be obtained.
        :param str operator: Statistical period in seconds. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.Operator	String	No	Operatorintelligent = intelligent detection without thresholdeq = equal toge = greater than or equal togt = greater thanle = less than or equal tolt = less thanne = not equal today_increase = day-on-day increaseday_decrease = day-on-day decreaseday_wave = day-on-day fluctuationweek_increase = week-on-week increaseweek_decrease = week-on-week decreaseweek_wave = week-on-week fluctuationcycle_increase = cyclical increasecycle_decrease = cyclical decreasecycle_wave = cyclical fluctuationre = regex matchThe valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        :param int period: Statistical period in seconds. The valid values can be queried via DescribeAlarmMetricsNote: this field may return null, indicating that no valid value is obtained.
        :param str product_id: Integration center product ID.Note: This field may return null, indicating that no valid values can be obtained.
        :param str rule_type: Trigger condition type. Valid values: STATIC (static threshold), DYNAMIC (dynamic)Note: this field may return null, indicating that no valid values can be obtained.
        :param str unit: Unit, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        :param str value: Tag value.
        :param float value_max: Maximum valueNote: This field may return null, indicating that no valid values can be obtained.
        :param float value_min: Minimum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "continue_period", continue_period)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "hierarchical_values", hierarchical_values)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "is_power_notice", is_power_notice)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notice_frequency", notice_frequency)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_max", value_max)
        pulumi.set(__self__, "value_min", value_min)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> int:
        """
        Number of periods. 1: continue for one period; 2: continue for two periods; and so on. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Metric display name, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleFilterResult']:
        """
        Filter condition for one single trigger ruleNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="hierarchicalValues")
    def hierarchical_values(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValueResult']:
        """
        The configuration of alarm level thresholdNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "hierarchical_values")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        """
        Whether it is an advanced metric. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        """
        Whether the advanced metric feature is enabled. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> int:
        """
        Whether the alarm frequency increases exponentially. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Metric name or event name. The supported metrics can be queried via DescribeAlarmMetrics and the supported events via DescribeAlarmEventsNote: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> int:
        """
        Alarm interval in seconds. Valid values: 0 (do not repeat), 300 (alarm once every 5 minutes), 600 (alarm once every 10 minutes), 900 (alarm once every 15 minutes), 1800 (alarm once every 30 minutes), 3600 (alarm once every hour), 7200 (alarm once every 2 hours), 10800 (alarm once every 3 hours), 21600 (alarm once every 6 hours), 43200 (alarm once every 12 hours), 86400 (alarm once every day)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Statistical period in seconds. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.Operator	String	No	Operatorintelligent = intelligent detection without thresholdeq = equal toge = greater than or equal togt = greater thanle = less than or equal tolt = less thanne = not equal today_increase = day-on-day increaseday_decrease = day-on-day decreaseday_wave = day-on-day fluctuationweek_increase = week-on-week increaseweek_decrease = week-on-week decreaseweek_wave = week-on-week fluctuationcycle_increase = cyclical increasecycle_decrease = cyclical decreasecycle_wave = cyclical fluctuationre = regex matchThe valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Statistical period in seconds. The valid values can be queried via DescribeAlarmMetricsNote: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        """
        Integration center product ID.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Trigger condition type. Valid values: STATIC (static threshold), DYNAMIC (dynamic)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueMax")
    def value_max(self) -> float:
        """
        Maximum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "value_max")

    @property
    @pulumi.getter(name="valueMin")
    def value_min(self) -> float:
        """
        Minimum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "value_min")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempConditionRuleFilterResult(dict):
    def __init__(__self__, *,
                 dimensions: str,
                 type: str):
        """
        :param str dimensions: The alarm object list, which is a JSON string. The outer array corresponds to multiple instances, and the inner array is the dimension of an object.For example, 'CVM - Basic Monitor' can be written as: [ {Dimensions: {unInstanceId: ins-qr8d555g}}, {Dimensions: {unInstanceId: ins-qr8d555h}} ]You can also refer to the 'Example 2' below.For more information on the parameter samples of different Tencent Cloud services, see [Product Policy Type and Dimension Information](https://www.tencentcloud.com/document/product/248/39565?has_map=1).Note: If 1 is passed in for NeedCorrespondence, the relationship between a policy and an instance needs to be returned. You can pass in up to 20 alarm object dimensions to avoid request timeout.
        :param str type: Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        """
        The alarm object list, which is a JSON string. The outer array corresponds to multiple instances, and the inner array is the dimension of an object.For example, 'CVM - Basic Monitor' can be written as: [ {Dimensions: {unInstanceId: ins-qr8d555g}}, {Dimensions: {unInstanceId: ins-qr8d555h}} ]You can also refer to the 'Example 2' below.For more information on the parameter samples of different Tencent Cloud services, see [Product Policy Type and Dimension Information](https://www.tencentcloud.com/document/product/248/39565?has_map=1).Note: If 1 is passed in for NeedCorrespondence, the relationship between a policy and an instance needs to be returned. You can pass in up to 20 alarm object dimensions to avoid request timeout.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempConditionRuleHierarchicalValueResult(dict):
    def __init__(__self__, *,
                 remind: str,
                 serious: str,
                 warn: str):
        """
        :param str remind: Threshold for the Remind levelNote: This field may return null, indicating that no valid values can be obtained.
        :param str serious: Threshold for the Serious levelNote: This field may return null, indicating that no valid values can be obtained.
        :param str warn: Threshold for the Warn levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "remind", remind)
        pulumi.set(__self__, "serious", serious)
        pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def remind(self) -> str:
        """
        Threshold for the Remind levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "remind")

    @property
    @pulumi.getter
    def serious(self) -> str:
        """
        Threshold for the Serious levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "serious")

    @property
    @pulumi.getter
    def warn(self) -> str:
        """
        Threshold for the Warn levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "warn")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempEventConditionResult(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleResult']):
        """
        :param Sequence['GetAlarmPolicyPolicyConditionsTempEventConditionRuleArgs'] rules: Alarm trigger condition lisNote: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleResult']:
        """
        Alarm trigger condition lisNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempEventConditionRuleResult(dict):
    def __init__(__self__, *,
                 continue_period: int,
                 description: str,
                 filters: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleFilterResult'],
                 hierarchical_values: Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValueResult'],
                 is_advanced: int,
                 is_open: int,
                 is_power_notice: int,
                 metric_name: str,
                 notice_frequency: int,
                 operator: str,
                 period: int,
                 product_id: str,
                 rule_type: str,
                 unit: str,
                 value: str,
                 value_max: float,
                 value_min: float):
        """
        :param int continue_period: Number of periods. 1: continue for one period; 2: continue for two periods; and so on. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        :param str description: Metric display name, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionsTempEventConditionRuleFilterArgs'] filters: Filter condition for one single trigger ruleNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValueArgs'] hierarchical_values: The configuration of alarm level thresholdNote: This field may return null, indicating that no valid values can be obtained.
        :param int is_advanced: Whether it is an advanced metric. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_open: Whether the advanced metric feature is enabled. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_power_notice: Whether the alarm frequency increases exponentially. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        :param str metric_name: Metric name or event name. The supported metrics can be queried via DescribeAlarmMetrics and the supported events via DescribeAlarmEventsNote: this field may return null, indicating that no valid value is obtained.
        :param int notice_frequency: Alarm interval in seconds. Valid values: 0 (do not repeat), 300 (alarm once every 5 minutes), 600 (alarm once every 10 minutes), 900 (alarm once every 15 minutes), 1800 (alarm once every 30 minutes), 3600 (alarm once every hour), 7200 (alarm once every 2 hours), 10800 (alarm once every 3 hours), 21600 (alarm once every 6 hours), 43200 (alarm once every 12 hours), 86400 (alarm once every day)Note: this field may return null, indicating that no valid values can be obtained.
        :param str operator: Statistical period in seconds. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.Operator	String	No	Operatorintelligent = intelligent detection without thresholdeq = equal toge = greater than or equal togt = greater thanle = less than or equal tolt = less thanne = not equal today_increase = day-on-day increaseday_decrease = day-on-day decreaseday_wave = day-on-day fluctuationweek_increase = week-on-week increaseweek_decrease = week-on-week decreaseweek_wave = week-on-week fluctuationcycle_increase = cyclical increasecycle_decrease = cyclical decreasecycle_wave = cyclical fluctuationre = regex matchThe valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        :param int period: Statistical period in seconds. The valid values can be queried via DescribeAlarmMetricsNote: this field may return null, indicating that no valid value is obtained.
        :param str product_id: Integration center product ID.Note: This field may return null, indicating that no valid values can be obtained.
        :param str rule_type: Trigger condition type. Valid values: STATIC (static threshold), DYNAMIC (dynamic)Note: this field may return null, indicating that no valid values can be obtained.
        :param str unit: Unit, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        :param str value: Tag value.
        :param float value_max: Maximum valueNote: This field may return null, indicating that no valid values can be obtained.
        :param float value_min: Minimum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "continue_period", continue_period)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "hierarchical_values", hierarchical_values)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "is_power_notice", is_power_notice)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notice_frequency", notice_frequency)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_max", value_max)
        pulumi.set(__self__, "value_min", value_min)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> int:
        """
        Number of periods. 1: continue for one period; 2: continue for two periods; and so on. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Metric display name, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleFilterResult']:
        """
        Filter condition for one single trigger ruleNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="hierarchicalValues")
    def hierarchical_values(self) -> Sequence['outputs.GetAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValueResult']:
        """
        The configuration of alarm level thresholdNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "hierarchical_values")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        """
        Whether it is an advanced metric. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        """
        Whether the advanced metric feature is enabled. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> int:
        """
        Whether the alarm frequency increases exponentially. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Metric name or event name. The supported metrics can be queried via DescribeAlarmMetrics and the supported events via DescribeAlarmEventsNote: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> int:
        """
        Alarm interval in seconds. Valid values: 0 (do not repeat), 300 (alarm once every 5 minutes), 600 (alarm once every 10 minutes), 900 (alarm once every 15 minutes), 1800 (alarm once every 30 minutes), 3600 (alarm once every hour), 7200 (alarm once every 2 hours), 10800 (alarm once every 3 hours), 21600 (alarm once every 6 hours), 43200 (alarm once every 12 hours), 86400 (alarm once every day)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Statistical period in seconds. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.Operator	String	No	Operatorintelligent = intelligent detection without thresholdeq = equal toge = greater than or equal togt = greater thanle = less than or equal tolt = less thanne = not equal today_increase = day-on-day increaseday_decrease = day-on-day decreaseday_wave = day-on-day fluctuationweek_increase = week-on-week increaseweek_decrease = week-on-week decreaseweek_wave = week-on-week fluctuationcycle_increase = cyclical increasecycle_decrease = cyclical decreasecycle_wave = cyclical fluctuationre = regex matchThe valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Statistical period in seconds. The valid values can be queried via DescribeAlarmMetricsNote: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        """
        Integration center product ID.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Trigger condition type. Valid values: STATIC (static threshold), DYNAMIC (dynamic)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueMax")
    def value_max(self) -> float:
        """
        Maximum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "value_max")

    @property
    @pulumi.getter(name="valueMin")
    def value_min(self) -> float:
        """
        Minimum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "value_min")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempEventConditionRuleFilterResult(dict):
    def __init__(__self__, *,
                 dimensions: str,
                 type: str):
        """
        :param str dimensions: The alarm object list, which is a JSON string. The outer array corresponds to multiple instances, and the inner array is the dimension of an object.For example, 'CVM - Basic Monitor' can be written as: [ {Dimensions: {unInstanceId: ins-qr8d555g}}, {Dimensions: {unInstanceId: ins-qr8d555h}} ]You can also refer to the 'Example 2' below.For more information on the parameter samples of different Tencent Cloud services, see [Product Policy Type and Dimension Information](https://www.tencentcloud.com/document/product/248/39565?has_map=1).Note: If 1 is passed in for NeedCorrespondence, the relationship between a policy and an instance needs to be returned. You can pass in up to 20 alarm object dimensions to avoid request timeout.
        :param str type: Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        """
        The alarm object list, which is a JSON string. The outer array corresponds to multiple instances, and the inner array is the dimension of an object.For example, 'CVM - Basic Monitor' can be written as: [ {Dimensions: {unInstanceId: ins-qr8d555g}}, {Dimensions: {unInstanceId: ins-qr8d555h}} ]You can also refer to the 'Example 2' below.For more information on the parameter samples of different Tencent Cloud services, see [Product Policy Type and Dimension Information](https://www.tencentcloud.com/document/product/248/39565?has_map=1).Note: If 1 is passed in for NeedCorrespondence, the relationship between a policy and an instance needs to be returned. You can pass in up to 20 alarm object dimensions to avoid request timeout.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmPolicyPolicyConditionsTempEventConditionRuleHierarchicalValueResult(dict):
    def __init__(__self__, *,
                 remind: str,
                 serious: str,
                 warn: str):
        """
        :param str remind: Threshold for the Remind levelNote: This field may return null, indicating that no valid values can be obtained.
        :param str serious: Threshold for the Serious levelNote: This field may return null, indicating that no valid values can be obtained.
        :param str warn: Threshold for the Warn levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "remind", remind)
        pulumi.set(__self__, "serious", serious)
        pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def remind(self) -> str:
        """
        Threshold for the Remind levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "remind")

    @property
    @pulumi.getter
    def serious(self) -> str:
        """
        Threshold for the Serious levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "serious")

    @property
    @pulumi.getter
    def warn(self) -> str:
        """
        Threshold for the Warn levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "warn")


@pulumi.output_type
class GetAlarmPolicyPolicyEventConditionResult(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleResult']):
        """
        :param Sequence['GetAlarmPolicyPolicyEventConditionRuleArgs'] rules: Alarm trigger condition lisNote: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleResult']:
        """
        Alarm trigger condition lisNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetAlarmPolicyPolicyEventConditionRuleResult(dict):
    def __init__(__self__, *,
                 continue_period: int,
                 description: str,
                 filters: Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleFilterResult'],
                 hierarchical_values: Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleHierarchicalValueResult'],
                 is_advanced: int,
                 is_open: int,
                 is_power_notice: int,
                 metric_name: str,
                 notice_frequency: int,
                 operator: str,
                 period: int,
                 product_id: str,
                 rule_type: str,
                 unit: str,
                 value: str,
                 value_max: float,
                 value_min: float):
        """
        :param int continue_period: Number of periods. 1: continue for one period; 2: continue for two periods; and so on. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        :param str description: Metric display name, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyEventConditionRuleFilterArgs'] filters: Filter condition for one single trigger ruleNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyEventConditionRuleHierarchicalValueArgs'] hierarchical_values: The configuration of alarm level thresholdNote: This field may return null, indicating that no valid values can be obtained.
        :param int is_advanced: Whether it is an advanced metric. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_open: Whether the advanced metric feature is enabled. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        :param int is_power_notice: Whether the alarm frequency increases exponentially. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        :param str metric_name: Metric name or event name. The supported metrics can be queried via DescribeAlarmMetrics and the supported events via DescribeAlarmEventsNote: this field may return null, indicating that no valid value is obtained.
        :param int notice_frequency: Alarm interval in seconds. Valid values: 0 (do not repeat), 300 (alarm once every 5 minutes), 600 (alarm once every 10 minutes), 900 (alarm once every 15 minutes), 1800 (alarm once every 30 minutes), 3600 (alarm once every hour), 7200 (alarm once every 2 hours), 10800 (alarm once every 3 hours), 21600 (alarm once every 6 hours), 43200 (alarm once every 12 hours), 86400 (alarm once every day)Note: this field may return null, indicating that no valid values can be obtained.
        :param str operator: Statistical period in seconds. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.Operator	String	No	Operatorintelligent = intelligent detection without thresholdeq = equal toge = greater than or equal togt = greater thanle = less than or equal tolt = less thanne = not equal today_increase = day-on-day increaseday_decrease = day-on-day decreaseday_wave = day-on-day fluctuationweek_increase = week-on-week increaseweek_decrease = week-on-week decreaseweek_wave = week-on-week fluctuationcycle_increase = cyclical increasecycle_decrease = cyclical decreasecycle_wave = cyclical fluctuationre = regex matchThe valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        :param int period: Statistical period in seconds. The valid values can be queried via DescribeAlarmMetricsNote: this field may return null, indicating that no valid value is obtained.
        :param str product_id: Integration center product ID.Note: This field may return null, indicating that no valid values can be obtained.
        :param str rule_type: Trigger condition type. Valid values: STATIC (static threshold), DYNAMIC (dynamic)Note: this field may return null, indicating that no valid values can be obtained.
        :param str unit: Unit, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        :param str value: Tag value.
        :param float value_max: Maximum valueNote: This field may return null, indicating that no valid values can be obtained.
        :param float value_min: Minimum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "continue_period", continue_period)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "hierarchical_values", hierarchical_values)
        pulumi.set(__self__, "is_advanced", is_advanced)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "is_power_notice", is_power_notice)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notice_frequency", notice_frequency)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_max", value_max)
        pulumi.set(__self__, "value_min", value_min)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> int:
        """
        Number of periods. 1: continue for one period; 2: continue for two periods; and so on. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "continue_period")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Metric display name, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleFilterResult']:
        """
        Filter condition for one single trigger ruleNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="hierarchicalValues")
    def hierarchical_values(self) -> Sequence['outputs.GetAlarmPolicyPolicyEventConditionRuleHierarchicalValueResult']:
        """
        The configuration of alarm level thresholdNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "hierarchical_values")

    @property
    @pulumi.getter(name="isAdvanced")
    def is_advanced(self) -> int:
        """
        Whether it is an advanced metric. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_advanced")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> int:
        """
        Whether the advanced metric feature is enabled. 0: No; 1: Yes.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="isPowerNotice")
    def is_power_notice(self) -> int:
        """
        Whether the alarm frequency increases exponentially. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_power_notice")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Metric name or event name. The supported metrics can be queried via DescribeAlarmMetrics and the supported events via DescribeAlarmEventsNote: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="noticeFrequency")
    def notice_frequency(self) -> int:
        """
        Alarm interval in seconds. Valid values: 0 (do not repeat), 300 (alarm once every 5 minutes), 600 (alarm once every 10 minutes), 900 (alarm once every 15 minutes), 1800 (alarm once every 30 minutes), 3600 (alarm once every hour), 7200 (alarm once every 2 hours), 10800 (alarm once every 3 hours), 21600 (alarm once every 6 hours), 43200 (alarm once every 12 hours), 86400 (alarm once every day)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "notice_frequency")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Statistical period in seconds. The valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.Operator	String	No	Operatorintelligent = intelligent detection without thresholdeq = equal toge = greater than or equal togt = greater thanle = less than or equal tolt = less thanne = not equal today_increase = day-on-day increaseday_decrease = day-on-day decreaseday_wave = day-on-day fluctuationweek_increase = week-on-week increaseweek_decrease = week-on-week decreaseweek_wave = week-on-week fluctuationcycle_increase = cyclical increasecycle_decrease = cyclical decreasecycle_wave = cyclical fluctuationre = regex matchThe valid values can be queried via DescribeAlarmMetrics.Note: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Statistical period in seconds. The valid values can be queried via DescribeAlarmMetricsNote: this field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        """
        Integration center product ID.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Trigger condition type. Valid values: STATIC (static threshold), DYNAMIC (dynamic)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Unit, which is used in the output parameterNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueMax")
    def value_max(self) -> float:
        """
        Maximum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "value_max")

    @property
    @pulumi.getter(name="valueMin")
    def value_min(self) -> float:
        """
        Minimum valueNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "value_min")


@pulumi.output_type
class GetAlarmPolicyPolicyEventConditionRuleFilterResult(dict):
    def __init__(__self__, *,
                 dimensions: str,
                 type: str):
        """
        :param str dimensions: The alarm object list, which is a JSON string. The outer array corresponds to multiple instances, and the inner array is the dimension of an object.For example, 'CVM - Basic Monitor' can be written as: [ {Dimensions: {unInstanceId: ins-qr8d555g}}, {Dimensions: {unInstanceId: ins-qr8d555h}} ]You can also refer to the 'Example 2' below.For more information on the parameter samples of different Tencent Cloud services, see [Product Policy Type and Dimension Information](https://www.tencentcloud.com/document/product/248/39565?has_map=1).Note: If 1 is passed in for NeedCorrespondence, the relationship between a policy and an instance needs to be returned. You can pass in up to 20 alarm object dimensions to avoid request timeout.
        :param str type: Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> str:
        """
        The alarm object list, which is a JSON string. The outer array corresponds to multiple instances, and the inner array is the dimension of an object.For example, 'CVM - Basic Monitor' can be written as: [ {Dimensions: {unInstanceId: ins-qr8d555g}}, {Dimensions: {unInstanceId: ins-qr8d555h}} ]You can also refer to the 'Example 2' below.For more information on the parameter samples of different Tencent Cloud services, see [Product Policy Type and Dimension Information](https://www.tencentcloud.com/document/product/248/39565?has_map=1).Note: If 1 is passed in for NeedCorrespondence, the relationship between a policy and an instance needs to be returned. You can pass in up to 20 alarm object dimensions to avoid request timeout.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmPolicyPolicyEventConditionRuleHierarchicalValueResult(dict):
    def __init__(__self__, *,
                 remind: str,
                 serious: str,
                 warn: str):
        """
        :param str remind: Threshold for the Remind levelNote: This field may return null, indicating that no valid values can be obtained.
        :param str serious: Threshold for the Serious levelNote: This field may return null, indicating that no valid values can be obtained.
        :param str warn: Threshold for the Warn levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "remind", remind)
        pulumi.set(__self__, "serious", serious)
        pulumi.set(__self__, "warn", warn)

    @property
    @pulumi.getter
    def remind(self) -> str:
        """
        Threshold for the Remind levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "remind")

    @property
    @pulumi.getter
    def serious(self) -> str:
        """
        Threshold for the Serious levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "serious")

    @property
    @pulumi.getter
    def warn(self) -> str:
        """
        Threshold for the Warn levelNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "warn")


@pulumi.output_type
class GetAlarmPolicyPolicyNoticeResult(dict):
    def __init__(__self__, *,
                 amp_consumer_id: str,
                 cls_notices: Sequence['outputs.GetAlarmPolicyPolicyNoticeClsNoticeResult'],
                 id: str,
                 is_preset: int,
                 name: str,
                 notice_language: str,
                 notice_type: str,
                 policy_ids: Sequence[str],
                 tags: Sequence['outputs.GetAlarmPolicyPolicyNoticeTagResult'],
                 updated_at: str,
                 updated_by: str,
                 url_notices: Sequence['outputs.GetAlarmPolicyPolicyNoticeUrlNoticeResult'],
                 user_notices: Sequence['outputs.GetAlarmPolicyPolicyNoticeUserNoticeResult']):
        """
        :param str amp_consumer_id: Backend AMP consumer ID.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyNoticeClsNoticeArgs'] cls_notices: Channel to push alarm notifications to CLS.Note: This field may return null, indicating that no valid values can be obtained.
        :param str id: Alarm notification template IDNote: this field may return null, indicating that no valid values can be obtained.
        :param int is_preset: Whether it is the system default notification template. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        :param str name: Alarm notification template nameNote: this field may return null, indicating that no valid values can be obtained.
        :param str notice_language: Notification language. Valid values: zh-CN (Chinese), en-US (English)Note: this field may return null, indicating that no valid values can be obtained.
        :param str notice_type: Alarm notification type. Valid values: ALARM (for unresolved alarms), OK (for resolved alarms), ALL (for all alarms)Note: this field may return null, indicating that no valid values can be obtained.
        :param Sequence[str] policy_ids: List of IDs of the alarm policies bound to alarm notification templateNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyNoticeTagArgs'] tags: Policy tagNote: This field may return null, indicating that no valid values can be obtained.
        :param str updated_at: Last modified timeNote: this field may return null, indicating that no valid values can be obtained.
        :param str updated_by: Last modified byNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyNoticeUrlNoticeArgs'] url_notices: Callback notification listNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetAlarmPolicyPolicyNoticeUserNoticeArgs'] user_notices: User notification listNote: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "amp_consumer_id", amp_consumer_id)
        pulumi.set(__self__, "cls_notices", cls_notices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_preset", is_preset)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notice_language", notice_language)
        pulumi.set(__self__, "notice_type", notice_type)
        pulumi.set(__self__, "policy_ids", policy_ids)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "url_notices", url_notices)
        pulumi.set(__self__, "user_notices", user_notices)

    @property
    @pulumi.getter(name="ampConsumerId")
    def amp_consumer_id(self) -> str:
        """
        Backend AMP consumer ID.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "amp_consumer_id")

    @property
    @pulumi.getter(name="clsNotices")
    def cls_notices(self) -> Sequence['outputs.GetAlarmPolicyPolicyNoticeClsNoticeResult']:
        """
        Channel to push alarm notifications to CLS.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "cls_notices")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Alarm notification template IDNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPreset")
    def is_preset(self) -> int:
        """
        Whether it is the system default notification template. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_preset")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Alarm notification template nameNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="noticeLanguage")
    def notice_language(self) -> str:
        """
        Notification language. Valid values: zh-CN (Chinese), en-US (English)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "notice_language")

    @property
    @pulumi.getter(name="noticeType")
    def notice_type(self) -> str:
        """
        Alarm notification type. Valid values: ALARM (for unresolved alarms), OK (for resolved alarms), ALL (for all alarms)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "notice_type")

    @property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Sequence[str]:
        """
        List of IDs of the alarm policies bound to alarm notification templateNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "policy_ids")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetAlarmPolicyPolicyNoticeTagResult']:
        """
        Policy tagNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Last modified timeNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Last modified byNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="urlNotices")
    def url_notices(self) -> Sequence['outputs.GetAlarmPolicyPolicyNoticeUrlNoticeResult']:
        """
        Callback notification listNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "url_notices")

    @property
    @pulumi.getter(name="userNotices")
    def user_notices(self) -> Sequence['outputs.GetAlarmPolicyPolicyNoticeUserNoticeResult']:
        """
        User notification listNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "user_notices")


@pulumi.output_type
class GetAlarmPolicyPolicyNoticeClsNoticeResult(dict):
    def __init__(__self__, *,
                 enable: int,
                 log_set_id: str,
                 region: str,
                 topic_id: str):
        """
        :param int enable: Filter by alarm status. Valid values: [1]: enabled; [0]: disabled; [0, 1]: all.
        :param str log_set_id: Logset ID.
        :param str region: RegionNote: this field may return null, indicating that no valid values can be obtained.
        :param str topic_id: Topic ID.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "log_set_id", log_set_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def enable(self) -> int:
        """
        Filter by alarm status. Valid values: [1]: enabled; [0]: disabled; [0, 1]: all.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> str:
        """
        Logset ID.
        """
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        RegionNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        Topic ID.
        """
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetAlarmPolicyPolicyNoticeTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag key.
        :param str value: Tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmPolicyPolicyNoticeUrlNoticeResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 is_valid: int,
                 start_time: int,
                 url: str,
                 validation_code: str,
                 weekdays: Sequence[int]):
        """
        :param int end_time: Notification end time, which is expressed by the number of seconds since 00:00:00. Value range: 0-86399Note: this field may return null, indicating that no valid values can be obtained.
        :param int is_valid: Whether verification is passed. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        :param int start_time: Notification start time, which is expressed by the number of seconds since 00:00:00. Value range: 0-86399Note: this field may return null, indicating that no valid values can be obtained.
        :param str url: Callback URL, which can contain up to 256 charactersNote: this field may return null, indicating that no valid values can be obtained.
        :param str validation_code: Verification codeNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence[int] weekdays: Notification cycle. The values 1-7 indicate Monday to Sunday.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "is_valid", is_valid)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "validation_code", validation_code)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        """
        Notification end time, which is expressed by the number of seconds since 00:00:00. Value range: 0-86399Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> int:
        """
        Whether verification is passed. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "is_valid")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        Notification start time, which is expressed by the number of seconds since 00:00:00. Value range: 0-86399Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Callback URL, which can contain up to 256 charactersNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="validationCode")
    def validation_code(self) -> str:
        """
        Verification codeNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "validation_code")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[int]:
        """
        Notification cycle. The values 1-7 indicate Monday to Sunday.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetAlarmPolicyPolicyNoticeUserNoticeResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 group_ids: Sequence[int],
                 need_phone_arrive_notice: int,
                 notice_ways: Sequence[str],
                 on_call_form_ids: Sequence[str],
                 phone_call_type: str,
                 phone_circle_interval: int,
                 phone_circle_times: int,
                 phone_inner_interval: int,
                 phone_orders: Sequence[int],
                 receiver_type: str,
                 start_time: int,
                 user_ids: Sequence[int],
                 weekdays: Sequence[int]):
        """
        :param int end_time: Notification end time, which is expressed by the number of seconds since 00:00:00. Value range: 0-86399Note: this field may return null, indicating that no valid values can be obtained.
        :param Sequence[int] group_ids: User group ID listNote: this field may return null, indicating that no valid values can be obtained.
        :param int need_phone_arrive_notice: Whether receipt notification is required. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        :param Sequence[str] notice_ways: Notification channel list. Valid values: EMAIL (email), SMS (SMS), CALL (phone), WECHAT (WeChat), RTX (WeCom)Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence[str] on_call_form_ids: List of schedule IDsNote: u200dThis field may return null, indicating that no valid values can be obtained.
        :param str phone_call_type: Dial type. SYNC (simultaneous dial), CIRCLE (polled dial). Default value: CIRCLE.Note: This field may return null, indicating that no valid values can be obtained.
        :param int phone_circle_interval: Polling interval in seconds. Value range: 60-900Note: this field may return null, indicating that no valid values can be obtained.
        :param int phone_circle_times: Number of phone pollings. Value range: 1-5Note: this field may return null, indicating that no valid values can be obtained.
        :param int phone_inner_interval: Call interval in seconds within one polling. Value range: 60-900Note: this field may return null, indicating that no valid values can be obtained.
        :param Sequence[int] phone_orders: Phone polling listNote: this field may return null, indicating that no valid values can be obtained.
        :param str receiver_type: Recipient type. Valid values: USER (user), GROUP (user group)Note: this field may return null, indicating that no valid values can be obtained.
        :param int start_time: Notification start time, which is expressed by the number of seconds since 00:00:00. Value range: 0-86399Note: this field may return null, indicating that no valid values can be obtained.
        :param Sequence[int] user_ids: User uid listNote: this field may return null, indicating that no valid values can be obtained.
        :param Sequence[int] weekdays: Notification cycle. The values 1-7 indicate Monday to Sunday.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "group_ids", group_ids)
        pulumi.set(__self__, "need_phone_arrive_notice", need_phone_arrive_notice)
        pulumi.set(__self__, "notice_ways", notice_ways)
        pulumi.set(__self__, "on_call_form_ids", on_call_form_ids)
        pulumi.set(__self__, "phone_call_type", phone_call_type)
        pulumi.set(__self__, "phone_circle_interval", phone_circle_interval)
        pulumi.set(__self__, "phone_circle_times", phone_circle_times)
        pulumi.set(__self__, "phone_inner_interval", phone_inner_interval)
        pulumi.set(__self__, "phone_orders", phone_orders)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "user_ids", user_ids)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        """
        Notification end time, which is expressed by the number of seconds since 00:00:00. Value range: 0-86399Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Sequence[int]:
        """
        User group ID listNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="needPhoneArriveNotice")
    def need_phone_arrive_notice(self) -> int:
        """
        Whether receipt notification is required. Valid values: 0 (no), 1 (yes)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "need_phone_arrive_notice")

    @property
    @pulumi.getter(name="noticeWays")
    def notice_ways(self) -> Sequence[str]:
        """
        Notification channel list. Valid values: EMAIL (email), SMS (SMS), CALL (phone), WECHAT (WeChat), RTX (WeCom)Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "notice_ways")

    @property
    @pulumi.getter(name="onCallFormIds")
    def on_call_form_ids(self) -> Sequence[str]:
        """
        List of schedule IDsNote: u200dThis field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "on_call_form_ids")

    @property
    @pulumi.getter(name="phoneCallType")
    def phone_call_type(self) -> str:
        """
        Dial type. SYNC (simultaneous dial), CIRCLE (polled dial). Default value: CIRCLE.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "phone_call_type")

    @property
    @pulumi.getter(name="phoneCircleInterval")
    def phone_circle_interval(self) -> int:
        """
        Polling interval in seconds. Value range: 60-900Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "phone_circle_interval")

    @property
    @pulumi.getter(name="phoneCircleTimes")
    def phone_circle_times(self) -> int:
        """
        Number of phone pollings. Value range: 1-5Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "phone_circle_times")

    @property
    @pulumi.getter(name="phoneInnerInterval")
    def phone_inner_interval(self) -> int:
        """
        Call interval in seconds within one polling. Value range: 60-900Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "phone_inner_interval")

    @property
    @pulumi.getter(name="phoneOrders")
    def phone_orders(self) -> Sequence[int]:
        """
        Phone polling listNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "phone_orders")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        """
        Recipient type. Valid values: USER (user), GROUP (user group)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        Notification start time, which is expressed by the number of seconds since 00:00:00. Value range: 0-86399Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Sequence[int]:
        """
        User uid listNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[int]:
        """
        Notification cycle. The values 1-7 indicate Monday to Sunday.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetAlarmPolicyPolicyTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Tag key.
        :param str value: Tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmPolicyPolicyTagInstanceResult(dict):
    def __init__(__self__, *,
                 binding_status: int,
                 instance_sum: int,
                 key: str,
                 region_id: int,
                 service_type: str,
                 tag_status: int,
                 value: str):
        """
        :param int binding_status: Binding status. 2: bound; 1: bindingNote: This field may return null, indicating that no valid values can be obtained.
        :param int instance_sum: Number of instancesNote: This field may return null, indicating that no valid values can be obtained.
        :param str key: Tag key.
        :param int region_id: Region IDNote: This field may return null, indicating that no valid values can be obtained.
        :param str service_type: Service type, for example, CVMNote: This field may return null, indicating that no valid values can be obtained.
        :param int tag_status: Tag status. 2: existent; 1: nonexistentNote: This field may return null, indicating that no valid values can be obtained.
        :param str value: Tag value.
        """
        pulumi.set(__self__, "binding_status", binding_status)
        pulumi.set(__self__, "instance_sum", instance_sum)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "tag_status", tag_status)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="bindingStatus")
    def binding_status(self) -> int:
        """
        Binding status. 2: bound; 1: bindingNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "binding_status")

    @property
    @pulumi.getter(name="instanceSum")
    def instance_sum(self) -> int:
        """
        Number of instancesNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "instance_sum")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Region IDNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        Service type, for example, CVMNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="tagStatus")
    def tag_status(self) -> int:
        """
        Tag status. 2: existent; 1: nonexistentNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tag_status")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAlarmPolicyPolicyTriggerTaskResult(dict):
    def __init__(__self__, *,
                 task_config: str,
                 type: str):
        """
        :param str task_config: Configuration information in JSON format, such as {Key1:Value1,Key2:Value2}Note: this field may return null, indicating that no valid values can be obtained.
        :param str type: Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "task_config", task_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="taskConfig")
    def task_config(self) -> str:
        """
        Configuration information in JSON format, such as {Key1:Value1,Key2:Value2}Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "task_config")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAlarmPolicyTriggerTaskResult(dict):
    def __init__(__self__, *,
                 task_config: str,
                 type: str):
        """
        :param str task_config: Configuration information in JSON format, such as {Key1:Value1,Key2:Value2}Note: this field may return null, indicating that no valid values can be obtained.
        :param str type: Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "task_config", task_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="taskConfig")
    def task_config(self) -> str:
        """
        Configuration information in JSON format, such as {Key1:Value1,Key2:Value2}Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "task_config")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Triggered task type. Valid value: AS (auto scaling)Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBindingObjectsListResult(dict):
    def __init__(__self__, *,
                 dimensions_json: str,
                 is_shielded: int,
                 region: str,
                 unique_id: str):
        """
        :param str dimensions_json: Represents a collection of dimensions of an object instance, json format.
        :param int is_shielded: Whether the object is shielded or not, `0` means unshielded and `1` means shielded.
        :param str region: The region where the object is located.
        :param str unique_id: Object unique ID.
        """
        pulumi.set(__self__, "dimensions_json", dimensions_json)
        pulumi.set(__self__, "is_shielded", is_shielded)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> str:
        """
        Represents a collection of dimensions of an object instance, json format.
        """
        return pulumi.get(self, "dimensions_json")

    @property
    @pulumi.getter(name="isShielded")
    def is_shielded(self) -> int:
        """
        Whether the object is shielded or not, `0` means unshielded and `1` means shielded.
        """
        return pulumi.get(self, "is_shielded")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region where the object is located.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> str:
        """
        Object unique ID.
        """
        return pulumi.get(self, "unique_id")


@pulumi.output_type
class GetDataDimensionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Instance dimension name, eg: `InstanceId` for cvm.
        :param str value: Instance dimension value, eg: `ins-j0hk02zo` for cvm.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Instance dimension name, eg: `InstanceId` for cvm.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Instance dimension value, eg: `ins-j0hk02zo` for cvm.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDataListResult(dict):
    def __init__(__self__, *,
                 timestamp: int,
                 value: float):
        """
        :param int timestamp: Statistical timestamp.
        :param float value: Instance dimension value, eg: `ins-j0hk02zo` for cvm.
        """
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        """
        Statistical timestamp.
        """
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        Instance dimension value, eg: `ins-j0hk02zo` for cvm.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGrafanaPluginOverviewsPluginSetResult(dict):
    def __init__(__self__, *,
                 plugin_id: str,
                 version: str):
        """
        :param str plugin_id: Grafana plugin ID.
        :param str version: Grafana plugin version.
        """
        pulumi.set(__self__, "plugin_id", plugin_id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> str:
        """
        Grafana plugin ID.
        """
        return pulumi.get(self, "plugin_id")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Grafana plugin version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPolicyConditionsListResult(dict):
    def __init__(__self__, *,
                 event_metrics: Sequence['outputs.GetPolicyConditionsListEventMetricResult'],
                 is_support_multi_region: bool,
                 metrics: Sequence['outputs.GetPolicyConditionsListMetricResult'],
                 name: str,
                 policy_view_name: str,
                 support_regions: Sequence[str]):
        """
        :param Sequence['GetPolicyConditionsListEventMetricArgs'] event_metrics: A list of event condition metrics. Each element contains the following attributes:
        :param bool is_support_multi_region: Whether to support multi region.
        :param Sequence['GetPolicyConditionsListMetricArgs'] metrics: A list of event condition metrics. Each element contains the following attributes:
        :param str name: Name of the policy name, support partial matching, eg:`Cloud Virtual Machine`,`Virtual`,`Cloud Load Banlancer-Private CLB Listener`.
        :param str policy_view_name: Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
        :param Sequence[str] support_regions: Support regions of this policy view.
        """
        pulumi.set(__self__, "event_metrics", event_metrics)
        pulumi.set(__self__, "is_support_multi_region", is_support_multi_region)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_view_name", policy_view_name)
        pulumi.set(__self__, "support_regions", support_regions)

    @property
    @pulumi.getter(name="eventMetrics")
    def event_metrics(self) -> Sequence['outputs.GetPolicyConditionsListEventMetricResult']:
        """
        A list of event condition metrics. Each element contains the following attributes:
        """
        return pulumi.get(self, "event_metrics")

    @property
    @pulumi.getter(name="isSupportMultiRegion")
    def is_support_multi_region(self) -> bool:
        """
        Whether to support multi region.
        """
        return pulumi.get(self, "is_support_multi_region")

    @property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetPolicyConditionsListMetricResult']:
        """
        A list of event condition metrics. Each element contains the following attributes:
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the policy name, support partial matching, eg:`Cloud Virtual Machine`,`Virtual`,`Cloud Load Banlancer-Private CLB Listener`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyViewName")
    def policy_view_name(self) -> str:
        """
        Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
        """
        return pulumi.get(self, "policy_view_name")

    @property
    @pulumi.getter(name="supportRegions")
    def support_regions(self) -> Sequence[str]:
        """
        Support regions of this policy view.
        """
        return pulumi.get(self, "support_regions")


@pulumi.output_type
class GetPolicyConditionsListEventMetricResult(dict):
    def __init__(__self__, *,
                 event_id: int,
                 event_show_name: str,
                 need_recovered: bool):
        """
        :param int event_id: The ID of this event metric.
        :param str event_show_name: The name of this event metric.
        :param bool need_recovered: Whether to recover.
        """
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_show_name", event_show_name)
        pulumi.set(__self__, "need_recovered", need_recovered)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        """
        The ID of this event metric.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventShowName")
    def event_show_name(self) -> str:
        """
        The name of this event metric.
        """
        return pulumi.get(self, "event_show_name")

    @property
    @pulumi.getter(name="needRecovered")
    def need_recovered(self) -> bool:
        """
        Whether to recover.
        """
        return pulumi.get(self, "need_recovered")


@pulumi.output_type
class GetPolicyConditionsListMetricResult(dict):
    def __init__(__self__, *,
                 calc_type_keys: Sequence[int],
                 calc_type_need: bool,
                 calc_value_default: str,
                 calc_value_fixed: str,
                 calc_value_max: str,
                 calc_value_min: str,
                 calc_value_need: bool,
                 continue_time_default: int,
                 continue_time_keys: Sequence[int],
                 continue_time_need: bool,
                 metric_id: int,
                 metric_show_name: str,
                 metric_unit: str,
                 period_default: int,
                 period_keys: Sequence[int],
                 period_need: bool,
                 period_num_default: int,
                 period_num_keys: Sequence[int],
                 period_num_need: bool,
                 stat_type_p10: str,
                 stat_type_p1800: str,
                 stat_type_p300: str,
                 stat_type_p3600: str,
                 stat_type_p5: str,
                 stat_type_p60: str,
                 stat_type_p600: str,
                 stat_type_p86400: str):
        """
        :param Sequence[int] calc_type_keys: Calculate type of this metric.
        :param bool calc_type_need: Whether `calc_type` required in the configuration.
        :param str calc_value_default: The default calculate value of this metric.
        :param str calc_value_fixed: The fixed calculate value of this metric.
        :param str calc_value_max: The max calculate value of this metric.
        :param str calc_value_min: The min calculate value of this metric.
        :param bool calc_value_need: Whether `calc_value` required in the configuration.
        :param int continue_time_default: The default continue time(seconds) config for this metric.
        :param Sequence[int] continue_time_keys: The continue time(seconds) keys for this metric.
        :param bool continue_time_need: Whether `continue_time` required in the configuration.
        :param int metric_id: The ID of this metric.
        :param str metric_show_name: The name of this metric.
        :param str metric_unit: The unit of this metric.
        :param int period_default: The default data time(seconds) config for this metric.
        :param Sequence[int] period_keys: The data time(seconds) keys for this metric.
        :param bool period_need: Whether `period` required in the configuration.
        :param int period_num_default: The default period number config for this metric.
        :param Sequence[int] period_num_keys: The period number keys for this metric.
        :param bool period_num_need: Whether `period_num` required in the configuration.
        :param str stat_type_p10: Data aggregation mode, cycle of 10 seconds.
        :param str stat_type_p1800: Data aggregation mode, cycle of 1800 seconds.
        :param str stat_type_p300: Data aggregation mode, cycle of 300 seconds.
        :param str stat_type_p3600: Data aggregation mode, cycle of 3600 seconds.
        :param str stat_type_p5: Data aggregation mode, cycle of 5 seconds.
        :param str stat_type_p60: Data aggregation mode, cycle of 60 seconds.
        :param str stat_type_p600: Data aggregation mode, cycle of 600 seconds.
        :param str stat_type_p86400: Data aggregation mode, cycle of 86400 seconds.
        """
        pulumi.set(__self__, "calc_type_keys", calc_type_keys)
        pulumi.set(__self__, "calc_type_need", calc_type_need)
        pulumi.set(__self__, "calc_value_default", calc_value_default)
        pulumi.set(__self__, "calc_value_fixed", calc_value_fixed)
        pulumi.set(__self__, "calc_value_max", calc_value_max)
        pulumi.set(__self__, "calc_value_min", calc_value_min)
        pulumi.set(__self__, "calc_value_need", calc_value_need)
        pulumi.set(__self__, "continue_time_default", continue_time_default)
        pulumi.set(__self__, "continue_time_keys", continue_time_keys)
        pulumi.set(__self__, "continue_time_need", continue_time_need)
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_show_name", metric_show_name)
        pulumi.set(__self__, "metric_unit", metric_unit)
        pulumi.set(__self__, "period_default", period_default)
        pulumi.set(__self__, "period_keys", period_keys)
        pulumi.set(__self__, "period_need", period_need)
        pulumi.set(__self__, "period_num_default", period_num_default)
        pulumi.set(__self__, "period_num_keys", period_num_keys)
        pulumi.set(__self__, "period_num_need", period_num_need)
        pulumi.set(__self__, "stat_type_p10", stat_type_p10)
        pulumi.set(__self__, "stat_type_p1800", stat_type_p1800)
        pulumi.set(__self__, "stat_type_p300", stat_type_p300)
        pulumi.set(__self__, "stat_type_p3600", stat_type_p3600)
        pulumi.set(__self__, "stat_type_p5", stat_type_p5)
        pulumi.set(__self__, "stat_type_p60", stat_type_p60)
        pulumi.set(__self__, "stat_type_p600", stat_type_p600)
        pulumi.set(__self__, "stat_type_p86400", stat_type_p86400)

    @property
    @pulumi.getter(name="calcTypeKeys")
    def calc_type_keys(self) -> Sequence[int]:
        """
        Calculate type of this metric.
        """
        return pulumi.get(self, "calc_type_keys")

    @property
    @pulumi.getter(name="calcTypeNeed")
    def calc_type_need(self) -> bool:
        """
        Whether `calc_type` required in the configuration.
        """
        return pulumi.get(self, "calc_type_need")

    @property
    @pulumi.getter(name="calcValueDefault")
    def calc_value_default(self) -> str:
        """
        The default calculate value of this metric.
        """
        return pulumi.get(self, "calc_value_default")

    @property
    @pulumi.getter(name="calcValueFixed")
    def calc_value_fixed(self) -> str:
        """
        The fixed calculate value of this metric.
        """
        return pulumi.get(self, "calc_value_fixed")

    @property
    @pulumi.getter(name="calcValueMax")
    def calc_value_max(self) -> str:
        """
        The max calculate value of this metric.
        """
        return pulumi.get(self, "calc_value_max")

    @property
    @pulumi.getter(name="calcValueMin")
    def calc_value_min(self) -> str:
        """
        The min calculate value of this metric.
        """
        return pulumi.get(self, "calc_value_min")

    @property
    @pulumi.getter(name="calcValueNeed")
    def calc_value_need(self) -> bool:
        """
        Whether `calc_value` required in the configuration.
        """
        return pulumi.get(self, "calc_value_need")

    @property
    @pulumi.getter(name="continueTimeDefault")
    def continue_time_default(self) -> int:
        """
        The default continue time(seconds) config for this metric.
        """
        return pulumi.get(self, "continue_time_default")

    @property
    @pulumi.getter(name="continueTimeKeys")
    def continue_time_keys(self) -> Sequence[int]:
        """
        The continue time(seconds) keys for this metric.
        """
        return pulumi.get(self, "continue_time_keys")

    @property
    @pulumi.getter(name="continueTimeNeed")
    def continue_time_need(self) -> bool:
        """
        Whether `continue_time` required in the configuration.
        """
        return pulumi.get(self, "continue_time_need")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        """
        The ID of this metric.
        """
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="metricShowName")
    def metric_show_name(self) -> str:
        """
        The name of this metric.
        """
        return pulumi.get(self, "metric_show_name")

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> str:
        """
        The unit of this metric.
        """
        return pulumi.get(self, "metric_unit")

    @property
    @pulumi.getter(name="periodDefault")
    def period_default(self) -> int:
        """
        The default data time(seconds) config for this metric.
        """
        return pulumi.get(self, "period_default")

    @property
    @pulumi.getter(name="periodKeys")
    def period_keys(self) -> Sequence[int]:
        """
        The data time(seconds) keys for this metric.
        """
        return pulumi.get(self, "period_keys")

    @property
    @pulumi.getter(name="periodNeed")
    def period_need(self) -> bool:
        """
        Whether `period` required in the configuration.
        """
        return pulumi.get(self, "period_need")

    @property
    @pulumi.getter(name="periodNumDefault")
    def period_num_default(self) -> int:
        """
        The default period number config for this metric.
        """
        return pulumi.get(self, "period_num_default")

    @property
    @pulumi.getter(name="periodNumKeys")
    def period_num_keys(self) -> Sequence[int]:
        """
        The period number keys for this metric.
        """
        return pulumi.get(self, "period_num_keys")

    @property
    @pulumi.getter(name="periodNumNeed")
    def period_num_need(self) -> bool:
        """
        Whether `period_num` required in the configuration.
        """
        return pulumi.get(self, "period_num_need")

    @property
    @pulumi.getter(name="statTypeP10")
    def stat_type_p10(self) -> str:
        """
        Data aggregation mode, cycle of 10 seconds.
        """
        return pulumi.get(self, "stat_type_p10")

    @property
    @pulumi.getter(name="statTypeP1800")
    def stat_type_p1800(self) -> str:
        """
        Data aggregation mode, cycle of 1800 seconds.
        """
        return pulumi.get(self, "stat_type_p1800")

    @property
    @pulumi.getter(name="statTypeP300")
    def stat_type_p300(self) -> str:
        """
        Data aggregation mode, cycle of 300 seconds.
        """
        return pulumi.get(self, "stat_type_p300")

    @property
    @pulumi.getter(name="statTypeP3600")
    def stat_type_p3600(self) -> str:
        """
        Data aggregation mode, cycle of 3600 seconds.
        """
        return pulumi.get(self, "stat_type_p3600")

    @property
    @pulumi.getter(name="statTypeP5")
    def stat_type_p5(self) -> str:
        """
        Data aggregation mode, cycle of 5 seconds.
        """
        return pulumi.get(self, "stat_type_p5")

    @property
    @pulumi.getter(name="statTypeP60")
    def stat_type_p60(self) -> str:
        """
        Data aggregation mode, cycle of 60 seconds.
        """
        return pulumi.get(self, "stat_type_p60")

    @property
    @pulumi.getter(name="statTypeP600")
    def stat_type_p600(self) -> str:
        """
        Data aggregation mode, cycle of 600 seconds.
        """
        return pulumi.get(self, "stat_type_p600")

    @property
    @pulumi.getter(name="statTypeP86400")
    def stat_type_p86400(self) -> str:
        """
        Data aggregation mode, cycle of 86400 seconds.
        """
        return pulumi.get(self, "stat_type_p86400")


@pulumi.output_type
class GetPolicyGroupsListResult(dict):
    def __init__(__self__, *,
                 can_set_default: bool,
                 conditions: Sequence['outputs.GetPolicyGroupsListConditionResult'],
                 event_conditions: Sequence['outputs.GetPolicyGroupsListEventConditionResult'],
                 group_id: int,
                 group_name: str,
                 insert_time: int,
                 is_default: int,
                 is_open: bool,
                 last_edit_uin: str,
                 no_shielded_sum: int,
                 parent_group_id: int,
                 policy_view_name: str,
                 project_id: int,
                 receivers: Sequence['outputs.GetPolicyGroupsListReceiverResult'],
                 remark: str,
                 update_time: int,
                 use_sum: int):
        """
        :param bool can_set_default: Whether it can be set as the default policy.
        :param Sequence['GetPolicyGroupsListConditionArgs'] conditions: A list of threshold rules. Each element contains the following attributes:
        :param Sequence['GetPolicyGroupsListEventConditionArgs'] event_conditions: A list of event rules. Each element contains the following attributes:
        :param int group_id: The policy group id.
        :param str group_name: The policy group name.
        :param int insert_time: The policy group create timestamp.
        :param int is_default: If is default policy group or not, `0` represents the non-default policy, and `1` represents the default policy.
        :param bool is_open: Whether open or not.
        :param str last_edit_uin: Recently edited user uin.
        :param int no_shielded_sum: Number of unmasked instances of policy group bindings.
        :param int parent_group_id: Parent policy group ID.
        :param str policy_view_name: The policy group view name.
        :param int project_id: The project ID to which the policy group belongs.
        :param Sequence['GetPolicyGroupsListReceiverArgs'] receivers: A list of receivers. Each element contains the following attributes:
        :param str remark: Policy group remarks.
        :param int update_time: The policy group update timestamp.
        :param int use_sum: Number of instances of policy group bindings.
        """
        pulumi.set(__self__, "can_set_default", can_set_default)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "event_conditions", event_conditions)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "insert_time", insert_time)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_open", is_open)
        pulumi.set(__self__, "last_edit_uin", last_edit_uin)
        pulumi.set(__self__, "no_shielded_sum", no_shielded_sum)
        pulumi.set(__self__, "parent_group_id", parent_group_id)
        pulumi.set(__self__, "policy_view_name", policy_view_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "receivers", receivers)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "use_sum", use_sum)

    @property
    @pulumi.getter(name="canSetDefault")
    def can_set_default(self) -> bool:
        """
        Whether it can be set as the default policy.
        """
        return pulumi.get(self, "can_set_default")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetPolicyGroupsListConditionResult']:
        """
        A list of threshold rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Sequence['outputs.GetPolicyGroupsListEventConditionResult']:
        """
        A list of event rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        """
        The policy group id.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        The policy group name.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> int:
        """
        The policy group create timestamp.
        """
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> int:
        """
        If is default policy group or not, `0` represents the non-default policy, and `1` represents the default policy.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isOpen")
    def is_open(self) -> bool:
        """
        Whether open or not.
        """
        return pulumi.get(self, "is_open")

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> str:
        """
        Recently edited user uin.
        """
        return pulumi.get(self, "last_edit_uin")

    @property
    @pulumi.getter(name="noShieldedSum")
    def no_shielded_sum(self) -> int:
        """
        Number of unmasked instances of policy group bindings.
        """
        return pulumi.get(self, "no_shielded_sum")

    @property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> int:
        """
        Parent policy group ID.
        """
        return pulumi.get(self, "parent_group_id")

    @property
    @pulumi.getter(name="policyViewName")
    def policy_view_name(self) -> str:
        """
        The policy group view name.
        """
        return pulumi.get(self, "policy_view_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        The project ID to which the policy group belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def receivers(self) -> Sequence['outputs.GetPolicyGroupsListReceiverResult']:
        """
        A list of receivers. Each element contains the following attributes:
        """
        return pulumi.get(self, "receivers")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Policy group remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        """
        The policy group update timestamp.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="useSum")
    def use_sum(self) -> int:
        """
        Number of instances of policy group bindings.
        """
        return pulumi.get(self, "use_sum")


@pulumi.output_type
class GetPolicyGroupsListConditionResult(dict):
    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 calc_type: int,
                 calc_value: str,
                 continue_time: int,
                 metric_id: int,
                 metric_show_name: str,
                 metric_unit: str,
                 period: int,
                 rule_id: int):
        """
        :param int alarm_notify_period: Alarm sending cycle per second. `<0` does not fire, `0` only fires once, and `>0` fires every triggerTime second.
        :param int alarm_notify_type: Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
        :param int calc_type: Compare type, `1` means more than, `2`  means greater than or equal, `3` means less than, `4` means less than or equal to, `5` means equal, `6` means not equal, `7` means days rose, `8` means days fell, `9` means weeks rose, `10` means weeks fell, `11` means period rise, `12` means period fell.
        :param str calc_value: Threshold value.
        :param int continue_time: How long does the triggering rule last (per second).
        :param int metric_id: The ID of this metric.
        :param str metric_show_name: The name of this metric.
        :param str metric_unit: The unit of this metric.
        :param int period: Data aggregation cycle (unit second).
        :param int rule_id: Threshold rule ID.
        """
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "calc_type", calc_type)
        pulumi.set(__self__, "calc_value", calc_value)
        pulumi.set(__self__, "continue_time", continue_time)
        pulumi.set(__self__, "metric_id", metric_id)
        pulumi.set(__self__, "metric_show_name", metric_show_name)
        pulumi.set(__self__, "metric_unit", metric_unit)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        """
        Alarm sending cycle per second. `<0` does not fire, `0` only fires once, and `>0` fires every triggerTime second.
        """
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        """
        Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
        """
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="calcType")
    def calc_type(self) -> int:
        """
        Compare type, `1` means more than, `2`  means greater than or equal, `3` means less than, `4` means less than or equal to, `5` means equal, `6` means not equal, `7` means days rose, `8` means days fell, `9` means weeks rose, `10` means weeks fell, `11` means period rise, `12` means period fell.
        """
        return pulumi.get(self, "calc_type")

    @property
    @pulumi.getter(name="calcValue")
    def calc_value(self) -> str:
        """
        Threshold value.
        """
        return pulumi.get(self, "calc_value")

    @property
    @pulumi.getter(name="continueTime")
    def continue_time(self) -> int:
        """
        How long does the triggering rule last (per second).
        """
        return pulumi.get(self, "continue_time")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        """
        The ID of this metric.
        """
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="metricShowName")
    def metric_show_name(self) -> str:
        """
        The name of this metric.
        """
        return pulumi.get(self, "metric_show_name")

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> str:
        """
        The unit of this metric.
        """
        return pulumi.get(self, "metric_unit")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Data aggregation cycle (unit second).
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        """
        Threshold rule ID.
        """
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class GetPolicyGroupsListEventConditionResult(dict):
    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 event_id: int,
                 event_show_name: str,
                 rule_id: int):
        """
        :param int alarm_notify_period: Alarm sending cycle per second. `<0` does not fire, `0` only fires once, and `>0` fires every triggerTime second.
        :param int alarm_notify_type: Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
        :param int event_id: The ID of this event metric.
        :param str event_show_name: The name of this event metric.
        :param int rule_id: Threshold rule ID.
        """
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_show_name", event_show_name)
        pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        """
        Alarm sending cycle per second. `<0` does not fire, `0` only fires once, and `>0` fires every triggerTime second.
        """
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        """
        Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
        """
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        """
        The ID of this event metric.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventShowName")
    def event_show_name(self) -> str:
        """
        The name of this event metric.
        """
        return pulumi.get(self, "event_show_name")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> int:
        """
        Threshold rule ID.
        """
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class GetPolicyGroupsListReceiverResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 need_send_notice: int,
                 notify_ways: Sequence[str],
                 person_interval: int,
                 receive_language: str,
                 receiver_group_lists: Sequence[int],
                 receiver_type: str,
                 receiver_user_lists: Sequence[int],
                 recover_notifies: Sequence[str],
                 round_interval: int,
                 round_number: int,
                 send_fors: Sequence[str],
                 start_time: int,
                 uid_lists: Sequence[int]):
        """
        :param int end_time: End of alarm period. Meaning with `start_time`.
        :param int need_send_notice: Do need a telephone alarm contact prompt.You don't need 0, you need 1.
        :param Sequence[str] notify_ways: Method of warning notification.Optional `CALL`,`EMAIL`,`SITE`,`SMS`,`WECHAT`.
        :param int person_interval: Telephone warning to individual interval (seconds).
        :param str receive_language: Alert sending language.
        :param Sequence[int] receiver_group_lists: Alarm receive group ID list.
        :param str receiver_type: Receive type. Optional 'group' or 'user'.
        :param Sequence[int] receiver_user_lists: Alarm receiver ID list.
        :param Sequence[str] recover_notifies: Restore notification mode. Optional "SMS".
        :param int round_interval: Telephone alarm interval per round (seconds).
        :param int round_number: Telephone alarm number.
        :param Sequence[str] send_fors: Telephone warning time.Option "OCCUR", "RECOVER".
        :param int start_time: Alarm period start time.Range [0,86399], which removes the date after it is converted to Beijing time as a Unix timestamp, for example 7200 means '10:0:0'.
        :param Sequence[int] uid_lists: The phone alerts the receiver uid.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "need_send_notice", need_send_notice)
        pulumi.set(__self__, "notify_ways", notify_ways)
        pulumi.set(__self__, "person_interval", person_interval)
        pulumi.set(__self__, "receive_language", receive_language)
        pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        pulumi.set(__self__, "receiver_type", receiver_type)
        pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        pulumi.set(__self__, "recover_notifies", recover_notifies)
        pulumi.set(__self__, "round_interval", round_interval)
        pulumi.set(__self__, "round_number", round_number)
        pulumi.set(__self__, "send_fors", send_fors)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "uid_lists", uid_lists)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        """
        End of alarm period. Meaning with `start_time`.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="needSendNotice")
    def need_send_notice(self) -> int:
        """
        Do need a telephone alarm contact prompt.You don't need 0, you need 1.
        """
        return pulumi.get(self, "need_send_notice")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Sequence[str]:
        """
        Method of warning notification.Optional `CALL`,`EMAIL`,`SITE`,`SMS`,`WECHAT`.
        """
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="personInterval")
    def person_interval(self) -> int:
        """
        Telephone warning to individual interval (seconds).
        """
        return pulumi.get(self, "person_interval")

    @property
    @pulumi.getter(name="receiveLanguage")
    def receive_language(self) -> str:
        """
        Alert sending language.
        """
        return pulumi.get(self, "receive_language")

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Sequence[int]:
        """
        Alarm receive group ID list.
        """
        return pulumi.get(self, "receiver_group_lists")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        """
        Receive type. Optional 'group' or 'user'.
        """
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Sequence[int]:
        """
        Alarm receiver ID list.
        """
        return pulumi.get(self, "receiver_user_lists")

    @property
    @pulumi.getter(name="recoverNotifies")
    def recover_notifies(self) -> Sequence[str]:
        """
        Restore notification mode. Optional "SMS".
        """
        return pulumi.get(self, "recover_notifies")

    @property
    @pulumi.getter(name="roundInterval")
    def round_interval(self) -> int:
        """
        Telephone alarm interval per round (seconds).
        """
        return pulumi.get(self, "round_interval")

    @property
    @pulumi.getter(name="roundNumber")
    def round_number(self) -> int:
        """
        Telephone alarm number.
        """
        return pulumi.get(self, "round_number")

    @property
    @pulumi.getter(name="sendFors")
    def send_fors(self) -> Sequence[str]:
        """
        Telephone warning time.Option "OCCUR", "RECOVER".
        """
        return pulumi.get(self, "send_fors")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        Alarm period start time.Range [0,86399], which removes the date after it is converted to Beijing time as a Unix timestamp, for example 7200 means '10:0:0'.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="uidLists")
    def uid_lists(self) -> Sequence[int]:
        """
        The phone alerts the receiver uid.
        """
        return pulumi.get(self, "uid_lists")


@pulumi.output_type
class GetProductEventDimensionResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Instance dimension name, eg: `deviceWanIp` for internet ip.
        :param str value: Instance dimension value, eg: `119.119.119.119` for internet ip.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Instance dimension name, eg: `deviceWanIp` for internet ip.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Instance dimension value, eg: `119.119.119.119` for internet ip.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProductEventListResult(dict):
    def __init__(__self__, *,
                 addition_msgs: Sequence['outputs.GetProductEventListAdditionMsgResult'],
                 dimensions: Sequence['outputs.GetProductEventListDimensionResult'],
                 event_cname: str,
                 event_ename: str,
                 event_id: int,
                 event_name: str,
                 group_infos: Sequence['outputs.GetProductEventListGroupInfoResult'],
                 instance_id: str,
                 instance_name: str,
                 is_alarm_config: int,
                 product_cname: str,
                 product_ename: str,
                 product_name: str,
                 project_id: str,
                 region: str,
                 start_time: int,
                 status: str,
                 support_alarm: int,
                 type: str,
                 update_time: int):
        """
        :param Sequence['GetProductEventListAdditionMsgArgs'] addition_msgs: A list of addition message. Each element contains the following attributes:
        :param Sequence['GetProductEventListDimensionArgs'] dimensions: Dimensional composition of instance objects.
        :param str event_cname: Event chinese name.
        :param str event_ename: Event english name.
        :param int event_id: Event ID.
        :param str event_name: Event name filtering, such as `guest_reboot` indicates that the machine restart.
        :param Sequence['GetProductEventListGroupInfoArgs'] group_infos: A list of group info. Each element contains the following attributes:
        :param str instance_id: Affect objects, such as `ins-19708ino`.
        :param str instance_name: The name of this instance.
        :param int is_alarm_config: Alarm status configuration filter, 1means configured, 0(default) means not configured.
        :param str product_cname: Product chinese name.
        :param str product_ename: Product english name.
        :param str product_name: Product type filtering, such as `cvm` for cloud server.
        :param str project_id: Project ID filter.
        :param str region: The region of this instance.
        :param int start_time: Start timestamp for this query, eg:`1588230000`. Default start time is `now-3600`.
        :param str status: Event status filter, value range `-`,`alarm`,`recover`, indicating recovered, unrecovered and stateless.
        :param int support_alarm: Whether to support alarm.
        :param str type: Event type filtering, with value range `abnormal`,`status_change`, indicating state change and abnormal events.
        :param int update_time: The update timestamp of this event.
        """
        pulumi.set(__self__, "addition_msgs", addition_msgs)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "event_cname", event_cname)
        pulumi.set(__self__, "event_ename", event_ename)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "group_infos", group_infos)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "is_alarm_config", is_alarm_config)
        pulumi.set(__self__, "product_cname", product_cname)
        pulumi.set(__self__, "product_ename", product_ename)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_alarm", support_alarm)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="additionMsgs")
    def addition_msgs(self) -> Sequence['outputs.GetProductEventListAdditionMsgResult']:
        """
        A list of addition message. Each element contains the following attributes:
        """
        return pulumi.get(self, "addition_msgs")

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetProductEventListDimensionResult']:
        """
        Dimensional composition of instance objects.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="eventCname")
    def event_cname(self) -> str:
        """
        Event chinese name.
        """
        return pulumi.get(self, "event_cname")

    @property
    @pulumi.getter(name="eventEname")
    def event_ename(self) -> str:
        """
        Event english name.
        """
        return pulumi.get(self, "event_ename")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        """
        Event ID.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventName")
    def event_name(self) -> str:
        """
        Event name filtering, such as `guest_reboot` indicates that the machine restart.
        """
        return pulumi.get(self, "event_name")

    @property
    @pulumi.getter(name="groupInfos")
    def group_infos(self) -> Sequence['outputs.GetProductEventListGroupInfoResult']:
        """
        A list of group info. Each element contains the following attributes:
        """
        return pulumi.get(self, "group_infos")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Affect objects, such as `ins-19708ino`.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        The name of this instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="isAlarmConfig")
    def is_alarm_config(self) -> int:
        """
        Alarm status configuration filter, 1means configured, 0(default) means not configured.
        """
        return pulumi.get(self, "is_alarm_config")

    @property
    @pulumi.getter(name="productCname")
    def product_cname(self) -> str:
        """
        Product chinese name.
        """
        return pulumi.get(self, "product_cname")

    @property
    @pulumi.getter(name="productEname")
    def product_ename(self) -> str:
        """
        Product english name.
        """
        return pulumi.get(self, "product_ename")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        """
        Product type filtering, such as `cvm` for cloud server.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Project ID filter.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of this instance.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        Start timestamp for this query, eg:`1588230000`. Default start time is `now-3600`.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Event status filter, value range `-`,`alarm`,`recover`, indicating recovered, unrecovered and stateless.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportAlarm")
    def support_alarm(self) -> int:
        """
        Whether to support alarm.
        """
        return pulumi.get(self, "support_alarm")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Event type filtering, with value range `abnormal`,`status_change`, indicating state change and abnormal events.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        """
        The update timestamp of this event.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetProductEventListAdditionMsgResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 value: str):
        """
        :param str key: The key of this dimension.
        :param str name: Instance dimension name, eg: `deviceWanIp` for internet ip.
        :param str value: Instance dimension value, eg: `119.119.119.119` for internet ip.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of this dimension.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Instance dimension name, eg: `deviceWanIp` for internet ip.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Instance dimension value, eg: `119.119.119.119` for internet ip.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProductEventListDimensionResult(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 value: str):
        """
        :param str key: The key of this dimension.
        :param str name: Instance dimension name, eg: `deviceWanIp` for internet ip.
        :param str value: Instance dimension value, eg: `119.119.119.119` for internet ip.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of this dimension.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Instance dimension name, eg: `deviceWanIp` for internet ip.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Instance dimension value, eg: `119.119.119.119` for internet ip.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProductEventListGroupInfoResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 group_name: str):
        """
        :param str group_id: Policy group ID.
        :param str group_name: Policy group name.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        Policy group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Policy group name.
        """
        return pulumi.get(self, "group_name")


@pulumi.output_type
class GetProductNamespaceListResult(dict):
    def __init__(__self__, *,
                 namespace: str,
                 product_chinese_name: str,
                 product_name: str):
        """
        :param str namespace: Namespace of each cloud product in monitor system.
        :param str product_chinese_name: Chinese name of this product.
        :param str product_name: English name of this product.
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "product_chinese_name", product_chinese_name)
        pulumi.set(__self__, "product_name", product_name)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace of each cloud product in monitor system.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="productChineseName")
    def product_chinese_name(self) -> str:
        """
        Chinese name of this product.
        """
        return pulumi.get(self, "product_chinese_name")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        """
        English name of this product.
        """
        return pulumi.get(self, "product_name")


@pulumi.output_type
class GetStatisticDataConditionResult(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        """
        :param str key: Dimension.
        :param str operator: Operator. Valid values: eq (equal to), ne (not equal to), in.
        :param Sequence[str] values: Dimension value. If Operator is eq or ne, only the first element will be used.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Dimension.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operator. Valid values: eq (equal to), ne (not equal to), in.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Dimension value. If Operator is eq or ne, only the first element will be used.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetStatisticDataDataResult(dict):
    def __init__(__self__, *,
                 metric_name: str,
                 points: Sequence['outputs.GetStatisticDataDataPointResult']):
        """
        :param str metric_name: Metric name.
        :param Sequence['GetStatisticDataDataPointArgs'] points: Monitoring data point.
        """
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "points", points)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Metric name.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def points(self) -> Sequence['outputs.GetStatisticDataDataPointResult']:
        """
        Monitoring data point.
        """
        return pulumi.get(self, "points")


@pulumi.output_type
class GetStatisticDataDataPointResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetStatisticDataDataPointDimensionResult'],
                 values: Sequence['outputs.GetStatisticDataDataPointValueResult']):
        """
        :param Sequence['GetStatisticDataDataPointDimensionArgs'] dimensions: Combination of instance object dimensions.
        :param Sequence['GetStatisticDataDataPointValueArgs'] values: Data point list.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetStatisticDataDataPointDimensionResult']:
        """
        Combination of instance object dimensions.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetStatisticDataDataPointValueResult']:
        """
        Data point list.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetStatisticDataDataPointDimensionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Instance dimension name.
        :param str value: Instance dimension value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Instance dimension name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Instance dimension value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetStatisticDataDataPointValueResult(dict):
    def __init__(__self__, *,
                 timestamp: int,
                 value: float):
        """
        :param int timestamp: Time point when this monitoring data point is generated.
        :param float value: Monitoring data point valueNote: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        """
        Time point when this monitoring data point is generated.
        """
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        Monitoring data point valueNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTmpInstancesInstanceSetResult(dict):
    def __init__(__self__, *,
                 alert_rule_limit: int,
                 api_root_path: str,
                 auth_token: str,
                 auto_renew_flag: int,
                 charge_status: int,
                 created_at: str,
                 data_retention_time: int,
                 enable_grafana: int,
                 expire_time: str,
                 grafana_instance_id: str,
                 grafana_ip_white_list: str,
                 grafana_status: int,
                 grafana_url: str,
                 grants: Sequence['outputs.GetTmpInstancesInstanceSetGrantResult'],
                 instance_charge_type: int,
                 instance_id: str,
                 instance_name: str,
                 instance_status: int,
                 ipv4_address: str,
                 is_near_expire: int,
                 migration_type: int,
                 proxy_address: str,
                 recording_rule_limit: int,
                 region_id: int,
                 remote_write: str,
                 spec_name: str,
                 subnet_id: str,
                 tag_specifications: Sequence['outputs.GetTmpInstancesInstanceSetTagSpecificationResult'],
                 vpc_id: str,
                 zone: str):
        """
        :param int alert_rule_limit: Alert rule limit.
        :param str api_root_path: Prometheus http api root address.
        :param str auth_token: Token required for data writing.
        :param int auto_renew_flag: Automatic renewal flag.
               - 0: No automatic renewal;
               - 1: Enable automatic renewal;
               - 2: Automatic renewal is prohibited;
               - -1: Invalid.
        :param int charge_status: Charge status.
               - 1: Normal;
               - 2: Expires;
               - 3: Destruction;
               - 4: Allocation;
               - 5: Allocation failed.
        :param str created_at: Created_at.
        :param int data_retention_time: Data retention time.
        :param int enable_grafana: Whether to enable grafana.
               - 0: closed;
               - 1: open.
        :param str expire_time: Expires for purchased instances.
        :param str grafana_instance_id: Binding grafana instance id.
        :param str grafana_ip_white_list: Grafana IP whitelist list.
        :param int grafana_status: Grafana status.
               - 1: Creating;
               - 2: In operation;
               - 3: Abnormal;
               - 4: Rebooting;
               - 5: Destruction;
               - 6: Shutdown;
               - 7: Deleted.
        :param str grafana_url: Grafana panel url.
        :param Sequence['GetTmpInstancesInstanceSetGrantArgs'] grants: Authorization information for the instance.
        :param int instance_charge_type: Filter according to instance charge type.
               - 2: Prepaid;
               - 3: Postpaid by hour.
        :param str instance_id: Instance id.
        :param str instance_name: Filter according to instance name.
        :param int instance_status: Filter according to instance status.
               - 1: Creating;
               - 2: In operation;
               - 3: Abnormal;
               - 4: Reconstruction;
               - 5: Destruction;
               - 6: Stopped taking;
               - 8: Suspension of service due to arrears;
               - 9: Service has been suspended due to arrears.
        :param str ipv4_address: Filter according to ipv4 address.
        :param int is_near_expire: Whether it is about to expire.
               - 0: No;
               - 1: Expiring soon.
        :param int migration_type: Migration status.
               - 0: Not in migration;
               +	- 1: Migrating, original instance;
               +	- 2: Migrating, target instance.
        :param str proxy_address: Proxy address.
        :param int recording_rule_limit: Pre-aggregation rule limitations.
        :param int region_id: Region id.
        :param str remote_write: Address of prometheus remote write.
        :param str spec_name: Specification name.
        :param str subnet_id: Subnet id.
        :param Sequence['GetTmpInstancesInstanceSetTagSpecificationArgs'] tag_specifications: List of tags associated with the instance.
        :param str vpc_id: VPC id.
        :param str zone: Zone.
        """
        pulumi.set(__self__, "alert_rule_limit", alert_rule_limit)
        pulumi.set(__self__, "api_root_path", api_root_path)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "charge_status", charge_status)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "data_retention_time", data_retention_time)
        pulumi.set(__self__, "enable_grafana", enable_grafana)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "grafana_instance_id", grafana_instance_id)
        pulumi.set(__self__, "grafana_ip_white_list", grafana_ip_white_list)
        pulumi.set(__self__, "grafana_status", grafana_status)
        pulumi.set(__self__, "grafana_url", grafana_url)
        pulumi.set(__self__, "grants", grants)
        pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "is_near_expire", is_near_expire)
        pulumi.set(__self__, "migration_type", migration_type)
        pulumi.set(__self__, "proxy_address", proxy_address)
        pulumi.set(__self__, "recording_rule_limit", recording_rule_limit)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "remote_write", remote_write)
        pulumi.set(__self__, "spec_name", spec_name)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tag_specifications", tag_specifications)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="alertRuleLimit")
    def alert_rule_limit(self) -> int:
        """
        Alert rule limit.
        """
        return pulumi.get(self, "alert_rule_limit")

    @property
    @pulumi.getter(name="apiRootPath")
    def api_root_path(self) -> str:
        """
        Prometheus http api root address.
        """
        return pulumi.get(self, "api_root_path")

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        """
        Token required for data writing.
        """
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        """
        Automatic renewal flag.
        - 0: No automatic renewal;
        - 1: Enable automatic renewal;
        - 2: Automatic renewal is prohibited;
        - -1: Invalid.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="chargeStatus")
    def charge_status(self) -> int:
        """
        Charge status.
        - 1: Normal;
        - 2: Expires;
        - 3: Destruction;
        - 4: Allocation;
        - 5: Allocation failed.
        """
        return pulumi.get(self, "charge_status")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Created_at.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataRetentionTime")
    def data_retention_time(self) -> int:
        """
        Data retention time.
        """
        return pulumi.get(self, "data_retention_time")

    @property
    @pulumi.getter(name="enableGrafana")
    def enable_grafana(self) -> int:
        """
        Whether to enable grafana.
        - 0: closed;
        - 1: open.
        """
        return pulumi.get(self, "enable_grafana")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Expires for purchased instances.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="grafanaInstanceId")
    def grafana_instance_id(self) -> str:
        """
        Binding grafana instance id.
        """
        return pulumi.get(self, "grafana_instance_id")

    @property
    @pulumi.getter(name="grafanaIpWhiteList")
    def grafana_ip_white_list(self) -> str:
        """
        Grafana IP whitelist list.
        """
        return pulumi.get(self, "grafana_ip_white_list")

    @property
    @pulumi.getter(name="grafanaStatus")
    def grafana_status(self) -> int:
        """
        Grafana status.
        - 1: Creating;
        - 2: In operation;
        - 3: Abnormal;
        - 4: Rebooting;
        - 5: Destruction;
        - 6: Shutdown;
        - 7: Deleted.
        """
        return pulumi.get(self, "grafana_status")

    @property
    @pulumi.getter(name="grafanaUrl")
    def grafana_url(self) -> str:
        """
        Grafana panel url.
        """
        return pulumi.get(self, "grafana_url")

    @property
    @pulumi.getter
    def grants(self) -> Sequence['outputs.GetTmpInstancesInstanceSetGrantResult']:
        """
        Authorization information for the instance.
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> int:
        """
        Filter according to instance charge type.
        - 2: Prepaid;
        - 3: Postpaid by hour.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Filter according to instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> int:
        """
        Filter according to instance status.
        - 1: Creating;
        - 2: In operation;
        - 3: Abnormal;
        - 4: Reconstruction;
        - 5: Destruction;
        - 6: Stopped taking;
        - 8: Suspension of service due to arrears;
        - 9: Service has been suspended due to arrears.
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        """
        Filter according to ipv4 address.
        """
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter(name="isNearExpire")
    def is_near_expire(self) -> int:
        """
        Whether it is about to expire.
        - 0: No;
        - 1: Expiring soon.
        """
        return pulumi.get(self, "is_near_expire")

    @property
    @pulumi.getter(name="migrationType")
    def migration_type(self) -> int:
        """
        Migration status.
        - 0: Not in migration;
        +	- 1: Migrating, original instance;
        +	- 2: Migrating, target instance.
        """
        return pulumi.get(self, "migration_type")

    @property
    @pulumi.getter(name="proxyAddress")
    def proxy_address(self) -> str:
        """
        Proxy address.
        """
        return pulumi.get(self, "proxy_address")

    @property
    @pulumi.getter(name="recordingRuleLimit")
    def recording_rule_limit(self) -> int:
        """
        Pre-aggregation rule limitations.
        """
        return pulumi.get(self, "recording_rule_limit")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Region id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="remoteWrite")
    def remote_write(self) -> str:
        """
        Address of prometheus remote write.
        """
        return pulumi.get(self, "remote_write")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        """
        Specification name.
        """
        return pulumi.get(self, "spec_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Sequence['outputs.GetTmpInstancesInstanceSetTagSpecificationResult']:
        """
        List of tags associated with the instance.
        """
        return pulumi.get(self, "tag_specifications")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC id.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetTmpInstancesInstanceSetGrantResult(dict):
    def __init__(__self__, *,
                 has_agent_manage: int,
                 has_api_operation: int,
                 has_charge_operation: int,
                 has_grafana_status_change: int,
                 has_tke_manage: int,
                 has_vpc_display: int):
        """
        :param int has_agent_manage: Whether you have permission to manage the agent (1=yes, 2=no).
        :param int has_api_operation: Whether to display API and other information (1=yes, 2=no).
        :param int has_charge_operation: Whether you have charging operation authority (1=yes, 2=no).
        :param int has_grafana_status_change: Whether the status of Grafana can be modified (1=yes, 2=no).
        :param int has_tke_manage: Whether you have permission to manage TKE integration (1=yes, 2=no).
        :param int has_vpc_display: Whether to display VPC information (1=yes, 2=no).
        """
        pulumi.set(__self__, "has_agent_manage", has_agent_manage)
        pulumi.set(__self__, "has_api_operation", has_api_operation)
        pulumi.set(__self__, "has_charge_operation", has_charge_operation)
        pulumi.set(__self__, "has_grafana_status_change", has_grafana_status_change)
        pulumi.set(__self__, "has_tke_manage", has_tke_manage)
        pulumi.set(__self__, "has_vpc_display", has_vpc_display)

    @property
    @pulumi.getter(name="hasAgentManage")
    def has_agent_manage(self) -> int:
        """
        Whether you have permission to manage the agent (1=yes, 2=no).
        """
        return pulumi.get(self, "has_agent_manage")

    @property
    @pulumi.getter(name="hasApiOperation")
    def has_api_operation(self) -> int:
        """
        Whether to display API and other information (1=yes, 2=no).
        """
        return pulumi.get(self, "has_api_operation")

    @property
    @pulumi.getter(name="hasChargeOperation")
    def has_charge_operation(self) -> int:
        """
        Whether you have charging operation authority (1=yes, 2=no).
        """
        return pulumi.get(self, "has_charge_operation")

    @property
    @pulumi.getter(name="hasGrafanaStatusChange")
    def has_grafana_status_change(self) -> int:
        """
        Whether the status of Grafana can be modified (1=yes, 2=no).
        """
        return pulumi.get(self, "has_grafana_status_change")

    @property
    @pulumi.getter(name="hasTkeManage")
    def has_tke_manage(self) -> int:
        """
        Whether you have permission to manage TKE integration (1=yes, 2=no).
        """
        return pulumi.get(self, "has_tke_manage")

    @property
    @pulumi.getter(name="hasVpcDisplay")
    def has_vpc_display(self) -> int:
        """
        Whether to display VPC information (1=yes, 2=no).
        """
        return pulumi.get(self, "has_vpc_display")


@pulumi.output_type
class GetTmpInstancesInstanceSetTagSpecificationResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of the tag.
        :param str value: The value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTmpInstancesTagFilterResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of the tag.
        :param str value: The value of the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the tag.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTmpRegionsRegionSetResult(dict):
    def __init__(__self__, *,
                 area: str,
                 region: str,
                 region_id: int,
                 region_name: str,
                 region_pay_mode: int,
                 region_short_name: str,
                 region_state: int):
        """
        :param str area: Region area.
        :param str region: Region.
        :param int region_id: Region ID.
        :param str region_name: Region name.
        :param int region_pay_mode: Region pay mode.
        :param str region_short_name: Region short name.
        :param int region_state: Region status (0-unavailable; 1-available).
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "region_pay_mode", region_pay_mode)
        pulumi.set(__self__, "region_short_name", region_short_name)
        pulumi.set(__self__, "region_state", region_state)

    @property
    @pulumi.getter
    def area(self) -> str:
        """
        Region area.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Region ID.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        Region name.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="regionPayMode")
    def region_pay_mode(self) -> int:
        """
        Region pay mode.
        """
        return pulumi.get(self, "region_pay_mode")

    @property
    @pulumi.getter(name="regionShortName")
    def region_short_name(self) -> str:
        """
        Region short name.
        """
        return pulumi.get(self, "region_short_name")

    @property
    @pulumi.getter(name="regionState")
    def region_state(self) -> int:
        """
        Region status (0-unavailable; 1-available).
        """
        return pulumi.get(self, "region_state")


