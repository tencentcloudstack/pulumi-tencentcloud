# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTmpInstancesResult',
    'AwaitableGetTmpInstancesResult',
    'get_tmp_instances',
    'get_tmp_instances_output',
]

@pulumi.output_type
class GetTmpInstancesResult:
    """
    A collection of values returned by getTmpInstances.
    """
    def __init__(__self__, id=None, instance_charge_type=None, instance_ids=None, instance_name=None, instance_sets=None, instance_statuses=None, ipv4_addresses=None, result_output_file=None, tag_filters=None, zones=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_charge_type and not isinstance(instance_charge_type, int):
            raise TypeError("Expected argument 'instance_charge_type' to be a int")
        pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError("Expected argument 'instance_ids' to be a list")
        pulumi.set(__self__, "instance_ids", instance_ids)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if instance_sets and not isinstance(instance_sets, list):
            raise TypeError("Expected argument 'instance_sets' to be a list")
        pulumi.set(__self__, "instance_sets", instance_sets)
        if instance_statuses and not isinstance(instance_statuses, list):
            raise TypeError("Expected argument 'instance_statuses' to be a list")
        pulumi.set(__self__, "instance_statuses", instance_statuses)
        if ipv4_addresses and not isinstance(ipv4_addresses, list):
            raise TypeError("Expected argument 'ipv4_addresses' to be a list")
        pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if tag_filters and not isinstance(tag_filters, list):
            raise TypeError("Expected argument 'tag_filters' to be a list")
        pulumi.set(__self__, "tag_filters", tag_filters)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[int]:
        """
        Instance charge type.
        - 2: Prepaid;
        - 3: Postpaid by hour.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceSets")
    def instance_sets(self) -> Sequence['outputs.GetTmpInstancesInstanceSetResult']:
        """
        Instance details list.
        """
        return pulumi.get(self, "instance_sets")

    @property
    @pulumi.getter(name="instanceStatuses")
    def instance_statuses(self) -> Optional[Sequence[int]]:
        """
        Filter according to instance status.
        - 1: Creating;
        - 2: In operation;
        - 3: Abnormal;
        - 4: Reconstruction;
        - 5: Destruction;
        - 6: Stopped taking;
        - 8: Suspension of service due to arrears;
        - 9: Service has been suspended due to arrears.
        """
        return pulumi.get(self, "instance_statuses")

    @property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Optional[Sequence[str]]:
        """
        IPV4 address.
        """
        return pulumi.get(self, "ipv4_addresses")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.GetTmpInstancesTagFilterResult']]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "zones")


class AwaitableGetTmpInstancesResult(GetTmpInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTmpInstancesResult(
            id=self.id,
            instance_charge_type=self.instance_charge_type,
            instance_ids=self.instance_ids,
            instance_name=self.instance_name,
            instance_sets=self.instance_sets,
            instance_statuses=self.instance_statuses,
            ipv4_addresses=self.ipv4_addresses,
            result_output_file=self.result_output_file,
            tag_filters=self.tag_filters,
            zones=self.zones)


def get_tmp_instances(instance_charge_type: Optional[int] = None,
                      instance_ids: Optional[Sequence[str]] = None,
                      instance_name: Optional[str] = None,
                      instance_statuses: Optional[Sequence[int]] = None,
                      ipv4_addresses: Optional[Sequence[str]] = None,
                      result_output_file: Optional[str] = None,
                      tag_filters: Optional[Sequence[pulumi.InputType['GetTmpInstancesTagFilterArgs']]] = None,
                      zones: Optional[Sequence[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTmpInstancesResult:
    """
    Use this data source to query detailed information of monitor tmp instances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    tmp_instances = tencentcloud.Monitor.get_tmp_instances(instance_ids=["prom-xxxxxx"])
    ```
    <!--End PulumiCodeChooser -->


    :param int instance_charge_type: Filter according to instance charge type.
           - 2: Prepaid;
           - 3: Postpaid by hour.
    :param Sequence[str] instance_ids: Query according to one or more instance IDs. The instance ID is like: prom-xxxx. The maximum number of instances requested is 100.
    :param str instance_name: Filter according to instance name.
    :param Sequence[int] instance_statuses: Filter according to instance status.
           - 1: Creating;
           - 2: In operation;
           - 3: Abnormal;
           - 4: Reconstruction;
           - 5: Destruction;
           - 6: Stopped taking;
           - 8: Suspension of service due to arrears;
           - 9: Service has been suspended due to arrears.
    :param Sequence[str] ipv4_addresses: Filter according to ipv4 address.
    :param str result_output_file: Used to save results.
    :param Sequence[pulumi.InputType['GetTmpInstancesTagFilterArgs']] tag_filters: Filter according to tag Key-Value pair. The tag-key is replaced with a specific label key.
    :param Sequence[str] zones: Filter according to availability area. The availability area is shaped like: ap-Guangzhou-1.
    """
    __args__ = dict()
    __args__['instanceChargeType'] = instance_charge_type
    __args__['instanceIds'] = instance_ids
    __args__['instanceName'] = instance_name
    __args__['instanceStatuses'] = instance_statuses
    __args__['ipv4Addresses'] = ipv4_addresses
    __args__['resultOutputFile'] = result_output_file
    __args__['tagFilters'] = tag_filters
    __args__['zones'] = zones
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/getTmpInstances:getTmpInstances', __args__, opts=opts, typ=GetTmpInstancesResult).value

    return AwaitableGetTmpInstancesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_charge_type=pulumi.get(__ret__, 'instance_charge_type'),
        instance_ids=pulumi.get(__ret__, 'instance_ids'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        instance_sets=pulumi.get(__ret__, 'instance_sets'),
        instance_statuses=pulumi.get(__ret__, 'instance_statuses'),
        ipv4_addresses=pulumi.get(__ret__, 'ipv4_addresses'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        tag_filters=pulumi.get(__ret__, 'tag_filters'),
        zones=pulumi.get(__ret__, 'zones'))


@_utilities.lift_output_func(get_tmp_instances)
def get_tmp_instances_output(instance_charge_type: Optional[pulumi.Input[Optional[int]]] = None,
                             instance_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             instance_name: Optional[pulumi.Input[Optional[str]]] = None,
                             instance_statuses: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                             ipv4_addresses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             tag_filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetTmpInstancesTagFilterArgs']]]]] = None,
                             zones: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTmpInstancesResult]:
    """
    Use this data source to query detailed information of monitor tmp instances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    tmp_instances = tencentcloud.Monitor.get_tmp_instances(instance_ids=["prom-xxxxxx"])
    ```
    <!--End PulumiCodeChooser -->


    :param int instance_charge_type: Filter according to instance charge type.
           - 2: Prepaid;
           - 3: Postpaid by hour.
    :param Sequence[str] instance_ids: Query according to one or more instance IDs. The instance ID is like: prom-xxxx. The maximum number of instances requested is 100.
    :param str instance_name: Filter according to instance name.
    :param Sequence[int] instance_statuses: Filter according to instance status.
           - 1: Creating;
           - 2: In operation;
           - 3: Abnormal;
           - 4: Reconstruction;
           - 5: Destruction;
           - 6: Stopped taking;
           - 8: Suspension of service due to arrears;
           - 9: Service has been suspended due to arrears.
    :param Sequence[str] ipv4_addresses: Filter according to ipv4 address.
    :param str result_output_file: Used to save results.
    :param Sequence[pulumi.InputType['GetTmpInstancesTagFilterArgs']] tag_filters: Filter according to tag Key-Value pair. The tag-key is replaced with a specific label key.
    :param Sequence[str] zones: Filter according to availability area. The availability area is shaped like: ap-Guangzhou-1.
    """
    ...
