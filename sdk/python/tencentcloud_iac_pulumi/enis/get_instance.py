# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, description=None, enis=None, id=None, ids=None, instance_id=None, ipv4=None, name=None, result_output_file=None, security_group=None, subnet_id=None, tags=None, vpc_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enis and not isinstance(enis, list):
            raise TypeError("Expected argument 'enis' to be a list")
        pulumi.set(__self__, "enis", enis)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if ipv4 and not isinstance(ipv4, str):
            raise TypeError("Expected argument 'ipv4' to be a str")
        pulumi.set(__self__, "ipv4", ipv4)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if security_group and not isinstance(security_group, str):
            raise TypeError("Expected argument 'security_group' to be a str")
        pulumi.set(__self__, "security_group", security_group)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Message description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enis(self) -> Sequence['outputs.GetInstanceEniResult']:
        """
        An information list of ENIs. Each element contains the following attributes:
        """
        return pulumi.get(self, "enis")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        ID of the instance which bind the ENI.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[str]:
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the ENI.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> Optional[str]:
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        ID of the subnet within this vpc.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        """
        Tags of the ENI.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            description=self.description,
            enis=self.enis,
            id=self.id,
            ids=self.ids,
            instance_id=self.instance_id,
            ipv4=self.ipv4,
            name=self.name,
            result_output_file=self.result_output_file,
            security_group=self.security_group,
            subnet_id=self.subnet_id,
            tags=self.tags,
            vpc_id=self.vpc_id)


def get_instance(description: Optional[str] = None,
                 ids: Optional[Sequence[str]] = None,
                 instance_id: Optional[str] = None,
                 ipv4: Optional[str] = None,
                 name: Optional[str] = None,
                 result_output_file: Optional[str] = None,
                 security_group: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 tags: Optional[Mapping[str, Any]] = None,
                 vpc_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Use this data source to query query ENIs.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    name = tencentcloud.Enis.get_instance(name="test eni")
    ```
    <!--End PulumiCodeChooser -->


    :param str description: Description of the ENI. Conflict with `ids`.
    :param Sequence[str] ids: ID of the ENIs to be queried. Conflict with `vpc_id`,`subnet_id`,`instance_id`,`security_group`,`name`,`ipv4` and `tags`.
    :param str instance_id: ID of the instance which bind the ENI. Conflict with `ids`.
    :param str ipv4: Intranet IP of the ENI. Conflict with `ids`.
    :param str name: Name of the ENI to be queried. Conflict with `ids`.
    :param str result_output_file: Used to save results.
    :param str security_group: A set of security group IDs which bind the ENI. Conflict with `ids`.
    :param str subnet_id: ID of the subnet within this vpc to be queried. Conflict with `ids`.
    :param Mapping[str, Any] tags: Tags of the ENI. Conflict with `ids`.
    :param str vpc_id: ID of the vpc to be queried. Conflict with `ids`.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['ids'] = ids
    __args__['instanceId'] = instance_id
    __args__['ipv4'] = ipv4
    __args__['name'] = name
    __args__['resultOutputFile'] = result_output_file
    __args__['securityGroup'] = security_group
    __args__['subnetId'] = subnet_id
    __args__['tags'] = tags
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Enis/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        description=pulumi.get(__ret__, 'description'),
        enis=pulumi.get(__ret__, 'enis'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        ipv4=pulumi.get(__ret__, 'ipv4'),
        name=pulumi.get(__ret__, 'name'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        security_group=pulumi.get(__ret__, 'security_group'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        tags=pulumi.get(__ret__, 'tags'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_instance)
def get_instance_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                        ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                        instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                        ipv4: Optional[pulumi.Input[Optional[str]]] = None,
                        name: Optional[pulumi.Input[Optional[str]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        security_group: Optional[pulumi.Input[Optional[str]]] = None,
                        subnet_id: Optional[pulumi.Input[Optional[str]]] = None,
                        tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                        vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Use this data source to query query ENIs.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    name = tencentcloud.Enis.get_instance(name="test eni")
    ```
    <!--End PulumiCodeChooser -->


    :param str description: Description of the ENI. Conflict with `ids`.
    :param Sequence[str] ids: ID of the ENIs to be queried. Conflict with `vpc_id`,`subnet_id`,`instance_id`,`security_group`,`name`,`ipv4` and `tags`.
    :param str instance_id: ID of the instance which bind the ENI. Conflict with `ids`.
    :param str ipv4: Intranet IP of the ENI. Conflict with `ids`.
    :param str name: Name of the ENI to be queried. Conflict with `ids`.
    :param str result_output_file: Used to save results.
    :param str security_group: A set of security group IDs which bind the ENI. Conflict with `ids`.
    :param str subnet_id: ID of the subnet within this vpc to be queried. Conflict with `ids`.
    :param Mapping[str, Any] tags: Tags of the ENI. Conflict with `ids`.
    :param str vpc_id: ID of the vpc to be queried. Conflict with `ids`.
    """
    ...
