# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GatewayArgs', 'Gateway']

@pulumi.input_type
class GatewayArgs:
    def __init__(__self__, *,
                 assigned_eip_sets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 vpc_id: pulumi.Input[str],
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 max_concurrent: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_product_version: Optional[pulumi.Input[int]] = None,
                 stock_public_ip_addresses_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Gateway resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] assigned_eip_sets: EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
        :param pulumi.Input[str] vpc_id: ID of the vpc.
        :param pulumi.Input[int] bandwidth: The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
        :param pulumi.Input[int] max_concurrent: The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
        :param pulumi.Input[str] name: Name of the NAT gateway.
        :param pulumi.Input[int] nat_product_version: 1: traditional NAT, 2: standard NAT, default value is 1.
        :param pulumi.Input[int] stock_public_ip_addresses_bandwidth_out: The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
        :param pulumi.Input[str] subnet_id: Subnet of NAT.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this NAT gateway.
        :param pulumi.Input[str] zone: The availability zone, such as `ap-guangzhou-3`.
        """
        pulumi.set(__self__, "assigned_eip_sets", assigned_eip_sets)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if max_concurrent is not None:
            pulumi.set(__self__, "max_concurrent", max_concurrent)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat_product_version is not None:
            pulumi.set(__self__, "nat_product_version", nat_product_version)
        if stock_public_ip_addresses_bandwidth_out is not None:
            pulumi.set(__self__, "stock_public_ip_addresses_bandwidth_out", stock_public_ip_addresses_bandwidth_out)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="assignedEipSets")
    def assigned_eip_sets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
        """
        return pulumi.get(self, "assigned_eip_sets")

    @assigned_eip_sets.setter
    def assigned_eip_sets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "assigned_eip_sets", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="maxConcurrent")
    def max_concurrent(self) -> Optional[pulumi.Input[int]]:
        """
        The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
        """
        return pulumi.get(self, "max_concurrent")

    @max_concurrent.setter
    def max_concurrent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the NAT gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="natProductVersion")
    def nat_product_version(self) -> Optional[pulumi.Input[int]]:
        """
        1: traditional NAT, 2: standard NAT, default value is 1.
        """
        return pulumi.get(self, "nat_product_version")

    @nat_product_version.setter
    def nat_product_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nat_product_version", value)

    @property
    @pulumi.getter(name="stockPublicIpAddressesBandwidthOut")
    def stock_public_ip_addresses_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
        """
        return pulumi.get(self, "stock_public_ip_addresses_bandwidth_out")

    @stock_public_ip_addresses_bandwidth_out.setter
    def stock_public_ip_addresses_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stock_public_ip_addresses_bandwidth_out", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet of NAT.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The available tags within this NAT gateway.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The availability zone, such as `ap-guangzhou-3`.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _GatewayState:
    def __init__(__self__, *,
                 assigned_eip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 created_time: Optional[pulumi.Input[str]] = None,
                 max_concurrent: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_product_version: Optional[pulumi.Input[int]] = None,
                 stock_public_ip_addresses_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Gateway resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] assigned_eip_sets: EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
        :param pulumi.Input[int] bandwidth: The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
        :param pulumi.Input[str] created_time: Create time of the NAT gateway.
        :param pulumi.Input[int] max_concurrent: The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
        :param pulumi.Input[str] name: Name of the NAT gateway.
        :param pulumi.Input[int] nat_product_version: 1: traditional NAT, 2: standard NAT, default value is 1.
        :param pulumi.Input[int] stock_public_ip_addresses_bandwidth_out: The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
        :param pulumi.Input[str] subnet_id: Subnet of NAT.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this NAT gateway.
        :param pulumi.Input[str] vpc_id: ID of the vpc.
        :param pulumi.Input[str] zone: The availability zone, such as `ap-guangzhou-3`.
        """
        if assigned_eip_sets is not None:
            pulumi.set(__self__, "assigned_eip_sets", assigned_eip_sets)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if max_concurrent is not None:
            pulumi.set(__self__, "max_concurrent", max_concurrent)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat_product_version is not None:
            pulumi.set(__self__, "nat_product_version", nat_product_version)
        if stock_public_ip_addresses_bandwidth_out is not None:
            pulumi.set(__self__, "stock_public_ip_addresses_bandwidth_out", stock_public_ip_addresses_bandwidth_out)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="assignedEipSets")
    def assigned_eip_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
        """
        return pulumi.get(self, "assigned_eip_sets")

    @assigned_eip_sets.setter
    def assigned_eip_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "assigned_eip_sets", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the NAT gateway.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter(name="maxConcurrent")
    def max_concurrent(self) -> Optional[pulumi.Input[int]]:
        """
        The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
        """
        return pulumi.get(self, "max_concurrent")

    @max_concurrent.setter
    def max_concurrent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the NAT gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="natProductVersion")
    def nat_product_version(self) -> Optional[pulumi.Input[int]]:
        """
        1: traditional NAT, 2: standard NAT, default value is 1.
        """
        return pulumi.get(self, "nat_product_version")

    @nat_product_version.setter
    def nat_product_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nat_product_version", value)

    @property
    @pulumi.getter(name="stockPublicIpAddressesBandwidthOut")
    def stock_public_ip_addresses_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
        """
        return pulumi.get(self, "stock_public_ip_addresses_bandwidth_out")

    @stock_public_ip_addresses_bandwidth_out.setter
    def stock_public_ip_addresses_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stock_public_ip_addresses_bandwidth_out", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet of NAT.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The available tags within this NAT gateway.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The availability zone, such as `ap-guangzhou-3`.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class Gateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assigned_eip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 max_concurrent: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_product_version: Optional[pulumi.Input[int]] = None,
                 stock_public_ip_addresses_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a NAT gateway.

        > **NOTE:** If `nat_product_version` is `1`, `max_concurrent` valid values is `1000000`, `3000000`, `10000000`.

        > **NOTE:** If set `stock_public_ip_addresses_bandwidth_out`, do not set the `internet_max_bandwidth_out` parameter of resource `Eip.Instance` at the same time, otherwise conflicts may occur.

        ## Example Usage

        ### Create a traditional NAT gateway.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        eip_example1 = tencentcloud.eip.Instance("eipExample1")
        eip_example2 = tencentcloud.eip.Instance("eipExample2")
        example = tencentcloud.nat.Gateway("example",
            vpc_id=vpc.id,
            nat_product_version=1,
            bandwidth=100,
            max_concurrent=1000000,
            assigned_eip_sets=[
                eip_example1.public_ip,
                eip_example2.public_ip,
            ],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a standard NAT gateway.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        eip_example1 = tencentcloud.eip.Instance("eipExample1")
        eip_example2 = tencentcloud.eip.Instance("eipExample2")
        example = tencentcloud.nat.Gateway("example",
            vpc_id=vpc.id,
            nat_product_version=2,
            assigned_eip_sets=[
                eip_example1.public_ip,
                eip_example2.public_ip,
            ],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Or set stock public ip addresses bandwidth out

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        eip_example1 = tencentcloud.eip.Instance("eipExample1")
        eip_example2 = tencentcloud.eip.Instance("eipExample2")
        example = tencentcloud.nat.Gateway("example",
            vpc_id=vpc.id,
            nat_product_version=2,
            stock_public_ip_addresses_bandwidth_out=100,
            assigned_eip_sets=[
                eip_example1.public_ip,
                eip_example2.public_ip,
            ],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        NAT gateway can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Nat/gateway:Gateway example nat-1asg3t63
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] assigned_eip_sets: EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
        :param pulumi.Input[int] bandwidth: The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
        :param pulumi.Input[int] max_concurrent: The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
        :param pulumi.Input[str] name: Name of the NAT gateway.
        :param pulumi.Input[int] nat_product_version: 1: traditional NAT, 2: standard NAT, default value is 1.
        :param pulumi.Input[int] stock_public_ip_addresses_bandwidth_out: The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
        :param pulumi.Input[str] subnet_id: Subnet of NAT.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this NAT gateway.
        :param pulumi.Input[str] vpc_id: ID of the vpc.
        :param pulumi.Input[str] zone: The availability zone, such as `ap-guangzhou-3`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a NAT gateway.

        > **NOTE:** If `nat_product_version` is `1`, `max_concurrent` valid values is `1000000`, `3000000`, `10000000`.

        > **NOTE:** If set `stock_public_ip_addresses_bandwidth_out`, do not set the `internet_max_bandwidth_out` parameter of resource `Eip.Instance` at the same time, otherwise conflicts may occur.

        ## Example Usage

        ### Create a traditional NAT gateway.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        eip_example1 = tencentcloud.eip.Instance("eipExample1")
        eip_example2 = tencentcloud.eip.Instance("eipExample2")
        example = tencentcloud.nat.Gateway("example",
            vpc_id=vpc.id,
            nat_product_version=1,
            bandwidth=100,
            max_concurrent=1000000,
            assigned_eip_sets=[
                eip_example1.public_ip,
                eip_example2.public_ip,
            ],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a standard NAT gateway.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        eip_example1 = tencentcloud.eip.Instance("eipExample1")
        eip_example2 = tencentcloud.eip.Instance("eipExample2")
        example = tencentcloud.nat.Gateway("example",
            vpc_id=vpc.id,
            nat_product_version=2,
            assigned_eip_sets=[
                eip_example1.public_ip,
                eip_example2.public_ip,
            ],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Or set stock public ip addresses bandwidth out

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        eip_example1 = tencentcloud.eip.Instance("eipExample1")
        eip_example2 = tencentcloud.eip.Instance("eipExample2")
        example = tencentcloud.nat.Gateway("example",
            vpc_id=vpc.id,
            nat_product_version=2,
            stock_public_ip_addresses_bandwidth_out=100,
            assigned_eip_sets=[
                eip_example1.public_ip,
                eip_example2.public_ip,
            ],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        NAT gateway can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Nat/gateway:Gateway example nat-1asg3t63
        ```

        :param str resource_name: The name of the resource.
        :param GatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assigned_eip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 max_concurrent: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nat_product_version: Optional[pulumi.Input[int]] = None,
                 stock_public_ip_addresses_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayArgs.__new__(GatewayArgs)

            if assigned_eip_sets is None and not opts.urn:
                raise TypeError("Missing required property 'assigned_eip_sets'")
            __props__.__dict__["assigned_eip_sets"] = assigned_eip_sets
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["max_concurrent"] = max_concurrent
            __props__.__dict__["name"] = name
            __props__.__dict__["nat_product_version"] = nat_product_version
            __props__.__dict__["stock_public_ip_addresses_bandwidth_out"] = stock_public_ip_addresses_bandwidth_out
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["zone"] = zone
            __props__.__dict__["created_time"] = None
        super(Gateway, __self__).__init__(
            'tencentcloud:Nat/gateway:Gateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assigned_eip_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            bandwidth: Optional[pulumi.Input[int]] = None,
            created_time: Optional[pulumi.Input[str]] = None,
            max_concurrent: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nat_product_version: Optional[pulumi.Input[int]] = None,
            stock_public_ip_addresses_bandwidth_out: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'Gateway':
        """
        Get an existing Gateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] assigned_eip_sets: EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
        :param pulumi.Input[int] bandwidth: The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
        :param pulumi.Input[str] created_time: Create time of the NAT gateway.
        :param pulumi.Input[int] max_concurrent: The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
        :param pulumi.Input[str] name: Name of the NAT gateway.
        :param pulumi.Input[int] nat_product_version: 1: traditional NAT, 2: standard NAT, default value is 1.
        :param pulumi.Input[int] stock_public_ip_addresses_bandwidth_out: The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
        :param pulumi.Input[str] subnet_id: Subnet of NAT.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this NAT gateway.
        :param pulumi.Input[str] vpc_id: ID of the vpc.
        :param pulumi.Input[str] zone: The availability zone, such as `ap-guangzhou-3`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GatewayState.__new__(_GatewayState)

        __props__.__dict__["assigned_eip_sets"] = assigned_eip_sets
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["max_concurrent"] = max_concurrent
        __props__.__dict__["name"] = name
        __props__.__dict__["nat_product_version"] = nat_product_version
        __props__.__dict__["stock_public_ip_addresses_bandwidth_out"] = stock_public_ip_addresses_bandwidth_out
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone"] = zone
        return Gateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assignedEipSets")
    def assigned_eip_sets(self) -> pulumi.Output[Sequence[str]]:
        """
        EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
        """
        return pulumi.get(self, "assigned_eip_sets")

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[int]:
        """
        The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[str]:
        """
        Create time of the NAT gateway.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="maxConcurrent")
    def max_concurrent(self) -> pulumi.Output[int]:
        """
        The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `nat_product_version` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
        """
        return pulumi.get(self, "max_concurrent")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the NAT gateway.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="natProductVersion")
    def nat_product_version(self) -> pulumi.Output[int]:
        """
        1: traditional NAT, 2: standard NAT, default value is 1.
        """
        return pulumi.get(self, "nat_product_version")

    @property
    @pulumi.getter(name="stockPublicIpAddressesBandwidthOut")
    def stock_public_ip_addresses_bandwidth_out(self) -> pulumi.Output[int]:
        """
        The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
        """
        return pulumi.get(self, "stock_public_ip_addresses_bandwidth_out")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Subnet of NAT.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The available tags within this NAT gateway.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of the vpc.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        The availability zone, such as `ap-guangzhou-3`.
        """
        return pulumi.get(self, "zone")

