# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TawInstanceArgs', 'TawInstance']

@pulumi.input_type
class TawInstanceArgs:
    def __init__(__self__, *,
                 area_id: pulumi.Input[int],
                 charge_type: pulumi.Input[int],
                 data_retention_days: pulumi.Input[int],
                 instance_name: pulumi.Input[str],
                 instance_desc: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a TawInstance resource.
        :param pulumi.Input[int] area_id: Region ID (at least greater than 0).
        :param pulumi.Input[int] charge_type: Billing type (1: Pay-as-you-go).
        :param pulumi.Input[int] data_retention_days: Data retention period (at least greater than 0).
        :param pulumi.Input[str] instance_name: Instance name (up to 255 bytes).
        :param pulumi.Input[str] instance_desc: Instance description (up to 1,024 bytes).
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        pulumi.set(__self__, "area_id", area_id)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "data_retention_days", data_retention_days)
        pulumi.set(__self__, "instance_name", instance_name)
        if instance_desc is not None:
            pulumi.set(__self__, "instance_desc", instance_desc)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> pulumi.Input[int]:
        """
        Region ID (at least greater than 0).
        """
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Input[int]:
        """
        Billing type (1: Pay-as-you-go).
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="dataRetentionDays")
    def data_retention_days(self) -> pulumi.Input[int]:
        """
        Data retention period (at least greater than 0).
        """
        return pulumi.get(self, "data_retention_days")

    @data_retention_days.setter
    def data_retention_days(self, value: pulumi.Input[int]):
        pulumi.set(self, "data_retention_days", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        Instance name (up to 255 bytes).
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceDesc")
    def instance_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Instance description (up to 1,024 bytes).
        """
        return pulumi.get(self, "instance_desc")

    @instance_desc.setter
    def instance_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_desc", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _TawInstanceState:
    def __init__(__self__, *,
                 area_id: Optional[pulumi.Input[int]] = None,
                 charge_status: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[int]] = None,
                 cluster_id: Optional[pulumi.Input[int]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 data_retention_days: Optional[pulumi.Input[int]] = None,
                 instance_desc: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_status: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TawInstance resources.
        :param pulumi.Input[int] area_id: Region ID (at least greater than 0).
        :param pulumi.Input[int] charge_status: Billing status (`1` = in use, `2` = expired, `3` = destroyed, `4` = assigning, `5` = failed).
        :param pulumi.Input[int] charge_type: Billing type (1: Pay-as-you-go).
        :param pulumi.Input[int] cluster_id: Cluster ID.
        :param pulumi.Input[str] created_at: Create time.
        :param pulumi.Input[int] data_retention_days: Data retention period (at least greater than 0).
        :param pulumi.Input[str] instance_desc: Instance description (up to 1,024 bytes).
        :param pulumi.Input[str] instance_name: Instance name (up to 255 bytes).
        :param pulumi.Input[int] instance_status: Instance status (`1` = creating, `2` = running, `3` = exception, `4` = restarting, `5` = stopping, `6` = stopped, `7` = deleted).
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if area_id is not None:
            pulumi.set(__self__, "area_id", area_id)
        if charge_status is not None:
            pulumi.set(__self__, "charge_status", charge_status)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_retention_days is not None:
            pulumi.set(__self__, "data_retention_days", data_retention_days)
        if instance_desc is not None:
            pulumi.set(__self__, "instance_desc", instance_desc)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_status is not None:
            pulumi.set(__self__, "instance_status", instance_status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> Optional[pulumi.Input[int]]:
        """
        Region ID (at least greater than 0).
        """
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter(name="chargeStatus")
    def charge_status(self) -> Optional[pulumi.Input[int]]:
        """
        Billing status (`1` = in use, `2` = expired, `3` = destroyed, `4` = assigning, `5` = failed).
        """
        return pulumi.get(self, "charge_status")

    @charge_status.setter
    def charge_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "charge_status", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[int]]:
        """
        Billing type (1: Pay-as-you-go).
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Create time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dataRetentionDays")
    def data_retention_days(self) -> Optional[pulumi.Input[int]]:
        """
        Data retention period (at least greater than 0).
        """
        return pulumi.get(self, "data_retention_days")

    @data_retention_days.setter
    def data_retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_retention_days", value)

    @property
    @pulumi.getter(name="instanceDesc")
    def instance_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Instance description (up to 1,024 bytes).
        """
        return pulumi.get(self, "instance_desc")

    @instance_desc.setter
    def instance_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_desc", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name (up to 255 bytes).
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> Optional[pulumi.Input[int]]:
        """
        Instance status (`1` = creating, `2` = running, `3` = exception, `4` = restarting, `5` = stopping, `6` = stopped, `7` = deleted).
        """
        return pulumi.get(self, "instance_status")

    @instance_status.setter
    def instance_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class TawInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area_id: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[int]] = None,
                 data_retention_days: Optional[pulumi.Input[int]] = None,
                 instance_desc: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Provides a resource to create a rum taw_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.rum.TawInstance("example",
            area_id=1,
            charge_type=1,
            data_retention_days=30,
            instance_desc="desc.",
            instance_name="tf-example",
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        rum taw_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Rum/tawInstance:TawInstance example rum-WYsjMaiGOVXBeJ
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] area_id: Region ID (at least greater than 0).
        :param pulumi.Input[int] charge_type: Billing type (1: Pay-as-you-go).
        :param pulumi.Input[int] data_retention_days: Data retention period (at least greater than 0).
        :param pulumi.Input[str] instance_desc: Instance description (up to 1,024 bytes).
        :param pulumi.Input[str] instance_name: Instance name (up to 255 bytes).
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TawInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a rum taw_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.rum.TawInstance("example",
            area_id=1,
            charge_type=1,
            data_retention_days=30,
            instance_desc="desc.",
            instance_name="tf-example",
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        rum taw_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Rum/tawInstance:TawInstance example rum-WYsjMaiGOVXBeJ
        ```

        :param str resource_name: The name of the resource.
        :param TawInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TawInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area_id: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[int]] = None,
                 data_retention_days: Optional[pulumi.Input[int]] = None,
                 instance_desc: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TawInstanceArgs.__new__(TawInstanceArgs)

            if area_id is None and not opts.urn:
                raise TypeError("Missing required property 'area_id'")
            __props__.__dict__["area_id"] = area_id
            if charge_type is None and not opts.urn:
                raise TypeError("Missing required property 'charge_type'")
            __props__.__dict__["charge_type"] = charge_type
            if data_retention_days is None and not opts.urn:
                raise TypeError("Missing required property 'data_retention_days'")
            __props__.__dict__["data_retention_days"] = data_retention_days
            __props__.__dict__["instance_desc"] = instance_desc
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["charge_status"] = None
            __props__.__dict__["cluster_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["instance_status"] = None
            __props__.__dict__["updated_at"] = None
        super(TawInstance, __self__).__init__(
            'tencentcloud:Rum/tawInstance:TawInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area_id: Optional[pulumi.Input[int]] = None,
            charge_status: Optional[pulumi.Input[int]] = None,
            charge_type: Optional[pulumi.Input[int]] = None,
            cluster_id: Optional[pulumi.Input[int]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            data_retention_days: Optional[pulumi.Input[int]] = None,
            instance_desc: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_status: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'TawInstance':
        """
        Get an existing TawInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] area_id: Region ID (at least greater than 0).
        :param pulumi.Input[int] charge_status: Billing status (`1` = in use, `2` = expired, `3` = destroyed, `4` = assigning, `5` = failed).
        :param pulumi.Input[int] charge_type: Billing type (1: Pay-as-you-go).
        :param pulumi.Input[int] cluster_id: Cluster ID.
        :param pulumi.Input[str] created_at: Create time.
        :param pulumi.Input[int] data_retention_days: Data retention period (at least greater than 0).
        :param pulumi.Input[str] instance_desc: Instance description (up to 1,024 bytes).
        :param pulumi.Input[str] instance_name: Instance name (up to 255 bytes).
        :param pulumi.Input[int] instance_status: Instance status (`1` = creating, `2` = running, `3` = exception, `4` = restarting, `5` = stopping, `6` = stopped, `7` = deleted).
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        :param pulumi.Input[str] updated_at: Update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TawInstanceState.__new__(_TawInstanceState)

        __props__.__dict__["area_id"] = area_id
        __props__.__dict__["charge_status"] = charge_status
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_retention_days"] = data_retention_days
        __props__.__dict__["instance_desc"] = instance_desc
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_status"] = instance_status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        return TawInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> pulumi.Output[int]:
        """
        Region ID (at least greater than 0).
        """
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter(name="chargeStatus")
    def charge_status(self) -> pulumi.Output[int]:
        """
        Billing status (`1` = in use, `2` = expired, `3` = destroyed, `4` = assigning, `5` = failed).
        """
        return pulumi.get(self, "charge_status")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[int]:
        """
        Billing type (1: Pay-as-you-go).
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[int]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Create time.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataRetentionDays")
    def data_retention_days(self) -> pulumi.Output[int]:
        """
        Data retention period (at least greater than 0).
        """
        return pulumi.get(self, "data_retention_days")

    @property
    @pulumi.getter(name="instanceDesc")
    def instance_desc(self) -> pulumi.Output[Optional[str]]:
        """
        Instance description (up to 1,024 bytes).
        """
        return pulumi.get(self, "instance_desc")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Instance name (up to 255 bytes).
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> pulumi.Output[int]:
        """
        Instance status (`1` = creating, `2` = running, `3` = exception, `4` = restarting, `5` = stopping, `6` = stopped, `7` = deleted).
        """
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

