# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DomainAuthenticationArgs',
    'DomainAuthenticationTypeAArgs',
    'DomainAuthenticationTypeBArgs',
    'DomainAuthenticationTypeCArgs',
    'DomainAuthenticationTypeDArgs',
    'DomainAwsPrivateAccessArgs',
    'DomainBandWidthAlertArgs',
    'DomainBandWidthAlertStatisticItemArgs',
    'DomainCacheKeyArgs',
    'DomainCacheKeyKeyRuleArgs',
    'DomainCacheKeyKeyRuleQueryStringArgs',
    'DomainCacheKeyQueryStringArgs',
    'DomainCompressionArgs',
    'DomainCompressionCompressionRuleArgs',
    'DomainDownstreamCappingArgs',
    'DomainDownstreamCappingCappingRuleArgs',
    'DomainErrorPageArgs',
    'DomainErrorPagePageRuleArgs',
    'DomainHttpsConfigArgs',
    'DomainHttpsConfigClientCertificateConfigArgs',
    'DomainHttpsConfigForceRedirectArgs',
    'DomainHttpsConfigServerCertificateConfigArgs',
    'DomainHwPrivateAccessArgs',
    'DomainIpFilterArgs',
    'DomainIpFilterFilterRuleArgs',
    'DomainIpFreqLimitArgs',
    'DomainMaxAgeArgs',
    'DomainMaxAgeMaxAgeRuleArgs',
    'DomainOriginArgs',
    'DomainOriginPullOptimizationArgs',
    'DomainOriginPullTimeoutArgs',
    'DomainOssPrivateAccessArgs',
    'DomainOthersPrivateAccessArgs',
    'DomainPostMaxSizeArgs',
    'DomainQnPrivateAccessArgs',
    'DomainRefererArgs',
    'DomainRefererRefererRuleArgs',
    'DomainRequestHeaderArgs',
    'DomainRequestHeaderHeaderRuleArgs',
    'DomainResponseHeaderArgs',
    'DomainResponseHeaderHeaderRuleArgs',
    'DomainRuleCachArgs',
    'DomainStatusCodeCacheArgs',
    'DomainStatusCodeCacheCacheRuleArgs',
    'UrlPurgePurgeHistoryArgs',
    'UrlPushPushHistoryArgs',
]

@pulumi.input_type
class DomainAuthenticationArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type_a: Optional[pulumi.Input['DomainAuthenticationTypeAArgs']] = None,
                 type_b: Optional[pulumi.Input['DomainAuthenticationTypeBArgs']] = None,
                 type_c: Optional[pulumi.Input['DomainAuthenticationTypeCArgs']] = None,
                 type_d: Optional[pulumi.Input['DomainAuthenticationTypeDArgs']] = None):
        """
        :param pulumi.Input[str] switch: Authentication switching, available values: `on`, `off`.
        :param pulumi.Input['DomainAuthenticationTypeAArgs'] type_a: Timestamp hotlink protection mode A configuration.
        :param pulumi.Input['DomainAuthenticationTypeBArgs'] type_b: Timestamp hotlink protection mode B configuration. NOTE: according to upgrading of TencentCloud Platform, TypeB is unavailable for now.
        :param pulumi.Input['DomainAuthenticationTypeCArgs'] type_c: Timestamp hotlink protection mode C configuration.
        :param pulumi.Input['DomainAuthenticationTypeDArgs'] type_d: Timestamp hotlink protection mode D configuration.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type_a is not None:
            pulumi.set(__self__, "type_a", type_a)
        if type_b is not None:
            pulumi.set(__self__, "type_b", type_b)
        if type_c is not None:
            pulumi.set(__self__, "type_c", type_c)
        if type_d is not None:
            pulumi.set(__self__, "type_d", type_d)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication switching, available values: `on`, `off`.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="typeA")
    def type_a(self) -> Optional[pulumi.Input['DomainAuthenticationTypeAArgs']]:
        """
        Timestamp hotlink protection mode A configuration.
        """
        return pulumi.get(self, "type_a")

    @type_a.setter
    def type_a(self, value: Optional[pulumi.Input['DomainAuthenticationTypeAArgs']]):
        pulumi.set(self, "type_a", value)

    @property
    @pulumi.getter(name="typeB")
    def type_b(self) -> Optional[pulumi.Input['DomainAuthenticationTypeBArgs']]:
        """
        Timestamp hotlink protection mode B configuration. NOTE: according to upgrading of TencentCloud Platform, TypeB is unavailable for now.
        """
        return pulumi.get(self, "type_b")

    @type_b.setter
    def type_b(self, value: Optional[pulumi.Input['DomainAuthenticationTypeBArgs']]):
        pulumi.set(self, "type_b", value)

    @property
    @pulumi.getter(name="typeC")
    def type_c(self) -> Optional[pulumi.Input['DomainAuthenticationTypeCArgs']]:
        """
        Timestamp hotlink protection mode C configuration.
        """
        return pulumi.get(self, "type_c")

    @type_c.setter
    def type_c(self, value: Optional[pulumi.Input['DomainAuthenticationTypeCArgs']]):
        pulumi.set(self, "type_c", value)

    @property
    @pulumi.getter(name="typeD")
    def type_d(self) -> Optional[pulumi.Input['DomainAuthenticationTypeDArgs']]:
        """
        Timestamp hotlink protection mode D configuration.
        """
        return pulumi.get(self, "type_d")

    @type_d.setter
    def type_d(self, value: Optional[pulumi.Input['DomainAuthenticationTypeDArgs']]):
        pulumi.set(self, "type_d", value)


@pulumi.input_type
class DomainAuthenticationTypeAArgs:
    def __init__(__self__, *,
                 expire_time: pulumi.Input[int],
                 file_extensions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 filter_type: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 sign_param: pulumi.Input[str],
                 backup_secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] expire_time: Signature expiration time in second. The maximum value is 630720000.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_extensions: File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        :param pulumi.Input[str] filter_type: Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        :param pulumi.Input[str] secret_key: The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        :param pulumi.Input[str] sign_param: Signature parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
        :param pulumi.Input[str] backup_secret_key: Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "sign_param", sign_param)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Input[int]:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        """
        return pulumi.get(self, "file_extensions")

    @file_extensions.setter
    def file_extensions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "file_extensions", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        """
        Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="signParam")
    def sign_param(self) -> pulumi.Input[str]:
        """
        Signature parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
        """
        return pulumi.get(self, "sign_param")

    @sign_param.setter
    def sign_param(self, value: pulumi.Input[str]):
        pulumi.set(self, "sign_param", value)

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        return pulumi.get(self, "backup_secret_key")

    @backup_secret_key.setter
    def backup_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_secret_key", value)


@pulumi.input_type
class DomainAuthenticationTypeBArgs:
    def __init__(__self__, *,
                 expire_time: pulumi.Input[int],
                 file_extensions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 filter_type: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 backup_secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] expire_time: Signature expiration time in second. The maximum value is 630720000.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_extensions: File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        :param pulumi.Input[str] filter_type: Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        :param pulumi.Input[str] secret_key: The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        :param pulumi.Input[str] backup_secret_key: Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Input[int]:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        """
        return pulumi.get(self, "file_extensions")

    @file_extensions.setter
    def file_extensions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "file_extensions", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        """
        Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        return pulumi.get(self, "backup_secret_key")

    @backup_secret_key.setter
    def backup_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_secret_key", value)


@pulumi.input_type
class DomainAuthenticationTypeCArgs:
    def __init__(__self__, *,
                 expire_time: pulumi.Input[int],
                 file_extensions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 filter_type: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 backup_secret_key: Optional[pulumi.Input[str]] = None,
                 time_format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] expire_time: Signature expiration time in second. The maximum value is 630720000.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_extensions: File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        :param pulumi.Input[str] filter_type: Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        :param pulumi.Input[str] secret_key: The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        :param pulumi.Input[str] backup_secret_key: Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        :param pulumi.Input[str] time_format: Timestamp formation, available values: `dec`, `hex`.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Input[int]:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        """
        return pulumi.get(self, "file_extensions")

    @file_extensions.setter
    def file_extensions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "file_extensions", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        """
        Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        return pulumi.get(self, "backup_secret_key")

    @backup_secret_key.setter
    def backup_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_secret_key", value)

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp formation, available values: `dec`, `hex`.
        """
        return pulumi.get(self, "time_format")

    @time_format.setter
    def time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_format", value)


@pulumi.input_type
class DomainAuthenticationTypeDArgs:
    def __init__(__self__, *,
                 expire_time: pulumi.Input[int],
                 file_extensions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 filter_type: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 backup_secret_key: Optional[pulumi.Input[str]] = None,
                 time_format: Optional[pulumi.Input[str]] = None,
                 time_param: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] expire_time: Signature expiration time in second. The maximum value is 630720000.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_extensions: File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        :param pulumi.Input[str] filter_type: Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        :param pulumi.Input[str] secret_key: The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        :param pulumi.Input[str] backup_secret_key: Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        :param pulumi.Input[str] time_format: Timestamp formation, available values: `dec`, `hex`.
        :param pulumi.Input[str] time_param: Timestamp parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_param is not None:
            pulumi.set(__self__, "time_param", time_param)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Input[int]:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        """
        return pulumi.get(self, "file_extensions")

    @file_extensions.setter
    def file_extensions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "file_extensions", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        """
        Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        return pulumi.get(self, "backup_secret_key")

    @backup_secret_key.setter
    def backup_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_secret_key", value)

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp formation, available values: `dec`, `hex`.
        """
        return pulumi.get(self, "time_format")

    @time_format.setter
    def time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_format", value)

    @property
    @pulumi.getter(name="timeParam")
    def time_param(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
        """
        return pulumi.get(self, "time_param")

    @time_param.setter
    def time_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_param", value)


@pulumi.input_type
class DomainAwsPrivateAccessArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] access_key: Access ID.
        :param pulumi.Input[str] bucket: Bucket.
        :param pulumi.Input[str] region: Region.
        :param pulumi.Input[str] secret_key: Key.
        """
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class DomainBandWidthAlertArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 alert_percentage: Optional[pulumi.Input[int]] = None,
                 alert_switch: Optional[pulumi.Input[str]] = None,
                 bps_threshold: Optional[pulumi.Input[int]] = None,
                 counter_measure: Optional[pulumi.Input[str]] = None,
                 last_trigger_time: Optional[pulumi.Input[str]] = None,
                 last_trigger_time_overseas: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 statistic_item: Optional[pulumi.Input['DomainBandWidthAlertStatisticItemArgs']] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[int] alert_percentage: Alert percentage.
        :param pulumi.Input[str] alert_switch: Switch alert.
        :param pulumi.Input[int] bps_threshold: threshold of bps.
        :param pulumi.Input[str] counter_measure: Counter measure.
        :param pulumi.Input[str] last_trigger_time: Last trigger time.
        :param pulumi.Input[str] last_trigger_time_overseas: Last trigger time of overseas.
        :param pulumi.Input[str] metric: Metric.
        :param pulumi.Input['DomainBandWidthAlertStatisticItemArgs'] statistic_item: Specify statistic item configuration.
        """
        pulumi.set(__self__, "switch", switch)
        if alert_percentage is not None:
            pulumi.set(__self__, "alert_percentage", alert_percentage)
        if alert_switch is not None:
            pulumi.set(__self__, "alert_switch", alert_switch)
        if bps_threshold is not None:
            pulumi.set(__self__, "bps_threshold", bps_threshold)
        if counter_measure is not None:
            pulumi.set(__self__, "counter_measure", counter_measure)
        if last_trigger_time is not None:
            pulumi.set(__self__, "last_trigger_time", last_trigger_time)
        if last_trigger_time_overseas is not None:
            pulumi.set(__self__, "last_trigger_time_overseas", last_trigger_time_overseas)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if statistic_item is not None:
            pulumi.set(__self__, "statistic_item", statistic_item)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="alertPercentage")
    def alert_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Alert percentage.
        """
        return pulumi.get(self, "alert_percentage")

    @alert_percentage.setter
    def alert_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alert_percentage", value)

    @property
    @pulumi.getter(name="alertSwitch")
    def alert_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Switch alert.
        """
        return pulumi.get(self, "alert_switch")

    @alert_switch.setter
    def alert_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_switch", value)

    @property
    @pulumi.getter(name="bpsThreshold")
    def bps_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        threshold of bps.
        """
        return pulumi.get(self, "bps_threshold")

    @bps_threshold.setter
    def bps_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bps_threshold", value)

    @property
    @pulumi.getter(name="counterMeasure")
    def counter_measure(self) -> Optional[pulumi.Input[str]]:
        """
        Counter measure.
        """
        return pulumi.get(self, "counter_measure")

    @counter_measure.setter
    def counter_measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "counter_measure", value)

    @property
    @pulumi.getter(name="lastTriggerTime")
    def last_trigger_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last trigger time.
        """
        return pulumi.get(self, "last_trigger_time")

    @last_trigger_time.setter
    def last_trigger_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_trigger_time", value)

    @property
    @pulumi.getter(name="lastTriggerTimeOverseas")
    def last_trigger_time_overseas(self) -> Optional[pulumi.Input[str]]:
        """
        Last trigger time of overseas.
        """
        return pulumi.get(self, "last_trigger_time_overseas")

    @last_trigger_time_overseas.setter
    def last_trigger_time_overseas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_trigger_time_overseas", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        Metric.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="statisticItem")
    def statistic_item(self) -> Optional[pulumi.Input['DomainBandWidthAlertStatisticItemArgs']]:
        """
        Specify statistic item configuration.
        """
        return pulumi.get(self, "statistic_item")

    @statistic_item.setter
    def statistic_item(self, value: Optional[pulumi.Input['DomainBandWidthAlertStatisticItemArgs']]):
        pulumi.set(self, "statistic_item", value)


@pulumi.input_type
class DomainBandWidthAlertStatisticItemArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 alert_percentage: Optional[pulumi.Input[int]] = None,
                 alert_switch: Optional[pulumi.Input[str]] = None,
                 bps_threshold: Optional[pulumi.Input[int]] = None,
                 counter_measure: Optional[pulumi.Input[str]] = None,
                 cycle: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unblock_time: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[int] alert_percentage: Alert percentage.
        :param pulumi.Input[str] alert_switch: Switch alert.
        :param pulumi.Input[int] bps_threshold: threshold of bps.
        :param pulumi.Input[str] counter_measure: Counter measure, values: `RETURN_404`, `RESOLVE_DNS_TO_ORIGIN`.
        :param pulumi.Input[int] cycle: Cycle of checking in minutes, values `60`, `1440`.
        :param pulumi.Input[str] metric: Metric.
        :param pulumi.Input[str] type: Type of statistic item.
        :param pulumi.Input[int] unblock_time: Time of auto unblock.
        """
        pulumi.set(__self__, "switch", switch)
        if alert_percentage is not None:
            pulumi.set(__self__, "alert_percentage", alert_percentage)
        if alert_switch is not None:
            pulumi.set(__self__, "alert_switch", alert_switch)
        if bps_threshold is not None:
            pulumi.set(__self__, "bps_threshold", bps_threshold)
        if counter_measure is not None:
            pulumi.set(__self__, "counter_measure", counter_measure)
        if cycle is not None:
            pulumi.set(__self__, "cycle", cycle)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unblock_time is not None:
            pulumi.set(__self__, "unblock_time", unblock_time)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="alertPercentage")
    def alert_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Alert percentage.
        """
        return pulumi.get(self, "alert_percentage")

    @alert_percentage.setter
    def alert_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alert_percentage", value)

    @property
    @pulumi.getter(name="alertSwitch")
    def alert_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Switch alert.
        """
        return pulumi.get(self, "alert_switch")

    @alert_switch.setter
    def alert_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_switch", value)

    @property
    @pulumi.getter(name="bpsThreshold")
    def bps_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        threshold of bps.
        """
        return pulumi.get(self, "bps_threshold")

    @bps_threshold.setter
    def bps_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bps_threshold", value)

    @property
    @pulumi.getter(name="counterMeasure")
    def counter_measure(self) -> Optional[pulumi.Input[str]]:
        """
        Counter measure, values: `RETURN_404`, `RESOLVE_DNS_TO_ORIGIN`.
        """
        return pulumi.get(self, "counter_measure")

    @counter_measure.setter
    def counter_measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "counter_measure", value)

    @property
    @pulumi.getter
    def cycle(self) -> Optional[pulumi.Input[int]]:
        """
        Cycle of checking in minutes, values `60`, `1440`.
        """
        return pulumi.get(self, "cycle")

    @cycle.setter
    def cycle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cycle", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        Metric.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of statistic item.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="unblockTime")
    def unblock_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time of auto unblock.
        """
        return pulumi.get(self, "unblock_time")

    @unblock_time.setter
    def unblock_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unblock_time", value)


@pulumi.input_type
class DomainCacheKeyArgs:
    def __init__(__self__, *,
                 full_url_cache: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[str]] = None,
                 key_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DomainCacheKeyKeyRuleArgs']]]] = None,
                 query_string: Optional[pulumi.Input['DomainCacheKeyQueryStringArgs']] = None):
        """
        :param pulumi.Input[str] full_url_cache: Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
        :param pulumi.Input[str] ignore_case: Specifies whether the cache key is case sensitive.
        :param pulumi.Input[Sequence[pulumi.Input['DomainCacheKeyKeyRuleArgs']]] key_rules: Path-specific cache key configuration.
        :param pulumi.Input['DomainCacheKeyQueryStringArgs'] query_string: Request parameter contained in CacheKey.
        """
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if key_rules is not None:
            pulumi.set(__self__, "key_rules", key_rules)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
        """
        return pulumi.get(self, "full_url_cache")

    @full_url_cache.setter
    def full_url_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_url_cache", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the cache key is case sensitive.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="keyRules")
    def key_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainCacheKeyKeyRuleArgs']]]]:
        """
        Path-specific cache key configuration.
        """
        return pulumi.get(self, "key_rules")

    @key_rules.setter
    def key_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainCacheKeyKeyRuleArgs']]]]):
        pulumi.set(self, "key_rules", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[pulumi.Input['DomainCacheKeyQueryStringArgs']]:
        """
        Request parameter contained in CacheKey.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[pulumi.Input['DomainCacheKeyQueryStringArgs']]):
        pulumi.set(self, "query_string", value)


@pulumi.input_type
class DomainCacheKeyKeyRuleArgs:
    def __init__(__self__, *,
                 query_string: pulumi.Input['DomainCacheKeyKeyRuleQueryStringArgs'],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str],
                 full_url_cache: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[str]] = None,
                 rule_tag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DomainCacheKeyKeyRuleQueryStringArgs'] query_string: Request parameter contained in CacheKey.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rule_paths: List of rule paths for each `key_rules`: `/` for `index`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        :param pulumi.Input[str] rule_type: Rule type, available: `file`, `directory`, `path`, `index`.
        :param pulumi.Input[str] full_url_cache: Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
        :param pulumi.Input[str] ignore_case: Whether caches are case insensitive.
        :param pulumi.Input[str] rule_tag: Specify rule tag, default value is `user`.
        """
        pulumi.set(__self__, "query_string", query_string)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> pulumi.Input['DomainCacheKeyKeyRuleQueryStringArgs']:
        """
        Request parameter contained in CacheKey.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: pulumi.Input['DomainCacheKeyKeyRuleQueryStringArgs']):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of rule paths for each `key_rules`: `/` for `index`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        """
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        """
        Rule type, available: `file`, `directory`, `path`, `index`.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
        """
        return pulumi.get(self, "full_url_cache")

    @full_url_cache.setter
    def full_url_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_url_cache", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[str]]:
        """
        Whether caches are case insensitive.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Specify rule tag, default value is `user`.
        """
        return pulumi.get(self, "rule_tag")

    @rule_tag.setter
    def rule_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag", value)


@pulumi.input_type
class DomainCacheKeyKeyRuleQueryStringArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
        :param pulumi.Input[str] switch: Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
        :param pulumi.Input[str] value: Array of included/excluded query strings (separated by `;`).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Array of included/excluded query strings (separated by `;`).
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DomainCacheKeyQueryStringArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 reorder: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
        :param pulumi.Input[str] reorder: Whether to sort again, values `on`, `off` (Default).
        :param pulumi.Input[str] switch: Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
        :param pulumi.Input[str] value: Array of included/excluded query strings (separated by `;`).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if reorder is not None:
            pulumi.set(__self__, "reorder", reorder)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def reorder(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to sort again, values `on`, `off` (Default).
        """
        return pulumi.get(self, "reorder")

    @reorder.setter
    def reorder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reorder", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Array of included/excluded query strings (separated by `;`).
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DomainCompressionArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 compression_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DomainCompressionCompressionRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input['DomainCompressionCompressionRuleArgs']]] compression_rules: List of compression rules.
        """
        pulumi.set(__self__, "switch", switch)
        if compression_rules is not None:
            pulumi.set(__self__, "compression_rules", compression_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="compressionRules")
    def compression_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainCompressionCompressionRuleArgs']]]]:
        """
        List of compression rules.
        """
        return pulumi.get(self, "compression_rules")

    @compression_rules.setter
    def compression_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainCompressionCompressionRuleArgs']]]]):
        pulumi.set(self, "compression_rules", value)


@pulumi.input_type
class DomainCompressionCompressionRuleArgs:
    def __init__(__self__, *,
                 algorithms: pulumi.Input[Sequence[pulumi.Input[str]]],
                 compress: pulumi.Input[bool],
                 max_length: pulumi.Input[int],
                 min_length: pulumi.Input[int],
                 file_extensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] algorithms: List of algorithms, available: `gzip` and `brotli`.
        :param pulumi.Input[bool] compress: Must be set as true, enables compression.
        :param pulumi.Input[int] max_length: The maximum file size to trigger compression (in bytes).
        :param pulumi.Input[int] min_length: The minimum file size to trigger compression (in bytes).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_extensions: List of file extensions like `jpg`, `txt`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rule_paths: List of rule paths for each `rule_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        :param pulumi.Input[str] rule_type: Rule type, available: `all`, `file`, `directory`, `path`, `contentType`.
        """
        pulumi.set(__self__, "algorithms", algorithms)
        pulumi.set(__self__, "compress", compress)
        pulumi.set(__self__, "max_length", max_length)
        pulumi.set(__self__, "min_length", min_length)
        if file_extensions is not None:
            pulumi.set(__self__, "file_extensions", file_extensions)
        if rule_paths is not None:
            pulumi.set(__self__, "rule_paths", rule_paths)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter
    def algorithms(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of algorithms, available: `gzip` and `brotli`.
        """
        return pulumi.get(self, "algorithms")

    @algorithms.setter
    def algorithms(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "algorithms", value)

    @property
    @pulumi.getter
    def compress(self) -> pulumi.Input[bool]:
        """
        Must be set as true, enables compression.
        """
        return pulumi.get(self, "compress")

    @compress.setter
    def compress(self, value: pulumi.Input[bool]):
        pulumi.set(self, "compress", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> pulumi.Input[int]:
        """
        The maximum file size to trigger compression (in bytes).
        """
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> pulumi.Input[int]:
        """
        The minimum file size to trigger compression (in bytes).
        """
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of file extensions like `jpg`, `txt`.
        """
        return pulumi.get(self, "file_extensions")

    @file_extensions.setter
    def file_extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_extensions", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of rule paths for each `rule_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        """
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        """
        Rule type, available: `all`, `file`, `directory`, `path`, `contentType`.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class DomainDownstreamCappingArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 capping_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDownstreamCappingCappingRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input['DomainDownstreamCappingCappingRuleArgs']]] capping_rules: List of capping rule.
        """
        pulumi.set(__self__, "switch", switch)
        if capping_rules is not None:
            pulumi.set(__self__, "capping_rules", capping_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="cappingRules")
    def capping_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainDownstreamCappingCappingRuleArgs']]]]:
        """
        List of capping rule.
        """
        return pulumi.get(self, "capping_rules")

    @capping_rules.setter
    def capping_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainDownstreamCappingCappingRuleArgs']]]]):
        pulumi.set(self, "capping_rules", value)


@pulumi.input_type
class DomainDownstreamCappingCappingRuleArgs:
    def __init__(__self__, *,
                 kbps_threshold: pulumi.Input[int],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str]):
        """
        :param pulumi.Input[int] kbps_threshold: Capping rule kbps threshold.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rule_paths: List of capping rule path.
        :param pulumi.Input[str] rule_type: Capping rule type.
        """
        pulumi.set(__self__, "kbps_threshold", kbps_threshold)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="kbpsThreshold")
    def kbps_threshold(self) -> pulumi.Input[int]:
        """
        Capping rule kbps threshold.
        """
        return pulumi.get(self, "kbps_threshold")

    @kbps_threshold.setter
    def kbps_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "kbps_threshold", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of capping rule path.
        """
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        """
        Capping rule type.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class DomainErrorPageArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 page_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DomainErrorPagePageRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input['DomainErrorPagePageRuleArgs']]] page_rules: List of error page rule.
        """
        pulumi.set(__self__, "switch", switch)
        if page_rules is not None:
            pulumi.set(__self__, "page_rules", page_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="pageRules")
    def page_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainErrorPagePageRuleArgs']]]]:
        """
        List of error page rule.
        """
        return pulumi.get(self, "page_rules")

    @page_rules.setter
    def page_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainErrorPagePageRuleArgs']]]]):
        pulumi.set(self, "page_rules", value)


@pulumi.input_type
class DomainErrorPagePageRuleArgs:
    def __init__(__self__, *,
                 redirect_code: pulumi.Input[int],
                 redirect_url: pulumi.Input[str],
                 status_code: pulumi.Input[int]):
        """
        :param pulumi.Input[int] redirect_code: Redirect code of error page rules.
        :param pulumi.Input[str] redirect_url: Redirect url of error page rules.
        :param pulumi.Input[int] status_code: Status code of error page rules.
        """
        pulumi.set(__self__, "redirect_code", redirect_code)
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="redirectCode")
    def redirect_code(self) -> pulumi.Input[int]:
        """
        Redirect code of error page rules.
        """
        return pulumi.get(self, "redirect_code")

    @redirect_code.setter
    def redirect_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "redirect_code", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        """
        Redirect url of error page rules.
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[int]:
        """
        Status code of error page rules.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_code", value)


@pulumi.input_type
class DomainHttpsConfigArgs:
    def __init__(__self__, *,
                 https_switch: pulumi.Input[str],
                 client_certificate_config: Optional[pulumi.Input['DomainHttpsConfigClientCertificateConfigArgs']] = None,
                 force_redirect: Optional[pulumi.Input['DomainHttpsConfigForceRedirectArgs']] = None,
                 http2_switch: Optional[pulumi.Input[str]] = None,
                 ocsp_stapling_switch: Optional[pulumi.Input[str]] = None,
                 server_certificate_config: Optional[pulumi.Input['DomainHttpsConfigServerCertificateConfigArgs']] = None,
                 spdy_switch: Optional[pulumi.Input[str]] = None,
                 tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 verify_client: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] https_switch: HTTPS configuration switch. Valid values are `on` and `off`.
        :param pulumi.Input['DomainHttpsConfigClientCertificateConfigArgs'] client_certificate_config: Client certificate configuration information.
        :param pulumi.Input['DomainHttpsConfigForceRedirectArgs'] force_redirect: Configuration of forced HTTP or HTTPS redirects.
        :param pulumi.Input[str] http2_switch: HTTP2 configuration switch. Valid values are `on` and `off`. and default value is `off`.
        :param pulumi.Input[str] ocsp_stapling_switch: OCSP configuration switch. Valid values are `on` and `off`. and default value is `off`.
        :param pulumi.Input['DomainHttpsConfigServerCertificateConfigArgs'] server_certificate_config: Server certificate configuration information.
        :param pulumi.Input[str] spdy_switch: Spdy configuration switch. Valid values are `on` and `off`. and default value is `off`. This parameter is for white-list customer.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tls_versions: Tls version settings, only support some Advanced domain names, support settings TLSv1, TLSV1.1, TLSV1.2, TLSv1.3, when modifying must open consecutive versions.
        :param pulumi.Input[str] verify_client: Client certificate authentication feature. Valid values are `on` and `off`. and default value is `off`.
        """
        pulumi.set(__self__, "https_switch", https_switch)
        if client_certificate_config is not None:
            pulumi.set(__self__, "client_certificate_config", client_certificate_config)
        if force_redirect is not None:
            pulumi.set(__self__, "force_redirect", force_redirect)
        if http2_switch is not None:
            pulumi.set(__self__, "http2_switch", http2_switch)
        if ocsp_stapling_switch is not None:
            pulumi.set(__self__, "ocsp_stapling_switch", ocsp_stapling_switch)
        if server_certificate_config is not None:
            pulumi.set(__self__, "server_certificate_config", server_certificate_config)
        if spdy_switch is not None:
            pulumi.set(__self__, "spdy_switch", spdy_switch)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)
        if verify_client is not None:
            pulumi.set(__self__, "verify_client", verify_client)

    @property
    @pulumi.getter(name="httpsSwitch")
    def https_switch(self) -> pulumi.Input[str]:
        """
        HTTPS configuration switch. Valid values are `on` and `off`.
        """
        return pulumi.get(self, "https_switch")

    @https_switch.setter
    def https_switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "https_switch", value)

    @property
    @pulumi.getter(name="clientCertificateConfig")
    def client_certificate_config(self) -> Optional[pulumi.Input['DomainHttpsConfigClientCertificateConfigArgs']]:
        """
        Client certificate configuration information.
        """
        return pulumi.get(self, "client_certificate_config")

    @client_certificate_config.setter
    def client_certificate_config(self, value: Optional[pulumi.Input['DomainHttpsConfigClientCertificateConfigArgs']]):
        pulumi.set(self, "client_certificate_config", value)

    @property
    @pulumi.getter(name="forceRedirect")
    def force_redirect(self) -> Optional[pulumi.Input['DomainHttpsConfigForceRedirectArgs']]:
        """
        Configuration of forced HTTP or HTTPS redirects.
        """
        return pulumi.get(self, "force_redirect")

    @force_redirect.setter
    def force_redirect(self, value: Optional[pulumi.Input['DomainHttpsConfigForceRedirectArgs']]):
        pulumi.set(self, "force_redirect", value)

    @property
    @pulumi.getter(name="http2Switch")
    def http2_switch(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP2 configuration switch. Valid values are `on` and `off`. and default value is `off`.
        """
        return pulumi.get(self, "http2_switch")

    @http2_switch.setter
    def http2_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http2_switch", value)

    @property
    @pulumi.getter(name="ocspStaplingSwitch")
    def ocsp_stapling_switch(self) -> Optional[pulumi.Input[str]]:
        """
        OCSP configuration switch. Valid values are `on` and `off`. and default value is `off`.
        """
        return pulumi.get(self, "ocsp_stapling_switch")

    @ocsp_stapling_switch.setter
    def ocsp_stapling_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_stapling_switch", value)

    @property
    @pulumi.getter(name="serverCertificateConfig")
    def server_certificate_config(self) -> Optional[pulumi.Input['DomainHttpsConfigServerCertificateConfigArgs']]:
        """
        Server certificate configuration information.
        """
        return pulumi.get(self, "server_certificate_config")

    @server_certificate_config.setter
    def server_certificate_config(self, value: Optional[pulumi.Input['DomainHttpsConfigServerCertificateConfigArgs']]):
        pulumi.set(self, "server_certificate_config", value)

    @property
    @pulumi.getter(name="spdySwitch")
    def spdy_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Spdy configuration switch. Valid values are `on` and `off`. and default value is `off`. This parameter is for white-list customer.
        """
        return pulumi.get(self, "spdy_switch")

    @spdy_switch.setter
    def spdy_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spdy_switch", value)

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tls version settings, only support some Advanced domain names, support settings TLSv1, TLSV1.1, TLSV1.2, TLSv1.3, when modifying must open consecutive versions.
        """
        return pulumi.get(self, "tls_versions")

    @tls_versions.setter
    def tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_versions", value)

    @property
    @pulumi.getter(name="verifyClient")
    def verify_client(self) -> Optional[pulumi.Input[str]]:
        """
        Client certificate authentication feature. Valid values are `on` and `off`. and default value is `off`.
        """
        return pulumi.get(self, "verify_client")

    @verify_client.setter
    def verify_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_client", value)


@pulumi.input_type
class DomainHttpsConfigClientCertificateConfigArgs:
    def __init__(__self__, *,
                 certificate_content: pulumi.Input[str],
                 certificate_name: Optional[pulumi.Input[str]] = None,
                 deploy_time: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] certificate_content: Client Certificate PEM format, requires Base64 encoding.
        :param pulumi.Input[str] certificate_name: Client certificate name.
        :param pulumi.Input[str] deploy_time: Deploy time of client certificate.
        :param pulumi.Input[str] expire_time: Signature expiration time in second. The maximum value is 630720000.
        """
        pulumi.set(__self__, "certificate_content", certificate_content)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if deploy_time is not None:
            pulumi.set(__self__, "deploy_time", deploy_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)

    @property
    @pulumi.getter(name="certificateContent")
    def certificate_content(self) -> pulumi.Input[str]:
        """
        Client Certificate PEM format, requires Base64 encoding.
        """
        return pulumi.get(self, "certificate_content")

    @certificate_content.setter
    def certificate_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_content", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[str]]:
        """
        Client certificate name.
        """
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter(name="deployTime")
    def deploy_time(self) -> Optional[pulumi.Input[str]]:
        """
        Deploy time of client certificate.
        """
        return pulumi.get(self, "deploy_time")

    @deploy_time.setter
    def deploy_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_time", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)


@pulumi.input_type
class DomainHttpsConfigForceRedirectArgs:
    def __init__(__self__, *,
                 carry_headers: Optional[pulumi.Input[str]] = None,
                 redirect_status_code: Optional[pulumi.Input[int]] = None,
                 redirect_type: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] carry_headers: Whether to return the newly added header during force redirection. Values: `on`, `off`.
        :param pulumi.Input[int] redirect_status_code: Forced redirect status code. Valid values are `301` and `302`. When `switch` setting `off`, this property does not need to be set or set to `302`. Default value is `302`.
        :param pulumi.Input[str] redirect_type: Forced redirect type. Valid values are `http` and `https`. `http` means a forced redirect from HTTPS to HTTP, `https` means a forced redirect from HTTP to HTTPS. When `switch` setting `off`, this property does not need to be set or set to `http`. Default value is `http`.
        :param pulumi.Input[str] switch: Forced redirect configuration switch. Valid values are `on` and `off`. Default value is `off`.
        """
        if carry_headers is not None:
            pulumi.set(__self__, "carry_headers", carry_headers)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)
        if redirect_type is not None:
            pulumi.set(__self__, "redirect_type", redirect_type)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="carryHeaders")
    def carry_headers(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to return the newly added header during force redirection. Values: `on`, `off`.
        """
        return pulumi.get(self, "carry_headers")

    @carry_headers.setter
    def carry_headers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "carry_headers", value)

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[pulumi.Input[int]]:
        """
        Forced redirect status code. Valid values are `301` and `302`. When `switch` setting `off`, this property does not need to be set or set to `302`. Default value is `302`.
        """
        return pulumi.get(self, "redirect_status_code")

    @redirect_status_code.setter
    def redirect_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redirect_status_code", value)

    @property
    @pulumi.getter(name="redirectType")
    def redirect_type(self) -> Optional[pulumi.Input[str]]:
        """
        Forced redirect type. Valid values are `http` and `https`. `http` means a forced redirect from HTTPS to HTTP, `https` means a forced redirect from HTTP to HTTPS. When `switch` setting `off`, this property does not need to be set or set to `http`. Default value is `http`.
        """
        return pulumi.get(self, "redirect_type")

    @redirect_type.setter
    def redirect_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_type", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Forced redirect configuration switch. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class DomainHttpsConfigServerCertificateConfigArgs:
    def __init__(__self__, *,
                 certificate_content: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_name: Optional[pulumi.Input[str]] = None,
                 deploy_time: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] certificate_content: Server certificate information. This is required when uploading an external certificate, which should contain the complete certificate chain.
        :param pulumi.Input[str] certificate_id: Server certificate ID.
        :param pulumi.Input[str] certificate_name: Server certificate name.
        :param pulumi.Input[str] deploy_time: Deploy time of server certificate.
        :param pulumi.Input[str] expire_time: Signature expiration time in second. The maximum value is 630720000.
        :param pulumi.Input[str] message: Certificate remarks.
        :param pulumi.Input[str] private_key: Server key information. This is required when uploading an external certificate.
        """
        if certificate_content is not None:
            pulumi.set(__self__, "certificate_content", certificate_content)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if deploy_time is not None:
            pulumi.set(__self__, "deploy_time", deploy_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter(name="certificateContent")
    def certificate_content(self) -> Optional[pulumi.Input[str]]:
        """
        Server certificate information. This is required when uploading an external certificate, which should contain the complete certificate chain.
        """
        return pulumi.get(self, "certificate_content")

    @certificate_content.setter
    def certificate_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_content", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Server certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[str]]:
        """
        Server certificate name.
        """
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter(name="deployTime")
    def deploy_time(self) -> Optional[pulumi.Input[str]]:
        """
        Deploy time of server certificate.
        """
        return pulumi.get(self, "deploy_time")

    @deploy_time.setter
    def deploy_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_time", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate remarks.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Server key information. This is required when uploading an external certificate.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)


@pulumi.input_type
class DomainHwPrivateAccessArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] access_key: Access ID.
        :param pulumi.Input[str] bucket: Bucket.
        :param pulumi.Input[str] secret_key: Key.
        """
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class DomainIpFilterArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 filter_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DomainIpFilterFilterRuleArgs']]]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 return_code: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input['DomainIpFilterFilterRuleArgs']]] filter_rules: Ip filter rules, This feature is only available to selected beta customers.
        :param pulumi.Input[str] filter_type: IP `blacklist`/`whitelist` type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: Ip filter list, Supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
        :param pulumi.Input[int] return_code: Return code, available values: 400-499.
        """
        pulumi.set(__self__, "switch", switch)
        if filter_rules is not None:
            pulumi.set(__self__, "filter_rules", filter_rules)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if return_code is not None:
            pulumi.set(__self__, "return_code", return_code)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="filterRules")
    def filter_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainIpFilterFilterRuleArgs']]]]:
        """
        Ip filter rules, This feature is only available to selected beta customers.
        """
        return pulumi.get(self, "filter_rules")

    @filter_rules.setter
    def filter_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainIpFilterFilterRuleArgs']]]]):
        pulumi.set(self, "filter_rules", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        IP `blacklist`/`whitelist` type.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ip filter list, Supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="returnCode")
    def return_code(self) -> Optional[pulumi.Input[int]]:
        """
        Return code, available values: 400-499.
        """
        return pulumi.get(self, "return_code")

    @return_code.setter
    def return_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "return_code", value)


@pulumi.input_type
class DomainIpFilterFilterRuleArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[str],
                 filters: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] filter_type: Ip filter `blacklist`/`whitelist` type of filter rules.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: Ip filter rule list, supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rule_paths: Content list for each `rule_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        :param pulumi.Input[str] rule_type: Ip filter rule type of filter rules, available: `all`, `file`, `directory`, `path`.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[str]:
        """
        Ip filter `blacklist`/`whitelist` type of filter rules.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Ip filter rule list, supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Content list for each `rule_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        """
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        """
        Ip filter rule type of filter rules, available: `all`, `file`, `directory`, `path`.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class DomainIpFreqLimitArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 qps: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[int] qps: Sets the limited number of requests per second, 514 will be returned for requests that exceed the limit.
        """
        pulumi.set(__self__, "switch", switch)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def qps(self) -> Optional[pulumi.Input[int]]:
        """
        Sets the limited number of requests per second, 514 will be returned for requests that exceed the limit.
        """
        return pulumi.get(self, "qps")

    @qps.setter
    def qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qps", value)


@pulumi.input_type
class DomainMaxAgeArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 max_age_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DomainMaxAgeMaxAgeRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input['DomainMaxAgeMaxAgeRuleArgs']]] max_age_rules: List of Max Age rule configuration.
        """
        pulumi.set(__self__, "switch", switch)
        if max_age_rules is not None:
            pulumi.set(__self__, "max_age_rules", max_age_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="maxAgeRules")
    def max_age_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainMaxAgeMaxAgeRuleArgs']]]]:
        """
        List of Max Age rule configuration.
        """
        return pulumi.get(self, "max_age_rules")

    @max_age_rules.setter
    def max_age_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainMaxAgeMaxAgeRuleArgs']]]]):
        pulumi.set(self, "max_age_rules", value)


@pulumi.input_type
class DomainMaxAgeMaxAgeRuleArgs:
    def __init__(__self__, *,
                 max_age_contents: pulumi.Input[Sequence[pulumi.Input[str]]],
                 max_age_time: pulumi.Input[int],
                 max_age_type: pulumi.Input[str],
                 follow_origin: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] max_age_contents: List of rule paths for each `max_age_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        :param pulumi.Input[int] max_age_time: Max Age time in seconds, this can set to `0` that stands for no cache.
        :param pulumi.Input[str] max_age_type: The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
        :param pulumi.Input[str] follow_origin: Whether to follow origin, values: `on`/`off`, if set to `on`, the `max_age_time` will be ignored.
        """
        pulumi.set(__self__, "max_age_contents", max_age_contents)
        pulumi.set(__self__, "max_age_time", max_age_time)
        pulumi.set(__self__, "max_age_type", max_age_type)
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)

    @property
    @pulumi.getter(name="maxAgeContents")
    def max_age_contents(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of rule paths for each `max_age_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        """
        return pulumi.get(self, "max_age_contents")

    @max_age_contents.setter
    def max_age_contents(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "max_age_contents", value)

    @property
    @pulumi.getter(name="maxAgeTime")
    def max_age_time(self) -> pulumi.Input[int]:
        """
        Max Age time in seconds, this can set to `0` that stands for no cache.
        """
        return pulumi.get(self, "max_age_time")

    @max_age_time.setter
    def max_age_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_age_time", value)

    @property
    @pulumi.getter(name="maxAgeType")
    def max_age_type(self) -> pulumi.Input[str]:
        """
        The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
        """
        return pulumi.get(self, "max_age_type")

    @max_age_type.setter
    def max_age_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "max_age_type", value)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to follow origin, values: `on`/`off`, if set to `on`, the `max_age_time` will be ignored.
        """
        return pulumi.get(self, "follow_origin")

    @follow_origin.setter
    def follow_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "follow_origin", value)


@pulumi.input_type
class DomainOriginArgs:
    def __init__(__self__, *,
                 origin_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 origin_type: pulumi.Input[str],
                 backup_origin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backup_origin_type: Optional[pulumi.Input[str]] = None,
                 backup_server_name: Optional[pulumi.Input[str]] = None,
                 cos_private_access: Optional[pulumi.Input[str]] = None,
                 origin_company: Optional[pulumi.Input[str]] = None,
                 origin_pull_protocol: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] origin_lists: Master origin server list. Valid values can be ip or domain name. When modifying the origin server, you need to enter the corresponding `origin_type`.
        :param pulumi.Input[str] origin_type: Master origin server type. The following types are supported: `domain`: Domain name, `domainv6`: IPv6 domain name, `cos`: COS bucket address, `third_party`: Third-party object storage origin, `igtm`: IGTM origin, `ip`: IP address, `ipv6`: One IPv6 address, `ip_ipv6`: Multiple IPv4 addresses and one IPv6 address, `ip_domain`: IP addresses and domain names (only available to beta users), `ip_domainv6`: Multiple IPv4 addresses and one IPv6 domain name, `ipv6_domain`: Multiple IPv6 addresses and one domain name, `ipv6_domainv6`: Multiple IPv6 addresses and one IPv6 domain name, `domain_domainv6`: Multiple IPv4 domain names and one IPv6 domain name, `ip_ipv6_domain`: Multiple IPv4 and IPv6 addresses and one domain name, `ip_ipv6_domainv6`: Multiple IPv4 and IPv6 addresses and one IPv6 domain name, `ip_domain_domainv6`: Multiple IPv4 addresses and IPv4 domain names and one IPv6 domain name, `ipv6_domain_domainv6`: Multiple IPv4 domain names and IPv6 addresses and one IPv6 domain name, `ip_ipv6_domain_domainv6`: Multiple IPv4 and IPv6 addresses and IPv4 domain names and one IPv6 domain name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_origin_lists: Backup origin server list. Valid values can be ip or domain name. When modifying the backup origin server, you need to enter the corresponding `backup_origin_type`.
        :param pulumi.Input[str] backup_origin_type: Backup origin server type, which supports the following types: `domain`: domain name type, `ip`: IP list used as origin server, `ipv6_domain`: Multiple IPv6 addresses and one domain name, `ip_ipv6`: Multiple IPv4 addresses and one IPv6 address, `ip_ipv6_domain`: Multiple IPv4 and IPv6 addresses and one domain name.
        :param pulumi.Input[str] backup_server_name: Host header used when accessing the backup origin server. If left empty, the ServerName of master origin server will be used by default.
        :param pulumi.Input[str] cos_private_access: When OriginType is COS, you can specify if access to private buckets is allowed. Valid values are `on` and `off`. and default value is `off`.
        :param pulumi.Input[str] origin_company: Object storage back to the source vendor. Required when the source station type is a third-party storage source station (third_party). Optional values include the following: `aws_s3`: AWS S3; `ali_oss`: Alibaba Cloud OSS; `hw_obs`: Huawei OBS; `qiniu_kodo`: Qiniu Cloud kodo; `others`: other vendors' object storage, only supports object storage compatible with AWS signature algorithm, such as Tencent Cloud Financial Zone COS. Example value: `hw_obs`.
        :param pulumi.Input[str] origin_pull_protocol: Origin-pull protocol configuration. `http`: forced HTTP origin-pull, `follow`: protocol follow origin-pull, `https`: forced HTTPS origin-pull. This only supports origin server port 443 for origin-pull.
        :param pulumi.Input[str] server_name: Host header used when accessing the master origin server. If left empty, the acceleration domain name will be used by default.
        """
        pulumi.set(__self__, "origin_lists", origin_lists)
        pulumi.set(__self__, "origin_type", origin_type)
        if backup_origin_lists is not None:
            pulumi.set(__self__, "backup_origin_lists", backup_origin_lists)
        if backup_origin_type is not None:
            pulumi.set(__self__, "backup_origin_type", backup_origin_type)
        if backup_server_name is not None:
            pulumi.set(__self__, "backup_server_name", backup_server_name)
        if cos_private_access is not None:
            pulumi.set(__self__, "cos_private_access", cos_private_access)
        if origin_company is not None:
            pulumi.set(__self__, "origin_company", origin_company)
        if origin_pull_protocol is not None:
            pulumi.set(__self__, "origin_pull_protocol", origin_pull_protocol)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="originLists")
    def origin_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Master origin server list. Valid values can be ip or domain name. When modifying the origin server, you need to enter the corresponding `origin_type`.
        """
        return pulumi.get(self, "origin_lists")

    @origin_lists.setter
    def origin_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "origin_lists", value)

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> pulumi.Input[str]:
        """
        Master origin server type. The following types are supported: `domain`: Domain name, `domainv6`: IPv6 domain name, `cos`: COS bucket address, `third_party`: Third-party object storage origin, `igtm`: IGTM origin, `ip`: IP address, `ipv6`: One IPv6 address, `ip_ipv6`: Multiple IPv4 addresses and one IPv6 address, `ip_domain`: IP addresses and domain names (only available to beta users), `ip_domainv6`: Multiple IPv4 addresses and one IPv6 domain name, `ipv6_domain`: Multiple IPv6 addresses and one domain name, `ipv6_domainv6`: Multiple IPv6 addresses and one IPv6 domain name, `domain_domainv6`: Multiple IPv4 domain names and one IPv6 domain name, `ip_ipv6_domain`: Multiple IPv4 and IPv6 addresses and one domain name, `ip_ipv6_domainv6`: Multiple IPv4 and IPv6 addresses and one IPv6 domain name, `ip_domain_domainv6`: Multiple IPv4 addresses and IPv4 domain names and one IPv6 domain name, `ipv6_domain_domainv6`: Multiple IPv4 domain names and IPv6 addresses and one IPv6 domain name, `ip_ipv6_domain_domainv6`: Multiple IPv4 and IPv6 addresses and IPv4 domain names and one IPv6 domain name.
        """
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_type", value)

    @property
    @pulumi.getter(name="backupOriginLists")
    def backup_origin_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Backup origin server list. Valid values can be ip or domain name. When modifying the backup origin server, you need to enter the corresponding `backup_origin_type`.
        """
        return pulumi.get(self, "backup_origin_lists")

    @backup_origin_lists.setter
    def backup_origin_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_origin_lists", value)

    @property
    @pulumi.getter(name="backupOriginType")
    def backup_origin_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backup origin server type, which supports the following types: `domain`: domain name type, `ip`: IP list used as origin server, `ipv6_domain`: Multiple IPv6 addresses and one domain name, `ip_ipv6`: Multiple IPv4 addresses and one IPv6 address, `ip_ipv6_domain`: Multiple IPv4 and IPv6 addresses and one domain name.
        """
        return pulumi.get(self, "backup_origin_type")

    @backup_origin_type.setter
    def backup_origin_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_origin_type", value)

    @property
    @pulumi.getter(name="backupServerName")
    def backup_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Host header used when accessing the backup origin server. If left empty, the ServerName of master origin server will be used by default.
        """
        return pulumi.get(self, "backup_server_name")

    @backup_server_name.setter
    def backup_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_server_name", value)

    @property
    @pulumi.getter(name="cosPrivateAccess")
    def cos_private_access(self) -> Optional[pulumi.Input[str]]:
        """
        When OriginType is COS, you can specify if access to private buckets is allowed. Valid values are `on` and `off`. and default value is `off`.
        """
        return pulumi.get(self, "cos_private_access")

    @cos_private_access.setter
    def cos_private_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_private_access", value)

    @property
    @pulumi.getter(name="originCompany")
    def origin_company(self) -> Optional[pulumi.Input[str]]:
        """
        Object storage back to the source vendor. Required when the source station type is a third-party storage source station (third_party). Optional values include the following: `aws_s3`: AWS S3; `ali_oss`: Alibaba Cloud OSS; `hw_obs`: Huawei OBS; `qiniu_kodo`: Qiniu Cloud kodo; `others`: other vendors' object storage, only supports object storage compatible with AWS signature algorithm, such as Tencent Cloud Financial Zone COS. Example value: `hw_obs`.
        """
        return pulumi.get(self, "origin_company")

    @origin_company.setter
    def origin_company(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_company", value)

    @property
    @pulumi.getter(name="originPullProtocol")
    def origin_pull_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Origin-pull protocol configuration. `http`: forced HTTP origin-pull, `follow`: protocol follow origin-pull, `https`: forced HTTPS origin-pull. This only supports origin server port 443 for origin-pull.
        """
        return pulumi.get(self, "origin_pull_protocol")

    @origin_pull_protocol.setter
    def origin_pull_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_pull_protocol", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Host header used when accessing the master origin server. If left empty, the acceleration domain name will be used by default.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)


@pulumi.input_type
class DomainOriginPullOptimizationArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 optimization_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] optimization_type: Optimization type, values: `OVToCN` - Overseas to CN, `CNToOV` CN to Overseas.
        """
        pulumi.set(__self__, "switch", switch)
        if optimization_type is not None:
            pulumi.set(__self__, "optimization_type", optimization_type)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="optimizationType")
    def optimization_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optimization type, values: `OVToCN` - Overseas to CN, `CNToOV` CN to Overseas.
        """
        return pulumi.get(self, "optimization_type")

    @optimization_type.setter
    def optimization_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimization_type", value)


@pulumi.input_type
class DomainOriginPullTimeoutArgs:
    def __init__(__self__, *,
                 connect_timeout: pulumi.Input[int],
                 receive_timeout: pulumi.Input[int]):
        """
        :param pulumi.Input[int] connect_timeout: The origin-pull connection timeout (in seconds). Valid range: 5-60.
        :param pulumi.Input[int] receive_timeout: The origin-pull receipt timeout (in seconds). Valid range: 10-60.
        """
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "receive_timeout", receive_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> pulumi.Input[int]:
        """
        The origin-pull connection timeout (in seconds). Valid range: 5-60.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="receiveTimeout")
    def receive_timeout(self) -> pulumi.Input[int]:
        """
        The origin-pull receipt timeout (in seconds). Valid range: 10-60.
        """
        return pulumi.get(self, "receive_timeout")

    @receive_timeout.setter
    def receive_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "receive_timeout", value)


@pulumi.input_type
class DomainOssPrivateAccessArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] access_key: Access ID.
        :param pulumi.Input[str] bucket: Bucket.
        :param pulumi.Input[str] region: Region.
        :param pulumi.Input[str] secret_key: Key.
        """
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class DomainOthersPrivateAccessArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] access_key: Access ID.
        :param pulumi.Input[str] bucket: Bucket.
        :param pulumi.Input[str] region: Region.
        :param pulumi.Input[str] secret_key: Key.
        """
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class DomainPostMaxSizeArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 max_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[int] max_size: Maximum size in MB, value range is `[1, 200]`.
        """
        pulumi.set(__self__, "switch", switch)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size in MB, value range is `[1, 200]`.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)


@pulumi.input_type
class DomainQnPrivateAccessArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] access_key: Access ID.
        :param pulumi.Input[str] secret_key: Key.
        """
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class DomainRefererArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 referer_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DomainRefererRefererRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input['DomainRefererRefererRuleArgs']]] referer_rules: List of referer rules.
        """
        pulumi.set(__self__, "switch", switch)
        if referer_rules is not None:
            pulumi.set(__self__, "referer_rules", referer_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="refererRules")
    def referer_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainRefererRefererRuleArgs']]]]:
        """
        List of referer rules.
        """
        return pulumi.get(self, "referer_rules")

    @referer_rules.setter
    def referer_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainRefererRefererRuleArgs']]]]):
        pulumi.set(self, "referer_rules", value)


@pulumi.input_type
class DomainRefererRefererRuleArgs:
    def __init__(__self__, *,
                 allow_empty: pulumi.Input[bool],
                 referer_type: pulumi.Input[str],
                 referers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str]):
        """
        :param pulumi.Input[bool] allow_empty: Whether to allow emptpy.
        :param pulumi.Input[str] referer_type: Referer type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] referers: Referer list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rule_paths: Referer rule path list.
        :param pulumi.Input[str] rule_type: Referer rule type.
        """
        pulumi.set(__self__, "allow_empty", allow_empty)
        pulumi.set(__self__, "referer_type", referer_type)
        pulumi.set(__self__, "referers", referers)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> pulumi.Input[bool]:
        """
        Whether to allow emptpy.
        """
        return pulumi.get(self, "allow_empty")

    @allow_empty.setter
    def allow_empty(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_empty", value)

    @property
    @pulumi.getter(name="refererType")
    def referer_type(self) -> pulumi.Input[str]:
        """
        Referer type.
        """
        return pulumi.get(self, "referer_type")

    @referer_type.setter
    def referer_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "referer_type", value)

    @property
    @pulumi.getter
    def referers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Referer list.
        """
        return pulumi.get(self, "referers")

    @referers.setter
    def referers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "referers", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Referer rule path list.
        """
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        """
        Referer rule type.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class DomainRequestHeaderArgs:
    def __init__(__self__, *,
                 header_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DomainRequestHeaderHeaderRuleArgs']]]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DomainRequestHeaderHeaderRuleArgs']]] header_rules: Custom request header configuration rules.
        :param pulumi.Input[str] switch: Custom request header configuration switch. Valid values are `on` and `off`. and default value is `off`.
        """
        if header_rules is not None:
            pulumi.set(__self__, "header_rules", header_rules)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="headerRules")
    def header_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainRequestHeaderHeaderRuleArgs']]]]:
        """
        Custom request header configuration rules.
        """
        return pulumi.get(self, "header_rules")

    @header_rules.setter
    def header_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainRequestHeaderHeaderRuleArgs']]]]):
        pulumi.set(self, "header_rules", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Custom request header configuration switch. Valid values are `on` and `off`. and default value is `off`.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class DomainRequestHeaderHeaderRuleArgs:
    def __init__(__self__, *,
                 header_mode: pulumi.Input[str],
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] header_mode: Response header mode.
        :param pulumi.Input[str] header_name: response header name of rule.
        :param pulumi.Input[str] header_value: response header value of rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rule_paths: response rule paths of rule.
        :param pulumi.Input[str] rule_type: response rule type of rule.
        """
        pulumi.set(__self__, "header_mode", header_mode)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="headerMode")
    def header_mode(self) -> pulumi.Input[str]:
        """
        Response header mode.
        """
        return pulumi.get(self, "header_mode")

    @header_mode.setter
    def header_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_mode", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        response header name of rule.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        response header value of rule.
        """
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        response rule paths of rule.
        """
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        """
        response rule type of rule.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class DomainResponseHeaderArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 header_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DomainResponseHeaderHeaderRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input['DomainResponseHeaderHeaderRuleArgs']]] header_rules: List of response header rule.
        """
        pulumi.set(__self__, "switch", switch)
        if header_rules is not None:
            pulumi.set(__self__, "header_rules", header_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="headerRules")
    def header_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainResponseHeaderHeaderRuleArgs']]]]:
        """
        List of response header rule.
        """
        return pulumi.get(self, "header_rules")

    @header_rules.setter
    def header_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainResponseHeaderHeaderRuleArgs']]]]):
        pulumi.set(self, "header_rules", value)


@pulumi.input_type
class DomainResponseHeaderHeaderRuleArgs:
    def __init__(__self__, *,
                 header_mode: pulumi.Input[str],
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str],
                 rule_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] header_mode: Response header mode.
        :param pulumi.Input[str] header_name: response header name of rule.
        :param pulumi.Input[str] header_value: response header value of rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rule_paths: response rule paths of rule.
        :param pulumi.Input[str] rule_type: response rule type of rule.
        """
        pulumi.set(__self__, "header_mode", header_mode)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="headerMode")
    def header_mode(self) -> pulumi.Input[str]:
        """
        Response header mode.
        """
        return pulumi.get(self, "header_mode")

    @header_mode.setter
    def header_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_mode", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        response header name of rule.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        """
        response header value of rule.
        """
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        response rule paths of rule.
        """
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        """
        response rule type of rule.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)


@pulumi.input_type
class DomainRuleCachArgs:
    def __init__(__self__, *,
                 cache_time: pulumi.Input[int],
                 compare_max_age: Optional[pulumi.Input[str]] = None,
                 follow_origin_switch: Optional[pulumi.Input[str]] = None,
                 heuristic_cache_switch: Optional[pulumi.Input[str]] = None,
                 heuristic_cache_time: Optional[pulumi.Input[int]] = None,
                 ignore_cache_control: Optional[pulumi.Input[str]] = None,
                 ignore_set_cookie: Optional[pulumi.Input[str]] = None,
                 no_cache_switch: Optional[pulumi.Input[str]] = None,
                 re_validate: Optional[pulumi.Input[str]] = None,
                 rule_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_type: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] cache_time: Cache expiration time setting, the unit is second, the maximum can be set to 365 days.
        :param pulumi.Input[str] compare_max_age: Advanced cache expiration configuration. When it is turned on, it will compare the max-age value returned by the origin site with the cache expiration time set in CacheRules, and take the minimum value to cache at the node. Valid values are `on` and `off`. Default value is `off`.
        :param pulumi.Input[str] follow_origin_switch: Follow the source station configuration switch. Valid values are `on` and `off`.
        :param pulumi.Input[str] heuristic_cache_switch: Specify whether to enable heuristic cache, only available while `follow_origin_switch` enabled, values: `on`, `off` (Default).
        :param pulumi.Input[int] heuristic_cache_time: Specify heuristic cache time in second, only available while `follow_origin_switch` and `heuristic_cache_switch` enabled.
        :param pulumi.Input[str] ignore_cache_control: Force caching. After opening, the no-store and no-cache resources returned by the origin site will also be cached in accordance with the CacheRules rules. Valid values are `on` and `off`. Default value is `off`.
        :param pulumi.Input[str] ignore_set_cookie: Ignore the Set-Cookie header of the origin site. Valid values are `on` and `off`. Default value is `off`. This parameter is for white-list customer.
        :param pulumi.Input[str] no_cache_switch: Cache configuration switch. Valid values are `on` and `off`.
        :param pulumi.Input[str] re_validate: Always check back to origin. Valid values are `on` and `off`. Default value is `off`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rule_paths: Matching content under the corresponding type of CacheType: `all`: fill *, `file`: fill in the suffix name, such as jpg, txt, `directory`: fill in the path, such as /xxx/test, `path`: fill in the absolute path, such as /xxx/test.html, `index`: fill /.
        :param pulumi.Input[str] rule_type: Rule type. The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
        :param pulumi.Input[str] switch: Cache configuration switch. Valid values are `on` and `off`.
        """
        pulumi.set(__self__, "cache_time", cache_time)
        if compare_max_age is not None:
            pulumi.set(__self__, "compare_max_age", compare_max_age)
        if follow_origin_switch is not None:
            pulumi.set(__self__, "follow_origin_switch", follow_origin_switch)
        if heuristic_cache_switch is not None:
            pulumi.set(__self__, "heuristic_cache_switch", heuristic_cache_switch)
        if heuristic_cache_time is not None:
            pulumi.set(__self__, "heuristic_cache_time", heuristic_cache_time)
        if ignore_cache_control is not None:
            pulumi.set(__self__, "ignore_cache_control", ignore_cache_control)
        if ignore_set_cookie is not None:
            pulumi.set(__self__, "ignore_set_cookie", ignore_set_cookie)
        if no_cache_switch is not None:
            pulumi.set(__self__, "no_cache_switch", no_cache_switch)
        if re_validate is not None:
            pulumi.set(__self__, "re_validate", re_validate)
        if rule_paths is not None:
            pulumi.set(__self__, "rule_paths", rule_paths)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> pulumi.Input[int]:
        """
        Cache expiration time setting, the unit is second, the maximum can be set to 365 days.
        """
        return pulumi.get(self, "cache_time")

    @cache_time.setter
    def cache_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "cache_time", value)

    @property
    @pulumi.getter(name="compareMaxAge")
    def compare_max_age(self) -> Optional[pulumi.Input[str]]:
        """
        Advanced cache expiration configuration. When it is turned on, it will compare the max-age value returned by the origin site with the cache expiration time set in CacheRules, and take the minimum value to cache at the node. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "compare_max_age")

    @compare_max_age.setter
    def compare_max_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compare_max_age", value)

    @property
    @pulumi.getter(name="followOriginSwitch")
    def follow_origin_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Follow the source station configuration switch. Valid values are `on` and `off`.
        """
        return pulumi.get(self, "follow_origin_switch")

    @follow_origin_switch.setter
    def follow_origin_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "follow_origin_switch", value)

    @property
    @pulumi.getter(name="heuristicCacheSwitch")
    def heuristic_cache_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Specify whether to enable heuristic cache, only available while `follow_origin_switch` enabled, values: `on`, `off` (Default).
        """
        return pulumi.get(self, "heuristic_cache_switch")

    @heuristic_cache_switch.setter
    def heuristic_cache_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "heuristic_cache_switch", value)

    @property
    @pulumi.getter(name="heuristicCacheTime")
    def heuristic_cache_time(self) -> Optional[pulumi.Input[int]]:
        """
        Specify heuristic cache time in second, only available while `follow_origin_switch` and `heuristic_cache_switch` enabled.
        """
        return pulumi.get(self, "heuristic_cache_time")

    @heuristic_cache_time.setter
    def heuristic_cache_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "heuristic_cache_time", value)

    @property
    @pulumi.getter(name="ignoreCacheControl")
    def ignore_cache_control(self) -> Optional[pulumi.Input[str]]:
        """
        Force caching. After opening, the no-store and no-cache resources returned by the origin site will also be cached in accordance with the CacheRules rules. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "ignore_cache_control")

    @ignore_cache_control.setter
    def ignore_cache_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_cache_control", value)

    @property
    @pulumi.getter(name="ignoreSetCookie")
    def ignore_set_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        Ignore the Set-Cookie header of the origin site. Valid values are `on` and `off`. Default value is `off`. This parameter is for white-list customer.
        """
        return pulumi.get(self, "ignore_set_cookie")

    @ignore_set_cookie.setter
    def ignore_set_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_set_cookie", value)

    @property
    @pulumi.getter(name="noCacheSwitch")
    def no_cache_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Cache configuration switch. Valid values are `on` and `off`.
        """
        return pulumi.get(self, "no_cache_switch")

    @no_cache_switch.setter
    def no_cache_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_cache_switch", value)

    @property
    @pulumi.getter(name="reValidate")
    def re_validate(self) -> Optional[pulumi.Input[str]]:
        """
        Always check back to origin. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "re_validate")

    @re_validate.setter
    def re_validate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "re_validate", value)

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Matching content under the corresponding type of CacheType: `all`: fill *, `file`: fill in the suffix name, such as jpg, txt, `directory`: fill in the path, such as /xxx/test, `path`: fill in the absolute path, such as /xxx/test.html, `index`: fill /.
        """
        return pulumi.get(self, "rule_paths")

    @rule_paths.setter
    def rule_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rule_paths", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[str]]:
        """
        Rule type. The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        """
        Cache configuration switch. Valid values are `on` and `off`.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class DomainStatusCodeCacheArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 cache_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusCodeCacheCacheRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] switch: Configuration switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input['DomainStatusCodeCacheCacheRuleArgs']]] cache_rules: List of cache rule.
        """
        pulumi.set(__self__, "switch", switch)
        if cache_rules is not None:
            pulumi.set(__self__, "cache_rules", cache_rules)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="cacheRules")
    def cache_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusCodeCacheCacheRuleArgs']]]]:
        """
        List of cache rule.
        """
        return pulumi.get(self, "cache_rules")

    @cache_rules.setter
    def cache_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusCodeCacheCacheRuleArgs']]]]):
        pulumi.set(self, "cache_rules", value)


@pulumi.input_type
class DomainStatusCodeCacheCacheRuleArgs:
    def __init__(__self__, *,
                 cache_time: pulumi.Input[int],
                 status_code: pulumi.Input[str]):
        """
        :param pulumi.Input[int] cache_time: Status code cache expiration time (in seconds).
        :param pulumi.Input[str] status_code: Code of status cache. available values: `403`, `404`.
        """
        pulumi.set(__self__, "cache_time", cache_time)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> pulumi.Input[int]:
        """
        Status code cache expiration time (in seconds).
        """
        return pulumi.get(self, "cache_time")

    @cache_time.setter
    def cache_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "cache_time", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[str]:
        """
        Code of status cache. available values: `403`, `404`.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "status_code", value)


@pulumi.input_type
class UrlPurgePurgeHistoryArgs:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 flush_type: Optional[pulumi.Input[str]] = None,
                 purge_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 task_id: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create_time: Purge task create time.
        :param pulumi.Input[str] flush_type: Purge flush type of `flush` or `delete`.
        :param pulumi.Input[str] purge_type: Purge category in of `url` or `path`.
        :param pulumi.Input[str] status: Purge status of `fail`, `done`, `process`.
        :param pulumi.Input[str] task_id: Task id of last operation.
        :param pulumi.Input[str] url: Purge url.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if flush_type is not None:
            pulumi.set(__self__, "flush_type", flush_type)
        if purge_type is not None:
            pulumi.set(__self__, "purge_type", purge_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Purge task create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="flushType")
    def flush_type(self) -> Optional[pulumi.Input[str]]:
        """
        Purge flush type of `flush` or `delete`.
        """
        return pulumi.get(self, "flush_type")

    @flush_type.setter
    def flush_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flush_type", value)

    @property
    @pulumi.getter(name="purgeType")
    def purge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Purge category in of `url` or `path`.
        """
        return pulumi.get(self, "purge_type")

    @purge_type.setter
    def purge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "purge_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Purge status of `fail`, `done`, `process`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        Task id of last operation.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Purge url.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class UrlPushPushHistoryArgs:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 percent: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 task_id: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] area: Specify push area. NOTE: only push same area cache contents.
        :param pulumi.Input[str] create_time: Push task create time.
        :param pulumi.Input[int] percent: Push progress in percent.
        :param pulumi.Input[str] status: Push status of `fail`, `done`, `process` or `invalid` (4xx, 5xx response).
        :param pulumi.Input[str] task_id: Push task id.
        :param pulumi.Input[str] update_time: Push task update time.
        :param pulumi.Input[str] url: Push url.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Specify push area. NOTE: only push same area cache contents.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Push task create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[int]]:
        """
        Push progress in percent.
        """
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percent", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Push status of `fail`, `done`, `process` or `invalid` (4xx, 5xx response).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        Push task id.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Push task update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Push url.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


