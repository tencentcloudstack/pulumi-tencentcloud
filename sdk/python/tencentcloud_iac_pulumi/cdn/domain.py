# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DomainArgs', 'Domain']

@pulumi.input_type
class DomainArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 origin: pulumi.Input['DomainOriginArgs'],
                 service_type: pulumi.Input[str],
                 area: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['DomainAuthenticationArgs']] = None,
                 aws_private_access: Optional[pulumi.Input['DomainAwsPrivateAccessArgs']] = None,
                 band_width_alert: Optional[pulumi.Input['DomainBandWidthAlertArgs']] = None,
                 cache_key: Optional[pulumi.Input['DomainCacheKeyArgs']] = None,
                 compression: Optional[pulumi.Input['DomainCompressionArgs']] = None,
                 downstream_capping: Optional[pulumi.Input['DomainDownstreamCappingArgs']] = None,
                 error_page: Optional[pulumi.Input['DomainErrorPageArgs']] = None,
                 explicit_using_dry_run: Optional[pulumi.Input[bool]] = None,
                 follow_redirect_switch: Optional[pulumi.Input[str]] = None,
                 full_url_cache: Optional[pulumi.Input[bool]] = None,
                 https_config: Optional[pulumi.Input['DomainHttpsConfigArgs']] = None,
                 hw_private_access: Optional[pulumi.Input['DomainHwPrivateAccessArgs']] = None,
                 ip_filter: Optional[pulumi.Input['DomainIpFilterArgs']] = None,
                 ip_freq_limit: Optional[pulumi.Input['DomainIpFreqLimitArgs']] = None,
                 ipv6_access_switch: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input['DomainMaxAgeArgs']] = None,
                 offline_cache_switch: Optional[pulumi.Input[str]] = None,
                 origin_pull_optimization: Optional[pulumi.Input['DomainOriginPullOptimizationArgs']] = None,
                 origin_pull_timeout: Optional[pulumi.Input['DomainOriginPullTimeoutArgs']] = None,
                 oss_private_access: Optional[pulumi.Input['DomainOssPrivateAccessArgs']] = None,
                 others_private_access: Optional[pulumi.Input['DomainOthersPrivateAccessArgs']] = None,
                 post_max_sizes: Optional[pulumi.Input[Sequence[pulumi.Input['DomainPostMaxSizeArgs']]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 qn_private_access: Optional[pulumi.Input['DomainQnPrivateAccessArgs']] = None,
                 quic_switch: Optional[pulumi.Input[str]] = None,
                 range_origin_switch: Optional[pulumi.Input[str]] = None,
                 referer: Optional[pulumi.Input['DomainRefererArgs']] = None,
                 request_header: Optional[pulumi.Input['DomainRequestHeaderArgs']] = None,
                 response_header: Optional[pulumi.Input['DomainResponseHeaderArgs']] = None,
                 response_header_cache_switch: Optional[pulumi.Input[str]] = None,
                 rule_caches: Optional[pulumi.Input[Sequence[pulumi.Input['DomainRuleCachArgs']]]] = None,
                 seo_switch: Optional[pulumi.Input[str]] = None,
                 specific_config_mainland: Optional[pulumi.Input[str]] = None,
                 specific_config_overseas: Optional[pulumi.Input[str]] = None,
                 status_code_cache: Optional[pulumi.Input['DomainStatusCodeCacheArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 video_seek_switch: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Domain resource.
        :param pulumi.Input[str] domain: Name of the acceleration domain.
        :param pulumi.Input['DomainOriginArgs'] origin: Origin server configuration. It's a list and consist of at most one item.
        :param pulumi.Input[str] service_type: Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming media VOD acceleration, `hybrid`: hybrid acceleration, `dynamic`: dynamic acceleration.
        :param pulumi.Input[str] area: Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas acceleration and global acceleration.
        :param pulumi.Input['DomainAuthenticationArgs'] authentication: Specify timestamp hotlink protection configuration, NOTE: only one type can choose for the sub elements.
        :param pulumi.Input['DomainAwsPrivateAccessArgs'] aws_private_access: Access authentication for S3 origin.
        :param pulumi.Input['DomainBandWidthAlertArgs'] band_width_alert: Bandwidth cap configuration.
        :param pulumi.Input['DomainCacheKeyArgs'] cache_key: Cache key configuration (Ignore Query String configuration). NOTE: All of `full_url_cache` default value is `on`.
        :param pulumi.Input['DomainCompressionArgs'] compression: Smart compression configurations.
        :param pulumi.Input['DomainDownstreamCappingArgs'] downstream_capping: Downstream capping configuration.
        :param pulumi.Input['DomainErrorPageArgs'] error_page: Error page configurations.
        :param pulumi.Input[bool] explicit_using_dry_run: Used for validate only by store arguments to request json string as expected, WARNING: if set to `true`, NO Cloud Api will be invoked but store as local data, do not use this argument unless you really know what you are doing.
        :param pulumi.Input[str] follow_redirect_switch: 301/302 redirect following switch, available values: `on`, `off` (default).
        :param pulumi.Input[bool] full_url_cache: Use `cache_key` > `full_url_cache` instead. Whether to enable full-path cache. Default value is `true`.
        :param pulumi.Input['DomainHttpsConfigArgs'] https_config: HTTPS acceleration configuration. It's a list and consist of at most one item.
        :param pulumi.Input['DomainHwPrivateAccessArgs'] hw_private_access: Access authentication for OBS origin.
        :param pulumi.Input['DomainIpFilterArgs'] ip_filter: Specify Ip filter configurations.
        :param pulumi.Input['DomainIpFreqLimitArgs'] ip_freq_limit: Specify Ip frequency limit configurations.
        :param pulumi.Input[str] ipv6_access_switch: ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default value is `off`.
        :param pulumi.Input['DomainMaxAgeArgs'] max_age: Browser cache configuration. (This feature is in beta and not generally available yet).
        :param pulumi.Input[str] offline_cache_switch: Offline cache switch, available values: `on`, `off` (default).
        :param pulumi.Input['DomainOriginPullOptimizationArgs'] origin_pull_optimization: Cross-border linkage optimization configuration. (This feature is in beta and not generally available yet).
        :param pulumi.Input['DomainOriginPullTimeoutArgs'] origin_pull_timeout: Cross-border linkage optimization configuration.
        :param pulumi.Input['DomainOssPrivateAccessArgs'] oss_private_access: Access authentication for OSS origin.
        :param pulumi.Input['DomainOthersPrivateAccessArgs'] others_private_access: Object storage back-to-source authentication of other vendors.
        :param pulumi.Input[Sequence[pulumi.Input['DomainPostMaxSizeArgs']]] post_max_sizes: Maximum post size configuration.
        :param pulumi.Input[int] project_id: The project CDN belongs to, default to 0.
        :param pulumi.Input['DomainQnPrivateAccessArgs'] qn_private_access: Access authentication for OBS origin.
        :param pulumi.Input[str] quic_switch: QUIC switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] range_origin_switch: Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        :param pulumi.Input['DomainRefererArgs'] referer: Referer configuration.
        :param pulumi.Input['DomainRequestHeaderArgs'] request_header: Request header configuration. It's a list and consist of at most one item.
        :param pulumi.Input['DomainResponseHeaderArgs'] response_header: Response header configurations.
        :param pulumi.Input[str] response_header_cache_switch: Response header cache switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input['DomainRuleCachArgs']]] rule_caches: Advanced path cache configuration.
        :param pulumi.Input[str] seo_switch: SEO switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] specific_config_mainland: Specific configuration for mainland, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#MainlandConfig) for more details.
        :param pulumi.Input[str] specific_config_overseas: Specific configuration for oversea, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#OverseaConfig) for more details.
        :param pulumi.Input['DomainStatusCodeCacheArgs'] status_code_cache: Status code cache configurations.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of cdn domain.
        :param pulumi.Input[str] video_seek_switch: Video seek switch, available values: `on`, `off` (default).
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "service_type", service_type)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if aws_private_access is not None:
            pulumi.set(__self__, "aws_private_access", aws_private_access)
        if band_width_alert is not None:
            pulumi.set(__self__, "band_width_alert", band_width_alert)
        if cache_key is not None:
            pulumi.set(__self__, "cache_key", cache_key)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if downstream_capping is not None:
            pulumi.set(__self__, "downstream_capping", downstream_capping)
        if error_page is not None:
            pulumi.set(__self__, "error_page", error_page)
        if explicit_using_dry_run is not None:
            pulumi.set(__self__, "explicit_using_dry_run", explicit_using_dry_run)
        if follow_redirect_switch is not None:
            pulumi.set(__self__, "follow_redirect_switch", follow_redirect_switch)
        if full_url_cache is not None:
            warnings.warn("""Use `cache_key` -> `full_url_cache` instead.""", DeprecationWarning)
            pulumi.log.warn("""full_url_cache is deprecated: Use `cache_key` -> `full_url_cache` instead.""")
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if https_config is not None:
            pulumi.set(__self__, "https_config", https_config)
        if hw_private_access is not None:
            pulumi.set(__self__, "hw_private_access", hw_private_access)
        if ip_filter is not None:
            pulumi.set(__self__, "ip_filter", ip_filter)
        if ip_freq_limit is not None:
            pulumi.set(__self__, "ip_freq_limit", ip_freq_limit)
        if ipv6_access_switch is not None:
            pulumi.set(__self__, "ipv6_access_switch", ipv6_access_switch)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if offline_cache_switch is not None:
            pulumi.set(__self__, "offline_cache_switch", offline_cache_switch)
        if origin_pull_optimization is not None:
            pulumi.set(__self__, "origin_pull_optimization", origin_pull_optimization)
        if origin_pull_timeout is not None:
            pulumi.set(__self__, "origin_pull_timeout", origin_pull_timeout)
        if oss_private_access is not None:
            pulumi.set(__self__, "oss_private_access", oss_private_access)
        if others_private_access is not None:
            pulumi.set(__self__, "others_private_access", others_private_access)
        if post_max_sizes is not None:
            pulumi.set(__self__, "post_max_sizes", post_max_sizes)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if qn_private_access is not None:
            pulumi.set(__self__, "qn_private_access", qn_private_access)
        if quic_switch is not None:
            pulumi.set(__self__, "quic_switch", quic_switch)
        if range_origin_switch is not None:
            pulumi.set(__self__, "range_origin_switch", range_origin_switch)
        if referer is not None:
            pulumi.set(__self__, "referer", referer)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if response_header is not None:
            pulumi.set(__self__, "response_header", response_header)
        if response_header_cache_switch is not None:
            pulumi.set(__self__, "response_header_cache_switch", response_header_cache_switch)
        if rule_caches is not None:
            pulumi.set(__self__, "rule_caches", rule_caches)
        if seo_switch is not None:
            pulumi.set(__self__, "seo_switch", seo_switch)
        if specific_config_mainland is not None:
            pulumi.set(__self__, "specific_config_mainland", specific_config_mainland)
        if specific_config_overseas is not None:
            pulumi.set(__self__, "specific_config_overseas", specific_config_overseas)
        if status_code_cache is not None:
            pulumi.set(__self__, "status_code_cache", status_code_cache)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if video_seek_switch is not None:
            pulumi.set(__self__, "video_seek_switch", video_seek_switch)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Name of the acceleration domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Input['DomainOriginArgs']:
        """
        Origin server configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: pulumi.Input['DomainOriginArgs']):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Input[str]:
        """
        Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming media VOD acceleration, `hybrid`: hybrid acceleration, `dynamic`: dynamic acceleration.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas acceleration and global acceleration.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['DomainAuthenticationArgs']]:
        """
        Specify timestamp hotlink protection configuration, NOTE: only one type can choose for the sub elements.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['DomainAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="awsPrivateAccess")
    def aws_private_access(self) -> Optional[pulumi.Input['DomainAwsPrivateAccessArgs']]:
        """
        Access authentication for S3 origin.
        """
        return pulumi.get(self, "aws_private_access")

    @aws_private_access.setter
    def aws_private_access(self, value: Optional[pulumi.Input['DomainAwsPrivateAccessArgs']]):
        pulumi.set(self, "aws_private_access", value)

    @property
    @pulumi.getter(name="bandWidthAlert")
    def band_width_alert(self) -> Optional[pulumi.Input['DomainBandWidthAlertArgs']]:
        """
        Bandwidth cap configuration.
        """
        return pulumi.get(self, "band_width_alert")

    @band_width_alert.setter
    def band_width_alert(self, value: Optional[pulumi.Input['DomainBandWidthAlertArgs']]):
        pulumi.set(self, "band_width_alert", value)

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> Optional[pulumi.Input['DomainCacheKeyArgs']]:
        """
        Cache key configuration (Ignore Query String configuration). NOTE: All of `full_url_cache` default value is `on`.
        """
        return pulumi.get(self, "cache_key")

    @cache_key.setter
    def cache_key(self, value: Optional[pulumi.Input['DomainCacheKeyArgs']]):
        pulumi.set(self, "cache_key", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DomainCompressionArgs']]:
        """
        Smart compression configurations.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DomainCompressionArgs']]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="downstreamCapping")
    def downstream_capping(self) -> Optional[pulumi.Input['DomainDownstreamCappingArgs']]:
        """
        Downstream capping configuration.
        """
        return pulumi.get(self, "downstream_capping")

    @downstream_capping.setter
    def downstream_capping(self, value: Optional[pulumi.Input['DomainDownstreamCappingArgs']]):
        pulumi.set(self, "downstream_capping", value)

    @property
    @pulumi.getter(name="errorPage")
    def error_page(self) -> Optional[pulumi.Input['DomainErrorPageArgs']]:
        """
        Error page configurations.
        """
        return pulumi.get(self, "error_page")

    @error_page.setter
    def error_page(self, value: Optional[pulumi.Input['DomainErrorPageArgs']]):
        pulumi.set(self, "error_page", value)

    @property
    @pulumi.getter(name="explicitUsingDryRun")
    def explicit_using_dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Used for validate only by store arguments to request json string as expected, WARNING: if set to `true`, NO Cloud Api will be invoked but store as local data, do not use this argument unless you really know what you are doing.
        """
        return pulumi.get(self, "explicit_using_dry_run")

    @explicit_using_dry_run.setter
    def explicit_using_dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "explicit_using_dry_run", value)

    @property
    @pulumi.getter(name="followRedirectSwitch")
    def follow_redirect_switch(self) -> Optional[pulumi.Input[str]]:
        """
        301/302 redirect following switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "follow_redirect_switch")

    @follow_redirect_switch.setter
    def follow_redirect_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "follow_redirect_switch", value)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[pulumi.Input[bool]]:
        """
        Use `cache_key` > `full_url_cache` instead. Whether to enable full-path cache. Default value is `true`.
        """
        warnings.warn("""Use `cache_key` -> `full_url_cache` instead.""", DeprecationWarning)
        pulumi.log.warn("""full_url_cache is deprecated: Use `cache_key` -> `full_url_cache` instead.""")

        return pulumi.get(self, "full_url_cache")

    @full_url_cache.setter
    def full_url_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "full_url_cache", value)

    @property
    @pulumi.getter(name="httpsConfig")
    def https_config(self) -> Optional[pulumi.Input['DomainHttpsConfigArgs']]:
        """
        HTTPS acceleration configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "https_config")

    @https_config.setter
    def https_config(self, value: Optional[pulumi.Input['DomainHttpsConfigArgs']]):
        pulumi.set(self, "https_config", value)

    @property
    @pulumi.getter(name="hwPrivateAccess")
    def hw_private_access(self) -> Optional[pulumi.Input['DomainHwPrivateAccessArgs']]:
        """
        Access authentication for OBS origin.
        """
        return pulumi.get(self, "hw_private_access")

    @hw_private_access.setter
    def hw_private_access(self, value: Optional[pulumi.Input['DomainHwPrivateAccessArgs']]):
        pulumi.set(self, "hw_private_access", value)

    @property
    @pulumi.getter(name="ipFilter")
    def ip_filter(self) -> Optional[pulumi.Input['DomainIpFilterArgs']]:
        """
        Specify Ip filter configurations.
        """
        return pulumi.get(self, "ip_filter")

    @ip_filter.setter
    def ip_filter(self, value: Optional[pulumi.Input['DomainIpFilterArgs']]):
        pulumi.set(self, "ip_filter", value)

    @property
    @pulumi.getter(name="ipFreqLimit")
    def ip_freq_limit(self) -> Optional[pulumi.Input['DomainIpFreqLimitArgs']]:
        """
        Specify Ip frequency limit configurations.
        """
        return pulumi.get(self, "ip_freq_limit")

    @ip_freq_limit.setter
    def ip_freq_limit(self, value: Optional[pulumi.Input['DomainIpFreqLimitArgs']]):
        pulumi.set(self, "ip_freq_limit", value)

    @property
    @pulumi.getter(name="ipv6AccessSwitch")
    def ipv6_access_switch(self) -> Optional[pulumi.Input[str]]:
        """
        ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "ipv6_access_switch")

    @ipv6_access_switch.setter
    def ipv6_access_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_access_switch", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input['DomainMaxAgeArgs']]:
        """
        Browser cache configuration. (This feature is in beta and not generally available yet).
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input['DomainMaxAgeArgs']]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="offlineCacheSwitch")
    def offline_cache_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Offline cache switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "offline_cache_switch")

    @offline_cache_switch.setter
    def offline_cache_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offline_cache_switch", value)

    @property
    @pulumi.getter(name="originPullOptimization")
    def origin_pull_optimization(self) -> Optional[pulumi.Input['DomainOriginPullOptimizationArgs']]:
        """
        Cross-border linkage optimization configuration. (This feature is in beta and not generally available yet).
        """
        return pulumi.get(self, "origin_pull_optimization")

    @origin_pull_optimization.setter
    def origin_pull_optimization(self, value: Optional[pulumi.Input['DomainOriginPullOptimizationArgs']]):
        pulumi.set(self, "origin_pull_optimization", value)

    @property
    @pulumi.getter(name="originPullTimeout")
    def origin_pull_timeout(self) -> Optional[pulumi.Input['DomainOriginPullTimeoutArgs']]:
        """
        Cross-border linkage optimization configuration.
        """
        return pulumi.get(self, "origin_pull_timeout")

    @origin_pull_timeout.setter
    def origin_pull_timeout(self, value: Optional[pulumi.Input['DomainOriginPullTimeoutArgs']]):
        pulumi.set(self, "origin_pull_timeout", value)

    @property
    @pulumi.getter(name="ossPrivateAccess")
    def oss_private_access(self) -> Optional[pulumi.Input['DomainOssPrivateAccessArgs']]:
        """
        Access authentication for OSS origin.
        """
        return pulumi.get(self, "oss_private_access")

    @oss_private_access.setter
    def oss_private_access(self, value: Optional[pulumi.Input['DomainOssPrivateAccessArgs']]):
        pulumi.set(self, "oss_private_access", value)

    @property
    @pulumi.getter(name="othersPrivateAccess")
    def others_private_access(self) -> Optional[pulumi.Input['DomainOthersPrivateAccessArgs']]:
        """
        Object storage back-to-source authentication of other vendors.
        """
        return pulumi.get(self, "others_private_access")

    @others_private_access.setter
    def others_private_access(self, value: Optional[pulumi.Input['DomainOthersPrivateAccessArgs']]):
        pulumi.set(self, "others_private_access", value)

    @property
    @pulumi.getter(name="postMaxSizes")
    def post_max_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainPostMaxSizeArgs']]]]:
        """
        Maximum post size configuration.
        """
        return pulumi.get(self, "post_max_sizes")

    @post_max_sizes.setter
    def post_max_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainPostMaxSizeArgs']]]]):
        pulumi.set(self, "post_max_sizes", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        The project CDN belongs to, default to 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="qnPrivateAccess")
    def qn_private_access(self) -> Optional[pulumi.Input['DomainQnPrivateAccessArgs']]:
        """
        Access authentication for OBS origin.
        """
        return pulumi.get(self, "qn_private_access")

    @qn_private_access.setter
    def qn_private_access(self, value: Optional[pulumi.Input['DomainQnPrivateAccessArgs']]):
        pulumi.set(self, "qn_private_access", value)

    @property
    @pulumi.getter(name="quicSwitch")
    def quic_switch(self) -> Optional[pulumi.Input[str]]:
        """
        QUIC switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "quic_switch")

    @quic_switch.setter
    def quic_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quic_switch", value)

    @property
    @pulumi.getter(name="rangeOriginSwitch")
    def range_origin_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        """
        return pulumi.get(self, "range_origin_switch")

    @range_origin_switch.setter
    def range_origin_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range_origin_switch", value)

    @property
    @pulumi.getter
    def referer(self) -> Optional[pulumi.Input['DomainRefererArgs']]:
        """
        Referer configuration.
        """
        return pulumi.get(self, "referer")

    @referer.setter
    def referer(self, value: Optional[pulumi.Input['DomainRefererArgs']]):
        pulumi.set(self, "referer", value)

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional[pulumi.Input['DomainRequestHeaderArgs']]:
        """
        Request header configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "request_header")

    @request_header.setter
    def request_header(self, value: Optional[pulumi.Input['DomainRequestHeaderArgs']]):
        pulumi.set(self, "request_header", value)

    @property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> Optional[pulumi.Input['DomainResponseHeaderArgs']]:
        """
        Response header configurations.
        """
        return pulumi.get(self, "response_header")

    @response_header.setter
    def response_header(self, value: Optional[pulumi.Input['DomainResponseHeaderArgs']]):
        pulumi.set(self, "response_header", value)

    @property
    @pulumi.getter(name="responseHeaderCacheSwitch")
    def response_header_cache_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Response header cache switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "response_header_cache_switch")

    @response_header_cache_switch.setter
    def response_header_cache_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_header_cache_switch", value)

    @property
    @pulumi.getter(name="ruleCaches")
    def rule_caches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainRuleCachArgs']]]]:
        """
        Advanced path cache configuration.
        """
        return pulumi.get(self, "rule_caches")

    @rule_caches.setter
    def rule_caches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainRuleCachArgs']]]]):
        pulumi.set(self, "rule_caches", value)

    @property
    @pulumi.getter(name="seoSwitch")
    def seo_switch(self) -> Optional[pulumi.Input[str]]:
        """
        SEO switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "seo_switch")

    @seo_switch.setter
    def seo_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seo_switch", value)

    @property
    @pulumi.getter(name="specificConfigMainland")
    def specific_config_mainland(self) -> Optional[pulumi.Input[str]]:
        """
        Specific configuration for mainland, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#MainlandConfig) for more details.
        """
        return pulumi.get(self, "specific_config_mainland")

    @specific_config_mainland.setter
    def specific_config_mainland(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "specific_config_mainland", value)

    @property
    @pulumi.getter(name="specificConfigOverseas")
    def specific_config_overseas(self) -> Optional[pulumi.Input[str]]:
        """
        Specific configuration for oversea, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#OverseaConfig) for more details.
        """
        return pulumi.get(self, "specific_config_overseas")

    @specific_config_overseas.setter
    def specific_config_overseas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "specific_config_overseas", value)

    @property
    @pulumi.getter(name="statusCodeCache")
    def status_code_cache(self) -> Optional[pulumi.Input['DomainStatusCodeCacheArgs']]:
        """
        Status code cache configurations.
        """
        return pulumi.get(self, "status_code_cache")

    @status_code_cache.setter
    def status_code_cache(self, value: Optional[pulumi.Input['DomainStatusCodeCacheArgs']]):
        pulumi.set(self, "status_code_cache", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of cdn domain.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="videoSeekSwitch")
    def video_seek_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Video seek switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "video_seek_switch")

    @video_seek_switch.setter
    def video_seek_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_seek_switch", value)


@pulumi.input_type
class _DomainState:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input['DomainAuthenticationArgs']] = None,
                 aws_private_access: Optional[pulumi.Input['DomainAwsPrivateAccessArgs']] = None,
                 band_width_alert: Optional[pulumi.Input['DomainBandWidthAlertArgs']] = None,
                 cache_key: Optional[pulumi.Input['DomainCacheKeyArgs']] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 compression: Optional[pulumi.Input['DomainCompressionArgs']] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 downstream_capping: Optional[pulumi.Input['DomainDownstreamCappingArgs']] = None,
                 dry_run_create_result: Optional[pulumi.Input[str]] = None,
                 dry_run_update_result: Optional[pulumi.Input[str]] = None,
                 error_page: Optional[pulumi.Input['DomainErrorPageArgs']] = None,
                 explicit_using_dry_run: Optional[pulumi.Input[bool]] = None,
                 follow_redirect_switch: Optional[pulumi.Input[str]] = None,
                 full_url_cache: Optional[pulumi.Input[bool]] = None,
                 https_config: Optional[pulumi.Input['DomainHttpsConfigArgs']] = None,
                 hw_private_access: Optional[pulumi.Input['DomainHwPrivateAccessArgs']] = None,
                 ip_filter: Optional[pulumi.Input['DomainIpFilterArgs']] = None,
                 ip_freq_limit: Optional[pulumi.Input['DomainIpFreqLimitArgs']] = None,
                 ipv6_access_switch: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input['DomainMaxAgeArgs']] = None,
                 offline_cache_switch: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input['DomainOriginArgs']] = None,
                 origin_pull_optimization: Optional[pulumi.Input['DomainOriginPullOptimizationArgs']] = None,
                 origin_pull_timeout: Optional[pulumi.Input['DomainOriginPullTimeoutArgs']] = None,
                 oss_private_access: Optional[pulumi.Input['DomainOssPrivateAccessArgs']] = None,
                 others_private_access: Optional[pulumi.Input['DomainOthersPrivateAccessArgs']] = None,
                 post_max_sizes: Optional[pulumi.Input[Sequence[pulumi.Input['DomainPostMaxSizeArgs']]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 qn_private_access: Optional[pulumi.Input['DomainQnPrivateAccessArgs']] = None,
                 quic_switch: Optional[pulumi.Input[str]] = None,
                 range_origin_switch: Optional[pulumi.Input[str]] = None,
                 referer: Optional[pulumi.Input['DomainRefererArgs']] = None,
                 request_header: Optional[pulumi.Input['DomainRequestHeaderArgs']] = None,
                 response_header: Optional[pulumi.Input['DomainResponseHeaderArgs']] = None,
                 response_header_cache_switch: Optional[pulumi.Input[str]] = None,
                 rule_caches: Optional[pulumi.Input[Sequence[pulumi.Input['DomainRuleCachArgs']]]] = None,
                 seo_switch: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 specific_config_mainland: Optional[pulumi.Input[str]] = None,
                 specific_config_overseas: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_code_cache: Optional[pulumi.Input['DomainStatusCodeCacheArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 video_seek_switch: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Domain resources.
        :param pulumi.Input[str] area: Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas acceleration and global acceleration.
        :param pulumi.Input['DomainAuthenticationArgs'] authentication: Specify timestamp hotlink protection configuration, NOTE: only one type can choose for the sub elements.
        :param pulumi.Input['DomainAwsPrivateAccessArgs'] aws_private_access: Access authentication for S3 origin.
        :param pulumi.Input['DomainBandWidthAlertArgs'] band_width_alert: Bandwidth cap configuration.
        :param pulumi.Input['DomainCacheKeyArgs'] cache_key: Cache key configuration (Ignore Query String configuration). NOTE: All of `full_url_cache` default value is `on`.
        :param pulumi.Input[str] cname: CNAME address of domain name.
        :param pulumi.Input['DomainCompressionArgs'] compression: Smart compression configurations.
        :param pulumi.Input[str] create_time: Creation time of domain name.
        :param pulumi.Input[str] domain: Name of the acceleration domain.
        :param pulumi.Input['DomainDownstreamCappingArgs'] downstream_capping: Downstream capping configuration.
        :param pulumi.Input[str] dry_run_create_result: Used for store `dry_run` request json.
        :param pulumi.Input[str] dry_run_update_result: Used for store `dry_run` update request json.
        :param pulumi.Input['DomainErrorPageArgs'] error_page: Error page configurations.
        :param pulumi.Input[bool] explicit_using_dry_run: Used for validate only by store arguments to request json string as expected, WARNING: if set to `true`, NO Cloud Api will be invoked but store as local data, do not use this argument unless you really know what you are doing.
        :param pulumi.Input[str] follow_redirect_switch: 301/302 redirect following switch, available values: `on`, `off` (default).
        :param pulumi.Input[bool] full_url_cache: Use `cache_key` > `full_url_cache` instead. Whether to enable full-path cache. Default value is `true`.
        :param pulumi.Input['DomainHttpsConfigArgs'] https_config: HTTPS acceleration configuration. It's a list and consist of at most one item.
        :param pulumi.Input['DomainHwPrivateAccessArgs'] hw_private_access: Access authentication for OBS origin.
        :param pulumi.Input['DomainIpFilterArgs'] ip_filter: Specify Ip filter configurations.
        :param pulumi.Input['DomainIpFreqLimitArgs'] ip_freq_limit: Specify Ip frequency limit configurations.
        :param pulumi.Input[str] ipv6_access_switch: ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default value is `off`.
        :param pulumi.Input['DomainMaxAgeArgs'] max_age: Browser cache configuration. (This feature is in beta and not generally available yet).
        :param pulumi.Input[str] offline_cache_switch: Offline cache switch, available values: `on`, `off` (default).
        :param pulumi.Input['DomainOriginArgs'] origin: Origin server configuration. It's a list and consist of at most one item.
        :param pulumi.Input['DomainOriginPullOptimizationArgs'] origin_pull_optimization: Cross-border linkage optimization configuration. (This feature is in beta and not generally available yet).
        :param pulumi.Input['DomainOriginPullTimeoutArgs'] origin_pull_timeout: Cross-border linkage optimization configuration.
        :param pulumi.Input['DomainOssPrivateAccessArgs'] oss_private_access: Access authentication for OSS origin.
        :param pulumi.Input['DomainOthersPrivateAccessArgs'] others_private_access: Object storage back-to-source authentication of other vendors.
        :param pulumi.Input[Sequence[pulumi.Input['DomainPostMaxSizeArgs']]] post_max_sizes: Maximum post size configuration.
        :param pulumi.Input[int] project_id: The project CDN belongs to, default to 0.
        :param pulumi.Input['DomainQnPrivateAccessArgs'] qn_private_access: Access authentication for OBS origin.
        :param pulumi.Input[str] quic_switch: QUIC switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] range_origin_switch: Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        :param pulumi.Input['DomainRefererArgs'] referer: Referer configuration.
        :param pulumi.Input['DomainRequestHeaderArgs'] request_header: Request header configuration. It's a list and consist of at most one item.
        :param pulumi.Input['DomainResponseHeaderArgs'] response_header: Response header configurations.
        :param pulumi.Input[str] response_header_cache_switch: Response header cache switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input['DomainRuleCachArgs']]] rule_caches: Advanced path cache configuration.
        :param pulumi.Input[str] seo_switch: SEO switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] service_type: Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming media VOD acceleration, `hybrid`: hybrid acceleration, `dynamic`: dynamic acceleration.
        :param pulumi.Input[str] specific_config_mainland: Specific configuration for mainland, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#MainlandConfig) for more details.
        :param pulumi.Input[str] specific_config_overseas: Specific configuration for oversea, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#OverseaConfig) for more details.
        :param pulumi.Input[str] status: Acceleration service status.
        :param pulumi.Input['DomainStatusCodeCacheArgs'] status_code_cache: Status code cache configurations.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of cdn domain.
        :param pulumi.Input[str] video_seek_switch: Video seek switch, available values: `on`, `off` (default).
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if aws_private_access is not None:
            pulumi.set(__self__, "aws_private_access", aws_private_access)
        if band_width_alert is not None:
            pulumi.set(__self__, "band_width_alert", band_width_alert)
        if cache_key is not None:
            pulumi.set(__self__, "cache_key", cache_key)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if downstream_capping is not None:
            pulumi.set(__self__, "downstream_capping", downstream_capping)
        if dry_run_create_result is not None:
            pulumi.set(__self__, "dry_run_create_result", dry_run_create_result)
        if dry_run_update_result is not None:
            pulumi.set(__self__, "dry_run_update_result", dry_run_update_result)
        if error_page is not None:
            pulumi.set(__self__, "error_page", error_page)
        if explicit_using_dry_run is not None:
            pulumi.set(__self__, "explicit_using_dry_run", explicit_using_dry_run)
        if follow_redirect_switch is not None:
            pulumi.set(__self__, "follow_redirect_switch", follow_redirect_switch)
        if full_url_cache is not None:
            warnings.warn("""Use `cache_key` -> `full_url_cache` instead.""", DeprecationWarning)
            pulumi.log.warn("""full_url_cache is deprecated: Use `cache_key` -> `full_url_cache` instead.""")
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if https_config is not None:
            pulumi.set(__self__, "https_config", https_config)
        if hw_private_access is not None:
            pulumi.set(__self__, "hw_private_access", hw_private_access)
        if ip_filter is not None:
            pulumi.set(__self__, "ip_filter", ip_filter)
        if ip_freq_limit is not None:
            pulumi.set(__self__, "ip_freq_limit", ip_freq_limit)
        if ipv6_access_switch is not None:
            pulumi.set(__self__, "ipv6_access_switch", ipv6_access_switch)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if offline_cache_switch is not None:
            pulumi.set(__self__, "offline_cache_switch", offline_cache_switch)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_pull_optimization is not None:
            pulumi.set(__self__, "origin_pull_optimization", origin_pull_optimization)
        if origin_pull_timeout is not None:
            pulumi.set(__self__, "origin_pull_timeout", origin_pull_timeout)
        if oss_private_access is not None:
            pulumi.set(__self__, "oss_private_access", oss_private_access)
        if others_private_access is not None:
            pulumi.set(__self__, "others_private_access", others_private_access)
        if post_max_sizes is not None:
            pulumi.set(__self__, "post_max_sizes", post_max_sizes)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if qn_private_access is not None:
            pulumi.set(__self__, "qn_private_access", qn_private_access)
        if quic_switch is not None:
            pulumi.set(__self__, "quic_switch", quic_switch)
        if range_origin_switch is not None:
            pulumi.set(__self__, "range_origin_switch", range_origin_switch)
        if referer is not None:
            pulumi.set(__self__, "referer", referer)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if response_header is not None:
            pulumi.set(__self__, "response_header", response_header)
        if response_header_cache_switch is not None:
            pulumi.set(__self__, "response_header_cache_switch", response_header_cache_switch)
        if rule_caches is not None:
            pulumi.set(__self__, "rule_caches", rule_caches)
        if seo_switch is not None:
            pulumi.set(__self__, "seo_switch", seo_switch)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if specific_config_mainland is not None:
            pulumi.set(__self__, "specific_config_mainland", specific_config_mainland)
        if specific_config_overseas is not None:
            pulumi.set(__self__, "specific_config_overseas", specific_config_overseas)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_code_cache is not None:
            pulumi.set(__self__, "status_code_cache", status_code_cache)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if video_seek_switch is not None:
            pulumi.set(__self__, "video_seek_switch", video_seek_switch)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas acceleration and global acceleration.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['DomainAuthenticationArgs']]:
        """
        Specify timestamp hotlink protection configuration, NOTE: only one type can choose for the sub elements.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['DomainAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="awsPrivateAccess")
    def aws_private_access(self) -> Optional[pulumi.Input['DomainAwsPrivateAccessArgs']]:
        """
        Access authentication for S3 origin.
        """
        return pulumi.get(self, "aws_private_access")

    @aws_private_access.setter
    def aws_private_access(self, value: Optional[pulumi.Input['DomainAwsPrivateAccessArgs']]):
        pulumi.set(self, "aws_private_access", value)

    @property
    @pulumi.getter(name="bandWidthAlert")
    def band_width_alert(self) -> Optional[pulumi.Input['DomainBandWidthAlertArgs']]:
        """
        Bandwidth cap configuration.
        """
        return pulumi.get(self, "band_width_alert")

    @band_width_alert.setter
    def band_width_alert(self, value: Optional[pulumi.Input['DomainBandWidthAlertArgs']]):
        pulumi.set(self, "band_width_alert", value)

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> Optional[pulumi.Input['DomainCacheKeyArgs']]:
        """
        Cache key configuration (Ignore Query String configuration). NOTE: All of `full_url_cache` default value is `on`.
        """
        return pulumi.get(self, "cache_key")

    @cache_key.setter
    def cache_key(self, value: Optional[pulumi.Input['DomainCacheKeyArgs']]):
        pulumi.set(self, "cache_key", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        """
        CNAME address of domain name.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DomainCompressionArgs']]:
        """
        Smart compression configurations.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DomainCompressionArgs']]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of domain name.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the acceleration domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="downstreamCapping")
    def downstream_capping(self) -> Optional[pulumi.Input['DomainDownstreamCappingArgs']]:
        """
        Downstream capping configuration.
        """
        return pulumi.get(self, "downstream_capping")

    @downstream_capping.setter
    def downstream_capping(self, value: Optional[pulumi.Input['DomainDownstreamCappingArgs']]):
        pulumi.set(self, "downstream_capping", value)

    @property
    @pulumi.getter(name="dryRunCreateResult")
    def dry_run_create_result(self) -> Optional[pulumi.Input[str]]:
        """
        Used for store `dry_run` request json.
        """
        return pulumi.get(self, "dry_run_create_result")

    @dry_run_create_result.setter
    def dry_run_create_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dry_run_create_result", value)

    @property
    @pulumi.getter(name="dryRunUpdateResult")
    def dry_run_update_result(self) -> Optional[pulumi.Input[str]]:
        """
        Used for store `dry_run` update request json.
        """
        return pulumi.get(self, "dry_run_update_result")

    @dry_run_update_result.setter
    def dry_run_update_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dry_run_update_result", value)

    @property
    @pulumi.getter(name="errorPage")
    def error_page(self) -> Optional[pulumi.Input['DomainErrorPageArgs']]:
        """
        Error page configurations.
        """
        return pulumi.get(self, "error_page")

    @error_page.setter
    def error_page(self, value: Optional[pulumi.Input['DomainErrorPageArgs']]):
        pulumi.set(self, "error_page", value)

    @property
    @pulumi.getter(name="explicitUsingDryRun")
    def explicit_using_dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Used for validate only by store arguments to request json string as expected, WARNING: if set to `true`, NO Cloud Api will be invoked but store as local data, do not use this argument unless you really know what you are doing.
        """
        return pulumi.get(self, "explicit_using_dry_run")

    @explicit_using_dry_run.setter
    def explicit_using_dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "explicit_using_dry_run", value)

    @property
    @pulumi.getter(name="followRedirectSwitch")
    def follow_redirect_switch(self) -> Optional[pulumi.Input[str]]:
        """
        301/302 redirect following switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "follow_redirect_switch")

    @follow_redirect_switch.setter
    def follow_redirect_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "follow_redirect_switch", value)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[pulumi.Input[bool]]:
        """
        Use `cache_key` > `full_url_cache` instead. Whether to enable full-path cache. Default value is `true`.
        """
        warnings.warn("""Use `cache_key` -> `full_url_cache` instead.""", DeprecationWarning)
        pulumi.log.warn("""full_url_cache is deprecated: Use `cache_key` -> `full_url_cache` instead.""")

        return pulumi.get(self, "full_url_cache")

    @full_url_cache.setter
    def full_url_cache(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "full_url_cache", value)

    @property
    @pulumi.getter(name="httpsConfig")
    def https_config(self) -> Optional[pulumi.Input['DomainHttpsConfigArgs']]:
        """
        HTTPS acceleration configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "https_config")

    @https_config.setter
    def https_config(self, value: Optional[pulumi.Input['DomainHttpsConfigArgs']]):
        pulumi.set(self, "https_config", value)

    @property
    @pulumi.getter(name="hwPrivateAccess")
    def hw_private_access(self) -> Optional[pulumi.Input['DomainHwPrivateAccessArgs']]:
        """
        Access authentication for OBS origin.
        """
        return pulumi.get(self, "hw_private_access")

    @hw_private_access.setter
    def hw_private_access(self, value: Optional[pulumi.Input['DomainHwPrivateAccessArgs']]):
        pulumi.set(self, "hw_private_access", value)

    @property
    @pulumi.getter(name="ipFilter")
    def ip_filter(self) -> Optional[pulumi.Input['DomainIpFilterArgs']]:
        """
        Specify Ip filter configurations.
        """
        return pulumi.get(self, "ip_filter")

    @ip_filter.setter
    def ip_filter(self, value: Optional[pulumi.Input['DomainIpFilterArgs']]):
        pulumi.set(self, "ip_filter", value)

    @property
    @pulumi.getter(name="ipFreqLimit")
    def ip_freq_limit(self) -> Optional[pulumi.Input['DomainIpFreqLimitArgs']]:
        """
        Specify Ip frequency limit configurations.
        """
        return pulumi.get(self, "ip_freq_limit")

    @ip_freq_limit.setter
    def ip_freq_limit(self, value: Optional[pulumi.Input['DomainIpFreqLimitArgs']]):
        pulumi.set(self, "ip_freq_limit", value)

    @property
    @pulumi.getter(name="ipv6AccessSwitch")
    def ipv6_access_switch(self) -> Optional[pulumi.Input[str]]:
        """
        ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "ipv6_access_switch")

    @ipv6_access_switch.setter
    def ipv6_access_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_access_switch", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input['DomainMaxAgeArgs']]:
        """
        Browser cache configuration. (This feature is in beta and not generally available yet).
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input['DomainMaxAgeArgs']]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="offlineCacheSwitch")
    def offline_cache_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Offline cache switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "offline_cache_switch")

    @offline_cache_switch.setter
    def offline_cache_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offline_cache_switch", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input['DomainOriginArgs']]:
        """
        Origin server configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input['DomainOriginArgs']]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="originPullOptimization")
    def origin_pull_optimization(self) -> Optional[pulumi.Input['DomainOriginPullOptimizationArgs']]:
        """
        Cross-border linkage optimization configuration. (This feature is in beta and not generally available yet).
        """
        return pulumi.get(self, "origin_pull_optimization")

    @origin_pull_optimization.setter
    def origin_pull_optimization(self, value: Optional[pulumi.Input['DomainOriginPullOptimizationArgs']]):
        pulumi.set(self, "origin_pull_optimization", value)

    @property
    @pulumi.getter(name="originPullTimeout")
    def origin_pull_timeout(self) -> Optional[pulumi.Input['DomainOriginPullTimeoutArgs']]:
        """
        Cross-border linkage optimization configuration.
        """
        return pulumi.get(self, "origin_pull_timeout")

    @origin_pull_timeout.setter
    def origin_pull_timeout(self, value: Optional[pulumi.Input['DomainOriginPullTimeoutArgs']]):
        pulumi.set(self, "origin_pull_timeout", value)

    @property
    @pulumi.getter(name="ossPrivateAccess")
    def oss_private_access(self) -> Optional[pulumi.Input['DomainOssPrivateAccessArgs']]:
        """
        Access authentication for OSS origin.
        """
        return pulumi.get(self, "oss_private_access")

    @oss_private_access.setter
    def oss_private_access(self, value: Optional[pulumi.Input['DomainOssPrivateAccessArgs']]):
        pulumi.set(self, "oss_private_access", value)

    @property
    @pulumi.getter(name="othersPrivateAccess")
    def others_private_access(self) -> Optional[pulumi.Input['DomainOthersPrivateAccessArgs']]:
        """
        Object storage back-to-source authentication of other vendors.
        """
        return pulumi.get(self, "others_private_access")

    @others_private_access.setter
    def others_private_access(self, value: Optional[pulumi.Input['DomainOthersPrivateAccessArgs']]):
        pulumi.set(self, "others_private_access", value)

    @property
    @pulumi.getter(name="postMaxSizes")
    def post_max_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainPostMaxSizeArgs']]]]:
        """
        Maximum post size configuration.
        """
        return pulumi.get(self, "post_max_sizes")

    @post_max_sizes.setter
    def post_max_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainPostMaxSizeArgs']]]]):
        pulumi.set(self, "post_max_sizes", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        The project CDN belongs to, default to 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="qnPrivateAccess")
    def qn_private_access(self) -> Optional[pulumi.Input['DomainQnPrivateAccessArgs']]:
        """
        Access authentication for OBS origin.
        """
        return pulumi.get(self, "qn_private_access")

    @qn_private_access.setter
    def qn_private_access(self, value: Optional[pulumi.Input['DomainQnPrivateAccessArgs']]):
        pulumi.set(self, "qn_private_access", value)

    @property
    @pulumi.getter(name="quicSwitch")
    def quic_switch(self) -> Optional[pulumi.Input[str]]:
        """
        QUIC switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "quic_switch")

    @quic_switch.setter
    def quic_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quic_switch", value)

    @property
    @pulumi.getter(name="rangeOriginSwitch")
    def range_origin_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        """
        return pulumi.get(self, "range_origin_switch")

    @range_origin_switch.setter
    def range_origin_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range_origin_switch", value)

    @property
    @pulumi.getter
    def referer(self) -> Optional[pulumi.Input['DomainRefererArgs']]:
        """
        Referer configuration.
        """
        return pulumi.get(self, "referer")

    @referer.setter
    def referer(self, value: Optional[pulumi.Input['DomainRefererArgs']]):
        pulumi.set(self, "referer", value)

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional[pulumi.Input['DomainRequestHeaderArgs']]:
        """
        Request header configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "request_header")

    @request_header.setter
    def request_header(self, value: Optional[pulumi.Input['DomainRequestHeaderArgs']]):
        pulumi.set(self, "request_header", value)

    @property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> Optional[pulumi.Input['DomainResponseHeaderArgs']]:
        """
        Response header configurations.
        """
        return pulumi.get(self, "response_header")

    @response_header.setter
    def response_header(self, value: Optional[pulumi.Input['DomainResponseHeaderArgs']]):
        pulumi.set(self, "response_header", value)

    @property
    @pulumi.getter(name="responseHeaderCacheSwitch")
    def response_header_cache_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Response header cache switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "response_header_cache_switch")

    @response_header_cache_switch.setter
    def response_header_cache_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_header_cache_switch", value)

    @property
    @pulumi.getter(name="ruleCaches")
    def rule_caches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainRuleCachArgs']]]]:
        """
        Advanced path cache configuration.
        """
        return pulumi.get(self, "rule_caches")

    @rule_caches.setter
    def rule_caches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainRuleCachArgs']]]]):
        pulumi.set(self, "rule_caches", value)

    @property
    @pulumi.getter(name="seoSwitch")
    def seo_switch(self) -> Optional[pulumi.Input[str]]:
        """
        SEO switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "seo_switch")

    @seo_switch.setter
    def seo_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seo_switch", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming media VOD acceleration, `hybrid`: hybrid acceleration, `dynamic`: dynamic acceleration.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter(name="specificConfigMainland")
    def specific_config_mainland(self) -> Optional[pulumi.Input[str]]:
        """
        Specific configuration for mainland, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#MainlandConfig) for more details.
        """
        return pulumi.get(self, "specific_config_mainland")

    @specific_config_mainland.setter
    def specific_config_mainland(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "specific_config_mainland", value)

    @property
    @pulumi.getter(name="specificConfigOverseas")
    def specific_config_overseas(self) -> Optional[pulumi.Input[str]]:
        """
        Specific configuration for oversea, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#OverseaConfig) for more details.
        """
        return pulumi.get(self, "specific_config_overseas")

    @specific_config_overseas.setter
    def specific_config_overseas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "specific_config_overseas", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Acceleration service status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusCodeCache")
    def status_code_cache(self) -> Optional[pulumi.Input['DomainStatusCodeCacheArgs']]:
        """
        Status code cache configurations.
        """
        return pulumi.get(self, "status_code_cache")

    @status_code_cache.setter
    def status_code_cache(self, value: Optional[pulumi.Input['DomainStatusCodeCacheArgs']]):
        pulumi.set(self, "status_code_cache", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of cdn domain.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="videoSeekSwitch")
    def video_seek_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Video seek switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "video_seek_switch")

    @video_seek_switch.setter
    def video_seek_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_seek_switch", value)


class Domain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[pulumi.InputType['DomainAuthenticationArgs']]] = None,
                 aws_private_access: Optional[pulumi.Input[pulumi.InputType['DomainAwsPrivateAccessArgs']]] = None,
                 band_width_alert: Optional[pulumi.Input[pulumi.InputType['DomainBandWidthAlertArgs']]] = None,
                 cache_key: Optional[pulumi.Input[pulumi.InputType['DomainCacheKeyArgs']]] = None,
                 compression: Optional[pulumi.Input[pulumi.InputType['DomainCompressionArgs']]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 downstream_capping: Optional[pulumi.Input[pulumi.InputType['DomainDownstreamCappingArgs']]] = None,
                 error_page: Optional[pulumi.Input[pulumi.InputType['DomainErrorPageArgs']]] = None,
                 explicit_using_dry_run: Optional[pulumi.Input[bool]] = None,
                 follow_redirect_switch: Optional[pulumi.Input[str]] = None,
                 full_url_cache: Optional[pulumi.Input[bool]] = None,
                 https_config: Optional[pulumi.Input[pulumi.InputType['DomainHttpsConfigArgs']]] = None,
                 hw_private_access: Optional[pulumi.Input[pulumi.InputType['DomainHwPrivateAccessArgs']]] = None,
                 ip_filter: Optional[pulumi.Input[pulumi.InputType['DomainIpFilterArgs']]] = None,
                 ip_freq_limit: Optional[pulumi.Input[pulumi.InputType['DomainIpFreqLimitArgs']]] = None,
                 ipv6_access_switch: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[pulumi.InputType['DomainMaxAgeArgs']]] = None,
                 offline_cache_switch: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[pulumi.InputType['DomainOriginArgs']]] = None,
                 origin_pull_optimization: Optional[pulumi.Input[pulumi.InputType['DomainOriginPullOptimizationArgs']]] = None,
                 origin_pull_timeout: Optional[pulumi.Input[pulumi.InputType['DomainOriginPullTimeoutArgs']]] = None,
                 oss_private_access: Optional[pulumi.Input[pulumi.InputType['DomainOssPrivateAccessArgs']]] = None,
                 others_private_access: Optional[pulumi.Input[pulumi.InputType['DomainOthersPrivateAccessArgs']]] = None,
                 post_max_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainPostMaxSizeArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 qn_private_access: Optional[pulumi.Input[pulumi.InputType['DomainQnPrivateAccessArgs']]] = None,
                 quic_switch: Optional[pulumi.Input[str]] = None,
                 range_origin_switch: Optional[pulumi.Input[str]] = None,
                 referer: Optional[pulumi.Input[pulumi.InputType['DomainRefererArgs']]] = None,
                 request_header: Optional[pulumi.Input[pulumi.InputType['DomainRequestHeaderArgs']]] = None,
                 response_header: Optional[pulumi.Input[pulumi.InputType['DomainResponseHeaderArgs']]] = None,
                 response_header_cache_switch: Optional[pulumi.Input[str]] = None,
                 rule_caches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainRuleCachArgs']]]]] = None,
                 seo_switch: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 specific_config_mainland: Optional[pulumi.Input[str]] = None,
                 specific_config_overseas: Optional[pulumi.Input[str]] = None,
                 status_code_cache: Optional[pulumi.Input[pulumi.InputType['DomainStatusCodeCacheArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 video_seek_switch: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a CDN domain.

        > **NOTE:** To disable most of configuration with switch, just modify switch argument to off instead of remove the whole block

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.cdn.Domain("foo",
            area="mainland",
            domain="xxxx.com",
            full_url_cache=False,
            https_config=tencentcloud.cdn.DomainHttpsConfigArgs(
                force_redirect=tencentcloud.cdn.DomainHttpsConfigForceRedirectArgs(
                    redirect_status_code=302,
                    redirect_type="http",
                    switch="on",
                ),
                http2_switch="off",
                https_switch="off",
                ocsp_stapling_switch="off",
                spdy_switch="off",
                verify_client="off",
            ),
            origin=tencentcloud.cdn.DomainOriginArgs(
                origin_lists=["127.0.0.1"],
                origin_pull_protocol="follow",
                origin_type="ip",
            ),
            service_type="web",
            tags={
                "hello": "world",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Example Usage of cdn uses cache and request headers

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.cdn.Domain("foo",
            area="mainland",
            cache_key=tencentcloud.cdn.DomainCacheKeyArgs(
                full_url_cache="on",
            ),
            domain="xxxx.com",
            https_config=tencentcloud.cdn.DomainHttpsConfigArgs(
                force_redirect=tencentcloud.cdn.DomainHttpsConfigForceRedirectArgs(
                    redirect_status_code=302,
                    redirect_type="http",
                    switch="on",
                ),
                http2_switch="off",
                https_switch="off",
                ocsp_stapling_switch="off",
                spdy_switch="off",
                verify_client="off",
            ),
            origin=tencentcloud.cdn.DomainOriginArgs(
                origin_lists=["127.0.0.1"],
                origin_pull_protocol="follow",
                origin_type="ip",
            ),
            range_origin_switch="off",
            request_header=tencentcloud.cdn.DomainRequestHeaderArgs(
                header_rules=[tencentcloud.cdn.DomainRequestHeaderHeaderRuleArgs(
                    header_mode="add",
                    header_name="tf-header-name",
                    header_value="tf-header-value",
                    rule_paths=["*"],
                    rule_type="all",
                )],
                switch="on",
            ),
            rule_caches=[tencentcloud.cdn.DomainRuleCachArgs(
                cache_time=10000,
                no_cache_switch="on",
                re_validate="on",
            )],
            service_type="web",
            tags={
                "hello": "world",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Example Usage of COS bucket url as origin

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        bucket = tencentcloud.cos.Bucket("bucket",
            bucket="demo-bucket-1251234567",
            acl="private")
        # Create cdn domain
        cdn = tencentcloud.cdn.Domain("cdn",
            domain="abc.com",
            service_type="web",
            area="mainland",
            cache_key=tencentcloud.cdn.DomainCacheKeyArgs(
                full_url_cache="off",
            ),
            origin=tencentcloud.cdn.DomainOriginArgs(
                origin_type="cos",
                origin_lists=[bucket.cos_bucket_url],
                server_name=bucket.cos_bucket_url,
                origin_pull_protocol="follow",
                cos_private_access="on",
            ),
            https_config=tencentcloud.cdn.DomainHttpsConfigArgs(
                https_switch="off",
                http2_switch="off",
                ocsp_stapling_switch="off",
                spdy_switch="off",
                verify_client="off",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CDN domain can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cdn/domain:Domain foo xxxx.com
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas acceleration and global acceleration.
        :param pulumi.Input[pulumi.InputType['DomainAuthenticationArgs']] authentication: Specify timestamp hotlink protection configuration, NOTE: only one type can choose for the sub elements.
        :param pulumi.Input[pulumi.InputType['DomainAwsPrivateAccessArgs']] aws_private_access: Access authentication for S3 origin.
        :param pulumi.Input[pulumi.InputType['DomainBandWidthAlertArgs']] band_width_alert: Bandwidth cap configuration.
        :param pulumi.Input[pulumi.InputType['DomainCacheKeyArgs']] cache_key: Cache key configuration (Ignore Query String configuration). NOTE: All of `full_url_cache` default value is `on`.
        :param pulumi.Input[pulumi.InputType['DomainCompressionArgs']] compression: Smart compression configurations.
        :param pulumi.Input[str] domain: Name of the acceleration domain.
        :param pulumi.Input[pulumi.InputType['DomainDownstreamCappingArgs']] downstream_capping: Downstream capping configuration.
        :param pulumi.Input[pulumi.InputType['DomainErrorPageArgs']] error_page: Error page configurations.
        :param pulumi.Input[bool] explicit_using_dry_run: Used for validate only by store arguments to request json string as expected, WARNING: if set to `true`, NO Cloud Api will be invoked but store as local data, do not use this argument unless you really know what you are doing.
        :param pulumi.Input[str] follow_redirect_switch: 301/302 redirect following switch, available values: `on`, `off` (default).
        :param pulumi.Input[bool] full_url_cache: Use `cache_key` > `full_url_cache` instead. Whether to enable full-path cache. Default value is `true`.
        :param pulumi.Input[pulumi.InputType['DomainHttpsConfigArgs']] https_config: HTTPS acceleration configuration. It's a list and consist of at most one item.
        :param pulumi.Input[pulumi.InputType['DomainHwPrivateAccessArgs']] hw_private_access: Access authentication for OBS origin.
        :param pulumi.Input[pulumi.InputType['DomainIpFilterArgs']] ip_filter: Specify Ip filter configurations.
        :param pulumi.Input[pulumi.InputType['DomainIpFreqLimitArgs']] ip_freq_limit: Specify Ip frequency limit configurations.
        :param pulumi.Input[str] ipv6_access_switch: ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default value is `off`.
        :param pulumi.Input[pulumi.InputType['DomainMaxAgeArgs']] max_age: Browser cache configuration. (This feature is in beta and not generally available yet).
        :param pulumi.Input[str] offline_cache_switch: Offline cache switch, available values: `on`, `off` (default).
        :param pulumi.Input[pulumi.InputType['DomainOriginArgs']] origin: Origin server configuration. It's a list and consist of at most one item.
        :param pulumi.Input[pulumi.InputType['DomainOriginPullOptimizationArgs']] origin_pull_optimization: Cross-border linkage optimization configuration. (This feature is in beta and not generally available yet).
        :param pulumi.Input[pulumi.InputType['DomainOriginPullTimeoutArgs']] origin_pull_timeout: Cross-border linkage optimization configuration.
        :param pulumi.Input[pulumi.InputType['DomainOssPrivateAccessArgs']] oss_private_access: Access authentication for OSS origin.
        :param pulumi.Input[pulumi.InputType['DomainOthersPrivateAccessArgs']] others_private_access: Object storage back-to-source authentication of other vendors.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainPostMaxSizeArgs']]]] post_max_sizes: Maximum post size configuration.
        :param pulumi.Input[int] project_id: The project CDN belongs to, default to 0.
        :param pulumi.Input[pulumi.InputType['DomainQnPrivateAccessArgs']] qn_private_access: Access authentication for OBS origin.
        :param pulumi.Input[str] quic_switch: QUIC switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] range_origin_switch: Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        :param pulumi.Input[pulumi.InputType['DomainRefererArgs']] referer: Referer configuration.
        :param pulumi.Input[pulumi.InputType['DomainRequestHeaderArgs']] request_header: Request header configuration. It's a list and consist of at most one item.
        :param pulumi.Input[pulumi.InputType['DomainResponseHeaderArgs']] response_header: Response header configurations.
        :param pulumi.Input[str] response_header_cache_switch: Response header cache switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainRuleCachArgs']]]] rule_caches: Advanced path cache configuration.
        :param pulumi.Input[str] seo_switch: SEO switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] service_type: Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming media VOD acceleration, `hybrid`: hybrid acceleration, `dynamic`: dynamic acceleration.
        :param pulumi.Input[str] specific_config_mainland: Specific configuration for mainland, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#MainlandConfig) for more details.
        :param pulumi.Input[str] specific_config_overseas: Specific configuration for oversea, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#OverseaConfig) for more details.
        :param pulumi.Input[pulumi.InputType['DomainStatusCodeCacheArgs']] status_code_cache: Status code cache configurations.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of cdn domain.
        :param pulumi.Input[str] video_seek_switch: Video seek switch, available values: `on`, `off` (default).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a CDN domain.

        > **NOTE:** To disable most of configuration with switch, just modify switch argument to off instead of remove the whole block

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.cdn.Domain("foo",
            area="mainland",
            domain="xxxx.com",
            full_url_cache=False,
            https_config=tencentcloud.cdn.DomainHttpsConfigArgs(
                force_redirect=tencentcloud.cdn.DomainHttpsConfigForceRedirectArgs(
                    redirect_status_code=302,
                    redirect_type="http",
                    switch="on",
                ),
                http2_switch="off",
                https_switch="off",
                ocsp_stapling_switch="off",
                spdy_switch="off",
                verify_client="off",
            ),
            origin=tencentcloud.cdn.DomainOriginArgs(
                origin_lists=["127.0.0.1"],
                origin_pull_protocol="follow",
                origin_type="ip",
            ),
            service_type="web",
            tags={
                "hello": "world",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Example Usage of cdn uses cache and request headers

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.cdn.Domain("foo",
            area="mainland",
            cache_key=tencentcloud.cdn.DomainCacheKeyArgs(
                full_url_cache="on",
            ),
            domain="xxxx.com",
            https_config=tencentcloud.cdn.DomainHttpsConfigArgs(
                force_redirect=tencentcloud.cdn.DomainHttpsConfigForceRedirectArgs(
                    redirect_status_code=302,
                    redirect_type="http",
                    switch="on",
                ),
                http2_switch="off",
                https_switch="off",
                ocsp_stapling_switch="off",
                spdy_switch="off",
                verify_client="off",
            ),
            origin=tencentcloud.cdn.DomainOriginArgs(
                origin_lists=["127.0.0.1"],
                origin_pull_protocol="follow",
                origin_type="ip",
            ),
            range_origin_switch="off",
            request_header=tencentcloud.cdn.DomainRequestHeaderArgs(
                header_rules=[tencentcloud.cdn.DomainRequestHeaderHeaderRuleArgs(
                    header_mode="add",
                    header_name="tf-header-name",
                    header_value="tf-header-value",
                    rule_paths=["*"],
                    rule_type="all",
                )],
                switch="on",
            ),
            rule_caches=[tencentcloud.cdn.DomainRuleCachArgs(
                cache_time=10000,
                no_cache_switch="on",
                re_validate="on",
            )],
            service_type="web",
            tags={
                "hello": "world",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Example Usage of COS bucket url as origin

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        bucket = tencentcloud.cos.Bucket("bucket",
            bucket="demo-bucket-1251234567",
            acl="private")
        # Create cdn domain
        cdn = tencentcloud.cdn.Domain("cdn",
            domain="abc.com",
            service_type="web",
            area="mainland",
            cache_key=tencentcloud.cdn.DomainCacheKeyArgs(
                full_url_cache="off",
            ),
            origin=tencentcloud.cdn.DomainOriginArgs(
                origin_type="cos",
                origin_lists=[bucket.cos_bucket_url],
                server_name=bucket.cos_bucket_url,
                origin_pull_protocol="follow",
                cos_private_access="on",
            ),
            https_config=tencentcloud.cdn.DomainHttpsConfigArgs(
                https_switch="off",
                http2_switch="off",
                ocsp_stapling_switch="off",
                spdy_switch="off",
                verify_client="off",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CDN domain can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cdn/domain:Domain foo xxxx.com
        ```

        :param str resource_name: The name of the resource.
        :param DomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[pulumi.InputType['DomainAuthenticationArgs']]] = None,
                 aws_private_access: Optional[pulumi.Input[pulumi.InputType['DomainAwsPrivateAccessArgs']]] = None,
                 band_width_alert: Optional[pulumi.Input[pulumi.InputType['DomainBandWidthAlertArgs']]] = None,
                 cache_key: Optional[pulumi.Input[pulumi.InputType['DomainCacheKeyArgs']]] = None,
                 compression: Optional[pulumi.Input[pulumi.InputType['DomainCompressionArgs']]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 downstream_capping: Optional[pulumi.Input[pulumi.InputType['DomainDownstreamCappingArgs']]] = None,
                 error_page: Optional[pulumi.Input[pulumi.InputType['DomainErrorPageArgs']]] = None,
                 explicit_using_dry_run: Optional[pulumi.Input[bool]] = None,
                 follow_redirect_switch: Optional[pulumi.Input[str]] = None,
                 full_url_cache: Optional[pulumi.Input[bool]] = None,
                 https_config: Optional[pulumi.Input[pulumi.InputType['DomainHttpsConfigArgs']]] = None,
                 hw_private_access: Optional[pulumi.Input[pulumi.InputType['DomainHwPrivateAccessArgs']]] = None,
                 ip_filter: Optional[pulumi.Input[pulumi.InputType['DomainIpFilterArgs']]] = None,
                 ip_freq_limit: Optional[pulumi.Input[pulumi.InputType['DomainIpFreqLimitArgs']]] = None,
                 ipv6_access_switch: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[pulumi.InputType['DomainMaxAgeArgs']]] = None,
                 offline_cache_switch: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[pulumi.InputType['DomainOriginArgs']]] = None,
                 origin_pull_optimization: Optional[pulumi.Input[pulumi.InputType['DomainOriginPullOptimizationArgs']]] = None,
                 origin_pull_timeout: Optional[pulumi.Input[pulumi.InputType['DomainOriginPullTimeoutArgs']]] = None,
                 oss_private_access: Optional[pulumi.Input[pulumi.InputType['DomainOssPrivateAccessArgs']]] = None,
                 others_private_access: Optional[pulumi.Input[pulumi.InputType['DomainOthersPrivateAccessArgs']]] = None,
                 post_max_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainPostMaxSizeArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 qn_private_access: Optional[pulumi.Input[pulumi.InputType['DomainQnPrivateAccessArgs']]] = None,
                 quic_switch: Optional[pulumi.Input[str]] = None,
                 range_origin_switch: Optional[pulumi.Input[str]] = None,
                 referer: Optional[pulumi.Input[pulumi.InputType['DomainRefererArgs']]] = None,
                 request_header: Optional[pulumi.Input[pulumi.InputType['DomainRequestHeaderArgs']]] = None,
                 response_header: Optional[pulumi.Input[pulumi.InputType['DomainResponseHeaderArgs']]] = None,
                 response_header_cache_switch: Optional[pulumi.Input[str]] = None,
                 rule_caches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainRuleCachArgs']]]]] = None,
                 seo_switch: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 specific_config_mainland: Optional[pulumi.Input[str]] = None,
                 specific_config_overseas: Optional[pulumi.Input[str]] = None,
                 status_code_cache: Optional[pulumi.Input[pulumi.InputType['DomainStatusCodeCacheArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 video_seek_switch: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainArgs.__new__(DomainArgs)

            __props__.__dict__["area"] = area
            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["aws_private_access"] = aws_private_access
            __props__.__dict__["band_width_alert"] = band_width_alert
            __props__.__dict__["cache_key"] = cache_key
            __props__.__dict__["compression"] = compression
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["downstream_capping"] = downstream_capping
            __props__.__dict__["error_page"] = error_page
            __props__.__dict__["explicit_using_dry_run"] = explicit_using_dry_run
            __props__.__dict__["follow_redirect_switch"] = follow_redirect_switch
            __props__.__dict__["full_url_cache"] = full_url_cache
            __props__.__dict__["https_config"] = https_config
            __props__.__dict__["hw_private_access"] = hw_private_access
            __props__.__dict__["ip_filter"] = ip_filter
            __props__.__dict__["ip_freq_limit"] = ip_freq_limit
            __props__.__dict__["ipv6_access_switch"] = ipv6_access_switch
            __props__.__dict__["max_age"] = max_age
            __props__.__dict__["offline_cache_switch"] = offline_cache_switch
            if origin is None and not opts.urn:
                raise TypeError("Missing required property 'origin'")
            __props__.__dict__["origin"] = origin
            __props__.__dict__["origin_pull_optimization"] = origin_pull_optimization
            __props__.__dict__["origin_pull_timeout"] = origin_pull_timeout
            __props__.__dict__["oss_private_access"] = oss_private_access
            __props__.__dict__["others_private_access"] = others_private_access
            __props__.__dict__["post_max_sizes"] = post_max_sizes
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["qn_private_access"] = qn_private_access
            __props__.__dict__["quic_switch"] = quic_switch
            __props__.__dict__["range_origin_switch"] = range_origin_switch
            __props__.__dict__["referer"] = referer
            __props__.__dict__["request_header"] = request_header
            __props__.__dict__["response_header"] = response_header
            __props__.__dict__["response_header_cache_switch"] = response_header_cache_switch
            __props__.__dict__["rule_caches"] = rule_caches
            __props__.__dict__["seo_switch"] = seo_switch
            if service_type is None and not opts.urn:
                raise TypeError("Missing required property 'service_type'")
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["specific_config_mainland"] = specific_config_mainland
            __props__.__dict__["specific_config_overseas"] = specific_config_overseas
            __props__.__dict__["status_code_cache"] = status_code_cache
            __props__.__dict__["tags"] = tags
            __props__.__dict__["video_seek_switch"] = video_seek_switch
            __props__.__dict__["cname"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["dry_run_create_result"] = None
            __props__.__dict__["dry_run_update_result"] = None
            __props__.__dict__["status"] = None
        super(Domain, __self__).__init__(
            'tencentcloud:Cdn/domain:Domain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area: Optional[pulumi.Input[str]] = None,
            authentication: Optional[pulumi.Input[pulumi.InputType['DomainAuthenticationArgs']]] = None,
            aws_private_access: Optional[pulumi.Input[pulumi.InputType['DomainAwsPrivateAccessArgs']]] = None,
            band_width_alert: Optional[pulumi.Input[pulumi.InputType['DomainBandWidthAlertArgs']]] = None,
            cache_key: Optional[pulumi.Input[pulumi.InputType['DomainCacheKeyArgs']]] = None,
            cname: Optional[pulumi.Input[str]] = None,
            compression: Optional[pulumi.Input[pulumi.InputType['DomainCompressionArgs']]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            downstream_capping: Optional[pulumi.Input[pulumi.InputType['DomainDownstreamCappingArgs']]] = None,
            dry_run_create_result: Optional[pulumi.Input[str]] = None,
            dry_run_update_result: Optional[pulumi.Input[str]] = None,
            error_page: Optional[pulumi.Input[pulumi.InputType['DomainErrorPageArgs']]] = None,
            explicit_using_dry_run: Optional[pulumi.Input[bool]] = None,
            follow_redirect_switch: Optional[pulumi.Input[str]] = None,
            full_url_cache: Optional[pulumi.Input[bool]] = None,
            https_config: Optional[pulumi.Input[pulumi.InputType['DomainHttpsConfigArgs']]] = None,
            hw_private_access: Optional[pulumi.Input[pulumi.InputType['DomainHwPrivateAccessArgs']]] = None,
            ip_filter: Optional[pulumi.Input[pulumi.InputType['DomainIpFilterArgs']]] = None,
            ip_freq_limit: Optional[pulumi.Input[pulumi.InputType['DomainIpFreqLimitArgs']]] = None,
            ipv6_access_switch: Optional[pulumi.Input[str]] = None,
            max_age: Optional[pulumi.Input[pulumi.InputType['DomainMaxAgeArgs']]] = None,
            offline_cache_switch: Optional[pulumi.Input[str]] = None,
            origin: Optional[pulumi.Input[pulumi.InputType['DomainOriginArgs']]] = None,
            origin_pull_optimization: Optional[pulumi.Input[pulumi.InputType['DomainOriginPullOptimizationArgs']]] = None,
            origin_pull_timeout: Optional[pulumi.Input[pulumi.InputType['DomainOriginPullTimeoutArgs']]] = None,
            oss_private_access: Optional[pulumi.Input[pulumi.InputType['DomainOssPrivateAccessArgs']]] = None,
            others_private_access: Optional[pulumi.Input[pulumi.InputType['DomainOthersPrivateAccessArgs']]] = None,
            post_max_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainPostMaxSizeArgs']]]]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            qn_private_access: Optional[pulumi.Input[pulumi.InputType['DomainQnPrivateAccessArgs']]] = None,
            quic_switch: Optional[pulumi.Input[str]] = None,
            range_origin_switch: Optional[pulumi.Input[str]] = None,
            referer: Optional[pulumi.Input[pulumi.InputType['DomainRefererArgs']]] = None,
            request_header: Optional[pulumi.Input[pulumi.InputType['DomainRequestHeaderArgs']]] = None,
            response_header: Optional[pulumi.Input[pulumi.InputType['DomainResponseHeaderArgs']]] = None,
            response_header_cache_switch: Optional[pulumi.Input[str]] = None,
            rule_caches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainRuleCachArgs']]]]] = None,
            seo_switch: Optional[pulumi.Input[str]] = None,
            service_type: Optional[pulumi.Input[str]] = None,
            specific_config_mainland: Optional[pulumi.Input[str]] = None,
            specific_config_overseas: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            status_code_cache: Optional[pulumi.Input[pulumi.InputType['DomainStatusCodeCacheArgs']]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            video_seek_switch: Optional[pulumi.Input[str]] = None) -> 'Domain':
        """
        Get an existing Domain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas acceleration and global acceleration.
        :param pulumi.Input[pulumi.InputType['DomainAuthenticationArgs']] authentication: Specify timestamp hotlink protection configuration, NOTE: only one type can choose for the sub elements.
        :param pulumi.Input[pulumi.InputType['DomainAwsPrivateAccessArgs']] aws_private_access: Access authentication for S3 origin.
        :param pulumi.Input[pulumi.InputType['DomainBandWidthAlertArgs']] band_width_alert: Bandwidth cap configuration.
        :param pulumi.Input[pulumi.InputType['DomainCacheKeyArgs']] cache_key: Cache key configuration (Ignore Query String configuration). NOTE: All of `full_url_cache` default value is `on`.
        :param pulumi.Input[str] cname: CNAME address of domain name.
        :param pulumi.Input[pulumi.InputType['DomainCompressionArgs']] compression: Smart compression configurations.
        :param pulumi.Input[str] create_time: Creation time of domain name.
        :param pulumi.Input[str] domain: Name of the acceleration domain.
        :param pulumi.Input[pulumi.InputType['DomainDownstreamCappingArgs']] downstream_capping: Downstream capping configuration.
        :param pulumi.Input[str] dry_run_create_result: Used for store `dry_run` request json.
        :param pulumi.Input[str] dry_run_update_result: Used for store `dry_run` update request json.
        :param pulumi.Input[pulumi.InputType['DomainErrorPageArgs']] error_page: Error page configurations.
        :param pulumi.Input[bool] explicit_using_dry_run: Used for validate only by store arguments to request json string as expected, WARNING: if set to `true`, NO Cloud Api will be invoked but store as local data, do not use this argument unless you really know what you are doing.
        :param pulumi.Input[str] follow_redirect_switch: 301/302 redirect following switch, available values: `on`, `off` (default).
        :param pulumi.Input[bool] full_url_cache: Use `cache_key` > `full_url_cache` instead. Whether to enable full-path cache. Default value is `true`.
        :param pulumi.Input[pulumi.InputType['DomainHttpsConfigArgs']] https_config: HTTPS acceleration configuration. It's a list and consist of at most one item.
        :param pulumi.Input[pulumi.InputType['DomainHwPrivateAccessArgs']] hw_private_access: Access authentication for OBS origin.
        :param pulumi.Input[pulumi.InputType['DomainIpFilterArgs']] ip_filter: Specify Ip filter configurations.
        :param pulumi.Input[pulumi.InputType['DomainIpFreqLimitArgs']] ip_freq_limit: Specify Ip frequency limit configurations.
        :param pulumi.Input[str] ipv6_access_switch: ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default value is `off`.
        :param pulumi.Input[pulumi.InputType['DomainMaxAgeArgs']] max_age: Browser cache configuration. (This feature is in beta and not generally available yet).
        :param pulumi.Input[str] offline_cache_switch: Offline cache switch, available values: `on`, `off` (default).
        :param pulumi.Input[pulumi.InputType['DomainOriginArgs']] origin: Origin server configuration. It's a list and consist of at most one item.
        :param pulumi.Input[pulumi.InputType['DomainOriginPullOptimizationArgs']] origin_pull_optimization: Cross-border linkage optimization configuration. (This feature is in beta and not generally available yet).
        :param pulumi.Input[pulumi.InputType['DomainOriginPullTimeoutArgs']] origin_pull_timeout: Cross-border linkage optimization configuration.
        :param pulumi.Input[pulumi.InputType['DomainOssPrivateAccessArgs']] oss_private_access: Access authentication for OSS origin.
        :param pulumi.Input[pulumi.InputType['DomainOthersPrivateAccessArgs']] others_private_access: Object storage back-to-source authentication of other vendors.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainPostMaxSizeArgs']]]] post_max_sizes: Maximum post size configuration.
        :param pulumi.Input[int] project_id: The project CDN belongs to, default to 0.
        :param pulumi.Input[pulumi.InputType['DomainQnPrivateAccessArgs']] qn_private_access: Access authentication for OBS origin.
        :param pulumi.Input[str] quic_switch: QUIC switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] range_origin_switch: Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        :param pulumi.Input[pulumi.InputType['DomainRefererArgs']] referer: Referer configuration.
        :param pulumi.Input[pulumi.InputType['DomainRequestHeaderArgs']] request_header: Request header configuration. It's a list and consist of at most one item.
        :param pulumi.Input[pulumi.InputType['DomainResponseHeaderArgs']] response_header: Response header configurations.
        :param pulumi.Input[str] response_header_cache_switch: Response header cache switch, available values: `on`, `off` (default).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DomainRuleCachArgs']]]] rule_caches: Advanced path cache configuration.
        :param pulumi.Input[str] seo_switch: SEO switch, available values: `on`, `off` (default).
        :param pulumi.Input[str] service_type: Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming media VOD acceleration, `hybrid`: hybrid acceleration, `dynamic`: dynamic acceleration.
        :param pulumi.Input[str] specific_config_mainland: Specific configuration for mainland, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#MainlandConfig) for more details.
        :param pulumi.Input[str] specific_config_overseas: Specific configuration for oversea, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#OverseaConfig) for more details.
        :param pulumi.Input[str] status: Acceleration service status.
        :param pulumi.Input[pulumi.InputType['DomainStatusCodeCacheArgs']] status_code_cache: Status code cache configurations.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of cdn domain.
        :param pulumi.Input[str] video_seek_switch: Video seek switch, available values: `on`, `off` (default).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainState.__new__(_DomainState)

        __props__.__dict__["area"] = area
        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["aws_private_access"] = aws_private_access
        __props__.__dict__["band_width_alert"] = band_width_alert
        __props__.__dict__["cache_key"] = cache_key
        __props__.__dict__["cname"] = cname
        __props__.__dict__["compression"] = compression
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["domain"] = domain
        __props__.__dict__["downstream_capping"] = downstream_capping
        __props__.__dict__["dry_run_create_result"] = dry_run_create_result
        __props__.__dict__["dry_run_update_result"] = dry_run_update_result
        __props__.__dict__["error_page"] = error_page
        __props__.__dict__["explicit_using_dry_run"] = explicit_using_dry_run
        __props__.__dict__["follow_redirect_switch"] = follow_redirect_switch
        __props__.__dict__["full_url_cache"] = full_url_cache
        __props__.__dict__["https_config"] = https_config
        __props__.__dict__["hw_private_access"] = hw_private_access
        __props__.__dict__["ip_filter"] = ip_filter
        __props__.__dict__["ip_freq_limit"] = ip_freq_limit
        __props__.__dict__["ipv6_access_switch"] = ipv6_access_switch
        __props__.__dict__["max_age"] = max_age
        __props__.__dict__["offline_cache_switch"] = offline_cache_switch
        __props__.__dict__["origin"] = origin
        __props__.__dict__["origin_pull_optimization"] = origin_pull_optimization
        __props__.__dict__["origin_pull_timeout"] = origin_pull_timeout
        __props__.__dict__["oss_private_access"] = oss_private_access
        __props__.__dict__["others_private_access"] = others_private_access
        __props__.__dict__["post_max_sizes"] = post_max_sizes
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["qn_private_access"] = qn_private_access
        __props__.__dict__["quic_switch"] = quic_switch
        __props__.__dict__["range_origin_switch"] = range_origin_switch
        __props__.__dict__["referer"] = referer
        __props__.__dict__["request_header"] = request_header
        __props__.__dict__["response_header"] = response_header
        __props__.__dict__["response_header_cache_switch"] = response_header_cache_switch
        __props__.__dict__["rule_caches"] = rule_caches
        __props__.__dict__["seo_switch"] = seo_switch
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["specific_config_mainland"] = specific_config_mainland
        __props__.__dict__["specific_config_overseas"] = specific_config_overseas
        __props__.__dict__["status"] = status
        __props__.__dict__["status_code_cache"] = status_code_cache
        __props__.__dict__["tags"] = tags
        __props__.__dict__["video_seek_switch"] = video_seek_switch
        return Domain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Output[Optional[str]]:
        """
        Domain name acceleration region. `mainland`: acceleration inside mainland China, `overseas`: acceleration outside mainland China, `global`: global acceleration. Overseas acceleration service must be enabled to use overseas acceleration and global acceleration.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[Optional['outputs.DomainAuthentication']]:
        """
        Specify timestamp hotlink protection configuration, NOTE: only one type can choose for the sub elements.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="awsPrivateAccess")
    def aws_private_access(self) -> pulumi.Output[Optional['outputs.DomainAwsPrivateAccess']]:
        """
        Access authentication for S3 origin.
        """
        return pulumi.get(self, "aws_private_access")

    @property
    @pulumi.getter(name="bandWidthAlert")
    def band_width_alert(self) -> pulumi.Output[Optional['outputs.DomainBandWidthAlert']]:
        """
        Bandwidth cap configuration.
        """
        return pulumi.get(self, "band_width_alert")

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> pulumi.Output[Optional['outputs.DomainCacheKey']]:
        """
        Cache key configuration (Ignore Query String configuration). NOTE: All of `full_url_cache` default value is `on`.
        """
        return pulumi.get(self, "cache_key")

    @property
    @pulumi.getter
    def cname(self) -> pulumi.Output[str]:
        """
        CNAME address of domain name.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def compression(self) -> pulumi.Output[Optional['outputs.DomainCompression']]:
        """
        Smart compression configurations.
        """
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time of domain name.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Name of the acceleration domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="downstreamCapping")
    def downstream_capping(self) -> pulumi.Output[Optional['outputs.DomainDownstreamCapping']]:
        """
        Downstream capping configuration.
        """
        return pulumi.get(self, "downstream_capping")

    @property
    @pulumi.getter(name="dryRunCreateResult")
    def dry_run_create_result(self) -> pulumi.Output[str]:
        """
        Used for store `dry_run` request json.
        """
        return pulumi.get(self, "dry_run_create_result")

    @property
    @pulumi.getter(name="dryRunUpdateResult")
    def dry_run_update_result(self) -> pulumi.Output[str]:
        """
        Used for store `dry_run` update request json.
        """
        return pulumi.get(self, "dry_run_update_result")

    @property
    @pulumi.getter(name="errorPage")
    def error_page(self) -> pulumi.Output[Optional['outputs.DomainErrorPage']]:
        """
        Error page configurations.
        """
        return pulumi.get(self, "error_page")

    @property
    @pulumi.getter(name="explicitUsingDryRun")
    def explicit_using_dry_run(self) -> pulumi.Output[Optional[bool]]:
        """
        Used for validate only by store arguments to request json string as expected, WARNING: if set to `true`, NO Cloud Api will be invoked but store as local data, do not use this argument unless you really know what you are doing.
        """
        return pulumi.get(self, "explicit_using_dry_run")

    @property
    @pulumi.getter(name="followRedirectSwitch")
    def follow_redirect_switch(self) -> pulumi.Output[Optional[str]]:
        """
        301/302 redirect following switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "follow_redirect_switch")

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> pulumi.Output[Optional[bool]]:
        """
        Use `cache_key` > `full_url_cache` instead. Whether to enable full-path cache. Default value is `true`.
        """
        warnings.warn("""Use `cache_key` -> `full_url_cache` instead.""", DeprecationWarning)
        pulumi.log.warn("""full_url_cache is deprecated: Use `cache_key` -> `full_url_cache` instead.""")

        return pulumi.get(self, "full_url_cache")

    @property
    @pulumi.getter(name="httpsConfig")
    def https_config(self) -> pulumi.Output['outputs.DomainHttpsConfig']:
        """
        HTTPS acceleration configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "https_config")

    @property
    @pulumi.getter(name="hwPrivateAccess")
    def hw_private_access(self) -> pulumi.Output[Optional['outputs.DomainHwPrivateAccess']]:
        """
        Access authentication for OBS origin.
        """
        return pulumi.get(self, "hw_private_access")

    @property
    @pulumi.getter(name="ipFilter")
    def ip_filter(self) -> pulumi.Output[Optional['outputs.DomainIpFilter']]:
        """
        Specify Ip filter configurations.
        """
        return pulumi.get(self, "ip_filter")

    @property
    @pulumi.getter(name="ipFreqLimit")
    def ip_freq_limit(self) -> pulumi.Output[Optional['outputs.DomainIpFreqLimit']]:
        """
        Specify Ip frequency limit configurations.
        """
        return pulumi.get(self, "ip_freq_limit")

    @property
    @pulumi.getter(name="ipv6AccessSwitch")
    def ipv6_access_switch(self) -> pulumi.Output[Optional[str]]:
        """
        ipv6 access configuration switch. Only available when area set to `mainland`. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "ipv6_access_switch")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> pulumi.Output[Optional['outputs.DomainMaxAge']]:
        """
        Browser cache configuration. (This feature is in beta and not generally available yet).
        """
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="offlineCacheSwitch")
    def offline_cache_switch(self) -> pulumi.Output[Optional[str]]:
        """
        Offline cache switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "offline_cache_switch")

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Output['outputs.DomainOrigin']:
        """
        Origin server configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="originPullOptimization")
    def origin_pull_optimization(self) -> pulumi.Output[Optional['outputs.DomainOriginPullOptimization']]:
        """
        Cross-border linkage optimization configuration. (This feature is in beta and not generally available yet).
        """
        return pulumi.get(self, "origin_pull_optimization")

    @property
    @pulumi.getter(name="originPullTimeout")
    def origin_pull_timeout(self) -> pulumi.Output[Optional['outputs.DomainOriginPullTimeout']]:
        """
        Cross-border linkage optimization configuration.
        """
        return pulumi.get(self, "origin_pull_timeout")

    @property
    @pulumi.getter(name="ossPrivateAccess")
    def oss_private_access(self) -> pulumi.Output[Optional['outputs.DomainOssPrivateAccess']]:
        """
        Access authentication for OSS origin.
        """
        return pulumi.get(self, "oss_private_access")

    @property
    @pulumi.getter(name="othersPrivateAccess")
    def others_private_access(self) -> pulumi.Output[Optional['outputs.DomainOthersPrivateAccess']]:
        """
        Object storage back-to-source authentication of other vendors.
        """
        return pulumi.get(self, "others_private_access")

    @property
    @pulumi.getter(name="postMaxSizes")
    def post_max_sizes(self) -> pulumi.Output[Optional[Sequence['outputs.DomainPostMaxSize']]]:
        """
        Maximum post size configuration.
        """
        return pulumi.get(self, "post_max_sizes")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        The project CDN belongs to, default to 0.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="qnPrivateAccess")
    def qn_private_access(self) -> pulumi.Output[Optional['outputs.DomainQnPrivateAccess']]:
        """
        Access authentication for OBS origin.
        """
        return pulumi.get(self, "qn_private_access")

    @property
    @pulumi.getter(name="quicSwitch")
    def quic_switch(self) -> pulumi.Output[Optional[str]]:
        """
        QUIC switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "quic_switch")

    @property
    @pulumi.getter(name="rangeOriginSwitch")
    def range_origin_switch(self) -> pulumi.Output[Optional[str]]:
        """
        Sharding back to source configuration switch. Valid values are `on` and `off`. Default value is `on`.
        """
        return pulumi.get(self, "range_origin_switch")

    @property
    @pulumi.getter
    def referer(self) -> pulumi.Output[Optional['outputs.DomainReferer']]:
        """
        Referer configuration.
        """
        return pulumi.get(self, "referer")

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> pulumi.Output['outputs.DomainRequestHeader']:
        """
        Request header configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "request_header")

    @property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> pulumi.Output[Optional['outputs.DomainResponseHeader']]:
        """
        Response header configurations.
        """
        return pulumi.get(self, "response_header")

    @property
    @pulumi.getter(name="responseHeaderCacheSwitch")
    def response_header_cache_switch(self) -> pulumi.Output[Optional[str]]:
        """
        Response header cache switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "response_header_cache_switch")

    @property
    @pulumi.getter(name="ruleCaches")
    def rule_caches(self) -> pulumi.Output[Optional[Sequence['outputs.DomainRuleCach']]]:
        """
        Advanced path cache configuration.
        """
        return pulumi.get(self, "rule_caches")

    @property
    @pulumi.getter(name="seoSwitch")
    def seo_switch(self) -> pulumi.Output[Optional[str]]:
        """
        SEO switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "seo_switch")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[str]:
        """
        Acceleration domain name service type. `web`: static acceleration, `download`: download acceleration, `media`: streaming media VOD acceleration, `hybrid`: hybrid acceleration, `dynamic`: dynamic acceleration.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="specificConfigMainland")
    def specific_config_mainland(self) -> pulumi.Output[Optional[str]]:
        """
        Specific configuration for mainland, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#MainlandConfig) for more details.
        """
        return pulumi.get(self, "specific_config_mainland")

    @property
    @pulumi.getter(name="specificConfigOverseas")
    def specific_config_overseas(self) -> pulumi.Output[Optional[str]]:
        """
        Specific configuration for oversea, NOTE: Both specifying full schema or using it is superfluous, please use cloud api parameters json passthroughs, check the [Data Types](https://www.tencentcloud.com/document/api/228/31739#OverseaConfig) for more details.
        """
        return pulumi.get(self, "specific_config_overseas")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Acceleration service status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusCodeCache")
    def status_code_cache(self) -> pulumi.Output[Optional['outputs.DomainStatusCodeCache']]:
        """
        Status code cache configurations.
        """
        return pulumi.get(self, "status_code_cache")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tags of cdn domain.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="videoSeekSwitch")
    def video_seek_switch(self) -> pulumi.Output[Optional[str]]:
        """
        Video seek switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "video_seek_switch")

