# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DomainAuthentication',
    'DomainAuthenticationTypeA',
    'DomainAuthenticationTypeB',
    'DomainAuthenticationTypeC',
    'DomainAuthenticationTypeD',
    'DomainAwsPrivateAccess',
    'DomainBandWidthAlert',
    'DomainBandWidthAlertStatisticItem',
    'DomainCacheKey',
    'DomainCacheKeyKeyRule',
    'DomainCacheKeyKeyRuleQueryString',
    'DomainCacheKeyQueryString',
    'DomainCompression',
    'DomainCompressionCompressionRule',
    'DomainDownstreamCapping',
    'DomainDownstreamCappingCappingRule',
    'DomainErrorPage',
    'DomainErrorPagePageRule',
    'DomainHttpsConfig',
    'DomainHttpsConfigClientCertificateConfig',
    'DomainHttpsConfigForceRedirect',
    'DomainHttpsConfigServerCertificateConfig',
    'DomainHwPrivateAccess',
    'DomainIpFilter',
    'DomainIpFilterFilterRule',
    'DomainIpFreqLimit',
    'DomainMaxAge',
    'DomainMaxAgeMaxAgeRule',
    'DomainOrigin',
    'DomainOriginPullOptimization',
    'DomainOriginPullTimeout',
    'DomainOssPrivateAccess',
    'DomainOthersPrivateAccess',
    'DomainPostMaxSize',
    'DomainQnPrivateAccess',
    'DomainReferer',
    'DomainRefererRefererRule',
    'DomainRequestHeader',
    'DomainRequestHeaderHeaderRule',
    'DomainResponseHeader',
    'DomainResponseHeaderHeaderRule',
    'DomainRuleCach',
    'DomainStatusCodeCache',
    'DomainStatusCodeCacheCacheRule',
    'UrlPurgePurgeHistory',
    'UrlPushPushHistory',
    'GetDomainsDomainListResult',
    'GetDomainsDomainListHttpsConfigResult',
    'GetDomainsDomainListOriginResult',
    'GetDomainsDomainListRequestHeaderResult',
    'GetDomainsDomainListRequestHeaderHeaderRuleResult',
    'GetDomainsDomainListRuleCachResult',
]

@pulumi.output_type
class DomainAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "typeA":
            suggest = "type_a"
        elif key == "typeB":
            suggest = "type_b"
        elif key == "typeC":
            suggest = "type_c"
        elif key == "typeD":
            suggest = "type_d"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type_a: Optional['outputs.DomainAuthenticationTypeA'] = None,
                 type_b: Optional['outputs.DomainAuthenticationTypeB'] = None,
                 type_c: Optional['outputs.DomainAuthenticationTypeC'] = None,
                 type_d: Optional['outputs.DomainAuthenticationTypeD'] = None):
        """
        :param str switch: Authentication switching, available values: `on`, `off`.
        :param 'DomainAuthenticationTypeAArgs' type_a: Timestamp hotlink protection mode A configuration.
        :param 'DomainAuthenticationTypeBArgs' type_b: Timestamp hotlink protection mode B configuration. NOTE: according to upgrading of TencentCloud Platform, TypeB is unavailable for now.
        :param 'DomainAuthenticationTypeCArgs' type_c: Timestamp hotlink protection mode C configuration.
        :param 'DomainAuthenticationTypeDArgs' type_d: Timestamp hotlink protection mode D configuration.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type_a is not None:
            pulumi.set(__self__, "type_a", type_a)
        if type_b is not None:
            pulumi.set(__self__, "type_b", type_b)
        if type_c is not None:
            pulumi.set(__self__, "type_c", type_c)
        if type_d is not None:
            pulumi.set(__self__, "type_d", type_d)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Authentication switching, available values: `on`, `off`.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="typeA")
    def type_a(self) -> Optional['outputs.DomainAuthenticationTypeA']:
        """
        Timestamp hotlink protection mode A configuration.
        """
        return pulumi.get(self, "type_a")

    @property
    @pulumi.getter(name="typeB")
    def type_b(self) -> Optional['outputs.DomainAuthenticationTypeB']:
        """
        Timestamp hotlink protection mode B configuration. NOTE: according to upgrading of TencentCloud Platform, TypeB is unavailable for now.
        """
        return pulumi.get(self, "type_b")

    @property
    @pulumi.getter(name="typeC")
    def type_c(self) -> Optional['outputs.DomainAuthenticationTypeC']:
        """
        Timestamp hotlink protection mode C configuration.
        """
        return pulumi.get(self, "type_c")

    @property
    @pulumi.getter(name="typeD")
    def type_d(self) -> Optional['outputs.DomainAuthenticationTypeD']:
        """
        Timestamp hotlink protection mode D configuration.
        """
        return pulumi.get(self, "type_d")


@pulumi.output_type
class DomainAuthenticationTypeA(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expireTime":
            suggest = "expire_time"
        elif key == "fileExtensions":
            suggest = "file_extensions"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "signParam":
            suggest = "sign_param"
        elif key == "backupSecretKey":
            suggest = "backup_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainAuthenticationTypeA. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainAuthenticationTypeA.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainAuthenticationTypeA.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expire_time: int,
                 file_extensions: Sequence[str],
                 filter_type: str,
                 secret_key: str,
                 sign_param: str,
                 backup_secret_key: Optional[str] = None):
        """
        :param int expire_time: Signature expiration time in second. The maximum value is 630720000.
        :param Sequence[str] file_extensions: File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        :param str filter_type: Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        :param str secret_key: The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        :param str sign_param: Signature parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
        :param str backup_secret_key: Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "sign_param", sign_param)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> int:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> Sequence[str]:
        """
        File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        """
        return pulumi.get(self, "file_extensions")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        """
        Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="signParam")
    def sign_param(self) -> str:
        """
        Signature parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
        """
        return pulumi.get(self, "sign_param")

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[str]:
        """
        Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        return pulumi.get(self, "backup_secret_key")


@pulumi.output_type
class DomainAuthenticationTypeB(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expireTime":
            suggest = "expire_time"
        elif key == "fileExtensions":
            suggest = "file_extensions"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "backupSecretKey":
            suggest = "backup_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainAuthenticationTypeB. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainAuthenticationTypeB.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainAuthenticationTypeB.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expire_time: int,
                 file_extensions: Sequence[str],
                 filter_type: str,
                 secret_key: str,
                 backup_secret_key: Optional[str] = None):
        """
        :param int expire_time: Signature expiration time in second. The maximum value is 630720000.
        :param Sequence[str] file_extensions: File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        :param str filter_type: Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        :param str secret_key: The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        :param str backup_secret_key: Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> int:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> Sequence[str]:
        """
        File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        """
        return pulumi.get(self, "file_extensions")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        """
        Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[str]:
        """
        Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        return pulumi.get(self, "backup_secret_key")


@pulumi.output_type
class DomainAuthenticationTypeC(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expireTime":
            suggest = "expire_time"
        elif key == "fileExtensions":
            suggest = "file_extensions"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "backupSecretKey":
            suggest = "backup_secret_key"
        elif key == "timeFormat":
            suggest = "time_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainAuthenticationTypeC. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainAuthenticationTypeC.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainAuthenticationTypeC.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expire_time: int,
                 file_extensions: Sequence[str],
                 filter_type: str,
                 secret_key: str,
                 backup_secret_key: Optional[str] = None,
                 time_format: Optional[str] = None):
        """
        :param int expire_time: Signature expiration time in second. The maximum value is 630720000.
        :param Sequence[str] file_extensions: File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        :param str filter_type: Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        :param str secret_key: The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        :param str backup_secret_key: Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        :param str time_format: Timestamp formation, available values: `dec`, `hex`.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> int:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> Sequence[str]:
        """
        File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        """
        return pulumi.get(self, "file_extensions")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        """
        Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[str]:
        """
        Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        return pulumi.get(self, "backup_secret_key")

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[str]:
        """
        Timestamp formation, available values: `dec`, `hex`.
        """
        return pulumi.get(self, "time_format")


@pulumi.output_type
class DomainAuthenticationTypeD(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expireTime":
            suggest = "expire_time"
        elif key == "fileExtensions":
            suggest = "file_extensions"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "backupSecretKey":
            suggest = "backup_secret_key"
        elif key == "timeFormat":
            suggest = "time_format"
        elif key == "timeParam":
            suggest = "time_param"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainAuthenticationTypeD. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainAuthenticationTypeD.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainAuthenticationTypeD.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expire_time: int,
                 file_extensions: Sequence[str],
                 filter_type: str,
                 secret_key: str,
                 backup_secret_key: Optional[str] = None,
                 time_format: Optional[str] = None,
                 time_param: Optional[str] = None):
        """
        :param int expire_time: Signature expiration time in second. The maximum value is 630720000.
        :param Sequence[str] file_extensions: File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        :param str filter_type: Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        :param str secret_key: The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        :param str backup_secret_key: Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        :param str time_format: Timestamp formation, available values: `dec`, `hex`.
        :param str time_param: Timestamp parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_extensions", file_extensions)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "secret_key", secret_key)
        if backup_secret_key is not None:
            pulumi.set(__self__, "backup_secret_key", backup_secret_key)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_param is not None:
            pulumi.set(__self__, "time_param", time_param)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> int:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> Sequence[str]:
        """
        File extension list settings determining if authentication should be performed. NOTE: If it contains an asterisk (*), this indicates all files.
        """
        return pulumi.get(self, "file_extensions")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        """
        Available values: `whitelist` - all types apart from `file_extensions` are authenticated, `blacklist`: - only the types in the `file_extensions` are authenticated.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        """
        The key for signature calculation. Only digits, upper and lower-case letters are allowed. Length limit: 6-32 characters.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="backupSecretKey")
    def backup_secret_key(self) -> Optional[str]:
        """
        Used for calculate a signature. 6-32 characters. Only digits and letters are allowed.
        """
        return pulumi.get(self, "backup_secret_key")

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[str]:
        """
        Timestamp formation, available values: `dec`, `hex`.
        """
        return pulumi.get(self, "time_format")

    @property
    @pulumi.getter(name="timeParam")
    def time_param(self) -> Optional[str]:
        """
        Timestamp parameter name. Only upper and lower-case letters, digits, and underscores (_) are allowed. It cannot start with a digit. Length limit: 1-100 characters.
        """
        return pulumi.get(self, "time_param")


@pulumi.output_type
class DomainAwsPrivateAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainAwsPrivateAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainAwsPrivateAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainAwsPrivateAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 access_key: Optional[str] = None,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None,
                 secret_key: Optional[str] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param str access_key: Access ID.
        :param str bucket: Bucket.
        :param str region: Region.
        :param str secret_key: Key.
        """
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Key.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class DomainBandWidthAlert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertPercentage":
            suggest = "alert_percentage"
        elif key == "alertSwitch":
            suggest = "alert_switch"
        elif key == "bpsThreshold":
            suggest = "bps_threshold"
        elif key == "counterMeasure":
            suggest = "counter_measure"
        elif key == "lastTriggerTime":
            suggest = "last_trigger_time"
        elif key == "lastTriggerTimeOverseas":
            suggest = "last_trigger_time_overseas"
        elif key == "statisticItem":
            suggest = "statistic_item"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainBandWidthAlert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainBandWidthAlert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainBandWidthAlert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 alert_percentage: Optional[int] = None,
                 alert_switch: Optional[str] = None,
                 bps_threshold: Optional[int] = None,
                 counter_measure: Optional[str] = None,
                 last_trigger_time: Optional[str] = None,
                 last_trigger_time_overseas: Optional[str] = None,
                 metric: Optional[str] = None,
                 statistic_item: Optional['outputs.DomainBandWidthAlertStatisticItem'] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param int alert_percentage: Alert percentage.
        :param str alert_switch: Switch alert.
        :param int bps_threshold: threshold of bps.
        :param str counter_measure: Counter measure.
        :param str last_trigger_time: Last trigger time.
        :param str last_trigger_time_overseas: Last trigger time of overseas.
        :param str metric: Metric.
        :param 'DomainBandWidthAlertStatisticItemArgs' statistic_item: Specify statistic item configuration.
        """
        pulumi.set(__self__, "switch", switch)
        if alert_percentage is not None:
            pulumi.set(__self__, "alert_percentage", alert_percentage)
        if alert_switch is not None:
            pulumi.set(__self__, "alert_switch", alert_switch)
        if bps_threshold is not None:
            pulumi.set(__self__, "bps_threshold", bps_threshold)
        if counter_measure is not None:
            pulumi.set(__self__, "counter_measure", counter_measure)
        if last_trigger_time is not None:
            pulumi.set(__self__, "last_trigger_time", last_trigger_time)
        if last_trigger_time_overseas is not None:
            pulumi.set(__self__, "last_trigger_time_overseas", last_trigger_time_overseas)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if statistic_item is not None:
            pulumi.set(__self__, "statistic_item", statistic_item)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="alertPercentage")
    def alert_percentage(self) -> Optional[int]:
        """
        Alert percentage.
        """
        return pulumi.get(self, "alert_percentage")

    @property
    @pulumi.getter(name="alertSwitch")
    def alert_switch(self) -> Optional[str]:
        """
        Switch alert.
        """
        return pulumi.get(self, "alert_switch")

    @property
    @pulumi.getter(name="bpsThreshold")
    def bps_threshold(self) -> Optional[int]:
        """
        threshold of bps.
        """
        return pulumi.get(self, "bps_threshold")

    @property
    @pulumi.getter(name="counterMeasure")
    def counter_measure(self) -> Optional[str]:
        """
        Counter measure.
        """
        return pulumi.get(self, "counter_measure")

    @property
    @pulumi.getter(name="lastTriggerTime")
    def last_trigger_time(self) -> Optional[str]:
        """
        Last trigger time.
        """
        return pulumi.get(self, "last_trigger_time")

    @property
    @pulumi.getter(name="lastTriggerTimeOverseas")
    def last_trigger_time_overseas(self) -> Optional[str]:
        """
        Last trigger time of overseas.
        """
        return pulumi.get(self, "last_trigger_time_overseas")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        """
        Metric.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="statisticItem")
    def statistic_item(self) -> Optional['outputs.DomainBandWidthAlertStatisticItem']:
        """
        Specify statistic item configuration.
        """
        return pulumi.get(self, "statistic_item")


@pulumi.output_type
class DomainBandWidthAlertStatisticItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertPercentage":
            suggest = "alert_percentage"
        elif key == "alertSwitch":
            suggest = "alert_switch"
        elif key == "bpsThreshold":
            suggest = "bps_threshold"
        elif key == "counterMeasure":
            suggest = "counter_measure"
        elif key == "unblockTime":
            suggest = "unblock_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainBandWidthAlertStatisticItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainBandWidthAlertStatisticItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainBandWidthAlertStatisticItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 alert_percentage: Optional[int] = None,
                 alert_switch: Optional[str] = None,
                 bps_threshold: Optional[int] = None,
                 counter_measure: Optional[str] = None,
                 cycle: Optional[int] = None,
                 metric: Optional[str] = None,
                 type: Optional[str] = None,
                 unblock_time: Optional[int] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param int alert_percentage: Alert percentage.
        :param str alert_switch: Switch alert.
        :param int bps_threshold: threshold of bps.
        :param str counter_measure: Counter measure, values: `RETURN_404`, `RESOLVE_DNS_TO_ORIGIN`.
        :param int cycle: Cycle of checking in minutes, values `60`, `1440`.
        :param str metric: Metric.
        :param str type: Type of statistic item.
        :param int unblock_time: Time of auto unblock.
        """
        pulumi.set(__self__, "switch", switch)
        if alert_percentage is not None:
            pulumi.set(__self__, "alert_percentage", alert_percentage)
        if alert_switch is not None:
            pulumi.set(__self__, "alert_switch", alert_switch)
        if bps_threshold is not None:
            pulumi.set(__self__, "bps_threshold", bps_threshold)
        if counter_measure is not None:
            pulumi.set(__self__, "counter_measure", counter_measure)
        if cycle is not None:
            pulumi.set(__self__, "cycle", cycle)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unblock_time is not None:
            pulumi.set(__self__, "unblock_time", unblock_time)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="alertPercentage")
    def alert_percentage(self) -> Optional[int]:
        """
        Alert percentage.
        """
        return pulumi.get(self, "alert_percentage")

    @property
    @pulumi.getter(name="alertSwitch")
    def alert_switch(self) -> Optional[str]:
        """
        Switch alert.
        """
        return pulumi.get(self, "alert_switch")

    @property
    @pulumi.getter(name="bpsThreshold")
    def bps_threshold(self) -> Optional[int]:
        """
        threshold of bps.
        """
        return pulumi.get(self, "bps_threshold")

    @property
    @pulumi.getter(name="counterMeasure")
    def counter_measure(self) -> Optional[str]:
        """
        Counter measure, values: `RETURN_404`, `RESOLVE_DNS_TO_ORIGIN`.
        """
        return pulumi.get(self, "counter_measure")

    @property
    @pulumi.getter
    def cycle(self) -> Optional[int]:
        """
        Cycle of checking in minutes, values `60`, `1440`.
        """
        return pulumi.get(self, "cycle")

    @property
    @pulumi.getter
    def metric(self) -> Optional[str]:
        """
        Metric.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of statistic item.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unblockTime")
    def unblock_time(self) -> Optional[int]:
        """
        Time of auto unblock.
        """
        return pulumi.get(self, "unblock_time")


@pulumi.output_type
class DomainCacheKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullUrlCache":
            suggest = "full_url_cache"
        elif key == "ignoreCase":
            suggest = "ignore_case"
        elif key == "keyRules":
            suggest = "key_rules"
        elif key == "queryString":
            suggest = "query_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainCacheKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainCacheKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainCacheKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 full_url_cache: Optional[str] = None,
                 ignore_case: Optional[str] = None,
                 key_rules: Optional[Sequence['outputs.DomainCacheKeyKeyRule']] = None,
                 query_string: Optional['outputs.DomainCacheKeyQueryString'] = None):
        """
        :param str full_url_cache: Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
        :param str ignore_case: Specifies whether the cache key is case sensitive.
        :param Sequence['DomainCacheKeyKeyRuleArgs'] key_rules: Path-specific cache key configuration.
        :param 'DomainCacheKeyQueryStringArgs' query_string: Request parameter contained in CacheKey.
        """
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if key_rules is not None:
            pulumi.set(__self__, "key_rules", key_rules)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[str]:
        """
        Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
        """
        return pulumi.get(self, "full_url_cache")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[str]:
        """
        Specifies whether the cache key is case sensitive.
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter(name="keyRules")
    def key_rules(self) -> Optional[Sequence['outputs.DomainCacheKeyKeyRule']]:
        """
        Path-specific cache key configuration.
        """
        return pulumi.get(self, "key_rules")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional['outputs.DomainCacheKeyQueryString']:
        """
        Request parameter contained in CacheKey.
        """
        return pulumi.get(self, "query_string")


@pulumi.output_type
class DomainCacheKeyKeyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryString":
            suggest = "query_string"
        elif key == "rulePaths":
            suggest = "rule_paths"
        elif key == "ruleType":
            suggest = "rule_type"
        elif key == "fullUrlCache":
            suggest = "full_url_cache"
        elif key == "ignoreCase":
            suggest = "ignore_case"
        elif key == "ruleTag":
            suggest = "rule_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainCacheKeyKeyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainCacheKeyKeyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainCacheKeyKeyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_string: 'outputs.DomainCacheKeyKeyRuleQueryString',
                 rule_paths: Sequence[str],
                 rule_type: str,
                 full_url_cache: Optional[str] = None,
                 ignore_case: Optional[str] = None,
                 rule_tag: Optional[str] = None):
        """
        :param 'DomainCacheKeyKeyRuleQueryStringArgs' query_string: Request parameter contained in CacheKey.
        :param Sequence[str] rule_paths: List of rule paths for each `key_rules`: `/` for `index`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        :param str rule_type: Rule type, available: `file`, `directory`, `path`, `index`.
        :param str full_url_cache: Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
        :param str ignore_case: Whether caches are case insensitive.
        :param str rule_tag: Specify rule tag, default value is `user`.
        """
        pulumi.set(__self__, "query_string", query_string)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if rule_tag is not None:
            pulumi.set(__self__, "rule_tag", rule_tag)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> 'outputs.DomainCacheKeyKeyRuleQueryString':
        """
        Request parameter contained in CacheKey.
        """
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Sequence[str]:
        """
        List of rule paths for each `key_rules`: `/` for `index`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        """
        return pulumi.get(self, "rule_paths")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Rule type, available: `file`, `directory`, `path`, `index`.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[str]:
        """
        Whether to enable full-path cache, values `on` (DEFAULT ON), `off`.
        """
        return pulumi.get(self, "full_url_cache")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[str]:
        """
        Whether caches are case insensitive.
        """
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter(name="ruleTag")
    def rule_tag(self) -> Optional[str]:
        """
        Specify rule tag, default value is `user`.
        """
        return pulumi.get(self, "rule_tag")


@pulumi.output_type
class DomainCacheKeyKeyRuleQueryString(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 switch: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str action: Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
        :param str switch: Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
        :param str value: Array of included/excluded query strings (separated by `;`).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Array of included/excluded query strings (separated by `;`).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainCacheKeyQueryString(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 reorder: Optional[str] = None,
                 switch: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str action: Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
        :param str reorder: Whether to sort again, values `on`, `off` (Default).
        :param str switch: Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
        :param str value: Array of included/excluded query strings (separated by `;`).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if reorder is not None:
            pulumi.set(__self__, "reorder", reorder)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Specify key rule QS action, values: `includeCustom`, `excludeCustom`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def reorder(self) -> Optional[str]:
        """
        Whether to sort again, values `on`, `off` (Default).
        """
        return pulumi.get(self, "reorder")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Whether to use QueryString as part of CacheKey, values `on`, `off` (Default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Array of included/excluded query strings (separated by `;`).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DomainCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compressionRules":
            suggest = "compression_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 compression_rules: Optional[Sequence['outputs.DomainCompressionCompressionRule']] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param Sequence['DomainCompressionCompressionRuleArgs'] compression_rules: List of compression rules.
        """
        pulumi.set(__self__, "switch", switch)
        if compression_rules is not None:
            pulumi.set(__self__, "compression_rules", compression_rules)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="compressionRules")
    def compression_rules(self) -> Optional[Sequence['outputs.DomainCompressionCompressionRule']]:
        """
        List of compression rules.
        """
        return pulumi.get(self, "compression_rules")


@pulumi.output_type
class DomainCompressionCompressionRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxLength":
            suggest = "max_length"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "fileExtensions":
            suggest = "file_extensions"
        elif key == "rulePaths":
            suggest = "rule_paths"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainCompressionCompressionRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainCompressionCompressionRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainCompressionCompressionRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithms: Sequence[str],
                 compress: bool,
                 max_length: int,
                 min_length: int,
                 file_extensions: Optional[Sequence[str]] = None,
                 rule_paths: Optional[Sequence[str]] = None,
                 rule_type: Optional[str] = None):
        """
        :param Sequence[str] algorithms: List of algorithms, available: `gzip` and `brotli`.
        :param bool compress: Must be set as true, enables compression.
        :param int max_length: The maximum file size to trigger compression (in bytes).
        :param int min_length: The minimum file size to trigger compression (in bytes).
        :param Sequence[str] file_extensions: List of file extensions like `jpg`, `txt`.
        :param Sequence[str] rule_paths: List of rule paths for each `rule_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        :param str rule_type: Rule type, available: `all`, `file`, `directory`, `path`, `contentType`.
        """
        pulumi.set(__self__, "algorithms", algorithms)
        pulumi.set(__self__, "compress", compress)
        pulumi.set(__self__, "max_length", max_length)
        pulumi.set(__self__, "min_length", min_length)
        if file_extensions is not None:
            pulumi.set(__self__, "file_extensions", file_extensions)
        if rule_paths is not None:
            pulumi.set(__self__, "rule_paths", rule_paths)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter
    def algorithms(self) -> Sequence[str]:
        """
        List of algorithms, available: `gzip` and `brotli`.
        """
        return pulumi.get(self, "algorithms")

    @property
    @pulumi.getter
    def compress(self) -> bool:
        """
        Must be set as true, enables compression.
        """
        return pulumi.get(self, "compress")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> int:
        """
        The maximum file size to trigger compression (in bytes).
        """
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        """
        The minimum file size to trigger compression (in bytes).
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="fileExtensions")
    def file_extensions(self) -> Optional[Sequence[str]]:
        """
        List of file extensions like `jpg`, `txt`.
        """
        return pulumi.get(self, "file_extensions")

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Optional[Sequence[str]]:
        """
        List of rule paths for each `rule_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        """
        return pulumi.get(self, "rule_paths")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        """
        Rule type, available: `all`, `file`, `directory`, `path`, `contentType`.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class DomainDownstreamCapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cappingRules":
            suggest = "capping_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDownstreamCapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDownstreamCapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDownstreamCapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 capping_rules: Optional[Sequence['outputs.DomainDownstreamCappingCappingRule']] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param Sequence['DomainDownstreamCappingCappingRuleArgs'] capping_rules: List of capping rule.
        """
        pulumi.set(__self__, "switch", switch)
        if capping_rules is not None:
            pulumi.set(__self__, "capping_rules", capping_rules)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="cappingRules")
    def capping_rules(self) -> Optional[Sequence['outputs.DomainDownstreamCappingCappingRule']]:
        """
        List of capping rule.
        """
        return pulumi.get(self, "capping_rules")


@pulumi.output_type
class DomainDownstreamCappingCappingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kbpsThreshold":
            suggest = "kbps_threshold"
        elif key == "rulePaths":
            suggest = "rule_paths"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainDownstreamCappingCappingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainDownstreamCappingCappingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainDownstreamCappingCappingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kbps_threshold: int,
                 rule_paths: Sequence[str],
                 rule_type: str):
        """
        :param int kbps_threshold: Capping rule kbps threshold.
        :param Sequence[str] rule_paths: List of capping rule path.
        :param str rule_type: Capping rule type.
        """
        pulumi.set(__self__, "kbps_threshold", kbps_threshold)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="kbpsThreshold")
    def kbps_threshold(self) -> int:
        """
        Capping rule kbps threshold.
        """
        return pulumi.get(self, "kbps_threshold")

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Sequence[str]:
        """
        List of capping rule path.
        """
        return pulumi.get(self, "rule_paths")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Capping rule type.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class DomainErrorPage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pageRules":
            suggest = "page_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainErrorPage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainErrorPage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainErrorPage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 page_rules: Optional[Sequence['outputs.DomainErrorPagePageRule']] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param Sequence['DomainErrorPagePageRuleArgs'] page_rules: List of error page rule.
        """
        pulumi.set(__self__, "switch", switch)
        if page_rules is not None:
            pulumi.set(__self__, "page_rules", page_rules)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="pageRules")
    def page_rules(self) -> Optional[Sequence['outputs.DomainErrorPagePageRule']]:
        """
        List of error page rule.
        """
        return pulumi.get(self, "page_rules")


@pulumi.output_type
class DomainErrorPagePageRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redirectCode":
            suggest = "redirect_code"
        elif key == "redirectUrl":
            suggest = "redirect_url"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainErrorPagePageRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainErrorPagePageRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainErrorPagePageRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redirect_code: int,
                 redirect_url: str,
                 status_code: int):
        """
        :param int redirect_code: Redirect code of error page rules.
        :param str redirect_url: Redirect url of error page rules.
        :param int status_code: Status code of error page rules.
        """
        pulumi.set(__self__, "redirect_code", redirect_code)
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="redirectCode")
    def redirect_code(self) -> int:
        """
        Redirect code of error page rules.
        """
        return pulumi.get(self, "redirect_code")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        Redirect url of error page rules.
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        """
        Status code of error page rules.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class DomainHttpsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpsSwitch":
            suggest = "https_switch"
        elif key == "clientCertificateConfig":
            suggest = "client_certificate_config"
        elif key == "forceRedirect":
            suggest = "force_redirect"
        elif key == "http2Switch":
            suggest = "http2_switch"
        elif key == "ocspStaplingSwitch":
            suggest = "ocsp_stapling_switch"
        elif key == "serverCertificateConfig":
            suggest = "server_certificate_config"
        elif key == "spdySwitch":
            suggest = "spdy_switch"
        elif key == "tlsVersions":
            suggest = "tls_versions"
        elif key == "verifyClient":
            suggest = "verify_client"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainHttpsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainHttpsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainHttpsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 https_switch: str,
                 client_certificate_config: Optional['outputs.DomainHttpsConfigClientCertificateConfig'] = None,
                 force_redirect: Optional['outputs.DomainHttpsConfigForceRedirect'] = None,
                 http2_switch: Optional[str] = None,
                 ocsp_stapling_switch: Optional[str] = None,
                 server_certificate_config: Optional['outputs.DomainHttpsConfigServerCertificateConfig'] = None,
                 spdy_switch: Optional[str] = None,
                 tls_versions: Optional[Sequence[str]] = None,
                 verify_client: Optional[str] = None):
        """
        :param str https_switch: HTTPS configuration switch. Valid values are `on` and `off`.
        :param 'DomainHttpsConfigClientCertificateConfigArgs' client_certificate_config: Client certificate configuration information.
        :param 'DomainHttpsConfigForceRedirectArgs' force_redirect: Configuration of forced HTTP or HTTPS redirects.
        :param str http2_switch: HTTP2 configuration switch. Valid values are `on` and `off`. and default value is `off`.
        :param str ocsp_stapling_switch: OCSP configuration switch. Valid values are `on` and `off`. and default value is `off`.
        :param 'DomainHttpsConfigServerCertificateConfigArgs' server_certificate_config: Server certificate configuration information.
        :param str spdy_switch: Spdy configuration switch. Valid values are `on` and `off`. and default value is `off`. This parameter is for white-list customer.
        :param Sequence[str] tls_versions: Tls version settings, only support some Advanced domain names, support settings TLSv1, TLSV1.1, TLSV1.2, TLSv1.3, when modifying must open consecutive versions.
        :param str verify_client: Client certificate authentication feature. Valid values are `on` and `off`. and default value is `off`.
        """
        pulumi.set(__self__, "https_switch", https_switch)
        if client_certificate_config is not None:
            pulumi.set(__self__, "client_certificate_config", client_certificate_config)
        if force_redirect is not None:
            pulumi.set(__self__, "force_redirect", force_redirect)
        if http2_switch is not None:
            pulumi.set(__self__, "http2_switch", http2_switch)
        if ocsp_stapling_switch is not None:
            pulumi.set(__self__, "ocsp_stapling_switch", ocsp_stapling_switch)
        if server_certificate_config is not None:
            pulumi.set(__self__, "server_certificate_config", server_certificate_config)
        if spdy_switch is not None:
            pulumi.set(__self__, "spdy_switch", spdy_switch)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)
        if verify_client is not None:
            pulumi.set(__self__, "verify_client", verify_client)

    @property
    @pulumi.getter(name="httpsSwitch")
    def https_switch(self) -> str:
        """
        HTTPS configuration switch. Valid values are `on` and `off`.
        """
        return pulumi.get(self, "https_switch")

    @property
    @pulumi.getter(name="clientCertificateConfig")
    def client_certificate_config(self) -> Optional['outputs.DomainHttpsConfigClientCertificateConfig']:
        """
        Client certificate configuration information.
        """
        return pulumi.get(self, "client_certificate_config")

    @property
    @pulumi.getter(name="forceRedirect")
    def force_redirect(self) -> Optional['outputs.DomainHttpsConfigForceRedirect']:
        """
        Configuration of forced HTTP or HTTPS redirects.
        """
        return pulumi.get(self, "force_redirect")

    @property
    @pulumi.getter(name="http2Switch")
    def http2_switch(self) -> Optional[str]:
        """
        HTTP2 configuration switch. Valid values are `on` and `off`. and default value is `off`.
        """
        return pulumi.get(self, "http2_switch")

    @property
    @pulumi.getter(name="ocspStaplingSwitch")
    def ocsp_stapling_switch(self) -> Optional[str]:
        """
        OCSP configuration switch. Valid values are `on` and `off`. and default value is `off`.
        """
        return pulumi.get(self, "ocsp_stapling_switch")

    @property
    @pulumi.getter(name="serverCertificateConfig")
    def server_certificate_config(self) -> Optional['outputs.DomainHttpsConfigServerCertificateConfig']:
        """
        Server certificate configuration information.
        """
        return pulumi.get(self, "server_certificate_config")

    @property
    @pulumi.getter(name="spdySwitch")
    def spdy_switch(self) -> Optional[str]:
        """
        Spdy configuration switch. Valid values are `on` and `off`. and default value is `off`. This parameter is for white-list customer.
        """
        return pulumi.get(self, "spdy_switch")

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[Sequence[str]]:
        """
        Tls version settings, only support some Advanced domain names, support settings TLSv1, TLSV1.1, TLSV1.2, TLSv1.3, when modifying must open consecutive versions.
        """
        return pulumi.get(self, "tls_versions")

    @property
    @pulumi.getter(name="verifyClient")
    def verify_client(self) -> Optional[str]:
        """
        Client certificate authentication feature. Valid values are `on` and `off`. and default value is `off`.
        """
        return pulumi.get(self, "verify_client")


@pulumi.output_type
class DomainHttpsConfigClientCertificateConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateContent":
            suggest = "certificate_content"
        elif key == "certificateName":
            suggest = "certificate_name"
        elif key == "deployTime":
            suggest = "deploy_time"
        elif key == "expireTime":
            suggest = "expire_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainHttpsConfigClientCertificateConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainHttpsConfigClientCertificateConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainHttpsConfigClientCertificateConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_content: str,
                 certificate_name: Optional[str] = None,
                 deploy_time: Optional[str] = None,
                 expire_time: Optional[str] = None):
        """
        :param str certificate_content: Client Certificate PEM format, requires Base64 encoding.
        :param str certificate_name: Client certificate name.
        :param str deploy_time: Deploy time of client certificate.
        :param str expire_time: Signature expiration time in second. The maximum value is 630720000.
        """
        pulumi.set(__self__, "certificate_content", certificate_content)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if deploy_time is not None:
            pulumi.set(__self__, "deploy_time", deploy_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)

    @property
    @pulumi.getter(name="certificateContent")
    def certificate_content(self) -> str:
        """
        Client Certificate PEM format, requires Base64 encoding.
        """
        return pulumi.get(self, "certificate_content")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[str]:
        """
        Client certificate name.
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter(name="deployTime")
    def deploy_time(self) -> Optional[str]:
        """
        Deploy time of client certificate.
        """
        return pulumi.get(self, "deploy_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[str]:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")


@pulumi.output_type
class DomainHttpsConfigForceRedirect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "carryHeaders":
            suggest = "carry_headers"
        elif key == "redirectStatusCode":
            suggest = "redirect_status_code"
        elif key == "redirectType":
            suggest = "redirect_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainHttpsConfigForceRedirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainHttpsConfigForceRedirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainHttpsConfigForceRedirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 carry_headers: Optional[str] = None,
                 redirect_status_code: Optional[int] = None,
                 redirect_type: Optional[str] = None,
                 switch: Optional[str] = None):
        """
        :param str carry_headers: Whether to return the newly added header during force redirection. Values: `on`, `off`.
        :param int redirect_status_code: Forced redirect status code. Valid values are `301` and `302`. When `switch` setting `off`, this property does not need to be set or set to `302`. Default value is `302`.
        :param str redirect_type: Forced redirect type. Valid values are `http` and `https`. `http` means a forced redirect from HTTPS to HTTP, `https` means a forced redirect from HTTP to HTTPS. When `switch` setting `off`, this property does not need to be set or set to `http`. Default value is `http`.
        :param str switch: Forced redirect configuration switch. Valid values are `on` and `off`. Default value is `off`.
        """
        if carry_headers is not None:
            pulumi.set(__self__, "carry_headers", carry_headers)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)
        if redirect_type is not None:
            pulumi.set(__self__, "redirect_type", redirect_type)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="carryHeaders")
    def carry_headers(self) -> Optional[str]:
        """
        Whether to return the newly added header during force redirection. Values: `on`, `off`.
        """
        return pulumi.get(self, "carry_headers")

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[int]:
        """
        Forced redirect status code. Valid values are `301` and `302`. When `switch` setting `off`, this property does not need to be set or set to `302`. Default value is `302`.
        """
        return pulumi.get(self, "redirect_status_code")

    @property
    @pulumi.getter(name="redirectType")
    def redirect_type(self) -> Optional[str]:
        """
        Forced redirect type. Valid values are `http` and `https`. `http` means a forced redirect from HTTPS to HTTP, `https` means a forced redirect from HTTP to HTTPS. When `switch` setting `off`, this property does not need to be set or set to `http`. Default value is `http`.
        """
        return pulumi.get(self, "redirect_type")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Forced redirect configuration switch. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class DomainHttpsConfigServerCertificateConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateContent":
            suggest = "certificate_content"
        elif key == "certificateId":
            suggest = "certificate_id"
        elif key == "certificateName":
            suggest = "certificate_name"
        elif key == "deployTime":
            suggest = "deploy_time"
        elif key == "expireTime":
            suggest = "expire_time"
        elif key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainHttpsConfigServerCertificateConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainHttpsConfigServerCertificateConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainHttpsConfigServerCertificateConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_content: Optional[str] = None,
                 certificate_id: Optional[str] = None,
                 certificate_name: Optional[str] = None,
                 deploy_time: Optional[str] = None,
                 expire_time: Optional[str] = None,
                 message: Optional[str] = None,
                 private_key: Optional[str] = None):
        """
        :param str certificate_content: Server certificate information. This is required when uploading an external certificate, which should contain the complete certificate chain.
        :param str certificate_id: Server certificate ID.
        :param str certificate_name: Server certificate name.
        :param str deploy_time: Deploy time of server certificate.
        :param str expire_time: Signature expiration time in second. The maximum value is 630720000.
        :param str message: Certificate remarks.
        :param str private_key: Server key information. This is required when uploading an external certificate.
        """
        if certificate_content is not None:
            pulumi.set(__self__, "certificate_content", certificate_content)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if deploy_time is not None:
            pulumi.set(__self__, "deploy_time", deploy_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter(name="certificateContent")
    def certificate_content(self) -> Optional[str]:
        """
        Server certificate information. This is required when uploading an external certificate, which should contain the complete certificate chain.
        """
        return pulumi.get(self, "certificate_content")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[str]:
        """
        Server certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[str]:
        """
        Server certificate name.
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter(name="deployTime")
    def deploy_time(self) -> Optional[str]:
        """
        Deploy time of server certificate.
        """
        return pulumi.get(self, "deploy_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[str]:
        """
        Signature expiration time in second. The maximum value is 630720000.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Certificate remarks.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        """
        Server key information. This is required when uploading an external certificate.
        """
        return pulumi.get(self, "private_key")


@pulumi.output_type
class DomainHwPrivateAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainHwPrivateAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainHwPrivateAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainHwPrivateAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 access_key: Optional[str] = None,
                 bucket: Optional[str] = None,
                 secret_key: Optional[str] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param str access_key: Access ID.
        :param str bucket: Bucket.
        :param str secret_key: Key.
        """
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Key.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class DomainIpFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterRules":
            suggest = "filter_rules"
        elif key == "filterType":
            suggest = "filter_type"
        elif key == "returnCode":
            suggest = "return_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainIpFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainIpFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainIpFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 filter_rules: Optional[Sequence['outputs.DomainIpFilterFilterRule']] = None,
                 filter_type: Optional[str] = None,
                 filters: Optional[Sequence[str]] = None,
                 return_code: Optional[int] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param Sequence['DomainIpFilterFilterRuleArgs'] filter_rules: Ip filter rules, This feature is only available to selected beta customers.
        :param str filter_type: IP `blacklist`/`whitelist` type.
        :param Sequence[str] filters: Ip filter list, Supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
        :param int return_code: Return code, available values: 400-499.
        """
        pulumi.set(__self__, "switch", switch)
        if filter_rules is not None:
            pulumi.set(__self__, "filter_rules", filter_rules)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if return_code is not None:
            pulumi.set(__self__, "return_code", return_code)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="filterRules")
    def filter_rules(self) -> Optional[Sequence['outputs.DomainIpFilterFilterRule']]:
        """
        Ip filter rules, This feature is only available to selected beta customers.
        """
        return pulumi.get(self, "filter_rules")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        """
        IP `blacklist`/`whitelist` type.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence[str]]:
        """
        Ip filter list, Supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="returnCode")
    def return_code(self) -> Optional[int]:
        """
        Return code, available values: 400-499.
        """
        return pulumi.get(self, "return_code")


@pulumi.output_type
class DomainIpFilterFilterRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"
        elif key == "rulePaths":
            suggest = "rule_paths"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainIpFilterFilterRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainIpFilterFilterRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainIpFilterFilterRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 filters: Sequence[str],
                 rule_paths: Sequence[str],
                 rule_type: str):
        """
        :param str filter_type: Ip filter `blacklist`/`whitelist` type of filter rules.
        :param Sequence[str] filters: Ip filter rule list, supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
        :param Sequence[str] rule_paths: Content list for each `rule_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        :param str rule_type: Ip filter rule type of filter rules, available: `all`, `file`, `directory`, `path`.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        """
        Ip filter `blacklist`/`whitelist` type of filter rules.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def filters(self) -> Sequence[str]:
        """
        Ip filter rule list, supports IPs in X.X.X.X format, or /8, /16, /24 format IP ranges. Up to 50 allowlists or blocklists can be entered.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Sequence[str]:
        """
        Content list for each `rule_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        """
        return pulumi.get(self, "rule_paths")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Ip filter rule type of filter rules, available: `all`, `file`, `directory`, `path`.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class DomainIpFreqLimit(dict):
    def __init__(__self__, *,
                 switch: str,
                 qps: Optional[int] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param int qps: Sets the limited number of requests per second, 514 will be returned for requests that exceed the limit.
        """
        pulumi.set(__self__, "switch", switch)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def qps(self) -> Optional[int]:
        """
        Sets the limited number of requests per second, 514 will be returned for requests that exceed the limit.
        """
        return pulumi.get(self, "qps")


@pulumi.output_type
class DomainMaxAge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAgeRules":
            suggest = "max_age_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainMaxAge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainMaxAge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainMaxAge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 max_age_rules: Optional[Sequence['outputs.DomainMaxAgeMaxAgeRule']] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param Sequence['DomainMaxAgeMaxAgeRuleArgs'] max_age_rules: List of Max Age rule configuration.
        """
        pulumi.set(__self__, "switch", switch)
        if max_age_rules is not None:
            pulumi.set(__self__, "max_age_rules", max_age_rules)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="maxAgeRules")
    def max_age_rules(self) -> Optional[Sequence['outputs.DomainMaxAgeMaxAgeRule']]:
        """
        List of Max Age rule configuration.
        """
        return pulumi.get(self, "max_age_rules")


@pulumi.output_type
class DomainMaxAgeMaxAgeRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAgeContents":
            suggest = "max_age_contents"
        elif key == "maxAgeTime":
            suggest = "max_age_time"
        elif key == "maxAgeType":
            suggest = "max_age_type"
        elif key == "followOrigin":
            suggest = "follow_origin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainMaxAgeMaxAgeRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainMaxAgeMaxAgeRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainMaxAgeMaxAgeRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_age_contents: Sequence[str],
                 max_age_time: int,
                 max_age_type: str,
                 follow_origin: Optional[str] = None):
        """
        :param Sequence[str] max_age_contents: List of rule paths for each `max_age_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        :param int max_age_time: Max Age time in seconds, this can set to `0` that stands for no cache.
        :param str max_age_type: The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
        :param str follow_origin: Whether to follow origin, values: `on`/`off`, if set to `on`, the `max_age_time` will be ignored.
        """
        pulumi.set(__self__, "max_age_contents", max_age_contents)
        pulumi.set(__self__, "max_age_time", max_age_time)
        pulumi.set(__self__, "max_age_type", max_age_type)
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)

    @property
    @pulumi.getter(name="maxAgeContents")
    def max_age_contents(self) -> Sequence[str]:
        """
        List of rule paths for each `max_age_type`: `*` for `all`, file ext like `jpg` for `file`, `/dir/like/` for `directory` and `/path/index.html` for `path`.
        """
        return pulumi.get(self, "max_age_contents")

    @property
    @pulumi.getter(name="maxAgeTime")
    def max_age_time(self) -> int:
        """
        Max Age time in seconds, this can set to `0` that stands for no cache.
        """
        return pulumi.get(self, "max_age_time")

    @property
    @pulumi.getter(name="maxAgeType")
    def max_age_type(self) -> str:
        """
        The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
        """
        return pulumi.get(self, "max_age_type")

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[str]:
        """
        Whether to follow origin, values: `on`/`off`, if set to `on`, the `max_age_time` will be ignored.
        """
        return pulumi.get(self, "follow_origin")


@pulumi.output_type
class DomainOrigin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originLists":
            suggest = "origin_lists"
        elif key == "originType":
            suggest = "origin_type"
        elif key == "backupOriginLists":
            suggest = "backup_origin_lists"
        elif key == "backupOriginType":
            suggest = "backup_origin_type"
        elif key == "backupServerName":
            suggest = "backup_server_name"
        elif key == "cosPrivateAccess":
            suggest = "cos_private_access"
        elif key == "originCompany":
            suggest = "origin_company"
        elif key == "originPullProtocol":
            suggest = "origin_pull_protocol"
        elif key == "serverName":
            suggest = "server_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainOrigin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainOrigin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainOrigin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 origin_lists: Sequence[str],
                 origin_type: str,
                 backup_origin_lists: Optional[Sequence[str]] = None,
                 backup_origin_type: Optional[str] = None,
                 backup_server_name: Optional[str] = None,
                 cos_private_access: Optional[str] = None,
                 origin_company: Optional[str] = None,
                 origin_pull_protocol: Optional[str] = None,
                 server_name: Optional[str] = None):
        """
        :param Sequence[str] origin_lists: Master origin server list. Valid values can be ip or domain name. When modifying the origin server, you need to enter the corresponding `origin_type`.
        :param str origin_type: Master origin server type. The following types are supported: `domain`: Domain name, `domainv6`: IPv6 domain name, `cos`: COS bucket address, `third_party`: Third-party object storage origin, `igtm`: IGTM origin, `ip`: IP address, `ipv6`: One IPv6 address, `ip_ipv6`: Multiple IPv4 addresses and one IPv6 address, `ip_domain`: IP addresses and domain names (only available to beta users), `ip_domainv6`: Multiple IPv4 addresses and one IPv6 domain name, `ipv6_domain`: Multiple IPv6 addresses and one domain name, `ipv6_domainv6`: Multiple IPv6 addresses and one IPv6 domain name, `domain_domainv6`: Multiple IPv4 domain names and one IPv6 domain name, `ip_ipv6_domain`: Multiple IPv4 and IPv6 addresses and one domain name, `ip_ipv6_domainv6`: Multiple IPv4 and IPv6 addresses and one IPv6 domain name, `ip_domain_domainv6`: Multiple IPv4 addresses and IPv4 domain names and one IPv6 domain name, `ipv6_domain_domainv6`: Multiple IPv4 domain names and IPv6 addresses and one IPv6 domain name, `ip_ipv6_domain_domainv6`: Multiple IPv4 and IPv6 addresses and IPv4 domain names and one IPv6 domain name.
        :param Sequence[str] backup_origin_lists: Backup origin server list. Valid values can be ip or domain name. When modifying the backup origin server, you need to enter the corresponding `backup_origin_type`.
        :param str backup_origin_type: Backup origin server type, which supports the following types: `domain`: domain name type, `ip`: IP list used as origin server, `ipv6_domain`: Multiple IPv6 addresses and one domain name, `ip_ipv6`: Multiple IPv4 addresses and one IPv6 address, `ip_ipv6_domain`: Multiple IPv4 and IPv6 addresses and one domain name.
        :param str backup_server_name: Host header used when accessing the backup origin server. If left empty, the ServerName of master origin server will be used by default.
        :param str cos_private_access: When OriginType is COS, you can specify if access to private buckets is allowed. Valid values are `on` and `off`. and default value is `off`.
        :param str origin_company: Object storage back to the source vendor. Required when the source station type is a third-party storage source station (third_party). Optional values include the following: `aws_s3`: AWS S3; `ali_oss`: Alibaba Cloud OSS; `hw_obs`: Huawei OBS; `qiniu_kodo`: Qiniu Cloud kodo; `others`: other vendors' object storage, only supports object storage compatible with AWS signature algorithm, such as Tencent Cloud Financial Zone COS. Example value: `hw_obs`.
        :param str origin_pull_protocol: Origin-pull protocol configuration. `http`: forced HTTP origin-pull, `follow`: protocol follow origin-pull, `https`: forced HTTPS origin-pull. This only supports origin server port 443 for origin-pull.
        :param str server_name: Host header used when accessing the master origin server. If left empty, the acceleration domain name will be used by default.
        """
        pulumi.set(__self__, "origin_lists", origin_lists)
        pulumi.set(__self__, "origin_type", origin_type)
        if backup_origin_lists is not None:
            pulumi.set(__self__, "backup_origin_lists", backup_origin_lists)
        if backup_origin_type is not None:
            pulumi.set(__self__, "backup_origin_type", backup_origin_type)
        if backup_server_name is not None:
            pulumi.set(__self__, "backup_server_name", backup_server_name)
        if cos_private_access is not None:
            pulumi.set(__self__, "cos_private_access", cos_private_access)
        if origin_company is not None:
            pulumi.set(__self__, "origin_company", origin_company)
        if origin_pull_protocol is not None:
            pulumi.set(__self__, "origin_pull_protocol", origin_pull_protocol)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="originLists")
    def origin_lists(self) -> Sequence[str]:
        """
        Master origin server list. Valid values can be ip or domain name. When modifying the origin server, you need to enter the corresponding `origin_type`.
        """
        return pulumi.get(self, "origin_lists")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> str:
        """
        Master origin server type. The following types are supported: `domain`: Domain name, `domainv6`: IPv6 domain name, `cos`: COS bucket address, `third_party`: Third-party object storage origin, `igtm`: IGTM origin, `ip`: IP address, `ipv6`: One IPv6 address, `ip_ipv6`: Multiple IPv4 addresses and one IPv6 address, `ip_domain`: IP addresses and domain names (only available to beta users), `ip_domainv6`: Multiple IPv4 addresses and one IPv6 domain name, `ipv6_domain`: Multiple IPv6 addresses and one domain name, `ipv6_domainv6`: Multiple IPv6 addresses and one IPv6 domain name, `domain_domainv6`: Multiple IPv4 domain names and one IPv6 domain name, `ip_ipv6_domain`: Multiple IPv4 and IPv6 addresses and one domain name, `ip_ipv6_domainv6`: Multiple IPv4 and IPv6 addresses and one IPv6 domain name, `ip_domain_domainv6`: Multiple IPv4 addresses and IPv4 domain names and one IPv6 domain name, `ipv6_domain_domainv6`: Multiple IPv4 domain names and IPv6 addresses and one IPv6 domain name, `ip_ipv6_domain_domainv6`: Multiple IPv4 and IPv6 addresses and IPv4 domain names and one IPv6 domain name.
        """
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter(name="backupOriginLists")
    def backup_origin_lists(self) -> Optional[Sequence[str]]:
        """
        Backup origin server list. Valid values can be ip or domain name. When modifying the backup origin server, you need to enter the corresponding `backup_origin_type`.
        """
        return pulumi.get(self, "backup_origin_lists")

    @property
    @pulumi.getter(name="backupOriginType")
    def backup_origin_type(self) -> Optional[str]:
        """
        Backup origin server type, which supports the following types: `domain`: domain name type, `ip`: IP list used as origin server, `ipv6_domain`: Multiple IPv6 addresses and one domain name, `ip_ipv6`: Multiple IPv4 addresses and one IPv6 address, `ip_ipv6_domain`: Multiple IPv4 and IPv6 addresses and one domain name.
        """
        return pulumi.get(self, "backup_origin_type")

    @property
    @pulumi.getter(name="backupServerName")
    def backup_server_name(self) -> Optional[str]:
        """
        Host header used when accessing the backup origin server. If left empty, the ServerName of master origin server will be used by default.
        """
        return pulumi.get(self, "backup_server_name")

    @property
    @pulumi.getter(name="cosPrivateAccess")
    def cos_private_access(self) -> Optional[str]:
        """
        When OriginType is COS, you can specify if access to private buckets is allowed. Valid values are `on` and `off`. and default value is `off`.
        """
        return pulumi.get(self, "cos_private_access")

    @property
    @pulumi.getter(name="originCompany")
    def origin_company(self) -> Optional[str]:
        """
        Object storage back to the source vendor. Required when the source station type is a third-party storage source station (third_party). Optional values include the following: `aws_s3`: AWS S3; `ali_oss`: Alibaba Cloud OSS; `hw_obs`: Huawei OBS; `qiniu_kodo`: Qiniu Cloud kodo; `others`: other vendors' object storage, only supports object storage compatible with AWS signature algorithm, such as Tencent Cloud Financial Zone COS. Example value: `hw_obs`.
        """
        return pulumi.get(self, "origin_company")

    @property
    @pulumi.getter(name="originPullProtocol")
    def origin_pull_protocol(self) -> Optional[str]:
        """
        Origin-pull protocol configuration. `http`: forced HTTP origin-pull, `follow`: protocol follow origin-pull, `https`: forced HTTPS origin-pull. This only supports origin server port 443 for origin-pull.
        """
        return pulumi.get(self, "origin_pull_protocol")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        """
        Host header used when accessing the master origin server. If left empty, the acceleration domain name will be used by default.
        """
        return pulumi.get(self, "server_name")


@pulumi.output_type
class DomainOriginPullOptimization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optimizationType":
            suggest = "optimization_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainOriginPullOptimization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainOriginPullOptimization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainOriginPullOptimization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 optimization_type: Optional[str] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param str optimization_type: Optimization type, values: `OVToCN` - Overseas to CN, `CNToOV` CN to Overseas.
        """
        pulumi.set(__self__, "switch", switch)
        if optimization_type is not None:
            pulumi.set(__self__, "optimization_type", optimization_type)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="optimizationType")
    def optimization_type(self) -> Optional[str]:
        """
        Optimization type, values: `OVToCN` - Overseas to CN, `CNToOV` CN to Overseas.
        """
        return pulumi.get(self, "optimization_type")


@pulumi.output_type
class DomainOriginPullTimeout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectTimeout":
            suggest = "connect_timeout"
        elif key == "receiveTimeout":
            suggest = "receive_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainOriginPullTimeout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainOriginPullTimeout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainOriginPullTimeout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_timeout: int,
                 receive_timeout: int):
        """
        :param int connect_timeout: The origin-pull connection timeout (in seconds). Valid range: 5-60.
        :param int receive_timeout: The origin-pull receipt timeout (in seconds). Valid range: 10-60.
        """
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "receive_timeout", receive_timeout)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> int:
        """
        The origin-pull connection timeout (in seconds). Valid range: 5-60.
        """
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="receiveTimeout")
    def receive_timeout(self) -> int:
        """
        The origin-pull receipt timeout (in seconds). Valid range: 10-60.
        """
        return pulumi.get(self, "receive_timeout")


@pulumi.output_type
class DomainOssPrivateAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainOssPrivateAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainOssPrivateAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainOssPrivateAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 access_key: Optional[str] = None,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None,
                 secret_key: Optional[str] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param str access_key: Access ID.
        :param str bucket: Bucket.
        :param str region: Region.
        :param str secret_key: Key.
        """
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Key.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class DomainOthersPrivateAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainOthersPrivateAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainOthersPrivateAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainOthersPrivateAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 access_key: Optional[str] = None,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None,
                 secret_key: Optional[str] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param str access_key: Access ID.
        :param str bucket: Bucket.
        :param str region: Region.
        :param str secret_key: Key.
        """
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Key.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class DomainPostMaxSize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSize":
            suggest = "max_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainPostMaxSize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainPostMaxSize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainPostMaxSize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 max_size: Optional[int] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param int max_size: Maximum size in MB, value range is `[1, 200]`.
        """
        pulumi.set(__self__, "switch", switch)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        """
        Maximum size in MB, value range is `[1, 200]`.
        """
        return pulumi.get(self, "max_size")


@pulumi.output_type
class DomainQnPrivateAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainQnPrivateAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainQnPrivateAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainQnPrivateAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 access_key: Optional[str] = None,
                 secret_key: Optional[str] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param str access_key: Access ID.
        :param str secret_key: Key.
        """
        pulumi.set(__self__, "switch", switch)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Access ID.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Key.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class DomainReferer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refererRules":
            suggest = "referer_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainReferer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainReferer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainReferer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 referer_rules: Optional[Sequence['outputs.DomainRefererRefererRule']] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param Sequence['DomainRefererRefererRuleArgs'] referer_rules: List of referer rules.
        """
        pulumi.set(__self__, "switch", switch)
        if referer_rules is not None:
            pulumi.set(__self__, "referer_rules", referer_rules)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="refererRules")
    def referer_rules(self) -> Optional[Sequence['outputs.DomainRefererRefererRule']]:
        """
        List of referer rules.
        """
        return pulumi.get(self, "referer_rules")


@pulumi.output_type
class DomainRefererRefererRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEmpty":
            suggest = "allow_empty"
        elif key == "refererType":
            suggest = "referer_type"
        elif key == "rulePaths":
            suggest = "rule_paths"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainRefererRefererRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainRefererRefererRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainRefererRefererRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_empty: bool,
                 referer_type: str,
                 referers: Sequence[str],
                 rule_paths: Sequence[str],
                 rule_type: str):
        """
        :param bool allow_empty: Whether to allow emptpy.
        :param str referer_type: Referer type.
        :param Sequence[str] referers: Referer list.
        :param Sequence[str] rule_paths: Referer rule path list.
        :param str rule_type: Referer rule type.
        """
        pulumi.set(__self__, "allow_empty", allow_empty)
        pulumi.set(__self__, "referer_type", referer_type)
        pulumi.set(__self__, "referers", referers)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> bool:
        """
        Whether to allow emptpy.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter(name="refererType")
    def referer_type(self) -> str:
        """
        Referer type.
        """
        return pulumi.get(self, "referer_type")

    @property
    @pulumi.getter
    def referers(self) -> Sequence[str]:
        """
        Referer list.
        """
        return pulumi.get(self, "referers")

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Sequence[str]:
        """
        Referer rule path list.
        """
        return pulumi.get(self, "rule_paths")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Referer rule type.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class DomainRequestHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerRules":
            suggest = "header_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainRequestHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainRequestHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainRequestHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_rules: Optional[Sequence['outputs.DomainRequestHeaderHeaderRule']] = None,
                 switch: Optional[str] = None):
        """
        :param Sequence['DomainRequestHeaderHeaderRuleArgs'] header_rules: Custom request header configuration rules.
        :param str switch: Custom request header configuration switch. Valid values are `on` and `off`. and default value is `off`.
        """
        if header_rules is not None:
            pulumi.set(__self__, "header_rules", header_rules)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="headerRules")
    def header_rules(self) -> Optional[Sequence['outputs.DomainRequestHeaderHeaderRule']]:
        """
        Custom request header configuration rules.
        """
        return pulumi.get(self, "header_rules")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Custom request header configuration switch. Valid values are `on` and `off`. and default value is `off`.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class DomainRequestHeaderHeaderRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerMode":
            suggest = "header_mode"
        elif key == "headerName":
            suggest = "header_name"
        elif key == "headerValue":
            suggest = "header_value"
        elif key == "rulePaths":
            suggest = "rule_paths"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainRequestHeaderHeaderRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainRequestHeaderHeaderRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainRequestHeaderHeaderRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_mode: str,
                 header_name: str,
                 header_value: str,
                 rule_paths: Sequence[str],
                 rule_type: str):
        """
        :param str header_mode: Response header mode.
        :param str header_name: response header name of rule.
        :param str header_value: response header value of rule.
        :param Sequence[str] rule_paths: response rule paths of rule.
        :param str rule_type: response rule type of rule.
        """
        pulumi.set(__self__, "header_mode", header_mode)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="headerMode")
    def header_mode(self) -> str:
        """
        Response header mode.
        """
        return pulumi.get(self, "header_mode")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        response header name of rule.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        response header value of rule.
        """
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Sequence[str]:
        """
        response rule paths of rule.
        """
        return pulumi.get(self, "rule_paths")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        response rule type of rule.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class DomainResponseHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerRules":
            suggest = "header_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainResponseHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainResponseHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainResponseHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 header_rules: Optional[Sequence['outputs.DomainResponseHeaderHeaderRule']] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param Sequence['DomainResponseHeaderHeaderRuleArgs'] header_rules: List of response header rule.
        """
        pulumi.set(__self__, "switch", switch)
        if header_rules is not None:
            pulumi.set(__self__, "header_rules", header_rules)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="headerRules")
    def header_rules(self) -> Optional[Sequence['outputs.DomainResponseHeaderHeaderRule']]:
        """
        List of response header rule.
        """
        return pulumi.get(self, "header_rules")


@pulumi.output_type
class DomainResponseHeaderHeaderRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerMode":
            suggest = "header_mode"
        elif key == "headerName":
            suggest = "header_name"
        elif key == "headerValue":
            suggest = "header_value"
        elif key == "rulePaths":
            suggest = "rule_paths"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainResponseHeaderHeaderRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainResponseHeaderHeaderRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainResponseHeaderHeaderRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_mode: str,
                 header_name: str,
                 header_value: str,
                 rule_paths: Sequence[str],
                 rule_type: str):
        """
        :param str header_mode: Response header mode.
        :param str header_name: response header name of rule.
        :param str header_value: response header value of rule.
        :param Sequence[str] rule_paths: response rule paths of rule.
        :param str rule_type: response rule type of rule.
        """
        pulumi.set(__self__, "header_mode", header_mode)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="headerMode")
    def header_mode(self) -> str:
        """
        Response header mode.
        """
        return pulumi.get(self, "header_mode")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        response header name of rule.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        response header value of rule.
        """
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Sequence[str]:
        """
        response rule paths of rule.
        """
        return pulumi.get(self, "rule_paths")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        response rule type of rule.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class DomainRuleCach(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheTime":
            suggest = "cache_time"
        elif key == "compareMaxAge":
            suggest = "compare_max_age"
        elif key == "followOriginSwitch":
            suggest = "follow_origin_switch"
        elif key == "heuristicCacheSwitch":
            suggest = "heuristic_cache_switch"
        elif key == "heuristicCacheTime":
            suggest = "heuristic_cache_time"
        elif key == "ignoreCacheControl":
            suggest = "ignore_cache_control"
        elif key == "ignoreSetCookie":
            suggest = "ignore_set_cookie"
        elif key == "noCacheSwitch":
            suggest = "no_cache_switch"
        elif key == "reValidate":
            suggest = "re_validate"
        elif key == "rulePaths":
            suggest = "rule_paths"
        elif key == "ruleType":
            suggest = "rule_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainRuleCach. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainRuleCach.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainRuleCach.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_time: int,
                 compare_max_age: Optional[str] = None,
                 follow_origin_switch: Optional[str] = None,
                 heuristic_cache_switch: Optional[str] = None,
                 heuristic_cache_time: Optional[int] = None,
                 ignore_cache_control: Optional[str] = None,
                 ignore_set_cookie: Optional[str] = None,
                 no_cache_switch: Optional[str] = None,
                 re_validate: Optional[str] = None,
                 rule_paths: Optional[Sequence[str]] = None,
                 rule_type: Optional[str] = None,
                 switch: Optional[str] = None):
        """
        :param int cache_time: Cache expiration time setting, the unit is second, the maximum can be set to 365 days.
        :param str compare_max_age: Advanced cache expiration configuration. When it is turned on, it will compare the max-age value returned by the origin site with the cache expiration time set in CacheRules, and take the minimum value to cache at the node. Valid values are `on` and `off`. Default value is `off`.
        :param str follow_origin_switch: Follow the source station configuration switch. Valid values are `on` and `off`.
        :param str heuristic_cache_switch: Specify whether to enable heuristic cache, only available while `follow_origin_switch` enabled, values: `on`, `off` (Default).
        :param int heuristic_cache_time: Specify heuristic cache time in second, only available while `follow_origin_switch` and `heuristic_cache_switch` enabled.
        :param str ignore_cache_control: Force caching. After opening, the no-store and no-cache resources returned by the origin site will also be cached in accordance with the CacheRules rules. Valid values are `on` and `off`. Default value is `off`.
        :param str ignore_set_cookie: Ignore the Set-Cookie header of the origin site. Valid values are `on` and `off`. Default value is `off`. This parameter is for white-list customer.
        :param str no_cache_switch: Cache configuration switch. Valid values are `on` and `off`.
        :param str re_validate: Always check back to origin. Valid values are `on` and `off`. Default value is `off`.
        :param Sequence[str] rule_paths: Matching content under the corresponding type of CacheType: `all`: fill *, `file`: fill in the suffix name, such as jpg, txt, `directory`: fill in the path, such as /xxx/test, `path`: fill in the absolute path, such as /xxx/test.html, `index`: fill /.
        :param str rule_type: Rule type. The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
        :param str switch: Cache configuration switch. Valid values are `on` and `off`.
        """
        pulumi.set(__self__, "cache_time", cache_time)
        if compare_max_age is not None:
            pulumi.set(__self__, "compare_max_age", compare_max_age)
        if follow_origin_switch is not None:
            pulumi.set(__self__, "follow_origin_switch", follow_origin_switch)
        if heuristic_cache_switch is not None:
            pulumi.set(__self__, "heuristic_cache_switch", heuristic_cache_switch)
        if heuristic_cache_time is not None:
            pulumi.set(__self__, "heuristic_cache_time", heuristic_cache_time)
        if ignore_cache_control is not None:
            pulumi.set(__self__, "ignore_cache_control", ignore_cache_control)
        if ignore_set_cookie is not None:
            pulumi.set(__self__, "ignore_set_cookie", ignore_set_cookie)
        if no_cache_switch is not None:
            pulumi.set(__self__, "no_cache_switch", no_cache_switch)
        if re_validate is not None:
            pulumi.set(__self__, "re_validate", re_validate)
        if rule_paths is not None:
            pulumi.set(__self__, "rule_paths", rule_paths)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> int:
        """
        Cache expiration time setting, the unit is second, the maximum can be set to 365 days.
        """
        return pulumi.get(self, "cache_time")

    @property
    @pulumi.getter(name="compareMaxAge")
    def compare_max_age(self) -> Optional[str]:
        """
        Advanced cache expiration configuration. When it is turned on, it will compare the max-age value returned by the origin site with the cache expiration time set in CacheRules, and take the minimum value to cache at the node. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "compare_max_age")

    @property
    @pulumi.getter(name="followOriginSwitch")
    def follow_origin_switch(self) -> Optional[str]:
        """
        Follow the source station configuration switch. Valid values are `on` and `off`.
        """
        return pulumi.get(self, "follow_origin_switch")

    @property
    @pulumi.getter(name="heuristicCacheSwitch")
    def heuristic_cache_switch(self) -> Optional[str]:
        """
        Specify whether to enable heuristic cache, only available while `follow_origin_switch` enabled, values: `on`, `off` (Default).
        """
        return pulumi.get(self, "heuristic_cache_switch")

    @property
    @pulumi.getter(name="heuristicCacheTime")
    def heuristic_cache_time(self) -> Optional[int]:
        """
        Specify heuristic cache time in second, only available while `follow_origin_switch` and `heuristic_cache_switch` enabled.
        """
        return pulumi.get(self, "heuristic_cache_time")

    @property
    @pulumi.getter(name="ignoreCacheControl")
    def ignore_cache_control(self) -> Optional[str]:
        """
        Force caching. After opening, the no-store and no-cache resources returned by the origin site will also be cached in accordance with the CacheRules rules. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "ignore_cache_control")

    @property
    @pulumi.getter(name="ignoreSetCookie")
    def ignore_set_cookie(self) -> Optional[str]:
        """
        Ignore the Set-Cookie header of the origin site. Valid values are `on` and `off`. Default value is `off`. This parameter is for white-list customer.
        """
        return pulumi.get(self, "ignore_set_cookie")

    @property
    @pulumi.getter(name="noCacheSwitch")
    def no_cache_switch(self) -> Optional[str]:
        """
        Cache configuration switch. Valid values are `on` and `off`.
        """
        return pulumi.get(self, "no_cache_switch")

    @property
    @pulumi.getter(name="reValidate")
    def re_validate(self) -> Optional[str]:
        """
        Always check back to origin. Valid values are `on` and `off`. Default value is `off`.
        """
        return pulumi.get(self, "re_validate")

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Optional[Sequence[str]]:
        """
        Matching content under the corresponding type of CacheType: `all`: fill *, `file`: fill in the suffix name, such as jpg, txt, `directory`: fill in the path, such as /xxx/test, `path`: fill in the absolute path, such as /xxx/test.html, `index`: fill /.
        """
        return pulumi.get(self, "rule_paths")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        """
        Rule type. The following types are supported: `all`: all documents take effect, `file`: the specified file suffix takes effect, `directory`: the specified path takes effect, `path`: specify the absolute path to take effect, `index`: home page.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Cache configuration switch. Valid values are `on` and `off`.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class DomainStatusCodeCache(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheRules":
            suggest = "cache_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainStatusCodeCache. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainStatusCodeCache.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainStatusCodeCache.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 cache_rules: Optional[Sequence['outputs.DomainStatusCodeCacheCacheRule']] = None):
        """
        :param str switch: Configuration switch, available values: `on`, `off` (default).
        :param Sequence['DomainStatusCodeCacheCacheRuleArgs'] cache_rules: List of cache rule.
        """
        pulumi.set(__self__, "switch", switch)
        if cache_rules is not None:
            pulumi.set(__self__, "cache_rules", cache_rules)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Configuration switch, available values: `on`, `off` (default).
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="cacheRules")
    def cache_rules(self) -> Optional[Sequence['outputs.DomainStatusCodeCacheCacheRule']]:
        """
        List of cache rule.
        """
        return pulumi.get(self, "cache_rules")


@pulumi.output_type
class DomainStatusCodeCacheCacheRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheTime":
            suggest = "cache_time"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomainStatusCodeCacheCacheRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomainStatusCodeCacheCacheRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomainStatusCodeCacheCacheRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_time: int,
                 status_code: str):
        """
        :param int cache_time: Status code cache expiration time (in seconds).
        :param str status_code: Code of status cache. available values: `403`, `404`.
        """
        pulumi.set(__self__, "cache_time", cache_time)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> int:
        """
        Status code cache expiration time (in seconds).
        """
        return pulumi.get(self, "cache_time")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> str:
        """
        Code of status cache. available values: `403`, `404`.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class UrlPurgePurgeHistory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "flushType":
            suggest = "flush_type"
        elif key == "purgeType":
            suggest = "purge_type"
        elif key == "taskId":
            suggest = "task_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UrlPurgePurgeHistory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UrlPurgePurgeHistory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UrlPurgePurgeHistory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_time: Optional[str] = None,
                 flush_type: Optional[str] = None,
                 purge_type: Optional[str] = None,
                 status: Optional[str] = None,
                 task_id: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str create_time: Purge task create time.
        :param str flush_type: Purge flush type of `flush` or `delete`.
        :param str purge_type: Purge category in of `url` or `path`.
        :param str status: Purge status of `fail`, `done`, `process`.
        :param str task_id: Task id of last operation.
        :param str url: Purge url.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if flush_type is not None:
            pulumi.set(__self__, "flush_type", flush_type)
        if purge_type is not None:
            pulumi.set(__self__, "purge_type", purge_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Purge task create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="flushType")
    def flush_type(self) -> Optional[str]:
        """
        Purge flush type of `flush` or `delete`.
        """
        return pulumi.get(self, "flush_type")

    @property
    @pulumi.getter(name="purgeType")
    def purge_type(self) -> Optional[str]:
        """
        Purge category in of `url` or `path`.
        """
        return pulumi.get(self, "purge_type")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Purge status of `fail`, `done`, `process`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[str]:
        """
        Task id of last operation.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Purge url.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class UrlPushPushHistory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "taskId":
            suggest = "task_id"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UrlPushPushHistory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UrlPushPushHistory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UrlPushPushHistory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area: Optional[str] = None,
                 create_time: Optional[str] = None,
                 percent: Optional[int] = None,
                 status: Optional[str] = None,
                 task_id: Optional[str] = None,
                 update_time: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str area: Specify push area. NOTE: only push same area cache contents.
        :param str create_time: Push task create time.
        :param int percent: Push progress in percent.
        :param str status: Push status of `fail`, `done`, `process` or `invalid` (4xx, 5xx response).
        :param str task_id: Push task id.
        :param str update_time: Push task update time.
        :param str url: Push url.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        """
        Specify push area. NOTE: only push same area cache contents.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Push task create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def percent(self) -> Optional[int]:
        """
        Push progress in percent.
        """
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Push status of `fail`, `done`, `process` or `invalid` (4xx, 5xx response).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[str]:
        """
        Push task id.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Push task update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Push url.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetDomainsDomainListResult(dict):
    def __init__(__self__, *,
                 area: str,
                 cname: str,
                 create_time: str,
                 domain: str,
                 full_url_cache: bool,
                 https_configs: Sequence['outputs.GetDomainsDomainListHttpsConfigResult'],
                 id: str,
                 origins: Sequence['outputs.GetDomainsDomainListOriginResult'],
                 project_id: int,
                 range_origin_switch: str,
                 request_headers: Sequence['outputs.GetDomainsDomainListRequestHeaderResult'],
                 rule_caches: Sequence['outputs.GetDomainsDomainListRuleCachResult'],
                 service_type: str,
                 status: str,
                 tags: Mapping[str, Any],
                 update_time: str):
        """
        :param str area: Acceleration region.
        :param str cname: CNAME address of domain name.
        :param str create_time: Domain name creation time.
        :param str domain: Acceleration domain name.
        :param bool full_url_cache: Whether to enable full-path cache.
        :param Sequence['GetDomainsDomainListHttpsConfigArgs'] https_configs: HTTPS acceleration configuration. It's a list and consist of at most one item.
        :param str id: Domain name ID.
        :param Sequence['GetDomainsDomainListOriginArgs'] origins: Origin server configuration.
        :param int project_id: The project CDN belongs to.
        :param str range_origin_switch: Sharding back to source configuration switch.
        :param Sequence['GetDomainsDomainListRequestHeaderArgs'] request_headers: Request header configuration.
        :param Sequence['GetDomainsDomainListRuleCachArgs'] rule_caches: Advanced path cache configuration.
        :param str service_type: Service type of acceleration domain name. The available value include `web`, `download` and `media`.
        :param str status: Acceleration service status.
        :param Mapping[str, Any] tags: Tags of cdn domain.
        :param str update_time: Last modified time of domain name.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "full_url_cache", full_url_cache)
        pulumi.set(__self__, "https_configs", https_configs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "origins", origins)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "range_origin_switch", range_origin_switch)
        pulumi.set(__self__, "request_headers", request_headers)
        pulumi.set(__self__, "rule_caches", rule_caches)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def area(self) -> str:
        """
        Acceleration region.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def cname(self) -> str:
        """
        CNAME address of domain name.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Domain name creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Acceleration domain name.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> bool:
        """
        Whether to enable full-path cache.
        """
        return pulumi.get(self, "full_url_cache")

    @property
    @pulumi.getter(name="httpsConfigs")
    def https_configs(self) -> Sequence['outputs.GetDomainsDomainListHttpsConfigResult']:
        """
        HTTPS acceleration configuration. It's a list and consist of at most one item.
        """
        return pulumi.get(self, "https_configs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Domain name ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def origins(self) -> Sequence['outputs.GetDomainsDomainListOriginResult']:
        """
        Origin server configuration.
        """
        return pulumi.get(self, "origins")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        The project CDN belongs to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="rangeOriginSwitch")
    def range_origin_switch(self) -> str:
        """
        Sharding back to source configuration switch.
        """
        return pulumi.get(self, "range_origin_switch")

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Sequence['outputs.GetDomainsDomainListRequestHeaderResult']:
        """
        Request header configuration.
        """
        return pulumi.get(self, "request_headers")

    @property
    @pulumi.getter(name="ruleCaches")
    def rule_caches(self) -> Sequence['outputs.GetDomainsDomainListRuleCachResult']:
        """
        Advanced path cache configuration.
        """
        return pulumi.get(self, "rule_caches")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        """
        Service type of acceleration domain name. The available value include `web`, `download` and `media`.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Acceleration service status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of cdn domain.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Last modified time of domain name.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetDomainsDomainListHttpsConfigResult(dict):
    def __init__(__self__, *,
                 http2_switch: str,
                 https_switch: str,
                 ocsp_stapling_switch: str,
                 spdy_switch: str,
                 verify_client: str):
        """
        :param str http2_switch: HTTP2 configuration switch.
        :param str https_switch: HTTPS configuration. Valid values: `on`, `off` and `processing`.
        :param str ocsp_stapling_switch: OCSP configuration switch.
        :param str spdy_switch: Spdy configuration switch.
        :param str verify_client: Client certificate authentication feature.
        """
        pulumi.set(__self__, "http2_switch", http2_switch)
        pulumi.set(__self__, "https_switch", https_switch)
        pulumi.set(__self__, "ocsp_stapling_switch", ocsp_stapling_switch)
        pulumi.set(__self__, "spdy_switch", spdy_switch)
        pulumi.set(__self__, "verify_client", verify_client)

    @property
    @pulumi.getter(name="http2Switch")
    def http2_switch(self) -> str:
        """
        HTTP2 configuration switch.
        """
        return pulumi.get(self, "http2_switch")

    @property
    @pulumi.getter(name="httpsSwitch")
    def https_switch(self) -> str:
        """
        HTTPS configuration. Valid values: `on`, `off` and `processing`.
        """
        return pulumi.get(self, "https_switch")

    @property
    @pulumi.getter(name="ocspStaplingSwitch")
    def ocsp_stapling_switch(self) -> str:
        """
        OCSP configuration switch.
        """
        return pulumi.get(self, "ocsp_stapling_switch")

    @property
    @pulumi.getter(name="spdySwitch")
    def spdy_switch(self) -> str:
        """
        Spdy configuration switch.
        """
        return pulumi.get(self, "spdy_switch")

    @property
    @pulumi.getter(name="verifyClient")
    def verify_client(self) -> str:
        """
        Client certificate authentication feature.
        """
        return pulumi.get(self, "verify_client")


@pulumi.output_type
class GetDomainsDomainListOriginResult(dict):
    def __init__(__self__, *,
                 backup_origin_lists: Sequence[str],
                 backup_origin_type: str,
                 backup_server_name: str,
                 cos_private_access: str,
                 origin_lists: Sequence[str],
                 origin_pull_protocol: str,
                 origin_type: str,
                 server_name: str):
        """
        :param Sequence[str] backup_origin_lists: Backup origin server list.
        :param str backup_origin_type: Backup origin server type.
        :param str backup_server_name: Host header used when accessing the backup origin server. If left empty, the ServerName of master origin server will be used by default.
        :param str cos_private_access: When OriginType is COS, you can specify if access to private buckets is allowed.
        :param Sequence[str] origin_lists: Master origin server list.
        :param str origin_pull_protocol: Origin-pull protocol configuration. Valid values: `http`, `https` and `follow`.
        :param str origin_type: Master origin server type.
        :param str server_name: Host header used when accessing the master origin server. If left empty, the acceleration domain name will be used by default.
        """
        pulumi.set(__self__, "backup_origin_lists", backup_origin_lists)
        pulumi.set(__self__, "backup_origin_type", backup_origin_type)
        pulumi.set(__self__, "backup_server_name", backup_server_name)
        pulumi.set(__self__, "cos_private_access", cos_private_access)
        pulumi.set(__self__, "origin_lists", origin_lists)
        pulumi.set(__self__, "origin_pull_protocol", origin_pull_protocol)
        pulumi.set(__self__, "origin_type", origin_type)
        pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="backupOriginLists")
    def backup_origin_lists(self) -> Sequence[str]:
        """
        Backup origin server list.
        """
        return pulumi.get(self, "backup_origin_lists")

    @property
    @pulumi.getter(name="backupOriginType")
    def backup_origin_type(self) -> str:
        """
        Backup origin server type.
        """
        return pulumi.get(self, "backup_origin_type")

    @property
    @pulumi.getter(name="backupServerName")
    def backup_server_name(self) -> str:
        """
        Host header used when accessing the backup origin server. If left empty, the ServerName of master origin server will be used by default.
        """
        return pulumi.get(self, "backup_server_name")

    @property
    @pulumi.getter(name="cosPrivateAccess")
    def cos_private_access(self) -> str:
        """
        When OriginType is COS, you can specify if access to private buckets is allowed.
        """
        return pulumi.get(self, "cos_private_access")

    @property
    @pulumi.getter(name="originLists")
    def origin_lists(self) -> Sequence[str]:
        """
        Master origin server list.
        """
        return pulumi.get(self, "origin_lists")

    @property
    @pulumi.getter(name="originPullProtocol")
    def origin_pull_protocol(self) -> str:
        """
        Origin-pull protocol configuration. Valid values: `http`, `https` and `follow`.
        """
        return pulumi.get(self, "origin_pull_protocol")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> str:
        """
        Master origin server type.
        """
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        """
        Host header used when accessing the master origin server. If left empty, the acceleration domain name will be used by default.
        """
        return pulumi.get(self, "server_name")


@pulumi.output_type
class GetDomainsDomainListRequestHeaderResult(dict):
    def __init__(__self__, *,
                 header_rules: Sequence['outputs.GetDomainsDomainListRequestHeaderHeaderRuleResult'],
                 switch: str):
        """
        :param Sequence['GetDomainsDomainListRequestHeaderHeaderRuleArgs'] header_rules: Custom request header configuration rules.
        :param str switch: Cache configuration switch.
        """
        pulumi.set(__self__, "header_rules", header_rules)
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="headerRules")
    def header_rules(self) -> Sequence['outputs.GetDomainsDomainListRequestHeaderHeaderRuleResult']:
        """
        Custom request header configuration rules.
        """
        return pulumi.get(self, "header_rules")

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Cache configuration switch.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class GetDomainsDomainListRequestHeaderHeaderRuleResult(dict):
    def __init__(__self__, *,
                 header_mode: str,
                 header_name: str,
                 header_value: str,
                 rule_paths: Sequence[str],
                 rule_type: str):
        """
        :param str header_mode: Http header setting method.
        :param str header_name: Http header name.
        :param str header_value: Http header value.
        :param Sequence[str] rule_paths: Rule paths.
        :param str rule_type: Rule type.
        """
        pulumi.set(__self__, "header_mode", header_mode)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter(name="headerMode")
    def header_mode(self) -> str:
        """
        Http header setting method.
        """
        return pulumi.get(self, "header_mode")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        Http header name.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        Http header value.
        """
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Sequence[str]:
        """
        Rule paths.
        """
        return pulumi.get(self, "rule_paths")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Rule type.
        """
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class GetDomainsDomainListRuleCachResult(dict):
    def __init__(__self__, *,
                 cache_time: int,
                 follow_origin_switch: str,
                 ignore_set_cookie: str,
                 no_cache_switch: str,
                 re_validate: str,
                 rule_paths: Sequence[str],
                 rule_type: str,
                 switch: str,
                 compare_max_age: Optional[str] = None,
                 ignore_cache_control: Optional[str] = None):
        """
        :param int cache_time: Cache expiration time setting, the unit is second.
        :param str follow_origin_switch: Follow the source station configuration switch.
        :param str ignore_set_cookie: Ignore the Set-Cookie header of the origin site.
        :param str no_cache_switch: Cache configuration switch.
        :param str re_validate: Always check back to origin.
        :param Sequence[str] rule_paths: Rule paths.
        :param str rule_type: Rule type.
        :param str switch: Cache configuration switch.
        :param str compare_max_age: Advanced cache expiration configuration.
        :param str ignore_cache_control: Force caching. After opening, the no-store and no-cache resources returned by the origin site will also be cached in accordance with the CacheRules rules.
        """
        pulumi.set(__self__, "cache_time", cache_time)
        pulumi.set(__self__, "follow_origin_switch", follow_origin_switch)
        pulumi.set(__self__, "ignore_set_cookie", ignore_set_cookie)
        pulumi.set(__self__, "no_cache_switch", no_cache_switch)
        pulumi.set(__self__, "re_validate", re_validate)
        pulumi.set(__self__, "rule_paths", rule_paths)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "switch", switch)
        if compare_max_age is not None:
            pulumi.set(__self__, "compare_max_age", compare_max_age)
        if ignore_cache_control is not None:
            pulumi.set(__self__, "ignore_cache_control", ignore_cache_control)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> int:
        """
        Cache expiration time setting, the unit is second.
        """
        return pulumi.get(self, "cache_time")

    @property
    @pulumi.getter(name="followOriginSwitch")
    def follow_origin_switch(self) -> str:
        """
        Follow the source station configuration switch.
        """
        return pulumi.get(self, "follow_origin_switch")

    @property
    @pulumi.getter(name="ignoreSetCookie")
    def ignore_set_cookie(self) -> str:
        """
        Ignore the Set-Cookie header of the origin site.
        """
        return pulumi.get(self, "ignore_set_cookie")

    @property
    @pulumi.getter(name="noCacheSwitch")
    def no_cache_switch(self) -> str:
        """
        Cache configuration switch.
        """
        return pulumi.get(self, "no_cache_switch")

    @property
    @pulumi.getter(name="reValidate")
    def re_validate(self) -> str:
        """
        Always check back to origin.
        """
        return pulumi.get(self, "re_validate")

    @property
    @pulumi.getter(name="rulePaths")
    def rule_paths(self) -> Sequence[str]:
        """
        Rule paths.
        """
        return pulumi.get(self, "rule_paths")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Rule type.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Cache configuration switch.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="compareMaxAge")
    def compare_max_age(self) -> Optional[str]:
        """
        Advanced cache expiration configuration.
        """
        return pulumi.get(self, "compare_max_age")

    @property
    @pulumi.getter(name="ignoreCacheControl")
    def ignore_cache_control(self) -> Optional[str]:
        """
        Force caching. After opening, the no-store and no-cache resources returned by the origin site will also be cached in accordance with the CacheRules rules.
        """
        return pulumi.get(self, "ignore_cache_control")


