# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrganizationMemberOperationArgs', 'OrganizationMemberOperation']

@pulumi.input_type
class OrganizationMemberOperationArgs:
    def __init__(__self__, *,
                 member_uin: pulumi.Input[int],
                 node_id: pulumi.Input[int],
                 permission_ids: pulumi.Input[Sequence[pulumi.Input[int]]],
                 policy_type: pulumi.Input[str],
                 auth_files: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationAuthFileArgs']]]] = None,
                 is_allow_quit: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pay_uin: Optional[pulumi.Input[str]] = None,
                 relation_auth_name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationTagArgs']]]] = None):
        """
        The set of arguments for constructing a OrganizationMemberOperation resource.
        :param pulumi.Input[int] member_uin: Invited account Uin.
        :param pulumi.Input[int] node_id: Node ID of the member's department.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] permission_ids: List of member financial authority IDs. Values: 1-View bill, 2-View balance, 3-Fund transfer, 4-Consolidated disbursement, 5-Invoice, 6-Benefit inheritance, 7-Proxy payment, 1 and 2 must be default.
        :param pulumi.Input[str] policy_type: Relationship strategies. Value taken: Financial.
        :param pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationAuthFileArgs']]] auth_files: List of supporting documents of mutual trust entities.
        :param pulumi.Input[str] is_allow_quit: Whether to allow members to withdraw. Allow: Allow, Disallow: Denied.
        :param pulumi.Input[str] name: Member name. The maximum length is 25 characters and supports English letters, numbers, Chinese characters, symbols `+`, `@`, `&`, `.`, `[`, `]`, `-`, `:`, `,` and enumeration comma.
        :param pulumi.Input[str] pay_uin: Payer Uin. Member needs to pay on behalf of.
        :param pulumi.Input[str] relation_auth_name: Name of the real-name subject of mutual trust.
        :param pulumi.Input[str] remark: Remark.
        :param pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationTagArgs']]] tags: List of member tags. Maximum 10.
        """
        pulumi.set(__self__, "member_uin", member_uin)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "permission_ids", permission_ids)
        pulumi.set(__self__, "policy_type", policy_type)
        if auth_files is not None:
            pulumi.set(__self__, "auth_files", auth_files)
        if is_allow_quit is not None:
            pulumi.set(__self__, "is_allow_quit", is_allow_quit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pay_uin is not None:
            pulumi.set(__self__, "pay_uin", pay_uin)
        if relation_auth_name is not None:
            pulumi.set(__self__, "relation_auth_name", relation_auth_name)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="memberUin")
    def member_uin(self) -> pulumi.Input[int]:
        """
        Invited account Uin.
        """
        return pulumi.get(self, "member_uin")

    @member_uin.setter
    def member_uin(self, value: pulumi.Input[int]):
        pulumi.set(self, "member_uin", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> pulumi.Input[int]:
        """
        Node ID of the member's department.
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter(name="permissionIds")
    def permission_ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        List of member financial authority IDs. Values: 1-View bill, 2-View balance, 3-Fund transfer, 4-Consolidated disbursement, 5-Invoice, 6-Benefit inheritance, 7-Proxy payment, 1 and 2 must be default.
        """
        return pulumi.get(self, "permission_ids")

    @permission_ids.setter
    def permission_ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "permission_ids", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Input[str]:
        """
        Relationship strategies. Value taken: Financial.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="authFiles")
    def auth_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationAuthFileArgs']]]]:
        """
        List of supporting documents of mutual trust entities.
        """
        return pulumi.get(self, "auth_files")

    @auth_files.setter
    def auth_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationAuthFileArgs']]]]):
        pulumi.set(self, "auth_files", value)

    @property
    @pulumi.getter(name="isAllowQuit")
    def is_allow_quit(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to allow members to withdraw. Allow: Allow, Disallow: Denied.
        """
        return pulumi.get(self, "is_allow_quit")

    @is_allow_quit.setter
    def is_allow_quit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_allow_quit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Member name. The maximum length is 25 characters and supports English letters, numbers, Chinese characters, symbols `+`, `@`, `&`, `.`, `[`, `]`, `-`, `:`, `,` and enumeration comma.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="payUin")
    def pay_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Payer Uin. Member needs to pay on behalf of.
        """
        return pulumi.get(self, "pay_uin")

    @pay_uin.setter
    def pay_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pay_uin", value)

    @property
    @pulumi.getter(name="relationAuthName")
    def relation_auth_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the real-name subject of mutual trust.
        """
        return pulumi.get(self, "relation_auth_name")

    @relation_auth_name.setter
    def relation_auth_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relation_auth_name", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Remark.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationTagArgs']]]]:
        """
        List of member tags. Maximum 10.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _OrganizationMemberOperationState:
    def __init__(__self__, *,
                 auth_files: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationAuthFileArgs']]]] = None,
                 is_allow_quit: Optional[pulumi.Input[str]] = None,
                 member_uin: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_id: Optional[pulumi.Input[int]] = None,
                 pay_uin: Optional[pulumi.Input[str]] = None,
                 permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 relation_auth_name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationTagArgs']]]] = None):
        """
        Input properties used for looking up and filtering OrganizationMemberOperation resources.
        :param pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationAuthFileArgs']]] auth_files: List of supporting documents of mutual trust entities.
        :param pulumi.Input[str] is_allow_quit: Whether to allow members to withdraw. Allow: Allow, Disallow: Denied.
        :param pulumi.Input[int] member_uin: Invited account Uin.
        :param pulumi.Input[str] name: Member name. The maximum length is 25 characters and supports English letters, numbers, Chinese characters, symbols `+`, `@`, `&`, `.`, `[`, `]`, `-`, `:`, `,` and enumeration comma.
        :param pulumi.Input[int] node_id: Node ID of the member's department.
        :param pulumi.Input[str] pay_uin: Payer Uin. Member needs to pay on behalf of.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] permission_ids: List of member financial authority IDs. Values: 1-View bill, 2-View balance, 3-Fund transfer, 4-Consolidated disbursement, 5-Invoice, 6-Benefit inheritance, 7-Proxy payment, 1 and 2 must be default.
        :param pulumi.Input[str] policy_type: Relationship strategies. Value taken: Financial.
        :param pulumi.Input[str] relation_auth_name: Name of the real-name subject of mutual trust.
        :param pulumi.Input[str] remark: Remark.
        :param pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationTagArgs']]] tags: List of member tags. Maximum 10.
        """
        if auth_files is not None:
            pulumi.set(__self__, "auth_files", auth_files)
        if is_allow_quit is not None:
            pulumi.set(__self__, "is_allow_quit", is_allow_quit)
        if member_uin is not None:
            pulumi.set(__self__, "member_uin", member_uin)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if pay_uin is not None:
            pulumi.set(__self__, "pay_uin", pay_uin)
        if permission_ids is not None:
            pulumi.set(__self__, "permission_ids", permission_ids)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if relation_auth_name is not None:
            pulumi.set(__self__, "relation_auth_name", relation_auth_name)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="authFiles")
    def auth_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationAuthFileArgs']]]]:
        """
        List of supporting documents of mutual trust entities.
        """
        return pulumi.get(self, "auth_files")

    @auth_files.setter
    def auth_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationAuthFileArgs']]]]):
        pulumi.set(self, "auth_files", value)

    @property
    @pulumi.getter(name="isAllowQuit")
    def is_allow_quit(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to allow members to withdraw. Allow: Allow, Disallow: Denied.
        """
        return pulumi.get(self, "is_allow_quit")

    @is_allow_quit.setter
    def is_allow_quit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_allow_quit", value)

    @property
    @pulumi.getter(name="memberUin")
    def member_uin(self) -> Optional[pulumi.Input[int]]:
        """
        Invited account Uin.
        """
        return pulumi.get(self, "member_uin")

    @member_uin.setter
    def member_uin(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member_uin", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Member name. The maximum length is 25 characters and supports English letters, numbers, Chinese characters, symbols `+`, `@`, `&`, `.`, `[`, `]`, `-`, `:`, `,` and enumeration comma.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[int]]:
        """
        Node ID of the member's department.
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter(name="payUin")
    def pay_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Payer Uin. Member needs to pay on behalf of.
        """
        return pulumi.get(self, "pay_uin")

    @pay_uin.setter
    def pay_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pay_uin", value)

    @property
    @pulumi.getter(name="permissionIds")
    def permission_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of member financial authority IDs. Values: 1-View bill, 2-View balance, 3-Fund transfer, 4-Consolidated disbursement, 5-Invoice, 6-Benefit inheritance, 7-Proxy payment, 1 and 2 must be default.
        """
        return pulumi.get(self, "permission_ids")

    @permission_ids.setter
    def permission_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "permission_ids", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Relationship strategies. Value taken: Financial.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="relationAuthName")
    def relation_auth_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the real-name subject of mutual trust.
        """
        return pulumi.get(self, "relation_auth_name")

    @relation_auth_name.setter
    def relation_auth_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relation_auth_name", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Remark.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationTagArgs']]]]:
        """
        List of member tags. Maximum 10.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationMemberOperationTagArgs']]]]):
        pulumi.set(self, "tags", value)


class OrganizationMemberOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrganizationMemberOperationAuthFileArgs']]]]] = None,
                 is_allow_quit: Optional[pulumi.Input[str]] = None,
                 member_uin: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_id: Optional[pulumi.Input[int]] = None,
                 pay_uin: Optional[pulumi.Input[str]] = None,
                 permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 relation_auth_name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrganizationMemberOperationTagArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization invite_organization_member_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        invite_organization_member_operation = tencentcloud.invite.OrganizationMemberOperation("inviteOrganizationMemberOperation",
            is_allow_quit="Allow",
            member_uin="xxxxxx",
            node_id="xxxxxx",
            permission_ids=[
                1,
                2,
                4,
            ],
            policy_type="Financial")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrganizationMemberOperationAuthFileArgs']]]] auth_files: List of supporting documents of mutual trust entities.
        :param pulumi.Input[str] is_allow_quit: Whether to allow members to withdraw. Allow: Allow, Disallow: Denied.
        :param pulumi.Input[int] member_uin: Invited account Uin.
        :param pulumi.Input[str] name: Member name. The maximum length is 25 characters and supports English letters, numbers, Chinese characters, symbols `+`, `@`, `&`, `.`, `[`, `]`, `-`, `:`, `,` and enumeration comma.
        :param pulumi.Input[int] node_id: Node ID of the member's department.
        :param pulumi.Input[str] pay_uin: Payer Uin. Member needs to pay on behalf of.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] permission_ids: List of member financial authority IDs. Values: 1-View bill, 2-View balance, 3-Fund transfer, 4-Consolidated disbursement, 5-Invoice, 6-Benefit inheritance, 7-Proxy payment, 1 and 2 must be default.
        :param pulumi.Input[str] policy_type: Relationship strategies. Value taken: Financial.
        :param pulumi.Input[str] relation_auth_name: Name of the real-name subject of mutual trust.
        :param pulumi.Input[str] remark: Remark.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrganizationMemberOperationTagArgs']]]] tags: List of member tags. Maximum 10.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrganizationMemberOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization invite_organization_member_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        invite_organization_member_operation = tencentcloud.invite.OrganizationMemberOperation("inviteOrganizationMemberOperation",
            is_allow_quit="Allow",
            member_uin="xxxxxx",
            node_id="xxxxxx",
            permission_ids=[
                1,
                2,
                4,
            ],
            policy_type="Financial")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param OrganizationMemberOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationMemberOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrganizationMemberOperationAuthFileArgs']]]]] = None,
                 is_allow_quit: Optional[pulumi.Input[str]] = None,
                 member_uin: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_id: Optional[pulumi.Input[int]] = None,
                 pay_uin: Optional[pulumi.Input[str]] = None,
                 permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 relation_auth_name: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrganizationMemberOperationTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationMemberOperationArgs.__new__(OrganizationMemberOperationArgs)

            __props__.__dict__["auth_files"] = auth_files
            __props__.__dict__["is_allow_quit"] = is_allow_quit
            if member_uin is None and not opts.urn:
                raise TypeError("Missing required property 'member_uin'")
            __props__.__dict__["member_uin"] = member_uin
            __props__.__dict__["name"] = name
            if node_id is None and not opts.urn:
                raise TypeError("Missing required property 'node_id'")
            __props__.__dict__["node_id"] = node_id
            __props__.__dict__["pay_uin"] = pay_uin
            if permission_ids is None and not opts.urn:
                raise TypeError("Missing required property 'permission_ids'")
            __props__.__dict__["permission_ids"] = permission_ids
            if policy_type is None and not opts.urn:
                raise TypeError("Missing required property 'policy_type'")
            __props__.__dict__["policy_type"] = policy_type
            __props__.__dict__["relation_auth_name"] = relation_auth_name
            __props__.__dict__["remark"] = remark
            __props__.__dict__["tags"] = tags
        super(OrganizationMemberOperation, __self__).__init__(
            'tencentcloud:Invite/organizationMemberOperation:OrganizationMemberOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrganizationMemberOperationAuthFileArgs']]]]] = None,
            is_allow_quit: Optional[pulumi.Input[str]] = None,
            member_uin: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_id: Optional[pulumi.Input[int]] = None,
            pay_uin: Optional[pulumi.Input[str]] = None,
            permission_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            policy_type: Optional[pulumi.Input[str]] = None,
            relation_auth_name: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrganizationMemberOperationTagArgs']]]]] = None) -> 'OrganizationMemberOperation':
        """
        Get an existing OrganizationMemberOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrganizationMemberOperationAuthFileArgs']]]] auth_files: List of supporting documents of mutual trust entities.
        :param pulumi.Input[str] is_allow_quit: Whether to allow members to withdraw. Allow: Allow, Disallow: Denied.
        :param pulumi.Input[int] member_uin: Invited account Uin.
        :param pulumi.Input[str] name: Member name. The maximum length is 25 characters and supports English letters, numbers, Chinese characters, symbols `+`, `@`, `&`, `.`, `[`, `]`, `-`, `:`, `,` and enumeration comma.
        :param pulumi.Input[int] node_id: Node ID of the member's department.
        :param pulumi.Input[str] pay_uin: Payer Uin. Member needs to pay on behalf of.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] permission_ids: List of member financial authority IDs. Values: 1-View bill, 2-View balance, 3-Fund transfer, 4-Consolidated disbursement, 5-Invoice, 6-Benefit inheritance, 7-Proxy payment, 1 and 2 must be default.
        :param pulumi.Input[str] policy_type: Relationship strategies. Value taken: Financial.
        :param pulumi.Input[str] relation_auth_name: Name of the real-name subject of mutual trust.
        :param pulumi.Input[str] remark: Remark.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrganizationMemberOperationTagArgs']]]] tags: List of member tags. Maximum 10.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrganizationMemberOperationState.__new__(_OrganizationMemberOperationState)

        __props__.__dict__["auth_files"] = auth_files
        __props__.__dict__["is_allow_quit"] = is_allow_quit
        __props__.__dict__["member_uin"] = member_uin
        __props__.__dict__["name"] = name
        __props__.__dict__["node_id"] = node_id
        __props__.__dict__["pay_uin"] = pay_uin
        __props__.__dict__["permission_ids"] = permission_ids
        __props__.__dict__["policy_type"] = policy_type
        __props__.__dict__["relation_auth_name"] = relation_auth_name
        __props__.__dict__["remark"] = remark
        __props__.__dict__["tags"] = tags
        return OrganizationMemberOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authFiles")
    def auth_files(self) -> pulumi.Output[Optional[Sequence['outputs.OrganizationMemberOperationAuthFile']]]:
        """
        List of supporting documents of mutual trust entities.
        """
        return pulumi.get(self, "auth_files")

    @property
    @pulumi.getter(name="isAllowQuit")
    def is_allow_quit(self) -> pulumi.Output[Optional[str]]:
        """
        Whether to allow members to withdraw. Allow: Allow, Disallow: Denied.
        """
        return pulumi.get(self, "is_allow_quit")

    @property
    @pulumi.getter(name="memberUin")
    def member_uin(self) -> pulumi.Output[int]:
        """
        Invited account Uin.
        """
        return pulumi.get(self, "member_uin")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Member name. The maximum length is 25 characters and supports English letters, numbers, Chinese characters, symbols `+`, `@`, `&`, `.`, `[`, `]`, `-`, `:`, `,` and enumeration comma.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> pulumi.Output[int]:
        """
        Node ID of the member's department.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="payUin")
    def pay_uin(self) -> pulumi.Output[Optional[str]]:
        """
        Payer Uin. Member needs to pay on behalf of.
        """
        return pulumi.get(self, "pay_uin")

    @property
    @pulumi.getter(name="permissionIds")
    def permission_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        List of member financial authority IDs. Values: 1-View bill, 2-View balance, 3-Fund transfer, 4-Consolidated disbursement, 5-Invoice, 6-Benefit inheritance, 7-Proxy payment, 1 and 2 must be default.
        """
        return pulumi.get(self, "permission_ids")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Output[str]:
        """
        Relationship strategies. Value taken: Financial.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="relationAuthName")
    def relation_auth_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the real-name subject of mutual trust.
        """
        return pulumi.get(self, "relation_auth_name")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        Remark.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.OrganizationMemberOperationTag']]]:
        """
        List of member tags. Maximum 10.
        """
        return pulumi.get(self, "tags")

