# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'HbaseInstanceTag',
    'HbaseInstanceZoneSetting',
    'HbaseInstanceZoneSettingVpcSettings',
    'GetHbaseInstancesFilterResult',
    'GetHbaseInstancesInstanceListResult',
    'GetHbaseInstancesInstanceListTagResult',
    'GetHbaseInstancesInstanceListZoneSettingResult',
    'GetHbaseInstancesInstanceListZoneSettingVpcSettingResult',
]

@pulumi.output_type
class HbaseInstanceTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HbaseInstanceTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HbaseInstanceTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HbaseInstanceTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class HbaseInstanceZoneSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeNum":
            suggest = "node_num"
        elif key == "vpcSettings":
            suggest = "vpc_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HbaseInstanceZoneSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HbaseInstanceZoneSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HbaseInstanceZoneSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_num: int,
                 vpc_settings: 'outputs.HbaseInstanceZoneSettingVpcSettings',
                 zone: str):
        """
        :param int node_num: Number of nodes.
        :param 'HbaseInstanceZoneSettingVpcSettingsArgs' vpc_settings: Private network related information configuration. This parameter can be used to specify the ID of the private network, subnet ID, and other information.
        :param str zone: The availability zone to which the instance belongs, such as ap-guangzhou-1.
        """
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "vpc_settings", vpc_settings)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_num")

    @property
    @pulumi.getter(name="vpcSettings")
    def vpc_settings(self) -> 'outputs.HbaseInstanceZoneSettingVpcSettings':
        """
        Private network related information configuration. This parameter can be used to specify the ID of the private network, subnet ID, and other information.
        """
        return pulumi.get(self, "vpc_settings")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The availability zone to which the instance belongs, such as ap-guangzhou-1.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class HbaseInstanceZoneSettingVpcSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HbaseInstanceZoneSettingVpcSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HbaseInstanceZoneSettingVpcSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HbaseInstanceZoneSettingVpcSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str subnet_id: Subnet ID.
        :param str vpc_id: VPC ID.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetHbaseInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Field name.
        :param Sequence[str] values: Filter field value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter field value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetHbaseInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 app_id: int,
                 cluster_id: str,
                 cluster_name: str,
                 id: int,
                 pay_mode: int,
                 region_id: int,
                 status: int,
                 status_desc: str,
                 subnet_id: int,
                 tags: Sequence['outputs.GetHbaseInstancesInstanceListTagResult'],
                 vpc_id: int,
                 zone: str,
                 zone_id: int,
                 zone_settings: Sequence['outputs.GetHbaseInstancesInstanceListZoneSettingResult']):
        """
        :param str add_time: Creation time.
        :param int app_id: User APP ID.
        :param str cluster_id: Cluster Instance String ID.
        :param str cluster_name: Cluster Instance name.
        :param int id: Cluster Instance Digital ID.
        :param int pay_mode: Cluster charging type. 0 means charging by volume, 1 means annual and monthly.
        :param int region_id: Region ID.
        :param int status: Status code, please refer to the StatusDesc.
        :param str status_desc: State description.
        :param int subnet_id: Subnet ID.
        :param Sequence['GetHbaseInstancesInstanceListTagArgs'] tags: List of tags.
        :param int vpc_id: VPC ID.
        :param str zone: Primary Availability Zone Name.
        :param int zone_id: Primary Availability Zone ID.
        :param Sequence['GetHbaseInstancesInstanceListZoneSettingArgs'] zone_settings: Detailed configuration of the instance availability zone, including the availability zone name, VPC information, and the total number of nodes, where the total number of nodes must be greater than or equal to 3 and less than or equal to 50.
        """
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_settings", zone_settings)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        """
        User APP ID.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Cluster Instance String ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster Instance name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Cluster Instance Digital ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        """
        Cluster charging type. 0 means charging by volume, 1 means annual and monthly.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Region ID.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Status code, please refer to the StatusDesc.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        """
        State description.
        """
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> int:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetHbaseInstancesInstanceListTagResult']:
        """
        List of tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> int:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Primary Availability Zone Name.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        Primary Availability Zone ID.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneSettings")
    def zone_settings(self) -> Sequence['outputs.GetHbaseInstancesInstanceListZoneSettingResult']:
        """
        Detailed configuration of the instance availability zone, including the availability zone name, VPC information, and the total number of nodes, where the total number of nodes must be greater than or equal to 3 and less than or equal to 50.
        """
        return pulumi.get(self, "zone_settings")


@pulumi.output_type
class GetHbaseInstancesInstanceListTagResult(dict):
    def __init__(__self__, *,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetHbaseInstancesInstanceListZoneSettingResult(dict):
    def __init__(__self__, *,
                 node_num: int,
                 vpc_settings: Sequence['outputs.GetHbaseInstancesInstanceListZoneSettingVpcSettingResult'],
                 zone: str):
        """
        :param int node_num: Number of nodes.
        :param Sequence['GetHbaseInstancesInstanceListZoneSettingVpcSettingArgs'] vpc_settings: Private network related information configuration. This parameter can be used to specify the ID of the private network, subnet ID, and other information.
        :param str zone: Primary Availability Zone Name.
        """
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "vpc_settings", vpc_settings)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_num")

    @property
    @pulumi.getter(name="vpcSettings")
    def vpc_settings(self) -> Sequence['outputs.GetHbaseInstancesInstanceListZoneSettingVpcSettingResult']:
        """
        Private network related information configuration. This parameter can be used to specify the ID of the private network, subnet ID, and other information.
        """
        return pulumi.get(self, "vpc_settings")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Primary Availability Zone Name.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetHbaseInstancesInstanceListZoneSettingVpcSettingResult(dict):
    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str subnet_id: Subnet ID.
        :param str vpc_id: VPC ID.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")


