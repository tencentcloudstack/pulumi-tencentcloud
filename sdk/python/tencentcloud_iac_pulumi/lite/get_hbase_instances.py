# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetHbaseInstancesResult',
    'AwaitableGetHbaseInstancesResult',
    'get_hbase_instances',
    'get_hbase_instances_output',
]

@pulumi.output_type
class GetHbaseInstancesResult:
    """
    A collection of values returned by getHbaseInstances.
    """
    def __init__(__self__, asc=None, display_strategy=None, filters=None, id=None, instance_lists=None, order_field=None, result_output_file=None):
        if asc and not isinstance(asc, int):
            raise TypeError("Expected argument 'asc' to be a int")
        pulumi.set(__self__, "asc", asc)
        if display_strategy and not isinstance(display_strategy, str):
            raise TypeError("Expected argument 'display_strategy' to be a str")
        pulumi.set(__self__, "display_strategy", display_strategy)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_lists and not isinstance(instance_lists, list):
            raise TypeError("Expected argument 'instance_lists' to be a list")
        pulumi.set(__self__, "instance_lists", instance_lists)
        if order_field and not isinstance(order_field, str):
            raise TypeError("Expected argument 'order_field' to be a str")
        pulumi.set(__self__, "order_field", order_field)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def asc(self) -> Optional[int]:
        return pulumi.get(self, "asc")

    @property
    @pulumi.getter(name="displayStrategy")
    def display_strategy(self) -> str:
        return pulumi.get(self, "display_strategy")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetHbaseInstancesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceLists")
    def instance_lists(self) -> Sequence['outputs.GetHbaseInstancesInstanceListResult']:
        """
        Cluster instance list.
        """
        return pulumi.get(self, "instance_lists")

    @property
    @pulumi.getter(name="orderField")
    def order_field(self) -> Optional[str]:
        return pulumi.get(self, "order_field")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetHbaseInstancesResult(GetHbaseInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHbaseInstancesResult(
            asc=self.asc,
            display_strategy=self.display_strategy,
            filters=self.filters,
            id=self.id,
            instance_lists=self.instance_lists,
            order_field=self.order_field,
            result_output_file=self.result_output_file)


def get_hbase_instances(asc: Optional[int] = None,
                        display_strategy: Optional[str] = None,
                        filters: Optional[Sequence[pulumi.InputType['GetHbaseInstancesFilterArgs']]] = None,
                        order_field: Optional[str] = None,
                        result_output_file: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHbaseInstancesResult:
    """
    Use this data source to query detailed information of emr lite_hbase_instances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    lite_hbase_instances = tencentcloud.Lite.get_hbase_instances(display_strategy="clusterList")
    ```
    <!--End PulumiCodeChooser -->


    :param int asc: Sort by OrderField in ascending or descending order. Value range:
           * 0: indicates the descending order;
           * 1: indicates the ascending order;
           The default value is 0.
    :param str display_strategy: Cluster filtering policy. Value range:
           * clusterList: Query the list of clusters except the destroyed cluster;
           * monitorManage: Queries the list of clusters except those destroyed, being created, and failed to create.
    :param Sequence[pulumi.InputType['GetHbaseInstancesFilterArgs']] filters: Custom query.
    :param str order_field: Sorting field. Value range:
           * clusterId: Sorting by instance ID;
           * addTime: sorted by instance creation time;
           * status: sorted by the status code of the instance.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['asc'] = asc
    __args__['displayStrategy'] = display_strategy
    __args__['filters'] = filters
    __args__['orderField'] = order_field
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Lite/getHbaseInstances:getHbaseInstances', __args__, opts=opts, typ=GetHbaseInstancesResult).value

    return AwaitableGetHbaseInstancesResult(
        asc=pulumi.get(__ret__, 'asc'),
        display_strategy=pulumi.get(__ret__, 'display_strategy'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        instance_lists=pulumi.get(__ret__, 'instance_lists'),
        order_field=pulumi.get(__ret__, 'order_field'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_hbase_instances)
def get_hbase_instances_output(asc: Optional[pulumi.Input[Optional[int]]] = None,
                               display_strategy: Optional[pulumi.Input[str]] = None,
                               filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetHbaseInstancesFilterArgs']]]]] = None,
                               order_field: Optional[pulumi.Input[Optional[str]]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHbaseInstancesResult]:
    """
    Use this data source to query detailed information of emr lite_hbase_instances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    lite_hbase_instances = tencentcloud.Lite.get_hbase_instances(display_strategy="clusterList")
    ```
    <!--End PulumiCodeChooser -->


    :param int asc: Sort by OrderField in ascending or descending order. Value range:
           * 0: indicates the descending order;
           * 1: indicates the ascending order;
           The default value is 0.
    :param str display_strategy: Cluster filtering policy. Value range:
           * clusterList: Query the list of clusters except the destroyed cluster;
           * monitorManage: Queries the list of clusters except those destroyed, being created, and failed to create.
    :param Sequence[pulumi.InputType['GetHbaseInstancesFilterArgs']] filters: Custom query.
    :param str order_field: Sorting field. Value range:
           * clusterId: Sorting by instance ID;
           * addTime: sorted by instance creation time;
           * status: sorted by the status code of the instance.
    :param str result_output_file: Used to save results.
    """
    ...
