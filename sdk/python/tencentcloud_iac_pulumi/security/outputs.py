# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GroupRuleSetEgress',
    'GroupRuleSetIngress',
    'GetGroupsSecurityGroupResult',
]

@pulumi.output_type
class GroupRuleSetEgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressTemplateGroup":
            suggest = "address_template_group"
        elif key == "addressTemplateId":
            suggest = "address_template_id"
        elif key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "ipv6CidrBlock":
            suggest = "ipv6_cidr_block"
        elif key == "policyIndex":
            suggest = "policy_index"
        elif key == "serviceTemplateGroup":
            suggest = "service_template_group"
        elif key == "serviceTemplateId":
            suggest = "service_template_id"
        elif key == "sourceSecurityId":
            suggest = "source_security_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupRuleSetEgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupRuleSetEgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupRuleSetEgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 address_template_group: Optional[str] = None,
                 address_template_id: Optional[str] = None,
                 cidr_block: Optional[str] = None,
                 description: Optional[str] = None,
                 ipv6_cidr_block: Optional[str] = None,
                 policy_index: Optional[int] = None,
                 port: Optional[str] = None,
                 protocol: Optional[str] = None,
                 service_template_group: Optional[str] = None,
                 service_template_id: Optional[str] = None,
                 source_security_id: Optional[str] = None):
        """
        :param str action: Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
        :param str address_template_group: Specify Group ID of Address template like `ipmg-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        :param str address_template_id: Specify Address template ID like `ipm-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        :param str cidr_block: An IP address network or CIDR segment. NOTE: `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` are exclusive and cannot be set in the same time; One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        :param str description: Description of the security group rule.
        :param str ipv6_cidr_block: An IPV6 address network or CIDR segment, and conflict with `source_security_id` and `address_template_*`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        :param int policy_index: The security group rule index number, whose value dynamically changes with changes in security group rules.
        :param str port: Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and conflicts with `service_template_*`.
        :param str protocol: Type of IP protocol. Valid values: `TCP`, `UDP`, `ICMP`, `ICMPv6` and `ALL`. Default to all types protocol, and conflicts with `service_template_*`.
        :param str service_template_group: Specify Group ID of Protocol template ID like `ppmg-xxxxxxxx`, conflict with `cidr_block` and `port`.
        :param str service_template_id: Specify Protocol template ID like `ppm-xxxxxxxx`, conflict with `cidr_block` and `port`.
        :param str source_security_id: ID of the nested security group, and conflicts with `cidr_block` and `address_template_*`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        pulumi.set(__self__, "action", action)
        if address_template_group is not None:
            pulumi.set(__self__, "address_template_group", address_template_group)
        if address_template_id is not None:
            pulumi.set(__self__, "address_template_id", address_template_id)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ipv6_cidr_block is not None:
            pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if policy_index is not None:
            pulumi.set(__self__, "policy_index", policy_index)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_template_group is not None:
            pulumi.set(__self__, "service_template_group", service_template_group)
        if service_template_id is not None:
            pulumi.set(__self__, "service_template_id", service_template_id)
        if source_security_id is not None:
            pulumi.set(__self__, "source_security_id", source_security_id)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addressTemplateGroup")
    def address_template_group(self) -> Optional[str]:
        """
        Specify Group ID of Address template like `ipmg-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        return pulumi.get(self, "address_template_group")

    @property
    @pulumi.getter(name="addressTemplateId")
    def address_template_id(self) -> Optional[str]:
        """
        Specify Address template ID like `ipm-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        return pulumi.get(self, "address_template_id")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        An IP address network or CIDR segment. NOTE: `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` are exclusive and cannot be set in the same time; One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the security group rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[str]:
        """
        An IPV6 address network or CIDR segment, and conflict with `source_security_id` and `address_template_*`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @property
    @pulumi.getter(name="policyIndex")
    def policy_index(self) -> Optional[int]:
        """
        The security group rule index number, whose value dynamically changes with changes in security group rules.
        """
        return pulumi.get(self, "policy_index")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and conflicts with `service_template_*`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Type of IP protocol. Valid values: `TCP`, `UDP`, `ICMP`, `ICMPv6` and `ALL`. Default to all types protocol, and conflicts with `service_template_*`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceTemplateGroup")
    def service_template_group(self) -> Optional[str]:
        """
        Specify Group ID of Protocol template ID like `ppmg-xxxxxxxx`, conflict with `cidr_block` and `port`.
        """
        return pulumi.get(self, "service_template_group")

    @property
    @pulumi.getter(name="serviceTemplateId")
    def service_template_id(self) -> Optional[str]:
        """
        Specify Protocol template ID like `ppm-xxxxxxxx`, conflict with `cidr_block` and `port`.
        """
        return pulumi.get(self, "service_template_id")

    @property
    @pulumi.getter(name="sourceSecurityId")
    def source_security_id(self) -> Optional[str]:
        """
        ID of the nested security group, and conflicts with `cidr_block` and `address_template_*`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        return pulumi.get(self, "source_security_id")


@pulumi.output_type
class GroupRuleSetIngress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressTemplateGroup":
            suggest = "address_template_group"
        elif key == "addressTemplateId":
            suggest = "address_template_id"
        elif key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "ipv6CidrBlock":
            suggest = "ipv6_cidr_block"
        elif key == "policyIndex":
            suggest = "policy_index"
        elif key == "serviceTemplateGroup":
            suggest = "service_template_group"
        elif key == "serviceTemplateId":
            suggest = "service_template_id"
        elif key == "sourceSecurityId":
            suggest = "source_security_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupRuleSetIngress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupRuleSetIngress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupRuleSetIngress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 address_template_group: Optional[str] = None,
                 address_template_id: Optional[str] = None,
                 cidr_block: Optional[str] = None,
                 description: Optional[str] = None,
                 ipv6_cidr_block: Optional[str] = None,
                 policy_index: Optional[int] = None,
                 port: Optional[str] = None,
                 protocol: Optional[str] = None,
                 service_template_group: Optional[str] = None,
                 service_template_id: Optional[str] = None,
                 source_security_id: Optional[str] = None):
        """
        :param str action: Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
        :param str address_template_group: Specify Group ID of Address template like `ipmg-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        :param str address_template_id: Specify Address template ID like `ipm-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        :param str cidr_block: An IP address network or CIDR segment. NOTE: `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` are exclusive and cannot be set in the same time; One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        :param str description: Description of the security group rule.
        :param str ipv6_cidr_block: An IPV6 address network or CIDR segment, and conflict with `source_security_id` and `address_template_*`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        :param int policy_index: The security group rule index number, whose value dynamically changes with changes in security group rules.
        :param str port: Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and conflicts with `service_template_*`.
        :param str protocol: Type of IP protocol. Valid values: `TCP`, `UDP`, `ICMP`, `ICMPv6` and `ALL`. Default to all types protocol, and conflicts with `service_template_*`.
        :param str service_template_group: Specify Group ID of Protocol template ID like `ppmg-xxxxxxxx`, conflict with `cidr_block` and `port`.
        :param str service_template_id: Specify Protocol template ID like `ppm-xxxxxxxx`, conflict with `cidr_block` and `port`.
        :param str source_security_id: ID of the nested security group, and conflicts with `cidr_block` and `address_template_*`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        pulumi.set(__self__, "action", action)
        if address_template_group is not None:
            pulumi.set(__self__, "address_template_group", address_template_group)
        if address_template_id is not None:
            pulumi.set(__self__, "address_template_id", address_template_id)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ipv6_cidr_block is not None:
            pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if policy_index is not None:
            pulumi.set(__self__, "policy_index", policy_index)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_template_group is not None:
            pulumi.set(__self__, "service_template_group", service_template_group)
        if service_template_id is not None:
            pulumi.set(__self__, "service_template_id", service_template_id)
        if source_security_id is not None:
            pulumi.set(__self__, "source_security_id", source_security_id)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addressTemplateGroup")
    def address_template_group(self) -> Optional[str]:
        """
        Specify Group ID of Address template like `ipmg-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        return pulumi.get(self, "address_template_group")

    @property
    @pulumi.getter(name="addressTemplateId")
    def address_template_id(self) -> Optional[str]:
        """
        Specify Address template ID like `ipm-xxxxxxxx`, conflict with `source_security_id` and `cidr_block`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        return pulumi.get(self, "address_template_id")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        An IP address network or CIDR segment. NOTE: `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` are exclusive and cannot be set in the same time; One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the security group rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[str]:
        """
        An IPV6 address network or CIDR segment, and conflict with `source_security_id` and `address_template_*`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @property
    @pulumi.getter(name="policyIndex")
    def policy_index(self) -> Optional[int]:
        """
        The security group rule index number, whose value dynamically changes with changes in security group rules.
        """
        return pulumi.get(self, "policy_index")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and conflicts with `service_template_*`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Type of IP protocol. Valid values: `TCP`, `UDP`, `ICMP`, `ICMPv6` and `ALL`. Default to all types protocol, and conflicts with `service_template_*`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceTemplateGroup")
    def service_template_group(self) -> Optional[str]:
        """
        Specify Group ID of Protocol template ID like `ppmg-xxxxxxxx`, conflict with `cidr_block` and `port`.
        """
        return pulumi.get(self, "service_template_group")

    @property
    @pulumi.getter(name="serviceTemplateId")
    def service_template_id(self) -> Optional[str]:
        """
        Specify Protocol template ID like `ppm-xxxxxxxx`, conflict with `cidr_block` and `port`.
        """
        return pulumi.get(self, "service_template_id")

    @property
    @pulumi.getter(name="sourceSecurityId")
    def source_security_id(self) -> Optional[str]:
        """
        ID of the nested security group, and conflicts with `cidr_block` and `address_template_*`. NOTE: One of `cidr_block`, `ipv6_cidr_block`, `source_security_id` and `address_template_*` must be set.
        """
        return pulumi.get(self, "source_security_id")


@pulumi.output_type
class GetGroupsSecurityGroupResult(dict):
    def __init__(__self__, *,
                 be_associate_count: int,
                 create_time: str,
                 description: str,
                 egresses: Sequence[str],
                 ingresses: Sequence[str],
                 name: str,
                 project_id: int,
                 security_group_id: str,
                 tags: Mapping[str, Any]):
        """
        :param int be_associate_count: Number of security group binding resources.
        :param str create_time: Creation time of security group.
        :param str description: Description of the security group.
        :param Sequence[str] egresses: Egress rules set. For items like `[action]#[cidr_ip]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
        :param Sequence[str] ingresses: Ingress rules set. For items like `[action]#[cidr_ip]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
        :param str name: Name of the security group to be queried. Conflict with `security_group_id`.
        :param int project_id: Project ID of the security group to be queried. Conflict with `security_group_id`.
        :param str security_group_id: ID of the security group to be queried. Conflict with `name` and `project_id`.
        :param Mapping[str, Any] tags: Tags of the security group to be queried. Conflict with `security_group_id`.
        """
        pulumi.set(__self__, "be_associate_count", be_associate_count)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "egresses", egresses)
        pulumi.set(__self__, "ingresses", ingresses)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="beAssociateCount")
    def be_associate_count(self) -> int:
        """
        Number of security group binding resources.
        """
        return pulumi.get(self, "be_associate_count")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of security group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the security group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def egresses(self) -> Sequence[str]:
        """
        Egress rules set. For items like `[action]#[cidr_ip]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
        """
        return pulumi.get(self, "egresses")

    @property
    @pulumi.getter
    def ingresses(self) -> Sequence[str]:
        """
        Ingress rules set. For items like `[action]#[cidr_ip]#[port]#[protocol]`, it means a regular rule; for items like `sg-XXXX`, it means a nested security group.
        """
        return pulumi.get(self, "ingresses")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the security group to be queried. Conflict with `security_group_id`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID of the security group to be queried. Conflict with `security_group_id`.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        ID of the security group to be queried. Conflict with `name` and `project_id`.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of the security group to be queried. Conflict with `security_group_id`.
        """
        return pulumi.get(self, "tags")


