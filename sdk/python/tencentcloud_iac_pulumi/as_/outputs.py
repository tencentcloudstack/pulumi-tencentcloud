# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'LifecycleHookLifecycleCommand',
    'LoadBalancerForwardLoadBalancer',
    'LoadBalancerForwardLoadBalancerTargetAttribute',
    'ScalingConfigDataDisk',
    'ScalingConfigHostNameSettings',
    'ScalingConfigInstanceNameSettings',
    'ScalingGroupForwardBalancerId',
    'ScalingGroupForwardBalancerIdTargetAttribute',
    'StartInstanceRefreshRefreshSettings',
    'StartInstanceRefreshRefreshSettingsRollingUpdateSettings',
    'GetAdvicesAutoScalingAdviceSetResult',
    'GetAdvicesAutoScalingAdviceSetAdviceResult',
    'GetInstancesFilterResult',
    'GetInstancesInstanceListResult',
    'GetLastActivityActivitySetResult',
    'GetLastActivityActivitySetActivityRelatedInstanceSetResult',
    'GetLastActivityActivitySetDetailedStatusMessageSetResult',
    'GetLastActivityActivitySetInvocationResultSetResult',
    'GetLastActivityActivitySetLifecycleActionResultSetResult',
    'GetScalingConfigsConfigurationListResult',
    'GetScalingConfigsConfigurationListDataDiskResult',
    'GetScalingGroupsScalingGroupListResult',
    'GetScalingGroupsScalingGroupListForwardBalancerIdResult',
    'GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttributeResult',
    'GetScalingPoliciesScalingPolicyListResult',
]

@pulumi.output_type
class LifecycleHookLifecycleCommand(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandId":
            suggest = "command_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LifecycleHookLifecycleCommand. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LifecycleHookLifecycleCommand.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LifecycleHookLifecycleCommand.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_id: str,
                 parameters: Optional[str] = None):
        """
        :param str command_id: Remote command ID. It is required to execute a command.
        :param str parameters: Custom parameter. The field type is JSON encoded string. For example, {"varA": "222"}.
        """
        pulumi.set(__self__, "command_id", command_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> str:
        """
        Remote command ID. It is required to execute a command.
        """
        return pulumi.get(self, "command_id")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[str]:
        """
        Custom parameter. The field type is JSON encoded string. For example, {"varA": "222"}.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class LoadBalancerForwardLoadBalancer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerId":
            suggest = "listener_id"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"
        elif key == "targetAttributes":
            suggest = "target_attributes"
        elif key == "locationId":
            suggest = "location_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerForwardLoadBalancer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerForwardLoadBalancer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerForwardLoadBalancer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_id: str,
                 load_balancer_id: str,
                 target_attributes: Sequence['outputs.LoadBalancerForwardLoadBalancerTargetAttribute'],
                 location_id: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str listener_id: Application load balancer listener ID.
        :param str load_balancer_id: Application load balancer instance ID.
        :param Sequence['LoadBalancerForwardLoadBalancerTargetAttributeArgs'] target_attributes: List of TargetAttribute.
        :param str location_id: Application load balancer location ID.
        :param str region: Load balancer instance region. Default value is the region of current auto scaling group. The format is the same as the public parameter Region, for example: ap-guangzhou.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "target_attributes", target_attributes)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        Application load balancer listener ID.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        """
        Application load balancer instance ID.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="targetAttributes")
    def target_attributes(self) -> Sequence['outputs.LoadBalancerForwardLoadBalancerTargetAttribute']:
        """
        List of TargetAttribute.
        """
        return pulumi.get(self, "target_attributes")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        """
        Application load balancer location ID.
        """
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Load balancer instance region. Default value is the region of current auto scaling group. The format is the same as the public parameter Region, for example: ap-guangzhou.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class LoadBalancerForwardLoadBalancerTargetAttribute(dict):
    def __init__(__self__, *,
                 port: int,
                 weight: int):
        """
        :param int port: Target port.
        :param int weight: Target weight.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Target port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Target weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ScalingConfigDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteWithInstance":
            suggest = "delete_with_instance"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScalingConfigDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScalingConfigDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScalingConfigDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_with_instance: Optional[bool] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 snapshot_id: Optional[str] = None):
        """
        :param bool delete_with_instance: Indicates whether the disk remove after instance terminated. Default is `false`.
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Types of disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. valid when disk_type_policy is ORIGINAL.
        :param str snapshot_id: Data disk snapshot ID.
        """
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[bool]:
        """
        Indicates whether the disk remove after instance terminated. Default is `false`.
        """
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        Types of disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. valid when disk_type_policy is ORIGINAL.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")


@pulumi.output_type
class ScalingConfigHostNameSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "hostNameStyle":
            suggest = "host_name_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScalingConfigHostNameSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScalingConfigHostNameSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScalingConfigHostNameSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: str,
                 host_name_style: Optional[str] = None):
        """
        :param str host_name: The host name of the cloud server; dots (.) and dashes (-) cannot be used as the first and last characters of HostName, and cannot be used consecutively; Windows instances are not supported; other types (Linux, etc.) instances: the character length is [2, 40], it is allowed to support multiple dots, and there is a paragraph between the dots, and each paragraph is allowed to consist of letters (no uppercase and lowercase restrictions), numbers and dashes (-). Pure numbers are not allowed.
        :param str host_name_style: The style of the host name of the cloud server, the value range includes `ORIGINAL` and `UNIQUE`, the default is `ORIGINAL`; `ORIGINAL`, the AS directly passes the HostName filled in the input parameter to the CVM, and the CVM may append a sequence to the HostName number, the HostName of the instance in the scaling group will conflict; `UNIQUE`, the HostName filled in as a parameter is equivalent to the host name prefix, AS and CVM will expand it, and the HostName of the instance in the scaling group can be guaranteed to be unique.
        """
        pulumi.set(__self__, "host_name", host_name)
        if host_name_style is not None:
            pulumi.set(__self__, "host_name_style", host_name_style)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The host name of the cloud server; dots (.) and dashes (-) cannot be used as the first and last characters of HostName, and cannot be used consecutively; Windows instances are not supported; other types (Linux, etc.) instances: the character length is [2, 40], it is allowed to support multiple dots, and there is a paragraph between the dots, and each paragraph is allowed to consist of letters (no uppercase and lowercase restrictions), numbers and dashes (-). Pure numbers are not allowed.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hostNameStyle")
    def host_name_style(self) -> Optional[str]:
        """
        The style of the host name of the cloud server, the value range includes `ORIGINAL` and `UNIQUE`, the default is `ORIGINAL`; `ORIGINAL`, the AS directly passes the HostName filled in the input parameter to the CVM, and the CVM may append a sequence to the HostName number, the HostName of the instance in the scaling group will conflict; `UNIQUE`, the HostName filled in as a parameter is equivalent to the host name prefix, AS and CVM will expand it, and the HostName of the instance in the scaling group can be guaranteed to be unique.
        """
        return pulumi.get(self, "host_name_style")


@pulumi.output_type
class ScalingConfigInstanceNameSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceName":
            suggest = "instance_name"
        elif key == "instanceNameStyle":
            suggest = "instance_name_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScalingConfigInstanceNameSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScalingConfigInstanceNameSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScalingConfigInstanceNameSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_name: str,
                 instance_name_style: Optional[str] = None):
        """
        :param str instance_name: CVM instance name.
        :param str instance_name_style: Type of CVM instance name. Valid values: `ORIGINAL` and `UNIQUE`. Default is `ORIGINAL`.
        """
        pulumi.set(__self__, "instance_name", instance_name)
        if instance_name_style is not None:
            pulumi.set(__self__, "instance_name_style", instance_name_style)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        CVM instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceNameStyle")
    def instance_name_style(self) -> Optional[str]:
        """
        Type of CVM instance name. Valid values: `ORIGINAL` and `UNIQUE`. Default is `ORIGINAL`.
        """
        return pulumi.get(self, "instance_name_style")


@pulumi.output_type
class ScalingGroupForwardBalancerId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerId":
            suggest = "listener_id"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"
        elif key == "targetAttributes":
            suggest = "target_attributes"
        elif key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScalingGroupForwardBalancerId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScalingGroupForwardBalancerId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScalingGroupForwardBalancerId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_id: str,
                 load_balancer_id: str,
                 target_attributes: Sequence['outputs.ScalingGroupForwardBalancerIdTargetAttribute'],
                 rule_id: Optional[str] = None):
        """
        :param str listener_id: Listener ID for application load balancers.
        :param str load_balancer_id: ID of available load balancers.
        :param Sequence['ScalingGroupForwardBalancerIdTargetAttributeArgs'] target_attributes: Attribute list of target rules.
        :param str rule_id: ID of forwarding rules.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "target_attributes", target_attributes)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        Listener ID for application load balancers.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        """
        ID of available load balancers.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="targetAttributes")
    def target_attributes(self) -> Sequence['outputs.ScalingGroupForwardBalancerIdTargetAttribute']:
        """
        Attribute list of target rules.
        """
        return pulumi.get(self, "target_attributes")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        """
        ID of forwarding rules.
        """
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class ScalingGroupForwardBalancerIdTargetAttribute(dict):
    def __init__(__self__, *,
                 port: int,
                 weight: int):
        """
        :param int port: Port number.
        :param int weight: Weight.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class StartInstanceRefreshRefreshSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rollingUpdateSettings":
            suggest = "rolling_update_settings"
        elif key == "checkInstanceTargetHealth":
            suggest = "check_instance_target_health"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StartInstanceRefreshRefreshSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StartInstanceRefreshRefreshSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StartInstanceRefreshRefreshSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rolling_update_settings: 'outputs.StartInstanceRefreshRefreshSettingsRollingUpdateSettings',
                 check_instance_target_health: Optional[bool] = None):
        """
        :param 'StartInstanceRefreshRefreshSettingsRollingUpdateSettingsArgs' rolling_update_settings: Rolling update settings parameters. RefreshMode is the rolling update. This parameter must be filled in.Note: This field may return null, indicating that no valid value can be obtained.
        :param bool check_instance_target_health: Backend service health check status for instances, defaults to FALSE. This setting takes effect only for scaling groups bound with application load balancers. When enabled, if an instance fails the check after being refreshed, its load balancer port weight remains 0 and is marked as a refresh failure. Valid values: <br><li>TRUE: Enable the check.</li> <li>FALSE: Do not enable the check.
        """
        pulumi.set(__self__, "rolling_update_settings", rolling_update_settings)
        if check_instance_target_health is not None:
            pulumi.set(__self__, "check_instance_target_health", check_instance_target_health)

    @property
    @pulumi.getter(name="rollingUpdateSettings")
    def rolling_update_settings(self) -> 'outputs.StartInstanceRefreshRefreshSettingsRollingUpdateSettings':
        """
        Rolling update settings parameters. RefreshMode is the rolling update. This parameter must be filled in.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "rolling_update_settings")

    @property
    @pulumi.getter(name="checkInstanceTargetHealth")
    def check_instance_target_health(self) -> Optional[bool]:
        """
        Backend service health check status for instances, defaults to FALSE. This setting takes effect only for scaling groups bound with application load balancers. When enabled, if an instance fails the check after being refreshed, its load balancer port weight remains 0 and is marked as a refresh failure. Valid values: <br><li>TRUE: Enable the check.</li> <li>FALSE: Do not enable the check.
        """
        return pulumi.get(self, "check_instance_target_health")


@pulumi.output_type
class StartInstanceRefreshRefreshSettingsRollingUpdateSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchNumber":
            suggest = "batch_number"
        elif key == "batchPause":
            suggest = "batch_pause"
        elif key == "maxSurge":
            suggest = "max_surge"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StartInstanceRefreshRefreshSettingsRollingUpdateSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StartInstanceRefreshRefreshSettingsRollingUpdateSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StartInstanceRefreshRefreshSettingsRollingUpdateSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_number: int,
                 batch_pause: Optional[str] = None,
                 max_surge: Optional[int] = None):
        """
        :param int batch_number: Batch quantity. The batch quantity should be a positive integer greater than 0, but cannot exceed the total number of instances pending refresh.
        :param str batch_pause: Pause policy between batches. Default value: Automatic. Valid values: <br><li>FIRST_BATCH_PAUSE: Pause after the first batch update completes.</li> <li>BATCH_INTERVAL_PAUSE: Pause between each batch update.</li> <li>AUTOMATIC: No pauses.
        :param int max_surge: Maximum Extra Quantity. After setting this parameter, a batch of pay-as-you-go extra instances will be created according to the launch configuration before the rolling update starts, and the extra instances will be destroyed after the rolling update is completed.
        """
        pulumi.set(__self__, "batch_number", batch_number)
        if batch_pause is not None:
            pulumi.set(__self__, "batch_pause", batch_pause)
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)

    @property
    @pulumi.getter(name="batchNumber")
    def batch_number(self) -> int:
        """
        Batch quantity. The batch quantity should be a positive integer greater than 0, but cannot exceed the total number of instances pending refresh.
        """
        return pulumi.get(self, "batch_number")

    @property
    @pulumi.getter(name="batchPause")
    def batch_pause(self) -> Optional[str]:
        """
        Pause policy between batches. Default value: Automatic. Valid values: <br><li>FIRST_BATCH_PAUSE: Pause after the first batch update completes.</li> <li>BATCH_INTERVAL_PAUSE: Pause between each batch update.</li> <li>AUTOMATIC: No pauses.
        """
        return pulumi.get(self, "batch_pause")

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[int]:
        """
        Maximum Extra Quantity. After setting this parameter, a batch of pay-as-you-go extra instances will be created according to the launch configuration before the rolling update starts, and the extra instances will be destroyed after the rolling update is completed.
        """
        return pulumi.get(self, "max_surge")


@pulumi.output_type
class GetAdvicesAutoScalingAdviceSetResult(dict):
    def __init__(__self__, *,
                 advices: Sequence['outputs.GetAdvicesAutoScalingAdviceSetAdviceResult'],
                 auto_scaling_group_id: str,
                 level: str):
        """
        :param Sequence['GetAdvicesAutoScalingAdviceSetAdviceArgs'] advices: A collection of suggestions for scaling group configurations.
        :param str auto_scaling_group_id: Auto scaling group ID.
        :param str level: Scaling group warning level. Valid values: NORMAL, WARNING, CRITICAL.
        """
        pulumi.set(__self__, "advices", advices)
        pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def advices(self) -> Sequence['outputs.GetAdvicesAutoScalingAdviceSetAdviceResult']:
        """
        A collection of suggestions for scaling group configurations.
        """
        return pulumi.get(self, "advices")

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> str:
        """
        Auto scaling group ID.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        Scaling group warning level. Valid values: NORMAL, WARNING, CRITICAL.
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class GetAdvicesAutoScalingAdviceSetAdviceResult(dict):
    def __init__(__self__, *,
                 detail: str,
                 problem: str,
                 solution: str):
        """
        :param str detail: Problem Details.
        :param str problem: Problem Description.
        :param str solution: Recommended resolutions.
        """
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "problem", problem)
        pulumi.set(__self__, "solution", solution)

    @property
    @pulumi.getter
    def detail(self) -> str:
        """
        Problem Details.
        """
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter
    def problem(self) -> str:
        """
        Problem Description.
        """
        return pulumi.get(self, "problem")

    @property
    @pulumi.getter
    def solution(self) -> str:
        """
        Recommended resolutions.
        """
        return pulumi.get(self, "solution")


@pulumi.output_type
class GetInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Fields to be filtered. Valid names: `instance-id`: Filters by instance ID, `auto-scaling-group-id`: Filter by scaling group ID.
        :param Sequence[str] values: Value of the field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Fields to be filtered. Valid names: `instance-id`: Filters by instance ID, `auto-scaling-group-id`: Filter by scaling group ID.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Value of the field.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 auto_scaling_group_id: str,
                 auto_scaling_group_name: str,
                 creation_type: str,
                 health_status: str,
                 instance_id: str,
                 instance_type: str,
                 launch_configuration_id: str,
                 launch_configuration_name: str,
                 life_cycle_state: str,
                 protected_from_scale_in: bool,
                 version_number: int,
                 zone: str):
        """
        :param str add_time: The time when the instance joined the group.
        :param str auto_scaling_group_id: Auto scaling group ID.
        :param str auto_scaling_group_name: Auto scaling group name.
        :param str creation_type: Valid values: `AUTO_CREATION`, `MANUAL_ATTACHING`.
        :param str health_status: Health status, the valid values are HEALTHY and UNHEALTHY.
        :param str instance_id: Instance ID.
        :param str instance_type: Instance type.
        :param str launch_configuration_id: Launch configuration ID.
        :param str launch_configuration_name: Launch configuration name.
        :param str life_cycle_state: Life cycle state. Please refer to the link for field value details: https://cloud.tencent.com/document/api/377/20453#Instance.
        :param bool protected_from_scale_in: Enable scale in protection.
        :param int version_number: Version ID.
        :param str zone: Available zone.
        """
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        pulumi.set(__self__, "auto_scaling_group_name", auto_scaling_group_name)
        pulumi.set(__self__, "creation_type", creation_type)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "launch_configuration_id", launch_configuration_id)
        pulumi.set(__self__, "launch_configuration_name", launch_configuration_name)
        pulumi.set(__self__, "life_cycle_state", life_cycle_state)
        pulumi.set(__self__, "protected_from_scale_in", protected_from_scale_in)
        pulumi.set(__self__, "version_number", version_number)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        """
        The time when the instance joined the group.
        """
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> str:
        """
        Auto scaling group ID.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter(name="autoScalingGroupName")
    def auto_scaling_group_name(self) -> str:
        """
        Auto scaling group name.
        """
        return pulumi.get(self, "auto_scaling_group_name")

    @property
    @pulumi.getter(name="creationType")
    def creation_type(self) -> str:
        """
        Valid values: `AUTO_CREATION`, `MANUAL_ATTACHING`.
        """
        return pulumi.get(self, "creation_type")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        """
        Health status, the valid values are HEALTHY and UNHEALTHY.
        """
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="launchConfigurationId")
    def launch_configuration_id(self) -> str:
        """
        Launch configuration ID.
        """
        return pulumi.get(self, "launch_configuration_id")

    @property
    @pulumi.getter(name="launchConfigurationName")
    def launch_configuration_name(self) -> str:
        """
        Launch configuration name.
        """
        return pulumi.get(self, "launch_configuration_name")

    @property
    @pulumi.getter(name="lifeCycleState")
    def life_cycle_state(self) -> str:
        """
        Life cycle state. Please refer to the link for field value details: https://cloud.tencent.com/document/api/377/20453#Instance.
        """
        return pulumi.get(self, "life_cycle_state")

    @property
    @pulumi.getter(name="protectedFromScaleIn")
    def protected_from_scale_in(self) -> bool:
        """
        Enable scale in protection.
        """
        return pulumi.get(self, "protected_from_scale_in")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> int:
        """
        Version ID.
        """
        return pulumi.get(self, "version_number")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Available zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetLastActivityActivitySetResult(dict):
    def __init__(__self__, *,
                 activity_id: str,
                 activity_related_instance_sets: Sequence['outputs.GetLastActivityActivitySetActivityRelatedInstanceSetResult'],
                 activity_type: str,
                 auto_scaling_group_id: str,
                 cause: str,
                 created_time: str,
                 description: str,
                 detailed_status_message_sets: Sequence['outputs.GetLastActivityActivitySetDetailedStatusMessageSetResult'],
                 end_time: str,
                 invocation_result_sets: Sequence['outputs.GetLastActivityActivitySetInvocationResultSetResult'],
                 lifecycle_action_result_sets: Sequence['outputs.GetLastActivityActivitySetLifecycleActionResultSetResult'],
                 start_time: str,
                 status_code: str,
                 status_message: str,
                 status_message_simplified: str):
        """
        :param str activity_id: Scaling activity ID.
        :param Sequence['GetLastActivityActivitySetActivityRelatedInstanceSetArgs'] activity_related_instance_sets: Information set of the instances related to the scaling activity.
        :param str activity_type: Type of the scaling activity. Value range: SCALE_OUT, SCALE_IN, ATTACH_INSTANCES, REMOVE_INSTANCES, DETACH_INSTANCES, TERMINATE_INSTANCES_UNEXPECTEDLY, REPLACE_UNHEALTHY_INSTANCE, START_INSTANCES, STOP_INSTANCES, INVOKE_COMMAND.
        :param str auto_scaling_group_id: Auto scaling group ID.
        :param str cause: Cause of the scaling activity.
        :param str created_time: Creation time of the scaling activity.
        :param str description: Description of the scaling activity.
        :param Sequence['GetLastActivityActivitySetDetailedStatusMessageSetArgs'] detailed_status_message_sets: Detailed description of scaling activity status.
        :param str end_time: End time of the scaling activity.
        :param Sequence['GetLastActivityActivitySetInvocationResultSetArgs'] invocation_result_sets: Result of the command execution.
        :param Sequence['GetLastActivityActivitySetLifecycleActionResultSetArgs'] lifecycle_action_result_sets: Result of the lifecycle hook action in the scaling activity.
        :param str start_time: Start time of the scaling activity.
        :param str status_code: Scaling activity status. Value range: INIT, RUNNING, SUCCESSFUL, PARTIALLY_SUCCESSFUL, FAILED, CANCELLED.
        :param str status_message: Description of the scaling activity status.
        :param str status_message_simplified: Brief description of the scaling activity status.
        """
        pulumi.set(__self__, "activity_id", activity_id)
        pulumi.set(__self__, "activity_related_instance_sets", activity_related_instance_sets)
        pulumi.set(__self__, "activity_type", activity_type)
        pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        pulumi.set(__self__, "cause", cause)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "detailed_status_message_sets", detailed_status_message_sets)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "invocation_result_sets", invocation_result_sets)
        pulumi.set(__self__, "lifecycle_action_result_sets", lifecycle_action_result_sets)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "status_message_simplified", status_message_simplified)

    @property
    @pulumi.getter(name="activityId")
    def activity_id(self) -> str:
        """
        Scaling activity ID.
        """
        return pulumi.get(self, "activity_id")

    @property
    @pulumi.getter(name="activityRelatedInstanceSets")
    def activity_related_instance_sets(self) -> Sequence['outputs.GetLastActivityActivitySetActivityRelatedInstanceSetResult']:
        """
        Information set of the instances related to the scaling activity.
        """
        return pulumi.get(self, "activity_related_instance_sets")

    @property
    @pulumi.getter(name="activityType")
    def activity_type(self) -> str:
        """
        Type of the scaling activity. Value range: SCALE_OUT, SCALE_IN, ATTACH_INSTANCES, REMOVE_INSTANCES, DETACH_INSTANCES, TERMINATE_INSTANCES_UNEXPECTEDLY, REPLACE_UNHEALTHY_INSTANCE, START_INSTANCES, STOP_INSTANCES, INVOKE_COMMAND.
        """
        return pulumi.get(self, "activity_type")

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> str:
        """
        Auto scaling group ID.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter
    def cause(self) -> str:
        """
        Cause of the scaling activity.
        """
        return pulumi.get(self, "cause")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        Creation time of the scaling activity.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the scaling activity.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detailedStatusMessageSets")
    def detailed_status_message_sets(self) -> Sequence['outputs.GetLastActivityActivitySetDetailedStatusMessageSetResult']:
        """
        Detailed description of scaling activity status.
        """
        return pulumi.get(self, "detailed_status_message_sets")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        End time of the scaling activity.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="invocationResultSets")
    def invocation_result_sets(self) -> Sequence['outputs.GetLastActivityActivitySetInvocationResultSetResult']:
        """
        Result of the command execution.
        """
        return pulumi.get(self, "invocation_result_sets")

    @property
    @pulumi.getter(name="lifecycleActionResultSets")
    def lifecycle_action_result_sets(self) -> Sequence['outputs.GetLastActivityActivitySetLifecycleActionResultSetResult']:
        """
        Result of the lifecycle hook action in the scaling activity.
        """
        return pulumi.get(self, "lifecycle_action_result_sets")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Start time of the scaling activity.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> str:
        """
        Scaling activity status. Value range: INIT, RUNNING, SUCCESSFUL, PARTIALLY_SUCCESSFUL, FAILED, CANCELLED.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        """
        Description of the scaling activity status.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="statusMessageSimplified")
    def status_message_simplified(self) -> str:
        """
        Brief description of the scaling activity status.
        """
        return pulumi.get(self, "status_message_simplified")


@pulumi.output_type
class GetLastActivityActivitySetActivityRelatedInstanceSetResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 instance_status: str):
        """
        :param str instance_id: ID of the instance.
        :param str instance_status: Status of the instance in the scaling activity. Value range: INIT, RUNNING, SUCCESSFUL, FAILED.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_status", instance_status)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> str:
        """
        Status of the instance in the scaling activity. Value range: INIT, RUNNING, SUCCESSFUL, FAILED.
        """
        return pulumi.get(self, "instance_status")


@pulumi.output_type
class GetLastActivityActivitySetDetailedStatusMessageSetResult(dict):
    def __init__(__self__, *,
                 code: str,
                 instance_charge_type: str,
                 instance_id: str,
                 instance_type: str,
                 message: str,
                 subnet_id: str,
                 zone: str):
        """
        :param str code: Error type.
        :param str instance_charge_type: Instance billing mode.
        :param str instance_id: ID of the instance.
        :param str instance_type: Instance type.
        :param str message: Error message.
        :param str subnet_id: Subnet ID.
        :param str zone: AZ information.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Error type.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> str:
        """
        Instance billing mode.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        Instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        AZ information.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetLastActivityActivitySetInvocationResultSetResult(dict):
    def __init__(__self__, *,
                 command_id: str,
                 error_message: str,
                 instance_id: str,
                 invocation_id: str,
                 invocation_task_id: str,
                 task_status: str):
        """
        :param str command_id: Command ID. Note: This field may return null, indicating that no valid values can be obtained.
        :param str error_message: Execution exception information. Note: This field may return null, indicating that no valid values can be obtained.
        :param str instance_id: ID of the instance.
        :param str invocation_id: Execution task ID. You can query the result by using the DescribeInvocations API of TAT.
        :param str invocation_task_id: Execution task ID. Note: This field may return null, indicating that no valid values can be obtained.
        :param str task_status: Execution Status. Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "command_id", command_id)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "invocation_id", invocation_id)
        pulumi.set(__self__, "invocation_task_id", invocation_task_id)
        pulumi.set(__self__, "task_status", task_status)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> str:
        """
        Command ID. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "command_id")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        """
        Execution exception information. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="invocationId")
    def invocation_id(self) -> str:
        """
        Execution task ID. You can query the result by using the DescribeInvocations API of TAT.
        """
        return pulumi.get(self, "invocation_id")

    @property
    @pulumi.getter(name="invocationTaskId")
    def invocation_task_id(self) -> str:
        """
        Execution task ID. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "invocation_task_id")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> str:
        """
        Execution Status. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "task_status")


@pulumi.output_type
class GetLastActivityActivitySetLifecycleActionResultSetResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 invocation_id: str,
                 invoke_command_result: str,
                 lifecycle_action_result: str,
                 lifecycle_hook_id: str,
                 notification_result: str,
                 result_reason: str):
        """
        :param str instance_id: ID of the instance.
        :param str invocation_id: Execution task ID. You can query the result by using the DescribeInvocations API of TAT.
        :param str invoke_command_result: Result of command invocation, value range: SUCCESSFUL, FAILED, NONE.
        :param str lifecycle_action_result: Result of the lifecycle hook action, value range: CONTINUE, ABANDON.
        :param str lifecycle_hook_id: ID of the lifecycle hook.
        :param str notification_result: Notification result, which indicates whether it is successful to notify CMQ/TDMQ, value range: SUCCESSFUL, FAILED, NONE.
        :param str result_reason: Reason of the result, value range: HEARTBEAT_TIMEOUT: Heartbeat timed out. The setting of DefaultResult is used. NOTIFICATION_FAILURE: Failed to send the notification. The setting of DefaultResult is used. CALL_INTERFACE: Calls the CompleteLifecycleAction to set the result ANOTHER_ACTION_ABANDON: It has been set to ABANDON by another operation. COMMAND_CALL_FAILURE: Failed to call the command. The DefaultResult is applied. COMMAND_EXEC_FINISH: Command completed COMMAND_CALL_FAILURE: Failed to execute the command. The DefaultResult is applied. COMMAND_EXEC_RESULT_CHECK_FAILURE: Failed to check the command result. The DefaultResult is applied.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "invocation_id", invocation_id)
        pulumi.set(__self__, "invoke_command_result", invoke_command_result)
        pulumi.set(__self__, "lifecycle_action_result", lifecycle_action_result)
        pulumi.set(__self__, "lifecycle_hook_id", lifecycle_hook_id)
        pulumi.set(__self__, "notification_result", notification_result)
        pulumi.set(__self__, "result_reason", result_reason)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="invocationId")
    def invocation_id(self) -> str:
        """
        Execution task ID. You can query the result by using the DescribeInvocations API of TAT.
        """
        return pulumi.get(self, "invocation_id")

    @property
    @pulumi.getter(name="invokeCommandResult")
    def invoke_command_result(self) -> str:
        """
        Result of command invocation, value range: SUCCESSFUL, FAILED, NONE.
        """
        return pulumi.get(self, "invoke_command_result")

    @property
    @pulumi.getter(name="lifecycleActionResult")
    def lifecycle_action_result(self) -> str:
        """
        Result of the lifecycle hook action, value range: CONTINUE, ABANDON.
        """
        return pulumi.get(self, "lifecycle_action_result")

    @property
    @pulumi.getter(name="lifecycleHookId")
    def lifecycle_hook_id(self) -> str:
        """
        ID of the lifecycle hook.
        """
        return pulumi.get(self, "lifecycle_hook_id")

    @property
    @pulumi.getter(name="notificationResult")
    def notification_result(self) -> str:
        """
        Notification result, which indicates whether it is successful to notify CMQ/TDMQ, value range: SUCCESSFUL, FAILED, NONE.
        """
        return pulumi.get(self, "notification_result")

    @property
    @pulumi.getter(name="resultReason")
    def result_reason(self) -> str:
        """
        Reason of the result, value range: HEARTBEAT_TIMEOUT: Heartbeat timed out. The setting of DefaultResult is used. NOTIFICATION_FAILURE: Failed to send the notification. The setting of DefaultResult is used. CALL_INTERFACE: Calls the CompleteLifecycleAction to set the result ANOTHER_ACTION_ABANDON: It has been set to ABANDON by another operation. COMMAND_CALL_FAILURE: Failed to call the command. The DefaultResult is applied. COMMAND_EXEC_FINISH: Command completed COMMAND_CALL_FAILURE: Failed to execute the command. The DefaultResult is applied. COMMAND_EXEC_RESULT_CHECK_FAILURE: Failed to check the command result. The DefaultResult is applied.
        """
        return pulumi.get(self, "result_reason")


@pulumi.output_type
class GetScalingConfigsConfigurationListResult(dict):
    def __init__(__self__, *,
                 configuration_id: str,
                 configuration_name: str,
                 create_time: str,
                 data_disks: Sequence['outputs.GetScalingConfigsConfigurationListDataDiskResult'],
                 disk_type_policy: str,
                 enhanced_monitor_service: bool,
                 enhanced_security_service: bool,
                 image_id: str,
                 instance_tags: Mapping[str, Any],
                 instance_types: Sequence[str],
                 internet_charge_type: str,
                 internet_max_bandwidth_out: int,
                 key_ids: Sequence[str],
                 project_id: int,
                 public_ip_assigned: bool,
                 security_group_ids: Sequence[str],
                 status: str,
                 system_disk_size: int,
                 system_disk_type: str,
                 user_data: str,
                 version_number: int):
        """
        :param str configuration_id: Launch configuration ID.
        :param str configuration_name: Launch configuration name.
        :param str create_time: The time when the launch configuration was created.
        :param Sequence['GetScalingConfigsConfigurationListDataDiskArgs'] data_disks: Configurations of data disk.
        :param str disk_type_policy: Policy of cloud disk type.
        :param bool enhanced_monitor_service: Whether to activate cloud monitor service.
        :param bool enhanced_security_service: Whether to activate cloud security service.
        :param str image_id: ID of available image, for example `img-8toqc6s3`.
        :param Mapping[str, Any] instance_tags: A tag list associates with an instance.
        :param Sequence[str] instance_types: Instance type list of the scaling configuration.
        :param str internet_charge_type: Charge types for network traffic.
        :param int internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps.
        :param Sequence[str] key_ids: ID list of login keys.
        :param int project_id: ID of the project to which the configuration belongs. Default value is 0.
        :param bool public_ip_assigned: Specify whether to assign an Internet IP address.
        :param Sequence[str] security_group_ids: Security groups to which the instance belongs.
        :param str status: Current status of a launch configuration.
        :param int system_disk_size: System disk size of the scaling configuration in GB.
        :param str system_disk_type: System disk category of the scaling configuration.
        :param str user_data: Base64-encoded User Data text.
        :param int version_number: Version Number.
        """
        pulumi.set(__self__, "configuration_id", configuration_id)
        pulumi.set(__self__, "configuration_name", configuration_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "disk_type_policy", disk_type_policy)
        pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_tags", instance_tags)
        pulumi.set(__self__, "instance_types", instance_types)
        pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        pulumi.set(__self__, "key_ids", key_ids)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)
        pulumi.set(__self__, "user_data", user_data)
        pulumi.set(__self__, "version_number", version_number)

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> str:
        """
        Launch configuration ID.
        """
        return pulumi.get(self, "configuration_id")

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> str:
        """
        Launch configuration name.
        """
        return pulumi.get(self, "configuration_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the launch configuration was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.GetScalingConfigsConfigurationListDataDiskResult']:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="diskTypePolicy")
    def disk_type_policy(self) -> str:
        """
        Policy of cloud disk type.
        """
        return pulumi.get(self, "disk_type_policy")

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> bool:
        """
        Whether to activate cloud monitor service.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> bool:
        """
        Whether to activate cloud security service.
        """
        return pulumi.get(self, "enhanced_security_service")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        """
        ID of available image, for example `img-8toqc6s3`.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceTags")
    def instance_tags(self) -> Mapping[str, Any]:
        """
        A tag list associates with an instance.
        """
        return pulumi.get(self, "instance_tags")

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Sequence[str]:
        """
        Instance type list of the scaling configuration.
        """
        return pulumi.get(self, "instance_types")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> str:
        """
        Charge types for network traffic.
        """
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> int:
        """
        Max bandwidth of Internet access in Mbps.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Sequence[str]:
        """
        ID list of login keys.
        """
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        ID of the project to which the configuration belongs. Default value is 0.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> bool:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        Security groups to which the instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of a launch configuration.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> int:
        """
        System disk size of the scaling configuration in GB.
        """
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> str:
        """
        System disk category of the scaling configuration.
        """
        return pulumi.get(self, "system_disk_type")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> str:
        """
        Base64-encoded User Data text.
        """
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> int:
        """
        Version Number.
        """
        return pulumi.get(self, "version_number")


@pulumi.output_type
class GetScalingConfigsConfigurationListDataDiskResult(dict):
    def __init__(__self__, *,
                 delete_with_instance: bool,
                 disk_size: int,
                 disk_type: str,
                 snapshot_id: str):
        """
        :param bool delete_with_instance: Indicates whether the disk remove after instance terminated.
        :param int disk_size: Volume of disk in GB. Default is `0`.
        :param str disk_type: Type of disk.
        :param str snapshot_id: Data disk snapshot ID.
        """
        pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> bool:
        """
        Indicates whether the disk remove after instance terminated.
        """
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of disk in GB. Default is `0`.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Type of disk.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        """
        Data disk snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")


@pulumi.output_type
class GetScalingGroupsScalingGroupListResult(dict):
    def __init__(__self__, *,
                 configuration_id: str,
                 create_time: str,
                 default_cooldown: int,
                 desired_capacity: int,
                 forward_balancer_ids: Sequence['outputs.GetScalingGroupsScalingGroupListForwardBalancerIdResult'],
                 instance_count: int,
                 load_balancer_ids: Sequence[str],
                 max_size: int,
                 min_size: int,
                 multi_zone_subnet_policy: str,
                 project_id: int,
                 retry_policy: str,
                 scaling_group_id: str,
                 scaling_group_name: str,
                 status: str,
                 subnet_ids: Sequence[str],
                 tags: Mapping[str, Any],
                 termination_policies: Sequence[str],
                 vpc_id: str,
                 zones: Sequence[str]):
        """
        :param str configuration_id: Filter results by launch configuration ID.
        :param str create_time: The time when the AS group was created.
        :param int default_cooldown: Default cooldown time of scaling group.
        :param int desired_capacity: The desired number of CVM instances.
        :param Sequence['GetScalingGroupsScalingGroupListForwardBalancerIdArgs'] forward_balancer_ids: A list of application clb ids.
        :param int instance_count: Number of instance.
        :param Sequence[str] load_balancer_ids: A list of traditional clb ids which the CVM instances attached to.
        :param int max_size: The maximum number of CVM instances.
        :param int min_size: The minimum number of CVM instances.
        :param str multi_zone_subnet_policy: Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
        :param int project_id: ID of the project to which the scaling group belongs. Default value is 0.
        :param str retry_policy: A retry policy can be used when a creation fails.
        :param str scaling_group_id: A specified scaling group ID used to query.
        :param str scaling_group_name: A scaling group name used to query.
        :param str status: Current status of a scaling group.
        :param Sequence[str] subnet_ids: A list of subnet IDs.
        :param Mapping[str, Any] tags: Tags used to query.
        :param Sequence[str] termination_policies: A policy used to select a CVM instance to be terminated from the scaling group.
        :param str vpc_id: ID of the vpc with which the instance is associated.
        :param Sequence[str] zones: A list of available zones.
        """
        pulumi.set(__self__, "configuration_id", configuration_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "default_cooldown", default_cooldown)
        pulumi.set(__self__, "desired_capacity", desired_capacity)
        pulumi.set(__self__, "forward_balancer_ids", forward_balancer_ids)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "load_balancer_ids", load_balancer_ids)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "multi_zone_subnet_policy", multi_zone_subnet_policy)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "retry_policy", retry_policy)
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        pulumi.set(__self__, "scaling_group_name", scaling_group_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "termination_policies", termination_policies)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> str:
        """
        Filter results by launch configuration ID.
        """
        return pulumi.get(self, "configuration_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time when the AS group was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="defaultCooldown")
    def default_cooldown(self) -> int:
        """
        Default cooldown time of scaling group.
        """
        return pulumi.get(self, "default_cooldown")

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> int:
        """
        The desired number of CVM instances.
        """
        return pulumi.get(self, "desired_capacity")

    @property
    @pulumi.getter(name="forwardBalancerIds")
    def forward_balancer_ids(self) -> Sequence['outputs.GetScalingGroupsScalingGroupListForwardBalancerIdResult']:
        """
        A list of application clb ids.
        """
        return pulumi.get(self, "forward_balancer_ids")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        Number of instance.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> Sequence[str]:
        """
        A list of traditional clb ids which the CVM instances attached to.
        """
        return pulumi.get(self, "load_balancer_ids")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        """
        The maximum number of CVM instances.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        """
        The minimum number of CVM instances.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter(name="multiZoneSubnetPolicy")
    def multi_zone_subnet_policy(self) -> str:
        """
        Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
        """
        return pulumi.get(self, "multi_zone_subnet_policy")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        ID of the project to which the scaling group belongs. Default value is 0.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> str:
        """
        A retry policy can be used when a creation fails.
        """
        return pulumi.get(self, "retry_policy")

    @property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> str:
        """
        A specified scaling group ID used to query.
        """
        return pulumi.get(self, "scaling_group_id")

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> str:
        """
        A scaling group name used to query.
        """
        return pulumi.get(self, "scaling_group_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of a scaling group.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        A list of subnet IDs.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags used to query.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> Sequence[str]:
        """
        A policy used to select a CVM instance to be terminated from the scaling group.
        """
        return pulumi.get(self, "termination_policies")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the vpc with which the instance is associated.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zones(self) -> Sequence[str]:
        """
        A list of available zones.
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetScalingGroupsScalingGroupListForwardBalancerIdResult(dict):
    def __init__(__self__, *,
                 listener_id: str,
                 load_balancer_id: str,
                 location_id: str,
                 target_attributes: Sequence['outputs.GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttributeResult']):
        """
        :param str listener_id: Listener ID for application load balancers.
        :param str load_balancer_id: ID of available load balancers.
        :param str location_id: ID of forwarding rules.
        :param Sequence['GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttributeArgs'] target_attributes: Attribute list of target rules.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "target_attributes", target_attributes)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        Listener ID for application load balancers.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        """
        ID of available load balancers.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        """
        ID of forwarding rules.
        """
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="targetAttributes")
    def target_attributes(self) -> Sequence['outputs.GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttributeResult']:
        """
        Attribute list of target rules.
        """
        return pulumi.get(self, "target_attributes")


@pulumi.output_type
class GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttributeResult(dict):
    def __init__(__self__, *,
                 port: int,
                 weight: int):
        """
        :param int port: Port number.
        :param int weight: Weight.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetScalingPoliciesScalingPolicyListResult(dict):
    def __init__(__self__, *,
                 adjustment_type: str,
                 adjustment_value: int,
                 comparison_operator: str,
                 continuous_time: int,
                 cooldown: int,
                 metric_name: str,
                 notification_user_group_ids: Sequence[str],
                 period: int,
                 policy_name: str,
                 scaling_group_id: str,
                 statistic: str,
                 threshold: int):
        """
        :param str adjustment_type: Adjustment type of the scaling rule.
        :param int adjustment_value: Adjustment value of the scaling rule.
        :param str comparison_operator: Comparison operator.
        :param int continuous_time: Retry times.
        :param int cooldown: Cool down time of the scaling rule.
        :param str metric_name: Name of an indicator.
        :param Sequence[str] notification_user_group_ids: Users need to be notified when an alarm is triggered.
        :param int period: Time period in second.
        :param str policy_name: Scaling policy name.
        :param str scaling_group_id: Scaling group ID.
        :param str statistic: Statistic types.
        :param int threshold: Alarm threshold.
        """
        pulumi.set(__self__, "adjustment_type", adjustment_type)
        pulumi.set(__self__, "adjustment_value", adjustment_value)
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "continuous_time", continuous_time)
        pulumi.set(__self__, "cooldown", cooldown)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notification_user_group_ids", notification_user_group_ids)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        pulumi.set(__self__, "statistic", statistic)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="adjustmentType")
    def adjustment_type(self) -> str:
        """
        Adjustment type of the scaling rule.
        """
        return pulumi.get(self, "adjustment_type")

    @property
    @pulumi.getter(name="adjustmentValue")
    def adjustment_value(self) -> int:
        """
        Adjustment value of the scaling rule.
        """
        return pulumi.get(self, "adjustment_value")

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> str:
        """
        Comparison operator.
        """
        return pulumi.get(self, "comparison_operator")

    @property
    @pulumi.getter(name="continuousTime")
    def continuous_time(self) -> int:
        """
        Retry times.
        """
        return pulumi.get(self, "continuous_time")

    @property
    @pulumi.getter
    def cooldown(self) -> int:
        """
        Cool down time of the scaling rule.
        """
        return pulumi.get(self, "cooldown")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Name of an indicator.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="notificationUserGroupIds")
    def notification_user_group_ids(self) -> Sequence[str]:
        """
        Users need to be notified when an alarm is triggered.
        """
        return pulumi.get(self, "notification_user_group_ids")

    @property
    @pulumi.getter
    def period(self) -> int:
        """
        Time period in second.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        """
        Scaling policy name.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> str:
        """
        Scaling group ID.
        """
        return pulumi.get(self, "scaling_group_id")

    @property
    @pulumi.getter
    def statistic(self) -> str:
        """
        Statistic types.
        """
        return pulumi.get(self, "statistic")

    @property
    @pulumi.getter
    def threshold(self) -> int:
        """
        Alarm threshold.
        """
        return pulumi.get(self, "threshold")


