# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StartInstanceRefreshArgs', 'StartInstanceRefresh']

@pulumi.input_type
class StartInstanceRefreshArgs:
    def __init__(__self__, *,
                 auto_scaling_group_id: pulumi.Input[str],
                 refresh_settings: pulumi.Input['StartInstanceRefreshRefreshSettingsArgs'],
                 refresh_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StartInstanceRefresh resource.
        :param pulumi.Input[str] auto_scaling_group_id: Scaling group ID.
        :param pulumi.Input['StartInstanceRefreshRefreshSettingsArgs'] refresh_settings: Refresh settings.
        :param pulumi.Input[str] refresh_mode: Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
        """
        pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        pulumi.set(__self__, "refresh_settings", refresh_settings)
        if refresh_mode is not None:
            pulumi.set(__self__, "refresh_mode", refresh_mode)

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> pulumi.Input[str]:
        """
        Scaling group ID.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @auto_scaling_group_id.setter
    def auto_scaling_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "auto_scaling_group_id", value)

    @property
    @pulumi.getter(name="refreshSettings")
    def refresh_settings(self) -> pulumi.Input['StartInstanceRefreshRefreshSettingsArgs']:
        """
        Refresh settings.
        """
        return pulumi.get(self, "refresh_settings")

    @refresh_settings.setter
    def refresh_settings(self, value: pulumi.Input['StartInstanceRefreshRefreshSettingsArgs']):
        pulumi.set(self, "refresh_settings", value)

    @property
    @pulumi.getter(name="refreshMode")
    def refresh_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
        """
        return pulumi.get(self, "refresh_mode")

    @refresh_mode.setter
    def refresh_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_mode", value)


@pulumi.input_type
class _StartInstanceRefreshState:
    def __init__(__self__, *,
                 auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
                 refresh_mode: Optional[pulumi.Input[str]] = None,
                 refresh_settings: Optional[pulumi.Input['StartInstanceRefreshRefreshSettingsArgs']] = None):
        """
        Input properties used for looking up and filtering StartInstanceRefresh resources.
        :param pulumi.Input[str] auto_scaling_group_id: Scaling group ID.
        :param pulumi.Input[str] refresh_mode: Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
        :param pulumi.Input['StartInstanceRefreshRefreshSettingsArgs'] refresh_settings: Refresh settings.
        """
        if auto_scaling_group_id is not None:
            pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        if refresh_mode is not None:
            pulumi.set(__self__, "refresh_mode", refresh_mode)
        if refresh_settings is not None:
            pulumi.set(__self__, "refresh_settings", refresh_settings)

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Scaling group ID.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @auto_scaling_group_id.setter
    def auto_scaling_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_scaling_group_id", value)

    @property
    @pulumi.getter(name="refreshMode")
    def refresh_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
        """
        return pulumi.get(self, "refresh_mode")

    @refresh_mode.setter
    def refresh_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_mode", value)

    @property
    @pulumi.getter(name="refreshSettings")
    def refresh_settings(self) -> Optional[pulumi.Input['StartInstanceRefreshRefreshSettingsArgs']]:
        """
        Refresh settings.
        """
        return pulumi.get(self, "refresh_settings")

    @refresh_settings.setter
    def refresh_settings(self, value: Optional[pulumi.Input['StartInstanceRefreshRefreshSettingsArgs']]):
        pulumi.set(self, "refresh_settings", value)


class StartInstanceRefresh(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
                 refresh_mode: Optional[pulumi.Input[str]] = None,
                 refresh_settings: Optional[pulumi.Input[pulumi.InputType['StartInstanceRefreshRefreshSettingsArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create as instance refresh

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.as_.StartInstanceRefresh("example",
            auto_scaling_group_id="asg-8n7fdm28",
            refresh_mode="ROLLING_UPDATE_RESET",
            refresh_settings=tencentcloud.as_.StartInstanceRefreshRefreshSettingsArgs(
                check_instance_target_health=False,
                rolling_update_settings=tencentcloud.as_.StartInstanceRefreshRefreshSettingsRollingUpdateSettingsArgs(
                    batch_number=1,
                    batch_pause="AUTOMATIC",
                    max_surge=1,
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_scaling_group_id: Scaling group ID.
        :param pulumi.Input[str] refresh_mode: Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
        :param pulumi.Input[pulumi.InputType['StartInstanceRefreshRefreshSettingsArgs']] refresh_settings: Refresh settings.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StartInstanceRefreshArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create as instance refresh

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.as_.StartInstanceRefresh("example",
            auto_scaling_group_id="asg-8n7fdm28",
            refresh_mode="ROLLING_UPDATE_RESET",
            refresh_settings=tencentcloud.as_.StartInstanceRefreshRefreshSettingsArgs(
                check_instance_target_health=False,
                rolling_update_settings=tencentcloud.as_.StartInstanceRefreshRefreshSettingsRollingUpdateSettingsArgs(
                    batch_number=1,
                    batch_pause="AUTOMATIC",
                    max_surge=1,
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param StartInstanceRefreshArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StartInstanceRefreshArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
                 refresh_mode: Optional[pulumi.Input[str]] = None,
                 refresh_settings: Optional[pulumi.Input[pulumi.InputType['StartInstanceRefreshRefreshSettingsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StartInstanceRefreshArgs.__new__(StartInstanceRefreshArgs)

            if auto_scaling_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'auto_scaling_group_id'")
            __props__.__dict__["auto_scaling_group_id"] = auto_scaling_group_id
            __props__.__dict__["refresh_mode"] = refresh_mode
            if refresh_settings is None and not opts.urn:
                raise TypeError("Missing required property 'refresh_settings'")
            __props__.__dict__["refresh_settings"] = refresh_settings
        super(StartInstanceRefresh, __self__).__init__(
            'tencentcloud:As/startInstanceRefresh:StartInstanceRefresh',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
            refresh_mode: Optional[pulumi.Input[str]] = None,
            refresh_settings: Optional[pulumi.Input[pulumi.InputType['StartInstanceRefreshRefreshSettingsArgs']]] = None) -> 'StartInstanceRefresh':
        """
        Get an existing StartInstanceRefresh resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_scaling_group_id: Scaling group ID.
        :param pulumi.Input[str] refresh_mode: Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
        :param pulumi.Input[pulumi.InputType['StartInstanceRefreshRefreshSettingsArgs']] refresh_settings: Refresh settings.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StartInstanceRefreshState.__new__(_StartInstanceRefreshState)

        __props__.__dict__["auto_scaling_group_id"] = auto_scaling_group_id
        __props__.__dict__["refresh_mode"] = refresh_mode
        __props__.__dict__["refresh_settings"] = refresh_settings
        return StartInstanceRefresh(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> pulumi.Output[str]:
        """
        Scaling group ID.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter(name="refreshMode")
    def refresh_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
        """
        return pulumi.get(self, "refresh_mode")

    @property
    @pulumi.getter(name="refreshSettings")
    def refresh_settings(self) -> pulumi.Output['outputs.StartInstanceRefreshRefreshSettings']:
        """
        Refresh settings.
        """
        return pulumi.get(self, "refresh_settings")

