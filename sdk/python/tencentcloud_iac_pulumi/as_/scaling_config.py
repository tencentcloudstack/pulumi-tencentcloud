# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScalingConfigArgs', 'ScalingConfig']

@pulumi.input_type
class ScalingConfigArgs:
    def __init__(__self__, *,
                 configuration_name: pulumi.Input[str],
                 instance_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingConfigDataDiskArgs']]]] = None,
                 disk_type_policy: Optional[pulumi.Input[str]] = None,
                 enhanced_automation_tools_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 host_name_settings: Optional[pulumi.Input['ScalingConfigHostNameSettingsArgs']] = None,
                 image_family: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name_settings: Optional[pulumi.Input['ScalingConfigInstanceNameSettingsArgs']] = None,
                 instance_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 keep_image_login: Optional[pulumi.Input[bool]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spot_instance_type: Optional[pulumi.Input[str]] = None,
                 spot_max_price: Optional[pulumi.Input[str]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ScalingConfig resource.
        :param pulumi.Input[str] configuration_name: Name of a launch configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_types: Specified types of CVM instances.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[Sequence[pulumi.Input['ScalingConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[str] disk_type_policy: Policy of cloud disk type. Valid values: `ORIGINAL` and `AUTOMATIC`. Default is `ORIGINAL`.
        :param pulumi.Input[bool] enhanced_automation_tools_service: To specify whether to enable cloud automation tools service.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is `TRUE`.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is `TRUE`.
        :param pulumi.Input['ScalingConfigHostNameSettingsArgs'] host_name_settings: Related settings of the cloud server hostname (HostName).
        :param pulumi.Input[str] image_family: Image Family Name. Either Image ID or Image Family Name must be provided, but not both.
        :param pulumi.Input[str] image_id: An available image ID for a cvm instance.
        :param pulumi.Input[str] instance_charge_type: Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input['ScalingConfigInstanceNameSettingsArgs'] instance_name_settings: Settings of CVM instance names.
        :param pulumi.Input[Mapping[str, Any]] instance_tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Valid values: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is `0`.
        :param pulumi.Input[bool] keep_image_login: Specify whether to keep original settings of a CVM image. And it can't be used with password or key_ids together.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ids: ID list of keys.
        :param pulumi.Input[str] password: Password to access.
        :param pulumi.Input[int] project_id: Specifys to which project the configuration belongs.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[str] spot_instance_type: Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[str] spot_max_price: Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: Type of a CVM disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`. valid when disk_type_policy is ORIGINAL.
        :param pulumi.Input[str] user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        pulumi.set(__self__, "configuration_name", configuration_name)
        pulumi.set(__self__, "instance_types", instance_types)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if disk_type_policy is not None:
            pulumi.set(__self__, "disk_type_policy", disk_type_policy)
        if enhanced_automation_tools_service is not None:
            pulumi.set(__self__, "enhanced_automation_tools_service", enhanced_automation_tools_service)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if host_name_settings is not None:
            pulumi.set(__self__, "host_name_settings", host_name_settings)
        if image_family is not None:
            pulumi.set(__self__, "image_family", image_family)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name_settings is not None:
            pulumi.set(__self__, "instance_name_settings", instance_name_settings)
        if instance_tags is not None:
            pulumi.set(__self__, "instance_tags", instance_tags)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if keep_image_login is not None:
            pulumi.set(__self__, "keep_image_login", keep_image_login)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if spot_instance_type is not None:
            pulumi.set(__self__, "spot_instance_type", spot_instance_type)
        if spot_max_price is not None:
            pulumi.set(__self__, "spot_max_price", spot_max_price)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> pulumi.Input[str]:
        """
        Name of a launch configuration.
        """
        return pulumi.get(self, "configuration_name")

    @configuration_name.setter
    def configuration_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration_name", value)

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Specified types of CVM instances.
        """
        return pulumi.get(self, "instance_types")

    @instance_types.setter
    def instance_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "instance_types", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="diskTypePolicy")
    def disk_type_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Policy of cloud disk type. Valid values: `ORIGINAL` and `AUTOMATIC`. Default is `ORIGINAL`.
        """
        return pulumi.get(self, "disk_type_policy")

    @disk_type_policy.setter
    def disk_type_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type_policy", value)

    @property
    @pulumi.getter(name="enhancedAutomationToolsService")
    def enhanced_automation_tools_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud automation tools service.
        """
        return pulumi.get(self, "enhanced_automation_tools_service")

    @enhanced_automation_tools_service.setter
    def enhanced_automation_tools_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_automation_tools_service", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is `TRUE`.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is `TRUE`.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter(name="hostNameSettings")
    def host_name_settings(self) -> Optional[pulumi.Input['ScalingConfigHostNameSettingsArgs']]:
        """
        Related settings of the cloud server hostname (HostName).
        """
        return pulumi.get(self, "host_name_settings")

    @host_name_settings.setter
    def host_name_settings(self, value: Optional[pulumi.Input['ScalingConfigHostNameSettingsArgs']]):
        pulumi.set(self, "host_name_settings", value)

    @property
    @pulumi.getter(name="imageFamily")
    def image_family(self) -> Optional[pulumi.Input[str]]:
        """
        Image Family Name. Either Image ID or Image Family Name must be provided, but not both.
        """
        return pulumi.get(self, "image_family")

    @image_family.setter
    def image_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_family", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        An available image ID for a cvm instance.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @instance_charge_type_prepaid_period.setter
    def instance_charge_type_prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_charge_type_prepaid_period", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @instance_charge_type_prepaid_renew_flag.setter
    def instance_charge_type_prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type_prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="instanceNameSettings")
    def instance_name_settings(self) -> Optional[pulumi.Input['ScalingConfigInstanceNameSettingsArgs']]:
        """
        Settings of CVM instance names.
        """
        return pulumi.get(self, "instance_name_settings")

    @instance_name_settings.setter
    def instance_name_settings(self, value: Optional[pulumi.Input['ScalingConfigInstanceNameSettingsArgs']]):
        pulumi.set(self, "instance_name_settings", value)

    @property
    @pulumi.getter(name="instanceTags")
    def instance_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "instance_tags")

    @instance_tags.setter
    def instance_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "instance_tags", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Valid values: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is `0`.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keepImageLogin")
    def keep_image_login(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to keep original settings of a CVM image. And it can't be used with password or key_ids together.
        """
        return pulumi.get(self, "keep_image_login")

    @keep_image_login.setter
    def keep_image_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_image_login", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of keys.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specifys to which project the configuration belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_instance_type")

    @spot_instance_type.setter
    def spot_instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_instance_type", value)

    @property
    @pulumi.getter(name="spotMaxPrice")
    def spot_max_price(self) -> Optional[pulumi.Input[str]]:
        """
        Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_max_price")

    @spot_max_price.setter
    def spot_max_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_max_price", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of a CVM disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`. valid when disk_type_policy is ORIGINAL.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class _ScalingConfigState:
    def __init__(__self__, *,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 configuration_name: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingConfigDataDiskArgs']]]] = None,
                 disk_type_policy: Optional[pulumi.Input[str]] = None,
                 enhanced_automation_tools_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 host_name_settings: Optional[pulumi.Input['ScalingConfigHostNameSettingsArgs']] = None,
                 image_family: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name_settings: Optional[pulumi.Input['ScalingConfigInstanceNameSettingsArgs']] = None,
                 instance_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 keep_image_login: Optional[pulumi.Input[bool]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spot_instance_type: Optional[pulumi.Input[str]] = None,
                 spot_max_price: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ScalingConfig resources.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[str] configuration_name: Name of a launch configuration.
        :param pulumi.Input[str] create_time: The time when the launch configuration was created.
        :param pulumi.Input[Sequence[pulumi.Input['ScalingConfigDataDiskArgs']]] data_disks: Configurations of data disk.
        :param pulumi.Input[str] disk_type_policy: Policy of cloud disk type. Valid values: `ORIGINAL` and `AUTOMATIC`. Default is `ORIGINAL`.
        :param pulumi.Input[bool] enhanced_automation_tools_service: To specify whether to enable cloud automation tools service.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is `TRUE`.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is `TRUE`.
        :param pulumi.Input['ScalingConfigHostNameSettingsArgs'] host_name_settings: Related settings of the cloud server hostname (HostName).
        :param pulumi.Input[str] image_family: Image Family Name. Either Image ID or Image Family Name must be provided, but not both.
        :param pulumi.Input[str] image_id: An available image ID for a cvm instance.
        :param pulumi.Input[str] instance_charge_type: Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input['ScalingConfigInstanceNameSettingsArgs'] instance_name_settings: Settings of CVM instance names.
        :param pulumi.Input[Mapping[str, Any]] instance_tags: A list of tags used to associate different resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_types: Specified types of CVM instances.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Valid values: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is `0`.
        :param pulumi.Input[bool] keep_image_login: Specify whether to keep original settings of a CVM image. And it can't be used with password or key_ids together.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ids: ID list of keys.
        :param pulumi.Input[str] password: Password to access.
        :param pulumi.Input[int] project_id: Specifys to which project the configuration belongs.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[str] spot_instance_type: Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[str] spot_max_price: Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[str] status: Current statues of a launch configuration.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: Type of a CVM disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`. valid when disk_type_policy is ORIGINAL.
        :param pulumi.Input[str] user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if configuration_name is not None:
            pulumi.set(__self__, "configuration_name", configuration_name)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if disk_type_policy is not None:
            pulumi.set(__self__, "disk_type_policy", disk_type_policy)
        if enhanced_automation_tools_service is not None:
            pulumi.set(__self__, "enhanced_automation_tools_service", enhanced_automation_tools_service)
        if enhanced_monitor_service is not None:
            pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        if enhanced_security_service is not None:
            pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        if host_name_settings is not None:
            pulumi.set(__self__, "host_name_settings", host_name_settings)
        if image_family is not None:
            pulumi.set(__self__, "image_family", image_family)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_charge_type_prepaid_period is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_period", instance_charge_type_prepaid_period)
        if instance_charge_type_prepaid_renew_flag is not None:
            pulumi.set(__self__, "instance_charge_type_prepaid_renew_flag", instance_charge_type_prepaid_renew_flag)
        if instance_name_settings is not None:
            pulumi.set(__self__, "instance_name_settings", instance_name_settings)
        if instance_tags is not None:
            pulumi.set(__self__, "instance_tags", instance_tags)
        if instance_types is not None:
            pulumi.set(__self__, "instance_types", instance_types)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if keep_image_login is not None:
            pulumi.set(__self__, "keep_image_login", keep_image_login)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if spot_instance_type is not None:
            pulumi.set(__self__, "spot_instance_type", spot_instance_type)
        if spot_max_price is not None:
            pulumi.set(__self__, "spot_max_price", spot_max_price)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a launch configuration.
        """
        return pulumi.get(self, "configuration_name")

    @configuration_name.setter
    def configuration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_name", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the launch configuration was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingConfigDataDiskArgs']]]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingConfigDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="diskTypePolicy")
    def disk_type_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Policy of cloud disk type. Valid values: `ORIGINAL` and `AUTOMATIC`. Default is `ORIGINAL`.
        """
        return pulumi.get(self, "disk_type_policy")

    @disk_type_policy.setter
    def disk_type_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type_policy", value)

    @property
    @pulumi.getter(name="enhancedAutomationToolsService")
    def enhanced_automation_tools_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud automation tools service.
        """
        return pulumi.get(self, "enhanced_automation_tools_service")

    @enhanced_automation_tools_service.setter
    def enhanced_automation_tools_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_automation_tools_service", value)

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is `TRUE`.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @enhanced_monitor_service.setter
    def enhanced_monitor_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_monitor_service", value)

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> Optional[pulumi.Input[bool]]:
        """
        To specify whether to enable cloud security service. Default is `TRUE`.
        """
        return pulumi.get(self, "enhanced_security_service")

    @enhanced_security_service.setter
    def enhanced_security_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enhanced_security_service", value)

    @property
    @pulumi.getter(name="hostNameSettings")
    def host_name_settings(self) -> Optional[pulumi.Input['ScalingConfigHostNameSettingsArgs']]:
        """
        Related settings of the cloud server hostname (HostName).
        """
        return pulumi.get(self, "host_name_settings")

    @host_name_settings.setter
    def host_name_settings(self, value: Optional[pulumi.Input['ScalingConfigHostNameSettingsArgs']]):
        pulumi.set(self, "host_name_settings", value)

    @property
    @pulumi.getter(name="imageFamily")
    def image_family(self) -> Optional[pulumi.Input[str]]:
        """
        Image Family Name. Either Image ID or Image Family Name must be provided, but not both.
        """
        return pulumi.get(self, "image_family")

    @image_family.setter
    def image_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_family", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        An available image ID for a cvm instance.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @instance_charge_type_prepaid_period.setter
    def instance_charge_type_prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_charge_type_prepaid_period", value)

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @instance_charge_type_prepaid_renew_flag.setter
    def instance_charge_type_prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type_prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="instanceNameSettings")
    def instance_name_settings(self) -> Optional[pulumi.Input['ScalingConfigInstanceNameSettingsArgs']]:
        """
        Settings of CVM instance names.
        """
        return pulumi.get(self, "instance_name_settings")

    @instance_name_settings.setter
    def instance_name_settings(self, value: Optional[pulumi.Input['ScalingConfigInstanceNameSettingsArgs']]):
        pulumi.set(self, "instance_name_settings", value)

    @property
    @pulumi.getter(name="instanceTags")
    def instance_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "instance_tags")

    @instance_tags.setter
    def instance_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "instance_tags", value)

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specified types of CVM instances.
        """
        return pulumi.get(self, "instance_types")

    @instance_types.setter
    def instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_types", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge types for network traffic. Valid values: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is `0`.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="keepImageLogin")
    def keep_image_login(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to keep original settings of a CVM image. And it can't be used with password or key_ids together.
        """
        return pulumi.get(self, "keep_image_login")

    @keep_image_login.setter
    def keep_image_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_image_login", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of keys.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specifys to which project the configuration belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_instance_type")

    @spot_instance_type.setter
    def spot_instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_instance_type", value)

    @property
    @pulumi.getter(name="spotMaxPrice")
    def spot_max_price(self) -> Optional[pulumi.Input[str]]:
        """
        Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_max_price")

    @spot_max_price.setter
    def spot_max_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_max_price", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current statues of a launch configuration.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_disk_size", value)

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of a CVM disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`. valid when disk_type_policy is ORIGINAL.
        """
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_disk_type", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


class ScalingConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 configuration_name: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScalingConfigDataDiskArgs']]]]] = None,
                 disk_type_policy: Optional[pulumi.Input[str]] = None,
                 enhanced_automation_tools_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 host_name_settings: Optional[pulumi.Input[pulumi.InputType['ScalingConfigHostNameSettingsArgs']]] = None,
                 image_family: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name_settings: Optional[pulumi.Input[pulumi.InputType['ScalingConfigInstanceNameSettingsArgs']]] = None,
                 instance_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 keep_image_login: Optional[pulumi.Input[bool]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spot_instance_type: Optional[pulumi.Input[str]] = None,
                 spot_max_price: Optional[pulumi.Input[str]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a configuration for an AS (Auto scaling) instance.

        > **NOTE:**  In order to ensure the integrity of customer data, if the cvm instance was destroyed due to shrinking, it will keep the cbs associate with cvm by default. If you want to destroy together, please set `delete_with_instance` to `true`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        example_instance = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            os_name="TencentOS Server 3.2 (Final)")
        example_scaling_config = tencentcloud.as_.ScalingConfig("exampleScalingConfig",
            configuration_name="example-launch-configuration",
            image_id=example_instance.images[0].image_id,
            instance_types=["SA1.SMALL1"],
            project_id=0,
            system_disk_type="CLOUD_PREMIUM",
            system_disk_size=50,
            data_disks=[tencentcloud.as_.ScalingConfigDataDiskArgs(
                disk_type="CLOUD_PREMIUM",
                disk_size=50,
            )],
            internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
            internet_max_bandwidth_out=10,
            public_ip_assigned=True,
            password="Test@123#",
            enhanced_security_service=False,
            enhanced_monitor_service=False,
            enhanced_automation_tools_service=False,
            user_data="dGVzdA==",
            host_name_settings=tencentcloud.as_.ScalingConfigHostNameSettingsArgs(
                host_name="host-name-test",
                host_name_style="UNIQUE",
            ),
            instance_tags={
                "tag": "example",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### charge type

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        example_instance = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            os_name="TencentOS Server 3.2 (Final)")
        example_scaling_config = tencentcloud.as_.ScalingConfig("exampleScalingConfig",
            configuration_name="launch-configuration",
            image_id=example_instance.images[0].image_id,
            instance_types=["SA1.SMALL1"],
            instance_charge_type="SPOTPAID",
            spot_instance_type="one-time",
            spot_max_price="1000")
        ```
        <!--End PulumiCodeChooser -->

        ### Using image family

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.as_.ScalingConfig("example",
            configuration_name="as-test-config",
            disk_type_policy="ORIGINAL",
            enhanced_automation_tools_service=False,
            enhanced_monitor_service=False,
            enhanced_security_service=False,
            image_family="business-daily-update",
            instance_tags={},
            instance_types=["S5.SMALL2"],
            internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
            internet_max_bandwidth_out=0,
            key_ids=[],
            project_id=0,
            public_ip_assigned=False,
            security_group_ids=["sg-5275dorp"],
            system_disk_size=50,
            system_disk_type="CLOUD_BSSD")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        AutoScaling Configuration can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:As/scalingConfig:ScalingConfig example asc-n32ymck2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[str] configuration_name: Name of a launch configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScalingConfigDataDiskArgs']]]] data_disks: Configurations of data disk.
        :param pulumi.Input[str] disk_type_policy: Policy of cloud disk type. Valid values: `ORIGINAL` and `AUTOMATIC`. Default is `ORIGINAL`.
        :param pulumi.Input[bool] enhanced_automation_tools_service: To specify whether to enable cloud automation tools service.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is `TRUE`.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is `TRUE`.
        :param pulumi.Input[pulumi.InputType['ScalingConfigHostNameSettingsArgs']] host_name_settings: Related settings of the cloud server hostname (HostName).
        :param pulumi.Input[str] image_family: Image Family Name. Either Image ID or Image Family Name must be provided, but not both.
        :param pulumi.Input[str] image_id: An available image ID for a cvm instance.
        :param pulumi.Input[str] instance_charge_type: Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input[pulumi.InputType['ScalingConfigInstanceNameSettingsArgs']] instance_name_settings: Settings of CVM instance names.
        :param pulumi.Input[Mapping[str, Any]] instance_tags: A list of tags used to associate different resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_types: Specified types of CVM instances.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Valid values: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is `0`.
        :param pulumi.Input[bool] keep_image_login: Specify whether to keep original settings of a CVM image. And it can't be used with password or key_ids together.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ids: ID list of keys.
        :param pulumi.Input[str] password: Password to access.
        :param pulumi.Input[int] project_id: Specifys to which project the configuration belongs.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[str] spot_instance_type: Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[str] spot_max_price: Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: Type of a CVM disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`. valid when disk_type_policy is ORIGINAL.
        :param pulumi.Input[str] user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScalingConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a configuration for an AS (Auto scaling) instance.

        > **NOTE:**  In order to ensure the integrity of customer data, if the cvm instance was destroyed due to shrinking, it will keep the cbs associate with cvm by default. If you want to destroy together, please set `delete_with_instance` to `true`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        example_instance = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            os_name="TencentOS Server 3.2 (Final)")
        example_scaling_config = tencentcloud.as_.ScalingConfig("exampleScalingConfig",
            configuration_name="example-launch-configuration",
            image_id=example_instance.images[0].image_id,
            instance_types=["SA1.SMALL1"],
            project_id=0,
            system_disk_type="CLOUD_PREMIUM",
            system_disk_size=50,
            data_disks=[tencentcloud.as_.ScalingConfigDataDiskArgs(
                disk_type="CLOUD_PREMIUM",
                disk_size=50,
            )],
            internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
            internet_max_bandwidth_out=10,
            public_ip_assigned=True,
            password="Test@123#",
            enhanced_security_service=False,
            enhanced_monitor_service=False,
            enhanced_automation_tools_service=False,
            user_data="dGVzdA==",
            host_name_settings=tencentcloud.as_.ScalingConfigHostNameSettingsArgs(
                host_name="host-name-test",
                host_name_style="UNIQUE",
            ),
            instance_tags={
                "tag": "example",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### charge type

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        example_instance = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            os_name="TencentOS Server 3.2 (Final)")
        example_scaling_config = tencentcloud.as_.ScalingConfig("exampleScalingConfig",
            configuration_name="launch-configuration",
            image_id=example_instance.images[0].image_id,
            instance_types=["SA1.SMALL1"],
            instance_charge_type="SPOTPAID",
            spot_instance_type="one-time",
            spot_max_price="1000")
        ```
        <!--End PulumiCodeChooser -->

        ### Using image family

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.as_.ScalingConfig("example",
            configuration_name="as-test-config",
            disk_type_policy="ORIGINAL",
            enhanced_automation_tools_service=False,
            enhanced_monitor_service=False,
            enhanced_security_service=False,
            image_family="business-daily-update",
            instance_tags={},
            instance_types=["S5.SMALL2"],
            internet_charge_type="TRAFFIC_POSTPAID_BY_HOUR",
            internet_max_bandwidth_out=0,
            key_ids=[],
            project_id=0,
            public_ip_assigned=False,
            security_group_ids=["sg-5275dorp"],
            system_disk_size=50,
            system_disk_type="CLOUD_BSSD")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        AutoScaling Configuration can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:As/scalingConfig:ScalingConfig example asc-n32ymck2
        ```

        :param str resource_name: The name of the resource.
        :param ScalingConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScalingConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 configuration_name: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScalingConfigDataDiskArgs']]]]] = None,
                 disk_type_policy: Optional[pulumi.Input[str]] = None,
                 enhanced_automation_tools_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
                 enhanced_security_service: Optional[pulumi.Input[bool]] = None,
                 host_name_settings: Optional[pulumi.Input[pulumi.InputType['ScalingConfigHostNameSettingsArgs']]] = None,
                 image_family: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
                 instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 instance_name_settings: Optional[pulumi.Input[pulumi.InputType['ScalingConfigInstanceNameSettingsArgs']]] = None,
                 instance_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 keep_image_login: Optional[pulumi.Input[bool]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 spot_instance_type: Optional[pulumi.Input[str]] = None,
                 spot_max_price: Optional[pulumi.Input[str]] = None,
                 system_disk_size: Optional[pulumi.Input[int]] = None,
                 system_disk_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScalingConfigArgs.__new__(ScalingConfigArgs)

            __props__.__dict__["cam_role_name"] = cam_role_name
            if configuration_name is None and not opts.urn:
                raise TypeError("Missing required property 'configuration_name'")
            __props__.__dict__["configuration_name"] = configuration_name
            __props__.__dict__["data_disks"] = data_disks
            __props__.__dict__["disk_type_policy"] = disk_type_policy
            __props__.__dict__["enhanced_automation_tools_service"] = enhanced_automation_tools_service
            __props__.__dict__["enhanced_monitor_service"] = enhanced_monitor_service
            __props__.__dict__["enhanced_security_service"] = enhanced_security_service
            __props__.__dict__["host_name_settings"] = host_name_settings
            __props__.__dict__["image_family"] = image_family
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["instance_charge_type"] = instance_charge_type
            __props__.__dict__["instance_charge_type_prepaid_period"] = instance_charge_type_prepaid_period
            __props__.__dict__["instance_charge_type_prepaid_renew_flag"] = instance_charge_type_prepaid_renew_flag
            __props__.__dict__["instance_name_settings"] = instance_name_settings
            __props__.__dict__["instance_tags"] = instance_tags
            if instance_types is None and not opts.urn:
                raise TypeError("Missing required property 'instance_types'")
            __props__.__dict__["instance_types"] = instance_types
            __props__.__dict__["internet_charge_type"] = internet_charge_type
            __props__.__dict__["internet_max_bandwidth_out"] = internet_max_bandwidth_out
            __props__.__dict__["keep_image_login"] = keep_image_login
            __props__.__dict__["key_ids"] = key_ids
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["public_ip_assigned"] = public_ip_assigned
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["spot_instance_type"] = spot_instance_type
            __props__.__dict__["spot_max_price"] = spot_max_price
            __props__.__dict__["system_disk_size"] = system_disk_size
            __props__.__dict__["system_disk_type"] = system_disk_type
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["create_time"] = None
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ScalingConfig, __self__).__init__(
            'tencentcloud:As/scalingConfig:ScalingConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cam_role_name: Optional[pulumi.Input[str]] = None,
            configuration_name: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScalingConfigDataDiskArgs']]]]] = None,
            disk_type_policy: Optional[pulumi.Input[str]] = None,
            enhanced_automation_tools_service: Optional[pulumi.Input[bool]] = None,
            enhanced_monitor_service: Optional[pulumi.Input[bool]] = None,
            enhanced_security_service: Optional[pulumi.Input[bool]] = None,
            host_name_settings: Optional[pulumi.Input[pulumi.InputType['ScalingConfigHostNameSettingsArgs']]] = None,
            image_family: Optional[pulumi.Input[str]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            instance_charge_type: Optional[pulumi.Input[str]] = None,
            instance_charge_type_prepaid_period: Optional[pulumi.Input[int]] = None,
            instance_charge_type_prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
            instance_name_settings: Optional[pulumi.Input[pulumi.InputType['ScalingConfigInstanceNameSettingsArgs']]] = None,
            instance_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            internet_charge_type: Optional[pulumi.Input[str]] = None,
            internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
            keep_image_login: Optional[pulumi.Input[bool]] = None,
            key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            password: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            public_ip_assigned: Optional[pulumi.Input[bool]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            spot_instance_type: Optional[pulumi.Input[str]] = None,
            spot_max_price: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            system_disk_size: Optional[pulumi.Input[int]] = None,
            system_disk_type: Optional[pulumi.Input[str]] = None,
            user_data: Optional[pulumi.Input[str]] = None) -> 'ScalingConfig':
        """
        Get an existing ScalingConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[str] configuration_name: Name of a launch configuration.
        :param pulumi.Input[str] create_time: The time when the launch configuration was created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScalingConfigDataDiskArgs']]]] data_disks: Configurations of data disk.
        :param pulumi.Input[str] disk_type_policy: Policy of cloud disk type. Valid values: `ORIGINAL` and `AUTOMATIC`. Default is `ORIGINAL`.
        :param pulumi.Input[bool] enhanced_automation_tools_service: To specify whether to enable cloud automation tools service.
        :param pulumi.Input[bool] enhanced_monitor_service: To specify whether to enable cloud monitor service. Default is `TRUE`.
        :param pulumi.Input[bool] enhanced_security_service: To specify whether to enable cloud security service. Default is `TRUE`.
        :param pulumi.Input[pulumi.InputType['ScalingConfigHostNameSettingsArgs']] host_name_settings: Related settings of the cloud server hostname (HostName).
        :param pulumi.Input[str] image_family: Image Family Name. Either Image ID or Image Family Name must be provided, but not both.
        :param pulumi.Input[str] image_id: An available image ID for a cvm instance.
        :param pulumi.Input[str] instance_charge_type: Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        :param pulumi.Input[int] instance_charge_type_prepaid_period: The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        :param pulumi.Input[str] instance_charge_type_prepaid_renew_flag: Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        :param pulumi.Input[pulumi.InputType['ScalingConfigInstanceNameSettingsArgs']] instance_name_settings: Settings of CVM instance names.
        :param pulumi.Input[Mapping[str, Any]] instance_tags: A list of tags used to associate different resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_types: Specified types of CVM instances.
        :param pulumi.Input[str] internet_charge_type: Charge types for network traffic. Valid values: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[int] internet_max_bandwidth_out: Max bandwidth of Internet access in Mbps. Default is `0`.
        :param pulumi.Input[bool] keep_image_login: Specify whether to keep original settings of a CVM image. And it can't be used with password or key_ids together.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ids: ID list of keys.
        :param pulumi.Input[str] password: Password to access.
        :param pulumi.Input[int] project_id: Specifys to which project the configuration belongs.
        :param pulumi.Input[bool] public_ip_assigned: Specify whether to assign an Internet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security groups to which a CVM instance belongs.
        :param pulumi.Input[str] spot_instance_type: Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[str] spot_max_price: Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        :param pulumi.Input[str] status: Current statues of a launch configuration.
        :param pulumi.Input[int] system_disk_size: Volume of system disk in GB. Default is `50`.
        :param pulumi.Input[str] system_disk_type: Type of a CVM disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`. valid when disk_type_policy is ORIGINAL.
        :param pulumi.Input[str] user_data: ase64-encoded User Data text, the length limit is 16KB.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScalingConfigState.__new__(_ScalingConfigState)

        __props__.__dict__["cam_role_name"] = cam_role_name
        __props__.__dict__["configuration_name"] = configuration_name
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["data_disks"] = data_disks
        __props__.__dict__["disk_type_policy"] = disk_type_policy
        __props__.__dict__["enhanced_automation_tools_service"] = enhanced_automation_tools_service
        __props__.__dict__["enhanced_monitor_service"] = enhanced_monitor_service
        __props__.__dict__["enhanced_security_service"] = enhanced_security_service
        __props__.__dict__["host_name_settings"] = host_name_settings
        __props__.__dict__["image_family"] = image_family
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["instance_charge_type"] = instance_charge_type
        __props__.__dict__["instance_charge_type_prepaid_period"] = instance_charge_type_prepaid_period
        __props__.__dict__["instance_charge_type_prepaid_renew_flag"] = instance_charge_type_prepaid_renew_flag
        __props__.__dict__["instance_name_settings"] = instance_name_settings
        __props__.__dict__["instance_tags"] = instance_tags
        __props__.__dict__["instance_types"] = instance_types
        __props__.__dict__["internet_charge_type"] = internet_charge_type
        __props__.__dict__["internet_max_bandwidth_out"] = internet_max_bandwidth_out
        __props__.__dict__["keep_image_login"] = keep_image_login
        __props__.__dict__["key_ids"] = key_ids
        __props__.__dict__["password"] = password
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["public_ip_assigned"] = public_ip_assigned
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["spot_instance_type"] = spot_instance_type
        __props__.__dict__["spot_max_price"] = spot_max_price
        __props__.__dict__["status"] = status
        __props__.__dict__["system_disk_size"] = system_disk_size
        __props__.__dict__["system_disk_type"] = system_disk_type
        __props__.__dict__["user_data"] = user_data
        return ScalingConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> pulumi.Output[Optional[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> pulumi.Output[str]:
        """
        Name of a launch configuration.
        """
        return pulumi.get(self, "configuration_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time when the launch configuration was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> pulumi.Output[Optional[Sequence['outputs.ScalingConfigDataDisk']]]:
        """
        Configurations of data disk.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="diskTypePolicy")
    def disk_type_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Policy of cloud disk type. Valid values: `ORIGINAL` and `AUTOMATIC`. Default is `ORIGINAL`.
        """
        return pulumi.get(self, "disk_type_policy")

    @property
    @pulumi.getter(name="enhancedAutomationToolsService")
    def enhanced_automation_tools_service(self) -> pulumi.Output[Optional[bool]]:
        """
        To specify whether to enable cloud automation tools service.
        """
        return pulumi.get(self, "enhanced_automation_tools_service")

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> pulumi.Output[Optional[bool]]:
        """
        To specify whether to enable cloud monitor service. Default is `TRUE`.
        """
        return pulumi.get(self, "enhanced_monitor_service")

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> pulumi.Output[Optional[bool]]:
        """
        To specify whether to enable cloud security service. Default is `TRUE`.
        """
        return pulumi.get(self, "enhanced_security_service")

    @property
    @pulumi.getter(name="hostNameSettings")
    def host_name_settings(self) -> pulumi.Output[Optional['outputs.ScalingConfigHostNameSettings']]:
        """
        Related settings of the cloud server hostname (HostName).
        """
        return pulumi.get(self, "host_name_settings")

    @property
    @pulumi.getter(name="imageFamily")
    def image_family(self) -> pulumi.Output[Optional[str]]:
        """
        Image Family Name. Either Image ID or Image Family Name must be provided, but not both.
        """
        return pulumi.get(self, "image_family")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[Optional[str]]:
        """
        An available image ID for a cvm instance.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Charge type of instance. Valid values are `PREPAID`, `POSTPAID_BY_HOUR`, `SPOTPAID`. The default is `POSTPAID_BY_HOUR`. NOTE: `SPOTPAID` instance must set `spot_instance_type` and `spot_max_price` at the same time.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidPeriod")
    def instance_charge_type_prepaid_period(self) -> pulumi.Output[Optional[int]]:
        """
        The tenancy (in month) of the prepaid instance, NOTE: it only works when instance_charge_type is set to `PREPAID`. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_period")

    @property
    @pulumi.getter(name="instanceChargeTypePrepaidRenewFlag")
    def instance_charge_type_prepaid_renew_flag(self) -> pulumi.Output[str]:
        """
        Auto renewal flag. Valid values: `NOTIFY_AND_AUTO_RENEW`: notify upon expiration and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: notify upon expiration but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: neither notify upon expiration nor renew automatically. Default value: `NOTIFY_AND_MANUAL_RENEW`. If this parameter is specified as `NOTIFY_AND_AUTO_RENEW`, the instance will be automatically renewed on a monthly basis if the account balance is sufficient. NOTE: it only works when instance_charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "instance_charge_type_prepaid_renew_flag")

    @property
    @pulumi.getter(name="instanceNameSettings")
    def instance_name_settings(self) -> pulumi.Output[Optional['outputs.ScalingConfigInstanceNameSettings']]:
        """
        Settings of CVM instance names.
        """
        return pulumi.get(self, "instance_name_settings")

    @property
    @pulumi.getter(name="instanceTags")
    def instance_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "instance_tags")

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> pulumi.Output[Sequence[str]]:
        """
        Specified types of CVM instances.
        """
        return pulumi.get(self, "instance_types")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Charge types for network traffic. Valid values: `BANDWIDTH_PREPAID`, `TRAFFIC_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> pulumi.Output[Optional[int]]:
        """
        Max bandwidth of Internet access in Mbps. Default is `0`.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="keepImageLogin")
    def keep_image_login(self) -> pulumi.Output[Optional[bool]]:
        """
        Specify whether to keep original settings of a CVM image. And it can't be used with password or key_ids together.
        """
        return pulumi.get(self, "keep_image_login")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ID list of keys.
        """
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password to access.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        Specifys to which project the configuration belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> pulumi.Output[Optional[bool]]:
        """
        Specify whether to assign an Internet IP address.
        """
        return pulumi.get(self, "public_ip_assigned")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security groups to which a CVM instance belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of spot instance, only support `one-time` now. Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_instance_type")

    @property
    @pulumi.getter(name="spotMaxPrice")
    def spot_max_price(self) -> pulumi.Output[Optional[str]]:
        """
        Max price of a spot instance, is the format of decimal string, for example "0.50". Note: it only works when instance_charge_type is set to `SPOTPAID`.
        """
        return pulumi.get(self, "spot_max_price")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Current statues of a launch configuration.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> pulumi.Output[Optional[int]]:
        """
        Volume of system disk in GB. Default is `50`.
        """
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of a CVM disk. Valid values: `CLOUD_PREMIUM` and `CLOUD_SSD`. Default is `CLOUD_PREMIUM`. valid when disk_type_policy is ORIGINAL.
        """
        return pulumi.get(self, "system_disk_type")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[str]]:
        """
        ase64-encoded User Data text, the length limit is 16KB.
        """
        return pulumi.get(self, "user_data")

