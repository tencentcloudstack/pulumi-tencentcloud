# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScalingGroupArgs', 'ScalingGroup']

@pulumi.input_type
class ScalingGroupArgs:
    def __init__(__self__, *,
                 configuration_id: pulumi.Input[str],
                 max_size: pulumi.Input[int],
                 min_size: pulumi.Input[int],
                 scaling_group_name: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 default_cooldown: Optional[pulumi.Input[int]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 forward_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingGroupForwardBalancerIdArgs']]]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 lb_health_check_grace_period: Optional[pulumi.Input[int]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 multi_zone_subnet_policy: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 replace_load_balancer_unhealthy: Optional[pulumi.Input[bool]] = None,
                 replace_monitor_unhealthy: Optional[pulumi.Input[bool]] = None,
                 retry_policy: Optional[pulumi.Input[str]] = None,
                 scaling_mode: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 termination_policies: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ScalingGroup resource.
        :param pulumi.Input[str] configuration_id: An available ID for a launch configuration.
        :param pulumi.Input[int] max_size: Maximum number of CVM instances. Valid value ranges: (0~2000).
        :param pulumi.Input[int] min_size: Minimum number of CVM instances. Valid value ranges: (0~2000).
        :param pulumi.Input[str] scaling_group_name: Name of a scaling group.
        :param pulumi.Input[str] vpc_id: ID of VPC network.
        :param pulumi.Input[int] default_cooldown: Default cooldown time in second, and default value is `300`.
        :param pulumi.Input[int] desired_capacity: Desired volume of CVM instances, which is between `max_size` and `min_size`.
        :param pulumi.Input[Sequence[pulumi.Input['ScalingGroupForwardBalancerIdArgs']]] forward_balancer_ids: List of application load balancers, which can't be specified with `load_balancer_ids` together.
        :param pulumi.Input[str] health_check_type: Health check type of instances in a scaling group.<br><li>CVM: confirm whether an instance is healthy based on the network status. If the pinged instance is unreachable, the instance will be considered unhealthy. For more information, see [Instance Health Check](https://intl.cloud.tencent.com/document/product/377/8553?from_cn_redirect=1)<br><li>CLB: confirm whether an instance is healthy based on the CLB health check status. For more information, see [Health Check Overview](https://intl.cloud.tencent.com/document/product/214/6097?from_cn_redirect=1).<br>If the parameter is set to `CLB`, the scaling group will check both the network status and the CLB health check status. If the network check indicates unhealthy, the `HealthStatus` field will return `UNHEALTHY`. If the CLB health check indicates unhealthy, the `HealthStatus` field will return `CLB_UNHEALTHY`. If both checks indicate unhealthy, the `HealthStatus` field will return `UNHEALTHY|CLB_UNHEALTHY`. Default value: `CLB`.
        :param pulumi.Input[int] lb_health_check_grace_period: Grace period of the CLB health check during which the `IN_SERVICE` instances added will not be marked as `CLB_UNHEALTHY`.<br>Valid range: 0-7200, in seconds. Default value: `0`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: ID list of traditional load balancers.
        :param pulumi.Input[str] multi_zone_subnet_policy: Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
        :param pulumi.Input[int] project_id: Specifies to which project the scaling group belongs.
        :param pulumi.Input[bool] replace_load_balancer_unhealthy: Enable unhealthy instance replacement. If set to `true`, AS will replace instances that are found unhealthy in the CLB health check.
        :param pulumi.Input[bool] replace_monitor_unhealthy: Enables unhealthy instance replacement. If set to `true`, AS will replace instances that are flagged as unhealthy by Cloud Monitor.
        :param pulumi.Input[str] retry_policy: Available values for retry policies. Valid values: IMMEDIATE_RETRY and INCREMENTAL_INTERVALS.
        :param pulumi.Input[str] scaling_mode: Indicates scaling mode which creates and terminates instances (classic method), or method first tries to start stopped instances (wake up stopped) to perform scaling operations. Available values: `CLASSIC_SCALING`, `WAKE_UP_STOPPED_SCALING`. Default: `CLASSIC_SCALING`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: ID list of subnet, and for VPC it is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of a scaling group.
        :param pulumi.Input[str] termination_policies: Available values for termination policies. Valid values: OLDEST_INSTANCE and NEWEST_INSTANCE.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: List of available zones, for Basic network it is required.
        """
        pulumi.set(__self__, "configuration_id", configuration_id)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "scaling_group_name", scaling_group_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if default_cooldown is not None:
            pulumi.set(__self__, "default_cooldown", default_cooldown)
        if desired_capacity is not None:
            pulumi.set(__self__, "desired_capacity", desired_capacity)
        if forward_balancer_ids is not None:
            pulumi.set(__self__, "forward_balancer_ids", forward_balancer_ids)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if lb_health_check_grace_period is not None:
            pulumi.set(__self__, "lb_health_check_grace_period", lb_health_check_grace_period)
        if load_balancer_ids is not None:
            pulumi.set(__self__, "load_balancer_ids", load_balancer_ids)
        if multi_zone_subnet_policy is not None:
            pulumi.set(__self__, "multi_zone_subnet_policy", multi_zone_subnet_policy)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if replace_load_balancer_unhealthy is not None:
            pulumi.set(__self__, "replace_load_balancer_unhealthy", replace_load_balancer_unhealthy)
        if replace_monitor_unhealthy is not None:
            pulumi.set(__self__, "replace_monitor_unhealthy", replace_monitor_unhealthy)
        if retry_policy is not None:
            pulumi.set(__self__, "retry_policy", retry_policy)
        if scaling_mode is not None:
            pulumi.set(__self__, "scaling_mode", scaling_mode)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if termination_policies is not None:
            pulumi.set(__self__, "termination_policies", termination_policies)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> pulumi.Input[str]:
        """
        An available ID for a launch configuration.
        """
        return pulumi.get(self, "configuration_id")

    @configuration_id.setter
    def configuration_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "configuration_id", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Input[int]:
        """
        Maximum number of CVM instances. Valid value ranges: (0~2000).
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Input[int]:
        """
        Minimum number of CVM instances. Valid value ranges: (0~2000).
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> pulumi.Input[str]:
        """
        Name of a scaling group.
        """
        return pulumi.get(self, "scaling_group_name")

    @scaling_group_name.setter
    def scaling_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "scaling_group_name", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        ID of VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="defaultCooldown")
    def default_cooldown(self) -> Optional[pulumi.Input[int]]:
        """
        Default cooldown time in second, and default value is `300`.
        """
        return pulumi.get(self, "default_cooldown")

    @default_cooldown.setter
    def default_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_cooldown", value)

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Desired volume of CVM instances, which is between `max_size` and `min_size`.
        """
        return pulumi.get(self, "desired_capacity")

    @desired_capacity.setter
    def desired_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_capacity", value)

    @property
    @pulumi.getter(name="forwardBalancerIds")
    def forward_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingGroupForwardBalancerIdArgs']]]]:
        """
        List of application load balancers, which can't be specified with `load_balancer_ids` together.
        """
        return pulumi.get(self, "forward_balancer_ids")

    @forward_balancer_ids.setter
    def forward_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingGroupForwardBalancerIdArgs']]]]):
        pulumi.set(self, "forward_balancer_ids", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        """
        Health check type of instances in a scaling group.<br><li>CVM: confirm whether an instance is healthy based on the network status. If the pinged instance is unreachable, the instance will be considered unhealthy. For more information, see [Instance Health Check](https://intl.cloud.tencent.com/document/product/377/8553?from_cn_redirect=1)<br><li>CLB: confirm whether an instance is healthy based on the CLB health check status. For more information, see [Health Check Overview](https://intl.cloud.tencent.com/document/product/214/6097?from_cn_redirect=1).<br>If the parameter is set to `CLB`, the scaling group will check both the network status and the CLB health check status. If the network check indicates unhealthy, the `HealthStatus` field will return `UNHEALTHY`. If the CLB health check indicates unhealthy, the `HealthStatus` field will return `CLB_UNHEALTHY`. If both checks indicate unhealthy, the `HealthStatus` field will return `UNHEALTHY|CLB_UNHEALTHY`. Default value: `CLB`.
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)

    @property
    @pulumi.getter(name="lbHealthCheckGracePeriod")
    def lb_health_check_grace_period(self) -> Optional[pulumi.Input[int]]:
        """
        Grace period of the CLB health check during which the `IN_SERVICE` instances added will not be marked as `CLB_UNHEALTHY`.<br>Valid range: 0-7200, in seconds. Default value: `0`.
        """
        return pulumi.get(self, "lb_health_check_grace_period")

    @lb_health_check_grace_period.setter
    def lb_health_check_grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lb_health_check_grace_period", value)

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of traditional load balancers.
        """
        return pulumi.get(self, "load_balancer_ids")

    @load_balancer_ids.setter
    def load_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_ids", value)

    @property
    @pulumi.getter(name="multiZoneSubnetPolicy")
    def multi_zone_subnet_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
        """
        return pulumi.get(self, "multi_zone_subnet_policy")

    @multi_zone_subnet_policy.setter
    def multi_zone_subnet_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_zone_subnet_policy", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies to which project the scaling group belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="replaceLoadBalancerUnhealthy")
    def replace_load_balancer_unhealthy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable unhealthy instance replacement. If set to `true`, AS will replace instances that are found unhealthy in the CLB health check.
        """
        return pulumi.get(self, "replace_load_balancer_unhealthy")

    @replace_load_balancer_unhealthy.setter
    def replace_load_balancer_unhealthy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace_load_balancer_unhealthy", value)

    @property
    @pulumi.getter(name="replaceMonitorUnhealthy")
    def replace_monitor_unhealthy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables unhealthy instance replacement. If set to `true`, AS will replace instances that are flagged as unhealthy by Cloud Monitor.
        """
        return pulumi.get(self, "replace_monitor_unhealthy")

    @replace_monitor_unhealthy.setter
    def replace_monitor_unhealthy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace_monitor_unhealthy", value)

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Available values for retry policies. Valid values: IMMEDIATE_RETRY and INCREMENTAL_INTERVALS.
        """
        return pulumi.get(self, "retry_policy")

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retry_policy", value)

    @property
    @pulumi.getter(name="scalingMode")
    def scaling_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates scaling mode which creates and terminates instances (classic method), or method first tries to start stopped instances (wake up stopped) to perform scaling operations. Available values: `CLASSIC_SCALING`, `WAKE_UP_STOPPED_SCALING`. Default: `CLASSIC_SCALING`.
        """
        return pulumi.get(self, "scaling_mode")

    @scaling_mode.setter
    def scaling_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_mode", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of subnet, and for VPC it is required.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of a scaling group.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> Optional[pulumi.Input[str]]:
        """
        Available values for termination policies. Valid values: OLDEST_INSTANCE and NEWEST_INSTANCE.
        """
        return pulumi.get(self, "termination_policies")

    @termination_policies.setter
    def termination_policies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_policies", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of available zones, for Basic network it is required.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _ScalingGroupState:
    def __init__(__self__, *,
                 configuration_id: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 default_cooldown: Optional[pulumi.Input[int]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 forward_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingGroupForwardBalancerIdArgs']]]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 lb_health_check_grace_period: Optional[pulumi.Input[int]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 multi_zone_subnet_policy: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 replace_load_balancer_unhealthy: Optional[pulumi.Input[bool]] = None,
                 replace_monitor_unhealthy: Optional[pulumi.Input[bool]] = None,
                 retry_policy: Optional[pulumi.Input[str]] = None,
                 scaling_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_mode: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 termination_policies: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ScalingGroup resources.
        :param pulumi.Input[str] configuration_id: An available ID for a launch configuration.
        :param pulumi.Input[str] create_time: The time when the AS group was created.
        :param pulumi.Input[int] default_cooldown: Default cooldown time in second, and default value is `300`.
        :param pulumi.Input[int] desired_capacity: Desired volume of CVM instances, which is between `max_size` and `min_size`.
        :param pulumi.Input[Sequence[pulumi.Input['ScalingGroupForwardBalancerIdArgs']]] forward_balancer_ids: List of application load balancers, which can't be specified with `load_balancer_ids` together.
        :param pulumi.Input[str] health_check_type: Health check type of instances in a scaling group.<br><li>CVM: confirm whether an instance is healthy based on the network status. If the pinged instance is unreachable, the instance will be considered unhealthy. For more information, see [Instance Health Check](https://intl.cloud.tencent.com/document/product/377/8553?from_cn_redirect=1)<br><li>CLB: confirm whether an instance is healthy based on the CLB health check status. For more information, see [Health Check Overview](https://intl.cloud.tencent.com/document/product/214/6097?from_cn_redirect=1).<br>If the parameter is set to `CLB`, the scaling group will check both the network status and the CLB health check status. If the network check indicates unhealthy, the `HealthStatus` field will return `UNHEALTHY`. If the CLB health check indicates unhealthy, the `HealthStatus` field will return `CLB_UNHEALTHY`. If both checks indicate unhealthy, the `HealthStatus` field will return `UNHEALTHY|CLB_UNHEALTHY`. Default value: `CLB`.
        :param pulumi.Input[int] instance_count: Instance number of a scaling group.
        :param pulumi.Input[int] lb_health_check_grace_period: Grace period of the CLB health check during which the `IN_SERVICE` instances added will not be marked as `CLB_UNHEALTHY`.<br>Valid range: 0-7200, in seconds. Default value: `0`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: ID list of traditional load balancers.
        :param pulumi.Input[int] max_size: Maximum number of CVM instances. Valid value ranges: (0~2000).
        :param pulumi.Input[int] min_size: Minimum number of CVM instances. Valid value ranges: (0~2000).
        :param pulumi.Input[str] multi_zone_subnet_policy: Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
        :param pulumi.Input[int] project_id: Specifies to which project the scaling group belongs.
        :param pulumi.Input[bool] replace_load_balancer_unhealthy: Enable unhealthy instance replacement. If set to `true`, AS will replace instances that are found unhealthy in the CLB health check.
        :param pulumi.Input[bool] replace_monitor_unhealthy: Enables unhealthy instance replacement. If set to `true`, AS will replace instances that are flagged as unhealthy by Cloud Monitor.
        :param pulumi.Input[str] retry_policy: Available values for retry policies. Valid values: IMMEDIATE_RETRY and INCREMENTAL_INTERVALS.
        :param pulumi.Input[str] scaling_group_name: Name of a scaling group.
        :param pulumi.Input[str] scaling_mode: Indicates scaling mode which creates and terminates instances (classic method), or method first tries to start stopped instances (wake up stopped) to perform scaling operations. Available values: `CLASSIC_SCALING`, `WAKE_UP_STOPPED_SCALING`. Default: `CLASSIC_SCALING`.
        :param pulumi.Input[str] status: Current status of a scaling group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: ID list of subnet, and for VPC it is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of a scaling group.
        :param pulumi.Input[str] termination_policies: Available values for termination policies. Valid values: OLDEST_INSTANCE and NEWEST_INSTANCE.
        :param pulumi.Input[str] vpc_id: ID of VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: List of available zones, for Basic network it is required.
        """
        if configuration_id is not None:
            pulumi.set(__self__, "configuration_id", configuration_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if default_cooldown is not None:
            pulumi.set(__self__, "default_cooldown", default_cooldown)
        if desired_capacity is not None:
            pulumi.set(__self__, "desired_capacity", desired_capacity)
        if forward_balancer_ids is not None:
            pulumi.set(__self__, "forward_balancer_ids", forward_balancer_ids)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if lb_health_check_grace_period is not None:
            pulumi.set(__self__, "lb_health_check_grace_period", lb_health_check_grace_period)
        if load_balancer_ids is not None:
            pulumi.set(__self__, "load_balancer_ids", load_balancer_ids)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if multi_zone_subnet_policy is not None:
            pulumi.set(__self__, "multi_zone_subnet_policy", multi_zone_subnet_policy)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if replace_load_balancer_unhealthy is not None:
            pulumi.set(__self__, "replace_load_balancer_unhealthy", replace_load_balancer_unhealthy)
        if replace_monitor_unhealthy is not None:
            pulumi.set(__self__, "replace_monitor_unhealthy", replace_monitor_unhealthy)
        if retry_policy is not None:
            pulumi.set(__self__, "retry_policy", retry_policy)
        if scaling_group_name is not None:
            pulumi.set(__self__, "scaling_group_name", scaling_group_name)
        if scaling_mode is not None:
            pulumi.set(__self__, "scaling_mode", scaling_mode)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if termination_policies is not None:
            pulumi.set(__self__, "termination_policies", termination_policies)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> Optional[pulumi.Input[str]]:
        """
        An available ID for a launch configuration.
        """
        return pulumi.get(self, "configuration_id")

    @configuration_id.setter
    def configuration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the AS group was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="defaultCooldown")
    def default_cooldown(self) -> Optional[pulumi.Input[int]]:
        """
        Default cooldown time in second, and default value is `300`.
        """
        return pulumi.get(self, "default_cooldown")

    @default_cooldown.setter
    def default_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_cooldown", value)

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Desired volume of CVM instances, which is between `max_size` and `min_size`.
        """
        return pulumi.get(self, "desired_capacity")

    @desired_capacity.setter
    def desired_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_capacity", value)

    @property
    @pulumi.getter(name="forwardBalancerIds")
    def forward_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingGroupForwardBalancerIdArgs']]]]:
        """
        List of application load balancers, which can't be specified with `load_balancer_ids` together.
        """
        return pulumi.get(self, "forward_balancer_ids")

    @forward_balancer_ids.setter
    def forward_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingGroupForwardBalancerIdArgs']]]]):
        pulumi.set(self, "forward_balancer_ids", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        """
        Health check type of instances in a scaling group.<br><li>CVM: confirm whether an instance is healthy based on the network status. If the pinged instance is unreachable, the instance will be considered unhealthy. For more information, see [Instance Health Check](https://intl.cloud.tencent.com/document/product/377/8553?from_cn_redirect=1)<br><li>CLB: confirm whether an instance is healthy based on the CLB health check status. For more information, see [Health Check Overview](https://intl.cloud.tencent.com/document/product/214/6097?from_cn_redirect=1).<br>If the parameter is set to `CLB`, the scaling group will check both the network status and the CLB health check status. If the network check indicates unhealthy, the `HealthStatus` field will return `UNHEALTHY`. If the CLB health check indicates unhealthy, the `HealthStatus` field will return `CLB_UNHEALTHY`. If both checks indicate unhealthy, the `HealthStatus` field will return `UNHEALTHY|CLB_UNHEALTHY`. Default value: `CLB`.
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Instance number of a scaling group.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="lbHealthCheckGracePeriod")
    def lb_health_check_grace_period(self) -> Optional[pulumi.Input[int]]:
        """
        Grace period of the CLB health check during which the `IN_SERVICE` instances added will not be marked as `CLB_UNHEALTHY`.<br>Valid range: 0-7200, in seconds. Default value: `0`.
        """
        return pulumi.get(self, "lb_health_check_grace_period")

    @lb_health_check_grace_period.setter
    def lb_health_check_grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lb_health_check_grace_period", value)

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of traditional load balancers.
        """
        return pulumi.get(self, "load_balancer_ids")

    @load_balancer_ids.setter
    def load_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_ids", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of CVM instances. Valid value ranges: (0~2000).
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of CVM instances. Valid value ranges: (0~2000).
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="multiZoneSubnetPolicy")
    def multi_zone_subnet_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
        """
        return pulumi.get(self, "multi_zone_subnet_policy")

    @multi_zone_subnet_policy.setter
    def multi_zone_subnet_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multi_zone_subnet_policy", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies to which project the scaling group belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="replaceLoadBalancerUnhealthy")
    def replace_load_balancer_unhealthy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable unhealthy instance replacement. If set to `true`, AS will replace instances that are found unhealthy in the CLB health check.
        """
        return pulumi.get(self, "replace_load_balancer_unhealthy")

    @replace_load_balancer_unhealthy.setter
    def replace_load_balancer_unhealthy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace_load_balancer_unhealthy", value)

    @property
    @pulumi.getter(name="replaceMonitorUnhealthy")
    def replace_monitor_unhealthy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables unhealthy instance replacement. If set to `true`, AS will replace instances that are flagged as unhealthy by Cloud Monitor.
        """
        return pulumi.get(self, "replace_monitor_unhealthy")

    @replace_monitor_unhealthy.setter
    def replace_monitor_unhealthy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace_monitor_unhealthy", value)

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Available values for retry policies. Valid values: IMMEDIATE_RETRY and INCREMENTAL_INTERVALS.
        """
        return pulumi.get(self, "retry_policy")

    @retry_policy.setter
    def retry_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retry_policy", value)

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a scaling group.
        """
        return pulumi.get(self, "scaling_group_name")

    @scaling_group_name.setter
    def scaling_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_group_name", value)

    @property
    @pulumi.getter(name="scalingMode")
    def scaling_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates scaling mode which creates and terminates instances (classic method), or method first tries to start stopped instances (wake up stopped) to perform scaling operations. Available values: `CLASSIC_SCALING`, `WAKE_UP_STOPPED_SCALING`. Default: `CLASSIC_SCALING`.
        """
        return pulumi.get(self, "scaling_mode")

    @scaling_mode.setter
    def scaling_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_mode", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of a scaling group.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of subnet, and for VPC it is required.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of a scaling group.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> Optional[pulumi.Input[str]]:
        """
        Available values for termination policies. Valid values: OLDEST_INSTANCE and NEWEST_INSTANCE.
        """
        return pulumi.get(self, "termination_policies")

    @termination_policies.setter
    def termination_policies(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "termination_policies", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of available zones, for Basic network it is required.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class ScalingGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration_id: Optional[pulumi.Input[str]] = None,
                 default_cooldown: Optional[pulumi.Input[int]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 forward_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScalingGroupForwardBalancerIdArgs']]]]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 lb_health_check_grace_period: Optional[pulumi.Input[int]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 multi_zone_subnet_policy: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 replace_load_balancer_unhealthy: Optional[pulumi.Input[bool]] = None,
                 replace_monitor_unhealthy: Optional[pulumi.Input[bool]] = None,
                 retry_policy: Optional[pulumi.Input[str]] = None,
                 scaling_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_mode: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 termination_policies: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a group of AS (Auto scaling) instances.

        ## Example Usage

        ### Create a basic Scaling Group

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="as")
        image = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            os_name="TencentOS Server 3.2 (Final)")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            availability_zone=zones.zones[0].name)
        example_scaling_config = tencentcloud.as_.ScalingConfig("exampleScalingConfig",
            configuration_name="tf-example",
            image_id=image.images[0].image_id,
            instance_types=[
                "SA1.SMALL1",
                "SA2.SMALL1",
                "SA2.SMALL2",
                "SA2.SMALL4",
            ],
            instance_name_settings=tencentcloud.as_.ScalingConfigInstanceNameSettingsArgs(
                instance_name="test-ins-name",
            ))
        example_scaling_group = tencentcloud.as_.ScalingGroup("exampleScalingGroup",
            scaling_group_name="tf-example",
            configuration_id=example_scaling_config.id,
            max_size=1,
            min_size=0,
            vpc_id=vpc.id,
            subnet_ids=[subnet.id],
            health_check_type="CLB",
            replace_load_balancer_unhealthy=True,
            lb_health_check_grace_period=30)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        AutoScaling Groups can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:As/scalingGroup:ScalingGroup scaling_group asg-n32ymck2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] configuration_id: An available ID for a launch configuration.
        :param pulumi.Input[int] default_cooldown: Default cooldown time in second, and default value is `300`.
        :param pulumi.Input[int] desired_capacity: Desired volume of CVM instances, which is between `max_size` and `min_size`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScalingGroupForwardBalancerIdArgs']]]] forward_balancer_ids: List of application load balancers, which can't be specified with `load_balancer_ids` together.
        :param pulumi.Input[str] health_check_type: Health check type of instances in a scaling group.<br><li>CVM: confirm whether an instance is healthy based on the network status. If the pinged instance is unreachable, the instance will be considered unhealthy. For more information, see [Instance Health Check](https://intl.cloud.tencent.com/document/product/377/8553?from_cn_redirect=1)<br><li>CLB: confirm whether an instance is healthy based on the CLB health check status. For more information, see [Health Check Overview](https://intl.cloud.tencent.com/document/product/214/6097?from_cn_redirect=1).<br>If the parameter is set to `CLB`, the scaling group will check both the network status and the CLB health check status. If the network check indicates unhealthy, the `HealthStatus` field will return `UNHEALTHY`. If the CLB health check indicates unhealthy, the `HealthStatus` field will return `CLB_UNHEALTHY`. If both checks indicate unhealthy, the `HealthStatus` field will return `UNHEALTHY|CLB_UNHEALTHY`. Default value: `CLB`.
        :param pulumi.Input[int] lb_health_check_grace_period: Grace period of the CLB health check during which the `IN_SERVICE` instances added will not be marked as `CLB_UNHEALTHY`.<br>Valid range: 0-7200, in seconds. Default value: `0`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: ID list of traditional load balancers.
        :param pulumi.Input[int] max_size: Maximum number of CVM instances. Valid value ranges: (0~2000).
        :param pulumi.Input[int] min_size: Minimum number of CVM instances. Valid value ranges: (0~2000).
        :param pulumi.Input[str] multi_zone_subnet_policy: Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
        :param pulumi.Input[int] project_id: Specifies to which project the scaling group belongs.
        :param pulumi.Input[bool] replace_load_balancer_unhealthy: Enable unhealthy instance replacement. If set to `true`, AS will replace instances that are found unhealthy in the CLB health check.
        :param pulumi.Input[bool] replace_monitor_unhealthy: Enables unhealthy instance replacement. If set to `true`, AS will replace instances that are flagged as unhealthy by Cloud Monitor.
        :param pulumi.Input[str] retry_policy: Available values for retry policies. Valid values: IMMEDIATE_RETRY and INCREMENTAL_INTERVALS.
        :param pulumi.Input[str] scaling_group_name: Name of a scaling group.
        :param pulumi.Input[str] scaling_mode: Indicates scaling mode which creates and terminates instances (classic method), or method first tries to start stopped instances (wake up stopped) to perform scaling operations. Available values: `CLASSIC_SCALING`, `WAKE_UP_STOPPED_SCALING`. Default: `CLASSIC_SCALING`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: ID list of subnet, and for VPC it is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of a scaling group.
        :param pulumi.Input[str] termination_policies: Available values for termination policies. Valid values: OLDEST_INSTANCE and NEWEST_INSTANCE.
        :param pulumi.Input[str] vpc_id: ID of VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: List of available zones, for Basic network it is required.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScalingGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a group of AS (Auto scaling) instances.

        ## Example Usage

        ### Create a basic Scaling Group

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="as")
        image = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            os_name="TencentOS Server 3.2 (Final)")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            availability_zone=zones.zones[0].name)
        example_scaling_config = tencentcloud.as_.ScalingConfig("exampleScalingConfig",
            configuration_name="tf-example",
            image_id=image.images[0].image_id,
            instance_types=[
                "SA1.SMALL1",
                "SA2.SMALL1",
                "SA2.SMALL2",
                "SA2.SMALL4",
            ],
            instance_name_settings=tencentcloud.as_.ScalingConfigInstanceNameSettingsArgs(
                instance_name="test-ins-name",
            ))
        example_scaling_group = tencentcloud.as_.ScalingGroup("exampleScalingGroup",
            scaling_group_name="tf-example",
            configuration_id=example_scaling_config.id,
            max_size=1,
            min_size=0,
            vpc_id=vpc.id,
            subnet_ids=[subnet.id],
            health_check_type="CLB",
            replace_load_balancer_unhealthy=True,
            lb_health_check_grace_period=30)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        AutoScaling Groups can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:As/scalingGroup:ScalingGroup scaling_group asg-n32ymck2
        ```

        :param str resource_name: The name of the resource.
        :param ScalingGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScalingGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration_id: Optional[pulumi.Input[str]] = None,
                 default_cooldown: Optional[pulumi.Input[int]] = None,
                 desired_capacity: Optional[pulumi.Input[int]] = None,
                 forward_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScalingGroupForwardBalancerIdArgs']]]]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 lb_health_check_grace_period: Optional[pulumi.Input[int]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 multi_zone_subnet_policy: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 replace_load_balancer_unhealthy: Optional[pulumi.Input[bool]] = None,
                 replace_monitor_unhealthy: Optional[pulumi.Input[bool]] = None,
                 retry_policy: Optional[pulumi.Input[str]] = None,
                 scaling_group_name: Optional[pulumi.Input[str]] = None,
                 scaling_mode: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 termination_policies: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScalingGroupArgs.__new__(ScalingGroupArgs)

            if configuration_id is None and not opts.urn:
                raise TypeError("Missing required property 'configuration_id'")
            __props__.__dict__["configuration_id"] = configuration_id
            __props__.__dict__["default_cooldown"] = default_cooldown
            __props__.__dict__["desired_capacity"] = desired_capacity
            __props__.__dict__["forward_balancer_ids"] = forward_balancer_ids
            __props__.__dict__["health_check_type"] = health_check_type
            __props__.__dict__["lb_health_check_grace_period"] = lb_health_check_grace_period
            __props__.__dict__["load_balancer_ids"] = load_balancer_ids
            if max_size is None and not opts.urn:
                raise TypeError("Missing required property 'max_size'")
            __props__.__dict__["max_size"] = max_size
            if min_size is None and not opts.urn:
                raise TypeError("Missing required property 'min_size'")
            __props__.__dict__["min_size"] = min_size
            __props__.__dict__["multi_zone_subnet_policy"] = multi_zone_subnet_policy
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["replace_load_balancer_unhealthy"] = replace_load_balancer_unhealthy
            __props__.__dict__["replace_monitor_unhealthy"] = replace_monitor_unhealthy
            __props__.__dict__["retry_policy"] = retry_policy
            if scaling_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'scaling_group_name'")
            __props__.__dict__["scaling_group_name"] = scaling_group_name
            __props__.__dict__["scaling_mode"] = scaling_mode
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["tags"] = tags
            __props__.__dict__["termination_policies"] = termination_policies
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["zones"] = zones
            __props__.__dict__["create_time"] = None
            __props__.__dict__["instance_count"] = None
            __props__.__dict__["status"] = None
        super(ScalingGroup, __self__).__init__(
            'tencentcloud:As/scalingGroup:ScalingGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            configuration_id: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            default_cooldown: Optional[pulumi.Input[int]] = None,
            desired_capacity: Optional[pulumi.Input[int]] = None,
            forward_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScalingGroupForwardBalancerIdArgs']]]]] = None,
            health_check_type: Optional[pulumi.Input[str]] = None,
            instance_count: Optional[pulumi.Input[int]] = None,
            lb_health_check_grace_period: Optional[pulumi.Input[int]] = None,
            load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            max_size: Optional[pulumi.Input[int]] = None,
            min_size: Optional[pulumi.Input[int]] = None,
            multi_zone_subnet_policy: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            replace_load_balancer_unhealthy: Optional[pulumi.Input[bool]] = None,
            replace_monitor_unhealthy: Optional[pulumi.Input[bool]] = None,
            retry_policy: Optional[pulumi.Input[str]] = None,
            scaling_group_name: Optional[pulumi.Input[str]] = None,
            scaling_mode: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            termination_policies: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'ScalingGroup':
        """
        Get an existing ScalingGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] configuration_id: An available ID for a launch configuration.
        :param pulumi.Input[str] create_time: The time when the AS group was created.
        :param pulumi.Input[int] default_cooldown: Default cooldown time in second, and default value is `300`.
        :param pulumi.Input[int] desired_capacity: Desired volume of CVM instances, which is between `max_size` and `min_size`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScalingGroupForwardBalancerIdArgs']]]] forward_balancer_ids: List of application load balancers, which can't be specified with `load_balancer_ids` together.
        :param pulumi.Input[str] health_check_type: Health check type of instances in a scaling group.<br><li>CVM: confirm whether an instance is healthy based on the network status. If the pinged instance is unreachable, the instance will be considered unhealthy. For more information, see [Instance Health Check](https://intl.cloud.tencent.com/document/product/377/8553?from_cn_redirect=1)<br><li>CLB: confirm whether an instance is healthy based on the CLB health check status. For more information, see [Health Check Overview](https://intl.cloud.tencent.com/document/product/214/6097?from_cn_redirect=1).<br>If the parameter is set to `CLB`, the scaling group will check both the network status and the CLB health check status. If the network check indicates unhealthy, the `HealthStatus` field will return `UNHEALTHY`. If the CLB health check indicates unhealthy, the `HealthStatus` field will return `CLB_UNHEALTHY`. If both checks indicate unhealthy, the `HealthStatus` field will return `UNHEALTHY|CLB_UNHEALTHY`. Default value: `CLB`.
        :param pulumi.Input[int] instance_count: Instance number of a scaling group.
        :param pulumi.Input[int] lb_health_check_grace_period: Grace period of the CLB health check during which the `IN_SERVICE` instances added will not be marked as `CLB_UNHEALTHY`.<br>Valid range: 0-7200, in seconds. Default value: `0`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: ID list of traditional load balancers.
        :param pulumi.Input[int] max_size: Maximum number of CVM instances. Valid value ranges: (0~2000).
        :param pulumi.Input[int] min_size: Minimum number of CVM instances. Valid value ranges: (0~2000).
        :param pulumi.Input[str] multi_zone_subnet_policy: Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
        :param pulumi.Input[int] project_id: Specifies to which project the scaling group belongs.
        :param pulumi.Input[bool] replace_load_balancer_unhealthy: Enable unhealthy instance replacement. If set to `true`, AS will replace instances that are found unhealthy in the CLB health check.
        :param pulumi.Input[bool] replace_monitor_unhealthy: Enables unhealthy instance replacement. If set to `true`, AS will replace instances that are flagged as unhealthy by Cloud Monitor.
        :param pulumi.Input[str] retry_policy: Available values for retry policies. Valid values: IMMEDIATE_RETRY and INCREMENTAL_INTERVALS.
        :param pulumi.Input[str] scaling_group_name: Name of a scaling group.
        :param pulumi.Input[str] scaling_mode: Indicates scaling mode which creates and terminates instances (classic method), or method first tries to start stopped instances (wake up stopped) to perform scaling operations. Available values: `CLASSIC_SCALING`, `WAKE_UP_STOPPED_SCALING`. Default: `CLASSIC_SCALING`.
        :param pulumi.Input[str] status: Current status of a scaling group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: ID list of subnet, and for VPC it is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of a scaling group.
        :param pulumi.Input[str] termination_policies: Available values for termination policies. Valid values: OLDEST_INSTANCE and NEWEST_INSTANCE.
        :param pulumi.Input[str] vpc_id: ID of VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: List of available zones, for Basic network it is required.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScalingGroupState.__new__(_ScalingGroupState)

        __props__.__dict__["configuration_id"] = configuration_id
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["default_cooldown"] = default_cooldown
        __props__.__dict__["desired_capacity"] = desired_capacity
        __props__.__dict__["forward_balancer_ids"] = forward_balancer_ids
        __props__.__dict__["health_check_type"] = health_check_type
        __props__.__dict__["instance_count"] = instance_count
        __props__.__dict__["lb_health_check_grace_period"] = lb_health_check_grace_period
        __props__.__dict__["load_balancer_ids"] = load_balancer_ids
        __props__.__dict__["max_size"] = max_size
        __props__.__dict__["min_size"] = min_size
        __props__.__dict__["multi_zone_subnet_policy"] = multi_zone_subnet_policy
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["replace_load_balancer_unhealthy"] = replace_load_balancer_unhealthy
        __props__.__dict__["replace_monitor_unhealthy"] = replace_monitor_unhealthy
        __props__.__dict__["retry_policy"] = retry_policy
        __props__.__dict__["scaling_group_name"] = scaling_group_name
        __props__.__dict__["scaling_mode"] = scaling_mode
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_ids"] = subnet_ids
        __props__.__dict__["tags"] = tags
        __props__.__dict__["termination_policies"] = termination_policies
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zones"] = zones
        return ScalingGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> pulumi.Output[str]:
        """
        An available ID for a launch configuration.
        """
        return pulumi.get(self, "configuration_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time when the AS group was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="defaultCooldown")
    def default_cooldown(self) -> pulumi.Output[Optional[int]]:
        """
        Default cooldown time in second, and default value is `300`.
        """
        return pulumi.get(self, "default_cooldown")

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> pulumi.Output[int]:
        """
        Desired volume of CVM instances, which is between `max_size` and `min_size`.
        """
        return pulumi.get(self, "desired_capacity")

    @property
    @pulumi.getter(name="forwardBalancerIds")
    def forward_balancer_ids(self) -> pulumi.Output[Optional[Sequence['outputs.ScalingGroupForwardBalancerId']]]:
        """
        List of application load balancers, which can't be specified with `load_balancer_ids` together.
        """
        return pulumi.get(self, "forward_balancer_ids")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> pulumi.Output[str]:
        """
        Health check type of instances in a scaling group.<br><li>CVM: confirm whether an instance is healthy based on the network status. If the pinged instance is unreachable, the instance will be considered unhealthy. For more information, see [Instance Health Check](https://intl.cloud.tencent.com/document/product/377/8553?from_cn_redirect=1)<br><li>CLB: confirm whether an instance is healthy based on the CLB health check status. For more information, see [Health Check Overview](https://intl.cloud.tencent.com/document/product/214/6097?from_cn_redirect=1).<br>If the parameter is set to `CLB`, the scaling group will check both the network status and the CLB health check status. If the network check indicates unhealthy, the `HealthStatus` field will return `UNHEALTHY`. If the CLB health check indicates unhealthy, the `HealthStatus` field will return `CLB_UNHEALTHY`. If both checks indicate unhealthy, the `HealthStatus` field will return `UNHEALTHY|CLB_UNHEALTHY`. Default value: `CLB`.
        """
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Output[int]:
        """
        Instance number of a scaling group.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="lbHealthCheckGracePeriod")
    def lb_health_check_grace_period(self) -> pulumi.Output[int]:
        """
        Grace period of the CLB health check during which the `IN_SERVICE` instances added will not be marked as `CLB_UNHEALTHY`.<br>Valid range: 0-7200, in seconds. Default value: `0`.
        """
        return pulumi.get(self, "lb_health_check_grace_period")

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ID list of traditional load balancers.
        """
        return pulumi.get(self, "load_balancer_ids")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Output[int]:
        """
        Maximum number of CVM instances. Valid value ranges: (0~2000).
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Output[int]:
        """
        Minimum number of CVM instances. Valid value ranges: (0~2000).
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter(name="multiZoneSubnetPolicy")
    def multi_zone_subnet_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Multi zone or subnet strategy, Valid values: PRIORITY and EQUALITY.
        """
        return pulumi.get(self, "multi_zone_subnet_policy")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies to which project the scaling group belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="replaceLoadBalancerUnhealthy")
    def replace_load_balancer_unhealthy(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable unhealthy instance replacement. If set to `true`, AS will replace instances that are found unhealthy in the CLB health check.
        """
        return pulumi.get(self, "replace_load_balancer_unhealthy")

    @property
    @pulumi.getter(name="replaceMonitorUnhealthy")
    def replace_monitor_unhealthy(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables unhealthy instance replacement. If set to `true`, AS will replace instances that are flagged as unhealthy by Cloud Monitor.
        """
        return pulumi.get(self, "replace_monitor_unhealthy")

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Available values for retry policies. Valid values: IMMEDIATE_RETRY and INCREMENTAL_INTERVALS.
        """
        return pulumi.get(self, "retry_policy")

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> pulumi.Output[str]:
        """
        Name of a scaling group.
        """
        return pulumi.get(self, "scaling_group_name")

    @property
    @pulumi.getter(name="scalingMode")
    def scaling_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Indicates scaling mode which creates and terminates instances (classic method), or method first tries to start stopped instances (wake up stopped) to perform scaling operations. Available values: `CLASSIC_SCALING`, `WAKE_UP_STOPPED_SCALING`. Default: `CLASSIC_SCALING`.
        """
        return pulumi.get(self, "scaling_mode")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Current status of a scaling group.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ID list of subnet, and for VPC it is required.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tags of a scaling group.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> pulumi.Output[str]:
        """
        Available values for termination policies. Valid values: OLDEST_INSTANCE and NEWEST_INSTANCE.
        """
        return pulumi.get(self, "termination_policies")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of available zones, for Basic network it is required.
        """
        return pulumi.get(self, "zones")

