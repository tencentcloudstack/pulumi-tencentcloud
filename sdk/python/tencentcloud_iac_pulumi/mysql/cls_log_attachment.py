# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ClsLogAttachmentArgs', 'ClsLogAttachment']

@pulumi.input_type
class ClsLogAttachmentArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 log_set: pulumi.Input[str],
                 log_topic: pulumi.Input[str],
                 log_type: pulumi.Input[str],
                 cls_region: Optional[pulumi.Input[str]] = None,
                 create_index: Optional[pulumi.Input[bool]] = None,
                 create_log_set: Optional[pulumi.Input[bool]] = None,
                 create_log_topic: Optional[pulumi.Input[bool]] = None,
                 period: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ClsLogAttachment resource.
        :param pulumi.Input[str] instance_id: The id of instance.
        :param pulumi.Input[str] log_set: If `create_log_set` is `true`, use log set name, Else use log set Id.
        :param pulumi.Input[str] log_topic: If `create_log_topic` is `true`, use log topic name, Else use log topic Id.
        :param pulumi.Input[str] log_type: Log type. Support `error` or `slowlog`.
        :param pulumi.Input[str] cls_region: Cls region.
        :param pulumi.Input[bool] create_index: Whether to create index.
        :param pulumi.Input[bool] create_log_set: Whether to create log set.
        :param pulumi.Input[bool] create_log_topic: Whether to create log topic.
        :param pulumi.Input[int] period: The validity period of the log theme is 30 days by default when not filled in.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "log_set", log_set)
        pulumi.set(__self__, "log_topic", log_topic)
        pulumi.set(__self__, "log_type", log_type)
        if cls_region is not None:
            pulumi.set(__self__, "cls_region", cls_region)
        if create_index is not None:
            pulumi.set(__self__, "create_index", create_index)
        if create_log_set is not None:
            pulumi.set(__self__, "create_log_set", create_log_set)
        if create_log_topic is not None:
            pulumi.set(__self__, "create_log_topic", create_log_topic)
        if period is not None:
            pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The id of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="logSet")
    def log_set(self) -> pulumi.Input[str]:
        """
        If `create_log_set` is `true`, use log set name, Else use log set Id.
        """
        return pulumi.get(self, "log_set")

    @log_set.setter
    def log_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_set", value)

    @property
    @pulumi.getter(name="logTopic")
    def log_topic(self) -> pulumi.Input[str]:
        """
        If `create_log_topic` is `true`, use log topic name, Else use log topic Id.
        """
        return pulumi.get(self, "log_topic")

    @log_topic.setter
    def log_topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_topic", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        """
        Log type. Support `error` or `slowlog`.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="clsRegion")
    def cls_region(self) -> Optional[pulumi.Input[str]]:
        """
        Cls region.
        """
        return pulumi.get(self, "cls_region")

    @cls_region.setter
    def cls_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_region", value)

    @property
    @pulumi.getter(name="createIndex")
    def create_index(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create index.
        """
        return pulumi.get(self, "create_index")

    @create_index.setter
    def create_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_index", value)

    @property
    @pulumi.getter(name="createLogSet")
    def create_log_set(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create log set.
        """
        return pulumi.get(self, "create_log_set")

    @create_log_set.setter
    def create_log_set(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_log_set", value)

    @property
    @pulumi.getter(name="createLogTopic")
    def create_log_topic(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create log topic.
        """
        return pulumi.get(self, "create_log_topic")

    @create_log_topic.setter
    def create_log_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_log_topic", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The validity period of the log theme is 30 days by default when not filled in.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)


@pulumi.input_type
class _ClsLogAttachmentState:
    def __init__(__self__, *,
                 cls_region: Optional[pulumi.Input[str]] = None,
                 create_index: Optional[pulumi.Input[bool]] = None,
                 create_log_set: Optional[pulumi.Input[bool]] = None,
                 create_log_topic: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_set: Optional[pulumi.Input[str]] = None,
                 log_set_id: Optional[pulumi.Input[str]] = None,
                 log_topic: Optional[pulumi.Input[str]] = None,
                 log_topic_id: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ClsLogAttachment resources.
        :param pulumi.Input[str] cls_region: Cls region.
        :param pulumi.Input[bool] create_index: Whether to create index.
        :param pulumi.Input[bool] create_log_set: Whether to create log set.
        :param pulumi.Input[bool] create_log_topic: Whether to create log topic.
        :param pulumi.Input[str] instance_id: The id of instance.
        :param pulumi.Input[str] log_set: If `create_log_set` is `true`, use log set name, Else use log set Id.
        :param pulumi.Input[str] log_set_id: Log set Id.
        :param pulumi.Input[str] log_topic: If `create_log_topic` is `true`, use log topic name, Else use log topic Id.
        :param pulumi.Input[str] log_topic_id: Log topic Id.
        :param pulumi.Input[str] log_type: Log type. Support `error` or `slowlog`.
        :param pulumi.Input[int] period: The validity period of the log theme is 30 days by default when not filled in.
        :param pulumi.Input[str] status: Log Status.
        """
        if cls_region is not None:
            pulumi.set(__self__, "cls_region", cls_region)
        if create_index is not None:
            pulumi.set(__self__, "create_index", create_index)
        if create_log_set is not None:
            pulumi.set(__self__, "create_log_set", create_log_set)
        if create_log_topic is not None:
            pulumi.set(__self__, "create_log_topic", create_log_topic)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if log_set is not None:
            pulumi.set(__self__, "log_set", log_set)
        if log_set_id is not None:
            pulumi.set(__self__, "log_set_id", log_set_id)
        if log_topic is not None:
            pulumi.set(__self__, "log_topic", log_topic)
        if log_topic_id is not None:
            pulumi.set(__self__, "log_topic_id", log_topic_id)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clsRegion")
    def cls_region(self) -> Optional[pulumi.Input[str]]:
        """
        Cls region.
        """
        return pulumi.get(self, "cls_region")

    @cls_region.setter
    def cls_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_region", value)

    @property
    @pulumi.getter(name="createIndex")
    def create_index(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create index.
        """
        return pulumi.get(self, "create_index")

    @create_index.setter
    def create_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_index", value)

    @property
    @pulumi.getter(name="createLogSet")
    def create_log_set(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create log set.
        """
        return pulumi.get(self, "create_log_set")

    @create_log_set.setter
    def create_log_set(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_log_set", value)

    @property
    @pulumi.getter(name="createLogTopic")
    def create_log_topic(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to create log topic.
        """
        return pulumi.get(self, "create_log_topic")

    @create_log_topic.setter
    def create_log_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_log_topic", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="logSet")
    def log_set(self) -> Optional[pulumi.Input[str]]:
        """
        If `create_log_set` is `true`, use log set name, Else use log set Id.
        """
        return pulumi.get(self, "log_set")

    @log_set.setter
    def log_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_set", value)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        Log set Id.
        """
        return pulumi.get(self, "log_set_id")

    @log_set_id.setter
    def log_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_set_id", value)

    @property
    @pulumi.getter(name="logTopic")
    def log_topic(self) -> Optional[pulumi.Input[str]]:
        """
        If `create_log_topic` is `true`, use log topic name, Else use log topic Id.
        """
        return pulumi.get(self, "log_topic")

    @log_topic.setter
    def log_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_topic", value)

    @property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic Id.
        """
        return pulumi.get(self, "log_topic_id")

    @log_topic_id.setter
    def log_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_topic_id", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        Log type. Support `error` or `slowlog`.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The validity period of the log theme is 30 days by default when not filled in.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Log Status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class ClsLogAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cls_region: Optional[pulumi.Input[str]] = None,
                 create_index: Optional[pulumi.Input[bool]] = None,
                 create_log_set: Optional[pulumi.Input[bool]] = None,
                 create_log_topic: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_set: Optional[pulumi.Input[str]] = None,
                 log_topic: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a mysql log to cls

        > **NOTE:** The CLS resource bound to resource `Mysql.ClsLogAttachment` needs to be manually deleted.

        ## Example Usage

        ### Create Error Log to ClS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone="ap-guangzhou-6",
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        # create security group
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        # create mysql instance
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone="ap-guangzhou-6",
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        # attachment cls log
        example_cls_log_attachment = tencentcloud.mysql.ClsLogAttachment("exampleClsLogAttachment",
            instance_id=example_instance.id,
            log_type="error",
            create_log_set=True,
            create_log_topic=True,
            log_set="tf_log_set",
            log_topic="tf_log_topic",
            period=30,
            create_index=True,
            cls_region="ap-guangzhou")
        ```
        <!--End PulumiCodeChooser -->

        ### Create Slow Log to ClS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.mysql.ClsLogAttachment("example",
            instance_id=tencentcloud_mysql_instance["example"]["id"],
            log_type="slowlog",
            log_set="50d499a8-c4c0-4442-aa04-e8aa8a02437d",
            log_topic="140d4d39-4307-45a8-9655-290f679b063d")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cls_region: Cls region.
        :param pulumi.Input[bool] create_index: Whether to create index.
        :param pulumi.Input[bool] create_log_set: Whether to create log set.
        :param pulumi.Input[bool] create_log_topic: Whether to create log topic.
        :param pulumi.Input[str] instance_id: The id of instance.
        :param pulumi.Input[str] log_set: If `create_log_set` is `true`, use log set name, Else use log set Id.
        :param pulumi.Input[str] log_topic: If `create_log_topic` is `true`, use log topic name, Else use log topic Id.
        :param pulumi.Input[str] log_type: Log type. Support `error` or `slowlog`.
        :param pulumi.Input[int] period: The validity period of the log theme is 30 days by default when not filled in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClsLogAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mysql log to cls

        > **NOTE:** The CLS resource bound to resource `Mysql.ClsLogAttachment` needs to be manually deleted.

        ## Example Usage

        ### Create Error Log to ClS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone="ap-guangzhou-6",
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        # create security group
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        # create mysql instance
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone="ap-guangzhou-6",
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        # attachment cls log
        example_cls_log_attachment = tencentcloud.mysql.ClsLogAttachment("exampleClsLogAttachment",
            instance_id=example_instance.id,
            log_type="error",
            create_log_set=True,
            create_log_topic=True,
            log_set="tf_log_set",
            log_topic="tf_log_topic",
            period=30,
            create_index=True,
            cls_region="ap-guangzhou")
        ```
        <!--End PulumiCodeChooser -->

        ### Create Slow Log to ClS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.mysql.ClsLogAttachment("example",
            instance_id=tencentcloud_mysql_instance["example"]["id"],
            log_type="slowlog",
            log_set="50d499a8-c4c0-4442-aa04-e8aa8a02437d",
            log_topic="140d4d39-4307-45a8-9655-290f679b063d")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ClsLogAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClsLogAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cls_region: Optional[pulumi.Input[str]] = None,
                 create_index: Optional[pulumi.Input[bool]] = None,
                 create_log_set: Optional[pulumi.Input[bool]] = None,
                 create_log_topic: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 log_set: Optional[pulumi.Input[str]] = None,
                 log_topic: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClsLogAttachmentArgs.__new__(ClsLogAttachmentArgs)

            __props__.__dict__["cls_region"] = cls_region
            __props__.__dict__["create_index"] = create_index
            __props__.__dict__["create_log_set"] = create_log_set
            __props__.__dict__["create_log_topic"] = create_log_topic
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if log_set is None and not opts.urn:
                raise TypeError("Missing required property 'log_set'")
            __props__.__dict__["log_set"] = log_set
            if log_topic is None and not opts.urn:
                raise TypeError("Missing required property 'log_topic'")
            __props__.__dict__["log_topic"] = log_topic
            if log_type is None and not opts.urn:
                raise TypeError("Missing required property 'log_type'")
            __props__.__dict__["log_type"] = log_type
            __props__.__dict__["period"] = period
            __props__.__dict__["log_set_id"] = None
            __props__.__dict__["log_topic_id"] = None
            __props__.__dict__["status"] = None
        super(ClsLogAttachment, __self__).__init__(
            'tencentcloud:Mysql/clsLogAttachment:ClsLogAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cls_region: Optional[pulumi.Input[str]] = None,
            create_index: Optional[pulumi.Input[bool]] = None,
            create_log_set: Optional[pulumi.Input[bool]] = None,
            create_log_topic: Optional[pulumi.Input[bool]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            log_set: Optional[pulumi.Input[str]] = None,
            log_set_id: Optional[pulumi.Input[str]] = None,
            log_topic: Optional[pulumi.Input[str]] = None,
            log_topic_id: Optional[pulumi.Input[str]] = None,
            log_type: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'ClsLogAttachment':
        """
        Get an existing ClsLogAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cls_region: Cls region.
        :param pulumi.Input[bool] create_index: Whether to create index.
        :param pulumi.Input[bool] create_log_set: Whether to create log set.
        :param pulumi.Input[bool] create_log_topic: Whether to create log topic.
        :param pulumi.Input[str] instance_id: The id of instance.
        :param pulumi.Input[str] log_set: If `create_log_set` is `true`, use log set name, Else use log set Id.
        :param pulumi.Input[str] log_set_id: Log set Id.
        :param pulumi.Input[str] log_topic: If `create_log_topic` is `true`, use log topic name, Else use log topic Id.
        :param pulumi.Input[str] log_topic_id: Log topic Id.
        :param pulumi.Input[str] log_type: Log type. Support `error` or `slowlog`.
        :param pulumi.Input[int] period: The validity period of the log theme is 30 days by default when not filled in.
        :param pulumi.Input[str] status: Log Status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClsLogAttachmentState.__new__(_ClsLogAttachmentState)

        __props__.__dict__["cls_region"] = cls_region
        __props__.__dict__["create_index"] = create_index
        __props__.__dict__["create_log_set"] = create_log_set
        __props__.__dict__["create_log_topic"] = create_log_topic
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["log_set"] = log_set
        __props__.__dict__["log_set_id"] = log_set_id
        __props__.__dict__["log_topic"] = log_topic
        __props__.__dict__["log_topic_id"] = log_topic_id
        __props__.__dict__["log_type"] = log_type
        __props__.__dict__["period"] = period
        __props__.__dict__["status"] = status
        return ClsLogAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clsRegion")
    def cls_region(self) -> pulumi.Output[str]:
        """
        Cls region.
        """
        return pulumi.get(self, "cls_region")

    @property
    @pulumi.getter(name="createIndex")
    def create_index(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to create index.
        """
        return pulumi.get(self, "create_index")

    @property
    @pulumi.getter(name="createLogSet")
    def create_log_set(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to create log set.
        """
        return pulumi.get(self, "create_log_set")

    @property
    @pulumi.getter(name="createLogTopic")
    def create_log_topic(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to create log topic.
        """
        return pulumi.get(self, "create_log_topic")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The id of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="logSet")
    def log_set(self) -> pulumi.Output[str]:
        """
        If `create_log_set` is `true`, use log set name, Else use log set Id.
        """
        return pulumi.get(self, "log_set")

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> pulumi.Output[str]:
        """
        Log set Id.
        """
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter(name="logTopic")
    def log_topic(self) -> pulumi.Output[str]:
        """
        If `create_log_topic` is `true`, use log topic name, Else use log topic Id.
        """
        return pulumi.get(self, "log_topic")

    @property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> pulumi.Output[str]:
        """
        Log topic Id.
        """
        return pulumi.get(self, "log_topic_id")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Output[str]:
        """
        Log type. Support `error` or `slowlog`.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        The validity period of the log theme is 30 days by default when not filled in.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Log Status.
        """
        return pulumi.get(self, "status")

