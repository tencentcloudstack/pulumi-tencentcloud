# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 instance_name: pulumi.Input[str],
                 mem_size: pulumi.Input[int],
                 volume_size: pulumi.Input[int],
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 fast_upgrade: Optional[pulumi.Input[int]] = None,
                 first_slave_zone: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 internet_service: Optional[pulumi.Input[int]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 max_deay_time: Optional[pulumi.Input[int]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 second_slave_zone: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 slave_sync_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 upgrade_subversion: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[str] engine_type: Instance engine type. The default value is `InnoDB`. Supported values include `InnoDB` and `RocksDB`.
        :param pulumi.Input[str] engine_version: The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0, and default is 5.7. Upgrade the instance engine version to support 5.6/5.7 and switch immediately.
        :param pulumi.Input[int] fast_upgrade: Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        :param pulumi.Input[str] first_slave_zone: Zone information about first slave instance.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        :param pulumi.Input[int] internet_service: Indicates whether to enable the access to an instance from public network: 0 - No, 1 - Yes.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[int] max_deay_time: Latency threshold. Value range 1~10. Only need to fill in when upgrading kernel subversion and engine version.
        :param pulumi.Input[int] param_template_id: Specify parameter template id.
        :param pulumi.Input[Mapping[str, Any]] parameters: List of parameters to use.
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[str] root_password: Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        :param pulumi.Input[str] second_slave_zone: Zone information about second slave instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[int] slave_sync_mode: Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[int] upgrade_subversion: Whether it is a kernel subversion upgrade, supported values: 1 - upgrade the kernel subversion; 0 - upgrade the database engine version. Only need to fill in when upgrading kernel subversion and engine version.
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        :param pulumi.Input[int] wait_switch: Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        """
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "volume_size", volume_size)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if fast_upgrade is not None:
            pulumi.set(__self__, "fast_upgrade", fast_upgrade)
        if first_slave_zone is not None:
            pulumi.set(__self__, "first_slave_zone", first_slave_zone)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if intranet_port is not None:
            pulumi.set(__self__, "intranet_port", intranet_port)
        if max_deay_time is not None:
            pulumi.set(__self__, "max_deay_time", max_deay_time)
        if param_template_id is not None:
            pulumi.set(__self__, "param_template_id", param_template_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pay_type is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
            pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")
        if pay_type is not None:
            pulumi.set(__self__, "pay_type", pay_type)
        if period is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
            pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")
        if period is not None:
            pulumi.set(__self__, "period", period)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if second_slave_zone is not None:
            pulumi.set(__self__, "second_slave_zone", second_slave_zone)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if slave_deploy_mode is not None:
            pulumi.set(__self__, "slave_deploy_mode", slave_deploy_mode)
        if slave_sync_mode is not None:
            pulumi.set(__self__, "slave_sync_mode", slave_sync_mode)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if upgrade_subversion is not None:
            pulumi.set(__self__, "upgrade_subversion", upgrade_subversion)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if wait_switch is not None:
            pulumi.set(__self__, "wait_switch", wait_switch)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        The name of a mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> pulumi.Input[int]:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> pulumi.Input[int]:
        """
        Disk size (in GB).
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[pulumi.Input[str]]:
        """
        Instance engine type. The default value is `InnoDB`. Supported values include `InnoDB` and `RocksDB`.
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_type", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0, and default is 5.7. Upgrade the instance engine version to support 5.6/5.7 and switch immediately.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="fastUpgrade")
    def fast_upgrade(self) -> Optional[pulumi.Input[int]]:
        """
        Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        """
        return pulumi.get(self, "fast_upgrade")

    @fast_upgrade.setter
    def fast_upgrade(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fast_upgrade", value)

    @property
    @pulumi.getter(name="firstSlaveZone")
    def first_slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone information about first slave instance.
        """
        return pulumi.get(self, "first_slave_zone")

    @first_slave_zone.setter
    def first_slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_slave_zone", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates whether to enable the access to an instance from public network: 0 - No, 1 - Yes.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> Optional[pulumi.Input[int]]:
        """
        Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        """
        return pulumi.get(self, "intranet_port")

    @intranet_port.setter
    def intranet_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "intranet_port", value)

    @property
    @pulumi.getter(name="maxDeayTime")
    def max_deay_time(self) -> Optional[pulumi.Input[int]]:
        """
        Latency threshold. Value range 1~10. Only need to fill in when upgrading kernel subversion and engine version.
        """
        return pulumi.get(self, "max_deay_time")

    @max_deay_time.setter
    def max_deay_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_deay_time", value)

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specify parameter template id.
        """
        return pulumi.get(self, "param_template_id")

    @param_template_id.setter
    def param_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "param_template_id", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        List of parameters to use.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")

        return pulumi.get(self, "pay_type")

    @pay_type.setter
    def pay_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
        pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")

        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period of instance. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="secondSlaveZone")
    def second_slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone information about second slave instance.
        """
        return pulumi.get(self, "second_slave_zone")

    @second_slave_zone.setter
    def second_slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "second_slave_zone", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to use.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="slaveDeployMode")
    def slave_deploy_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        """
        return pulumi.get(self, "slave_deploy_mode")

    @slave_deploy_mode.setter
    def slave_deploy_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slave_deploy_mode", value)

    @property
    @pulumi.getter(name="slaveSyncMode")
    def slave_sync_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        """
        return pulumi.get(self, "slave_sync_mode")

    @slave_sync_mode.setter
    def slave_sync_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slave_sync_mode", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network ID. If `vpc_id` is set, this value is required.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="upgradeSubversion")
    def upgrade_subversion(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it is a kernel subversion upgrade, supported values: 1 - upgrade the kernel subversion; 0 - upgrade the database engine version. Only need to fill in when upgrading kernel subversion and engine version.
        """
        return pulumi.get(self, "upgrade_subversion")

    @upgrade_subversion.setter
    def upgrade_subversion(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upgrade_subversion", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> Optional[pulumi.Input[int]]:
        """
        Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        """
        return pulumi.get(self, "wait_switch")

    @wait_switch.setter
    def wait_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_switch", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 fast_upgrade: Optional[pulumi.Input[int]] = None,
                 first_slave_zone: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 gtid: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 internet_host: Optional[pulumi.Input[str]] = None,
                 internet_port: Optional[pulumi.Input[int]] = None,
                 internet_service: Optional[pulumi.Input[int]] = None,
                 intranet_ip: Optional[pulumi.Input[str]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 locked: Optional[pulumi.Input[int]] = None,
                 max_deay_time: Optional[pulumi.Input[int]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 second_slave_zone: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 slave_sync_mode: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 task_status: Optional[pulumi.Input[int]] = None,
                 upgrade_subversion: Optional[pulumi.Input[int]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[str] engine_type: Instance engine type. The default value is `InnoDB`. Supported values include `InnoDB` and `RocksDB`.
        :param pulumi.Input[str] engine_version: The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0, and default is 5.7. Upgrade the instance engine version to support 5.6/5.7 and switch immediately.
        :param pulumi.Input[int] fast_upgrade: Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        :param pulumi.Input[str] first_slave_zone: Zone information about first slave instance.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        :param pulumi.Input[int] gtid: Indicates whether GTID is enable. `0` - Not enabled; `1` - Enabled.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[str] internet_host: host for public access.
        :param pulumi.Input[int] internet_port: Access port for public access.
        :param pulumi.Input[int] internet_service: Indicates whether to enable the access to an instance from public network: 0 - No, 1 - Yes.
        :param pulumi.Input[str] intranet_ip: instance intranet IP.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[int] locked: Indicates whether the instance is locked. Valid values: `0`, `1`. `0` - No; `1` - Yes.
        :param pulumi.Input[int] max_deay_time: Latency threshold. Value range 1~10. Only need to fill in when upgrading kernel subversion and engine version.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] param_template_id: Specify parameter template id.
        :param pulumi.Input[Mapping[str, Any]] parameters: List of parameters to use.
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[str] root_password: Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        :param pulumi.Input[str] second_slave_zone: Zone information about second slave instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[int] slave_sync_mode: Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        :param pulumi.Input[int] status: Instance status. Valid values: `0`, `1`, `4`, `5`. `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[int] task_status: Indicates which kind of operations is being executed.
        :param pulumi.Input[int] upgrade_subversion: Whether it is a kernel subversion upgrade, supported values: 1 - upgrade the kernel subversion; 0 - upgrade the database engine version. Only need to fill in when upgrading kernel subversion and engine version.
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        :param pulumi.Input[int] wait_switch: Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        """
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if fast_upgrade is not None:
            pulumi.set(__self__, "fast_upgrade", fast_upgrade)
        if first_slave_zone is not None:
            pulumi.set(__self__, "first_slave_zone", first_slave_zone)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if gtid is not None:
            pulumi.set(__self__, "gtid", gtid)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if internet_host is not None:
            pulumi.set(__self__, "internet_host", internet_host)
        if internet_port is not None:
            pulumi.set(__self__, "internet_port", internet_port)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if intranet_ip is not None:
            pulumi.set(__self__, "intranet_ip", intranet_ip)
        if intranet_port is not None:
            pulumi.set(__self__, "intranet_port", intranet_port)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max_deay_time is not None:
            pulumi.set(__self__, "max_deay_time", max_deay_time)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if param_template_id is not None:
            pulumi.set(__self__, "param_template_id", param_template_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if pay_type is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
            pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")
        if pay_type is not None:
            pulumi.set(__self__, "pay_type", pay_type)
        if period is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
            pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")
        if period is not None:
            pulumi.set(__self__, "period", period)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if second_slave_zone is not None:
            pulumi.set(__self__, "second_slave_zone", second_slave_zone)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if slave_deploy_mode is not None:
            pulumi.set(__self__, "slave_deploy_mode", slave_deploy_mode)
        if slave_sync_mode is not None:
            pulumi.set(__self__, "slave_sync_mode", slave_sync_mode)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_status is not None:
            pulumi.set(__self__, "task_status", task_status)
        if upgrade_subversion is not None:
            pulumi.set(__self__, "upgrade_subversion", upgrade_subversion)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if wait_switch is not None:
            pulumi.set(__self__, "wait_switch", wait_switch)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[pulumi.Input[str]]:
        """
        Instance engine type. The default value is `InnoDB`. Supported values include `InnoDB` and `RocksDB`.
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_type", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0, and default is 5.7. Upgrade the instance engine version to support 5.6/5.7 and switch immediately.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="fastUpgrade")
    def fast_upgrade(self) -> Optional[pulumi.Input[int]]:
        """
        Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        """
        return pulumi.get(self, "fast_upgrade")

    @fast_upgrade.setter
    def fast_upgrade(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fast_upgrade", value)

    @property
    @pulumi.getter(name="firstSlaveZone")
    def first_slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone information about first slave instance.
        """
        return pulumi.get(self, "first_slave_zone")

    @first_slave_zone.setter
    def first_slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_slave_zone", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter
    def gtid(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates whether GTID is enable. `0` - Not enabled; `1` - Enabled.
        """
        return pulumi.get(self, "gtid")

    @gtid.setter
    def gtid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gtid", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="internetHost")
    def internet_host(self) -> Optional[pulumi.Input[str]]:
        """
        host for public access.
        """
        return pulumi.get(self, "internet_host")

    @internet_host.setter
    def internet_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_host", value)

    @property
    @pulumi.getter(name="internetPort")
    def internet_port(self) -> Optional[pulumi.Input[int]]:
        """
        Access port for public access.
        """
        return pulumi.get(self, "internet_port")

    @internet_port.setter
    def internet_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_port", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates whether to enable the access to an instance from public network: 0 - No, 1 - Yes.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="intranetIp")
    def intranet_ip(self) -> Optional[pulumi.Input[str]]:
        """
        instance intranet IP.
        """
        return pulumi.get(self, "intranet_ip")

    @intranet_ip.setter
    def intranet_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intranet_ip", value)

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> Optional[pulumi.Input[int]]:
        """
        Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        """
        return pulumi.get(self, "intranet_port")

    @intranet_port.setter
    def intranet_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "intranet_port", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates whether the instance is locked. Valid values: `0`, `1`. `0` - No; `1` - Yes.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="maxDeayTime")
    def max_deay_time(self) -> Optional[pulumi.Input[int]]:
        """
        Latency threshold. Value range 1~10. Only need to fill in when upgrading kernel subversion and engine version.
        """
        return pulumi.get(self, "max_deay_time")

    @max_deay_time.setter
    def max_deay_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_deay_time", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specify parameter template id.
        """
        return pulumi.get(self, "param_template_id")

    @param_template_id.setter
    def param_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "param_template_id", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        List of parameters to use.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")

        return pulumi.get(self, "pay_type")

    @pay_type.setter
    def pay_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
        pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")

        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period of instance. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="secondSlaveZone")
    def second_slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone information about second slave instance.
        """
        return pulumi.get(self, "second_slave_zone")

    @second_slave_zone.setter
    def second_slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "second_slave_zone", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to use.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="slaveDeployMode")
    def slave_deploy_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        """
        return pulumi.get(self, "slave_deploy_mode")

    @slave_deploy_mode.setter
    def slave_deploy_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slave_deploy_mode", value)

    @property
    @pulumi.getter(name="slaveSyncMode")
    def slave_sync_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        """
        return pulumi.get(self, "slave_sync_mode")

    @slave_sync_mode.setter
    def slave_sync_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slave_sync_mode", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Instance status. Valid values: `0`, `1`, `4`, `5`. `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network ID. If `vpc_id` is set, this value is required.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates which kind of operations is being executed.
        """
        return pulumi.get(self, "task_status")

    @task_status.setter
    def task_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_status", value)

    @property
    @pulumi.getter(name="upgradeSubversion")
    def upgrade_subversion(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it is a kernel subversion upgrade, supported values: 1 - upgrade the kernel subversion; 0 - upgrade the database engine version. Only need to fill in when upgrading kernel subversion and engine version.
        """
        return pulumi.get(self, "upgrade_subversion")

    @upgrade_subversion.setter
    def upgrade_subversion(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upgrade_subversion", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[int]]:
        """
        Disk size (in GB).
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> Optional[pulumi.Input[int]]:
        """
        Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        """
        return pulumi.get(self, "wait_switch")

    @wait_switch.setter
    def wait_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_switch", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 fast_upgrade: Optional[pulumi.Input[int]] = None,
                 first_slave_zone: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[int]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 max_deay_time: Optional[pulumi.Input[int]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 second_slave_zone: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 slave_sync_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 upgrade_subversion: Optional[pulumi.Input[int]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a mysql instance resource to create master database instances.

        > **NOTE:** If this mysql has readonly instance, the terminate operation of the mysql does NOT take effect immediately, maybe takes for several hours. so during that time, VPCs associated with that mysql instance can't be terminated also.

        > **NOTE:** The value of parameter `parameters` can be used with mysql_get_parameter_list to obtain.

        ## Example Usage

        ### Create a single node instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example = tencentcloud.mysql.Instance("example",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone=zones.zones[0].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a double node instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.mysql.Instance("example",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=1,
            availability_zone=data["tencentcloud_availability_zones_by_product"]["zones"]["zones"][0]["name"],
            first_slave_zone=data["tencentcloud_availability_zones_by_product"]["zones"]["zones"][1]["name"],
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=tencentcloud_vpc["vpc"]["id"],
            subnet_id=tencentcloud_subnet["subnet"]["id"],
            intranet_port=3306,
            security_groups=[tencentcloud_security_group["security_group"]["id"]],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        MySQL instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mysql/instance:Instance foo cdb-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[str] engine_type: Instance engine type. The default value is `InnoDB`. Supported values include `InnoDB` and `RocksDB`.
        :param pulumi.Input[str] engine_version: The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0, and default is 5.7. Upgrade the instance engine version to support 5.6/5.7 and switch immediately.
        :param pulumi.Input[int] fast_upgrade: Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        :param pulumi.Input[str] first_slave_zone: Zone information about first slave instance.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[int] internet_service: Indicates whether to enable the access to an instance from public network: 0 - No, 1 - Yes.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[int] max_deay_time: Latency threshold. Value range 1~10. Only need to fill in when upgrading kernel subversion and engine version.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] param_template_id: Specify parameter template id.
        :param pulumi.Input[Mapping[str, Any]] parameters: List of parameters to use.
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[str] root_password: Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        :param pulumi.Input[str] second_slave_zone: Zone information about second slave instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[int] slave_sync_mode: Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[int] upgrade_subversion: Whether it is a kernel subversion upgrade, supported values: 1 - upgrade the kernel subversion; 0 - upgrade the database engine version. Only need to fill in when upgrading kernel subversion and engine version.
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        :param pulumi.Input[int] wait_switch: Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a mysql instance resource to create master database instances.

        > **NOTE:** If this mysql has readonly instance, the terminate operation of the mysql does NOT take effect immediately, maybe takes for several hours. so during that time, VPCs associated with that mysql instance can't be terminated also.

        > **NOTE:** The value of parameter `parameters` can be used with mysql_get_parameter_list to obtain.

        ## Example Usage

        ### Create a single node instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example = tencentcloud.mysql.Instance("example",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone=zones.zones[0].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a double node instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.mysql.Instance("example",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=1,
            availability_zone=data["tencentcloud_availability_zones_by_product"]["zones"]["zones"][0]["name"],
            first_slave_zone=data["tencentcloud_availability_zones_by_product"]["zones"]["zones"][1]["name"],
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=tencentcloud_vpc["vpc"]["id"],
            subnet_id=tencentcloud_subnet["subnet"]["id"],
            intranet_port=3306,
            security_groups=[tencentcloud_security_group["security_group"]["id"]],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        MySQL instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mysql/instance:Instance foo cdb-12345678
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 fast_upgrade: Optional[pulumi.Input[int]] = None,
                 first_slave_zone: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 internet_service: Optional[pulumi.Input[int]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 max_deay_time: Optional[pulumi.Input[int]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 second_slave_zone: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 slave_sync_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 upgrade_subversion: Optional[pulumi.Input[int]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["device_type"] = device_type
            __props__.__dict__["engine_type"] = engine_type
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["fast_upgrade"] = fast_upgrade
            __props__.__dict__["first_slave_zone"] = first_slave_zone
            __props__.__dict__["force_delete"] = force_delete
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["internet_service"] = internet_service
            __props__.__dict__["intranet_port"] = intranet_port
            __props__.__dict__["max_deay_time"] = max_deay_time
            if mem_size is None and not opts.urn:
                raise TypeError("Missing required property 'mem_size'")
            __props__.__dict__["mem_size"] = mem_size
            __props__.__dict__["param_template_id"] = param_template_id
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["pay_type"] = pay_type
            __props__.__dict__["period"] = period
            __props__.__dict__["prepaid_period"] = prepaid_period
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["root_password"] = None if root_password is None else pulumi.Output.secret(root_password)
            __props__.__dict__["second_slave_zone"] = second_slave_zone
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["slave_deploy_mode"] = slave_deploy_mode
            __props__.__dict__["slave_sync_mode"] = slave_sync_mode
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["upgrade_subversion"] = upgrade_subversion
            if volume_size is None and not opts.urn:
                raise TypeError("Missing required property 'volume_size'")
            __props__.__dict__["volume_size"] = volume_size
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["wait_switch"] = wait_switch
            __props__.__dict__["gtid"] = None
            __props__.__dict__["internet_host"] = None
            __props__.__dict__["internet_port"] = None
            __props__.__dict__["intranet_ip"] = None
            __props__.__dict__["locked"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["task_status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["rootPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'tencentcloud:Mysql/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            device_type: Optional[pulumi.Input[str]] = None,
            engine_type: Optional[pulumi.Input[str]] = None,
            engine_version: Optional[pulumi.Input[str]] = None,
            fast_upgrade: Optional[pulumi.Input[int]] = None,
            first_slave_zone: Optional[pulumi.Input[str]] = None,
            force_delete: Optional[pulumi.Input[bool]] = None,
            gtid: Optional[pulumi.Input[int]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            internet_host: Optional[pulumi.Input[str]] = None,
            internet_port: Optional[pulumi.Input[int]] = None,
            internet_service: Optional[pulumi.Input[int]] = None,
            intranet_ip: Optional[pulumi.Input[str]] = None,
            intranet_port: Optional[pulumi.Input[int]] = None,
            locked: Optional[pulumi.Input[int]] = None,
            max_deay_time: Optional[pulumi.Input[int]] = None,
            mem_size: Optional[pulumi.Input[int]] = None,
            param_template_id: Optional[pulumi.Input[int]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            pay_type: Optional[pulumi.Input[int]] = None,
            period: Optional[pulumi.Input[int]] = None,
            prepaid_period: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            root_password: Optional[pulumi.Input[str]] = None,
            second_slave_zone: Optional[pulumi.Input[str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            slave_deploy_mode: Optional[pulumi.Input[int]] = None,
            slave_sync_mode: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            task_status: Optional[pulumi.Input[int]] = None,
            upgrade_subversion: Optional[pulumi.Input[int]] = None,
            volume_size: Optional[pulumi.Input[int]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            wait_switch: Optional[pulumi.Input[int]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[str] engine_type: Instance engine type. The default value is `InnoDB`. Supported values include `InnoDB` and `RocksDB`.
        :param pulumi.Input[str] engine_version: The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0, and default is 5.7. Upgrade the instance engine version to support 5.6/5.7 and switch immediately.
        :param pulumi.Input[int] fast_upgrade: Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        :param pulumi.Input[str] first_slave_zone: Zone information about first slave instance.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        :param pulumi.Input[int] gtid: Indicates whether GTID is enable. `0` - Not enabled; `1` - Enabled.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[str] internet_host: host for public access.
        :param pulumi.Input[int] internet_port: Access port for public access.
        :param pulumi.Input[int] internet_service: Indicates whether to enable the access to an instance from public network: 0 - No, 1 - Yes.
        :param pulumi.Input[str] intranet_ip: instance intranet IP.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[int] locked: Indicates whether the instance is locked. Valid values: `0`, `1`. `0` - No; `1` - Yes.
        :param pulumi.Input[int] max_deay_time: Latency threshold. Value range 1~10. Only need to fill in when upgrading kernel subversion and engine version.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] param_template_id: Specify parameter template id.
        :param pulumi.Input[Mapping[str, Any]] parameters: List of parameters to use.
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[str] root_password: Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        :param pulumi.Input[str] second_slave_zone: Zone information about second slave instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[int] slave_sync_mode: Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        :param pulumi.Input[int] status: Instance status. Valid values: `0`, `1`, `4`, `5`. `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[int] task_status: Indicates which kind of operations is being executed.
        :param pulumi.Input[int] upgrade_subversion: Whether it is a kernel subversion upgrade, supported values: 1 - upgrade the kernel subversion; 0 - upgrade the database engine version. Only need to fill in when upgrading kernel subversion and engine version.
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        :param pulumi.Input[int] wait_switch: Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["device_type"] = device_type
        __props__.__dict__["engine_type"] = engine_type
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["fast_upgrade"] = fast_upgrade
        __props__.__dict__["first_slave_zone"] = first_slave_zone
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["gtid"] = gtid
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["internet_host"] = internet_host
        __props__.__dict__["internet_port"] = internet_port
        __props__.__dict__["internet_service"] = internet_service
        __props__.__dict__["intranet_ip"] = intranet_ip
        __props__.__dict__["intranet_port"] = intranet_port
        __props__.__dict__["locked"] = locked
        __props__.__dict__["max_deay_time"] = max_deay_time
        __props__.__dict__["mem_size"] = mem_size
        __props__.__dict__["param_template_id"] = param_template_id
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["pay_type"] = pay_type
        __props__.__dict__["period"] = period
        __props__.__dict__["prepaid_period"] = prepaid_period
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["root_password"] = root_password
        __props__.__dict__["second_slave_zone"] = second_slave_zone
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["slave_deploy_mode"] = slave_deploy_mode
        __props__.__dict__["slave_sync_mode"] = slave_sync_mode
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["task_status"] = task_status
        __props__.__dict__["upgrade_subversion"] = upgrade_subversion
        __props__.__dict__["volume_size"] = volume_size
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["wait_switch"] = wait_switch
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Auto renew flag. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Output[str]:
        """
        Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> pulumi.Output[str]:
        """
        Instance engine type. The default value is `InnoDB`. Supported values include `InnoDB` and `RocksDB`.
        """
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[Optional[str]]:
        """
        The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0, and default is 5.7. Upgrade the instance engine version to support 5.6/5.7 and switch immediately.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="fastUpgrade")
    def fast_upgrade(self) -> pulumi.Output[Optional[int]]:
        """
        Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        """
        return pulumi.get(self, "fast_upgrade")

    @property
    @pulumi.getter(name="firstSlaveZone")
    def first_slave_zone(self) -> pulumi.Output[str]:
        """
        Zone information about first slave instance.
        """
        return pulumi.get(self, "first_slave_zone")

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        """
        return pulumi.get(self, "force_delete")

    @property
    @pulumi.getter
    def gtid(self) -> pulumi.Output[int]:
        """
        Indicates whether GTID is enable. `0` - Not enabled; `1` - Enabled.
        """
        return pulumi.get(self, "gtid")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        The name of a mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="internetHost")
    def internet_host(self) -> pulumi.Output[str]:
        """
        host for public access.
        """
        return pulumi.get(self, "internet_host")

    @property
    @pulumi.getter(name="internetPort")
    def internet_port(self) -> pulumi.Output[int]:
        """
        Access port for public access.
        """
        return pulumi.get(self, "internet_port")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> pulumi.Output[Optional[int]]:
        """
        Indicates whether to enable the access to an instance from public network: 0 - No, 1 - Yes.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="intranetIp")
    def intranet_ip(self) -> pulumi.Output[str]:
        """
        instance intranet IP.
        """
        return pulumi.get(self, "intranet_ip")

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> pulumi.Output[Optional[int]]:
        """
        Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        """
        return pulumi.get(self, "intranet_port")

    @property
    @pulumi.getter
    def locked(self) -> pulumi.Output[int]:
        """
        Indicates whether the instance is locked. Valid values: `0`, `1`. `0` - No; `1` - Yes.
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maxDeayTime")
    def max_deay_time(self) -> pulumi.Output[Optional[int]]:
        """
        Latency threshold. Value range 1~10. Only need to fill in when upgrading kernel subversion and engine version.
        """
        return pulumi.get(self, "max_deay_time")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> pulumi.Output[int]:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> pulumi.Output[Optional[int]]:
        """
        Specify parameter template id.
        """
        return pulumi.get(self, "param_template_id")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        List of parameters to use.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> pulumi.Output[Optional[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")

        return pulumi.get(self, "pay_type")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
        pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")

        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> pulumi.Output[Optional[int]]:
        """
        Period of instance. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "prepaid_period")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> pulumi.Output[Optional[str]]:
        """
        Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
        """
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter(name="secondSlaveZone")
    def second_slave_zone(self) -> pulumi.Output[Optional[str]]:
        """
        Zone information about second slave instance.
        """
        return pulumi.get(self, "second_slave_zone")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security groups to use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="slaveDeployMode")
    def slave_deploy_mode(self) -> pulumi.Output[Optional[int]]:
        """
        Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        """
        return pulumi.get(self, "slave_deploy_mode")

    @property
    @pulumi.getter(name="slaveSyncMode")
    def slave_sync_mode(self) -> pulumi.Output[Optional[int]]:
        """
        Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        """
        return pulumi.get(self, "slave_sync_mode")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Instance status. Valid values: `0`, `1`, `4`, `5`. `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Private network ID. If `vpc_id` is set, this value is required.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> pulumi.Output[int]:
        """
        Indicates which kind of operations is being executed.
        """
        return pulumi.get(self, "task_status")

    @property
    @pulumi.getter(name="upgradeSubversion")
    def upgrade_subversion(self) -> pulumi.Output[Optional[int]]:
        """
        Whether it is a kernel subversion upgrade, supported values: 1 - upgrade the kernel subversion; 0 - upgrade the database engine version. Only need to fill in when upgrading kernel subversion and engine version.
        """
        return pulumi.get(self, "upgrade_subversion")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> pulumi.Output[int]:
        """
        Disk size (in GB).
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> pulumi.Output[Optional[int]]:
        """
        Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        """
        return pulumi.get(self, "wait_switch")

