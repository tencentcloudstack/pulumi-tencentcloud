# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ReadonlyInstanceArgs', 'ReadonlyInstance']

@pulumi.input_type
class ReadonlyInstanceArgs:
    def __init__(__self__, *,
                 instance_name: pulumi.Input[str],
                 master_instance_id: pulumi.Input[str],
                 mem_size: pulumi.Input[int],
                 volume_size: pulumi.Input[int],
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 fast_upgrade: Optional[pulumi.Input[int]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 master_region: Optional[pulumi.Input[str]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 ro_group_id: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ReadonlyInstance resource.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[str] master_instance_id: Indicates the master instance ID of recovery instances.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[int] fast_upgrade: Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[str] master_region: The zone information of the primary instance is required when you purchase a disaster recovery instance.
        :param pulumi.Input[int] param_template_id: Specify parameter template id.
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] ro_group_id: Read only group id. If rogroupId is empty, a new ro group is created by default. If it is not empty, the existing ro group is used. Cross-region query requires master instance permission.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        :param pulumi.Input[int] wait_switch: Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        :param pulumi.Input[str] zone: Zone information, this parameter defaults to, the system automatically selects an Availability Zone.
        """
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "master_instance_id", master_instance_id)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "volume_size", volume_size)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if fast_upgrade is not None:
            pulumi.set(__self__, "fast_upgrade", fast_upgrade)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if intranet_port is not None:
            pulumi.set(__self__, "intranet_port", intranet_port)
        if master_region is not None:
            pulumi.set(__self__, "master_region", master_region)
        if param_template_id is not None:
            pulumi.set(__self__, "param_template_id", param_template_id)
        if pay_type is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
            pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")
        if pay_type is not None:
            pulumi.set(__self__, "pay_type", pay_type)
        if period is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
            pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")
        if period is not None:
            pulumi.set(__self__, "period", period)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if ro_group_id is not None:
            pulumi.set(__self__, "ro_group_id", ro_group_id)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if slave_deploy_mode is not None:
            pulumi.set(__self__, "slave_deploy_mode", slave_deploy_mode)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if wait_switch is not None:
            pulumi.set(__self__, "wait_switch", wait_switch)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        The name of a mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="masterInstanceId")
    def master_instance_id(self) -> pulumi.Input[str]:
        """
        Indicates the master instance ID of recovery instances.
        """
        return pulumi.get(self, "master_instance_id")

    @master_instance_id.setter
    def master_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_instance_id", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> pulumi.Input[int]:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> pulumi.Input[int]:
        """
        Disk size (in GB).
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="fastUpgrade")
    def fast_upgrade(self) -> Optional[pulumi.Input[int]]:
        """
        Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        """
        return pulumi.get(self, "fast_upgrade")

    @fast_upgrade.setter
    def fast_upgrade(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fast_upgrade", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> Optional[pulumi.Input[int]]:
        """
        Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        """
        return pulumi.get(self, "intranet_port")

    @intranet_port.setter
    def intranet_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "intranet_port", value)

    @property
    @pulumi.getter(name="masterRegion")
    def master_region(self) -> Optional[pulumi.Input[str]]:
        """
        The zone information of the primary instance is required when you purchase a disaster recovery instance.
        """
        return pulumi.get(self, "master_region")

    @master_region.setter
    def master_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_region", value)

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specify parameter template id.
        """
        return pulumi.get(self, "param_template_id")

    @param_template_id.setter
    def param_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "param_template_id", value)

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")

        return pulumi.get(self, "pay_type")

    @pay_type.setter
    def pay_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
        pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")

        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period of instance. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="roGroupId")
    def ro_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Read only group id. If rogroupId is empty, a new ro group is created by default. If it is not empty, the existing ro group is used. Cross-region query requires master instance permission.
        """
        return pulumi.get(self, "ro_group_id")

    @ro_group_id.setter
    def ro_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ro_group_id", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to use.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="slaveDeployMode")
    def slave_deploy_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        """
        return pulumi.get(self, "slave_deploy_mode")

    @slave_deploy_mode.setter
    def slave_deploy_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slave_deploy_mode", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network ID. If `vpc_id` is set, this value is required.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> Optional[pulumi.Input[int]]:
        """
        Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        """
        return pulumi.get(self, "wait_switch")

    @wait_switch.setter
    def wait_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_switch", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone information, this parameter defaults to, the system automatically selects an Availability Zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _ReadonlyInstanceState:
    def __init__(__self__, *,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 fast_upgrade: Optional[pulumi.Input[int]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 intranet_ip: Optional[pulumi.Input[str]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 locked: Optional[pulumi.Input[int]] = None,
                 master_instance_id: Optional[pulumi.Input[str]] = None,
                 master_region: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 ro_group_id: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 task_status: Optional[pulumi.Input[int]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ReadonlyInstance resources.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[int] fast_upgrade: Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[str] intranet_ip: instance intranet IP.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[int] locked: Indicates whether the instance is locked. Valid values: `0`, `1`. `0` - No; `1` - Yes.
        :param pulumi.Input[str] master_instance_id: Indicates the master instance ID of recovery instances.
        :param pulumi.Input[str] master_region: The zone information of the primary instance is required when you purchase a disaster recovery instance.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] param_template_id: Specify parameter template id.
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] ro_group_id: Read only group id. If rogroupId is empty, a new ro group is created by default. If it is not empty, the existing ro group is used. Cross-region query requires master instance permission.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[int] status: Instance status. Valid values: `0`, `1`, `4`, `5`. `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[int] task_status: Indicates which kind of operations is being executed.
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        :param pulumi.Input[int] wait_switch: Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        :param pulumi.Input[str] zone: Zone information, this parameter defaults to, the system automatically selects an Availability Zone.
        """
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if fast_upgrade is not None:
            pulumi.set(__self__, "fast_upgrade", fast_upgrade)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if intranet_ip is not None:
            pulumi.set(__self__, "intranet_ip", intranet_ip)
        if intranet_port is not None:
            pulumi.set(__self__, "intranet_port", intranet_port)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if master_instance_id is not None:
            pulumi.set(__self__, "master_instance_id", master_instance_id)
        if master_region is not None:
            pulumi.set(__self__, "master_region", master_region)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if param_template_id is not None:
            pulumi.set(__self__, "param_template_id", param_template_id)
        if pay_type is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
            pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")
        if pay_type is not None:
            pulumi.set(__self__, "pay_type", pay_type)
        if period is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
            pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")
        if period is not None:
            pulumi.set(__self__, "period", period)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if ro_group_id is not None:
            pulumi.set(__self__, "ro_group_id", ro_group_id)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if slave_deploy_mode is not None:
            pulumi.set(__self__, "slave_deploy_mode", slave_deploy_mode)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_status is not None:
            pulumi.set(__self__, "task_status", task_status)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if wait_switch is not None:
            pulumi.set(__self__, "wait_switch", wait_switch)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="fastUpgrade")
    def fast_upgrade(self) -> Optional[pulumi.Input[int]]:
        """
        Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        """
        return pulumi.get(self, "fast_upgrade")

    @fast_upgrade.setter
    def fast_upgrade(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fast_upgrade", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="intranetIp")
    def intranet_ip(self) -> Optional[pulumi.Input[str]]:
        """
        instance intranet IP.
        """
        return pulumi.get(self, "intranet_ip")

    @intranet_ip.setter
    def intranet_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intranet_ip", value)

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> Optional[pulumi.Input[int]]:
        """
        Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        """
        return pulumi.get(self, "intranet_port")

    @intranet_port.setter
    def intranet_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "intranet_port", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates whether the instance is locked. Valid values: `0`, `1`. `0` - No; `1` - Yes.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter(name="masterInstanceId")
    def master_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the master instance ID of recovery instances.
        """
        return pulumi.get(self, "master_instance_id")

    @master_instance_id.setter
    def master_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_instance_id", value)

    @property
    @pulumi.getter(name="masterRegion")
    def master_region(self) -> Optional[pulumi.Input[str]]:
        """
        The zone information of the primary instance is required when you purchase a disaster recovery instance.
        """
        return pulumi.get(self, "master_region")

    @master_region.setter
    def master_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_region", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        Specify parameter template id.
        """
        return pulumi.get(self, "param_template_id")

    @param_template_id.setter
    def param_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "param_template_id", value)

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")

        return pulumi.get(self, "pay_type")

    @pay_type.setter
    def pay_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
        pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")

        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period of instance. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="roGroupId")
    def ro_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Read only group id. If rogroupId is empty, a new ro group is created by default. If it is not empty, the existing ro group is used. Cross-region query requires master instance permission.
        """
        return pulumi.get(self, "ro_group_id")

    @ro_group_id.setter
    def ro_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ro_group_id", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to use.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="slaveDeployMode")
    def slave_deploy_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        """
        return pulumi.get(self, "slave_deploy_mode")

    @slave_deploy_mode.setter
    def slave_deploy_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slave_deploy_mode", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Instance status. Valid values: `0`, `1`, `4`, `5`. `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network ID. If `vpc_id` is set, this value is required.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates which kind of operations is being executed.
        """
        return pulumi.get(self, "task_status")

    @task_status.setter
    def task_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_status", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[int]]:
        """
        Disk size (in GB).
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> Optional[pulumi.Input[int]]:
        """
        Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        """
        return pulumi.get(self, "wait_switch")

    @wait_switch.setter
    def wait_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_switch", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone information, this parameter defaults to, the system automatically selects an Availability Zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class ReadonlyInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 fast_upgrade: Optional[pulumi.Input[int]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 master_instance_id: Optional[pulumi.Input[str]] = None,
                 master_region: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 ro_group_id: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a mysql instance resource to create read-only database instances.

        > **NOTE:** Read-only instances can be purchased only for two-node or three-node source instances on MySQL 5.6 or above with the InnoDB engine at a specification of 1 GB memory and 50 GB disk capacity or above.
        **NOTE:** The terminate operation of read only mysql does NOT take effect immediately, maybe takes for several hours. so during that time, VPCs associated with that mysql instance can't be terminated also.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone=zones.zones[0].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "UTF8",
                "max_connections": "1000",
            })
        example_readonly_instance = tencentcloud.mysql.ReadonlyInstance("exampleReadonlyInstance",
            master_instance_id=example_instance.id,
            instance_name="tf-example",
            mem_size=128000,
            volume_size=255,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mysql read-only database instances can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mysql/readonlyInstance:ReadonlyInstance default cdb-dnqksd9f
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[int] fast_upgrade: Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[str] master_instance_id: Indicates the master instance ID of recovery instances.
        :param pulumi.Input[str] master_region: The zone information of the primary instance is required when you purchase a disaster recovery instance.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] param_template_id: Specify parameter template id.
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] ro_group_id: Read only group id. If rogroupId is empty, a new ro group is created by default. If it is not empty, the existing ro group is used. Cross-region query requires master instance permission.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        :param pulumi.Input[int] wait_switch: Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        :param pulumi.Input[str] zone: Zone information, this parameter defaults to, the system automatically selects an Availability Zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReadonlyInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a mysql instance resource to create read-only database instances.

        > **NOTE:** Read-only instances can be purchased only for two-node or three-node source instances on MySQL 5.6 or above with the InnoDB engine at a specification of 1 GB memory and 50 GB disk capacity or above.
        **NOTE:** The terminate operation of read only mysql does NOT take effect immediately, maybe takes for several hours. so during that time, VPCs associated with that mysql instance can't be terminated also.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone=zones.zones[0].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "UTF8",
                "max_connections": "1000",
            })
        example_readonly_instance = tencentcloud.mysql.ReadonlyInstance("exampleReadonlyInstance",
            master_instance_id=example_instance.id,
            instance_name="tf-example",
            mem_size=128000,
            volume_size=255,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "createBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mysql read-only database instances can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mysql/readonlyInstance:ReadonlyInstance default cdb-dnqksd9f
        ```

        :param str resource_name: The name of the resource.
        :param ReadonlyInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReadonlyInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 fast_upgrade: Optional[pulumi.Input[int]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 master_instance_id: Optional[pulumi.Input[str]] = None,
                 master_region: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 param_template_id: Optional[pulumi.Input[int]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 ro_group_id: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReadonlyInstanceArgs.__new__(ReadonlyInstanceArgs)

            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["device_type"] = device_type
            __props__.__dict__["fast_upgrade"] = fast_upgrade
            __props__.__dict__["force_delete"] = force_delete
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["intranet_port"] = intranet_port
            if master_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'master_instance_id'")
            __props__.__dict__["master_instance_id"] = master_instance_id
            __props__.__dict__["master_region"] = master_region
            if mem_size is None and not opts.urn:
                raise TypeError("Missing required property 'mem_size'")
            __props__.__dict__["mem_size"] = mem_size
            __props__.__dict__["param_template_id"] = param_template_id
            __props__.__dict__["pay_type"] = pay_type
            __props__.__dict__["period"] = period
            __props__.__dict__["prepaid_period"] = prepaid_period
            __props__.__dict__["ro_group_id"] = ro_group_id
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["slave_deploy_mode"] = slave_deploy_mode
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if volume_size is None and not opts.urn:
                raise TypeError("Missing required property 'volume_size'")
            __props__.__dict__["volume_size"] = volume_size
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["wait_switch"] = wait_switch
            __props__.__dict__["zone"] = zone
            __props__.__dict__["intranet_ip"] = None
            __props__.__dict__["locked"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["task_status"] = None
        super(ReadonlyInstance, __self__).__init__(
            'tencentcloud:Mysql/readonlyInstance:ReadonlyInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            device_type: Optional[pulumi.Input[str]] = None,
            fast_upgrade: Optional[pulumi.Input[int]] = None,
            force_delete: Optional[pulumi.Input[bool]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            intranet_ip: Optional[pulumi.Input[str]] = None,
            intranet_port: Optional[pulumi.Input[int]] = None,
            locked: Optional[pulumi.Input[int]] = None,
            master_instance_id: Optional[pulumi.Input[str]] = None,
            master_region: Optional[pulumi.Input[str]] = None,
            mem_size: Optional[pulumi.Input[int]] = None,
            param_template_id: Optional[pulumi.Input[int]] = None,
            pay_type: Optional[pulumi.Input[int]] = None,
            period: Optional[pulumi.Input[int]] = None,
            prepaid_period: Optional[pulumi.Input[int]] = None,
            ro_group_id: Optional[pulumi.Input[str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            slave_deploy_mode: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            task_status: Optional[pulumi.Input[int]] = None,
            volume_size: Optional[pulumi.Input[int]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            wait_switch: Optional[pulumi.Input[int]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'ReadonlyInstance':
        """
        Get an existing ReadonlyInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[int] fast_upgrade: Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[str] intranet_ip: instance intranet IP.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[int] locked: Indicates whether the instance is locked. Valid values: `0`, `1`. `0` - No; `1` - Yes.
        :param pulumi.Input[str] master_instance_id: Indicates the master instance ID of recovery instances.
        :param pulumi.Input[str] master_region: The zone information of the primary instance is required when you purchase a disaster recovery instance.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] param_template_id: Specify parameter template id.
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] ro_group_id: Read only group id. If rogroupId is empty, a new ro group is created by default. If it is not empty, the existing ro group is used. Cross-region query requires master instance permission.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[int] status: Instance status. Valid values: `0`, `1`, `4`, `5`. `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[int] task_status: Indicates which kind of operations is being executed.
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        :param pulumi.Input[int] wait_switch: Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        :param pulumi.Input[str] zone: Zone information, this parameter defaults to, the system automatically selects an Availability Zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReadonlyInstanceState.__new__(_ReadonlyInstanceState)

        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["device_type"] = device_type
        __props__.__dict__["fast_upgrade"] = fast_upgrade
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["intranet_ip"] = intranet_ip
        __props__.__dict__["intranet_port"] = intranet_port
        __props__.__dict__["locked"] = locked
        __props__.__dict__["master_instance_id"] = master_instance_id
        __props__.__dict__["master_region"] = master_region
        __props__.__dict__["mem_size"] = mem_size
        __props__.__dict__["param_template_id"] = param_template_id
        __props__.__dict__["pay_type"] = pay_type
        __props__.__dict__["period"] = period
        __props__.__dict__["prepaid_period"] = prepaid_period
        __props__.__dict__["ro_group_id"] = ro_group_id
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["slave_deploy_mode"] = slave_deploy_mode
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["task_status"] = task_status
        __props__.__dict__["volume_size"] = volume_size
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["wait_switch"] = wait_switch
        __props__.__dict__["zone"] = zone
        return ReadonlyInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Auto renew flag. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Output[str]:
        """
        Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="fastUpgrade")
    def fast_upgrade(self) -> pulumi.Output[Optional[int]]:
        """
        Specify whether to enable fast upgrade when upgrade instance spec, available value: `1` - enabled, `0` - disabled.
        """
        return pulumi.get(self, "fast_upgrade")

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance. When the main mysql instance set true, this para of the readonly mysql instance will not take effect.
        """
        return pulumi.get(self, "force_delete")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        The name of a mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="intranetIp")
    def intranet_ip(self) -> pulumi.Output[str]:
        """
        instance intranet IP.
        """
        return pulumi.get(self, "intranet_ip")

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> pulumi.Output[Optional[int]]:
        """
        Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        """
        return pulumi.get(self, "intranet_port")

    @property
    @pulumi.getter
    def locked(self) -> pulumi.Output[int]:
        """
        Indicates whether the instance is locked. Valid values: `0`, `1`. `0` - No; `1` - Yes.
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="masterInstanceId")
    def master_instance_id(self) -> pulumi.Output[str]:
        """
        Indicates the master instance ID of recovery instances.
        """
        return pulumi.get(self, "master_instance_id")

    @property
    @pulumi.getter(name="masterRegion")
    def master_region(self) -> pulumi.Output[str]:
        """
        The zone information of the primary instance is required when you purchase a disaster recovery instance.
        """
        return pulumi.get(self, "master_region")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> pulumi.Output[int]:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="paramTemplateId")
    def param_template_id(self) -> pulumi.Output[Optional[int]]:
        """
        Specify parameter template id.
        """
        return pulumi.get(self, "param_template_id")

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> pulumi.Output[Optional[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")

        return pulumi.get(self, "pay_type")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
        pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")

        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> pulumi.Output[Optional[int]]:
        """
        Period of instance. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "prepaid_period")

    @property
    @pulumi.getter(name="roGroupId")
    def ro_group_id(self) -> pulumi.Output[str]:
        """
        Read only group id. If rogroupId is empty, a new ro group is created by default. If it is not empty, the existing ro group is used. Cross-region query requires master instance permission.
        """
        return pulumi.get(self, "ro_group_id")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security groups to use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="slaveDeployMode")
    def slave_deploy_mode(self) -> pulumi.Output[Optional[int]]:
        """
        Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        """
        return pulumi.get(self, "slave_deploy_mode")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Instance status. Valid values: `0`, `1`, `4`, `5`. `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Private network ID. If `vpc_id` is set, this value is required.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> pulumi.Output[int]:
        """
        Indicates which kind of operations is being executed.
        """
        return pulumi.get(self, "task_status")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> pulumi.Output[int]:
        """
        Disk size (in GB).
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> pulumi.Output[Optional[int]]:
        """
        Switch the method of accessing new instances, default is `0`. Supported values include: `0` - switch immediately, `1` - switch in time window.
        """
        return pulumi.get(self, "wait_switch")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Zone information, this parameter defaults to, the system automatically selects an Availability Zone.
        """
        return pulumi.get(self, "zone")

