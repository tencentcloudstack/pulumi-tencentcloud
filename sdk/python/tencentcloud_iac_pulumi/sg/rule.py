# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RuleArgs', 'Rule']

@pulumi.input_type
class RuleArgs:
    def __init__(__self__, *,
                 data: pulumi.Input['RuleDataArgs'],
                 enable: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Rule resource.
        :param pulumi.Input['RuleDataArgs'] data: Creates rule data.
        :param pulumi.Input[int] enable: Rule status. `0` is off, `1` is on. This parameter is not required or is 1 when creating.
        """
        pulumi.set(__self__, "data", data)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Input['RuleDataArgs']:
        """
        Creates rule data.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: pulumi.Input['RuleDataArgs']):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Rule status. `0` is off, `1` is on. This parameter is not required or is 1 when creating.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class _RuleState:
    def __init__(__self__, *,
                 data: Optional[pulumi.Input['RuleDataArgs']] = None,
                 enable: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Rule resources.
        :param pulumi.Input['RuleDataArgs'] data: Creates rule data.
        :param pulumi.Input[int] enable: Rule status. `0` is off, `1` is on. This parameter is not required or is 1 when creating.
        """
        if data is not None:
            pulumi.set(__self__, "data", data)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input['RuleDataArgs']]:
        """
        Creates rule data.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input['RuleDataArgs']]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Rule status. `0` is off, `1` is on. This parameter is not required or is 1 when creating.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)


class Rule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data: Optional[pulumi.Input[pulumi.InputType['RuleDataArgs']]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a cfw sg_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        sg_rule = tencentcloud.sg.Rule("sgRule",
            data=tencentcloud.sg.RuleDataArgs(
                description="1111112",
                dest_content="0.0.0.0/0",
                dest_type="net",
                port="-1/-1",
                protocol="ANY",
                rule_action="accept",
                service_template_id="ppm-l9u5pf1y",
                source_content="0.0.0.0/0",
                source_type="net",
            ),
            enable=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cfw sg_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sg/rule:Rule sg_rule rule_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RuleDataArgs']] data: Creates rule data.
        :param pulumi.Input[int] enable: Rule status. `0` is off, `1` is on. This parameter is not required or is 1 when creating.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cfw sg_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        sg_rule = tencentcloud.sg.Rule("sgRule",
            data=tencentcloud.sg.RuleDataArgs(
                description="1111112",
                dest_content="0.0.0.0/0",
                dest_type="net",
                port="-1/-1",
                protocol="ANY",
                rule_action="accept",
                service_template_id="ppm-l9u5pf1y",
                source_content="0.0.0.0/0",
                source_type="net",
            ),
            enable=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cfw sg_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sg/rule:Rule sg_rule rule_id
        ```

        :param str resource_name: The name of the resource.
        :param RuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data: Optional[pulumi.Input[pulumi.InputType['RuleDataArgs']]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuleArgs.__new__(RuleArgs)

            if data is None and not opts.urn:
                raise TypeError("Missing required property 'data'")
            __props__.__dict__["data"] = data
            __props__.__dict__["enable"] = enable
        super(Rule, __self__).__init__(
            'tencentcloud:Sg/rule:Rule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data: Optional[pulumi.Input[pulumi.InputType['RuleDataArgs']]] = None,
            enable: Optional[pulumi.Input[int]] = None) -> 'Rule':
        """
        Get an existing Rule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RuleDataArgs']] data: Creates rule data.
        :param pulumi.Input[int] enable: Rule status. `0` is off, `1` is on. This parameter is not required or is 1 when creating.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RuleState.__new__(_RuleState)

        __props__.__dict__["data"] = data
        __props__.__dict__["enable"] = enable
        return Rule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Output['outputs.RuleData']:
        """
        Creates rule data.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[int]:
        """
        Rule status. `0` is off, `1` is on. This parameter is not required or is 1 when creating.
        """
        return pulumi.get(self, "enable")

