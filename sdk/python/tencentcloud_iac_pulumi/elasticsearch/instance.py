# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 node_info_lists: pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoListArgs']]],
                 password: pulumi.Input[str],
                 version: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 basic_security_type: Optional[pulumi.Input[int]] = None,
                 charge_period: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cos_backup: Optional[pulumi.Input['InstanceCosBackupArgs']] = None,
                 deploy_mode: Optional[pulumi.Input[int]] = None,
                 es_acl: Optional[pulumi.Input['InstanceEsAclArgs']] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 kibana_public_access: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 multi_zone_infos: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceMultiZoneInfoArgs']]]] = None,
                 renew_flag: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 web_node_type_infos: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceWebNodeTypeInfoArgs']]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoListArgs']]] node_info_lists: Node information list, which is used to describe the specification information of various types of nodes in the cluster, such as node type, node quantity, node specification, disk type, and disk size.
        :param pulumi.Input[str] password: Password to an instance, the password needs to be 8 to 16 characters, including at least two items ([a-z,A-Z], [0-9] and [-!@#$%&^*+=_:;,.?] special symbols.
        :param pulumi.Input[str] version: Version of the instance. Valid values are `5.6.4`, `6.4.3`, `6.8.2`, `7.5.1` and `7.10.1`.
        :param pulumi.Input[str] vpc_id: The ID of a VPC network.
        :param pulumi.Input[str] availability_zone: Availability zone. When create multi-az es, this parameter must be omitted or `-`.
        :param pulumi.Input[int] basic_security_type: Whether to enable X-Pack security authentication in Basic Edition 6.8 and above. Valid values are `1` and `2`. `1` is disabled, `2` is enabled, and default value is `1`. Notice: this parameter is only take effect on `basic` license.
        :param pulumi.Input[int] charge_period: The tenancy of the prepaid instance, and uint is month. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`.
        :param pulumi.Input['InstanceCosBackupArgs'] cos_backup: COS automatic backup information.
        :param pulumi.Input[int] deploy_mode: Cluster deployment mode. Valid values are `0` and `1`. `0` is single-AZ deployment, and `1` is multi-AZ deployment. Default value is `0`.
        :param pulumi.Input['InstanceEsAclArgs'] es_acl: Kibana Access Control Configuration.
        :param pulumi.Input[str] instance_name: Name of the instance, which can contain 1 to 50 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        :param pulumi.Input[str] kibana_public_access: Kibana public network access status. Valid values are `OPEN` and `CLOSE`.
        :param pulumi.Input[str] license_type: License type. Valid values are `oss`, `basic` and `platinum`. The default value is `platinum`.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceMultiZoneInfoArgs']]] multi_zone_infos: Details of AZs in multi-AZ deployment mode (which is required when deploy_mode is `1`).
        :param pulumi.Input[str] renew_flag: When enabled, the instance will be renew automatically when it reach the end of the prepaid tenancy. Valid values are `RENEW_FLAG_AUTO` and `RENEW_FLAG_MANUAL`. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[str] subnet_id: The ID of a VPC subnetwork. When create multi-az es, this parameter must be omitted or `-`.
        :param pulumi.Input[Mapping[str, Any]] tags: A mapping of tags to assign to the instance. For tag limits, please refer to [Use Limits](https://intl.cloud.tencent.com/document/product/651/13354).
        :param pulumi.Input[Sequence[pulumi.Input['InstanceWebNodeTypeInfoArgs']]] web_node_type_infos: Visual node configuration.
        """
        pulumi.set(__self__, "node_info_lists", node_info_lists)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if basic_security_type is not None:
            pulumi.set(__self__, "basic_security_type", basic_security_type)
        if charge_period is not None:
            pulumi.set(__self__, "charge_period", charge_period)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if cos_backup is not None:
            pulumi.set(__self__, "cos_backup", cos_backup)
        if deploy_mode is not None:
            pulumi.set(__self__, "deploy_mode", deploy_mode)
        if es_acl is not None:
            pulumi.set(__self__, "es_acl", es_acl)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if kibana_public_access is not None:
            pulumi.set(__self__, "kibana_public_access", kibana_public_access)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if multi_zone_infos is not None:
            pulumi.set(__self__, "multi_zone_infos", multi_zone_infos)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if web_node_type_infos is not None:
            pulumi.set(__self__, "web_node_type_infos", web_node_type_infos)

    @property
    @pulumi.getter(name="nodeInfoLists")
    def node_info_lists(self) -> pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoListArgs']]]:
        """
        Node information list, which is used to describe the specification information of various types of nodes in the cluster, such as node type, node quantity, node specification, disk type, and disk size.
        """
        return pulumi.get(self, "node_info_lists")

    @node_info_lists.setter
    def node_info_lists(self, value: pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoListArgs']]]):
        pulumi.set(self, "node_info_lists", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password to an instance, the password needs to be 8 to 16 characters, including at least two items ([a-z,A-Z], [0-9] and [-!@#$%&^*+=_:;,.?] special symbols.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Version of the instance. Valid values are `5.6.4`, `6.4.3`, `6.8.2`, `7.5.1` and `7.10.1`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The ID of a VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone. When create multi-az es, this parameter must be omitted or `-`.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="basicSecurityType")
    def basic_security_type(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable X-Pack security authentication in Basic Edition 6.8 and above. Valid values are `1` and `2`. `1` is disabled, `2` is enabled, and default value is `1`. Notice: this parameter is only take effect on `basic` license.
        """
        return pulumi.get(self, "basic_security_type")

    @basic_security_type.setter
    def basic_security_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "basic_security_type", value)

    @property
    @pulumi.getter(name="chargePeriod")
    def charge_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy of the prepaid instance, and uint is month. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "charge_period")

    @charge_period.setter
    def charge_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "charge_period", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="cosBackup")
    def cos_backup(self) -> Optional[pulumi.Input['InstanceCosBackupArgs']]:
        """
        COS automatic backup information.
        """
        return pulumi.get(self, "cos_backup")

    @cos_backup.setter
    def cos_backup(self, value: Optional[pulumi.Input['InstanceCosBackupArgs']]):
        pulumi.set(self, "cos_backup", value)

    @property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster deployment mode. Valid values are `0` and `1`. `0` is single-AZ deployment, and `1` is multi-AZ deployment. Default value is `0`.
        """
        return pulumi.get(self, "deploy_mode")

    @deploy_mode.setter
    def deploy_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deploy_mode", value)

    @property
    @pulumi.getter(name="esAcl")
    def es_acl(self) -> Optional[pulumi.Input['InstanceEsAclArgs']]:
        """
        Kibana Access Control Configuration.
        """
        return pulumi.get(self, "es_acl")

    @es_acl.setter
    def es_acl(self, value: Optional[pulumi.Input['InstanceEsAclArgs']]):
        pulumi.set(self, "es_acl", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the instance, which can contain 1 to 50 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="kibanaPublicAccess")
    def kibana_public_access(self) -> Optional[pulumi.Input[str]]:
        """
        Kibana public network access status. Valid values are `OPEN` and `CLOSE`.
        """
        return pulumi.get(self, "kibana_public_access")

    @kibana_public_access.setter
    def kibana_public_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_public_access", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        """
        License type. Valid values are `oss`, `basic` and `platinum`. The default value is `platinum`.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="multiZoneInfos")
    def multi_zone_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceMultiZoneInfoArgs']]]]:
        """
        Details of AZs in multi-AZ deployment mode (which is required when deploy_mode is `1`).
        """
        return pulumi.get(self, "multi_zone_infos")

    @multi_zone_infos.setter
    def multi_zone_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceMultiZoneInfoArgs']]]]):
        pulumi.set(self, "multi_zone_infos", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, the instance will be renew automatically when it reach the end of the prepaid tenancy. Valid values are `RENEW_FLAG_AUTO` and `RENEW_FLAG_MANUAL`. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a VPC subnetwork. When create multi-az es, this parameter must be omitted or `-`.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A mapping of tags to assign to the instance. For tag limits, please refer to [Use Limits](https://intl.cloud.tencent.com/document/product/651/13354).
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="webNodeTypeInfos")
    def web_node_type_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceWebNodeTypeInfoArgs']]]]:
        """
        Visual node configuration.
        """
        return pulumi.get(self, "web_node_type_infos")

    @web_node_type_infos.setter
    def web_node_type_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceWebNodeTypeInfoArgs']]]]):
        pulumi.set(self, "web_node_type_infos", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 basic_security_type: Optional[pulumi.Input[int]] = None,
                 charge_period: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cos_backup: Optional[pulumi.Input['InstanceCosBackupArgs']] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 deploy_mode: Optional[pulumi.Input[int]] = None,
                 elasticsearch_domain: Optional[pulumi.Input[str]] = None,
                 elasticsearch_port: Optional[pulumi.Input[int]] = None,
                 elasticsearch_vip: Optional[pulumi.Input[str]] = None,
                 es_acl: Optional[pulumi.Input['InstanceEsAclArgs']] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 kibana_public_access: Optional[pulumi.Input[str]] = None,
                 kibana_url: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 multi_zone_infos: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceMultiZoneInfoArgs']]]] = None,
                 node_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoListArgs']]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 renew_flag: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 web_node_type_infos: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceWebNodeTypeInfoArgs']]]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] availability_zone: Availability zone. When create multi-az es, this parameter must be omitted or `-`.
        :param pulumi.Input[int] basic_security_type: Whether to enable X-Pack security authentication in Basic Edition 6.8 and above. Valid values are `1` and `2`. `1` is disabled, `2` is enabled, and default value is `1`. Notice: this parameter is only take effect on `basic` license.
        :param pulumi.Input[int] charge_period: The tenancy of the prepaid instance, and uint is month. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`.
        :param pulumi.Input['InstanceCosBackupArgs'] cos_backup: COS automatic backup information.
        :param pulumi.Input[str] create_time: Instance creation time.
        :param pulumi.Input[int] deploy_mode: Cluster deployment mode. Valid values are `0` and `1`. `0` is single-AZ deployment, and `1` is multi-AZ deployment. Default value is `0`.
        :param pulumi.Input[str] elasticsearch_domain: Elasticsearch domain name.
        :param pulumi.Input[int] elasticsearch_port: Elasticsearch port.
        :param pulumi.Input[str] elasticsearch_vip: Elasticsearch VIP.
        :param pulumi.Input['InstanceEsAclArgs'] es_acl: Kibana Access Control Configuration.
        :param pulumi.Input[str] instance_name: Name of the instance, which can contain 1 to 50 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        :param pulumi.Input[str] kibana_public_access: Kibana public network access status. Valid values are `OPEN` and `CLOSE`.
        :param pulumi.Input[str] kibana_url: Kibana access URL.
        :param pulumi.Input[str] license_type: License type. Valid values are `oss`, `basic` and `platinum`. The default value is `platinum`.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceMultiZoneInfoArgs']]] multi_zone_infos: Details of AZs in multi-AZ deployment mode (which is required when deploy_mode is `1`).
        :param pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoListArgs']]] node_info_lists: Node information list, which is used to describe the specification information of various types of nodes in the cluster, such as node type, node quantity, node specification, disk type, and disk size.
        :param pulumi.Input[str] password: Password to an instance, the password needs to be 8 to 16 characters, including at least two items ([a-z,A-Z], [0-9] and [-!@#$%&^*+=_:;,.?] special symbols.
        :param pulumi.Input[str] renew_flag: When enabled, the instance will be renew automatically when it reach the end of the prepaid tenancy. Valid values are `RENEW_FLAG_AUTO` and `RENEW_FLAG_MANUAL`. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[str] subnet_id: The ID of a VPC subnetwork. When create multi-az es, this parameter must be omitted or `-`.
        :param pulumi.Input[Mapping[str, Any]] tags: A mapping of tags to assign to the instance. For tag limits, please refer to [Use Limits](https://intl.cloud.tencent.com/document/product/651/13354).
        :param pulumi.Input[str] version: Version of the instance. Valid values are `5.6.4`, `6.4.3`, `6.8.2`, `7.5.1` and `7.10.1`.
        :param pulumi.Input[str] vpc_id: The ID of a VPC network.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceWebNodeTypeInfoArgs']]] web_node_type_infos: Visual node configuration.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if basic_security_type is not None:
            pulumi.set(__self__, "basic_security_type", basic_security_type)
        if charge_period is not None:
            pulumi.set(__self__, "charge_period", charge_period)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if cos_backup is not None:
            pulumi.set(__self__, "cos_backup", cos_backup)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if deploy_mode is not None:
            pulumi.set(__self__, "deploy_mode", deploy_mode)
        if elasticsearch_domain is not None:
            pulumi.set(__self__, "elasticsearch_domain", elasticsearch_domain)
        if elasticsearch_port is not None:
            pulumi.set(__self__, "elasticsearch_port", elasticsearch_port)
        if elasticsearch_vip is not None:
            pulumi.set(__self__, "elasticsearch_vip", elasticsearch_vip)
        if es_acl is not None:
            pulumi.set(__self__, "es_acl", es_acl)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if kibana_public_access is not None:
            pulumi.set(__self__, "kibana_public_access", kibana_public_access)
        if kibana_url is not None:
            pulumi.set(__self__, "kibana_url", kibana_url)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if multi_zone_infos is not None:
            pulumi.set(__self__, "multi_zone_infos", multi_zone_infos)
        if node_info_lists is not None:
            pulumi.set(__self__, "node_info_lists", node_info_lists)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if web_node_type_infos is not None:
            pulumi.set(__self__, "web_node_type_infos", web_node_type_infos)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone. When create multi-az es, this parameter must be omitted or `-`.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="basicSecurityType")
    def basic_security_type(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable X-Pack security authentication in Basic Edition 6.8 and above. Valid values are `1` and `2`. `1` is disabled, `2` is enabled, and default value is `1`. Notice: this parameter is only take effect on `basic` license.
        """
        return pulumi.get(self, "basic_security_type")

    @basic_security_type.setter
    def basic_security_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "basic_security_type", value)

    @property
    @pulumi.getter(name="chargePeriod")
    def charge_period(self) -> Optional[pulumi.Input[int]]:
        """
        The tenancy of the prepaid instance, and uint is month. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "charge_period")

    @charge_period.setter
    def charge_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "charge_period", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="cosBackup")
    def cos_backup(self) -> Optional[pulumi.Input['InstanceCosBackupArgs']]:
        """
        COS automatic backup information.
        """
        return pulumi.get(self, "cos_backup")

    @cos_backup.setter
    def cos_backup(self, value: Optional[pulumi.Input['InstanceCosBackupArgs']]):
        pulumi.set(self, "cos_backup", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Instance creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster deployment mode. Valid values are `0` and `1`. `0` is single-AZ deployment, and `1` is multi-AZ deployment. Default value is `0`.
        """
        return pulumi.get(self, "deploy_mode")

    @deploy_mode.setter
    def deploy_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deploy_mode", value)

    @property
    @pulumi.getter(name="elasticsearchDomain")
    def elasticsearch_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Elasticsearch domain name.
        """
        return pulumi.get(self, "elasticsearch_domain")

    @elasticsearch_domain.setter
    def elasticsearch_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_domain", value)

    @property
    @pulumi.getter(name="elasticsearchPort")
    def elasticsearch_port(self) -> Optional[pulumi.Input[int]]:
        """
        Elasticsearch port.
        """
        return pulumi.get(self, "elasticsearch_port")

    @elasticsearch_port.setter
    def elasticsearch_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elasticsearch_port", value)

    @property
    @pulumi.getter(name="elasticsearchVip")
    def elasticsearch_vip(self) -> Optional[pulumi.Input[str]]:
        """
        Elasticsearch VIP.
        """
        return pulumi.get(self, "elasticsearch_vip")

    @elasticsearch_vip.setter
    def elasticsearch_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elasticsearch_vip", value)

    @property
    @pulumi.getter(name="esAcl")
    def es_acl(self) -> Optional[pulumi.Input['InstanceEsAclArgs']]:
        """
        Kibana Access Control Configuration.
        """
        return pulumi.get(self, "es_acl")

    @es_acl.setter
    def es_acl(self, value: Optional[pulumi.Input['InstanceEsAclArgs']]):
        pulumi.set(self, "es_acl", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the instance, which can contain 1 to 50 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="kibanaPublicAccess")
    def kibana_public_access(self) -> Optional[pulumi.Input[str]]:
        """
        Kibana public network access status. Valid values are `OPEN` and `CLOSE`.
        """
        return pulumi.get(self, "kibana_public_access")

    @kibana_public_access.setter
    def kibana_public_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_public_access", value)

    @property
    @pulumi.getter(name="kibanaUrl")
    def kibana_url(self) -> Optional[pulumi.Input[str]]:
        """
        Kibana access URL.
        """
        return pulumi.get(self, "kibana_url")

    @kibana_url.setter
    def kibana_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kibana_url", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        """
        License type. Valid values are `oss`, `basic` and `platinum`. The default value is `platinum`.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="multiZoneInfos")
    def multi_zone_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceMultiZoneInfoArgs']]]]:
        """
        Details of AZs in multi-AZ deployment mode (which is required when deploy_mode is `1`).
        """
        return pulumi.get(self, "multi_zone_infos")

    @multi_zone_infos.setter
    def multi_zone_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceMultiZoneInfoArgs']]]]):
        pulumi.set(self, "multi_zone_infos", value)

    @property
    @pulumi.getter(name="nodeInfoLists")
    def node_info_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoListArgs']]]]:
        """
        Node information list, which is used to describe the specification information of various types of nodes in the cluster, such as node type, node quantity, node specification, disk type, and disk size.
        """
        return pulumi.get(self, "node_info_lists")

    @node_info_lists.setter
    def node_info_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNodeInfoListArgs']]]]):
        pulumi.set(self, "node_info_lists", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to an instance, the password needs to be 8 to 16 characters, including at least two items ([a-z,A-Z], [0-9] and [-!@#$%&^*+=_:;,.?] special symbols.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        When enabled, the instance will be renew automatically when it reach the end of the prepaid tenancy. Valid values are `RENEW_FLAG_AUTO` and `RENEW_FLAG_MANUAL`. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a VPC subnetwork. When create multi-az es, this parameter must be omitted or `-`.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A mapping of tags to assign to the instance. For tag limits, please refer to [Use Limits](https://intl.cloud.tencent.com/document/product/651/13354).
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the instance. Valid values are `5.6.4`, `6.4.3`, `6.8.2`, `7.5.1` and `7.10.1`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of a VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="webNodeTypeInfos")
    def web_node_type_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceWebNodeTypeInfoArgs']]]]:
        """
        Visual node configuration.
        """
        return pulumi.get(self, "web_node_type_infos")

    @web_node_type_infos.setter
    def web_node_type_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceWebNodeTypeInfoArgs']]]]):
        pulumi.set(self, "web_node_type_infos", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 basic_security_type: Optional[pulumi.Input[int]] = None,
                 charge_period: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cos_backup: Optional[pulumi.Input[pulumi.InputType['InstanceCosBackupArgs']]] = None,
                 deploy_mode: Optional[pulumi.Input[int]] = None,
                 es_acl: Optional[pulumi.Input[pulumi.InputType['InstanceEsAclArgs']]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 kibana_public_access: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 multi_zone_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceMultiZoneInfoArgs']]]]] = None,
                 node_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceNodeInfoListArgs']]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 renew_flag: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 web_node_type_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceWebNodeTypeInfoArgs']]]]] = None,
                 __props__=None):
        """
        Provides an elasticsearch instance resource.

        ## Example Usage

        ### Create a basic version of elasticsearch instance paid by the hour

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        availability_zone = tencentcloud.Availability.get_zones_by_product(product="es")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone.zones[0].name,
            cidr_block="10.0.1.0/24")
        example = tencentcloud.elasticsearch.Instance("example",
            instance_name="tf_example_es",
            availability_zone=availability_zone.zones[0].name,
            version="7.10.1",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            password="Test12345",
            license_type="basic",
            basic_security_type=2,
            web_node_type_infos=[tencentcloud.elasticsearch.InstanceWebNodeTypeInfoArgs(
                node_num=1,
                node_type="ES.S1.MEDIUM4",
            )],
            node_info_lists=[tencentcloud.elasticsearch.InstanceNodeInfoListArgs(
                node_num=2,
                node_type="ES.S1.MEDIUM8",
                encrypt=False,
            )],
            es_acl=tencentcloud.elasticsearch.InstanceEsAclArgs(
                white_lists=["127.0.0.1"],
            ),
            cos_backup=tencentcloud.elasticsearch.InstanceCosBackupArgs(
                is_auto_backup=True,
                backup_time="22:00",
            ),
            tags={
                "test": "test",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a basic version of elasticsearch instance for multi-availability zone deployment

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        availability_zone = tencentcloud.Availability.get_zones_by_product(product="es")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone.zones[0].name,
            cidr_block="10.0.1.0/24")
        subnet_multi_zone = tencentcloud.subnet.Instance("subnetMultiZone",
            vpc_id=vpc.id,
            availability_zone=availability_zone.zones[1].name,
            cidr_block="10.0.2.0/24")
        example_multi_zone = tencentcloud.elasticsearch.Instance("exampleMultiZone",
            instance_name="tf_example_es",
            availability_zone="-",
            version="7.10.1",
            vpc_id=vpc.id,
            subnet_id="-",
            password="Test12345",
            license_type="basic",
            basic_security_type=2,
            deploy_mode=1,
            multi_zone_infos=[
                tencentcloud.elasticsearch.InstanceMultiZoneInfoArgs(
                    availability_zone=availability_zone.zones[0].name,
                    subnet_id=subnet.id,
                ),
                tencentcloud.elasticsearch.InstanceMultiZoneInfoArgs(
                    availability_zone=availability_zone.zones[1].name,
                    subnet_id=subnet_multi_zone.id,
                ),
            ],
            web_node_type_infos=[tencentcloud.elasticsearch.InstanceWebNodeTypeInfoArgs(
                node_num=1,
                node_type="ES.S1.MEDIUM4",
            )],
            node_info_lists=[
                tencentcloud.elasticsearch.InstanceNodeInfoListArgs(
                    type="dedicatedMaster",
                    node_num=3,
                    node_type="ES.S1.MEDIUM8",
                    encrypt=False,
                ),
                tencentcloud.elasticsearch.InstanceNodeInfoListArgs(
                    type="hotData",
                    node_num=2,
                    node_type="ES.S1.MEDIUM8",
                    encrypt=False,
                ),
            ],
            es_acl=tencentcloud.elasticsearch.InstanceEsAclArgs(
                white_lists=["127.0.0.1"],
            ),
            tags={
                "test": "test",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Elasticsearch instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Elasticsearch/instance:Instance foo es-17634f05
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] availability_zone: Availability zone. When create multi-az es, this parameter must be omitted or `-`.
        :param pulumi.Input[int] basic_security_type: Whether to enable X-Pack security authentication in Basic Edition 6.8 and above. Valid values are `1` and `2`. `1` is disabled, `2` is enabled, and default value is `1`. Notice: this parameter is only take effect on `basic` license.
        :param pulumi.Input[int] charge_period: The tenancy of the prepaid instance, and uint is month. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`.
        :param pulumi.Input[pulumi.InputType['InstanceCosBackupArgs']] cos_backup: COS automatic backup information.
        :param pulumi.Input[int] deploy_mode: Cluster deployment mode. Valid values are `0` and `1`. `0` is single-AZ deployment, and `1` is multi-AZ deployment. Default value is `0`.
        :param pulumi.Input[pulumi.InputType['InstanceEsAclArgs']] es_acl: Kibana Access Control Configuration.
        :param pulumi.Input[str] instance_name: Name of the instance, which can contain 1 to 50 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        :param pulumi.Input[str] kibana_public_access: Kibana public network access status. Valid values are `OPEN` and `CLOSE`.
        :param pulumi.Input[str] license_type: License type. Valid values are `oss`, `basic` and `platinum`. The default value is `platinum`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceMultiZoneInfoArgs']]]] multi_zone_infos: Details of AZs in multi-AZ deployment mode (which is required when deploy_mode is `1`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceNodeInfoListArgs']]]] node_info_lists: Node information list, which is used to describe the specification information of various types of nodes in the cluster, such as node type, node quantity, node specification, disk type, and disk size.
        :param pulumi.Input[str] password: Password to an instance, the password needs to be 8 to 16 characters, including at least two items ([a-z,A-Z], [0-9] and [-!@#$%&^*+=_:;,.?] special symbols.
        :param pulumi.Input[str] renew_flag: When enabled, the instance will be renew automatically when it reach the end of the prepaid tenancy. Valid values are `RENEW_FLAG_AUTO` and `RENEW_FLAG_MANUAL`. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[str] subnet_id: The ID of a VPC subnetwork. When create multi-az es, this parameter must be omitted or `-`.
        :param pulumi.Input[Mapping[str, Any]] tags: A mapping of tags to assign to the instance. For tag limits, please refer to [Use Limits](https://intl.cloud.tencent.com/document/product/651/13354).
        :param pulumi.Input[str] version: Version of the instance. Valid values are `5.6.4`, `6.4.3`, `6.8.2`, `7.5.1` and `7.10.1`.
        :param pulumi.Input[str] vpc_id: The ID of a VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceWebNodeTypeInfoArgs']]]] web_node_type_infos: Visual node configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an elasticsearch instance resource.

        ## Example Usage

        ### Create a basic version of elasticsearch instance paid by the hour

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        availability_zone = tencentcloud.Availability.get_zones_by_product(product="es")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone.zones[0].name,
            cidr_block="10.0.1.0/24")
        example = tencentcloud.elasticsearch.Instance("example",
            instance_name="tf_example_es",
            availability_zone=availability_zone.zones[0].name,
            version="7.10.1",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            password="Test12345",
            license_type="basic",
            basic_security_type=2,
            web_node_type_infos=[tencentcloud.elasticsearch.InstanceWebNodeTypeInfoArgs(
                node_num=1,
                node_type="ES.S1.MEDIUM4",
            )],
            node_info_lists=[tencentcloud.elasticsearch.InstanceNodeInfoListArgs(
                node_num=2,
                node_type="ES.S1.MEDIUM8",
                encrypt=False,
            )],
            es_acl=tencentcloud.elasticsearch.InstanceEsAclArgs(
                white_lists=["127.0.0.1"],
            ),
            cos_backup=tencentcloud.elasticsearch.InstanceCosBackupArgs(
                is_auto_backup=True,
                backup_time="22:00",
            ),
            tags={
                "test": "test",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a basic version of elasticsearch instance for multi-availability zone deployment

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        availability_zone = tencentcloud.Availability.get_zones_by_product(product="es")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone.zones[0].name,
            cidr_block="10.0.1.0/24")
        subnet_multi_zone = tencentcloud.subnet.Instance("subnetMultiZone",
            vpc_id=vpc.id,
            availability_zone=availability_zone.zones[1].name,
            cidr_block="10.0.2.0/24")
        example_multi_zone = tencentcloud.elasticsearch.Instance("exampleMultiZone",
            instance_name="tf_example_es",
            availability_zone="-",
            version="7.10.1",
            vpc_id=vpc.id,
            subnet_id="-",
            password="Test12345",
            license_type="basic",
            basic_security_type=2,
            deploy_mode=1,
            multi_zone_infos=[
                tencentcloud.elasticsearch.InstanceMultiZoneInfoArgs(
                    availability_zone=availability_zone.zones[0].name,
                    subnet_id=subnet.id,
                ),
                tencentcloud.elasticsearch.InstanceMultiZoneInfoArgs(
                    availability_zone=availability_zone.zones[1].name,
                    subnet_id=subnet_multi_zone.id,
                ),
            ],
            web_node_type_infos=[tencentcloud.elasticsearch.InstanceWebNodeTypeInfoArgs(
                node_num=1,
                node_type="ES.S1.MEDIUM4",
            )],
            node_info_lists=[
                tencentcloud.elasticsearch.InstanceNodeInfoListArgs(
                    type="dedicatedMaster",
                    node_num=3,
                    node_type="ES.S1.MEDIUM8",
                    encrypt=False,
                ),
                tencentcloud.elasticsearch.InstanceNodeInfoListArgs(
                    type="hotData",
                    node_num=2,
                    node_type="ES.S1.MEDIUM8",
                    encrypt=False,
                ),
            ],
            es_acl=tencentcloud.elasticsearch.InstanceEsAclArgs(
                white_lists=["127.0.0.1"],
            ),
            tags={
                "test": "test",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Elasticsearch instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Elasticsearch/instance:Instance foo es-17634f05
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 basic_security_type: Optional[pulumi.Input[int]] = None,
                 charge_period: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cos_backup: Optional[pulumi.Input[pulumi.InputType['InstanceCosBackupArgs']]] = None,
                 deploy_mode: Optional[pulumi.Input[int]] = None,
                 es_acl: Optional[pulumi.Input[pulumi.InputType['InstanceEsAclArgs']]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 kibana_public_access: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 multi_zone_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceMultiZoneInfoArgs']]]]] = None,
                 node_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceNodeInfoListArgs']]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 renew_flag: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 web_node_type_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceWebNodeTypeInfoArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["basic_security_type"] = basic_security_type
            __props__.__dict__["charge_period"] = charge_period
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["cos_backup"] = cos_backup
            __props__.__dict__["deploy_mode"] = deploy_mode
            __props__.__dict__["es_acl"] = es_acl
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["kibana_public_access"] = kibana_public_access
            __props__.__dict__["license_type"] = license_type
            __props__.__dict__["multi_zone_infos"] = multi_zone_infos
            if node_info_lists is None and not opts.urn:
                raise TypeError("Missing required property 'node_info_lists'")
            __props__.__dict__["node_info_lists"] = node_info_lists
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["renew_flag"] = renew_flag
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["web_node_type_infos"] = web_node_type_infos
            __props__.__dict__["create_time"] = None
            __props__.__dict__["elasticsearch_domain"] = None
            __props__.__dict__["elasticsearch_port"] = None
            __props__.__dict__["elasticsearch_vip"] = None
            __props__.__dict__["kibana_url"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'tencentcloud:Elasticsearch/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            basic_security_type: Optional[pulumi.Input[int]] = None,
            charge_period: Optional[pulumi.Input[int]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            cos_backup: Optional[pulumi.Input[pulumi.InputType['InstanceCosBackupArgs']]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            deploy_mode: Optional[pulumi.Input[int]] = None,
            elasticsearch_domain: Optional[pulumi.Input[str]] = None,
            elasticsearch_port: Optional[pulumi.Input[int]] = None,
            elasticsearch_vip: Optional[pulumi.Input[str]] = None,
            es_acl: Optional[pulumi.Input[pulumi.InputType['InstanceEsAclArgs']]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            kibana_public_access: Optional[pulumi.Input[str]] = None,
            kibana_url: Optional[pulumi.Input[str]] = None,
            license_type: Optional[pulumi.Input[str]] = None,
            multi_zone_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceMultiZoneInfoArgs']]]]] = None,
            node_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceNodeInfoListArgs']]]]] = None,
            password: Optional[pulumi.Input[str]] = None,
            renew_flag: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            version: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            web_node_type_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceWebNodeTypeInfoArgs']]]]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] availability_zone: Availability zone. When create multi-az es, this parameter must be omitted or `-`.
        :param pulumi.Input[int] basic_security_type: Whether to enable X-Pack security authentication in Basic Edition 6.8 and above. Valid values are `1` and `2`. `1` is disabled, `2` is enabled, and default value is `1`. Notice: this parameter is only take effect on `basic` license.
        :param pulumi.Input[int] charge_period: The tenancy of the prepaid instance, and uint is month. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`.
        :param pulumi.Input[pulumi.InputType['InstanceCosBackupArgs']] cos_backup: COS automatic backup information.
        :param pulumi.Input[str] create_time: Instance creation time.
        :param pulumi.Input[int] deploy_mode: Cluster deployment mode. Valid values are `0` and `1`. `0` is single-AZ deployment, and `1` is multi-AZ deployment. Default value is `0`.
        :param pulumi.Input[str] elasticsearch_domain: Elasticsearch domain name.
        :param pulumi.Input[int] elasticsearch_port: Elasticsearch port.
        :param pulumi.Input[str] elasticsearch_vip: Elasticsearch VIP.
        :param pulumi.Input[pulumi.InputType['InstanceEsAclArgs']] es_acl: Kibana Access Control Configuration.
        :param pulumi.Input[str] instance_name: Name of the instance, which can contain 1 to 50 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        :param pulumi.Input[str] kibana_public_access: Kibana public network access status. Valid values are `OPEN` and `CLOSE`.
        :param pulumi.Input[str] kibana_url: Kibana access URL.
        :param pulumi.Input[str] license_type: License type. Valid values are `oss`, `basic` and `platinum`. The default value is `platinum`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceMultiZoneInfoArgs']]]] multi_zone_infos: Details of AZs in multi-AZ deployment mode (which is required when deploy_mode is `1`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceNodeInfoListArgs']]]] node_info_lists: Node information list, which is used to describe the specification information of various types of nodes in the cluster, such as node type, node quantity, node specification, disk type, and disk size.
        :param pulumi.Input[str] password: Password to an instance, the password needs to be 8 to 16 characters, including at least two items ([a-z,A-Z], [0-9] and [-!@#$%&^*+=_:;,.?] special symbols.
        :param pulumi.Input[str] renew_flag: When enabled, the instance will be renew automatically when it reach the end of the prepaid tenancy. Valid values are `RENEW_FLAG_AUTO` and `RENEW_FLAG_MANUAL`. NOTE: it only works when charge_type is set to `PREPAID`.
        :param pulumi.Input[str] subnet_id: The ID of a VPC subnetwork. When create multi-az es, this parameter must be omitted or `-`.
        :param pulumi.Input[Mapping[str, Any]] tags: A mapping of tags to assign to the instance. For tag limits, please refer to [Use Limits](https://intl.cloud.tencent.com/document/product/651/13354).
        :param pulumi.Input[str] version: Version of the instance. Valid values are `5.6.4`, `6.4.3`, `6.8.2`, `7.5.1` and `7.10.1`.
        :param pulumi.Input[str] vpc_id: The ID of a VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceWebNodeTypeInfoArgs']]]] web_node_type_infos: Visual node configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["basic_security_type"] = basic_security_type
        __props__.__dict__["charge_period"] = charge_period
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["cos_backup"] = cos_backup
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["deploy_mode"] = deploy_mode
        __props__.__dict__["elasticsearch_domain"] = elasticsearch_domain
        __props__.__dict__["elasticsearch_port"] = elasticsearch_port
        __props__.__dict__["elasticsearch_vip"] = elasticsearch_vip
        __props__.__dict__["es_acl"] = es_acl
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["kibana_public_access"] = kibana_public_access
        __props__.__dict__["kibana_url"] = kibana_url
        __props__.__dict__["license_type"] = license_type
        __props__.__dict__["multi_zone_infos"] = multi_zone_infos
        __props__.__dict__["node_info_lists"] = node_info_lists
        __props__.__dict__["password"] = password
        __props__.__dict__["renew_flag"] = renew_flag
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["version"] = version
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["web_node_type_infos"] = web_node_type_infos
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[Optional[str]]:
        """
        Availability zone. When create multi-az es, this parameter must be omitted or `-`.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="basicSecurityType")
    def basic_security_type(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable X-Pack security authentication in Basic Edition 6.8 and above. Valid values are `1` and `2`. `1` is disabled, `2` is enabled, and default value is `1`. Notice: this parameter is only take effect on `basic` license.
        """
        return pulumi.get(self, "basic_security_type")

    @property
    @pulumi.getter(name="chargePeriod")
    def charge_period(self) -> pulumi.Output[Optional[int]]:
        """
        The tenancy of the prepaid instance, and uint is month. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "charge_period")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="cosBackup")
    def cos_backup(self) -> pulumi.Output[Optional['outputs.InstanceCosBackup']]:
        """
        COS automatic backup information.
        """
        return pulumi.get(self, "cos_backup")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Instance creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> pulumi.Output[Optional[int]]:
        """
        Cluster deployment mode. Valid values are `0` and `1`. `0` is single-AZ deployment, and `1` is multi-AZ deployment. Default value is `0`.
        """
        return pulumi.get(self, "deploy_mode")

    @property
    @pulumi.getter(name="elasticsearchDomain")
    def elasticsearch_domain(self) -> pulumi.Output[str]:
        """
        Elasticsearch domain name.
        """
        return pulumi.get(self, "elasticsearch_domain")

    @property
    @pulumi.getter(name="elasticsearchPort")
    def elasticsearch_port(self) -> pulumi.Output[int]:
        """
        Elasticsearch port.
        """
        return pulumi.get(self, "elasticsearch_port")

    @property
    @pulumi.getter(name="elasticsearchVip")
    def elasticsearch_vip(self) -> pulumi.Output[str]:
        """
        Elasticsearch VIP.
        """
        return pulumi.get(self, "elasticsearch_vip")

    @property
    @pulumi.getter(name="esAcl")
    def es_acl(self) -> pulumi.Output['outputs.InstanceEsAcl']:
        """
        Kibana Access Control Configuration.
        """
        return pulumi.get(self, "es_acl")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the instance, which can contain 1 to 50 English letters, Chinese characters, digits, dashes(-), or underscores(_).
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="kibanaPublicAccess")
    def kibana_public_access(self) -> pulumi.Output[str]:
        """
        Kibana public network access status. Valid values are `OPEN` and `CLOSE`.
        """
        return pulumi.get(self, "kibana_public_access")

    @property
    @pulumi.getter(name="kibanaUrl")
    def kibana_url(self) -> pulumi.Output[str]:
        """
        Kibana access URL.
        """
        return pulumi.get(self, "kibana_url")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Output[Optional[str]]:
        """
        License type. Valid values are `oss`, `basic` and `platinum`. The default value is `platinum`.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="multiZoneInfos")
    def multi_zone_infos(self) -> pulumi.Output[Sequence['outputs.InstanceMultiZoneInfo']]:
        """
        Details of AZs in multi-AZ deployment mode (which is required when deploy_mode is `1`).
        """
        return pulumi.get(self, "multi_zone_infos")

    @property
    @pulumi.getter(name="nodeInfoLists")
    def node_info_lists(self) -> pulumi.Output[Sequence['outputs.InstanceNodeInfoList']]:
        """
        Node information list, which is used to describe the specification information of various types of nodes in the cluster, such as node type, node quantity, node specification, disk type, and disk size.
        """
        return pulumi.get(self, "node_info_lists")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password to an instance, the password needs to be 8 to 16 characters, including at least two items ([a-z,A-Z], [0-9] and [-!@#$%&^*+=_:;,.?] special symbols.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> pulumi.Output[Optional[str]]:
        """
        When enabled, the instance will be renew automatically when it reach the end of the prepaid tenancy. Valid values are `RENEW_FLAG_AUTO` and `RENEW_FLAG_MANUAL`. NOTE: it only works when charge_type is set to `PREPAID`.
        """
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of a VPC subnetwork. When create multi-az es, this parameter must be omitted or `-`.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        A mapping of tags to assign to the instance. For tag limits, please refer to [Use Limits](https://intl.cloud.tencent.com/document/product/651/13354).
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Version of the instance. Valid values are `5.6.4`, `6.4.3`, `6.8.2`, `7.5.1` and `7.10.1`.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The ID of a VPC network.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="webNodeTypeInfos")
    def web_node_type_infos(self) -> pulumi.Output[Sequence['outputs.InstanceWebNodeTypeInfo']]:
        """
        Visual node configuration.
        """
        return pulumi.get(self, "web_node_type_infos")

