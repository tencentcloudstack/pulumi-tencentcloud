# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TrackArgs', 'Track']

@pulumi.input_type
class TrackArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 event_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resource_type: pulumi.Input[str],
                 status: pulumi.Input[int],
                 storage: pulumi.Input['TrackStorageArgs'],
                 name: Optional[pulumi.Input[str]] = None,
                 track_for_all_members: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Track resource.
        :param pulumi.Input[str] action_type: Track interface type, optional:- `Read`: Read interface- `Write`: Write interface- `*`: All interface.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_names: Track interface name list:- when ResourceType is `*`, EventNames is must `[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support all interface:`[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support some interface, up to 10.
        :param pulumi.Input[str] resource_type: Track product, optional:- `*`: All product- Single product, such as `cos`.
        :param pulumi.Input[int] status: Track status, optional:- `0`: Close- `1`: Open.
        :param pulumi.Input['TrackStorageArgs'] storage: Track Storage, support `cos` and `cls`.
        :param pulumi.Input[str] name: Track name.
        :param pulumi.Input[int] track_for_all_members: Whether to enable the delivery of group member operation logs to the group management account or trusted service management account, optional:- `0`: Close- `1`: Open.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "event_names", event_names)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage", storage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if track_for_all_members is not None:
            pulumi.set(__self__, "track_for_all_members", track_for_all_members)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        """
        Track interface type, optional:- `Read`: Read interface- `Write`: Write interface- `*`: All interface.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="eventNames")
    def event_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Track interface name list:- when ResourceType is `*`, EventNames is must `[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support all interface:`[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support some interface, up to 10.
        """
        return pulumi.get(self, "event_names")

    @event_names.setter
    def event_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "event_names", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Track product, optional:- `*`: All product- Single product, such as `cos`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[int]:
        """
        Track status, optional:- `0`: Close- `1`: Open.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[int]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input['TrackStorageArgs']:
        """
        Track Storage, support `cos` and `cls`.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input['TrackStorageArgs']):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Track name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="trackForAllMembers")
    def track_for_all_members(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the delivery of group member operation logs to the group management account or trusted service management account, optional:- `0`: Close- `1`: Open.
        """
        return pulumi.get(self, "track_for_all_members")

    @track_for_all_members.setter
    def track_for_all_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "track_for_all_members", value)


@pulumi.input_type
class _TrackState:
    def __init__(__self__, *,
                 action_type: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 event_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input['TrackStorageArgs']] = None,
                 track_for_all_members: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Track resources.
        :param pulumi.Input[str] action_type: Track interface type, optional:- `Read`: Read interface- `Write`: Write interface- `*`: All interface.
        :param pulumi.Input[str] create_time: Track create time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_names: Track interface name list:- when ResourceType is `*`, EventNames is must `[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support all interface:`[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support some interface, up to 10.
        :param pulumi.Input[str] name: Track name.
        :param pulumi.Input[str] resource_type: Track product, optional:- `*`: All product- Single product, such as `cos`.
        :param pulumi.Input[int] status: Track status, optional:- `0`: Close- `1`: Open.
        :param pulumi.Input['TrackStorageArgs'] storage: Track Storage, support `cos` and `cls`.
        :param pulumi.Input[int] track_for_all_members: Whether to enable the delivery of group member operation logs to the group management account or trusted service management account, optional:- `0`: Close- `1`: Open.
        """
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if event_names is not None:
            pulumi.set(__self__, "event_names", event_names)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if track_for_all_members is not None:
            pulumi.set(__self__, "track_for_all_members", track_for_all_members)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[str]]:
        """
        Track interface type, optional:- `Read`: Read interface- `Write`: Write interface- `*`: All interface.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Track create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="eventNames")
    def event_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Track interface name list:- when ResourceType is `*`, EventNames is must `[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support all interface:`[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support some interface, up to 10.
        """
        return pulumi.get(self, "event_names")

    @event_names.setter
    def event_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "event_names", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Track name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Track product, optional:- `*`: All product- Single product, such as `cos`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Track status, optional:- `0`: Close- `1`: Open.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input['TrackStorageArgs']]:
        """
        Track Storage, support `cos` and `cls`.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input['TrackStorageArgs']]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="trackForAllMembers")
    def track_for_all_members(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable the delivery of group member operation logs to the group management account or trusted service management account, optional:- `0`: Close- `1`: Open.
        """
        return pulumi.get(self, "track_for_all_members")

    @track_for_all_members.setter
    def track_for_all_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "track_for_all_members", value)


class Track(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_type: Optional[pulumi.Input[str]] = None,
                 event_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['TrackStorageArgs']]] = None,
                 track_for_all_members: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a audit track

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.audit.Track("example",
            action_type="Read",
            event_names=["*"],
            resource_type="*",
            status=1,
            storage=tencentcloud.audit.TrackStorageArgs(
                storage_name="db90b92c-91d2-46b0-94ac-debbbb21dc4e",
                storage_prefix="cloudaudit",
                storage_region="ap-guangzhou",
                storage_type="cls",
            ),
            track_for_all_members=0)
        ```
        <!--End PulumiCodeChooser -->

        ### Specify storage user

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.audit.Track("example",
            action_type="Read",
            event_names=["*"],
            resource_type="*",
            status=1,
            storage=tencentcloud.audit.TrackStorageArgs(
                storage_account_id="100037717137",
                storage_app_id="1309116520",
                storage_name="db90b92c-91d2-46b0-94ac-debbbb21dc4e",
                storage_prefix="cloudaudit",
                storage_region="ap-guangzhou",
                storage_type="cos",
            ),
            track_for_all_members=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        audit track can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Audit/track:Track example 24283
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action_type: Track interface type, optional:- `Read`: Read interface- `Write`: Write interface- `*`: All interface.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_names: Track interface name list:- when ResourceType is `*`, EventNames is must `[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support all interface:`[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support some interface, up to 10.
        :param pulumi.Input[str] name: Track name.
        :param pulumi.Input[str] resource_type: Track product, optional:- `*`: All product- Single product, such as `cos`.
        :param pulumi.Input[int] status: Track status, optional:- `0`: Close- `1`: Open.
        :param pulumi.Input[pulumi.InputType['TrackStorageArgs']] storage: Track Storage, support `cos` and `cls`.
        :param pulumi.Input[int] track_for_all_members: Whether to enable the delivery of group member operation logs to the group management account or trusted service management account, optional:- `0`: Close- `1`: Open.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TrackArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a audit track

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.audit.Track("example",
            action_type="Read",
            event_names=["*"],
            resource_type="*",
            status=1,
            storage=tencentcloud.audit.TrackStorageArgs(
                storage_name="db90b92c-91d2-46b0-94ac-debbbb21dc4e",
                storage_prefix="cloudaudit",
                storage_region="ap-guangzhou",
                storage_type="cls",
            ),
            track_for_all_members=0)
        ```
        <!--End PulumiCodeChooser -->

        ### Specify storage user

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.audit.Track("example",
            action_type="Read",
            event_names=["*"],
            resource_type="*",
            status=1,
            storage=tencentcloud.audit.TrackStorageArgs(
                storage_account_id="100037717137",
                storage_app_id="1309116520",
                storage_name="db90b92c-91d2-46b0-94ac-debbbb21dc4e",
                storage_prefix="cloudaudit",
                storage_region="ap-guangzhou",
                storage_type="cos",
            ),
            track_for_all_members=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        audit track can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Audit/track:Track example 24283
        ```

        :param str resource_name: The name of the resource.
        :param TrackArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrackArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_type: Optional[pulumi.Input[str]] = None,
                 event_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[pulumi.InputType['TrackStorageArgs']]] = None,
                 track_for_all_members: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrackArgs.__new__(TrackArgs)

            if action_type is None and not opts.urn:
                raise TypeError("Missing required property 'action_type'")
            __props__.__dict__["action_type"] = action_type
            if event_names is None and not opts.urn:
                raise TypeError("Missing required property 'event_names'")
            __props__.__dict__["event_names"] = event_names
            __props__.__dict__["name"] = name
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["track_for_all_members"] = track_for_all_members
            __props__.__dict__["create_time"] = None
        super(Track, __self__).__init__(
            'tencentcloud:Audit/track:Track',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_type: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            event_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            storage: Optional[pulumi.Input[pulumi.InputType['TrackStorageArgs']]] = None,
            track_for_all_members: Optional[pulumi.Input[int]] = None) -> 'Track':
        """
        Get an existing Track resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action_type: Track interface type, optional:- `Read`: Read interface- `Write`: Write interface- `*`: All interface.
        :param pulumi.Input[str] create_time: Track create time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] event_names: Track interface name list:- when ResourceType is `*`, EventNames is must `[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support all interface:`[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support some interface, up to 10.
        :param pulumi.Input[str] name: Track name.
        :param pulumi.Input[str] resource_type: Track product, optional:- `*`: All product- Single product, such as `cos`.
        :param pulumi.Input[int] status: Track status, optional:- `0`: Close- `1`: Open.
        :param pulumi.Input[pulumi.InputType['TrackStorageArgs']] storage: Track Storage, support `cos` and `cls`.
        :param pulumi.Input[int] track_for_all_members: Whether to enable the delivery of group member operation logs to the group management account or trusted service management account, optional:- `0`: Close- `1`: Open.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TrackState.__new__(_TrackState)

        __props__.__dict__["action_type"] = action_type
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["event_names"] = event_names
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        __props__.__dict__["storage"] = storage
        __props__.__dict__["track_for_all_members"] = track_for_all_members
        return Track(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Output[str]:
        """
        Track interface type, optional:- `Read`: Read interface- `Write`: Write interface- `*`: All interface.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Track create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="eventNames")
    def event_names(self) -> pulumi.Output[Sequence[str]]:
        """
        Track interface name list:- when ResourceType is `*`, EventNames is must `[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support all interface:`[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support some interface, up to 10.
        """
        return pulumi.get(self, "event_names")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Track name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        Track product, optional:- `*`: All product- Single product, such as `cos`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Track status, optional:- `0`: Close- `1`: Open.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output['outputs.TrackStorage']:
        """
        Track Storage, support `cos` and `cls`.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="trackForAllMembers")
    def track_for_all_members(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable the delivery of group member operation logs to the group management account or trusted service management account, optional:- `0`: Close- `1`: Open.
        """
        return pulumi.get(self, "track_for_all_members")

