# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEventsResult',
    'AwaitableGetEventsResult',
    'get_events',
    'get_events_output',
]

@pulumi.output_type
class GetEventsResult:
    """
    A collection of values returned by getEvents.
    """
    def __init__(__self__, end_time=None, events=None, id=None, is_return_location=None, lookup_attributes=None, max_results=None, result_output_file=None, start_time=None):
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if events and not isinstance(events, list):
            raise TypeError("Expected argument 'events' to be a list")
        pulumi.set(__self__, "events", events)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_return_location and not isinstance(is_return_location, int):
            raise TypeError("Expected argument 'is_return_location' to be a int")
        pulumi.set(__self__, "is_return_location", is_return_location)
        if lookup_attributes and not isinstance(lookup_attributes, list):
            raise TypeError("Expected argument 'lookup_attributes' to be a list")
        pulumi.set(__self__, "lookup_attributes", lookup_attributes)
        if max_results and not isinstance(max_results, int):
            raise TypeError("Expected argument 'max_results' to be a int")
        pulumi.set(__self__, "max_results", max_results)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def events(self) -> Sequence['outputs.GetEventsEventResult']:
        """
        Logset. Note: `null` may be returned for this field, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isReturnLocation")
    def is_return_location(self) -> Optional[int]:
        return pulumi.get(self, "is_return_location")

    @property
    @pulumi.getter(name="lookupAttributes")
    def lookup_attributes(self) -> Optional[Sequence['outputs.GetEventsLookupAttributeResult']]:
        return pulumi.get(self, "lookup_attributes")

    @property
    @pulumi.getter(name="maxResults")
    def max_results(self) -> Optional[int]:
        return pulumi.get(self, "max_results")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")


class AwaitableGetEventsResult(GetEventsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventsResult(
            end_time=self.end_time,
            events=self.events,
            id=self.id,
            is_return_location=self.is_return_location,
            lookup_attributes=self.lookup_attributes,
            max_results=self.max_results,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_events(end_time: Optional[int] = None,
               is_return_location: Optional[int] = None,
               lookup_attributes: Optional[Sequence[pulumi.InputType['GetEventsLookupAttributeArgs']]] = None,
               max_results: Optional[int] = None,
               result_output_file: Optional[str] = None,
               start_time: Optional[int] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventsResult:
    """
    Use this data source to query the events list supported by the audit.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    events = tencentcloud.Audit.get_events(end_time=1727437441,
        is_return_location=1,
        lookup_attributes=[
            tencentcloud.audit.GetEventsLookupAttributeArgs(
                attribute_key="ResourceType",
                attribute_value="cvm",
            ),
            tencentcloud.audit.GetEventsLookupAttributeArgs(
                attribute_key="OnlyRecordNotSeen",
                attribute_value="0",
            ),
            tencentcloud.audit.GetEventsLookupAttributeArgs(
                attribute_key="EventPlatform",
                attribute_value="0",
            ),
        ],
        max_results=50,
        start_time=1727433841)
    ```
    <!--End PulumiCodeChooser -->


    :param int end_time: End timestamp in seconds (the time range for query is less than 30 days).
    :param int is_return_location: Whether to return the IP location. `1`: yes, `0`: no.
    :param Sequence[pulumi.InputType['GetEventsLookupAttributeArgs']] lookup_attributes: Search condition. Valid values: `RequestId`, `EventName`, `ActionType` (write/read), `PrincipalId` (sub-account), `ResourceType`, `ResourceName`, `AccessKeyId`, `SensitiveAction`, `ApiErrorCode`, `CamErrorCode`, and `Tags` (Format of AttributeValue: [{"key":"*","value":"*"}]).
    :param int max_results: Max number of returned logs (up to 50).
    :param str result_output_file: Used to save results.
    :param int start_time: Start timestamp in seconds (cannot be 90 days after the current time).
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['isReturnLocation'] = is_return_location
    __args__['lookupAttributes'] = lookup_attributes
    __args__['maxResults'] = max_results
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Audit/getEvents:getEvents', __args__, opts=opts, typ=GetEventsResult).value

    return AwaitableGetEventsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        events=pulumi.get(__ret__, 'events'),
        id=pulumi.get(__ret__, 'id'),
        is_return_location=pulumi.get(__ret__, 'is_return_location'),
        lookup_attributes=pulumi.get(__ret__, 'lookup_attributes'),
        max_results=pulumi.get(__ret__, 'max_results'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_events)
def get_events_output(end_time: Optional[pulumi.Input[int]] = None,
                      is_return_location: Optional[pulumi.Input[Optional[int]]] = None,
                      lookup_attributes: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetEventsLookupAttributeArgs']]]]] = None,
                      max_results: Optional[pulumi.Input[Optional[int]]] = None,
                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      start_time: Optional[pulumi.Input[int]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEventsResult]:
    """
    Use this data source to query the events list supported by the audit.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    events = tencentcloud.Audit.get_events(end_time=1727437441,
        is_return_location=1,
        lookup_attributes=[
            tencentcloud.audit.GetEventsLookupAttributeArgs(
                attribute_key="ResourceType",
                attribute_value="cvm",
            ),
            tencentcloud.audit.GetEventsLookupAttributeArgs(
                attribute_key="OnlyRecordNotSeen",
                attribute_value="0",
            ),
            tencentcloud.audit.GetEventsLookupAttributeArgs(
                attribute_key="EventPlatform",
                attribute_value="0",
            ),
        ],
        max_results=50,
        start_time=1727433841)
    ```
    <!--End PulumiCodeChooser -->


    :param int end_time: End timestamp in seconds (the time range for query is less than 30 days).
    :param int is_return_location: Whether to return the IP location. `1`: yes, `0`: no.
    :param Sequence[pulumi.InputType['GetEventsLookupAttributeArgs']] lookup_attributes: Search condition. Valid values: `RequestId`, `EventName`, `ActionType` (write/read), `PrincipalId` (sub-account), `ResourceType`, `ResourceName`, `AccessKeyId`, `SensitiveAction`, `ApiErrorCode`, `CamErrorCode`, and `Tags` (Format of AttributeValue: [{"key":"*","value":"*"}]).
    :param int max_results: Max number of returned logs (up to 50).
    :param str result_output_file: Used to save results.
    :param int start_time: Start timestamp in seconds (cannot be 90 days after the current time).
    """
    ...
