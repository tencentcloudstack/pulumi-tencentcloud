# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 memory: pulumi.Input[int],
                 storage: pulumi.Input[int],
                 auto_renew: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 ha_type: Optional[pulumi.Input[str]] = None,
                 maintenance_start_time: Optional[pulumi.Input[str]] = None,
                 maintenance_time_span: Optional[pulumi.Input[int]] = None,
                 maintenance_week_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 multi_zones: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[int] memory: Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos` provides.
        :param pulumi.Input[int] storage: Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
        :param pulumi.Input[int] auto_renew: Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
        :param pulumi.Input[int] auto_voucher: Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
        :param pulumi.Input[str] availability_zone: Availability zone.
        :param pulumi.Input[str] charge_type: Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
        :param pulumi.Input[str] engine_version: Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
        :param pulumi.Input[str] ha_type: It has been deprecated from version 1.81.136. Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster). Default is `DUAL`.
        :param pulumi.Input[str] maintenance_start_time: Start time of the maintenance in one day, format like `HH:mm`.
        :param pulumi.Input[int] maintenance_time_span: The timespan of maintenance in one day, unit is hour.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] maintenance_week_sets: A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
        :param pulumi.Input[bool] multi_zones: Indicate whether to deploy across availability zones.
        :param pulumi.Input[str] name: Name of the SQL Server instance.
        :param pulumi.Input[int] period: Purchase instance period in month. The value does not exceed 48.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security group bound to the instance.
        :param pulumi.Input[str] subnet_id: ID of subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the SQL Server.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: An array of voucher IDs, currently only one can be used for a single order.
        :param pulumi.Input[str] vpc_id: ID of VPC.
        :param pulumi.Input[int] wait_switch: It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
        """
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "storage", storage)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if ha_type is not None:
            warnings.warn("""It has been deprecated from version 1.81.136.""", DeprecationWarning)
            pulumi.log.warn("""ha_type is deprecated: It has been deprecated from version 1.81.136.""")
        if ha_type is not None:
            pulumi.set(__self__, "ha_type", ha_type)
        if maintenance_start_time is not None:
            pulumi.set(__self__, "maintenance_start_time", maintenance_start_time)
        if maintenance_time_span is not None:
            pulumi.set(__self__, "maintenance_time_span", maintenance_time_span)
        if maintenance_week_sets is not None:
            pulumi.set(__self__, "maintenance_week_sets", maintenance_week_sets)
        if multi_zones is not None:
            pulumi.set(__self__, "multi_zones", multi_zones)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if voucher_ids is not None:
            pulumi.set(__self__, "voucher_ids", voucher_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if wait_switch is not None:
            warnings.warn("""It has been deprecated from version 1.81.2.""", DeprecationWarning)
            pulumi.log.warn("""wait_switch is deprecated: It has been deprecated from version 1.81.2.""")
        if wait_switch is not None:
            pulumi.set(__self__, "wait_switch", wait_switch)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        """
        Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos` provides.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[int]:
        """
        Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> Optional[pulumi.Input[str]]:
        """
        It has been deprecated from version 1.81.136. Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster). Default is `DUAL`.
        """
        warnings.warn("""It has been deprecated from version 1.81.136.""", DeprecationWarning)
        pulumi.log.warn("""ha_type is deprecated: It has been deprecated from version 1.81.136.""")

        return pulumi.get(self, "ha_type")

    @ha_type.setter
    def ha_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_type", value)

    @property
    @pulumi.getter(name="maintenanceStartTime")
    def maintenance_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Start time of the maintenance in one day, format like `HH:mm`.
        """
        return pulumi.get(self, "maintenance_start_time")

    @maintenance_start_time.setter
    def maintenance_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_start_time", value)

    @property
    @pulumi.getter(name="maintenanceTimeSpan")
    def maintenance_time_span(self) -> Optional[pulumi.Input[int]]:
        """
        The timespan of maintenance in one day, unit is hour.
        """
        return pulumi.get(self, "maintenance_time_span")

    @maintenance_time_span.setter
    def maintenance_time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maintenance_time_span", value)

    @property
    @pulumi.getter(name="maintenanceWeekSets")
    def maintenance_week_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
        """
        return pulumi.get(self, "maintenance_week_sets")

    @maintenance_week_sets.setter
    def maintenance_week_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "maintenance_week_sets", value)

    @property
    @pulumi.getter(name="multiZones")
    def multi_zones(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to deploy across availability zones.
        """
        return pulumi.get(self, "multi_zones")

    @multi_zones.setter
    def multi_zones(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_zones", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the SQL Server instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase instance period in month. The value does not exceed 48.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group bound to the instance.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of the SQL Server.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of voucher IDs, currently only one can be used for a single order.
        """
        return pulumi.get(self, "voucher_ids")

    @voucher_ids.setter
    def voucher_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "voucher_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
        """
        warnings.warn("""It has been deprecated from version 1.81.2.""", DeprecationWarning)
        pulumi.log.warn("""wait_switch is deprecated: It has been deprecated from version 1.81.2.""")

        return pulumi.get(self, "wait_switch")

    @wait_switch.setter
    def wait_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_switch", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 auto_renew: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 ha_type: Optional[pulumi.Input[str]] = None,
                 maintenance_start_time: Optional[pulumi.Input[str]] = None,
                 maintenance_time_span: Optional[pulumi.Input[int]] = None,
                 maintenance_week_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 multi_zones: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 ro_flag: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[int] auto_renew: Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
        :param pulumi.Input[int] auto_voucher: Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
        :param pulumi.Input[str] availability_zone: Availability zone.
        :param pulumi.Input[str] charge_type: Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
        :param pulumi.Input[str] create_time: Create time of the SQL Server instance.
        :param pulumi.Input[str] engine_version: Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
        :param pulumi.Input[str] ha_type: It has been deprecated from version 1.81.136. Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster). Default is `DUAL`.
        :param pulumi.Input[str] maintenance_start_time: Start time of the maintenance in one day, format like `HH:mm`.
        :param pulumi.Input[int] maintenance_time_span: The timespan of maintenance in one day, unit is hour.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] maintenance_week_sets: A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
        :param pulumi.Input[int] memory: Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos` provides.
        :param pulumi.Input[bool] multi_zones: Indicate whether to deploy across availability zones.
        :param pulumi.Input[str] name: Name of the SQL Server instance.
        :param pulumi.Input[int] period: Purchase instance period in month. The value does not exceed 48.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[str] ro_flag: Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security group bound to the instance.
        :param pulumi.Input[int] status: Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
        :param pulumi.Input[int] storage: Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
        :param pulumi.Input[str] subnet_id: ID of subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the SQL Server.
        :param pulumi.Input[str] vip: IP for private access.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: An array of voucher IDs, currently only one can be used for a single order.
        :param pulumi.Input[str] vpc_id: ID of VPC.
        :param pulumi.Input[int] vport: Port for private access.
        :param pulumi.Input[int] wait_switch: It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
        """
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if ha_type is not None:
            warnings.warn("""It has been deprecated from version 1.81.136.""", DeprecationWarning)
            pulumi.log.warn("""ha_type is deprecated: It has been deprecated from version 1.81.136.""")
        if ha_type is not None:
            pulumi.set(__self__, "ha_type", ha_type)
        if maintenance_start_time is not None:
            pulumi.set(__self__, "maintenance_start_time", maintenance_start_time)
        if maintenance_time_span is not None:
            pulumi.set(__self__, "maintenance_time_span", maintenance_time_span)
        if maintenance_week_sets is not None:
            pulumi.set(__self__, "maintenance_week_sets", maintenance_week_sets)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if multi_zones is not None:
            pulumi.set(__self__, "multi_zones", multi_zones)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if ro_flag is not None:
            pulumi.set(__self__, "ro_flag", ro_flag)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if voucher_ids is not None:
            pulumi.set(__self__, "voucher_ids", voucher_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)
        if wait_switch is not None:
            warnings.warn("""It has been deprecated from version 1.81.2.""", DeprecationWarning)
            pulumi.log.warn("""wait_switch is deprecated: It has been deprecated from version 1.81.2.""")
        if wait_switch is not None:
            pulumi.set(__self__, "wait_switch", wait_switch)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the SQL Server instance.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> Optional[pulumi.Input[str]]:
        """
        It has been deprecated from version 1.81.136. Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster). Default is `DUAL`.
        """
        warnings.warn("""It has been deprecated from version 1.81.136.""", DeprecationWarning)
        pulumi.log.warn("""ha_type is deprecated: It has been deprecated from version 1.81.136.""")

        return pulumi.get(self, "ha_type")

    @ha_type.setter
    def ha_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_type", value)

    @property
    @pulumi.getter(name="maintenanceStartTime")
    def maintenance_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Start time of the maintenance in one day, format like `HH:mm`.
        """
        return pulumi.get(self, "maintenance_start_time")

    @maintenance_start_time.setter
    def maintenance_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_start_time", value)

    @property
    @pulumi.getter(name="maintenanceTimeSpan")
    def maintenance_time_span(self) -> Optional[pulumi.Input[int]]:
        """
        The timespan of maintenance in one day, unit is hour.
        """
        return pulumi.get(self, "maintenance_time_span")

    @maintenance_time_span.setter
    def maintenance_time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maintenance_time_span", value)

    @property
    @pulumi.getter(name="maintenanceWeekSets")
    def maintenance_week_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
        """
        return pulumi.get(self, "maintenance_week_sets")

    @maintenance_week_sets.setter
    def maintenance_week_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "maintenance_week_sets", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos` provides.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="multiZones")
    def multi_zones(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to deploy across availability zones.
        """
        return pulumi.get(self, "multi_zones")

    @multi_zones.setter
    def multi_zones(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_zones", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the SQL Server instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase instance period in month. The value does not exceed 48.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="roFlag")
    def ro_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
        """
        return pulumi.get(self, "ro_flag")

    @ro_flag.setter
    def ro_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ro_flag", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group bound to the instance.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        """
        Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The tags of the SQL Server.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        IP for private access.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of voucher IDs, currently only one can be used for a single order.
        """
        return pulumi.get(self, "voucher_ids")

    @voucher_ids.setter
    def voucher_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "voucher_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[int]]:
        """
        Port for private access.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vport", value)

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
        """
        warnings.warn("""It has been deprecated from version 1.81.2.""", DeprecationWarning)
        pulumi.log.warn("""wait_switch is deprecated: It has been deprecated from version 1.81.2.""")

        return pulumi.get(self, "wait_switch")

    @wait_switch.setter
    def wait_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_switch", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 ha_type: Optional[pulumi.Input[str]] = None,
                 maintenance_start_time: Optional[pulumi.Input[str]] = None,
                 maintenance_time_span: Optional[pulumi.Input[int]] = None,
                 maintenance_week_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 multi_zones: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Use this resource to create SQL Server instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        example = tencentcloud.sqlserver.Instance("example",
            availability_zone=zones.zones[4].name,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            project_id=0,
            memory=16,
            storage=100)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SQL Server instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/instance:Instance example mssql-3cdq7kx5
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew: Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
        :param pulumi.Input[int] auto_voucher: Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
        :param pulumi.Input[str] availability_zone: Availability zone.
        :param pulumi.Input[str] charge_type: Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
        :param pulumi.Input[str] engine_version: Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
        :param pulumi.Input[str] ha_type: It has been deprecated from version 1.81.136. Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster). Default is `DUAL`.
        :param pulumi.Input[str] maintenance_start_time: Start time of the maintenance in one day, format like `HH:mm`.
        :param pulumi.Input[int] maintenance_time_span: The timespan of maintenance in one day, unit is hour.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] maintenance_week_sets: A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
        :param pulumi.Input[int] memory: Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos` provides.
        :param pulumi.Input[bool] multi_zones: Indicate whether to deploy across availability zones.
        :param pulumi.Input[str] name: Name of the SQL Server instance.
        :param pulumi.Input[int] period: Purchase instance period in month. The value does not exceed 48.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security group bound to the instance.
        :param pulumi.Input[int] storage: Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
        :param pulumi.Input[str] subnet_id: ID of subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the SQL Server.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: An array of voucher IDs, currently only one can be used for a single order.
        :param pulumi.Input[str] vpc_id: ID of VPC.
        :param pulumi.Input[int] wait_switch: It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create SQL Server instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        example = tencentcloud.sqlserver.Instance("example",
            availability_zone=zones.zones[4].name,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            project_id=0,
            memory=16,
            storage=100)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SQL Server instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/instance:Instance example mssql-3cdq7kx5
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 ha_type: Optional[pulumi.Input[str]] = None,
                 maintenance_start_time: Optional[pulumi.Input[str]] = None,
                 maintenance_time_span: Optional[pulumi.Input[int]] = None,
                 maintenance_week_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 multi_zones: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["auto_renew"] = auto_renew
            __props__.__dict__["auto_voucher"] = auto_voucher
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["ha_type"] = ha_type
            __props__.__dict__["maintenance_start_time"] = maintenance_start_time
            __props__.__dict__["maintenance_time_span"] = maintenance_time_span
            __props__.__dict__["maintenance_week_sets"] = maintenance_week_sets
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            __props__.__dict__["multi_zones"] = multi_zones
            __props__.__dict__["name"] = name
            __props__.__dict__["period"] = period
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["security_groups"] = security_groups
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["voucher_ids"] = voucher_ids
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["wait_switch"] = wait_switch
            __props__.__dict__["create_time"] = None
            __props__.__dict__["ro_flag"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vip"] = None
            __props__.__dict__["vport"] = None
        super(Instance, __self__).__init__(
            'tencentcloud:Sqlserver/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew: Optional[pulumi.Input[int]] = None,
            auto_voucher: Optional[pulumi.Input[int]] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            engine_version: Optional[pulumi.Input[str]] = None,
            ha_type: Optional[pulumi.Input[str]] = None,
            maintenance_start_time: Optional[pulumi.Input[str]] = None,
            maintenance_time_span: Optional[pulumi.Input[int]] = None,
            maintenance_week_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            multi_zones: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            ro_flag: Optional[pulumi.Input[str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[int]] = None,
            storage: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vport: Optional[pulumi.Input[int]] = None,
            wait_switch: Optional[pulumi.Input[int]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew: Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
        :param pulumi.Input[int] auto_voucher: Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
        :param pulumi.Input[str] availability_zone: Availability zone.
        :param pulumi.Input[str] charge_type: Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
        :param pulumi.Input[str] create_time: Create time of the SQL Server instance.
        :param pulumi.Input[str] engine_version: Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
        :param pulumi.Input[str] ha_type: It has been deprecated from version 1.81.136. Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster). Default is `DUAL`.
        :param pulumi.Input[str] maintenance_start_time: Start time of the maintenance in one day, format like `HH:mm`.
        :param pulumi.Input[int] maintenance_time_span: The timespan of maintenance in one day, unit is hour.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] maintenance_week_sets: A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
        :param pulumi.Input[int] memory: Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos` provides.
        :param pulumi.Input[bool] multi_zones: Indicate whether to deploy across availability zones.
        :param pulumi.Input[str] name: Name of the SQL Server instance.
        :param pulumi.Input[int] period: Purchase instance period in month. The value does not exceed 48.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[str] ro_flag: Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security group bound to the instance.
        :param pulumi.Input[int] status: Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
        :param pulumi.Input[int] storage: Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
        :param pulumi.Input[str] subnet_id: ID of subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The tags of the SQL Server.
        :param pulumi.Input[str] vip: IP for private access.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: An array of voucher IDs, currently only one can be used for a single order.
        :param pulumi.Input[str] vpc_id: ID of VPC.
        :param pulumi.Input[int] vport: Port for private access.
        :param pulumi.Input[int] wait_switch: It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["auto_voucher"] = auto_voucher
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["ha_type"] = ha_type
        __props__.__dict__["maintenance_start_time"] = maintenance_start_time
        __props__.__dict__["maintenance_time_span"] = maintenance_time_span
        __props__.__dict__["maintenance_week_sets"] = maintenance_week_sets
        __props__.__dict__["memory"] = memory
        __props__.__dict__["multi_zones"] = multi_zones
        __props__.__dict__["name"] = name
        __props__.__dict__["period"] = period
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["ro_flag"] = ro_flag
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["status"] = status
        __props__.__dict__["storage"] = storage
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vip"] = vip
        __props__.__dict__["voucher_ids"] = voucher_ids
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vport"] = vport
        __props__.__dict__["wait_switch"] = wait_switch
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[int]]:
        """
        Automatic renewal sign. 0 for normal renewal, 1 for automatic renewal (Default). Only valid when purchasing a prepaid instance.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
        """
        return pulumi.get(self, "auto_voucher")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        """
        Availability zone.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of the SQL Server instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[Optional[str]]:
        """
        Version of the SQL Server database engine. Allowed values are `2008R2`(SQL Server 2008 Enterprise), `2012SP3`(SQL Server 2012 Enterprise), `2016SP1` (SQL Server 2016 Enterprise), `201602`(SQL Server 2016 Standard) and `2017`(SQL Server 2017 Enterprise). Default is `2008R2`.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> pulumi.Output[Optional[str]]:
        """
        It has been deprecated from version 1.81.136. Instance type. `DUAL` (dual-server high availability), `CLUSTER` (cluster). Default is `DUAL`.
        """
        warnings.warn("""It has been deprecated from version 1.81.136.""", DeprecationWarning)
        pulumi.log.warn("""ha_type is deprecated: It has been deprecated from version 1.81.136.""")

        return pulumi.get(self, "ha_type")

    @property
    @pulumi.getter(name="maintenanceStartTime")
    def maintenance_start_time(self) -> pulumi.Output[str]:
        """
        Start time of the maintenance in one day, format like `HH:mm`.
        """
        return pulumi.get(self, "maintenance_start_time")

    @property
    @pulumi.getter(name="maintenanceTimeSpan")
    def maintenance_time_span(self) -> pulumi.Output[int]:
        """
        The timespan of maintenance in one day, unit is hour.
        """
        return pulumi.get(self, "maintenance_time_span")

    @property
    @pulumi.getter(name="maintenanceWeekSets")
    def maintenance_week_sets(self) -> pulumi.Output[Sequence[int]]:
        """
        A list of integer indicates weekly maintenance. For example, [2,7] presents do weekly maintenance on every Tuesday and Sunday.
        """
        return pulumi.get(self, "maintenance_week_sets")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos` provides.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="multiZones")
    def multi_zones(self) -> pulumi.Output[bool]:
        """
        Indicate whether to deploy across availability zones.
        """
        return pulumi.get(self, "multi_zones")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the SQL Server instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        Purchase instance period in month. The value does not exceed 48.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="roFlag")
    def ro_flag(self) -> pulumi.Output[str]:
        """
        Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
        """
        return pulumi.get(self, "ro_flag")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security group bound to the instance.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[int]:
        """
        Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The tags of the SQL Server.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        IP for private access.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        An array of voucher IDs, currently only one can be used for a single order.
        """
        return pulumi.get(self, "voucher_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of VPC.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> pulumi.Output[int]:
        """
        Port for private access.
        """
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> pulumi.Output[Optional[int]]:
        """
        It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
        """
        warnings.warn("""It has been deprecated from version 1.81.2.""", DeprecationWarning)
        pulumi.log.warn("""wait_switch is deprecated: It has been deprecated from version 1.81.2.""")

        return pulumi.get(self, "wait_switch")

