# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['Layer7ListenerArgs', 'Layer7Listener']

@pulumi.input_type
class Layer7ListenerArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[int]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 client_certificate_id: Optional[pulumi.Input[str]] = None,
                 client_certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forward_protocol: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 tls_ciphers: Optional[pulumi.Input[str]] = None,
                 tls_support_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Layer7Listener resource.
        :param pulumi.Input[int] port: Port of the layer7 listener.
        :param pulumi.Input[str] protocol: Protocol of the layer7 listener. Valid value: `HTTP` and `HTTPS`.
        :param pulumi.Input[int] auth_type: Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] certificate_id: Certificate ID of the layer7 listener. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] client_certificate_id: It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead. ID of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_certificate_ids: ID list of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] forward_protocol: Protocol type of the forwarding. Valid value: `HTTP` and `HTTPS`. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] group_id: Group ID.
        :param pulumi.Input[str] name: Name of the layer7 listener, the maximum length is 30.
        :param pulumi.Input[str] proxy_id: ID of the GAAP proxy.
        :param pulumi.Input[str] tls_ciphers: Password Suite, optional GAAP_TLS_CIPHERS_STRICT, GAAP_TLS_CIPHERS_GENERAL, GAAP_TLS_CIPHERS_WIDE(default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tls_support_versions: TLS version, optional TLSv1, TLSv1.1, TLSv1.2, TLSv1.3.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if client_certificate_id is not None:
            warnings.warn("""It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead.""", DeprecationWarning)
            pulumi.log.warn("""client_certificate_id is deprecated: It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead.""")
        if client_certificate_id is not None:
            pulumi.set(__self__, "client_certificate_id", client_certificate_id)
        if client_certificate_ids is not None:
            pulumi.set(__self__, "client_certificate_ids", client_certificate_ids)
        if forward_protocol is not None:
            pulumi.set(__self__, "forward_protocol", forward_protocol)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if tls_ciphers is not None:
            pulumi.set(__self__, "tls_ciphers", tls_ciphers)
        if tls_support_versions is not None:
            pulumi.set(__self__, "tls_support_versions", tls_support_versions)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port of the layer7 listener.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Protocol of the layer7 listener. Valid value: `HTTP` and `HTTPS`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[int]]:
        """
        Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate ID of the layer7 listener. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="clientCertificateId")
    def client_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead. ID of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        warnings.warn("""It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead.""", DeprecationWarning)
        pulumi.log.warn("""client_certificate_id is deprecated: It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead.""")

        return pulumi.get(self, "client_certificate_id")

    @client_certificate_id.setter
    def client_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_id", value)

    @property
    @pulumi.getter(name="clientCertificateIds")
    def client_certificate_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "client_certificate_ids")

    @client_certificate_ids.setter
    def client_certificate_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_certificate_ids", value)

    @property
    @pulumi.getter(name="forwardProtocol")
    def forward_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol type of the forwarding. Valid value: `HTTP` and `HTTPS`. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "forward_protocol")

    @forward_protocol.setter
    def forward_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_protocol", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the layer7 listener, the maximum length is 30.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the GAAP proxy.
        """
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="tlsCiphers")
    def tls_ciphers(self) -> Optional[pulumi.Input[str]]:
        """
        Password Suite, optional GAAP_TLS_CIPHERS_STRICT, GAAP_TLS_CIPHERS_GENERAL, GAAP_TLS_CIPHERS_WIDE(default).
        """
        return pulumi.get(self, "tls_ciphers")

    @tls_ciphers.setter
    def tls_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_ciphers", value)

    @property
    @pulumi.getter(name="tlsSupportVersions")
    def tls_support_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TLS version, optional TLSv1, TLSv1.1, TLSv1.2, TLSv1.3.
        """
        return pulumi.get(self, "tls_support_versions")

    @tls_support_versions.setter
    def tls_support_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_support_versions", value)


@pulumi.input_type
class _Layer7ListenerState:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[int]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 client_certificate_id: Optional[pulumi.Input[str]] = None,
                 client_certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 forward_protocol: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 tls_ciphers: Optional[pulumi.Input[str]] = None,
                 tls_support_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Layer7Listener resources.
        :param pulumi.Input[int] auth_type: Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] certificate_id: Certificate ID of the layer7 listener. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] client_certificate_id: It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead. ID of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_certificate_ids: ID list of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] create_time: Creation time of the layer7 listener.
        :param pulumi.Input[str] forward_protocol: Protocol type of the forwarding. Valid value: `HTTP` and `HTTPS`. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] group_id: Group ID.
        :param pulumi.Input[str] name: Name of the layer7 listener, the maximum length is 30.
        :param pulumi.Input[int] port: Port of the layer7 listener.
        :param pulumi.Input[str] protocol: Protocol of the layer7 listener. Valid value: `HTTP` and `HTTPS`.
        :param pulumi.Input[str] proxy_id: ID of the GAAP proxy.
        :param pulumi.Input[int] status: Status of the layer7 listener.
        :param pulumi.Input[str] tls_ciphers: Password Suite, optional GAAP_TLS_CIPHERS_STRICT, GAAP_TLS_CIPHERS_GENERAL, GAAP_TLS_CIPHERS_WIDE(default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tls_support_versions: TLS version, optional TLSv1, TLSv1.1, TLSv1.2, TLSv1.3.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if client_certificate_id is not None:
            warnings.warn("""It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead.""", DeprecationWarning)
            pulumi.log.warn("""client_certificate_id is deprecated: It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead.""")
        if client_certificate_id is not None:
            pulumi.set(__self__, "client_certificate_id", client_certificate_id)
        if client_certificate_ids is not None:
            pulumi.set(__self__, "client_certificate_ids", client_certificate_ids)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if forward_protocol is not None:
            pulumi.set(__self__, "forward_protocol", forward_protocol)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tls_ciphers is not None:
            pulumi.set(__self__, "tls_ciphers", tls_ciphers)
        if tls_support_versions is not None:
            pulumi.set(__self__, "tls_support_versions", tls_support_versions)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[int]]:
        """
        Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate ID of the layer7 listener. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="clientCertificateId")
    def client_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead. ID of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        warnings.warn("""It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead.""", DeprecationWarning)
        pulumi.log.warn("""client_certificate_id is deprecated: It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead.""")

        return pulumi.get(self, "client_certificate_id")

    @client_certificate_id.setter
    def client_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_id", value)

    @property
    @pulumi.getter(name="clientCertificateIds")
    def client_certificate_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID list of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "client_certificate_ids")

    @client_certificate_ids.setter
    def client_certificate_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_certificate_ids", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of the layer7 listener.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="forwardProtocol")
    def forward_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol type of the forwarding. Valid value: `HTTP` and `HTTPS`. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "forward_protocol")

    @forward_protocol.setter
    def forward_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_protocol", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the layer7 listener, the maximum length is 30.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the layer7 listener.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the layer7 listener. Valid value: `HTTP` and `HTTPS`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the GAAP proxy.
        """
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Status of the layer7 listener.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tlsCiphers")
    def tls_ciphers(self) -> Optional[pulumi.Input[str]]:
        """
        Password Suite, optional GAAP_TLS_CIPHERS_STRICT, GAAP_TLS_CIPHERS_GENERAL, GAAP_TLS_CIPHERS_WIDE(default).
        """
        return pulumi.get(self, "tls_ciphers")

    @tls_ciphers.setter
    def tls_ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_ciphers", value)

    @property
    @pulumi.getter(name="tlsSupportVersions")
    def tls_support_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TLS version, optional TLSv1, TLSv1.1, TLSv1.2, TLSv1.3.
        """
        return pulumi.get(self, "tls_support_versions")

    @tls_support_versions.setter
    def tls_support_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_support_versions", value)


class Layer7Listener(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[int]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 client_certificate_id: Optional[pulumi.Input[str]] = None,
                 client_certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forward_protocol: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 tls_ciphers: Optional[pulumi.Input[str]] = None,
                 tls_support_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a layer7 listener of GAAP.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo_proxy = tencentcloud.gaap.Proxy("fooProxy",
            bandwidth=10,
            concurrent=2,
            access_region="SouthChina",
            realserver_region="NorthChina")
        foo_layer7_listener = tencentcloud.gaap.Layer7Listener("fooLayer7Listener",
            protocol="HTTP",
            port=80,
            proxy_id=foo_proxy.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        GAAP layer7 listener can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Gaap/layer7Listener:Layer7Listener tencentcloud_gaap_layer7_listener.foo listener-11112222
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auth_type: Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] certificate_id: Certificate ID of the layer7 listener. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] client_certificate_id: It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead. ID of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_certificate_ids: ID list of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] forward_protocol: Protocol type of the forwarding. Valid value: `HTTP` and `HTTPS`. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] group_id: Group ID.
        :param pulumi.Input[str] name: Name of the layer7 listener, the maximum length is 30.
        :param pulumi.Input[int] port: Port of the layer7 listener.
        :param pulumi.Input[str] protocol: Protocol of the layer7 listener. Valid value: `HTTP` and `HTTPS`.
        :param pulumi.Input[str] proxy_id: ID of the GAAP proxy.
        :param pulumi.Input[str] tls_ciphers: Password Suite, optional GAAP_TLS_CIPHERS_STRICT, GAAP_TLS_CIPHERS_GENERAL, GAAP_TLS_CIPHERS_WIDE(default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tls_support_versions: TLS version, optional TLSv1, TLSv1.1, TLSv1.2, TLSv1.3.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Layer7ListenerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a layer7 listener of GAAP.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo_proxy = tencentcloud.gaap.Proxy("fooProxy",
            bandwidth=10,
            concurrent=2,
            access_region="SouthChina",
            realserver_region="NorthChina")
        foo_layer7_listener = tencentcloud.gaap.Layer7Listener("fooLayer7Listener",
            protocol="HTTP",
            port=80,
            proxy_id=foo_proxy.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        GAAP layer7 listener can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Gaap/layer7Listener:Layer7Listener tencentcloud_gaap_layer7_listener.foo listener-11112222
        ```

        :param str resource_name: The name of the resource.
        :param Layer7ListenerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Layer7ListenerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[int]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 client_certificate_id: Optional[pulumi.Input[str]] = None,
                 client_certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forward_protocol: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 tls_ciphers: Optional[pulumi.Input[str]] = None,
                 tls_support_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Layer7ListenerArgs.__new__(Layer7ListenerArgs)

            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["client_certificate_id"] = client_certificate_id
            __props__.__dict__["client_certificate_ids"] = client_certificate_ids
            __props__.__dict__["forward_protocol"] = forward_protocol
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["name"] = name
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["proxy_id"] = proxy_id
            __props__.__dict__["tls_ciphers"] = tls_ciphers
            __props__.__dict__["tls_support_versions"] = tls_support_versions
            __props__.__dict__["create_time"] = None
            __props__.__dict__["status"] = None
        super(Layer7Listener, __self__).__init__(
            'tencentcloud:Gaap/layer7Listener:Layer7Listener',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_type: Optional[pulumi.Input[int]] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            client_certificate_id: Optional[pulumi.Input[str]] = None,
            client_certificate_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            forward_protocol: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            proxy_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            tls_ciphers: Optional[pulumi.Input[str]] = None,
            tls_support_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Layer7Listener':
        """
        Get an existing Layer7Listener resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auth_type: Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] certificate_id: Certificate ID of the layer7 listener. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] client_certificate_id: It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead. ID of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_certificate_ids: ID list of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] create_time: Creation time of the layer7 listener.
        :param pulumi.Input[str] forward_protocol: Protocol type of the forwarding. Valid value: `HTTP` and `HTTPS`. NOTES: Only supports listeners of `HTTPS` protocol.
        :param pulumi.Input[str] group_id: Group ID.
        :param pulumi.Input[str] name: Name of the layer7 listener, the maximum length is 30.
        :param pulumi.Input[int] port: Port of the layer7 listener.
        :param pulumi.Input[str] protocol: Protocol of the layer7 listener. Valid value: `HTTP` and `HTTPS`.
        :param pulumi.Input[str] proxy_id: ID of the GAAP proxy.
        :param pulumi.Input[int] status: Status of the layer7 listener.
        :param pulumi.Input[str] tls_ciphers: Password Suite, optional GAAP_TLS_CIPHERS_STRICT, GAAP_TLS_CIPHERS_GENERAL, GAAP_TLS_CIPHERS_WIDE(default).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tls_support_versions: TLS version, optional TLSv1, TLSv1.1, TLSv1.2, TLSv1.3.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Layer7ListenerState.__new__(_Layer7ListenerState)

        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["client_certificate_id"] = client_certificate_id
        __props__.__dict__["client_certificate_ids"] = client_certificate_ids
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["forward_protocol"] = forward_protocol
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["name"] = name
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["proxy_id"] = proxy_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tls_ciphers"] = tls_ciphers
        __props__.__dict__["tls_support_versions"] = tls_support_versions
        return Layer7Listener(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[Optional[int]]:
        """
        Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        Certificate ID of the layer7 listener. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="clientCertificateId")
    def client_certificate_id(self) -> pulumi.Output[str]:
        """
        It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead. ID of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        warnings.warn("""It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead.""", DeprecationWarning)
        pulumi.log.warn("""client_certificate_id is deprecated: It has been deprecated from version 1.26.0. Set `client_certificate_ids` instead.""")

        return pulumi.get(self, "client_certificate_id")

    @property
    @pulumi.getter(name="clientCertificateIds")
    def client_certificate_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        ID list of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "client_certificate_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time of the layer7 listener.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="forwardProtocol")
    def forward_protocol(self) -> pulumi.Output[Optional[str]]:
        """
        Protocol type of the forwarding. Valid value: `HTTP` and `HTTPS`. NOTES: Only supports listeners of `HTTPS` protocol.
        """
        return pulumi.get(self, "forward_protocol")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[str]]:
        """
        Group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the layer7 listener, the maximum length is 30.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Port of the layer7 listener.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Protocol of the layer7 listener. Valid value: `HTTP` and `HTTPS`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the GAAP proxy.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Status of the layer7 listener.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tlsCiphers")
    def tls_ciphers(self) -> pulumi.Output[str]:
        """
        Password Suite, optional GAAP_TLS_CIPHERS_STRICT, GAAP_TLS_CIPHERS_GENERAL, GAAP_TLS_CIPHERS_WIDE(default).
        """
        return pulumi.get(self, "tls_ciphers")

    @property
    @pulumi.getter(name="tlsSupportVersions")
    def tls_support_versions(self) -> pulumi.Output[Sequence[str]]:
        """
        TLS version, optional TLSv1, TLSv1.1, TLSv1.2, TLSv1.3.
        """
        return pulumi.get(self, "tls_support_versions")

