# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CustomHeaderHeader',
    'HttpRuleRealserver',
    'Layer4ListenerRealserverBindSet',
    'GetAccessRegionsAccessRegionSetResult',
    'GetAccessRegionsAccessRegionSetSupportFeatureResult',
    'GetAccessRegionsByDestRegionAccessRegionSetResult',
    'GetCertificatesCertificateResult',
    'GetCountryAreaMappingCountryAreaMappingListResult',
    'GetCustomHeaderHeaderResult',
    'GetDestRegionsDestRegionSetResult',
    'GetDestRegionsDestRegionSetSupportFeatureResult',
    'GetDomainErrorPageInfosErrorPageSetResult',
    'GetDomainErrorPageInfosErrorPageSetSetHeaderResult',
    'GetDomainErrorPagesErrorPageInfoListResult',
    'GetGroupAndStatisticsProxyGroupSetResult',
    'GetGroupAndStatisticsProxyGroupSetProxySetResult',
    'GetGroupAndStatisticsProxyGroupSetProxySetListenerListResult',
    'GetHttpDomainsDomainResult',
    'GetHttpRulesRuleResult',
    'GetHttpRulesRuleRealserverResult',
    'GetLayer4ListenersListenerResult',
    'GetLayer7ListenersListenerResult',
    'GetListenerRealServersBindRealServerSetResult',
    'GetListenerRealServersRealServerSetResult',
    'GetListenerStatisticsStatisticsDataResult',
    'GetListenerStatisticsStatisticsDataMetricDataResult',
    'GetProxiesProxyResult',
    'GetProxiesStatusInstanceStatusSetResult',
    'GetProxyAndStatisticsListenersProxySetResult',
    'GetProxyAndStatisticsListenersProxySetListenerListResult',
    'GetProxyDetailProxyDetailResult',
    'GetProxyDetailProxyDetailAccessRegionInfoResult',
    'GetProxyDetailProxyDetailAccessRegionInfoSupportFeatureResult',
    'GetProxyDetailProxyDetailIpListResult',
    'GetProxyDetailProxyDetailRealServerRegionInfoResult',
    'GetProxyDetailProxyDetailRealServerRegionInfoSupportFeatureResult',
    'GetProxyDetailProxyDetailTagSetResult',
    'GetProxyGroupStatisticsStatisticsDataResult',
    'GetProxyGroupStatisticsStatisticsDataMetricDataResult',
    'GetProxyGroupsFilterResult',
    'GetProxyGroupsProxyGroupListResult',
    'GetProxyGroupsProxyGroupListRealServerRegionInfoResult',
    'GetProxyGroupsProxyGroupListRealServerRegionInfoSupportFeatureResult',
    'GetProxyGroupsProxyGroupListTagSetResult',
    'GetProxyGroupsTagSetResult',
    'GetProxyStatisticsStatisticsDataResult',
    'GetProxyStatisticsStatisticsDataMetricDataResult',
    'GetRealServersStatusRealServerStatusSetResult',
    'GetRealserversRealserverResult',
    'GetRegionAndPriceBandwidthUnitPriceResult',
    'GetRegionAndPriceDestRegionSetResult',
    'GetRegionAndPriceDestRegionSetSupportFeatureResult',
    'GetResourcesByTagResourceSetResult',
    'GetRuleRealServersBindRealServerSetResult',
    'GetRuleRealServersRealServerSetResult',
    'GetSecurityRulesRuleResult',
]

@pulumi.output_type
class CustomHeaderHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"
        elif key == "headerValue":
            suggest = "header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomHeaderHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomHeaderHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomHeaderHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        """
        :param str header_name: Header name.
        :param str header_value: Header value.
        """
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        Header name.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        Header value.
        """
        return pulumi.get(self, "header_value")


@pulumi.output_type
class HttpRuleRealserver(dict):
    def __init__(__self__, *,
                 id: str,
                 ip: str,
                 port: int,
                 weight: Optional[int] = None):
        """
        :param str id: ID of the GAAP realserver.
        :param str ip: IP of the GAAP realserver.
        :param int port: Port of the GAAP realserver.
        :param int weight: Scheduling weight, default value is `1`. Valid value ranges: (1~100).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the GAAP realserver.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP of the GAAP realserver.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port of the GAAP realserver.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Scheduling weight, default value is `1`. Valid value ranges: (1~100).
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class Layer4ListenerRealserverBindSet(dict):
    def __init__(__self__, *,
                 id: str,
                 ip: str,
                 port: int,
                 weight: Optional[int] = None):
        """
        :param str id: ID of the GAAP realserver.
        :param str ip: IP of the GAAP realserver.
        :param int port: Port of the GAAP realserver.
        :param int weight: Scheduling weight, default value is `1`. The range of values is [1,100].
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the GAAP realserver.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP of the GAAP realserver.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port of the GAAP realserver.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Scheduling weight, default value is `1`. The range of values is [1,100].
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetAccessRegionsAccessRegionSetResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetAccessRegionsAccessRegionSetSupportFeatureResult']):
        """
        :param int feature_bitmap: Property bitmap, where each bit represents a property, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str idc_type: The type of computer room, where dc represents the DataCenter data center and ec represents the EdgeComputing edge node.
        :param str region_area: Region of the computer room.
        :param str region_area_name: Name of the region to which the computer room belongs.
        :param str region_id: Region id.
        :param str region_name: English or Chinese name of the region.
        :param Sequence['GetAccessRegionsAccessRegionSetSupportFeatureArgs'] support_features: Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        """
        Property bitmap, where each bit represents a property, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        """
        The type of computer room, where dc represents the DataCenter data center and ec represents the EdgeComputing edge node.
        """
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        """
        Region of the computer room.
        """
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        """
        Name of the region to which the computer room belongs.
        """
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        Region id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        English or Chinese name of the region.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetAccessRegionsAccessRegionSetSupportFeatureResult']:
        """
        Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetAccessRegionsAccessRegionSetSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        """
        :param Sequence[str] network_types: A list of network types supported by the access area, with normal indicating support for regular BGP, cn2 indicating premium BGP, triple indicating three networks, and secure_ EIP represents a custom secure EIP.
        """
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        """
        A list of network types supported by the access area, with normal indicating support for regular BGP, cn2 indicating premium BGP, triple indicating three networks, and secure_ EIP represents a custom secure EIP.
        """
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetAccessRegionsByDestRegionAccessRegionSetResult(dict):
    def __init__(__self__, *,
                 bandwidth_lists: Sequence[int],
                 concurrent_lists: Sequence[int],
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str):
        """
        :param Sequence[int] bandwidth_lists: Optional bandwidth value array.
        :param Sequence[int] concurrent_lists: Optional concurrency value array.
        :param int feature_bitmap: The type of computer room, where dc represents the DataCenter data center, ec represents the feature bitmap, and each bit represents a feature, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained. Edge nodes.
        :param str idc_type: The type of computer room, where dc represents the DataCenter data center and ec represents the EdgeComputing edge node.
        :param str region_area: Region of the computer room.
        :param str region_area_name: Region name of the computer room.
        :param str region_id: Region id.
        :param str region_name: Chinese or English name of the region.
        """
        pulumi.set(__self__, "bandwidth_lists", bandwidth_lists)
        pulumi.set(__self__, "concurrent_lists", concurrent_lists)
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)

    @property
    @pulumi.getter(name="bandwidthLists")
    def bandwidth_lists(self) -> Sequence[int]:
        """
        Optional bandwidth value array.
        """
        return pulumi.get(self, "bandwidth_lists")

    @property
    @pulumi.getter(name="concurrentLists")
    def concurrent_lists(self) -> Sequence[int]:
        """
        Optional concurrency value array.
        """
        return pulumi.get(self, "concurrent_lists")

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        """
        The type of computer room, where dc represents the DataCenter data center, ec represents the feature bitmap, and each bit represents a feature, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained. Edge nodes.
        """
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        """
        The type of computer room, where dc represents the DataCenter data center and ec represents the EdgeComputing edge node.
        """
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        """
        Region of the computer room.
        """
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        """
        Region name of the computer room.
        """
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        Region id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        Chinese or English name of the region.
        """
        return pulumi.get(self, "region_name")


@pulumi.output_type
class GetCertificatesCertificateResult(dict):
    def __init__(__self__, *,
                 begin_time: str,
                 create_time: str,
                 end_time: str,
                 id: str,
                 issuer_cn: str,
                 name: str,
                 subject_cn: str,
                 type: str):
        """
        :param str begin_time: Beginning time of the certificate.
        :param str create_time: Creation time of the certificate.
        :param str end_time: Ending time of the certificate.
        :param str id: ID of the certificate to be queried.
        :param str issuer_cn: Issuer name of the certificate.
        :param str name: Name of the certificate to be queried.
        :param str subject_cn: Subject name of the certificate.
        :param str type: Type of the certificate to be queried. Valid values: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver CA certificate; `PROXY` means proxy SSL certificate.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issuer_cn", issuer_cn)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subject_cn", subject_cn)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> str:
        """
        Beginning time of the certificate.
        """
        return pulumi.get(self, "begin_time")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of the certificate.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Ending time of the certificate.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the certificate to be queried.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuerCn")
    def issuer_cn(self) -> str:
        """
        Issuer name of the certificate.
        """
        return pulumi.get(self, "issuer_cn")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the certificate to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> str:
        """
        Subject name of the certificate.
        """
        return pulumi.get(self, "subject_cn")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the certificate to be queried. Valid values: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver CA certificate; `PROXY` means proxy SSL certificate.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCountryAreaMappingCountryAreaMappingListResult(dict):
    def __init__(__self__, *,
                 continent_inner_code: str,
                 continent_name: str,
                 geographical_zone_inner_code: str,
                 geographical_zone_name: str,
                 nation_country_inner_code: str,
                 nation_country_name: str,
                 remark: str):
        """
        :param str continent_inner_code: Continental Code.
        :param str continent_name: The name of the continent.
        :param str geographical_zone_inner_code: Region code.
        :param str geographical_zone_name: Region name.
        :param str nation_country_inner_code: Country code.
        :param str nation_country_name: Country name.
        :param str remark: Annotation InformationNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "continent_inner_code", continent_inner_code)
        pulumi.set(__self__, "continent_name", continent_name)
        pulumi.set(__self__, "geographical_zone_inner_code", geographical_zone_inner_code)
        pulumi.set(__self__, "geographical_zone_name", geographical_zone_name)
        pulumi.set(__self__, "nation_country_inner_code", nation_country_inner_code)
        pulumi.set(__self__, "nation_country_name", nation_country_name)
        pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="continentInnerCode")
    def continent_inner_code(self) -> str:
        """
        Continental Code.
        """
        return pulumi.get(self, "continent_inner_code")

    @property
    @pulumi.getter(name="continentName")
    def continent_name(self) -> str:
        """
        The name of the continent.
        """
        return pulumi.get(self, "continent_name")

    @property
    @pulumi.getter(name="geographicalZoneInnerCode")
    def geographical_zone_inner_code(self) -> str:
        """
        Region code.
        """
        return pulumi.get(self, "geographical_zone_inner_code")

    @property
    @pulumi.getter(name="geographicalZoneName")
    def geographical_zone_name(self) -> str:
        """
        Region name.
        """
        return pulumi.get(self, "geographical_zone_name")

    @property
    @pulumi.getter(name="nationCountryInnerCode")
    def nation_country_inner_code(self) -> str:
        """
        Country code.
        """
        return pulumi.get(self, "nation_country_inner_code")

    @property
    @pulumi.getter(name="nationCountryName")
    def nation_country_name(self) -> str:
        """
        Country name.
        """
        return pulumi.get(self, "nation_country_name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Annotation InformationNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "remark")


@pulumi.output_type
class GetCustomHeaderHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        """
        :param str header_name: Header Name.
        :param str header_value: Header Value.
        """
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        Header Name.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        Header Value.
        """
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetDestRegionsDestRegionSetResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetDestRegionsDestRegionSetSupportFeatureResult']):
        """
        :param int feature_bitmap: Property bitmap, where each bit represents a property, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str idc_type: The type of computer room, where dc represents the DataCenter data center and ec represents the EdgeComputing edge node.
        :param str region_area: Region of the computer room.
        :param str region_area_name: Region name of the computer room.
        :param str region_id: region ID.
        :param str region_name: region name.
        :param Sequence['GetDestRegionsDestRegionSetSupportFeatureArgs'] support_features: Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        """
        Property bitmap, where each bit represents a property, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        """
        The type of computer room, where dc represents the DataCenter data center and ec represents the EdgeComputing edge node.
        """
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        """
        Region of the computer room.
        """
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        """
        Region name of the computer room.
        """
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        region ID.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        region name.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetDestRegionsDestRegionSetSupportFeatureResult']:
        """
        Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetDestRegionsDestRegionSetSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        """
        :param Sequence[str] network_types: A list of network types supported by the access area, with normal indicating support for regular BGP, cn2 indicating premium BGP, triple indicating three networks, and secure_EIP represents a custom secure EIP.
        """
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        """
        A list of network types supported by the access area, with normal indicating support for regular BGP, cn2 indicating premium BGP, triple indicating three networks, and secure_EIP represents a custom secure EIP.
        """
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetDomainErrorPageInfosErrorPageSetResult(dict):
    def __init__(__self__, *,
                 body: str,
                 clear_headers: Sequence[str],
                 domain: str,
                 error_nos: Sequence[int],
                 error_page_id: str,
                 listener_id: str,
                 new_error_no: int,
                 set_headers: Sequence['outputs.GetDomainErrorPageInfosErrorPageSetSetHeaderResult'],
                 status: int):
        """
        :param str body: Response body set (excluding HTTP header)Note: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence[str] clear_headers: Response headers that need to be cleanedNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str domain: domain name.
        :param Sequence[int] error_nos: Original error code.
        :param str error_page_id: Configuration ID for error customization response.
        :param str listener_id: Listener ID.
        :param int new_error_no: New error codeNote: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence['GetDomainErrorPageInfosErrorPageSetSetHeaderArgs'] set_headers: Response header to be setNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int status: Rule status, 0 indicates successNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "clear_headers", clear_headers)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "error_nos", error_nos)
        pulumi.set(__self__, "error_page_id", error_page_id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "new_error_no", new_error_no)
        pulumi.set(__self__, "set_headers", set_headers)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        Response body set (excluding HTTP header)Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="clearHeaders")
    def clear_headers(self) -> Sequence[str]:
        """
        Response headers that need to be cleanedNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "clear_headers")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        domain name.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="errorNos")
    def error_nos(self) -> Sequence[int]:
        """
        Original error code.
        """
        return pulumi.get(self, "error_nos")

    @property
    @pulumi.getter(name="errorPageId")
    def error_page_id(self) -> str:
        """
        Configuration ID for error customization response.
        """
        return pulumi.get(self, "error_page_id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        Listener ID.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="newErrorNo")
    def new_error_no(self) -> int:
        """
        New error codeNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "new_error_no")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Sequence['outputs.GetDomainErrorPageInfosErrorPageSetSetHeaderResult']:
        """
        Response header to be setNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "set_headers")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Rule status, 0 indicates successNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDomainErrorPageInfosErrorPageSetSetHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: str,
                 header_value: str):
        """
        :param str header_name: HTTP header name.
        :param str header_value: HTTP header value.
        """
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        HTTP header name.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> str:
        """
        HTTP header value.
        """
        return pulumi.get(self, "header_value")


@pulumi.output_type
class GetDomainErrorPagesErrorPageInfoListResult(dict):
    def __init__(__self__, *,
                 body: str,
                 clear_headers: Sequence[str],
                 domain: str,
                 error_codes: Sequence[int],
                 id: str,
                 listener_id: str,
                 new_error_codes: int,
                 set_headers: Mapping[str, Any]):
        """
        :param str body: New response body.
        :param Sequence[str] clear_headers: Response headers to be removed.
        :param str domain: HTTP domain to be queried.
        :param Sequence[int] error_codes: Original error codes.
        :param str id: ID of the error page info.
        :param str listener_id: ID of the layer7 listener to be queried.
        :param int new_error_codes: New error code.
        :param Mapping[str, Any] set_headers: Response headers to be set.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "clear_headers", clear_headers)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "error_codes", error_codes)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "new_error_codes", new_error_codes)
        pulumi.set(__self__, "set_headers", set_headers)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        New response body.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="clearHeaders")
    def clear_headers(self) -> Sequence[str]:
        """
        Response headers to be removed.
        """
        return pulumi.get(self, "clear_headers")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        HTTP domain to be queried.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="errorCodes")
    def error_codes(self) -> Sequence[int]:
        """
        Original error codes.
        """
        return pulumi.get(self, "error_codes")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the error page info.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        ID of the layer7 listener to be queried.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="newErrorCodes")
    def new_error_codes(self) -> int:
        """
        New error code.
        """
        return pulumi.get(self, "new_error_codes")

    @property
    @pulumi.getter(name="setHeaders")
    def set_headers(self) -> Mapping[str, Any]:
        """
        Response headers to be set.
        """
        return pulumi.get(self, "set_headers")


@pulumi.output_type
class GetGroupAndStatisticsProxyGroupSetResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 group_name: str,
                 proxy_sets: Sequence['outputs.GetGroupAndStatisticsProxyGroupSetProxySetResult']):
        """
        :param str group_id: Channel Group ID.
        :param str group_name: Channel Group name.
        :param Sequence['GetGroupAndStatisticsProxyGroupSetProxySetArgs'] proxy_sets: Channel list in the proxy group.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "proxy_sets", proxy_sets)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        Channel Group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Channel Group name.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="proxySets")
    def proxy_sets(self) -> Sequence['outputs.GetGroupAndStatisticsProxyGroupSetProxySetResult']:
        """
        Channel list in the proxy group.
        """
        return pulumi.get(self, "proxy_sets")


@pulumi.output_type
class GetGroupAndStatisticsProxyGroupSetProxySetResult(dict):
    def __init__(__self__, *,
                 listener_lists: Sequence['outputs.GetGroupAndStatisticsProxyGroupSetProxySetListenerListResult'],
                 proxy_id: str,
                 proxy_name: str):
        """
        :param Sequence['GetGroupAndStatisticsProxyGroupSetProxySetListenerListArgs'] listener_lists: listener list.
        :param str proxy_id: Channel Id.
        :param str proxy_name: Channel name.
        """
        pulumi.set(__self__, "listener_lists", listener_lists)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "proxy_name", proxy_name)

    @property
    @pulumi.getter(name="listenerLists")
    def listener_lists(self) -> Sequence['outputs.GetGroupAndStatisticsProxyGroupSetProxySetListenerListResult']:
        """
        listener list.
        """
        return pulumi.get(self, "listener_lists")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        """
        Channel Id.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> str:
        """
        Channel name.
        """
        return pulumi.get(self, "proxy_name")


@pulumi.output_type
class GetGroupAndStatisticsProxyGroupSetProxySetListenerListResult(dict):
    def __init__(__self__, *,
                 listener_id: str,
                 listener_name: str,
                 port: int,
                 protocol: str):
        """
        :param str listener_id: listener Id.
        :param str listener_name: listener name.
        :param int port: listened port.
        :param str protocol: Listener protocol type.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        listener Id.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        """
        listener name.
        """
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        listened port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Listener protocol type.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetHttpDomainsDomainResult(dict):
    def __init__(__self__, *,
                 basic_auth: bool,
                 basic_auth_id: str,
                 certificate_id: str,
                 client_certificate_id: str,
                 client_certificate_ids: Sequence[str],
                 domain: str,
                 gaap_auth: bool,
                 gaap_auth_id: str,
                 is_default_server: bool,
                 realserver_auth: bool,
                 realserver_certificate_domain: str,
                 realserver_certificate_id: str,
                 realserver_certificate_ids: Sequence[str]):
        """
        :param bool basic_auth: Indicates whether basic authentication is enable.
        :param str basic_auth_id: ID of the basic authentication.
        :param str certificate_id: ID of the server certificate.
        :param str client_certificate_id: (**Deprecated**) It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead. ID of the client certificate.
        :param Sequence[str] client_certificate_ids: ID list of the client certificate.
        :param str domain: Forward domain of the layer7 listener to be queried.
        :param bool gaap_auth: Indicates whether SSL certificate authentication is enable.
        :param str gaap_auth_id: ID of the SSL certificate.
        :param bool is_default_server: Whether to use as the default domain name.
        :param bool realserver_auth: Indicates whether realserver authentication is enable.
        :param str realserver_certificate_domain: CA certificate domain of the realserver.
        :param str realserver_certificate_id: (**Deprecated**) It has been deprecated from version 1.28.0. Use `realserver_certificate_ids` instead. CA certificate ID of the realserver.
        :param Sequence[str] realserver_certificate_ids: CA certificate ID list of the realserver.
        """
        pulumi.set(__self__, "basic_auth", basic_auth)
        pulumi.set(__self__, "basic_auth_id", basic_auth_id)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "client_certificate_id", client_certificate_id)
        pulumi.set(__self__, "client_certificate_ids", client_certificate_ids)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "gaap_auth", gaap_auth)
        pulumi.set(__self__, "gaap_auth_id", gaap_auth_id)
        pulumi.set(__self__, "is_default_server", is_default_server)
        pulumi.set(__self__, "realserver_auth", realserver_auth)
        pulumi.set(__self__, "realserver_certificate_domain", realserver_certificate_domain)
        pulumi.set(__self__, "realserver_certificate_id", realserver_certificate_id)
        pulumi.set(__self__, "realserver_certificate_ids", realserver_certificate_ids)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> bool:
        """
        Indicates whether basic authentication is enable.
        """
        return pulumi.get(self, "basic_auth")

    @property
    @pulumi.getter(name="basicAuthId")
    def basic_auth_id(self) -> str:
        """
        ID of the basic authentication.
        """
        return pulumi.get(self, "basic_auth_id")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        ID of the server certificate.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="clientCertificateId")
    def client_certificate_id(self) -> str:
        """
        (**Deprecated**) It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead. ID of the client certificate.
        """
        warnings.warn("""It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead.""", DeprecationWarning)
        pulumi.log.warn("""client_certificate_id is deprecated: It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead.""")

        return pulumi.get(self, "client_certificate_id")

    @property
    @pulumi.getter(name="clientCertificateIds")
    def client_certificate_ids(self) -> Sequence[str]:
        """
        ID list of the client certificate.
        """
        return pulumi.get(self, "client_certificate_ids")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Forward domain of the layer7 listener to be queried.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="gaapAuth")
    def gaap_auth(self) -> bool:
        """
        Indicates whether SSL certificate authentication is enable.
        """
        return pulumi.get(self, "gaap_auth")

    @property
    @pulumi.getter(name="gaapAuthId")
    def gaap_auth_id(self) -> str:
        """
        ID of the SSL certificate.
        """
        return pulumi.get(self, "gaap_auth_id")

    @property
    @pulumi.getter(name="isDefaultServer")
    def is_default_server(self) -> bool:
        """
        Whether to use as the default domain name.
        """
        return pulumi.get(self, "is_default_server")

    @property
    @pulumi.getter(name="realserverAuth")
    def realserver_auth(self) -> bool:
        """
        Indicates whether realserver authentication is enable.
        """
        return pulumi.get(self, "realserver_auth")

    @property
    @pulumi.getter(name="realserverCertificateDomain")
    def realserver_certificate_domain(self) -> str:
        """
        CA certificate domain of the realserver.
        """
        return pulumi.get(self, "realserver_certificate_domain")

    @property
    @pulumi.getter(name="realserverCertificateId")
    def realserver_certificate_id(self) -> str:
        """
        (**Deprecated**) It has been deprecated from version 1.28.0. Use `realserver_certificate_ids` instead. CA certificate ID of the realserver.
        """
        warnings.warn("""It has been deprecated from version 1.28.0. Use `realserver_certificate_ids` instead.""", DeprecationWarning)
        pulumi.log.warn("""realserver_certificate_id is deprecated: It has been deprecated from version 1.28.0. Use `realserver_certificate_ids` instead.""")

        return pulumi.get(self, "realserver_certificate_id")

    @property
    @pulumi.getter(name="realserverCertificateIds")
    def realserver_certificate_ids(self) -> Sequence[str]:
        """
        CA certificate ID list of the realserver.
        """
        return pulumi.get(self, "realserver_certificate_ids")


@pulumi.output_type
class GetHttpRulesRuleResult(dict):
    def __init__(__self__, *,
                 connect_timeout: int,
                 domain: str,
                 forward_host: str,
                 health_check: bool,
                 health_check_method: str,
                 health_check_path: str,
                 health_check_status_codes: Sequence[int],
                 id: str,
                 interval: int,
                 listener_id: str,
                 path: str,
                 realserver_type: str,
                 realservers: Sequence['outputs.GetHttpRulesRuleRealserverResult'],
                 scheduler: str,
                 sni: str,
                 sni_switch: str):
        """
        :param int connect_timeout: Timeout of the health check response.
        :param str domain: Forward domain of the layer7 listener to be queried.
        :param str forward_host: Requested host which is forwarded to the realserver by the listener to be queried.
        :param bool health_check: Indicates whether health check is enable.
        :param str health_check_method: Method of the health check.
        :param str health_check_path: Path of health check.
        :param Sequence[int] health_check_status_codes: Return code of confirmed normal.
        :param str id: ID of the GAAP realserver.
        :param int interval: Interval of the health check.
        :param str listener_id: ID of the layer7 listener to be queried.
        :param str path: Path of the forward rule to be queried.
        :param str realserver_type: Type of the realserver.
        :param Sequence['GetHttpRulesRuleRealserverArgs'] realservers: An information list of GAAP realserver. Each element contains the following attributes:
        :param str scheduler: Scheduling policy of the forward rule.
        :param str sni: ServerNameIndication (SNI).
        :param str sni_switch: ServerNameIndication (SNI) switch.
        """
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "forward_host", forward_host)
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "health_check_method", health_check_method)
        pulumi.set(__self__, "health_check_path", health_check_path)
        pulumi.set(__self__, "health_check_status_codes", health_check_status_codes)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "realserver_type", realserver_type)
        pulumi.set(__self__, "realservers", realservers)
        pulumi.set(__self__, "scheduler", scheduler)
        pulumi.set(__self__, "sni", sni)
        pulumi.set(__self__, "sni_switch", sni_switch)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> int:
        """
        Timeout of the health check response.
        """
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Forward domain of the layer7 listener to be queried.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="forwardHost")
    def forward_host(self) -> str:
        """
        Requested host which is forwarded to the realserver by the listener to be queried.
        """
        return pulumi.get(self, "forward_host")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> bool:
        """
        Indicates whether health check is enable.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="healthCheckMethod")
    def health_check_method(self) -> str:
        """
        Method of the health check.
        """
        return pulumi.get(self, "health_check_method")

    @property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> str:
        """
        Path of health check.
        """
        return pulumi.get(self, "health_check_path")

    @property
    @pulumi.getter(name="healthCheckStatusCodes")
    def health_check_status_codes(self) -> Sequence[int]:
        """
        Return code of confirmed normal.
        """
        return pulumi.get(self, "health_check_status_codes")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the GAAP realserver.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interval(self) -> int:
        """
        Interval of the health check.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        ID of the layer7 listener to be queried.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path of the forward rule to be queried.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="realserverType")
    def realserver_type(self) -> str:
        """
        Type of the realserver.
        """
        return pulumi.get(self, "realserver_type")

    @property
    @pulumi.getter
    def realservers(self) -> Sequence['outputs.GetHttpRulesRuleRealserverResult']:
        """
        An information list of GAAP realserver. Each element contains the following attributes:
        """
        return pulumi.get(self, "realservers")

    @property
    @pulumi.getter
    def scheduler(self) -> str:
        """
        Scheduling policy of the forward rule.
        """
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter
    def sni(self) -> str:
        """
        ServerNameIndication (SNI).
        """
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="sniSwitch")
    def sni_switch(self) -> str:
        """
        ServerNameIndication (SNI) switch.
        """
        return pulumi.get(self, "sni_switch")


@pulumi.output_type
class GetHttpRulesRuleRealserverResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 id: str,
                 ip: str,
                 port: int,
                 status: int,
                 weight: int):
        """
        :param str domain: Forward domain of the layer7 listener to be queried.
        :param str id: ID of the GAAP realserver.
        :param str ip: IP of the GAAP realserver.
        :param int port: Port of the GAAP realserver.
        :param int status: Status of the GAAP realserver.
        :param int weight: Scheduling weight.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Forward domain of the layer7 listener to be queried.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the GAAP realserver.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP of the GAAP realserver.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port of the GAAP realserver.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Status of the GAAP realserver.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Scheduling weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetLayer4ListenersListenerResult(dict):
    def __init__(__self__, *,
                 connect_timeout: int,
                 create_time: str,
                 health_check: bool,
                 id: str,
                 interval: int,
                 name: str,
                 port: int,
                 protocol: str,
                 proxy_id: str,
                 realserver_type: str,
                 scheduler: str,
                 status: int):
        """
        :param int connect_timeout: Timeout of the health check response.
        :param str create_time: Creation time of the layer4 listener.
        :param bool health_check: Indicates whether health check is enable.
        :param str id: ID of the layer4 listener.
        :param int interval: Interval of the health check.
        :param str name: Name of the layer4 listener.
        :param int port: Port of the layer4 listener to be queried.
        :param str protocol: Protocol of the layer4 listener to be queried. Valid values: `TCP` and `UDP`.
        :param str proxy_id: ID of the GAAP proxy to be queried.
        :param str realserver_type: Type of the realserver.
        :param str scheduler: Scheduling policy of the layer4 listener.
        :param int status: Status of the layer4 listener.
        """
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "realserver_type", realserver_type)
        pulumi.set(__self__, "scheduler", scheduler)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> int:
        """
        Timeout of the health check response.
        """
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of the layer4 listener.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> bool:
        """
        Indicates whether health check is enable.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the layer4 listener.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interval(self) -> int:
        """
        Interval of the health check.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the layer4 listener.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port of the layer4 listener to be queried.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol of the layer4 listener to be queried. Valid values: `TCP` and `UDP`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        """
        ID of the GAAP proxy to be queried.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="realserverType")
    def realserver_type(self) -> str:
        """
        Type of the realserver.
        """
        return pulumi.get(self, "realserver_type")

    @property
    @pulumi.getter
    def scheduler(self) -> str:
        """
        Scheduling policy of the layer4 listener.
        """
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Status of the layer4 listener.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLayer7ListenersListenerResult(dict):
    def __init__(__self__, *,
                 auth_type: int,
                 certificate_id: str,
                 client_certificate_id: str,
                 client_certificate_ids: Sequence[str],
                 create_time: str,
                 forward_protocol: str,
                 id: str,
                 name: str,
                 port: int,
                 protocol: str,
                 proxy_id: str,
                 status: int,
                 tls_ciphers: str,
                 tls_support_versions: Sequence[str]):
        """
        :param int auth_type: Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication.
        :param str certificate_id: Certificate ID of the layer7 listener.
        :param str client_certificate_id: (**Deprecated**) It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead. ID of the client certificate.
        :param Sequence[str] client_certificate_ids: ID list of the client certificate.
        :param str create_time: Creation time of the layer7 listener.
        :param str forward_protocol: Protocol type of the forwarding.
        :param str id: ID of the layer7 listener.
        :param str name: Name of the layer7 listener.
        :param int port: Port of the layer7 listener to be queried.
        :param str protocol: Protocol of the layer7 listener to be queried. Valid values: `HTTP` and `HTTPS`.
        :param str proxy_id: ID of the GAAP proxy to be queried.
        :param int status: Status of the layer7 listener.
        :param str tls_ciphers: Password Suite, optional GAAP_TLS_CIPHERS_STRICT, GAAP_TLS_CIPHERS_GENERAL, GAAP_TLS_CIPHERS_WIDE(default).
        :param Sequence[str] tls_support_versions: TLS version, optional TLSv1, TLSv1.1, TLSv1.2, TLSv1.3.
        """
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "client_certificate_id", client_certificate_id)
        pulumi.set(__self__, "client_certificate_ids", client_certificate_ids)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "forward_protocol", forward_protocol)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tls_ciphers", tls_ciphers)
        pulumi.set(__self__, "tls_support_versions", tls_support_versions)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> int:
        """
        Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        Certificate ID of the layer7 listener.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="clientCertificateId")
    def client_certificate_id(self) -> str:
        """
        (**Deprecated**) It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead. ID of the client certificate.
        """
        warnings.warn("""It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead.""", DeprecationWarning)
        pulumi.log.warn("""client_certificate_id is deprecated: It has been deprecated from version 1.26.0. Use `client_certificate_ids` instead.""")

        return pulumi.get(self, "client_certificate_id")

    @property
    @pulumi.getter(name="clientCertificateIds")
    def client_certificate_ids(self) -> Sequence[str]:
        """
        ID list of the client certificate.
        """
        return pulumi.get(self, "client_certificate_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of the layer7 listener.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="forwardProtocol")
    def forward_protocol(self) -> str:
        """
        Protocol type of the forwarding.
        """
        return pulumi.get(self, "forward_protocol")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the layer7 listener.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the layer7 listener.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port of the layer7 listener to be queried.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol of the layer7 listener to be queried. Valid values: `HTTP` and `HTTPS`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        """
        ID of the GAAP proxy to be queried.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Status of the layer7 listener.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tlsCiphers")
    def tls_ciphers(self) -> str:
        """
        Password Suite, optional GAAP_TLS_CIPHERS_STRICT, GAAP_TLS_CIPHERS_GENERAL, GAAP_TLS_CIPHERS_WIDE(default).
        """
        return pulumi.get(self, "tls_ciphers")

    @property
    @pulumi.getter(name="tlsSupportVersions")
    def tls_support_versions(self) -> Sequence[str]:
        """
        TLS version, optional TLSv1, TLSv1.1, TLSv1.2, TLSv1.3.
        """
        return pulumi.get(self, "tls_support_versions")


@pulumi.output_type
class GetListenerRealServersBindRealServerSetResult(dict):
    def __init__(__self__, *,
                 down_ip_lists: Sequence[str],
                 real_server_failover_role: str,
                 real_server_ip: str,
                 real_server_id: str,
                 real_server_port: int,
                 real_server_status: int,
                 real_server_weight: int):
        """
        :param Sequence[str] down_ip_lists: When the real server is a domain name, the domain name is resolved to one or more IPs, and this field represents the list of abnormal IPs. When the status is abnormal, but the field is empty, it indicates that the domain name resolution is abnormal.
        :param str real_server_failover_role: The primary and secondary roles of the real server, &#39;master&#39; represents primary, &#39;slave&#39; represents secondary, and this parameter must be in the active and standby mode of the real server when the listener is turned on.
        :param str real_server_ip: Real Server IP.
        :param str real_server_id: Real Server Id.
        :param int real_server_port: The port number of the real serverNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int real_server_status: real server health check status, where:0 indicates normal;1 indicates an exception.When the health check status is not enabled, it is always normal.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int real_server_weight: The weight of this real server.
        """
        pulumi.set(__self__, "down_ip_lists", down_ip_lists)
        pulumi.set(__self__, "real_server_failover_role", real_server_failover_role)
        pulumi.set(__self__, "real_server_ip", real_server_ip)
        pulumi.set(__self__, "real_server_id", real_server_id)
        pulumi.set(__self__, "real_server_port", real_server_port)
        pulumi.set(__self__, "real_server_status", real_server_status)
        pulumi.set(__self__, "real_server_weight", real_server_weight)

    @property
    @pulumi.getter(name="downIPLists")
    def down_ip_lists(self) -> Sequence[str]:
        """
        When the real server is a domain name, the domain name is resolved to one or more IPs, and this field represents the list of abnormal IPs. When the status is abnormal, but the field is empty, it indicates that the domain name resolution is abnormal.
        """
        return pulumi.get(self, "down_ip_lists")

    @property
    @pulumi.getter(name="realServerFailoverRole")
    def real_server_failover_role(self) -> str:
        """
        The primary and secondary roles of the real server, &#39;master&#39; represents primary, &#39;slave&#39; represents secondary, and this parameter must be in the active and standby mode of the real server when the listener is turned on.
        """
        return pulumi.get(self, "real_server_failover_role")

    @property
    @pulumi.getter(name="realServerIP")
    def real_server_ip(self) -> str:
        """
        Real Server IP.
        """
        return pulumi.get(self, "real_server_ip")

    @property
    @pulumi.getter(name="realServerId")
    def real_server_id(self) -> str:
        """
        Real Server Id.
        """
        return pulumi.get(self, "real_server_id")

    @property
    @pulumi.getter(name="realServerPort")
    def real_server_port(self) -> int:
        """
        The port number of the real serverNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "real_server_port")

    @property
    @pulumi.getter(name="realServerStatus")
    def real_server_status(self) -> int:
        """
        real server health check status, where:0 indicates normal;1 indicates an exception.When the health check status is not enabled, it is always normal.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "real_server_status")

    @property
    @pulumi.getter(name="realServerWeight")
    def real_server_weight(self) -> int:
        """
        The weight of this real server.
        """
        return pulumi.get(self, "real_server_weight")


@pulumi.output_type
class GetListenerRealServersRealServerSetResult(dict):
    def __init__(__self__, *,
                 in_ban_blacklist: int,
                 project_id: int,
                 real_server_ip: str,
                 real_server_id: str,
                 real_server_name: str):
        """
        :param int in_ban_blacklist: Is it on the banned blacklist? 0 indicates not on the blacklist, and 1 indicates on the blacklist.
        :param int project_id: Project Id.
        :param str real_server_ip: Real Server IP.
        :param str real_server_id: Real Server Id.
        :param str real_server_name: Real Server Name.
        """
        pulumi.set(__self__, "in_ban_blacklist", in_ban_blacklist)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "real_server_ip", real_server_ip)
        pulumi.set(__self__, "real_server_id", real_server_id)
        pulumi.set(__self__, "real_server_name", real_server_name)

    @property
    @pulumi.getter(name="inBanBlacklist")
    def in_ban_blacklist(self) -> int:
        """
        Is it on the banned blacklist? 0 indicates not on the blacklist, and 1 indicates on the blacklist.
        """
        return pulumi.get(self, "in_ban_blacklist")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project Id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="realServerIP")
    def real_server_ip(self) -> str:
        """
        Real Server IP.
        """
        return pulumi.get(self, "real_server_ip")

    @property
    @pulumi.getter(name="realServerId")
    def real_server_id(self) -> str:
        """
        Real Server Id.
        """
        return pulumi.get(self, "real_server_id")

    @property
    @pulumi.getter(name="realServerName")
    def real_server_name(self) -> str:
        """
        Real Server Name.
        """
        return pulumi.get(self, "real_server_name")


@pulumi.output_type
class GetListenerStatisticsStatisticsDataResult(dict):
    def __init__(__self__, *,
                 metric_datas: Sequence['outputs.GetListenerStatisticsStatisticsDataMetricDataResult'],
                 metric_name: str):
        """
        :param Sequence['GetListenerStatisticsStatisticsDataMetricDataArgs'] metric_datas: Metric Data.
        :param str metric_name: Metric Name.
        """
        pulumi.set(__self__, "metric_datas", metric_datas)
        pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter(name="metricDatas")
    def metric_datas(self) -> Sequence['outputs.GetListenerStatisticsStatisticsDataMetricDataResult']:
        """
        Metric Data.
        """
        return pulumi.get(self, "metric_datas")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Metric Name.
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetListenerStatisticsStatisticsDataMetricDataResult(dict):
    def __init__(__self__, *,
                 data: float,
                 time: int):
        """
        :param float data: Statistical data valueNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int time: Time.
        """
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def data(self) -> float:
        """
        Statistical data valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def time(self) -> int:
        """
        Time.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetProxiesProxyResult(dict):
    def __init__(__self__, *,
                 access_region: str,
                 bandwidth: int,
                 concurrent: int,
                 create_time: str,
                 domain: str,
                 forward_ip: str,
                 id: str,
                 ip: str,
                 name: str,
                 policy_id: str,
                 project_id: int,
                 realserver_region: str,
                 scalable: bool,
                 status: str,
                 support_protocols: Sequence[str],
                 tags: Mapping[str, Any],
                 version: str):
        """
        :param str access_region: Access region of the GAAP proxy to be queried. Conflict with `ids`.
        :param int bandwidth: Maximum bandwidth of the GAAP proxy, unit is Mbps.
        :param int concurrent: Maximum concurrency of the GAAP proxy, unit is 10k.
        :param str create_time: Creation time of the GAAP proxy.
        :param str domain: Access domain of the GAAP proxy.
        :param str forward_ip: Forwarding IP of the GAAP proxy.
        :param str id: ID of the GAAP proxy.
        :param str ip: Access domain of the GAAP proxy.
        :param str name: Name of the GAAP proxy.
        :param str policy_id: Security policy ID of the GAAP proxy.
        :param int project_id: Project ID of the GAAP proxy to be queried. Conflict with `ids`.
        :param str realserver_region: Region of the GAAP realserver to be queried. Conflict with `ids`.
        :param bool scalable: Indicates whether GAAP proxy can scalable.
        :param str status: Status of the GAAP proxy.
        :param Sequence[str] support_protocols: Supported protocols of the GAAP proxy.
        :param Mapping[str, Any] tags: Tags of the GAAP proxy to be queried. Support up to 5, display the information as long as it matches one.
        :param str version: Version of the GAAP proxy.
        """
        pulumi.set(__self__, "access_region", access_region)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "concurrent", concurrent)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "forward_ip", forward_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "realserver_region", realserver_region)
        pulumi.set(__self__, "scalable", scalable)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_protocols", support_protocols)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessRegion")
    def access_region(self) -> str:
        """
        Access region of the GAAP proxy to be queried. Conflict with `ids`.
        """
        return pulumi.get(self, "access_region")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Maximum bandwidth of the GAAP proxy, unit is Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def concurrent(self) -> int:
        """
        Maximum concurrency of the GAAP proxy, unit is 10k.
        """
        return pulumi.get(self, "concurrent")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of the GAAP proxy.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Access domain of the GAAP proxy.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="forwardIp")
    def forward_ip(self) -> str:
        """
        Forwarding IP of the GAAP proxy.
        """
        return pulumi.get(self, "forward_ip")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the GAAP proxy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Access domain of the GAAP proxy.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the GAAP proxy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        Security policy ID of the GAAP proxy.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID of the GAAP proxy to be queried. Conflict with `ids`.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="realserverRegion")
    def realserver_region(self) -> str:
        """
        Region of the GAAP realserver to be queried. Conflict with `ids`.
        """
        return pulumi.get(self, "realserver_region")

    @property
    @pulumi.getter
    def scalable(self) -> bool:
        """
        Indicates whether GAAP proxy can scalable.
        """
        return pulumi.get(self, "scalable")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the GAAP proxy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportProtocols")
    def support_protocols(self) -> Sequence[str]:
        """
        Supported protocols of the GAAP proxy.
        """
        return pulumi.get(self, "support_protocols")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of the GAAP proxy to be queried. Support up to 5, display the information as long as it matches one.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the GAAP proxy.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProxiesStatusInstanceStatusSetResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 status: str):
        """
        :param str instance_id: proxy instance ID.
        :param str status: proxy status.Among them:
               - RUNNING indicates running;
               - CREATING indicates being created;
               - DESTROYING indicates being destroyed;
               - OPENING indicates being opened;
               - CLOSING indicates being closed;
               - Closed indicates that it has been closed;
               - ADJUSTING represents a configuration change in progress;
               - ISOLATING indicates being isolated;
               - ISOLATED indicates that it has been isolated;
               - MOVING indicates that migration is in progress.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        proxy instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        proxy status.Among them:
        - RUNNING indicates running;
        - CREATING indicates being created;
        - DESTROYING indicates being destroyed;
        - OPENING indicates being opened;
        - CLOSING indicates being closed;
        - Closed indicates that it has been closed;
        - ADJUSTING represents a configuration change in progress;
        - ISOLATING indicates being isolated;
        - ISOLATED indicates that it has been isolated;
        - MOVING indicates that migration is in progress.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetProxyAndStatisticsListenersProxySetResult(dict):
    def __init__(__self__, *,
                 listener_lists: Sequence['outputs.GetProxyAndStatisticsListenersProxySetListenerListResult'],
                 proxy_id: str,
                 proxy_name: str):
        """
        :param Sequence['GetProxyAndStatisticsListenersProxySetListenerListArgs'] listener_lists: Listener List.
        :param str proxy_id: Proxy Id.
        :param str proxy_name: Proxy Name.
        """
        pulumi.set(__self__, "listener_lists", listener_lists)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "proxy_name", proxy_name)

    @property
    @pulumi.getter(name="listenerLists")
    def listener_lists(self) -> Sequence['outputs.GetProxyAndStatisticsListenersProxySetListenerListResult']:
        """
        Listener List.
        """
        return pulumi.get(self, "listener_lists")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        """
        Proxy Id.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> str:
        """
        Proxy Name.
        """
        return pulumi.get(self, "proxy_name")


@pulumi.output_type
class GetProxyAndStatisticsListenersProxySetListenerListResult(dict):
    def __init__(__self__, *,
                 listener_id: str,
                 listener_name: str,
                 port: int,
                 protocol: str):
        """
        :param str listener_id: Listener Id.
        :param str listener_name: Listener Name.
        :param int port: listerned port.
        :param str protocol: Listener protocol type.
        """
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        Listener Id.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        """
        Listener Name.
        """
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        listerned port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Listener protocol type.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetProxyDetailProxyDetailResult(dict):
    def __init__(__self__, *,
                 access_region: str,
                 access_region_infos: Sequence['outputs.GetProxyDetailProxyDetailAccessRegionInfoResult'],
                 ban_status: str,
                 bandwidth: int,
                 billing_type: int,
                 client_ip_methods: Sequence[int],
                 concurrent: int,
                 create_time: int,
                 domain: str,
                 feature_bitmap: int,
                 forward_ip: str,
                 group_id: str,
                 http3_supported: int,
                 in_ban_blacklist: int,
                 instance_id: str,
                 ip: str,
                 ip_address_version: str,
                 ip_lists: Sequence['outputs.GetProxyDetailProxyDetailIpListResult'],
                 is_support_tls_choice: int,
                 modify_config_time: int,
                 network_type: str,
                 package_type: str,
                 policy_id: str,
                 project_id: int,
                 proxy_id: str,
                 proxy_name: str,
                 proxy_type: int,
                 real_server_region: str,
                 real_server_region_infos: Sequence['outputs.GetProxyDetailProxyDetailRealServerRegionInfoResult'],
                 related_global_domains: Sequence[str],
                 scalarable: int,
                 status: str,
                 support_protocols: Sequence[str],
                 support_security: int,
                 tag_sets: Sequence['outputs.GetProxyDetailProxyDetailTagSetResult'],
                 version: str):
        """
        :param str access_region: Access Region.
        :param Sequence['GetProxyDetailProxyDetailAccessRegionInfoArgs'] access_region_infos: Detailed information about the access region, including the region ID and domain name.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str ban_status: Blocking and Unblocking Status: BANNED indicates that the ban has been lifted, RECOVER indicates that the ban has been lifted or not, BANNING indicates that the ban is in progress, RECOVERING indicates that the ban is being lifted, BAN_FAILED indicates that the ban has failed, RECOVER_FAILED indicates that the unblocking has failed.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int bandwidth: Band width.
        :param int billing_type: Billing type: 0 represents bandwidth based billing, and 1 represents traffic based billing.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence[int] client_ip_methods: The method of obtaining client IP through proxys, where 0 represents TOA and 1 represents Proxy ProtocolNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int concurrent: Concurrent, in 10000 pieces/second.
        :param int create_time: The creation time, using a Unix timestamp, represents the number of seconds that have passed since January 1, 1970 (midnight UTC/GMT).
        :param str domain: Domain.
        :param int feature_bitmap: Property bitmap, where each bit represents a property, where:0 indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str forward_ip: proxy forwarding IP.
        :param str group_id: proxy group ID, which exists when a proxy belongs to a certain proxy group.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int http3_supported: Identification that supports the Http3 protocol, where:0 indicates shutdown;1 indicates enabled.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int in_ban_blacklist: Is it on the banned blacklist? 0 indicates not on the blacklist, and 1 indicates on the blacklist.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str instance_id: (Old parameter, please use ProxyId) Proxy instance ID.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str ip: IP.
        :param str ip_address_version: IP version: IPv4, IPv6Note: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence['GetProxyDetailProxyDetailIpListArgs'] ip_lists: IP ListNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int is_support_tls_choice: Whether to allow TLS configuration.0-no support, 1-expressed support.
        :param int modify_config_time: Configuration change timeNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str network_type: A list of network types supported by the access area, with normal indicating support for regular BGP, cn2 indicating premium BGP, triple indicating three networks, and secure_EIP represents a custom secure EIP.
        :param str package_type: proxy package type: Thunder represents standard proxy, Accelerator represents silver acceleration proxy,CrossBorder represents a cross-border proxy.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str policy_id: Security policy ID, which exists when a security policy is set.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int project_id: Project Id.
        :param str proxy_id: Proxy Id.
        :param str proxy_name: Proxy Name.
        :param int proxy_type: proxy type, 100 represents THUNDER proxy, 103 represents Microsoft cooperation proxyNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str real_server_region: Real Server Region.
        :param Sequence['GetProxyDetailProxyDetailRealServerRegionInfoArgs'] real_server_region_infos: Detailed information of the real server region, including the region ID and domain name.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence[str] related_global_domains: List of domain names associated with resolutionNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int scalarable: 1. This proxy can be scaled and expanded; 0, this proxy cannot be scaled or expanded.
        :param str status: proxy status. Among them:RUNNING indicates running;CREATING indicates being created;DESTROYING indicates being destroyed;OPENING indicates being opened;CLOSING indicates being closed;Closed indicates that it has been closed;ADJUSTING represents a configuration change in progress;ISOLATING indicates being isolated;ISOLATED indicates that it has been isolated;CLONING indicates copying;RECOVERING indicates that the proxy is being maintained;MOVING indicates that migration is in progress.
        :param Sequence[str] support_protocols: Supported protocol types.
        :param int support_security: Does it support security group configurationNote: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence['GetProxyDetailProxyDetailTagSetArgs'] tag_sets: tag list, when there are no labels, this field is an empty list.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str version: Version 1.0, 2.0, 3.0.
        """
        pulumi.set(__self__, "access_region", access_region)
        pulumi.set(__self__, "access_region_infos", access_region_infos)
        pulumi.set(__self__, "ban_status", ban_status)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "billing_type", billing_type)
        pulumi.set(__self__, "client_ip_methods", client_ip_methods)
        pulumi.set(__self__, "concurrent", concurrent)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "forward_ip", forward_ip)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "http3_supported", http3_supported)
        pulumi.set(__self__, "in_ban_blacklist", in_ban_blacklist)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_address_version", ip_address_version)
        pulumi.set(__self__, "ip_lists", ip_lists)
        pulumi.set(__self__, "is_support_tls_choice", is_support_tls_choice)
        pulumi.set(__self__, "modify_config_time", modify_config_time)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "proxy_name", proxy_name)
        pulumi.set(__self__, "proxy_type", proxy_type)
        pulumi.set(__self__, "real_server_region", real_server_region)
        pulumi.set(__self__, "real_server_region_infos", real_server_region_infos)
        pulumi.set(__self__, "related_global_domains", related_global_domains)
        pulumi.set(__self__, "scalarable", scalarable)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_protocols", support_protocols)
        pulumi.set(__self__, "support_security", support_security)
        pulumi.set(__self__, "tag_sets", tag_sets)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessRegion")
    def access_region(self) -> str:
        """
        Access Region.
        """
        return pulumi.get(self, "access_region")

    @property
    @pulumi.getter(name="accessRegionInfos")
    def access_region_infos(self) -> Sequence['outputs.GetProxyDetailProxyDetailAccessRegionInfoResult']:
        """
        Detailed information about the access region, including the region ID and domain name.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "access_region_infos")

    @property
    @pulumi.getter(name="banStatus")
    def ban_status(self) -> str:
        """
        Blocking and Unblocking Status: BANNED indicates that the ban has been lifted, RECOVER indicates that the ban has been lifted or not, BANNING indicates that the ban is in progress, RECOVERING indicates that the ban is being lifted, BAN_FAILED indicates that the ban has failed, RECOVER_FAILED indicates that the unblocking has failed.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "ban_status")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Band width.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> int:
        """
        Billing type: 0 represents bandwidth based billing, and 1 represents traffic based billing.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="clientIpMethods")
    def client_ip_methods(self) -> Sequence[int]:
        """
        The method of obtaining client IP through proxys, where 0 represents TOA and 1 represents Proxy ProtocolNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "client_ip_methods")

    @property
    @pulumi.getter
    def concurrent(self) -> int:
        """
        Concurrent, in 10000 pieces/second.
        """
        return pulumi.get(self, "concurrent")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        The creation time, using a Unix timestamp, represents the number of seconds that have passed since January 1, 1970 (midnight UTC/GMT).
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        """
        Property bitmap, where each bit represents a property, where:0 indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="forwardIp")
    def forward_ip(self) -> str:
        """
        proxy forwarding IP.
        """
        return pulumi.get(self, "forward_ip")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        proxy group ID, which exists when a proxy belongs to a certain proxy group.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="http3Supported")
    def http3_supported(self) -> int:
        """
        Identification that supports the Http3 protocol, where:0 indicates shutdown;1 indicates enabled.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "http3_supported")

    @property
    @pulumi.getter(name="inBanBlacklist")
    def in_ban_blacklist(self) -> int:
        """
        Is it on the banned blacklist? 0 indicates not on the blacklist, and 1 indicates on the blacklist.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "in_ban_blacklist")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        (Old parameter, please use ProxyId) Proxy instance ID.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> str:
        """
        IP version: IPv4, IPv6Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "ip_address_version")

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Sequence['outputs.GetProxyDetailProxyDetailIpListResult']:
        """
        IP ListNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "ip_lists")

    @property
    @pulumi.getter(name="isSupportTlsChoice")
    def is_support_tls_choice(self) -> int:
        """
        Whether to allow TLS configuration.0-no support, 1-expressed support.
        """
        return pulumi.get(self, "is_support_tls_choice")

    @property
    @pulumi.getter(name="modifyConfigTime")
    def modify_config_time(self) -> int:
        """
        Configuration change timeNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "modify_config_time")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        A list of network types supported by the access area, with normal indicating support for regular BGP, cn2 indicating premium BGP, triple indicating three networks, and secure_EIP represents a custom secure EIP.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> str:
        """
        proxy package type: Thunder represents standard proxy, Accelerator represents silver acceleration proxy,CrossBorder represents a cross-border proxy.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        """
        Security policy ID, which exists when a security policy is set.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project Id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        """
        Proxy Id.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="proxyName")
    def proxy_name(self) -> str:
        """
        Proxy Name.
        """
        return pulumi.get(self, "proxy_name")

    @property
    @pulumi.getter(name="proxyType")
    def proxy_type(self) -> int:
        """
        proxy type, 100 represents THUNDER proxy, 103 represents Microsoft cooperation proxyNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "proxy_type")

    @property
    @pulumi.getter(name="realServerRegion")
    def real_server_region(self) -> str:
        """
        Real Server Region.
        """
        return pulumi.get(self, "real_server_region")

    @property
    @pulumi.getter(name="realServerRegionInfos")
    def real_server_region_infos(self) -> Sequence['outputs.GetProxyDetailProxyDetailRealServerRegionInfoResult']:
        """
        Detailed information of the real server region, including the region ID and domain name.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "real_server_region_infos")

    @property
    @pulumi.getter(name="relatedGlobalDomains")
    def related_global_domains(self) -> Sequence[str]:
        """
        List of domain names associated with resolutionNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "related_global_domains")

    @property
    @pulumi.getter
    def scalarable(self) -> int:
        """
        1. This proxy can be scaled and expanded; 0, this proxy cannot be scaled or expanded.
        """
        return pulumi.get(self, "scalarable")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        proxy status. Among them:RUNNING indicates running;CREATING indicates being created;DESTROYING indicates being destroyed;OPENING indicates being opened;CLOSING indicates being closed;Closed indicates that it has been closed;ADJUSTING represents a configuration change in progress;ISOLATING indicates being isolated;ISOLATED indicates that it has been isolated;CLONING indicates copying;RECOVERING indicates that the proxy is being maintained;MOVING indicates that migration is in progress.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportProtocols")
    def support_protocols(self) -> Sequence[str]:
        """
        Supported protocol types.
        """
        return pulumi.get(self, "support_protocols")

    @property
    @pulumi.getter(name="supportSecurity")
    def support_security(self) -> int:
        """
        Does it support security group configurationNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "support_security")

    @property
    @pulumi.getter(name="tagSets")
    def tag_sets(self) -> Sequence['outputs.GetProxyDetailProxyDetailTagSetResult']:
        """
        tag list, when there are no labels, this field is an empty list.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "tag_sets")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version 1.0, 2.0, 3.0.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProxyDetailProxyDetailAccessRegionInfoResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetProxyDetailProxyDetailAccessRegionInfoSupportFeatureResult']):
        """
        :param int feature_bitmap: Property bitmap, where each bit represents a property, where:0 indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str idc_type: The type of computer room, where dc represents the DataCenter data center and ec represents the EdgeComputing edge node.
        :param str region_area: Region of the computer room.
        :param str region_area_name: Region name of the computer room.
        :param str region_id: Region Id.
        :param str region_name: Region Name.
        :param Sequence['GetProxyDetailProxyDetailAccessRegionInfoSupportFeatureArgs'] support_features: Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        """
        Property bitmap, where each bit represents a property, where:0 indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        """
        The type of computer room, where dc represents the DataCenter data center and ec represents the EdgeComputing edge node.
        """
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        """
        Region of the computer room.
        """
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        """
        Region name of the computer room.
        """
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        Region Id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        Region Name.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetProxyDetailProxyDetailAccessRegionInfoSupportFeatureResult']:
        """
        Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetProxyDetailProxyDetailAccessRegionInfoSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        """
        :param Sequence[str] network_types: A list of network types supported by the access area, with normal indicating support for regular BGP, cn2 indicating premium BGP, triple indicating three networks, and secure_EIP represents a custom secure EIP.
        """
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        """
        A list of network types supported by the access area, with normal indicating support for regular BGP, cn2 indicating premium BGP, triple indicating three networks, and secure_EIP represents a custom secure EIP.
        """
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetProxyDetailProxyDetailIpListResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 ip: str,
                 provider: str):
        """
        :param int bandwidth: Band width.
        :param str ip: IP.
        :param str provider: Supplier, BGP represents default, CMCC represents China Mobile, CUCC represents China Unicom, and CTCC represents China Telecom.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Band width.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Supplier, BGP represents default, CMCC represents China Mobile, CUCC represents China Unicom, and CTCC represents China Telecom.
        """
        return pulumi.get(self, "provider")


@pulumi.output_type
class GetProxyDetailProxyDetailRealServerRegionInfoResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetProxyDetailProxyDetailRealServerRegionInfoSupportFeatureResult']):
        """
        :param int feature_bitmap: Property bitmap, where each bit represents a property, where:0 indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str idc_type: The type of computer room, where dc represents the DataCenter data center and ec represents the EdgeComputing edge node.
        :param str region_area: Region of the computer room.
        :param str region_area_name: Region name of the computer room.
        :param str region_id: Region Id.
        :param str region_name: Region Name.
        :param Sequence['GetProxyDetailProxyDetailRealServerRegionInfoSupportFeatureArgs'] support_features: Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        """
        Property bitmap, where each bit represents a property, where:0 indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        """
        The type of computer room, where dc represents the DataCenter data center and ec represents the EdgeComputing edge node.
        """
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        """
        Region of the computer room.
        """
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        """
        Region name of the computer room.
        """
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        Region Id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        Region Name.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetProxyDetailProxyDetailRealServerRegionInfoSupportFeatureResult']:
        """
        Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetProxyDetailProxyDetailRealServerRegionInfoSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        """
        :param Sequence[str] network_types: A list of network types supported by the access area, with normal indicating support for regular BGP, cn2 indicating premium BGP, triple indicating three networks, and secure_EIP represents a custom secure EIP.
        """
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        """
        A list of network types supported by the access area, with normal indicating support for regular BGP, cn2 indicating premium BGP, triple indicating three networks, and secure_EIP represents a custom secure EIP.
        """
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetProxyDetailProxyDetailTagSetResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag Key.
        :param str tag_value: Tag Value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag Key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag Value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetProxyGroupStatisticsStatisticsDataResult(dict):
    def __init__(__self__, *,
                 metric_datas: Sequence['outputs.GetProxyGroupStatisticsStatisticsDataMetricDataResult'],
                 metric_name: str):
        """
        :param Sequence['GetProxyGroupStatisticsStatisticsDataMetricDataArgs'] metric_datas: Metric Data.
        :param str metric_name: Metric Name.
        """
        pulumi.set(__self__, "metric_datas", metric_datas)
        pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter(name="metricDatas")
    def metric_datas(self) -> Sequence['outputs.GetProxyGroupStatisticsStatisticsDataMetricDataResult']:
        """
        Metric Data.
        """
        return pulumi.get(self, "metric_datas")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Metric Name.
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetProxyGroupStatisticsStatisticsDataMetricDataResult(dict):
    def __init__(__self__, *,
                 data: float,
                 time: int):
        """
        :param float data: DataNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int time: Time.
        """
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def data(self) -> float:
        """
        DataNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def time(self) -> int:
        """
        Time.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetProxyGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Filter conditions.
        :param Sequence[str] values: filtering value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter conditions.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        filtering value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProxyGroupsProxyGroupListResult(dict):
    def __init__(__self__, *,
                 create_time: int,
                 domain: str,
                 feature_bitmap: int,
                 group_id: str,
                 group_name: str,
                 http3_supported: int,
                 project_id: int,
                 proxy_type: int,
                 real_server_region_infos: Sequence['outputs.GetProxyGroupsProxyGroupListRealServerRegionInfoResult'],
                 status: str,
                 tag_sets: Sequence['outputs.GetProxyGroupsProxyGroupListTagSetResult'],
                 version: str):
        """
        :param int create_time: Create TimeNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str domain: proxy group domain nameNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int feature_bitmap: Property bitmap, where each bit represents a property, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str group_id: proxy group Id.
        :param str group_name: proxy Group NameNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int http3_supported: Supports the identification of Http3 features, where:0 indicates shutdown;1 indicates enabled.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int project_id: Project ID. Value range:-1, All projects under this user0, default projectOther values, specified items.
        :param int proxy_type: Does the proxy group include Microsoft proxysNote: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence['GetProxyGroupsProxyGroupListRealServerRegionInfoArgs'] real_server_region_infos: Real Server Region Info.
        :param str status: proxy group status.Among them,&#39;RUNNING&#39; indicates running;&#39;CREATING&#39; indicates being created;&#39;DESTROYING&#39; indicates being destroyed;&#39;MOVING&#39; indicates that the proxy is being migrated;&#39;CHANGING&#39; indicates partial deployment.
        :param Sequence['GetProxyGroupsProxyGroupListTagSetArgs'] tag_sets: Tag list, when this field exists, pulls the resource list under the corresponding tag.Supports a maximum of 5 labels. When there are two or more labels and any one of them is met, the proxy group will be pulled out.
        :param str version: proxy Group VersionNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "http3_supported", http3_supported)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "proxy_type", proxy_type)
        pulumi.set(__self__, "real_server_region_infos", real_server_region_infos)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag_sets", tag_sets)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Create TimeNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        proxy group domain nameNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        """
        Property bitmap, where each bit represents a property, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        proxy group Id.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        proxy Group NameNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="http3Supported")
    def http3_supported(self) -> int:
        """
        Supports the identification of Http3 features, where:0 indicates shutdown;1 indicates enabled.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "http3_supported")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID. Value range:-1, All projects under this user0, default projectOther values, specified items.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="proxyType")
    def proxy_type(self) -> int:
        """
        Does the proxy group include Microsoft proxysNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "proxy_type")

    @property
    @pulumi.getter(name="realServerRegionInfos")
    def real_server_region_infos(self) -> Sequence['outputs.GetProxyGroupsProxyGroupListRealServerRegionInfoResult']:
        """
        Real Server Region Info.
        """
        return pulumi.get(self, "real_server_region_infos")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        proxy group status.Among them,&#39;RUNNING&#39; indicates running;&#39;CREATING&#39; indicates being created;&#39;DESTROYING&#39; indicates being destroyed;&#39;MOVING&#39; indicates that the proxy is being migrated;&#39;CHANGING&#39; indicates partial deployment.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tagSets")
    def tag_sets(self) -> Sequence['outputs.GetProxyGroupsProxyGroupListTagSetResult']:
        """
        Tag list, when this field exists, pulls the resource list under the corresponding tag.Supports a maximum of 5 labels. When there are two or more labels and any one of them is met, the proxy group will be pulled out.
        """
        return pulumi.get(self, "tag_sets")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        proxy Group VersionNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProxyGroupsProxyGroupListRealServerRegionInfoResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetProxyGroupsProxyGroupListRealServerRegionInfoSupportFeatureResult']):
        """
        :param int feature_bitmap: Property bitmap, where each bit represents a property, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str idc_type: The type of computer room, where &#39;dc&#39; represents the DataCenter data center and &#39;ec&#39; represents the EdgeComputing edge node.
        :param str region_area: Region of the computer room.
        :param str region_area_name: Region name of the computer room.
        :param str region_id: Region Id.
        :param str region_name: Region Name.
        :param Sequence['GetProxyGroupsProxyGroupListRealServerRegionInfoSupportFeatureArgs'] support_features: Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        """
        Property bitmap, where each bit represents a property, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        """
        The type of computer room, where &#39;dc&#39; represents the DataCenter data center and &#39;ec&#39; represents the EdgeComputing edge node.
        """
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        """
        Region of the computer room.
        """
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        """
        Region name of the computer room.
        """
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        Region Id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        Region Name.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetProxyGroupsProxyGroupListRealServerRegionInfoSupportFeatureResult']:
        """
        Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetProxyGroupsProxyGroupListRealServerRegionInfoSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        """
        :param Sequence[str] network_types: A list of network types supported by the access area, with &#39;normal&#39; indicating support for regular BGP, &#39;cn2&#39; indicating premium BGP, &#39;triple&#39; indicating three networks, and &#39;secure_EIP&#39; represents a custom secure EIP.
        """
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        """
        A list of network types supported by the access area, with &#39;normal&#39; indicating support for regular BGP, &#39;cn2&#39; indicating premium BGP, &#39;triple&#39; indicating three networks, and &#39;secure_EIP&#39; represents a custom secure EIP.
        """
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetProxyGroupsProxyGroupListTagSetResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag Key.
        :param str tag_value: Tag Value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag Key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag Value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetProxyGroupsTagSetResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag Key.
        :param str tag_value: Tag Value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag Key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag Value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetProxyStatisticsStatisticsDataResult(dict):
    def __init__(__self__, *,
                 metric_datas: Sequence['outputs.GetProxyStatisticsStatisticsDataMetricDataResult'],
                 metric_name: str):
        """
        :param Sequence['GetProxyStatisticsStatisticsDataMetricDataArgs'] metric_datas: Metric Data.
        :param str metric_name: Metric Name.
        """
        pulumi.set(__self__, "metric_datas", metric_datas)
        pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter(name="metricDatas")
    def metric_datas(self) -> Sequence['outputs.GetProxyStatisticsStatisticsDataMetricDataResult']:
        """
        Metric Data.
        """
        return pulumi.get(self, "metric_datas")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        Metric Name.
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetProxyStatisticsStatisticsDataMetricDataResult(dict):
    def __init__(__self__, *,
                 data: float,
                 time: int):
        """
        :param float data: DataNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int time: Time.
        """
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def data(self) -> float:
        """
        DataNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def time(self) -> int:
        """
        Time.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetRealServersStatusRealServerStatusSetResult(dict):
    def __init__(__self__, *,
                 bind_status: int,
                 group_id: str,
                 proxy_id: str,
                 real_server_id: str):
        """
        :param int bind_status: Bind Status, 0 indicates unbound, 1 indicates bound by rules or listeners.
        :param str group_id: Bind the group ID of this real server, which is an empty string when not bound.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str proxy_id: Bind the proxy ID of this real server, which is an empty string when not bound.
        :param str real_server_id: Real Server Id.
        """
        pulumi.set(__self__, "bind_status", bind_status)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "real_server_id", real_server_id)

    @property
    @pulumi.getter(name="bindStatus")
    def bind_status(self) -> int:
        """
        Bind Status, 0 indicates unbound, 1 indicates bound by rules or listeners.
        """
        return pulumi.get(self, "bind_status")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        Bind the group ID of this real server, which is an empty string when not bound.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> str:
        """
        Bind the proxy ID of this real server, which is an empty string when not bound.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="realServerId")
    def real_server_id(self) -> str:
        """
        Real Server Id.
        """
        return pulumi.get(self, "real_server_id")


@pulumi.output_type
class GetRealserversRealserverResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 id: str,
                 ip: str,
                 name: str,
                 project_id: int,
                 tags: Mapping[str, Any]):
        """
        :param str domain: Domain of the GAAP realserver to be queried, conflict with `ip`.
        :param str id: ID of the GAAP realserver.
        :param str ip: IP of the GAAP realserver to be queried, conflict with `domain`.
        :param str name: Name of the GAAP realserver to be queried, the maximum length is 30.
        :param int project_id: ID of the project within the GAAP realserver to be queried, default value is `-1`, no set means all projects.
        :param Mapping[str, Any] tags: Tags of the GAAP proxy to be queried. Support up to 5, display the information as long as it matches one.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain of the GAAP realserver to be queried, conflict with `ip`.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the GAAP realserver.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP of the GAAP realserver to be queried, conflict with `domain`.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the GAAP realserver to be queried, the maximum length is 30.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        ID of the project within the GAAP realserver to be queried, default value is `-1`, no set means all projects.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of the GAAP proxy to be queried. Support up to 5, display the information as long as it matches one.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetRegionAndPriceBandwidthUnitPriceResult(dict):
    def __init__(__self__, *,
                 bandwidth_ranges: Sequence[int],
                 bandwidth_unit_price: float,
                 discount_bandwidth_unit_price: float):
        """
        :param Sequence[int] bandwidth_ranges: Band width Range.
        :param float bandwidth_unit_price: Band width Unit Price, Unit:yuan/Mbps/day.
        :param float discount_bandwidth_unit_price: Bandwidth discount price, unit:yuan/Mbps/day.
        """
        pulumi.set(__self__, "bandwidth_ranges", bandwidth_ranges)
        pulumi.set(__self__, "bandwidth_unit_price", bandwidth_unit_price)
        pulumi.set(__self__, "discount_bandwidth_unit_price", discount_bandwidth_unit_price)

    @property
    @pulumi.getter(name="bandwidthRanges")
    def bandwidth_ranges(self) -> Sequence[int]:
        """
        Band width Range.
        """
        return pulumi.get(self, "bandwidth_ranges")

    @property
    @pulumi.getter(name="bandwidthUnitPrice")
    def bandwidth_unit_price(self) -> float:
        """
        Band width Unit Price, Unit:yuan/Mbps/day.
        """
        return pulumi.get(self, "bandwidth_unit_price")

    @property
    @pulumi.getter(name="discountBandwidthUnitPrice")
    def discount_bandwidth_unit_price(self) -> float:
        """
        Bandwidth discount price, unit:yuan/Mbps/day.
        """
        return pulumi.get(self, "discount_bandwidth_unit_price")


@pulumi.output_type
class GetRegionAndPriceDestRegionSetResult(dict):
    def __init__(__self__, *,
                 feature_bitmap: int,
                 idc_type: str,
                 region_area: str,
                 region_area_name: str,
                 region_id: str,
                 region_name: str,
                 support_features: Sequence['outputs.GetRegionAndPriceDestRegionSetSupportFeatureResult']):
        """
        :param int feature_bitmap: Property bitmap, where each bit represents a property, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param str idc_type: Type of computer room, dc represents DataCenter data center, ec represents EdgeComputing edge node.
        :param str region_area: Region of the computer room.
        :param str region_area_name: Region name of the computer room.
        :param str region_id: Region Id.
        :param str region_name: Region Name.
        :param Sequence['GetRegionAndPriceDestRegionSetSupportFeatureArgs'] support_features: Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "feature_bitmap", feature_bitmap)
        pulumi.set(__self__, "idc_type", idc_type)
        pulumi.set(__self__, "region_area", region_area)
        pulumi.set(__self__, "region_area_name", region_area_name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "support_features", support_features)

    @property
    @pulumi.getter(name="featureBitmap")
    def feature_bitmap(self) -> int:
        """
        Property bitmap, where each bit represents a property, where:0, indicates that the feature is not supported;1, indicates support for this feature.The meaning of the feature bitmap is as follows (from right to left):The first bit supports 4-layer acceleration;The second bit supports 7-layer acceleration;The third bit supports Http3 access;The fourth bit supports IPv6;The fifth bit supports high-quality BGP access;The 6th bit supports three network access;The 7th bit supports QoS acceleration in the access segment.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "feature_bitmap")

    @property
    @pulumi.getter(name="idcType")
    def idc_type(self) -> str:
        """
        Type of computer room, dc represents DataCenter data center, ec represents EdgeComputing edge node.
        """
        return pulumi.get(self, "idc_type")

    @property
    @pulumi.getter(name="regionArea")
    def region_area(self) -> str:
        """
        Region of the computer room.
        """
        return pulumi.get(self, "region_area")

    @property
    @pulumi.getter(name="regionAreaName")
    def region_area_name(self) -> str:
        """
        Region name of the computer room.
        """
        return pulumi.get(self, "region_area_name")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        """
        Region Id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        Region Name.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetRegionAndPriceDestRegionSetSupportFeatureResult']:
        """
        Ability to access regional supportNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "support_features")


@pulumi.output_type
class GetRegionAndPriceDestRegionSetSupportFeatureResult(dict):
    def __init__(__self__, *,
                 network_types: Sequence[str]):
        """
        :param Sequence[str] network_types: A list of network types supported by the access area, with `normal` indicating support for regular BGP, `cn2` indicating premium BGP, `triple` indicating three networks, and `secure_eip` represents a custom secure EIP.
        """
        pulumi.set(__self__, "network_types", network_types)

    @property
    @pulumi.getter(name="networkTypes")
    def network_types(self) -> Sequence[str]:
        """
        A list of network types supported by the access area, with `normal` indicating support for regular BGP, `cn2` indicating premium BGP, `triple` indicating three networks, and `secure_eip` represents a custom secure EIP.
        """
        return pulumi.get(self, "network_types")


@pulumi.output_type
class GetResourcesByTagResourceSetResult(dict):
    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        """
        :param str resource_id: Resource Id.
        :param str resource_type: Resource type, where:Proxy represents the proxy;ProxyGroup represents a proxy group;RealServer represents the Real Server.If this field is not specified, all resources under the label will be queried.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        Resource Id.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Resource type, where:Proxy represents the proxy;ProxyGroup represents a proxy group;RealServer represents the Real Server.If this field is not specified, all resources under the label will be queried.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetRuleRealServersBindRealServerSetResult(dict):
    def __init__(__self__, *,
                 down_ip_lists: Sequence[str],
                 real_server_failover_role: str,
                 real_server_id: str,
                 real_server_ip: str,
                 real_server_port: int,
                 real_server_status: int,
                 real_server_weight: int):
        """
        :param Sequence[str] down_ip_lists: When the real server is a domain name, the domain name is resolved to one or more IPs, and this field represents the list of abnormal IPs. When the status is abnormal, but the field is empty, it indicates that the domain name resolution is abnormal.
        :param str real_server_failover_role: The primary and secondary roles of the real server:master represents primary, slave represents secondary, and this parameter must be in the active and standby mode of the real server when the listener is turned on.
        :param str real_server_id: Real Server Id.
        :param str real_server_ip: Real Server IP or domain.
        :param int real_server_port: Real Server PortNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int real_server_status: RealServerStatus: 0 indicates normal;1 indicates an exception.When the health check status is not enabled, it is always normal.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int real_server_weight: Real Server Weight.
        """
        pulumi.set(__self__, "down_ip_lists", down_ip_lists)
        pulumi.set(__self__, "real_server_failover_role", real_server_failover_role)
        pulumi.set(__self__, "real_server_id", real_server_id)
        pulumi.set(__self__, "real_server_ip", real_server_ip)
        pulumi.set(__self__, "real_server_port", real_server_port)
        pulumi.set(__self__, "real_server_status", real_server_status)
        pulumi.set(__self__, "real_server_weight", real_server_weight)

    @property
    @pulumi.getter(name="downIpLists")
    def down_ip_lists(self) -> Sequence[str]:
        """
        When the real server is a domain name, the domain name is resolved to one or more IPs, and this field represents the list of abnormal IPs. When the status is abnormal, but the field is empty, it indicates that the domain name resolution is abnormal.
        """
        return pulumi.get(self, "down_ip_lists")

    @property
    @pulumi.getter(name="realServerFailoverRole")
    def real_server_failover_role(self) -> str:
        """
        The primary and secondary roles of the real server:master represents primary, slave represents secondary, and this parameter must be in the active and standby mode of the real server when the listener is turned on.
        """
        return pulumi.get(self, "real_server_failover_role")

    @property
    @pulumi.getter(name="realServerId")
    def real_server_id(self) -> str:
        """
        Real Server Id.
        """
        return pulumi.get(self, "real_server_id")

    @property
    @pulumi.getter(name="realServerIp")
    def real_server_ip(self) -> str:
        """
        Real Server IP or domain.
        """
        return pulumi.get(self, "real_server_ip")

    @property
    @pulumi.getter(name="realServerPort")
    def real_server_port(self) -> int:
        """
        Real Server PortNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "real_server_port")

    @property
    @pulumi.getter(name="realServerStatus")
    def real_server_status(self) -> int:
        """
        RealServerStatus: 0 indicates normal;1 indicates an exception.When the health check status is not enabled, it is always normal.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "real_server_status")

    @property
    @pulumi.getter(name="realServerWeight")
    def real_server_weight(self) -> int:
        """
        Real Server Weight.
        """
        return pulumi.get(self, "real_server_weight")


@pulumi.output_type
class GetRuleRealServersRealServerSetResult(dict):
    def __init__(__self__, *,
                 in_ban_blacklist: int,
                 project_id: int,
                 real_server_id: str,
                 real_server_ip: str,
                 real_server_name: str):
        """
        :param int in_ban_blacklist: Is it on the banned blacklist? 0 indicates not on the blacklist, and 1 indicates on the blacklist.
        :param int project_id: Project Id.
        :param str real_server_id: Real Server Id.
        :param str real_server_ip: Real Server IP or domain.
        :param str real_server_name: Real Server Name.
        """
        pulumi.set(__self__, "in_ban_blacklist", in_ban_blacklist)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "real_server_id", real_server_id)
        pulumi.set(__self__, "real_server_ip", real_server_ip)
        pulumi.set(__self__, "real_server_name", real_server_name)

    @property
    @pulumi.getter(name="inBanBlacklist")
    def in_ban_blacklist(self) -> int:
        """
        Is it on the banned blacklist? 0 indicates not on the blacklist, and 1 indicates on the blacklist.
        """
        return pulumi.get(self, "in_ban_blacklist")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project Id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="realServerId")
    def real_server_id(self) -> str:
        """
        Real Server Id.
        """
        return pulumi.get(self, "real_server_id")

    @property
    @pulumi.getter(name="realServerIp")
    def real_server_ip(self) -> str:
        """
        Real Server IP or domain.
        """
        return pulumi.get(self, "real_server_ip")

    @property
    @pulumi.getter(name="realServerName")
    def real_server_name(self) -> str:
        """
        Real Server Name.
        """
        return pulumi.get(self, "real_server_name")


@pulumi.output_type
class GetSecurityRulesRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 id: str,
                 name: str,
                 port: str,
                 protocol: str):
        """
        :param str action: Policy of the rule to be queried.
        :param str cidr_ip: A network address block of the request source to be queried.
        :param str id: ID of the security policy rule.
        :param str name: Name of the security policy rule to be queried.
        :param str port: Port of the security policy rule to be queried.
        :param str protocol: Protocol of the security policy rule to be queried.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy of the rule to be queried.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        A network address block of the request source to be queried.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the security policy rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the security policy rule to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Port of the security policy rule to be queried.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol of the security policy rule to be queried.
        """
        return pulumi.get(self, "protocol")


