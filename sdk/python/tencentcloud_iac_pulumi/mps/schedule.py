# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScheduleArgs', 'Schedule']

@pulumi.input_type
class ScheduleArgs:
    def __init__(__self__, *,
                 activities: pulumi.Input[Sequence[pulumi.Input['ScheduleActivityArgs']]],
                 schedule_name: pulumi.Input[str],
                 trigger: pulumi.Input['ScheduleTriggerArgs'],
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ScheduleOutputStorageArgs']] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input['ScheduleTaskNotifyConfigArgs']] = None):
        """
        The set of arguments for constructing a Schedule resource.
        :param pulumi.Input[Sequence[pulumi.Input['ScheduleActivityArgs']]] activities: The subtasks of the scheme.
        :param pulumi.Input[str] schedule_name: The scheme name (max 128 characters). This name should be unique across your account.
        :param pulumi.Input['ScheduleTriggerArgs'] trigger: The trigger of the scheme. If a file is uploaded to the specified bucket, the scheme will be triggered.
        :param pulumi.Input[str] output_dir: The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this, the file will be saved to the trigger directory.
        :param pulumi.Input['ScheduleOutputStorageArgs'] output_storage: The bucket to save the output file. If you do not specify this parameter, the bucket in `Trigger` will be used.
        :param pulumi.Input[str] resource_id: Resource ID, you need to ensure that the corresponding resource is open. The default is the account main resource ID.
        :param pulumi.Input['ScheduleTaskNotifyConfigArgs'] task_notify_config: The notification configuration. If you do not specify this parameter, notifications will not be sent.
        """
        pulumi.set(__self__, "activities", activities)
        pulumi.set(__self__, "schedule_name", schedule_name)
        pulumi.set(__self__, "trigger", trigger)
        if output_dir is not None:
            pulumi.set(__self__, "output_dir", output_dir)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)

    @property
    @pulumi.getter
    def activities(self) -> pulumi.Input[Sequence[pulumi.Input['ScheduleActivityArgs']]]:
        """
        The subtasks of the scheme.
        """
        return pulumi.get(self, "activities")

    @activities.setter
    def activities(self, value: pulumi.Input[Sequence[pulumi.Input['ScheduleActivityArgs']]]):
        pulumi.set(self, "activities", value)

    @property
    @pulumi.getter(name="scheduleName")
    def schedule_name(self) -> pulumi.Input[str]:
        """
        The scheme name (max 128 characters). This name should be unique across your account.
        """
        return pulumi.get(self, "schedule_name")

    @schedule_name.setter
    def schedule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_name", value)

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Input['ScheduleTriggerArgs']:
        """
        The trigger of the scheme. If a file is uploaded to the specified bucket, the scheme will be triggered.
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: pulumi.Input['ScheduleTriggerArgs']):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this, the file will be saved to the trigger directory.
        """
        return pulumi.get(self, "output_dir")

    @output_dir.setter
    def output_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_dir", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ScheduleOutputStorageArgs']]:
        """
        The bucket to save the output file. If you do not specify this parameter, the bucket in `Trigger` will be used.
        """
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ScheduleOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID, you need to ensure that the corresponding resource is open. The default is the account main resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['ScheduleTaskNotifyConfigArgs']]:
        """
        The notification configuration. If you do not specify this parameter, notifications will not be sent.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['ScheduleTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)


@pulumi.input_type
class _ScheduleState:
    def __init__(__self__, *,
                 activities: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityArgs']]]] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ScheduleOutputStorageArgs']] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 schedule_name: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input['ScheduleTaskNotifyConfigArgs']] = None,
                 trigger: Optional[pulumi.Input['ScheduleTriggerArgs']] = None):
        """
        Input properties used for looking up and filtering Schedule resources.
        :param pulumi.Input[Sequence[pulumi.Input['ScheduleActivityArgs']]] activities: The subtasks of the scheme.
        :param pulumi.Input[str] output_dir: The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this, the file will be saved to the trigger directory.
        :param pulumi.Input['ScheduleOutputStorageArgs'] output_storage: The bucket to save the output file. If you do not specify this parameter, the bucket in `Trigger` will be used.
        :param pulumi.Input[str] resource_id: Resource ID, you need to ensure that the corresponding resource is open. The default is the account main resource ID.
        :param pulumi.Input[str] schedule_name: The scheme name (max 128 characters). This name should be unique across your account.
        :param pulumi.Input['ScheduleTaskNotifyConfigArgs'] task_notify_config: The notification configuration. If you do not specify this parameter, notifications will not be sent.
        :param pulumi.Input['ScheduleTriggerArgs'] trigger: The trigger of the scheme. If a file is uploaded to the specified bucket, the scheme will be triggered.
        """
        if activities is not None:
            pulumi.set(__self__, "activities", activities)
        if output_dir is not None:
            pulumi.set(__self__, "output_dir", output_dir)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if schedule_name is not None:
            pulumi.set(__self__, "schedule_name", schedule_name)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter
    def activities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityArgs']]]]:
        """
        The subtasks of the scheme.
        """
        return pulumi.get(self, "activities")

    @activities.setter
    def activities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScheduleActivityArgs']]]]):
        pulumi.set(self, "activities", value)

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this, the file will be saved to the trigger directory.
        """
        return pulumi.get(self, "output_dir")

    @output_dir.setter
    def output_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_dir", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ScheduleOutputStorageArgs']]:
        """
        The bucket to save the output file. If you do not specify this parameter, the bucket in `Trigger` will be used.
        """
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ScheduleOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID, you need to ensure that the corresponding resource is open. The default is the account main resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="scheduleName")
    def schedule_name(self) -> Optional[pulumi.Input[str]]:
        """
        The scheme name (max 128 characters). This name should be unique across your account.
        """
        return pulumi.get(self, "schedule_name")

    @schedule_name.setter
    def schedule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_name", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['ScheduleTaskNotifyConfigArgs']]:
        """
        The notification configuration. If you do not specify this parameter, notifications will not be sent.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['ScheduleTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input['ScheduleTriggerArgs']]:
        """
        The trigger of the scheme. If a file is uploaded to the specified bucket, the scheme will be triggered.
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input['ScheduleTriggerArgs']]):
        pulumi.set(self, "trigger", value)


class Schedule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleActivityArgs']]]]] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input[pulumi.InputType['ScheduleOutputStorageArgs']]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 schedule_name: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['ScheduleTaskNotifyConfigArgs']]] = None,
                 trigger: Optional[pulumi.Input[pulumi.InputType['ScheduleTriggerArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps schedule

        ## Example Usage
        ### Create a schedule through COS bucket

        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        object = tencentcloud.Cos.get_bucket_object(bucket=f"keep-bucket-{local['app_id']}",
            key="/mps-test/test.mov")
        output = tencentcloud.cos.Bucket("output",
            bucket=f"tf-bucket-mps-schedule-output-{local['app_id']}",
            force_clean=True,
            acl="public-read")
        schedule = tencentcloud.mps.Schedule("schedule",
            schedule_name="tf_test_mps_schedule_%d",
            trigger=tencentcloud.mps.ScheduleTriggerArgs(
                type="CosFileUpload",
                cos_file_upload_trigger=tencentcloud.mps.ScheduleTriggerCosFileUploadTriggerArgs(
                    bucket=object.bucket,
                    region="%s",
                    dir="/upload/",
                    formats=[
                        "flv",
                        "mov",
                    ],
                ),
            ),
            activities=[
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="input",
                    reardrive_indices=[
                        1,
                        2,
                    ],
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[3],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[
                        6,
                        7,
                    ],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[
                        4,
                        5,
                    ],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[10],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[10],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[10],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[8],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[9],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[10],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="output",
                ),
            ],
            output_storage=tencentcloud.mps.ScheduleOutputStorageArgs(
                type="COS",
                cos_output_storage=tencentcloud.mps.ScheduleOutputStorageCosOutputStorageArgs(
                    bucket=output.bucket,
                    region="%s",
                ),
            ),
            output_dir="output/")
        ```

        ## Import

        mps schedule can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Mps/schedule:Schedule schedule schedule_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleActivityArgs']]]] activities: The subtasks of the scheme.
        :param pulumi.Input[str] output_dir: The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this, the file will be saved to the trigger directory.
        :param pulumi.Input[pulumi.InputType['ScheduleOutputStorageArgs']] output_storage: The bucket to save the output file. If you do not specify this parameter, the bucket in `Trigger` will be used.
        :param pulumi.Input[str] resource_id: Resource ID, you need to ensure that the corresponding resource is open. The default is the account main resource ID.
        :param pulumi.Input[str] schedule_name: The scheme name (max 128 characters). This name should be unique across your account.
        :param pulumi.Input[pulumi.InputType['ScheduleTaskNotifyConfigArgs']] task_notify_config: The notification configuration. If you do not specify this parameter, notifications will not be sent.
        :param pulumi.Input[pulumi.InputType['ScheduleTriggerArgs']] trigger: The trigger of the scheme. If a file is uploaded to the specified bucket, the scheme will be triggered.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScheduleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps schedule

        ## Example Usage
        ### Create a schedule through COS bucket

        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        object = tencentcloud.Cos.get_bucket_object(bucket=f"keep-bucket-{local['app_id']}",
            key="/mps-test/test.mov")
        output = tencentcloud.cos.Bucket("output",
            bucket=f"tf-bucket-mps-schedule-output-{local['app_id']}",
            force_clean=True,
            acl="public-read")
        schedule = tencentcloud.mps.Schedule("schedule",
            schedule_name="tf_test_mps_schedule_%d",
            trigger=tencentcloud.mps.ScheduleTriggerArgs(
                type="CosFileUpload",
                cos_file_upload_trigger=tencentcloud.mps.ScheduleTriggerCosFileUploadTriggerArgs(
                    bucket=object.bucket,
                    region="%s",
                    dir="/upload/",
                    formats=[
                        "flv",
                        "mov",
                    ],
                ),
            ),
            activities=[
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="input",
                    reardrive_indices=[
                        1,
                        2,
                    ],
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[3],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[
                        6,
                        7,
                    ],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[
                        4,
                        5,
                    ],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[10],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[10],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[10],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[8],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[9],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="action-trans",
                    reardrive_indices=[10],
                    activity_para=tencentcloud.mps.ScheduleActivityActivityParaArgs(
                        transcode_task=tencentcloud.mps.ScheduleActivityActivityParaTranscodeTaskArgs(
                            definition=10,
                        ),
                    ),
                ),
                tencentcloud.mps.ScheduleActivityArgs(
                    activity_type="output",
                ),
            ],
            output_storage=tencentcloud.mps.ScheduleOutputStorageArgs(
                type="COS",
                cos_output_storage=tencentcloud.mps.ScheduleOutputStorageCosOutputStorageArgs(
                    bucket=output.bucket,
                    region="%s",
                ),
            ),
            output_dir="output/")
        ```

        ## Import

        mps schedule can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Mps/schedule:Schedule schedule schedule_id
        ```

        :param str resource_name: The name of the resource.
        :param ScheduleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScheduleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleActivityArgs']]]]] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input[pulumi.InputType['ScheduleOutputStorageArgs']]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 schedule_name: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['ScheduleTaskNotifyConfigArgs']]] = None,
                 trigger: Optional[pulumi.Input[pulumi.InputType['ScheduleTriggerArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScheduleArgs.__new__(ScheduleArgs)

            if activities is None and not opts.urn:
                raise TypeError("Missing required property 'activities'")
            __props__.__dict__["activities"] = activities
            __props__.__dict__["output_dir"] = output_dir
            __props__.__dict__["output_storage"] = output_storage
            __props__.__dict__["resource_id"] = resource_id
            if schedule_name is None and not opts.urn:
                raise TypeError("Missing required property 'schedule_name'")
            __props__.__dict__["schedule_name"] = schedule_name
            __props__.__dict__["task_notify_config"] = task_notify_config
            if trigger is None and not opts.urn:
                raise TypeError("Missing required property 'trigger'")
            __props__.__dict__["trigger"] = trigger
        super(Schedule, __self__).__init__(
            'tencentcloud:Mps/schedule:Schedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleActivityArgs']]]]] = None,
            output_dir: Optional[pulumi.Input[str]] = None,
            output_storage: Optional[pulumi.Input[pulumi.InputType['ScheduleOutputStorageArgs']]] = None,
            resource_id: Optional[pulumi.Input[str]] = None,
            schedule_name: Optional[pulumi.Input[str]] = None,
            task_notify_config: Optional[pulumi.Input[pulumi.InputType['ScheduleTaskNotifyConfigArgs']]] = None,
            trigger: Optional[pulumi.Input[pulumi.InputType['ScheduleTriggerArgs']]] = None) -> 'Schedule':
        """
        Get an existing Schedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleActivityArgs']]]] activities: The subtasks of the scheme.
        :param pulumi.Input[str] output_dir: The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this, the file will be saved to the trigger directory.
        :param pulumi.Input[pulumi.InputType['ScheduleOutputStorageArgs']] output_storage: The bucket to save the output file. If you do not specify this parameter, the bucket in `Trigger` will be used.
        :param pulumi.Input[str] resource_id: Resource ID, you need to ensure that the corresponding resource is open. The default is the account main resource ID.
        :param pulumi.Input[str] schedule_name: The scheme name (max 128 characters). This name should be unique across your account.
        :param pulumi.Input[pulumi.InputType['ScheduleTaskNotifyConfigArgs']] task_notify_config: The notification configuration. If you do not specify this parameter, notifications will not be sent.
        :param pulumi.Input[pulumi.InputType['ScheduleTriggerArgs']] trigger: The trigger of the scheme. If a file is uploaded to the specified bucket, the scheme will be triggered.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScheduleState.__new__(_ScheduleState)

        __props__.__dict__["activities"] = activities
        __props__.__dict__["output_dir"] = output_dir
        __props__.__dict__["output_storage"] = output_storage
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["schedule_name"] = schedule_name
        __props__.__dict__["task_notify_config"] = task_notify_config
        __props__.__dict__["trigger"] = trigger
        return Schedule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def activities(self) -> pulumi.Output[Sequence['outputs.ScheduleActivity']]:
        """
        The subtasks of the scheme.
        """
        return pulumi.get(self, "activities")

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this, the file will be saved to the trigger directory.
        """
        return pulumi.get(self, "output_dir")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> pulumi.Output[Optional['outputs.ScheduleOutputStorage']]:
        """
        The bucket to save the output file. If you do not specify this parameter, the bucket in `Trigger` will be used.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[Optional[str]]:
        """
        Resource ID, you need to ensure that the corresponding resource is open. The default is the account main resource ID.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="scheduleName")
    def schedule_name(self) -> pulumi.Output[str]:
        """
        The scheme name (max 128 characters). This name should be unique across your account.
        """
        return pulumi.get(self, "schedule_name")

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> pulumi.Output['outputs.ScheduleTaskNotifyConfig']:
        """
        The notification configuration. If you do not specify this parameter, notifications will not be sent.
        """
        return pulumi.get(self, "task_notify_config")

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Output['outputs.ScheduleTrigger']:
        """
        The trigger of the scheme. If a file is uploaded to the specified bucket, the scheme will be triggered.
        """
        return pulumi.get(self, "trigger")

