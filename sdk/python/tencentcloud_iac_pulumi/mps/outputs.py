# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AdaptiveDynamicStreamingTemplateStreamInfo',
    'AdaptiveDynamicStreamingTemplateStreamInfoAudio',
    'AdaptiveDynamicStreamingTemplateStreamInfoVideo',
    'AiAnalysisTemplateClassificationConfigure',
    'AiAnalysisTemplateCoverConfigure',
    'AiAnalysisTemplateFrameTagConfigure',
    'AiAnalysisTemplateTagConfigure',
    'AiRecognitionTemplateAsrFullTextConfigure',
    'AiRecognitionTemplateAsrWordsConfigure',
    'AiRecognitionTemplateFaceConfigure',
    'AiRecognitionTemplateOcrFullTextConfigure',
    'AiRecognitionTemplateOcrWordsConfigure',
    'ContentReviewTemplatePoliticalConfigure',
    'ContentReviewTemplatePoliticalConfigureAsrReviewInfo',
    'ContentReviewTemplatePoliticalConfigureImgReviewInfo',
    'ContentReviewTemplatePoliticalConfigureOcrReviewInfo',
    'ContentReviewTemplatePornConfigure',
    'ContentReviewTemplatePornConfigureAsrReviewInfo',
    'ContentReviewTemplatePornConfigureImgReviewInfo',
    'ContentReviewTemplatePornConfigureOcrReviewInfo',
    'ContentReviewTemplateProhibitedConfigure',
    'ContentReviewTemplateProhibitedConfigureAsrReviewInfo',
    'ContentReviewTemplateProhibitedConfigureOcrReviewInfo',
    'ContentReviewTemplateTerrorismConfigure',
    'ContentReviewTemplateTerrorismConfigureImgReviewInfo',
    'ContentReviewTemplateTerrorismConfigureOcrReviewInfo',
    'ContentReviewTemplateUserDefineConfigure',
    'ContentReviewTemplateUserDefineConfigureAsrReviewInfo',
    'ContentReviewTemplateUserDefineConfigureFaceReviewInfo',
    'ContentReviewTemplateUserDefineConfigureOcrReviewInfo',
    'EditMediaOperationFileInfo',
    'EditMediaOperationFileInfoInputInfo',
    'EditMediaOperationFileInfoInputInfoCosInputInfo',
    'EditMediaOperationFileInfoInputInfoS3InputInfo',
    'EditMediaOperationFileInfoInputInfoUrlInputInfo',
    'EditMediaOperationOutputConfig',
    'EditMediaOperationOutputStorage',
    'EditMediaOperationOutputStorageCosOutputStorage',
    'EditMediaOperationOutputStorageS3OutputStorage',
    'EditMediaOperationTaskNotifyConfig',
    'EditMediaOperationTaskNotifyConfigAwsSqs',
    'FlowInputGroup',
    'FlowInputGroupHlsPullSettings',
    'FlowInputGroupHlsPullSettingsSourceAddress',
    'FlowInputGroupResilientStream',
    'FlowInputGroupRtmpPullSettings',
    'FlowInputGroupRtmpPullSettingsSourceAddress',
    'FlowInputGroupRtpSettings',
    'FlowInputGroupRtspPullSettings',
    'FlowInputGroupRtspPullSettingsSourceAddress',
    'FlowInputGroupSrtSettings',
    'FlowInputGroupSrtSettingsSourceAddress',
    'InputInputGroup',
    'InputInputGroupHlsPullSettings',
    'InputInputGroupHlsPullSettingsSourceAddress',
    'InputInputGroupResilientStream',
    'InputInputGroupRtmpPullSettings',
    'InputInputGroupRtmpPullSettingsSourceAddress',
    'InputInputGroupRtpSettings',
    'InputInputGroupRtspPullSettings',
    'InputInputGroupRtspPullSettingsSourceAddress',
    'InputInputGroupSrtSettings',
    'InputInputGroupSrtSettingsSourceAddress',
    'OutputOutput',
    'OutputOutputRtmpSettings',
    'OutputOutputRtmpSettingsDestination',
    'OutputOutputRtpSettings',
    'OutputOutputRtpSettingsDestination',
    'OutputOutputSrtSettings',
    'OutputOutputSrtSettingsDestination',
    'ProcessLiveStreamOperationAiAnalysisTask',
    'ProcessLiveStreamOperationAiContentReviewTask',
    'ProcessLiveStreamOperationAiQualityControlTask',
    'ProcessLiveStreamOperationAiRecognitionTask',
    'ProcessLiveStreamOperationOutputStorage',
    'ProcessLiveStreamOperationOutputStorageCosOutputStorage',
    'ProcessLiveStreamOperationOutputStorageS3OutputStorage',
    'ProcessLiveStreamOperationTaskNotifyConfig',
    'ProcessMediaOperationAiAnalysisTask',
    'ProcessMediaOperationAiContentReviewTask',
    'ProcessMediaOperationAiQualityControlTask',
    'ProcessMediaOperationAiRecognitionTask',
    'ProcessMediaOperationInputInfo',
    'ProcessMediaOperationInputInfoCosInputInfo',
    'ProcessMediaOperationInputInfoS3InputInfo',
    'ProcessMediaOperationInputInfoUrlInputInfo',
    'ProcessMediaOperationMediaProcessTask',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSet',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ProcessMediaOperationOutputStorage',
    'ProcessMediaOperationOutputStorageCosOutputStorage',
    'ProcessMediaOperationOutputStorageS3OutputStorage',
    'ProcessMediaOperationTaskNotifyConfig',
    'ProcessMediaOperationTaskNotifyConfigAwsSqa',
    'ScheduleActivity',
    'ScheduleActivityActivityPara',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTask',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ScheduleActivityActivityParaAiAnalysisTask',
    'ScheduleActivityActivityParaAiContentReviewTask',
    'ScheduleActivityActivityParaAiRecognitionTask',
    'ScheduleActivityActivityParaAnimatedGraphicTask',
    'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage',
    'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaImageSpriteTask',
    'ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat',
    'ScheduleActivityActivityParaImageSpriteTaskOutputStorage',
    'ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaSampleSnapshotTask',
    'ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat',
    'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage',
    'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTask',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ScheduleActivityActivityParaTranscodeTask',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameter',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo',
    'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskMosaicSet',
    'ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat',
    'ScheduleActivityActivityParaTranscodeTaskOutputStorage',
    'ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage',
    'ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameter',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig',
    'ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate',
    'ScheduleActivityActivityParaTranscodeTaskRawParameter',
    'ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate',
    'ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig',
    'ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSet',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo',
    'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'ScheduleOutputStorage',
    'ScheduleOutputStorageCosOutputStorage',
    'ScheduleOutputStorageS3OutputStorage',
    'ScheduleTaskNotifyConfig',
    'ScheduleTaskNotifyConfigAwsSqs',
    'ScheduleTrigger',
    'ScheduleTriggerAwsS3FileUploadTrigger',
    'ScheduleTriggerAwsS3FileUploadTriggerAwsSqs',
    'ScheduleTriggerCosFileUploadTrigger',
    'TranscodeTemplateAudioTemplate',
    'TranscodeTemplateEnhanceConfig',
    'TranscodeTemplateEnhanceConfigVideoEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair',
    'TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceDenoise',
    'TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate',
    'TranscodeTemplateEnhanceConfigVideoEnhanceHdr',
    'TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair',
    'TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution',
    'TranscodeTemplateTehdConfig',
    'TranscodeTemplateVideoTemplate',
    'WatermarkTemplateImageTemplate',
    'WatermarkTemplateSvgTemplate',
    'WatermarkTemplateTextTemplate',
    'WithdrawsWatermarkOperationInputInfo',
    'WithdrawsWatermarkOperationInputInfoCosInputInfo',
    'WithdrawsWatermarkOperationInputInfoS3InputInfo',
    'WithdrawsWatermarkOperationInputInfoUrlInputInfo',
    'WithdrawsWatermarkOperationTaskNotifyConfig',
    'WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs',
    'WorkflowAiAnalysisTask',
    'WorkflowAiContentReviewTask',
    'WorkflowAiRecognitionTask',
    'WorkflowMediaProcessTask',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSet',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskImageSpriteTaskSet',
    'WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage',
    'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSet',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage',
    'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowOutputStorage',
    'WorkflowOutputStorageCosOutputStorage',
    'WorkflowTaskNotifyConfig',
    'WorkflowTrigger',
    'WorkflowTriggerCosFileUploadTrigger',
    'GetMediaMetaDataInputInfoResult',
    'GetMediaMetaDataInputInfoCosInputInfoResult',
    'GetMediaMetaDataInputInfoS3InputInfoResult',
    'GetMediaMetaDataInputInfoUrlInputInfoResult',
    'GetMediaMetaDataMetaDataResult',
    'GetMediaMetaDataMetaDataAudioStreamSetResult',
    'GetMediaMetaDataMetaDataVideoStreamSetResult',
    'GetSchedulesScheduleInfoSetResult',
    'GetSchedulesScheduleInfoSetActivityResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormatResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormatResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormatResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfigResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfigResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult',
    'GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult',
    'GetSchedulesScheduleInfoSetOutputStorageResult',
    'GetSchedulesScheduleInfoSetOutputStorageCosOutputStorageResult',
    'GetSchedulesScheduleInfoSetOutputStorageS3OutputStorageResult',
    'GetSchedulesScheduleInfoSetTaskNotifyConfigResult',
    'GetSchedulesScheduleInfoSetTaskNotifyConfigAwsSqResult',
    'GetSchedulesScheduleInfoSetTriggerResult',
    'GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerResult',
    'GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSqResult',
    'GetSchedulesScheduleInfoSetTriggerCosFileUploadTriggerResult',
    'GetTasksTaskSetResult',
]

@pulumi.output_type
class AdaptiveDynamicStreamingTemplateStreamInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdaptiveDynamicStreamingTemplateStreamInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio: 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoAudio',
                 video: 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoVideo',
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None):
        """
        :param 'AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs' audio: Audio parameter information.
        :param 'AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs' video: Video parameter information.
        :param int remove_audio: Whether to remove audio stream, value:0: reserved.1: remove.
        :param int remove_video: Whether to remove video stream, value:0: reserved.1: remove.
        """
        pulumi.set(__self__, "audio", audio)
        pulumi.set(__self__, "video", video)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)

    @property
    @pulumi.getter
    def audio(self) -> 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoAudio':
        """
        Audio parameter information.
        """
        return pulumi.get(self, "audio")

    @property
    @pulumi.getter
    def video(self) -> 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoVideo':
        """
        Video parameter information.
        """
        return pulumi.get(self, "video")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        """
        Whether to remove audio stream, value:0: reserved.1: remove.
        """
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        """
        Whether to remove video stream, value:0: reserved.1: remove.
        """
        return pulumi.get(self, "remove_video")


@pulumi.output_type
class AdaptiveDynamicStreamingTemplateStreamInfoAudio(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdaptiveDynamicStreamingTemplateStreamInfoAudio. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoAudio.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoAudio.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        """
        :param int bitrate: Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
        :param str codec: Encoding format of audio stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
        :param int sample_rate: Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
        :param int audio_channel: Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        Encoding format of audio stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        """
        Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        """
        Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
        """
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class AdaptiveDynamicStreamingTemplateStreamInfoVideo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdaptiveDynamicStreamingTemplateStreamInfoVideo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoVideo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoVideo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        """
        :param int bitrate: Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
        :param str codec: Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
        :param int fps: Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
        :param str fill_type: Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and use Gaussian blur for the rest of the edge.Default value: black.Note: Adaptive stream only supports stretch, black.
        :param int gop: The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
        :param int height: The maximum value of the height (or short side) of the video streaming, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        :param str resolution_adaptive: Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.Note: In adaptive mode, Width cannot be smaller than Height.
        :param int vcrf: Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
        :param int width: The maximum value of the width (or long side) of the video streaming, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        """
        Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        """
        Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and use Gaussian blur for the rest of the edge.Default value: black.Note: Adaptive stream only supports stretch, black.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        """
        The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        The maximum value of the height (or short side) of the video streaming, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        """
        Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.Note: In adaptive mode, Width cannot be smaller than Height.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        """
        Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
        """
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        The maximum value of the width (or long side) of the video streaming, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class AiAnalysisTemplateClassificationConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Ai classification task switch, optional value:ON/OFF.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Ai classification task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiAnalysisTemplateCoverConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Ai cover task switch, optional value:ON/OFF.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Ai cover task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiAnalysisTemplateFrameTagConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Ai frame tag task switch, optional value:ON/OFF.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Ai frame tag task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiAnalysisTemplateTagConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Ai tag task switch, optional value:ON/OFF.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Ai tag task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiRecognitionTemplateAsrFullTextConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subtitleFormat":
            suggest = "subtitle_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateAsrFullTextConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateAsrFullTextConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateAsrFullTextConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 subtitle_format: Optional[str] = None):
        """
        :param str switch: Asr full text recognition task switch, optional value:ON/OFF.
        :param str subtitle_format: Generated subtitle file format, if left blank or blank string means no subtitle file will be generated, optional value:vtt: Generate WebVTT subtitle files.
        """
        pulumi.set(__self__, "switch", switch)
        if subtitle_format is not None:
            pulumi.set(__self__, "subtitle_format", subtitle_format)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Asr full text recognition task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="subtitleFormat")
    def subtitle_format(self) -> Optional[str]:
        """
        Generated subtitle file format, if left blank or blank string means no subtitle file will be generated, optional value:vtt: Generate WebVTT subtitle files.
        """
        return pulumi.get(self, "subtitle_format")


@pulumi.output_type
class AiRecognitionTemplateAsrWordsConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSets":
            suggest = "label_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateAsrWordsConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateAsrWordsConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateAsrWordsConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 label_sets: Optional[Sequence[str]] = None):
        """
        :param str switch: Asr word recognition task switch, optional value:ON/OFF.
        :param Sequence[str] label_sets: Keyword filter label, specify the label of the keyword to be returned. If not filled or empty, all results will be returned.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
        """
        pulumi.set(__self__, "switch", switch)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Asr word recognition task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        """
        Keyword filter label, specify the label of the keyword to be returned. If not filled or empty, all results will be returned.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
        """
        return pulumi.get(self, "label_sets")


@pulumi.output_type
class AiRecognitionTemplateFaceConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultLibraryLabelSets":
            suggest = "default_library_label_sets"
        elif key == "faceLibrary":
            suggest = "face_library"
        elif key == "userDefineLibraryLabelSets":
            suggest = "user_define_library_label_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateFaceConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateFaceConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateFaceConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 default_library_label_sets: Optional[Sequence[str]] = None,
                 face_library: Optional[str] = None,
                 score: Optional[float] = None,
                 user_define_library_label_sets: Optional[Sequence[str]] = None):
        """
        :param str switch: Ai face recognition task switch, optional value:ON/OFF.
        :param Sequence[str] default_library_label_sets: Default face filter tag, specify the tag of the default face that needs to be returned. If not filled or empty, all default face results will be returned. Label optional value:entertainment, sport, politician.
        :param str face_library: Face library selection, optional value:Default, UserDefine, AllDefault value: All, use the system default face library and user-defined face library.
        :param float score: Face recognition filter score, when the recognition result reaches the score above, the recognition result will be returned. The default is 95 points. Value range: 0 - 100.
        :param Sequence[str] user_define_library_label_sets: User-defined face filter tag, specify the tag of the user-defined face that needs to be returned. If not filled or empty, all custom face results will be returned.The maximum number of tags is 100, and the length of each tag is up to 16 characters.
        """
        pulumi.set(__self__, "switch", switch)
        if default_library_label_sets is not None:
            pulumi.set(__self__, "default_library_label_sets", default_library_label_sets)
        if face_library is not None:
            pulumi.set(__self__, "face_library", face_library)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if user_define_library_label_sets is not None:
            pulumi.set(__self__, "user_define_library_label_sets", user_define_library_label_sets)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Ai face recognition task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="defaultLibraryLabelSets")
    def default_library_label_sets(self) -> Optional[Sequence[str]]:
        """
        Default face filter tag, specify the tag of the default face that needs to be returned. If not filled or empty, all default face results will be returned. Label optional value:entertainment, sport, politician.
        """
        return pulumi.get(self, "default_library_label_sets")

    @property
    @pulumi.getter(name="faceLibrary")
    def face_library(self) -> Optional[str]:
        """
        Face library selection, optional value:Default, UserDefine, AllDefault value: All, use the system default face library and user-defined face library.
        """
        return pulumi.get(self, "face_library")

    @property
    @pulumi.getter
    def score(self) -> Optional[float]:
        """
        Face recognition filter score, when the recognition result reaches the score above, the recognition result will be returned. The default is 95 points. Value range: 0 - 100.
        """
        return pulumi.get(self, "score")

    @property
    @pulumi.getter(name="userDefineLibraryLabelSets")
    def user_define_library_label_sets(self) -> Optional[Sequence[str]]:
        """
        User-defined face filter tag, specify the tag of the user-defined face that needs to be returned. If not filled or empty, all custom face results will be returned.The maximum number of tags is 100, and the length of each tag is up to 16 characters.
        """
        return pulumi.get(self, "user_define_library_label_sets")


@pulumi.output_type
class AiRecognitionTemplateOcrFullTextConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        """
        :param str switch: Ocr full text recognition task switch, optional value:ON/OFF.
        """
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Ocr full text recognition task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiRecognitionTemplateOcrWordsConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSets":
            suggest = "label_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateOcrWordsConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateOcrWordsConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateOcrWordsConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 label_sets: Optional[Sequence[str]] = None):
        """
        :param str switch: Ocr words recognition task switch, optional value:ON/OFF.
        :param Sequence[str] label_sets: Keyword filter label, specify the label of the keyword to be returned. If not filled or empty, all results will be returned.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
        """
        pulumi.set(__self__, "switch", switch)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Ocr words recognition task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        """
        Keyword filter label, specify the label of the keyword to be returned. If not filled or empty, all results will be returned.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
        """
        return pulumi.get(self, "label_sets")


@pulumi.output_type
class ContentReviewTemplatePoliticalConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asrReviewInfo":
            suggest = "asr_review_info"
        elif key == "imgReviewInfo":
            suggest = "img_review_info"
        elif key == "ocrReviewInfo":
            suggest = "ocr_review_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePoliticalConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePoliticalConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePoliticalConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asr_review_info: Optional['outputs.ContentReviewTemplatePoliticalConfigureAsrReviewInfo'] = None,
                 img_review_info: Optional['outputs.ContentReviewTemplatePoliticalConfigureImgReviewInfo'] = None,
                 ocr_review_info: Optional['outputs.ContentReviewTemplatePoliticalConfigureOcrReviewInfo'] = None):
        """
        :param 'ContentReviewTemplatePoliticalConfigureAsrReviewInfoArgs' asr_review_info: Political asr control parameters.
        :param 'ContentReviewTemplatePoliticalConfigureImgReviewInfoArgs' img_review_info: Political image control parameters.
        :param 'ContentReviewTemplatePoliticalConfigureOcrReviewInfoArgs' ocr_review_info: Political ocr control parameters.
        """
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if img_review_info is not None:
            pulumi.set(__self__, "img_review_info", img_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional['outputs.ContentReviewTemplatePoliticalConfigureAsrReviewInfo']:
        """
        Political asr control parameters.
        """
        return pulumi.get(self, "asr_review_info")

    @property
    @pulumi.getter(name="imgReviewInfo")
    def img_review_info(self) -> Optional['outputs.ContentReviewTemplatePoliticalConfigureImgReviewInfo']:
        """
        Political image control parameters.
        """
        return pulumi.get(self, "img_review_info")

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional['outputs.ContentReviewTemplatePoliticalConfigureOcrReviewInfo']:
        """
        Political ocr control parameters.
        """
        return pulumi.get(self, "ocr_review_info")


@pulumi.output_type
class ContentReviewTemplatePoliticalConfigureAsrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePoliticalConfigureAsrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePoliticalConfigureAsrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePoliticalConfigureAsrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: User-defined asr review task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        User-defined asr review task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplatePoliticalConfigureImgReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePoliticalConfigureImgReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePoliticalConfigureImgReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePoliticalConfigureImgReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: Terrorism image task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 90 points. Value range: 0~100.
        :param Sequence[str] label_sets: Terrorism image filter tag, if the review result contains the selected tag, the result will be returned, if the filter tag is empty, all the review results will be returned, the optional value is:guns, crowd, bloody, police, banners, militant, explosion, terrorists, scenario.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 80 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Terrorism image task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 90 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        """
        Terrorism image filter tag, if the review result contains the selected tag, the result will be returned, if the filter tag is empty, all the review results will be returned, the optional value is:guns, crowd, bloody, police, banners, militant, explosion, terrorists, scenario.
        """
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 80 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplatePoliticalConfigureOcrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePoliticalConfigureOcrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePoliticalConfigureOcrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePoliticalConfigureOcrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: User-defined ocr text review task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        User-defined ocr text review task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplatePornConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asrReviewInfo":
            suggest = "asr_review_info"
        elif key == "imgReviewInfo":
            suggest = "img_review_info"
        elif key == "ocrReviewInfo":
            suggest = "ocr_review_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePornConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePornConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePornConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asr_review_info: Optional['outputs.ContentReviewTemplatePornConfigureAsrReviewInfo'] = None,
                 img_review_info: Optional['outputs.ContentReviewTemplatePornConfigureImgReviewInfo'] = None,
                 ocr_review_info: Optional['outputs.ContentReviewTemplatePornConfigureOcrReviewInfo'] = None):
        """
        :param 'ContentReviewTemplatePornConfigureAsrReviewInfoArgs' asr_review_info: Voice pornography control parameters.
        :param 'ContentReviewTemplatePornConfigureImgReviewInfoArgs' img_review_info: Porn image Identification Control Parameters.
        :param 'ContentReviewTemplatePornConfigureOcrReviewInfoArgs' ocr_review_info: Ocr pornography control parameters.
        """
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if img_review_info is not None:
            pulumi.set(__self__, "img_review_info", img_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional['outputs.ContentReviewTemplatePornConfigureAsrReviewInfo']:
        """
        Voice pornography control parameters.
        """
        return pulumi.get(self, "asr_review_info")

    @property
    @pulumi.getter(name="imgReviewInfo")
    def img_review_info(self) -> Optional['outputs.ContentReviewTemplatePornConfigureImgReviewInfo']:
        """
        Porn image Identification Control Parameters.
        """
        return pulumi.get(self, "img_review_info")

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional['outputs.ContentReviewTemplatePornConfigureOcrReviewInfo']:
        """
        Ocr pornography control parameters.
        """
        return pulumi.get(self, "ocr_review_info")


@pulumi.output_type
class ContentReviewTemplatePornConfigureAsrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePornConfigureAsrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePornConfigureAsrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePornConfigureAsrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: User-defined asr review task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        User-defined asr review task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplatePornConfigureImgReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePornConfigureImgReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePornConfigureImgReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePornConfigureImgReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: Terrorism image task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 90 points. Value range: 0~100.
        :param Sequence[str] label_sets: Terrorism image filter tag, if the review result contains the selected tag, the result will be returned, if the filter tag is empty, all the review results will be returned, the optional value is:guns, crowd, bloody, police, banners, militant, explosion, terrorists, scenario.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 80 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Terrorism image task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 90 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        """
        Terrorism image filter tag, if the review result contains the selected tag, the result will be returned, if the filter tag is empty, all the review results will be returned, the optional value is:guns, crowd, bloody, police, banners, militant, explosion, terrorists, scenario.
        """
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 80 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplatePornConfigureOcrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplatePornConfigureOcrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplatePornConfigureOcrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplatePornConfigureOcrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: User-defined ocr text review task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        User-defined ocr text review task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateProhibitedConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asrReviewInfo":
            suggest = "asr_review_info"
        elif key == "ocrReviewInfo":
            suggest = "ocr_review_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateProhibitedConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateProhibitedConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateProhibitedConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asr_review_info: Optional['outputs.ContentReviewTemplateProhibitedConfigureAsrReviewInfo'] = None,
                 ocr_review_info: Optional['outputs.ContentReviewTemplateProhibitedConfigureOcrReviewInfo'] = None):
        """
        :param 'ContentReviewTemplateProhibitedConfigureAsrReviewInfoArgs' asr_review_info: Voice Prohibition Control Parameters.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ContentReviewTemplateProhibitedConfigureOcrReviewInfoArgs' ocr_review_info: Ocr Prohibition Control Parameters.Note: This field may return null, indicating that no valid value can be obtained.
        """
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional['outputs.ContentReviewTemplateProhibitedConfigureAsrReviewInfo']:
        """
        Voice Prohibition Control Parameters.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "asr_review_info")

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional['outputs.ContentReviewTemplateProhibitedConfigureOcrReviewInfo']:
        """
        Ocr Prohibition Control Parameters.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ocr_review_info")


@pulumi.output_type
class ContentReviewTemplateProhibitedConfigureAsrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateProhibitedConfigureAsrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateProhibitedConfigureAsrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateProhibitedConfigureAsrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: User-defined asr review task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        User-defined asr review task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateProhibitedConfigureOcrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateProhibitedConfigureOcrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateProhibitedConfigureOcrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateProhibitedConfigureOcrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: User-defined ocr text review task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        User-defined ocr text review task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateTerrorismConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ocrReviewInfo":
            suggest = "ocr_review_info"
        elif key == "imgReviewInfo":
            suggest = "img_review_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateTerrorismConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateTerrorismConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateTerrorismConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ocr_review_info: 'outputs.ContentReviewTemplateTerrorismConfigureOcrReviewInfo',
                 img_review_info: Optional['outputs.ContentReviewTemplateTerrorismConfigureImgReviewInfo'] = None):
        """
        :param 'ContentReviewTemplateTerrorismConfigureOcrReviewInfoArgs' ocr_review_info: Ocr terrorism task Control Parameters.
        :param 'ContentReviewTemplateTerrorismConfigureImgReviewInfoArgs' img_review_info: Terrorism image task control parameters.
        """
        pulumi.set(__self__, "ocr_review_info", ocr_review_info)
        if img_review_info is not None:
            pulumi.set(__self__, "img_review_info", img_review_info)

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> 'outputs.ContentReviewTemplateTerrorismConfigureOcrReviewInfo':
        """
        Ocr terrorism task Control Parameters.
        """
        return pulumi.get(self, "ocr_review_info")

    @property
    @pulumi.getter(name="imgReviewInfo")
    def img_review_info(self) -> Optional['outputs.ContentReviewTemplateTerrorismConfigureImgReviewInfo']:
        """
        Terrorism image task control parameters.
        """
        return pulumi.get(self, "img_review_info")


@pulumi.output_type
class ContentReviewTemplateTerrorismConfigureImgReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateTerrorismConfigureImgReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateTerrorismConfigureImgReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateTerrorismConfigureImgReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: Terrorism image task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 90 points. Value range: 0~100.
        :param Sequence[str] label_sets: Terrorism image filter tag, if the review result contains the selected tag, the result will be returned, if the filter tag is empty, all the review results will be returned, the optional value is:guns, crowd, bloody, police, banners, militant, explosion, terrorists, scenario.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 80 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Terrorism image task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 90 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        """
        Terrorism image filter tag, if the review result contains the selected tag, the result will be returned, if the filter tag is empty, all the review results will be returned, the optional value is:guns, crowd, bloody, police, banners, militant, explosion, terrorists, scenario.
        """
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 80 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateTerrorismConfigureOcrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateTerrorismConfigureOcrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateTerrorismConfigureOcrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateTerrorismConfigureOcrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: User-defined ocr text review task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        User-defined ocr text review task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateUserDefineConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asrReviewInfo":
            suggest = "asr_review_info"
        elif key == "faceReviewInfo":
            suggest = "face_review_info"
        elif key == "ocrReviewInfo":
            suggest = "ocr_review_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateUserDefineConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateUserDefineConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateUserDefineConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asr_review_info: Optional['outputs.ContentReviewTemplateUserDefineConfigureAsrReviewInfo'] = None,
                 face_review_info: Optional['outputs.ContentReviewTemplateUserDefineConfigureFaceReviewInfo'] = None,
                 ocr_review_info: Optional['outputs.ContentReviewTemplateUserDefineConfigureOcrReviewInfo'] = None):
        """
        :param 'ContentReviewTemplateUserDefineConfigureAsrReviewInfoArgs' asr_review_info: User-defined asr text review control parameters.
        :param 'ContentReviewTemplateUserDefineConfigureFaceReviewInfoArgs' face_review_info: User-defined face review control parameters.
        :param 'ContentReviewTemplateUserDefineConfigureOcrReviewInfoArgs' ocr_review_info: User-defined ocr text review control parameters.
        """
        if asr_review_info is not None:
            pulumi.set(__self__, "asr_review_info", asr_review_info)
        if face_review_info is not None:
            pulumi.set(__self__, "face_review_info", face_review_info)
        if ocr_review_info is not None:
            pulumi.set(__self__, "ocr_review_info", ocr_review_info)

    @property
    @pulumi.getter(name="asrReviewInfo")
    def asr_review_info(self) -> Optional['outputs.ContentReviewTemplateUserDefineConfigureAsrReviewInfo']:
        """
        User-defined asr text review control parameters.
        """
        return pulumi.get(self, "asr_review_info")

    @property
    @pulumi.getter(name="faceReviewInfo")
    def face_review_info(self) -> Optional['outputs.ContentReviewTemplateUserDefineConfigureFaceReviewInfo']:
        """
        User-defined face review control parameters.
        """
        return pulumi.get(self, "face_review_info")

    @property
    @pulumi.getter(name="ocrReviewInfo")
    def ocr_review_info(self) -> Optional['outputs.ContentReviewTemplateUserDefineConfigureOcrReviewInfo']:
        """
        User-defined ocr text review control parameters.
        """
        return pulumi.get(self, "ocr_review_info")


@pulumi.output_type
class ContentReviewTemplateUserDefineConfigureAsrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateUserDefineConfigureAsrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateUserDefineConfigureAsrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateUserDefineConfigureAsrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: User-defined asr review task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        :param Sequence[str] label_sets: User-defined asr tags, the review result contains the selected tag and returns the result, if the filter tag is empty, all review results are returned. If you want to use the tag filtering function, when adding a asr library, you need to add the corresponding character tag.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        User-defined asr review task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        """
        User-defined asr tags, the review result contains the selected tag and returns the result, if the filter tag is empty, all review results are returned. If you want to use the tag filtering function, when adding a asr library, you need to add the corresponding character tag.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
        """
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateUserDefineConfigureFaceReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateUserDefineConfigureFaceReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateUserDefineConfigureFaceReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateUserDefineConfigureFaceReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: User-defined face review task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        :param Sequence[str] label_sets: User-defined face review tags, the review result contains the selected tag and returns the result, if the filter tag is empty, all review results are returned. If you want to use the tag filtering function, when adding a face library, you need to add the corresponding character tag.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        User-defined face review task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        """
        User-defined face review tags, the review result contains the selected tag and returns the result, if the filter tag is empty, all review results are returned. If you want to use the tag filtering function, when adding a face library, you need to add the corresponding character tag.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
        """
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class ContentReviewTemplateUserDefineConfigureOcrReviewInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockConfidence":
            suggest = "block_confidence"
        elif key == "labelSets":
            suggest = "label_sets"
        elif key == "reviewConfidence":
            suggest = "review_confidence"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentReviewTemplateUserDefineConfigureOcrReviewInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentReviewTemplateUserDefineConfigureOcrReviewInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentReviewTemplateUserDefineConfigureOcrReviewInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 block_confidence: Optional[int] = None,
                 label_sets: Optional[Sequence[str]] = None,
                 review_confidence: Optional[int] = None):
        """
        :param str switch: User-defined ocr text review task switch, optional value:ON/OFF.
        :param int block_confidence: The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        :param Sequence[str] label_sets: User-defined ocr tags, the review result contains the selected tag and returns the result, if the filter tag is empty, all review results are returned. If you want to use the tag filtering function, when adding a ocr library, you need to add the corresponding character tag.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
        :param int review_confidence: The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        pulumi.set(__self__, "switch", switch)
        if block_confidence is not None:
            pulumi.set(__self__, "block_confidence", block_confidence)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if review_confidence is not None:
            pulumi.set(__self__, "review_confidence", review_confidence)

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        User-defined ocr text review task switch, optional value:ON/OFF.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="blockConfidence")
    def block_confidence(self) -> Optional[int]:
        """
        The score threshold for judging suspected violations. When the smart review reaches the score above, it is considered suspected violations. If it is not filled, the default is 100 points. Value range: 0~100.
        """
        return pulumi.get(self, "block_confidence")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        """
        User-defined ocr tags, the review result contains the selected tag and returns the result, if the filter tag is empty, all review results are returned. If you want to use the tag filtering function, when adding a ocr library, you need to add the corresponding character tag.The maximum number of tags is 10, and the length of each tag is up to 16 characters.
        """
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="reviewConfidence")
    def review_confidence(self) -> Optional[int]:
        """
        The score threshold for judging whether manual review is required for violations. When the intelligent review reaches the score above, it is considered that manual review is required. If it is not filled, the default is 75 points. Value range: 0~100.
        """
        return pulumi.get(self, "review_confidence")


@pulumi.output_type
class EditMediaOperationFileInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputInfo":
            suggest = "input_info"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationFileInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationFileInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationFileInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_info: 'outputs.EditMediaOperationFileInfoInputInfo',
                 end_time_offset: Optional[float] = None,
                 start_time_offset: Optional[float] = None):
        """
        :param 'EditMediaOperationFileInfoInputInfoArgs' input_info: Video input information.
        :param float end_time_offset: End time offset of video clipping in seconds.
        :param float start_time_offset: Start time offset of video clipping in seconds.
        """
        pulumi.set(__self__, "input_info", input_info)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="inputInfo")
    def input_info(self) -> 'outputs.EditMediaOperationFileInfoInputInfo':
        """
        Video input information.
        """
        return pulumi.get(self, "input_info")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of video clipping in seconds.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of video clipping in seconds.
        """
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class EditMediaOperationFileInfoInputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationFileInfoInputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationFileInfoInputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationFileInfoInputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.EditMediaOperationFileInfoInputInfoCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.EditMediaOperationFileInfoInputInfoS3InputInfo'] = None,
                 url_input_info: Optional['outputs.EditMediaOperationFileInfoInputInfoUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'EditMediaOperationFileInfoInputInfoCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'EditMediaOperationFileInfoInputInfoS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'EditMediaOperationFileInfoInputInfoUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.EditMediaOperationFileInfoInputInfoCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.EditMediaOperationFileInfoInputInfoS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.EditMediaOperationFileInfoInputInfoUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class EditMediaOperationFileInfoInputInfoCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class EditMediaOperationFileInfoInputInfoS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationFileInfoInputInfoS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationFileInfoInputInfoS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationFileInfoInputInfoS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class EditMediaOperationFileInfoInputInfoUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class EditMediaOperationOutputConfig(dict):
    def __init__(__self__, *,
                 container: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str container: Format. Valid values: `mp4` (default), `hls`, `mov`, `flv`, `avi`.
        :param str type: The editing mode. Valid values are `normal` and `fast`. The default is `normal`, which indicates precise editing.
        """
        if container is not None:
            pulumi.set(__self__, "container", container)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        """
        Format. Valid values: `mp4` (default), `hls`, `mov`, `flv`, `avi`.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The editing mode. Valid values are `normal` and `fast`. The default is `normal`, which indicates precise editing.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EditMediaOperationOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.EditMediaOperationOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.EditMediaOperationOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS. `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'EditMediaOperationOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'EditMediaOperationOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS. `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.EditMediaOperationOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.EditMediaOperationOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class EditMediaOperationOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class EditMediaOperationOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class EditMediaOperationTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsSqs":
            suggest = "aws_sqs"
        elif key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_sqs: Optional['outputs.EditMediaOperationTaskNotifyConfigAwsSqs'] = None,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        """
        :param 'EditMediaOperationTaskNotifyConfigAwsSqsArgs' aws_sqs: The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
        :param str cmq_model: The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
        :param str cmq_region: The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
        :param str notify_mode: Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
        :param str notify_type: The notification type. Valid values: `CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead. `TDMQ-CMQ`: Message queue. `URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API. `SCF`: This notification type is not recommended. You need to configure it in the SCF console. `AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket. If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
        :param str notify_url: HTTP callback URL, required if `NotifyType` is set to `URL`.
        :param str queue_name: The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
        :param str topic_name: The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
        """
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional['outputs.EditMediaOperationTaskNotifyConfigAwsSqs']:
        """
        The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
        """
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
        """
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        """
        Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
        """
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        """
        The notification type. Valid values: `CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead. `TDMQ-CMQ`: Message queue. `URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API. `SCF`: This notification type is not recommended. You need to configure it in the SCF console. `AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket. If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
        """
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        """
        HTTP callback URL, required if `NotifyType` is set to `URL`.
        """
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class EditMediaOperationTaskNotifyConfigAwsSqs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqsQueueName":
            suggest = "sqs_queue_name"
        elif key == "sqsRegion":
            suggest = "sqs_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EditMediaOperationTaskNotifyConfigAwsSqs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EditMediaOperationTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EditMediaOperationTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sqs_queue_name: str,
                 sqs_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str sqs_queue_name: The name of the SQS queue.
        :param str sqs_region: The region of the SQS queue.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        """
        The name of the SQS queue.
        """
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        """
        The region of the SQS queue.
        """
        return pulumi.get(self, "sqs_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class FlowInputGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputName":
            suggest = "input_name"
        elif key == "allowIpLists":
            suggest = "allow_ip_lists"
        elif key == "failOver":
            suggest = "fail_over"
        elif key == "hlsPullSettings":
            suggest = "hls_pull_settings"
        elif key == "resilientStream":
            suggest = "resilient_stream"
        elif key == "rtmpPullSettings":
            suggest = "rtmp_pull_settings"
        elif key == "rtpSettings":
            suggest = "rtp_settings"
        elif key == "rtspPullSettings":
            suggest = "rtsp_pull_settings"
        elif key == "srtSettings":
            suggest = "srt_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_name: str,
                 protocol: str,
                 allow_ip_lists: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 fail_over: Optional[str] = None,
                 hls_pull_settings: Optional['outputs.FlowInputGroupHlsPullSettings'] = None,
                 resilient_stream: Optional['outputs.FlowInputGroupResilientStream'] = None,
                 rtmp_pull_settings: Optional['outputs.FlowInputGroupRtmpPullSettings'] = None,
                 rtp_settings: Optional['outputs.FlowInputGroupRtpSettings'] = None,
                 rtsp_pull_settings: Optional['outputs.FlowInputGroupRtspPullSettings'] = None,
                 srt_settings: Optional['outputs.FlowInputGroupSrtSettings'] = None):
        """
        :param str input_name: Input name, you can fill in uppercase and lowercase letters, numbers and underscores, and the length is [1, 32].
        :param str protocol: Input protocol, optional [SRT|RTP|RTMP|RTMP_PULL].
        :param Sequence[str] allow_ip_lists: The input IP whitelist, the format is CIDR.
        :param str description: Input description with a length of [0, 255].
        :param str fail_over: The active/standby switch of the input, [OPEN|CLOSE] is optional, and the default is CLOSE.
        :param 'FlowInputGroupHlsPullSettingsArgs' hls_pull_settings: Input HLS_PULL configuration information.
        :param 'FlowInputGroupResilientStreamArgs' resilient_stream: Delay broadcast smooth streaming configuration information.
        :param 'FlowInputGroupRtmpPullSettingsArgs' rtmp_pull_settings: Input RTMP_PULL configuration information.
        :param 'FlowInputGroupRtpSettingsArgs' rtp_settings: RTP configuration information.
        :param 'FlowInputGroupRtspPullSettingsArgs' rtsp_pull_settings: Input RTSP_PULL configuration information.
        :param 'FlowInputGroupSrtSettingsArgs' srt_settings: The input SRT configuration information.
        """
        pulumi.set(__self__, "input_name", input_name)
        pulumi.set(__self__, "protocol", protocol)
        if allow_ip_lists is not None:
            pulumi.set(__self__, "allow_ip_lists", allow_ip_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fail_over is not None:
            pulumi.set(__self__, "fail_over", fail_over)
        if hls_pull_settings is not None:
            pulumi.set(__self__, "hls_pull_settings", hls_pull_settings)
        if resilient_stream is not None:
            pulumi.set(__self__, "resilient_stream", resilient_stream)
        if rtmp_pull_settings is not None:
            pulumi.set(__self__, "rtmp_pull_settings", rtmp_pull_settings)
        if rtp_settings is not None:
            pulumi.set(__self__, "rtp_settings", rtp_settings)
        if rtsp_pull_settings is not None:
            pulumi.set(__self__, "rtsp_pull_settings", rtsp_pull_settings)
        if srt_settings is not None:
            pulumi.set(__self__, "srt_settings", srt_settings)

    @property
    @pulumi.getter(name="inputName")
    def input_name(self) -> str:
        """
        Input name, you can fill in uppercase and lowercase letters, numbers and underscores, and the length is [1, 32].
        """
        return pulumi.get(self, "input_name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Input protocol, optional [SRT|RTP|RTMP|RTMP_PULL].
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="allowIpLists")
    def allow_ip_lists(self) -> Optional[Sequence[str]]:
        """
        The input IP whitelist, the format is CIDR.
        """
        return pulumi.get(self, "allow_ip_lists")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Input description with a length of [0, 255].
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failOver")
    def fail_over(self) -> Optional[str]:
        """
        The active/standby switch of the input, [OPEN|CLOSE] is optional, and the default is CLOSE.
        """
        return pulumi.get(self, "fail_over")

    @property
    @pulumi.getter(name="hlsPullSettings")
    def hls_pull_settings(self) -> Optional['outputs.FlowInputGroupHlsPullSettings']:
        """
        Input HLS_PULL configuration information.
        """
        return pulumi.get(self, "hls_pull_settings")

    @property
    @pulumi.getter(name="resilientStream")
    def resilient_stream(self) -> Optional['outputs.FlowInputGroupResilientStream']:
        """
        Delay broadcast smooth streaming configuration information.
        """
        return pulumi.get(self, "resilient_stream")

    @property
    @pulumi.getter(name="rtmpPullSettings")
    def rtmp_pull_settings(self) -> Optional['outputs.FlowInputGroupRtmpPullSettings']:
        """
        Input RTMP_PULL configuration information.
        """
        return pulumi.get(self, "rtmp_pull_settings")

    @property
    @pulumi.getter(name="rtpSettings")
    def rtp_settings(self) -> Optional['outputs.FlowInputGroupRtpSettings']:
        """
        RTP configuration information.
        """
        return pulumi.get(self, "rtp_settings")

    @property
    @pulumi.getter(name="rtspPullSettings")
    def rtsp_pull_settings(self) -> Optional['outputs.FlowInputGroupRtspPullSettings']:
        """
        Input RTSP_PULL configuration information.
        """
        return pulumi.get(self, "rtsp_pull_settings")

    @property
    @pulumi.getter(name="srtSettings")
    def srt_settings(self) -> Optional['outputs.FlowInputGroupSrtSettings']:
        """
        The input SRT configuration information.
        """
        return pulumi.get(self, "srt_settings")


@pulumi.output_type
class FlowInputGroupHlsPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupHlsPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupHlsPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupHlsPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.FlowInputGroupHlsPullSettingsSourceAddress']):
        """
        :param Sequence['FlowInputGroupHlsPullSettingsSourceAddressArgs'] source_addresses: There is only one origin address of the HLS origin station.
        """
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.FlowInputGroupHlsPullSettingsSourceAddress']:
        """
        There is only one origin address of the HLS origin station.
        """
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class FlowInputGroupHlsPullSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: The URL address of the RTSP source site.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL address of the RTSP source site.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class FlowInputGroupResilientStream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bufferTime":
            suggest = "buffer_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupResilientStream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupResilientStream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupResilientStream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer_time: Optional[int] = None,
                 enable: Optional[bool] = None):
        """
        :param int buffer_time: Delay time, in seconds, currently supports a range of 10 to 300 seconds. Note: This field may return null, indicating that no valid value can be obtained.
        :param bool enable: Whether to enable the delayed broadcast smooth spit stream, true is enabled, false is not enabled, and the default is not enabled. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if buffer_time is not None:
            pulumi.set(__self__, "buffer_time", buffer_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="bufferTime")
    def buffer_time(self) -> Optional[int]:
        """
        Delay time, in seconds, currently supports a range of 10 to 300 seconds. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "buffer_time")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Whether to enable the delayed broadcast smooth spit stream, true is enabled, false is not enabled, and the default is not enabled. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class FlowInputGroupRtmpPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupRtmpPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupRtmpPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupRtmpPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.FlowInputGroupRtmpPullSettingsSourceAddress']):
        """
        :param Sequence['FlowInputGroupRtmpPullSettingsSourceAddressArgs'] source_addresses: The source site address of the RTMP source site, there can only be one.
        """
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.FlowInputGroupRtmpPullSettingsSourceAddress']:
        """
        The source site address of the RTMP source site, there can only be one.
        """
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class FlowInputGroupRtmpPullSettingsSourceAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamKey":
            suggest = "stream_key"
        elif key == "tcUrl":
            suggest = "tc_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupRtmpPullSettingsSourceAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupRtmpPullSettingsSourceAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupRtmpPullSettingsSourceAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_key: str,
                 tc_url: str):
        """
        :param str stream_key: StreamKey information of the RTMP source site.
        :param str tc_url: TcUrl address of the RTMP source server.
        """
        pulumi.set(__self__, "stream_key", stream_key)
        pulumi.set(__self__, "tc_url", tc_url)

    @property
    @pulumi.getter(name="streamKey")
    def stream_key(self) -> str:
        """
        StreamKey information of the RTMP source site.
        """
        return pulumi.get(self, "stream_key")

    @property
    @pulumi.getter(name="tcUrl")
    def tc_url(self) -> str:
        """
        TcUrl address of the RTMP source server.
        """
        return pulumi.get(self, "tc_url")


@pulumi.output_type
class FlowInputGroupRtpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeout":
            suggest = "idle_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupRtpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupRtpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupRtpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fec: Optional[str] = None,
                 idle_timeout: Optional[int] = None):
        """
        :param str fec: Defaults to none, optional values[none].
        :param int idle_timeout: Idle timeout, the default is 5000, the unit is ms, and the range is [1000, 10000].
        """
        if fec is not None:
            pulumi.set(__self__, "fec", fec)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter
    def fec(self) -> Optional[str]:
        """
        Defaults to none, optional values[none].
        """
        return pulumi.get(self, "fec")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[int]:
        """
        Idle timeout, the default is 5000, the unit is ms, and the range is [1000, 10000].
        """
        return pulumi.get(self, "idle_timeout")


@pulumi.output_type
class FlowInputGroupRtspPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupRtspPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupRtspPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupRtspPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.FlowInputGroupRtspPullSettingsSourceAddress']):
        """
        :param Sequence['FlowInputGroupRtspPullSettingsSourceAddressArgs'] source_addresses: The source site address of the RTSP source site, there can only be one.
        """
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.FlowInputGroupRtspPullSettingsSourceAddress']:
        """
        The source site address of the RTSP source site, there can only be one.
        """
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class FlowInputGroupRtspPullSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: The URL address of the RTSP source site.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL address of the RTSP source site.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class FlowInputGroupSrtSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pbKeyLen":
            suggest = "pb_key_len"
        elif key == "peerIdleTimeout":
            suggest = "peer_idle_timeout"
        elif key == "peerLatency":
            suggest = "peer_latency"
        elif key == "recvLatency":
            suggest = "recv_latency"
        elif key == "sourceAddresses":
            suggest = "source_addresses"
        elif key == "streamId":
            suggest = "stream_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlowInputGroupSrtSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlowInputGroupSrtSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlowInputGroupSrtSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 latency: Optional[int] = None,
                 mode: Optional[str] = None,
                 passphrase: Optional[str] = None,
                 pb_key_len: Optional[int] = None,
                 peer_idle_timeout: Optional[int] = None,
                 peer_latency: Optional[int] = None,
                 recv_latency: Optional[int] = None,
                 source_addresses: Optional[Sequence['outputs.FlowInputGroupSrtSettingsSourceAddress']] = None,
                 stream_id: Optional[str] = None):
        """
        :param int latency: Delay, default 0, unit ms, range [0, 3000].
        :param str mode: SRT mode, optional [LISTENER|CALLER], default is LISTENER.
        :param str passphrase: The decryption key, which is empty by default, means no encryption. Only ascii code values can be filled in, and the length is [10, 79].
        :param int pb_key_len: Key length, default is 0, optional [0|16|24|32].
        :param int peer_idle_timeout: Peer timeout, default is 5000, unit ms, range is [1000, 10000].
        :param int peer_latency: Peer delay, the default is 0, the unit is ms, and the range is [0, 3000].
        :param int recv_latency: Receiving delay, default is 120, unit ms, range is [0, 3000].
        :param Sequence['FlowInputGroupSrtSettingsSourceAddressArgs'] source_addresses: SRT peer address, required when Mode is CALLER, and only 1 set can be filled in.
        :param str stream_id: Stream ID, optional uppercase and lowercase letters, numbers and special characters (.#!:&amp;,=_-), length 0~512. For specific format, please refer to:https://github.com/Haivision/srt/blob/master/docs/features/access-control.md#standard-keys.
        """
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pb_key_len is not None:
            pulumi.set(__self__, "pb_key_len", pb_key_len)
        if peer_idle_timeout is not None:
            pulumi.set(__self__, "peer_idle_timeout", peer_idle_timeout)
        if peer_latency is not None:
            pulumi.set(__self__, "peer_latency", peer_latency)
        if recv_latency is not None:
            pulumi.set(__self__, "recv_latency", recv_latency)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        """
        Delay, default 0, unit ms, range [0, 3000].
        """
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        SRT mode, optional [LISTENER|CALLER], default is LISTENER.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        """
        The decryption key, which is empty by default, means no encryption. Only ascii code values can be filled in, and the length is [10, 79].
        """
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter(name="pbKeyLen")
    def pb_key_len(self) -> Optional[int]:
        """
        Key length, default is 0, optional [0|16|24|32].
        """
        return pulumi.get(self, "pb_key_len")

    @property
    @pulumi.getter(name="peerIdleTimeout")
    def peer_idle_timeout(self) -> Optional[int]:
        """
        Peer timeout, default is 5000, unit ms, range is [1000, 10000].
        """
        return pulumi.get(self, "peer_idle_timeout")

    @property
    @pulumi.getter(name="peerLatency")
    def peer_latency(self) -> Optional[int]:
        """
        Peer delay, the default is 0, the unit is ms, and the range is [0, 3000].
        """
        return pulumi.get(self, "peer_latency")

    @property
    @pulumi.getter(name="recvLatency")
    def recv_latency(self) -> Optional[int]:
        """
        Receiving delay, default is 120, unit ms, range is [0, 3000].
        """
        return pulumi.get(self, "recv_latency")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[Sequence['outputs.FlowInputGroupSrtSettingsSourceAddress']]:
        """
        SRT peer address, required when Mode is CALLER, and only 1 set can be filled in.
        """
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        """
        Stream ID, optional uppercase and lowercase letters, numbers and special characters (.#!:&amp;,=_-), length 0~512. For specific format, please refer to:https://github.com/Haivision/srt/blob/master/docs/features/access-control.md#standard-keys.
        """
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class FlowInputGroupSrtSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: Peer IP.
        :param int port: Peer port.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Peer IP.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Peer port.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class InputInputGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputName":
            suggest = "input_name"
        elif key == "allowIpLists":
            suggest = "allow_ip_lists"
        elif key == "failOver":
            suggest = "fail_over"
        elif key == "hlsPullSettings":
            suggest = "hls_pull_settings"
        elif key == "resilientStream":
            suggest = "resilient_stream"
        elif key == "rtmpPullSettings":
            suggest = "rtmp_pull_settings"
        elif key == "rtpSettings":
            suggest = "rtp_settings"
        elif key == "rtspPullSettings":
            suggest = "rtsp_pull_settings"
        elif key == "srtSettings":
            suggest = "srt_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_name: str,
                 protocol: str,
                 allow_ip_lists: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 fail_over: Optional[str] = None,
                 hls_pull_settings: Optional['outputs.InputInputGroupHlsPullSettings'] = None,
                 resilient_stream: Optional['outputs.InputInputGroupResilientStream'] = None,
                 rtmp_pull_settings: Optional['outputs.InputInputGroupRtmpPullSettings'] = None,
                 rtp_settings: Optional['outputs.InputInputGroupRtpSettings'] = None,
                 rtsp_pull_settings: Optional['outputs.InputInputGroupRtspPullSettings'] = None,
                 srt_settings: Optional['outputs.InputInputGroupSrtSettings'] = None):
        """
        :param str input_name: The input name, you can fill in uppercase and lowercase letters, numbers and underscores, and the length is [1, 32].
        :param str protocol: Input protocol, optional [SRT|RTP|RTMP|RTMP_PULL].
        :param Sequence[str] allow_ip_lists: The input IP whitelist, the format is CIDR.
        :param str description: The input description with a length of [0, 255].
        :param str fail_over: The active/standby switch of the input, [OPEN|CLOSE] is optional, and the default is CLOSE.
        :param 'InputInputGroupHlsPullSettingsArgs' hls_pull_settings: Input HLS_PULL configuration information.
        :param 'InputInputGroupResilientStreamArgs' resilient_stream: Delay broadcast smooth streaming configuration information.
        :param 'InputInputGroupRtmpPullSettingsArgs' rtmp_pull_settings: Input RTMP_PULL configuration information.
        :param 'InputInputGroupRtpSettingsArgs' rtp_settings: Input RTP configuration information.
        :param 'InputInputGroupRtspPullSettingsArgs' rtsp_pull_settings: Input RTSP_PULL configuration information.
        :param 'InputInputGroupSrtSettingsArgs' srt_settings: The input SRT configuration information.
        """
        pulumi.set(__self__, "input_name", input_name)
        pulumi.set(__self__, "protocol", protocol)
        if allow_ip_lists is not None:
            pulumi.set(__self__, "allow_ip_lists", allow_ip_lists)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fail_over is not None:
            pulumi.set(__self__, "fail_over", fail_over)
        if hls_pull_settings is not None:
            pulumi.set(__self__, "hls_pull_settings", hls_pull_settings)
        if resilient_stream is not None:
            pulumi.set(__self__, "resilient_stream", resilient_stream)
        if rtmp_pull_settings is not None:
            pulumi.set(__self__, "rtmp_pull_settings", rtmp_pull_settings)
        if rtp_settings is not None:
            pulumi.set(__self__, "rtp_settings", rtp_settings)
        if rtsp_pull_settings is not None:
            pulumi.set(__self__, "rtsp_pull_settings", rtsp_pull_settings)
        if srt_settings is not None:
            pulumi.set(__self__, "srt_settings", srt_settings)

    @property
    @pulumi.getter(name="inputName")
    def input_name(self) -> str:
        """
        The input name, you can fill in uppercase and lowercase letters, numbers and underscores, and the length is [1, 32].
        """
        return pulumi.get(self, "input_name")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Input protocol, optional [SRT|RTP|RTMP|RTMP_PULL].
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="allowIpLists")
    def allow_ip_lists(self) -> Optional[Sequence[str]]:
        """
        The input IP whitelist, the format is CIDR.
        """
        return pulumi.get(self, "allow_ip_lists")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The input description with a length of [0, 255].
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failOver")
    def fail_over(self) -> Optional[str]:
        """
        The active/standby switch of the input, [OPEN|CLOSE] is optional, and the default is CLOSE.
        """
        return pulumi.get(self, "fail_over")

    @property
    @pulumi.getter(name="hlsPullSettings")
    def hls_pull_settings(self) -> Optional['outputs.InputInputGroupHlsPullSettings']:
        """
        Input HLS_PULL configuration information.
        """
        return pulumi.get(self, "hls_pull_settings")

    @property
    @pulumi.getter(name="resilientStream")
    def resilient_stream(self) -> Optional['outputs.InputInputGroupResilientStream']:
        """
        Delay broadcast smooth streaming configuration information.
        """
        return pulumi.get(self, "resilient_stream")

    @property
    @pulumi.getter(name="rtmpPullSettings")
    def rtmp_pull_settings(self) -> Optional['outputs.InputInputGroupRtmpPullSettings']:
        """
        Input RTMP_PULL configuration information.
        """
        return pulumi.get(self, "rtmp_pull_settings")

    @property
    @pulumi.getter(name="rtpSettings")
    def rtp_settings(self) -> Optional['outputs.InputInputGroupRtpSettings']:
        """
        Input RTP configuration information.
        """
        return pulumi.get(self, "rtp_settings")

    @property
    @pulumi.getter(name="rtspPullSettings")
    def rtsp_pull_settings(self) -> Optional['outputs.InputInputGroupRtspPullSettings']:
        """
        Input RTSP_PULL configuration information.
        """
        return pulumi.get(self, "rtsp_pull_settings")

    @property
    @pulumi.getter(name="srtSettings")
    def srt_settings(self) -> Optional['outputs.InputInputGroupSrtSettings']:
        """
        The input SRT configuration information.
        """
        return pulumi.get(self, "srt_settings")


@pulumi.output_type
class InputInputGroupHlsPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupHlsPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupHlsPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupHlsPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.InputInputGroupHlsPullSettingsSourceAddress']):
        """
        :param Sequence['InputInputGroupHlsPullSettingsSourceAddressArgs'] source_addresses: There is only one origin address of the HLS origin station.
        """
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.InputInputGroupHlsPullSettingsSourceAddress']:
        """
        There is only one origin address of the HLS origin station.
        """
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class InputInputGroupHlsPullSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: The URL address of the RTSP source site.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL address of the RTSP source site.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class InputInputGroupResilientStream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bufferTime":
            suggest = "buffer_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupResilientStream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupResilientStream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupResilientStream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer_time: Optional[int] = None,
                 enable: Optional[bool] = None):
        """
        :param int buffer_time: Delay time, in seconds, currently supports a range of 10 to 300 seconds. Note: This field may return null, indicating that no valid value can be obtained.
        :param bool enable: Whether to enable the delayed broadcast smooth spit stream, true is enabled, false is not enabled, and the default is not enabled. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if buffer_time is not None:
            pulumi.set(__self__, "buffer_time", buffer_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="bufferTime")
    def buffer_time(self) -> Optional[int]:
        """
        Delay time, in seconds, currently supports a range of 10 to 300 seconds. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "buffer_time")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Whether to enable the delayed broadcast smooth spit stream, true is enabled, false is not enabled, and the default is not enabled. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class InputInputGroupRtmpPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupRtmpPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupRtmpPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupRtmpPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.InputInputGroupRtmpPullSettingsSourceAddress']):
        """
        :param Sequence['InputInputGroupRtmpPullSettingsSourceAddressArgs'] source_addresses: The source site address of the RTMP source site, there can only be one.
        """
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.InputInputGroupRtmpPullSettingsSourceAddress']:
        """
        The source site address of the RTMP source site, there can only be one.
        """
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class InputInputGroupRtmpPullSettingsSourceAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamKey":
            suggest = "stream_key"
        elif key == "tcUrl":
            suggest = "tc_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupRtmpPullSettingsSourceAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupRtmpPullSettingsSourceAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupRtmpPullSettingsSourceAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_key: str,
                 tc_url: str):
        """
        :param str stream_key: StreamKey information of the RTMP source site.
        :param str tc_url: TcUrl address of the RTMP source server.
        """
        pulumi.set(__self__, "stream_key", stream_key)
        pulumi.set(__self__, "tc_url", tc_url)

    @property
    @pulumi.getter(name="streamKey")
    def stream_key(self) -> str:
        """
        StreamKey information of the RTMP source site.
        """
        return pulumi.get(self, "stream_key")

    @property
    @pulumi.getter(name="tcUrl")
    def tc_url(self) -> str:
        """
        TcUrl address of the RTMP source server.
        """
        return pulumi.get(self, "tc_url")


@pulumi.output_type
class InputInputGroupRtpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeout":
            suggest = "idle_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupRtpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupRtpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupRtpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fec: Optional[str] = None,
                 idle_timeout: Optional[int] = None):
        """
        :param str fec: Defaults to &#39;none&#39;, optional values[&#39;none&#39;].
        :param int idle_timeout: Idle timeout, the default is 5000, the unit is ms, and the range is [1000, 10000].
        """
        if fec is not None:
            pulumi.set(__self__, "fec", fec)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter
    def fec(self) -> Optional[str]:
        """
        Defaults to &#39;none&#39;, optional values[&#39;none&#39;].
        """
        return pulumi.get(self, "fec")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[int]:
        """
        Idle timeout, the default is 5000, the unit is ms, and the range is [1000, 10000].
        """
        return pulumi.get(self, "idle_timeout")


@pulumi.output_type
class InputInputGroupRtspPullSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceAddresses":
            suggest = "source_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupRtspPullSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupRtspPullSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupRtspPullSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_addresses: Sequence['outputs.InputInputGroupRtspPullSettingsSourceAddress']):
        """
        :param Sequence['InputInputGroupRtspPullSettingsSourceAddressArgs'] source_addresses: The source site address of the RTSP source site, there can only be one.
        """
        pulumi.set(__self__, "source_addresses", source_addresses)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.InputInputGroupRtspPullSettingsSourceAddress']:
        """
        The source site address of the RTSP source site, there can only be one.
        """
        return pulumi.get(self, "source_addresses")


@pulumi.output_type
class InputInputGroupRtspPullSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: The URL address of the RTSP source site.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL address of the RTSP source site.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class InputInputGroupSrtSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pbKeyLen":
            suggest = "pb_key_len"
        elif key == "peerIdleTimeout":
            suggest = "peer_idle_timeout"
        elif key == "peerLatency":
            suggest = "peer_latency"
        elif key == "recvLatency":
            suggest = "recv_latency"
        elif key == "sourceAddresses":
            suggest = "source_addresses"
        elif key == "streamId":
            suggest = "stream_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputInputGroupSrtSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputInputGroupSrtSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputInputGroupSrtSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 latency: Optional[int] = None,
                 mode: Optional[str] = None,
                 passphrase: Optional[str] = None,
                 pb_key_len: Optional[int] = None,
                 peer_idle_timeout: Optional[int] = None,
                 peer_latency: Optional[int] = None,
                 recv_latency: Optional[int] = None,
                 source_addresses: Optional[Sequence['outputs.InputInputGroupSrtSettingsSourceAddress']] = None,
                 stream_id: Optional[str] = None):
        """
        :param int latency: Delay, default 0, unit ms, range [0, 3000].
        :param str mode: SRT mode, optional [LISTENER|CALLER], default is LISTENER.
        :param str passphrase: The decryption key, which is empty by default, means no encryption. Only ascii code values can be filled in, and the length is [10, 79].
        :param int pb_key_len: Key length, default is 0, optional [0|16|24|32].
        :param int peer_idle_timeout: Peer timeout, default is 5000, unit ms, range is [1000, 10000].
        :param int peer_latency: Peer delay, the default is 0, the unit is ms, and the range is [0, 3000].
        :param int recv_latency: Receiving delay, default is 120, unit ms, range is [0, 3000].
        :param Sequence['InputInputGroupSrtSettingsSourceAddressArgs'] source_addresses: SRT peer address, required when Mode is CALLER, and only 1 set can be filled in.
        :param str stream_id: Stream ID, optional uppercase and lowercase letters, numbers and special characters (.#!:&amp;,=_-), length 0~512. Specific format can refer to:https://github.com/Haivision/srt/blob/master/docs/features/access-control.md#standard-keys.
        """
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pb_key_len is not None:
            pulumi.set(__self__, "pb_key_len", pb_key_len)
        if peer_idle_timeout is not None:
            pulumi.set(__self__, "peer_idle_timeout", peer_idle_timeout)
        if peer_latency is not None:
            pulumi.set(__self__, "peer_latency", peer_latency)
        if recv_latency is not None:
            pulumi.set(__self__, "recv_latency", recv_latency)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        """
        Delay, default 0, unit ms, range [0, 3000].
        """
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        SRT mode, optional [LISTENER|CALLER], default is LISTENER.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        """
        The decryption key, which is empty by default, means no encryption. Only ascii code values can be filled in, and the length is [10, 79].
        """
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter(name="pbKeyLen")
    def pb_key_len(self) -> Optional[int]:
        """
        Key length, default is 0, optional [0|16|24|32].
        """
        return pulumi.get(self, "pb_key_len")

    @property
    @pulumi.getter(name="peerIdleTimeout")
    def peer_idle_timeout(self) -> Optional[int]:
        """
        Peer timeout, default is 5000, unit ms, range is [1000, 10000].
        """
        return pulumi.get(self, "peer_idle_timeout")

    @property
    @pulumi.getter(name="peerLatency")
    def peer_latency(self) -> Optional[int]:
        """
        Peer delay, the default is 0, the unit is ms, and the range is [0, 3000].
        """
        return pulumi.get(self, "peer_latency")

    @property
    @pulumi.getter(name="recvLatency")
    def recv_latency(self) -> Optional[int]:
        """
        Receiving delay, default is 120, unit ms, range is [0, 3000].
        """
        return pulumi.get(self, "recv_latency")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[Sequence['outputs.InputInputGroupSrtSettingsSourceAddress']]:
        """
        SRT peer address, required when Mode is CALLER, and only 1 set can be filled in.
        """
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        """
        Stream ID, optional uppercase and lowercase letters, numbers and special characters (.#!:&amp;,=_-), length 0~512. Specific format can refer to:https://github.com/Haivision/srt/blob/master/docs/features/access-control.md#standard-keys.
        """
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class InputInputGroupSrtSettingsSourceAddress(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: Peer IP.
        :param int port: Peer port.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Peer IP.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Peer port.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class OutputOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputName":
            suggest = "output_name"
        elif key == "outputRegion":
            suggest = "output_region"
        elif key == "allowIpLists":
            suggest = "allow_ip_lists"
        elif key == "maxConcurrent":
            suggest = "max_concurrent"
        elif key == "rtmpSettings":
            suggest = "rtmp_settings"
        elif key == "rtpSettings":
            suggest = "rtp_settings"
        elif key == "srtSettings":
            suggest = "srt_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 output_name: str,
                 output_region: str,
                 protocol: str,
                 allow_ip_lists: Optional[Sequence[str]] = None,
                 max_concurrent: Optional[int] = None,
                 rtmp_settings: Optional['outputs.OutputOutputRtmpSettings'] = None,
                 rtp_settings: Optional['outputs.OutputOutputRtpSettings'] = None,
                 srt_settings: Optional['outputs.OutputOutputSrtSettings'] = None):
        """
        :param str description: Output description.
        :param str output_name: The name of the output.
        :param str output_region: Output region.
        :param str protocol: Output protocol, optional [SRT|RTP|RTMP|RTMP_PULL].
        :param Sequence[str] allow_ip_lists: IP whitelist list, the format is CIDR, such as 0.0.0.0/0. When the Protocol is RTMP_PULL, it is valid, and if it is empty, it means that the client IP is not limited.
        :param int max_concurrent: The maximum number of concurrent pull streams, the maximum is 4, and the default is 4. Only SRT or RTMP_PULL can set this parameter.
        :param 'OutputOutputRtmpSettingsArgs' rtmp_settings: Output RTMP configuration.
        :param 'OutputOutputRtpSettingsArgs' rtp_settings: Output RTP configuration.
        :param 'OutputOutputSrtSettingsArgs' srt_settings: configuration of the output SRT.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "output_name", output_name)
        pulumi.set(__self__, "output_region", output_region)
        pulumi.set(__self__, "protocol", protocol)
        if allow_ip_lists is not None:
            pulumi.set(__self__, "allow_ip_lists", allow_ip_lists)
        if max_concurrent is not None:
            pulumi.set(__self__, "max_concurrent", max_concurrent)
        if rtmp_settings is not None:
            pulumi.set(__self__, "rtmp_settings", rtmp_settings)
        if rtp_settings is not None:
            pulumi.set(__self__, "rtp_settings", rtp_settings)
        if srt_settings is not None:
            pulumi.set(__self__, "srt_settings", srt_settings)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Output description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="outputName")
    def output_name(self) -> str:
        """
        The name of the output.
        """
        return pulumi.get(self, "output_name")

    @property
    @pulumi.getter(name="outputRegion")
    def output_region(self) -> str:
        """
        Output region.
        """
        return pulumi.get(self, "output_region")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Output protocol, optional [SRT|RTP|RTMP|RTMP_PULL].
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="allowIpLists")
    def allow_ip_lists(self) -> Optional[Sequence[str]]:
        """
        IP whitelist list, the format is CIDR, such as 0.0.0.0/0. When the Protocol is RTMP_PULL, it is valid, and if it is empty, it means that the client IP is not limited.
        """
        return pulumi.get(self, "allow_ip_lists")

    @property
    @pulumi.getter(name="maxConcurrent")
    def max_concurrent(self) -> Optional[int]:
        """
        The maximum number of concurrent pull streams, the maximum is 4, and the default is 4. Only SRT or RTMP_PULL can set this parameter.
        """
        return pulumi.get(self, "max_concurrent")

    @property
    @pulumi.getter(name="rtmpSettings")
    def rtmp_settings(self) -> Optional['outputs.OutputOutputRtmpSettings']:
        """
        Output RTMP configuration.
        """
        return pulumi.get(self, "rtmp_settings")

    @property
    @pulumi.getter(name="rtpSettings")
    def rtp_settings(self) -> Optional['outputs.OutputOutputRtpSettings']:
        """
        Output RTP configuration.
        """
        return pulumi.get(self, "rtp_settings")

    @property
    @pulumi.getter(name="srtSettings")
    def srt_settings(self) -> Optional['outputs.OutputOutputSrtSettings']:
        """
        configuration of the output SRT.
        """
        return pulumi.get(self, "srt_settings")


@pulumi.output_type
class OutputOutputRtmpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chunkSize":
            suggest = "chunk_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputOutputRtmpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputOutputRtmpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputOutputRtmpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence['outputs.OutputOutputRtmpSettingsDestination'],
                 chunk_size: Optional[int] = None):
        """
        :param Sequence['OutputOutputRtmpSettingsDestinationArgs'] destinations: The target address of the relay can be filled in 1~2.
        :param int chunk_size: RTMP Chunk size, range is [4096, 40960].
        """
        pulumi.set(__self__, "destinations", destinations)
        if chunk_size is not None:
            pulumi.set(__self__, "chunk_size", chunk_size)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.OutputOutputRtmpSettingsDestination']:
        """
        The target address of the relay can be filled in 1~2.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="chunkSize")
    def chunk_size(self) -> Optional[int]:
        """
        RTMP Chunk size, range is [4096, 40960].
        """
        return pulumi.get(self, "chunk_size")


@pulumi.output_type
class OutputOutputRtmpSettingsDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamKey":
            suggest = "stream_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputOutputRtmpSettingsDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputOutputRtmpSettingsDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputOutputRtmpSettingsDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_key: str,
                 url: str):
        """
        :param str stream_key: relayed StreamKey, in the format: stream?key=value.
        :param str url: relayed URL, the format is: rtmp://domain/live.
        """
        pulumi.set(__self__, "stream_key", stream_key)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="streamKey")
    def stream_key(self) -> str:
        """
        relayed StreamKey, in the format: stream?key=value.
        """
        return pulumi.get(self, "stream_key")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        relayed URL, the format is: rtmp://domain/live.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class OutputOutputRtpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeout":
            suggest = "idle_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputOutputRtpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputOutputRtpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputOutputRtpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence['outputs.OutputOutputRtpSettingsDestination'],
                 fec: str,
                 idle_timeout: int):
        """
        :param Sequence['OutputOutputRtpSettingsDestinationArgs'] destinations: The target address of the relay can be filled in 1~2.
        :param str fec: You can only fill in none.
        :param int idle_timeout: Idle timeout, unit ms.
        """
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "fec", fec)
        pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.OutputOutputRtpSettingsDestination']:
        """
        The target address of the relay can be filled in 1~2.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def fec(self) -> str:
        """
        You can only fill in none.
        """
        return pulumi.get(self, "fec")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> int:
        """
        Idle timeout, unit ms.
        """
        return pulumi.get(self, "idle_timeout")


@pulumi.output_type
class OutputOutputRtpSettingsDestination(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: Output IP.
        :param int port: output port.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Output IP.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        output port.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class OutputOutputSrtSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pbKeyLen":
            suggest = "pb_key_len"
        elif key == "peerIdleTimeout":
            suggest = "peer_idle_timeout"
        elif key == "peerLatency":
            suggest = "peer_latency"
        elif key == "recvLatency":
            suggest = "recv_latency"
        elif key == "streamId":
            suggest = "stream_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputOutputSrtSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputOutputSrtSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputOutputSrtSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Sequence['outputs.OutputOutputSrtSettingsDestination'],
                 latency: Optional[int] = None,
                 mode: Optional[str] = None,
                 passphrase: Optional[str] = None,
                 pb_key_len: Optional[int] = None,
                 peer_idle_timeout: Optional[int] = None,
                 peer_latency: Optional[int] = None,
                 recv_latency: Optional[int] = None,
                 stream_id: Optional[str] = None):
        """
        :param Sequence['OutputOutputSrtSettingsDestinationArgs'] destinations: The target address of the relay is required when Mode is CALLER, and only one group can be filled in.
        :param int latency: The total delay of relaying SRT, the default is 0, the unit is ms, and the range is [0, 3000].
        :param str mode: SRT mode, optional [LISTENER|CALLER], default is CALLER.
        :param str passphrase: The encryption key for relaying SRT, which is empty by default, indicating no encryption. Only ascii code values can be filled in, and the length is [10, 79].
        :param int pb_key_len: The key length of relay SRT, the default is 0, optional [0|16|24|32].
        :param int peer_idle_timeout: The peer idle timeout for relaying SRT, the default is 5000, the unit is ms, and the range is [1000, 10000].
        :param int peer_latency: The peer delay of relaying SRT, the default is 0, the unit is ms, and the range is [0, 3000].
        :param int recv_latency: The reception delay of relay SRT, the default is 120, the unit is ms, the range is [0, 3000].
        :param str stream_id: relay the stream ID of SRT. You can choose uppercase and lowercase letters, numbers and special characters (.#!:&amp;,=_-). The length is 0~512.
        """
        pulumi.set(__self__, "destinations", destinations)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if pb_key_len is not None:
            pulumi.set(__self__, "pb_key_len", pb_key_len)
        if peer_idle_timeout is not None:
            pulumi.set(__self__, "peer_idle_timeout", peer_idle_timeout)
        if peer_latency is not None:
            pulumi.set(__self__, "peer_latency", peer_latency)
        if recv_latency is not None:
            pulumi.set(__self__, "recv_latency", recv_latency)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)

    @property
    @pulumi.getter
    def destinations(self) -> Sequence['outputs.OutputOutputSrtSettingsDestination']:
        """
        The target address of the relay is required when Mode is CALLER, and only one group can be filled in.
        """
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        """
        The total delay of relaying SRT, the default is 0, the unit is ms, and the range is [0, 3000].
        """
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        SRT mode, optional [LISTENER|CALLER], default is CALLER.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        """
        The encryption key for relaying SRT, which is empty by default, indicating no encryption. Only ascii code values can be filled in, and the length is [10, 79].
        """
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter(name="pbKeyLen")
    def pb_key_len(self) -> Optional[int]:
        """
        The key length of relay SRT, the default is 0, optional [0|16|24|32].
        """
        return pulumi.get(self, "pb_key_len")

    @property
    @pulumi.getter(name="peerIdleTimeout")
    def peer_idle_timeout(self) -> Optional[int]:
        """
        The peer idle timeout for relaying SRT, the default is 5000, the unit is ms, and the range is [1000, 10000].
        """
        return pulumi.get(self, "peer_idle_timeout")

    @property
    @pulumi.getter(name="peerLatency")
    def peer_latency(self) -> Optional[int]:
        """
        The peer delay of relaying SRT, the default is 0, the unit is ms, and the range is [0, 3000].
        """
        return pulumi.get(self, "peer_latency")

    @property
    @pulumi.getter(name="recvLatency")
    def recv_latency(self) -> Optional[int]:
        """
        The reception delay of relay SRT, the default is 120, the unit is ms, the range is [0, 3000].
        """
        return pulumi.get(self, "recv_latency")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        """
        relay the stream ID of SRT. You can choose uppercase and lowercase letters, numbers and special characters (.#!:&amp;,=_-). The length is 0~512.
        """
        return pulumi.get(self, "stream_id")


@pulumi.output_type
class OutputOutputSrtSettingsDestination(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: Output IP.
        :param int port: output port.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Output IP.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        output port.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ProcessLiveStreamOperationAiAnalysisTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedParameter":
            suggest = "extended_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessLiveStreamOperationAiAnalysisTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessLiveStreamOperationAiAnalysisTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessLiveStreamOperationAiAnalysisTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: Optional[str] = None):
        """
        :param int definition: Video content analysis template ID.
        :param str extended_parameter: An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video content analysis template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[str]:
        """
        An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class ProcessLiveStreamOperationAiContentReviewTask(dict):
    def __init__(__self__, *,
                 definition: int):
        """
        :param int definition: Video content audit template ID.
        """
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video content audit template ID.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessLiveStreamOperationAiQualityControlTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelExtPara":
            suggest = "channel_ext_para"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessLiveStreamOperationAiQualityControlTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessLiveStreamOperationAiQualityControlTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessLiveStreamOperationAiQualityControlTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_ext_para: Optional[str] = None,
                 definition: Optional[int] = None):
        """
        :param str channel_ext_para: The channel extension parameter, which is a serialized JSON string.Note: This field may return null, indicating that no valid values can be obtained.
        :param int definition: The ID of the quality control template.Note: This field may return null, indicating that no valid values can be obtained.
        """
        if channel_ext_para is not None:
            pulumi.set(__self__, "channel_ext_para", channel_ext_para)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter(name="channelExtPara")
    def channel_ext_para(self) -> Optional[str]:
        """
        The channel extension parameter, which is a serialized JSON string.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "channel_ext_para")

    @property
    @pulumi.getter
    def definition(self) -> Optional[int]:
        """
        The ID of the quality control template.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessLiveStreamOperationAiRecognitionTask(dict):
    def __init__(__self__, *,
                 definition: int):
        """
        :param int definition: Intelligent video recognition template ID.
        """
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Intelligent video recognition template ID.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessLiveStreamOperationOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessLiveStreamOperationOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessLiveStreamOperationOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessLiveStreamOperationOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessLiveStreamOperationOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessLiveStreamOperationOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS.`AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ProcessLiveStreamOperationOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessLiveStreamOperationOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS.`AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessLiveStreamOperationOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessLiveStreamOperationOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessLiveStreamOperationOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessLiveStreamOperationOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessLiveStreamOperationOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessLiveStreamOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessLiveStreamOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to upload files to the AWS S3 object.
        :param str s3_secret_key: The key required to upload files to the AWS S3 object.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to upload files to the AWS S3 object.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to upload files to the AWS S3 object.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessLiveStreamOperationTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessLiveStreamOperationTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessLiveStreamOperationTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessLiveStreamOperationTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        """
        :param str cmq_model: CMQ model. There are two types: `Queue` and `Topic`. Currently, only `Queue` is supported.
        :param str cmq_region: CMQ region, such as `sh` and `bj`.
        :param str notify_type: The notification type, `CMQ` by default. If this parameter is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`.Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
        :param str notify_url: HTTP callback URL, required if `NotifyType` is set to `URL`.
        :param str queue_name: This parameter is valid when the model is `Queue`, indicating the name of the CMQ queue for receiving event notifications.
        :param str topic_name: This parameter is valid when the model is `Topic`, indicating the name of the CMQ topic for receiving event notifications.
        """
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        """
        CMQ model. There are two types: `Queue` and `Topic`. Currently, only `Queue` is supported.
        """
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        """
        CMQ region, such as `sh` and `bj`.
        """
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        """
        The notification type, `CMQ` by default. If this parameter is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`.Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
        """
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        """
        HTTP callback URL, required if `NotifyType` is set to `URL`.
        """
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        """
        This parameter is valid when the model is `Queue`, indicating the name of the CMQ queue for receiving event notifications.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        This parameter is valid when the model is `Topic`, indicating the name of the CMQ topic for receiving event notifications.
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class ProcessMediaOperationAiAnalysisTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedParameter":
            suggest = "extended_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationAiAnalysisTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationAiAnalysisTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationAiAnalysisTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: Optional[str] = None):
        """
        :param int definition: Video content analysis template ID.
        :param str extended_parameter: An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video content analysis template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[str]:
        """
        An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class ProcessMediaOperationAiContentReviewTask(dict):
    def __init__(__self__, *,
                 definition: int):
        """
        :param int definition: Video content audit template ID.
        """
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video content audit template ID.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessMediaOperationAiQualityControlTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelExtPara":
            suggest = "channel_ext_para"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationAiQualityControlTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationAiQualityControlTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationAiQualityControlTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_ext_para: Optional[str] = None,
                 definition: Optional[int] = None):
        """
        :param str channel_ext_para: The channel extension parameter, which is a serialized JSON string.Note: This field may return null, indicating that no valid values can be obtained.
        :param int definition: The ID of the quality control template.Note: This field may return null, indicating that no valid values can be obtained.
        """
        if channel_ext_para is not None:
            pulumi.set(__self__, "channel_ext_para", channel_ext_para)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter(name="channelExtPara")
    def channel_ext_para(self) -> Optional[str]:
        """
        The channel extension parameter, which is a serialized JSON string.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "channel_ext_para")

    @property
    @pulumi.getter
    def definition(self) -> Optional[int]:
        """
        The ID of the quality control template.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessMediaOperationAiRecognitionTask(dict):
    def __init__(__self__, *,
                 definition: int):
        """
        :param int definition: Intelligent video recognition template ID.
        """
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Intelligent video recognition template ID.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class ProcessMediaOperationInputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationInputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationInputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationInputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationInputInfoCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationInputInfoS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationInputInfoUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ProcessMediaOperationInputInfoCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ProcessMediaOperationInputInfoS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationInputInfoUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationInputInfoCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationInputInfoS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationInputInfoUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationInputInfoCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationInputInfoS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationInputInfoS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationInputInfoS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationInputInfoS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationInputInfoUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adaptiveDynamicStreamingTaskSets":
            suggest = "adaptive_dynamic_streaming_task_sets"
        elif key == "animatedGraphicTaskSets":
            suggest = "animated_graphic_task_sets"
        elif key == "imageSpriteTaskSets":
            suggest = "image_sprite_task_sets"
        elif key == "sampleSnapshotTaskSets":
            suggest = "sample_snapshot_task_sets"
        elif key == "snapshotByTimeOffsetTaskSets":
            suggest = "snapshot_by_time_offset_task_sets"
        elif key == "transcodeTaskSets":
            suggest = "transcode_task_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet']] = None,
                 animated_graphic_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet']] = None,
                 image_sprite_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet']] = None,
                 sample_snapshot_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet']] = None,
                 snapshot_by_time_offset_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet']] = None,
                 transcode_task_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSet']] = None):
        """
        :param Sequence['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs'] adaptive_dynamic_streaming_task_sets: List of adaptive bitrate streaming tasks.
        :param Sequence['ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetArgs'] animated_graphic_task_sets: List of animated image generating tasks.
        :param Sequence['ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetArgs'] image_sprite_task_sets: List of image sprite generating tasks.
        :param Sequence['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetArgs'] sample_snapshot_task_sets: List of sampled screencapturing tasks.
        :param Sequence['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs'] snapshot_by_time_offset_task_sets: List of time point screencapturing tasks.
        :param Sequence['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetArgs'] transcode_task_sets: List of transcoding tasks.
        """
        if adaptive_dynamic_streaming_task_sets is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task_sets", adaptive_dynamic_streaming_task_sets)
        if animated_graphic_task_sets is not None:
            pulumi.set(__self__, "animated_graphic_task_sets", animated_graphic_task_sets)
        if image_sprite_task_sets is not None:
            pulumi.set(__self__, "image_sprite_task_sets", image_sprite_task_sets)
        if sample_snapshot_task_sets is not None:
            pulumi.set(__self__, "sample_snapshot_task_sets", sample_snapshot_task_sets)
        if snapshot_by_time_offset_task_sets is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task_sets", snapshot_by_time_offset_task_sets)
        if transcode_task_sets is not None:
            pulumi.set(__self__, "transcode_task_sets", transcode_task_sets)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTaskSets")
    def adaptive_dynamic_streaming_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet']]:
        """
        List of adaptive bitrate streaming tasks.
        """
        return pulumi.get(self, "adaptive_dynamic_streaming_task_sets")

    @property
    @pulumi.getter(name="animatedGraphicTaskSets")
    def animated_graphic_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet']]:
        """
        List of animated image generating tasks.
        """
        return pulumi.get(self, "animated_graphic_task_sets")

    @property
    @pulumi.getter(name="imageSpriteTaskSets")
    def image_sprite_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet']]:
        """
        List of image sprite generating tasks.
        """
        return pulumi.get(self, "image_sprite_task_sets")

    @property
    @pulumi.getter(name="sampleSnapshotTaskSets")
    def sample_snapshot_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet']]:
        """
        List of sampled screencapturing tasks.
        """
        return pulumi.get(self, "sample_snapshot_task_sets")

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTaskSets")
    def snapshot_by_time_offset_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet']]:
        """
        List of time point screencapturing tasks.
        """
        return pulumi.get(self, "snapshot_by_time_offset_task_sets")

    @property
    @pulumi.getter(name="transcodeTaskSets")
    def transcode_task_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSet']]:
        """
        List of transcoding tasks.
        """
        return pulumi.get(self, "transcode_task_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOnSubtitles":
            suggest = "add_on_subtitles"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "subStreamObjectName":
            suggest = "sub_stream_object_name"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 add_on_subtitles: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle']] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage'] = None,
                 segment_object_name: Optional[str] = None,
                 sub_stream_object_name: Optional[str] = None,
                 watermark_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet']] = None):
        """
        :param int definition: Adaptive bitrate streaming template ID.
        :param Sequence['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleArgs'] add_on_subtitles: The subtitle file to add.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: The relative or absolute output path of the manifest file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}.{format}`.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs' output_storage: Target bucket of an output file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: this field may return null, indicating that no valid values can be obtained.
        :param str segment_object_name: The relative output path of the segment file after being transcoded to adaptive bitrate streaming (in HLS format only). If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}_{segmentNumber}.{format}`.
        :param str sub_stream_object_name: The relative output path of the substream file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
        :param Sequence['ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.
        """
        pulumi.set(__self__, "definition", definition)
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Adaptive bitrate streaming template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle']]:
        """
        The subtitle file to add.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        The relative or absolute output path of the manifest file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage']:
        """
        Target bucket of an output file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        """
        The relative output path of the segment file after being transcoded to adaptive bitrate streaming (in HLS format only). If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}_{segmentNumber}.{format}`.
        """
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[str]:
        """
        The relative output path of the substream file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
        """
        return pulumi.get(self, "sub_stream_object_name")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet']]:
        """
        List of up to 10 image or text watermarks.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitle(dict):
    def __init__(__self__, *,
                 subtitle: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle'] = None,
                 type: Optional[str] = None):
        """
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleArgs' subtitle: The subtitle file.Note: This field may return null, indicating that no valid values can be obtained.
        :param str type: The mode. Valid values:`subtitle-stream`: Add a subtitle track.`close-caption-708`: Embed CEA-708 subtitles in SEI frames.`close-caption-608`: Embed CEA-608 subtitles in SEI frames.Note: This field may return null, indicating that no valid values can be obtained.
        """
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle']:
        """
        The subtitle file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The mode. Valid values:`subtitle-stream`: Add a subtitle track.`close-caption-708`: Embed CEA-708 subtitles in SEI frames.`close-caption-608`: Embed CEA-608 subtitles in SEI frames.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetAddOnSubtitleSubtitleUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs' raw_parameter: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type. Valid values:image: image watermark.
        :param str coordinate_origin: Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type. Valid values:image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: Input content of watermark image. JPEG and PNG images are supported.
        :param str height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 start_time_offset: float,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage'] = None):
        """
        :param int definition: Animated image generating template ID.
        :param float end_time_offset: End time of an animated image in a video in seconds.
        :param float start_time_offset: Start time of an animated image in a video in seconds.
        :param str output_object_path: Output path to a generated animated image file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_animatedGraphic_{definition}.{format}`.
        :param 'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs' output_storage: Target bucket of a generated animated image file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Animated image generating template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        """
        End time of an animated image in a video in seconds.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        """
        Start time of an animated image in a video in seconds.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        Output path to a generated animated image file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_animatedGraphic_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage']:
        """
        Target bucket of a generated animated image file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskAnimatedGraphicTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "webVttObjectName":
            suggest = "web_vtt_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage'] = None,
                 web_vtt_object_name: Optional[str] = None):
        """
        :param int definition: ID of an image sprite generating template.
        :param 'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs' object_number_format: Rule of the `{number}` variable in the image sprite output path.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Output path to a generated image sprite file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}_{number}.{format}`.
        :param 'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageArgs' output_storage: Target bucket of a generated image sprite. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        :param str web_vtt_object_name: Output path to the WebVTT file after an image sprite is generated, which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}.{format}`.
        """
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of an image sprite generating template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat']:
        """
        Rule of the `{number}` variable in the image sprite output path.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        Output path to a generated image sprite file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage']:
        """
        Target bucket of a generated image sprite. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[str]:
        """
        Output path to the WebVTT file after an image sprite is generated, which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}.{format}`.
        """
        return pulumi.get(self, "web_vtt_object_name")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskImageSpriteTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage'] = None,
                 watermark_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet']] = None):
        """
        :param int definition: Sampled screencapturing template ID.
        :param 'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs' object_number_format: Rule of the `{number}` variable in the sampled screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Output path to a generated sampled screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_sampleSnapshot_{definition}_{number}.{format}`.
        :param 'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs' output_storage: Target bucket of a sampled screenshot. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Sampled screencapturing template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat']:
        """
        Rule of the `{number}` variable in the sampled screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        Output path to a generated sampled screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_sampleSnapshot_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage']:
        """
        Target bucket of a sampled screenshot. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet']]:
        """
        List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param 'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs' raw_parameter: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type. Valid values:image: image watermark.
        :param str coordinate_origin: Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param 'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type. Valid values:image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: Input content of watermark image. JPEG and PNG images are supported.
        :param str height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extTimeOffsetSets":
            suggest = "ext_time_offset_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "timeOffsetSets":
            suggest = "time_offset_sets"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 ext_time_offset_sets: Optional[Sequence[str]] = None,
                 object_number_format: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage'] = None,
                 time_offset_sets: Optional[Sequence[float]] = None,
                 watermark_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet']] = None):
        """
        :param int definition: ID of a time point screencapturing template.
        :param Sequence[str] ext_time_offset_sets: List of screenshot time points in the format of `s` or `%`:If the string ends in `s`, it means that the time point is in seconds; for example, `3.5s` means that the time point is the 3.5th second;If the string ends in `%`, it means that the time point is the specified percentage of the video duration; for example, `10%` means that the time point is 10% of the video duration.
        :param 'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs' object_number_format: Rule of the `{number}` variable in the time point screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Output path to a generated time point screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_snapshotByTimeOffset_{definition}_{number}.{format}`.
        :param 'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs' output_storage: Target bucket of a generated time point screenshot file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence[float] time_offset_sets: List of time points of screenshots in &lt;font color=red&gt;seconds&lt;/font&gt;.
        :param Sequence['ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if time_offset_sets is not None:
            pulumi.set(__self__, "time_offset_sets", time_offset_sets)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a time point screencapturing template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[Sequence[str]]:
        """
        List of screenshot time points in the format of `s` or `%`:If the string ends in `s`, it means that the time point is in seconds; for example, `3.5s` means that the time point is the 3.5th second;If the string ends in `%`, it means that the time point is the specified percentage of the video duration; for example, `10%` means that the time point is 10% of the video duration.
        """
        return pulumi.get(self, "ext_time_offset_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat']:
        """
        Rule of the `{number}` variable in the time point screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        Output path to a generated time point screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_snapshotByTimeOffset_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage']:
        """
        Target bucket of a generated time point screenshot file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="timeOffsetSets")
    def time_offset_sets(self) -> Optional[Sequence[float]]:
        """
        List of time points of screenshots in &lt;font color=red&gt;seconds&lt;/font&gt;.
        """
        return pulumi.get(self, "time_offset_sets")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet']]:
        """
        List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param 'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs' raw_parameter: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type. Valid values:image: image watermark.
        :param str coordinate_origin: Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param 'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type. Valid values:image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: Input content of watermark image. JPEG and PNG images are supported.
        :param str height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "headTailParameter":
            suggest = "head_tail_parameter"
        elif key == "mosaicSets":
            suggest = "mosaic_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "overrideParameter":
            suggest = "override_parameter"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 head_tail_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter'] = None,
                 mosaic_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet']] = None,
                 object_number_format: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage'] = None,
                 override_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter'] = None,
                 raw_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter'] = None,
                 segment_object_name: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 watermark_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet']] = None):
        """
        :param int definition: ID of a video transcoding template.
        :param float end_time_offset: End time offset of a transcoded video, in seconds.If this parameter is left empty or set to 0, the transcoded video will end at the same time as the original video.If this parameter is set to a positive number (n for example), the transcoded video will end at the nth second of the original video.If this parameter is set to a negative number (-n for example), the transcoded video will end at the nth second before the end of the original video.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs' head_tail_parameter: Opening and closing credits parametersNote: this field may return `null`, indicating that no valid value was found.
        :param Sequence['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSetArgs'] mosaic_sets: List of blurs. Up to 10 ones can be supported.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs' object_number_format: Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageArgs' output_storage: Target bucket of an output file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterArgs' override_parameter: Video transcoding custom parameter, which is valid when `Definition` is not 0.When any parameters in this structure are entered, they will be used to override corresponding parameters in templates.This parameter is used in highly customized scenarios. We recommend you only use `Definition` to specify the transcoding parameter.Note: this field may return `null`, indicating that no valid value was found.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterArgs' raw_parameter: Custom video transcoding parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the transcoding parameter preferably.
        :param str segment_object_name: Path to an output file part (the path to ts during transcoding to HLS), which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}_{number}.{format}`.
        :param float start_time_offset: Start time offset of a transcoded video, in seconds.If this parameter is left empty or set to 0, the transcoded video will start at the same time as the original video.If this parameter is set to a positive number (n for example), the transcoded video will start at the nth second of the original video.If this parameter is set to a negative number (-n for example), the transcoded video will start at the nth second before the end of the original video.
        :param Sequence['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a video transcoding template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of a transcoded video, in seconds.If this parameter is left empty or set to 0, the transcoded video will end at the same time as the original video.If this parameter is set to a positive number (n for example), the transcoded video will end at the nth second of the original video.If this parameter is set to a negative number (-n for example), the transcoded video will end at the nth second before the end of the original video.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter']:
        """
        Opening and closing credits parametersNote: this field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "head_tail_parameter")

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet']]:
        """
        List of blurs. Up to 10 ones can be supported.
        """
        return pulumi.get(self, "mosaic_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat']:
        """
        Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage']:
        """
        Target bucket of an output file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter']:
        """
        Video transcoding custom parameter, which is valid when `Definition` is not 0.When any parameters in this structure are entered, they will be used to override corresponding parameters in templates.This parameter is used in highly customized scenarios. We recommend you only use `Definition` to specify the transcoding parameter.Note: this field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "override_parameter")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter']:
        """
        Custom video transcoding parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the transcoding parameter preferably.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        """
        Path to an output file part (the path to ts during transcoding to HLS), which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of a transcoded video, in seconds.If this parameter is left empty or set to 0, the transcoded video will start at the same time as the original video.If this parameter is set to a positive number (n for example), the transcoded video will start at the nth second of the original video.If this parameter is set to a negative number (-n for example), the transcoded video will start at the nth second before the end of the original video.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet']]:
        """
        List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headSets":
            suggest = "head_sets"
        elif key == "tailSets":
            suggest = "tail_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 head_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet']] = None,
                 tail_sets: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet']] = None):
        """
        :param Sequence['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs'] head_sets: Opening credits list.
        :param Sequence['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs'] tail_sets: Closing credits list.
        """
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet']]:
        """
        Opening credits list.
        """
        return pulumi.get(self, "head_sets")

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet']]:
        """
        Closing credits list.
        """
        return pulumi.get(self, "tail_sets")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetMosaicSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coordinate_origin: Optional[str] = None,
                 end_time_offset: Optional[float] = None,
                 height: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 width: Optional[str] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str coordinate_origin: Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text.Default value: TopLeft.
        :param float end_time_offset: End time offset of blur in seconds.If this parameter is left empty or 0 is entered, the blur will exist till the last video frame;If this value is greater than 0 (e.g., n), the blur will exist till second n;If this value is smaller than 0 (e.g., -n), the blur will exist till second n before the last video frame.
        :param str height: Blur height. % and px formats are supported:If the string ends in %, the `Height` of the blur will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the blur will be in px; for example, `100px` means that `Height` is 100 px.Default value: 10%.
        :param float start_time_offset: Start time offset of blur in seconds. If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame.If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame;If this value is greater than 0 (e.g., n), the blur will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the blur will appear at second n before the last video frame.
        :param str width: Blur width. % and px formats are supported:If the string ends in %, the `Width` of the blur will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the blur will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        :param str x_pos: The horizontal position of the origin of the blur relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the blur will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the blur will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: Vertical position of the origin of blur relative to the origin of coordinates of video. % and px formats are supported:If the string ends in %, the `YPos` of the blur will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the blur will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of blur in seconds.If this parameter is left empty or 0 is entered, the blur will exist till the last video frame;If this value is greater than 0 (e.g., n), the blur will exist till second n;If this value is smaller than 0 (e.g., -n), the blur will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        Blur height. % and px formats are supported:If the string ends in %, the `Height` of the blur will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the blur will be in px; for example, `100px` means that `Height` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of blur in seconds. If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame.If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame;If this value is greater than 0 (e.g., n), the blur will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the blur will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        Blur width. % and px formats are supported:If the string ends in %, the `Width` of the blur will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the blur will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the blur relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the blur will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the blur will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        Vertical position of the origin of blur relative to the origin of coordinates of video. % and px formats are supported:If the string ends in %, the `YPos` of the blur will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the blur will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOnSubtitles":
            suggest = "add_on_subtitles"
        elif key == "addonAudioStreams":
            suggest = "addon_audio_streams"
        elif key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "stdExtInfo":
            suggest = "std_ext_info"
        elif key == "subtitleTemplate":
            suggest = "subtitle_template"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_on_subtitles: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle']] = None,
                 addon_audio_streams: Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream']] = None,
                 audio_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate'] = None,
                 container: Optional[str] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 std_ext_info: Optional[str] = None,
                 subtitle_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate'] = None,
                 tehd_config: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig'] = None,
                 video_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate'] = None):
        """
        :param Sequence['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleArgs'] add_on_subtitles: The subtitle file to add.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamArgs'] addon_audio_streams: The information of the external audio track to add.Note: This field may return null, indicating that no valid values can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs' audio_template: Audio stream configuration parameter.
        :param str container: Container format. Valid values: mp4, flv, hls, mp3, flac, ogg, and m4a; mp3, flac, ogg, and m4a are formats of audio files.
        :param int remove_audio: Whether to remove audio data. Valid values:0: retain1: remove.
        :param int remove_video: Whether to remove video data. Valid values:0: retain1: remove.
        :param str std_ext_info: An extended field for transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs' subtitle_template: The subtitle settings.Note: This field may return null, indicating that no valid values can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs' tehd_config: The TSC transcoding parameters.Note: This field may return null, indicating that no valid values can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs' video_template: Video stream configuration parameter.
        """
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if addon_audio_streams is not None:
            pulumi.set(__self__, "addon_audio_streams", addon_audio_streams)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if std_ext_info is not None:
            pulumi.set(__self__, "std_ext_info", std_ext_info)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle']]:
        """
        The subtitle file to add.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter(name="addonAudioStreams")
    def addon_audio_streams(self) -> Optional[Sequence['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream']]:
        """
        The information of the external audio track to add.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "addon_audio_streams")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate']:
        """
        Audio stream configuration parameter.
        """
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        """
        Container format. Valid values: mp4, flv, hls, mp3, flac, ogg, and m4a; mp3, flac, ogg, and m4a are formats of audio files.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        """
        Whether to remove audio data. Valid values:0: retain1: remove.
        """
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        """
        Whether to remove video data. Valid values:0: retain1: remove.
        """
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="stdExtInfo")
    def std_ext_info(self) -> Optional[str]:
        """
        An extended field for transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "std_ext_info")

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate']:
        """
        The subtitle settings.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subtitle_template")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig']:
        """
        The TSC transcoding parameters.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate']:
        """
        Video stream configuration parameter.
        """
        return pulumi.get(self, "video_template")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitle(dict):
    def __init__(__self__, *,
                 subtitle: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle'] = None,
                 type: Optional[str] = None):
        """
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleArgs' subtitle: The subtitle file.Note: This field may return null, indicating that no valid values can be obtained.
        :param str type: The mode. Valid values:`subtitle-stream`: Add a subtitle track.`close-caption-708`: Embed CEA-708 subtitles in SEI frames.`close-caption-608`: Embed CEA-608 subtitles in SEI frames.Note: This field may return null, indicating that no valid values can be obtained.
        """
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle']:
        """
        The subtitle file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The mode. Valid values:`subtitle-stream`: Add a subtitle track.`close-caption-708`: Embed CEA-708 subtitles in SEI frames.`close-caption-608`: Embed CEA-608 subtitles in SEI frames.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddOnSubtitleSubtitleUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAddonAudioStreamUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioChannel":
            suggest = "audio_channel"
        elif key == "sampleRate":
            suggest = "sample_rate"
        elif key == "streamSelects":
            suggest = "stream_selects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_channel: Optional[int] = None,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 sample_rate: Optional[int] = None,
                 stream_selects: Optional[Sequence[int]] = None):
        """
        :param int audio_channel: Audio channel system. Valid values:1: Mono2: Dual6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        :param int bitrate: Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
        :param str codec: Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is:libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is:flac.When the outer `Container` parameter is `m4a`, the valid values include:libfdk_aac;libmp3lame;ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include:libfdk_aac: more suitable for mp4;libmp3lame: more suitable for flv.When the outer `Container` parameter is `hls`, the valid values include:libfdk_aac;libmp3lame.
        :param int sample_rate: Audio stream sample rate. Valid values:32,00044,10048,000In Hz.
        :param Sequence[int] stream_selects: The audio tracks to retain. All audio tracks are retained by default.
        """
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        """
        Audio channel system. Valid values:1: Mono2: Dual6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        """
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        """
        Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        """
        Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is:libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is:flac.When the outer `Container` parameter is `m4a`, the valid values include:libfdk_aac;libmp3lame;ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include:libfdk_aac: more suitable for mp4;libmp3lame: more suitable for flv.When the outer `Container` parameter is `hls`, the valid values include:libfdk_aac;libmp3lame.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[int]:
        """
        Audio stream sample rate. Valid values:32,00044,10048,000In Hz.
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[Sequence[int]]:
        """
        The audio tracks to retain. All audio tracks are retained by default.
        """
        return pulumi.get(self, "stream_selects")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontAlpha":
            suggest = "font_alpha"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"
        elif key == "streamIndex":
            suggest = "stream_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_alpha: Optional[float] = None,
                 font_color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 font_type: Optional[str] = None,
                 path: Optional[str] = None,
                 stream_index: Optional[int] = None):
        """
        :param float font_alpha: The text transparency. Value range: 0-1.`0`: Fully transparent.`1`: Fully opaque.Default value: 1.Note: This field may return null, indicating that no valid values can be obtained.
        :param str font_color: The font color in 0xRRGGBB format. Default value: 0xFFFFFF (white).Note: This field may return null, indicating that no valid values can be obtained.
        :param str font_size: The font size (pixels). If this is not specified, the font size in the subtitle file will be used.Note: This field may return null, indicating that no valid values can be obtained.
        :param str font_type: The font. Valid values:`hei.ttf`: Heiti.`song.ttf`: Songti.`simkai.ttf`: Kaiti.`arial.ttf`: Arial.The default is `hei.ttf`.Note: This field may return null, indicating that no valid values can be obtained.
        :param str path: The URL of the subtitles to add to the video.Note: This field may return null, indicating that no valid values can be obtained.
        :param int stream_index: The subtitle track to add to the video. If both `Path` and `StreamIndex` are specified, `Path` will be used. You need to specify at least one of the two parameters.Note: This field may return null, indicating that no valid values can be obtained.
        """
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[float]:
        """
        The text transparency. Value range: 0-1.`0`: Fully transparent.`1`: Fully opaque.Default value: 1.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[str]:
        """
        The font color in 0xRRGGBB format. Default value: 0xFFFFFF (white).Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        """
        The font size (pixels). If this is not specified, the font size in the subtitle file will be used.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[str]:
        """
        The font. Valid values:`hei.ttf`: Heiti.`song.ttf`: Songti.`simkai.ttf`: Kaiti.`arial.ttf`: Arial.The default is `hei.ttf`.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "font_type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The URL of the subtitles to add to the video.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[int]:
        """
        The subtitle track to add to the video. If both `Path` and `StreamIndex` are specified, `Path` will be used. You need to specify at least one of the two parameters.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "stream_index")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_video_bitrate: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int max_video_bitrate: Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        :param str type: TESHD type. Valid values:TEHD-100: TESHD-100.If this parameter is left empty, TESHD will not be enabled.
        """
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        """
        Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        """
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        TESHD type. Valid values:TEHD-100: TESHD-100.If this parameter is left empty, TESHD will not be enabled.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentAdaptStream":
            suggest = "content_adapt_stream"
        elif key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 content_adapt_stream: Optional[int] = None,
                 fill_type: Optional[str] = None,
                 fps: Optional[int] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        """
        :param int bitrate: The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        :param str codec: The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        :param int content_adapt_stream: Whether to enable adaptive encoding. Valid values:0: Disable1: EnableDefault value: 0. If this parameter is set to `1`, multiple streams with different resolutions and bitrates will be generated automatically. The highest resolution, bitrate, and quality of the streams are determined by the values of `width` and `height`, `Bitrate`, and `Vcrf` in `VideoTemplate` respectively. If these parameters are not set in `VideoTemplate`, the highest resolution generated will be the same as that of the source video, and the highest video quality will be close to VMAF 95. To use this parameter or learn about the billing details of adaptive encoding, please contact your sales rep.
        :param str fill_type: The fill mode, which indicates how a video is resized when the video's original aspect ratio is different from the target aspect ratio. Valid values:stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding.black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars.white: Keep the image's original aspect ratio and fill the blank space with white bars.gauss: Keep the image's original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        :param int fps: The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        :param int gop: Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        :param int height: Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        :param str resolution_adaptive: Resolution adaption. Valid values:open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side.close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        :param int vcrf: The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        :param int width: Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        """
        The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        """
        The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[int]:
        """
        Whether to enable adaptive encoding. Valid values:0: Disable1: EnableDefault value: 0. If this parameter is set to `1`, multiple streams with different resolutions and bitrates will be generated automatically. The highest resolution, bitrate, and quality of the streams are determined by the values of `width` and `height`, `Bitrate`, and `Vcrf` in `VideoTemplate` respectively. If these parameters are not set in `VideoTemplate`, the highest resolution generated will be the same as that of the source video, and the highest video quality will be close to VMAF 95. To use this parameter or learn about the billing details of adaptive encoding, please contact your sales rep.
        """
        return pulumi.get(self, "content_adapt_stream")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        """
        The fill mode, which indicates how a video is resized when the video's original aspect ratio is different from the target aspect ratio. Valid values:stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding.black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars.white: Keep the image's original aspect ratio and fill the blank space with white bars.gauss: Keep the image's original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> Optional[int]:
        """
        The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        """
        Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        """
        Resolution adaption. Valid values:open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side.close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        """
        The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        """
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container: str,
                 audio_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate'] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 tehd_config: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig'] = None,
                 video_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate'] = None):
        """
        :param str container: Container. Valid values: mp4; flv; hls; mp3; flac; ogg; m4a. Among them, mp3, flac, ogg, and m4a are for audio files.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs' audio_template: Audio stream configuration parameter. This field is required when `RemoveAudio` is 0.
        :param int remove_audio: Whether to remove audio data. Valid values:0: retain;1: remove.Default value: 0.
        :param int remove_video: Whether to remove video data. Valid values:0: retain;1: remove.Default value: 0.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs' tehd_config: TESHD transcoding parameter.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs' video_template: Video stream configuration parameter. This field is required when `RemoveVideo` is 0.
        """
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> str:
        """
        Container. Valid values: mp4; flv; hls; mp3; flac; ogg; m4a. Among them, mp3, flac, ogg, and m4a are for audio files.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate']:
        """
        Audio stream configuration parameter. This field is required when `RemoveAudio` is 0.
        """
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        """
        Whether to remove audio data. Valid values:0: retain;1: remove.Default value: 0.
        """
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        """
        Whether to remove video data. Valid values:0: retain;1: remove.Default value: 0.
        """
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig']:
        """
        TESHD transcoding parameter.
        """
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate']:
        """
        Video stream configuration parameter. This field is required when `RemoveVideo` is 0.
        """
        return pulumi.get(self, "video_template")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        """
        :param int bitrate: Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
        :param str codec: Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is:libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is:flac.When the outer `Container` parameter is `m4a`, the valid values include:libfdk_aac;libmp3lame;ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include:libfdk_aac: more suitable for mp4;libmp3lame: more suitable for flv.When the outer `Container` parameter is `hls`, the valid values include:libfdk_aac;libmp3lame.
        :param int sample_rate: Audio stream sample rate. Valid values:32,00044,10048,000In Hz.
        :param int audio_channel: Audio channel system. Valid values:1: Mono2: Dual6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is:libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is:flac.When the outer `Container` parameter is `m4a`, the valid values include:libfdk_aac;libmp3lame;ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include:libfdk_aac: more suitable for mp4;libmp3lame: more suitable for flv.When the outer `Container` parameter is `hls`, the valid values include:libfdk_aac;libmp3lame.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        """
        Audio stream sample rate. Valid values:32,00044,10048,000In Hz.
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        """
        Audio channel system. Valid values:1: Mono2: Dual6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        """
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 max_video_bitrate: Optional[int] = None):
        """
        :param str type: TESHD type. Valid values:TEHD-100: TESHD-100.If this parameter is left empty, TESHD will not be enabled.
        :param int max_video_bitrate: Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        """
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        TESHD type. Valid values:TEHD-100: TESHD-100.If this parameter is left empty, TESHD will not be enabled.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        """
        Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        """
        return pulumi.get(self, "max_video_bitrate")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        """
        :param int bitrate: The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        :param str codec: The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        :param int fps: The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        :param str fill_type: The fill mode, which indicates how a video is resized when the video's original aspect ratio is different from the target aspect ratio. Valid values:stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding.black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars.white: Keep the image's original aspect ratio and fill the blank space with white bars.gauss: Keep the image's original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        :param int gop: Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        :param int height: Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        :param str resolution_adaptive: Resolution adaption. Valid values:open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side.close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        :param int vcrf: The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        :param int width: Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        """
        The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        """
        The fill mode, which indicates how a video is resized when the video's original aspect ratio is different from the target aspect ratio. Valid values:stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding.black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars.white: Keep the image's original aspect ratio and fill the blank space with white bars.gauss: Keep the image's original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        """
        Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        """
        Resolution adaption. Valid values:open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side.close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        """
        The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        """
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096].If both `Width` and `Height` are 0, the resolution will be the same as that of the source video;If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled;If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled;If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs' raw_parameter: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type. Valid values:image: image watermark.
        :param str coordinate_origin: Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type. Valid values:image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: Input content of watermark image. JPEG and PNG images are supported.
        :param str height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address. `URL`: A URL. `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ProcessMediaOperationOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ProcessMediaOperationOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ProcessMediaOperationOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ProcessMediaOperationOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ProcessMediaOperationOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values:`COS`: Tencent Cloud COS`&gt;AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ProcessMediaOperationOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ProcessMediaOperationOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ProcessMediaOperationOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ProcessMediaOperationOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ProcessMediaOperationTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsSqa":
            suggest = "aws_sqa"
        elif key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_sqa: Optional['outputs.ProcessMediaOperationTaskNotifyConfigAwsSqa'] = None,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        """
        :param 'ProcessMediaOperationTaskNotifyConfigAwsSqaArgs' aws_sqa: The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
        :param str cmq_model: The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
        :param str cmq_region: The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
        :param str notify_mode: Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
        :param str notify_type: The notification type. Valid values:`CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead.`TDMQ-CMQ`: Message queue`URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API.`SCF`: This notification type is not recommended. You need to configure it in the SCF console.`AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket.&lt;font color=red&gt;Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.&lt;/font&gt;.
        :param str notify_url: HTTP callback URL, required if `NotifyType` is set to `URL`.
        :param str queue_name: The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
        :param str topic_name: The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
        """
        if aws_sqa is not None:
            pulumi.set(__self__, "aws_sqa", aws_sqa)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqa")
    def aws_sqa(self) -> Optional['outputs.ProcessMediaOperationTaskNotifyConfigAwsSqa']:
        """
        The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "aws_sqa")

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
        """
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
        """
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        """
        Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
        """
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        """
        The notification type. Valid values:`CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead.`TDMQ-CMQ`: Message queue`URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API.`SCF`: This notification type is not recommended. You need to configure it in the SCF console.`AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket.&lt;font color=red&gt;Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.&lt;/font&gt;.
        """
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        """
        HTTP callback URL, required if `NotifyType` is set to `URL`.
        """
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class ProcessMediaOperationTaskNotifyConfigAwsSqa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqaQueueName":
            suggest = "sqa_queue_name"
        elif key == "sqaRegion":
            suggest = "sqa_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProcessMediaOperationTaskNotifyConfigAwsSqa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProcessMediaOperationTaskNotifyConfigAwsSqa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProcessMediaOperationTaskNotifyConfigAwsSqa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sqa_queue_name: str,
                 sqa_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str sqa_queue_name: The name of the SQS queue.
        :param str sqa_region: The region of the SQS queue.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "sqa_queue_name", sqa_queue_name)
        pulumi.set(__self__, "sqa_region", sqa_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqaQueueName")
    def sqa_queue_name(self) -> str:
        """
        The name of the SQS queue.
        """
        return pulumi.get(self, "sqa_queue_name")

    @property
    @pulumi.getter(name="sqaRegion")
    def sqa_region(self) -> str:
        """
        The region of the SQS queue.
        """
        return pulumi.get(self, "sqa_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activityType":
            suggest = "activity_type"
        elif key == "activityPara":
            suggest = "activity_para"
        elif key == "reardriveIndices":
            suggest = "reardrive_indices"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activity_type: str,
                 activity_para: Optional['outputs.ScheduleActivityActivityPara'] = None,
                 reardrive_indices: Optional[Sequence[int]] = None):
        """
        :param str activity_type: The subtask type. `input`: The start. `output`: The end. `action-trans`: Transcoding. `action-samplesnapshot`: Sampled screencapturing. `action-AIAnalysis`: Content analysis. `action-AIRecognition`: Content recognition. `action-aiReview`: Content moderation. `action-animated-graphics`: Animated screenshot generation. `action-image-sprite`: Image sprite generation. `action-snapshotByTimeOffset`: Time point screencapturing. `action-adaptive-substream`: Adaptive bitrate streaming.Note: This field may return null, indicating that no valid values can be obtained.
        :param 'ScheduleActivityActivityParaArgs' activity_para: The parameters of a subtask.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence[int] reardrive_indices: The indexes of the subsequent actions. Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "activity_type", activity_type)
        if activity_para is not None:
            pulumi.set(__self__, "activity_para", activity_para)
        if reardrive_indices is not None:
            pulumi.set(__self__, "reardrive_indices", reardrive_indices)

    @property
    @pulumi.getter(name="activityType")
    def activity_type(self) -> str:
        """
        The subtask type. `input`: The start. `output`: The end. `action-trans`: Transcoding. `action-samplesnapshot`: Sampled screencapturing. `action-AIAnalysis`: Content analysis. `action-AIRecognition`: Content recognition. `action-aiReview`: Content moderation. `action-animated-graphics`: Animated screenshot generation. `action-image-sprite`: Image sprite generation. `action-snapshotByTimeOffset`: Time point screencapturing. `action-adaptive-substream`: Adaptive bitrate streaming.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "activity_type")

    @property
    @pulumi.getter(name="activityPara")
    def activity_para(self) -> Optional['outputs.ScheduleActivityActivityPara']:
        """
        The parameters of a subtask.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "activity_para")

    @property
    @pulumi.getter(name="reardriveIndices")
    def reardrive_indices(self) -> Optional[Sequence[int]]:
        """
        The indexes of the subsequent actions. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "reardrive_indices")


@pulumi.output_type
class ScheduleActivityActivityPara(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adaptiveDynamicStreamingTask":
            suggest = "adaptive_dynamic_streaming_task"
        elif key == "aiAnalysisTask":
            suggest = "ai_analysis_task"
        elif key == "aiContentReviewTask":
            suggest = "ai_content_review_task"
        elif key == "aiRecognitionTask":
            suggest = "ai_recognition_task"
        elif key == "animatedGraphicTask":
            suggest = "animated_graphic_task"
        elif key == "imageSpriteTask":
            suggest = "image_sprite_task"
        elif key == "sampleSnapshotTask":
            suggest = "sample_snapshot_task"
        elif key == "snapshotByTimeOffsetTask":
            suggest = "snapshot_by_time_offset_task"
        elif key == "transcodeTask":
            suggest = "transcode_task"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityPara. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityPara.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityPara.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTask'] = None,
                 ai_analysis_task: Optional['outputs.ScheduleActivityActivityParaAiAnalysisTask'] = None,
                 ai_content_review_task: Optional['outputs.ScheduleActivityActivityParaAiContentReviewTask'] = None,
                 ai_recognition_task: Optional['outputs.ScheduleActivityActivityParaAiRecognitionTask'] = None,
                 animated_graphic_task: Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTask'] = None,
                 image_sprite_task: Optional['outputs.ScheduleActivityActivityParaImageSpriteTask'] = None,
                 sample_snapshot_task: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTask'] = None,
                 snapshot_by_time_offset_task: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTask'] = None,
                 transcode_task: Optional['outputs.ScheduleActivityActivityParaTranscodeTask'] = None):
        """
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskArgs' adaptive_dynamic_streaming_task: An adaptive bitrate streaming task.
        :param 'ScheduleActivityActivityParaAiAnalysisTaskArgs' ai_analysis_task: A content analysis task.
        :param 'ScheduleActivityActivityParaAiContentReviewTaskArgs' ai_content_review_task: A content moderation task.
        :param 'ScheduleActivityActivityParaAiRecognitionTaskArgs' ai_recognition_task: A content recognition task.
        :param 'ScheduleActivityActivityParaAnimatedGraphicTaskArgs' animated_graphic_task: An animated screenshot generation task.
        :param 'ScheduleActivityActivityParaImageSpriteTaskArgs' image_sprite_task: An image sprite generation task.
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskArgs' sample_snapshot_task: A sampled screencapturing task.
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskArgs' snapshot_by_time_offset_task: A time point screencapturing task.
        :param 'ScheduleActivityActivityParaTranscodeTaskArgs' transcode_task: A transcoding task.
        """
        if adaptive_dynamic_streaming_task is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task", adaptive_dynamic_streaming_task)
        if ai_analysis_task is not None:
            pulumi.set(__self__, "ai_analysis_task", ai_analysis_task)
        if ai_content_review_task is not None:
            pulumi.set(__self__, "ai_content_review_task", ai_content_review_task)
        if ai_recognition_task is not None:
            pulumi.set(__self__, "ai_recognition_task", ai_recognition_task)
        if animated_graphic_task is not None:
            pulumi.set(__self__, "animated_graphic_task", animated_graphic_task)
        if image_sprite_task is not None:
            pulumi.set(__self__, "image_sprite_task", image_sprite_task)
        if sample_snapshot_task is not None:
            pulumi.set(__self__, "sample_snapshot_task", sample_snapshot_task)
        if snapshot_by_time_offset_task is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task", snapshot_by_time_offset_task)
        if transcode_task is not None:
            pulumi.set(__self__, "transcode_task", transcode_task)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTask")
    def adaptive_dynamic_streaming_task(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTask']:
        """
        An adaptive bitrate streaming task.
        """
        return pulumi.get(self, "adaptive_dynamic_streaming_task")

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> Optional['outputs.ScheduleActivityActivityParaAiAnalysisTask']:
        """
        A content analysis task.
        """
        return pulumi.get(self, "ai_analysis_task")

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> Optional['outputs.ScheduleActivityActivityParaAiContentReviewTask']:
        """
        A content moderation task.
        """
        return pulumi.get(self, "ai_content_review_task")

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> Optional['outputs.ScheduleActivityActivityParaAiRecognitionTask']:
        """
        A content recognition task.
        """
        return pulumi.get(self, "ai_recognition_task")

    @property
    @pulumi.getter(name="animatedGraphicTask")
    def animated_graphic_task(self) -> Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTask']:
        """
        An animated screenshot generation task.
        """
        return pulumi.get(self, "animated_graphic_task")

    @property
    @pulumi.getter(name="imageSpriteTask")
    def image_sprite_task(self) -> Optional['outputs.ScheduleActivityActivityParaImageSpriteTask']:
        """
        An image sprite generation task.
        """
        return pulumi.get(self, "image_sprite_task")

    @property
    @pulumi.getter(name="sampleSnapshotTask")
    def sample_snapshot_task(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTask']:
        """
        A sampled screencapturing task.
        """
        return pulumi.get(self, "sample_snapshot_task")

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTask")
    def snapshot_by_time_offset_task(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTask']:
        """
        A time point screencapturing task.
        """
        return pulumi.get(self, "snapshot_by_time_offset_task")

    @property
    @pulumi.getter(name="transcodeTask")
    def transcode_task(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTask']:
        """
        A transcoding task.
        """
        return pulumi.get(self, "transcode_task")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOnSubtitles":
            suggest = "add_on_subtitles"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "subStreamObjectName":
            suggest = "sub_stream_object_name"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 add_on_subtitles: Optional[Sequence['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle']] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage'] = None,
                 segment_object_name: Optional[str] = None,
                 sub_stream_object_name: Optional[str] = None,
                 watermark_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet']] = None):
        """
        :param int definition: Adaptive bitrate streaming template ID.
        :param Sequence['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleArgs'] add_on_subtitles: Subtitle files to insert.Note: This field may return null, indicating that no valid value can be obtained.
        :param str output_object_path: The relative or absolute output path of the manifest file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}.{format}`.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageArgs' output_storage: Target bucket of an output file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: this field may return null, indicating that no valid values can be obtained.
        :param str segment_object_name: The relative output path of the segment file after being transcoded to adaptive bitrate streaming (in HLS format only). If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}_{segmentNumber}.{format}`.
        :param str sub_stream_object_name: The relative output path of the substream file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
        :param Sequence['ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.
        """
        pulumi.set(__self__, "definition", definition)
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Adaptive bitrate streaming template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle']]:
        """
        Subtitle files to insert.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        The relative or absolute output path of the manifest file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage']:
        """
        Target bucket of an output file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        """
        The relative output path of the segment file after being transcoded to adaptive bitrate streaming (in HLS format only). If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}_{segmentNumber}.{format}`.
        """
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[str]:
        """
        The relative output path of the substream file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
        """
        return pulumi.get(self, "sub_stream_object_name")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet']]:
        """
        List of up to 10 image or text watermarks.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitle(dict):
    def __init__(__self__, *,
                 subtitle: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle'] = None,
                 type: Optional[str] = None):
        """
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleArgs' subtitle: Subtitle file.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The inserting type. Valid values: `subtitle-stream`:Insert title track. `close-caption-708`:CEA-708 subtitle encode to SEI frame. `close-caption-608`:CEA-608 subtitle encode to SEI frame. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle']:
        """
        Subtitle file.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The inserting type. Valid values: `subtitle-stream`:Insert title track. `close-caption-708`:CEA-708 subtitle encode to SEI frame. `close-caption-608`:CEA-608 subtitle encode to SEI frame. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:  `COS`:A COS bucket address. `URL`:A URL. `AWS-S3`:An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when Type is COS.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if Type is AWS-S3.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when Type is URL.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:  `COS`:A COS bucket address. `URL`:A URL. `AWS-S3`:An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when Type is COS.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if Type is AWS-S3.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when Type is URL.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterArgs' raw_parameter: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type. Valid values: image: image watermark.
        :param str coordinate_origin: Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type. Valid values: image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: Input content of watermark image. JPEG and PNG images are supported.
        :param str height: Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent':
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaAiAnalysisTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedParameter":
            suggest = "extended_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAiAnalysisTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAiAnalysisTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAiAnalysisTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: Optional[str] = None):
        """
        :param int definition: Video content analysis template ID.
        :param str extended_parameter: An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video content analysis template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[str]:
        """
        An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class ScheduleActivityActivityParaAiContentReviewTask(dict):
    def __init__(__self__, *,
                 definition: int):
        """
        :param int definition: Video content audit template ID.
        """
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video content audit template ID.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class ScheduleActivityActivityParaAiRecognitionTask(dict):
    def __init__(__self__, *,
                 definition: int):
        """
        :param int definition: Intelligent video recognition template ID.
        """
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Intelligent video recognition template ID.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class ScheduleActivityActivityParaAnimatedGraphicTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAnimatedGraphicTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 start_time_offset: float,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage'] = None):
        """
        :param int definition: Animated image generating template ID.
        :param float end_time_offset: End time of an animated image in a video in seconds.
        :param float start_time_offset: Start time of an animated image in a video in seconds.
        :param str output_object_path: Output path to a generated animated image file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_animatedGraphic_{definition}.{format}`.
        :param 'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageArgs' output_storage: Target bucket of a generated animated image file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Animated image generating template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        """
        End time of an animated image in a video in seconds.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        """
        Start time of an animated image in a video in seconds.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        Output path to a generated animated image file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_animatedGraphic_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage']:
        """
        Target bucket of a generated animated image file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaImageSpriteTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "webVttObjectName":
            suggest = "web_vtt_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaImageSpriteTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaImageSpriteTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaImageSpriteTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorage'] = None,
                 web_vtt_object_name: Optional[str] = None):
        """
        :param int definition: ID of an image sprite generating template.
        :param 'ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormatArgs' object_number_format: Rule of the `{number}` variable in the image sprite output path.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Output path to a generated image sprite file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}_{number}.{format}`.
        :param 'ScheduleActivityActivityParaImageSpriteTaskOutputStorageArgs' output_storage: Target bucket of a generated image sprite. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        :param str web_vtt_object_name: Output path to the WebVTT file after an image sprite is generated, which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}.{format}`.
        """
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of an image sprite generating template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat']:
        """
        Rule of the `{number}` variable in the image sprite output path.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        Output path to a generated image sprite file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorage']:
        """
        Target bucket of a generated image sprite. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[str]:
        """
        Output path to the WebVTT file after an image sprite is generated, which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}.{format}`.
        """
        return pulumi.get(self, "web_vtt_object_name")


@pulumi.output_type
class ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ScheduleActivityActivityParaImageSpriteTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaImageSpriteTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage'] = None,
                 watermark_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet']] = None):
        """
        :param int definition: Sampled screencapturing template ID.
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormatArgs' object_number_format: Rule of the `{number}` variable in the sampled screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Output path to a generated sampled screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_sampleSnapshot_{definition}_{number}.{format}`.
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageArgs' output_storage: Target bucket of a sampled screenshot. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Sampled screencapturing template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat']:
        """
        Rule of the `{number}` variable in the sampled screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        Output path to a generated sampled screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_sampleSnapshot_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage']:
        """
        Target bucket of a sampled screenshot. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet']]:
        """
        List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterArgs' raw_parameter: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type. Valid values: image: image watermark.
        :param str coordinate_origin: Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type. Valid values: image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: Input content of watermark image. JPEG and PNG images are supported.
        :param str height: Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent':
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extTimeOffsetSets":
            suggest = "ext_time_offset_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 ext_time_offset_sets: Optional[Sequence[str]] = None,
                 object_number_format: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage'] = None,
                 watermark_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet']] = None):
        """
        :param int definition: ID of a time point screencapturing template.
        :param Sequence[str] ext_time_offset_sets: List of screenshot time points in the format of `s` or `%`: If the string ends in `s`, it means that the time point is in seconds; for example, `3.5s` means that the time point is the 3.5th second; If the string ends in `%`, it means that the time point is the specified percentage of the video duration; for example, `10%` means that the time point is 10% of the video duration.
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatArgs' object_number_format: Rule of the `{number}` variable in the time point screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Output path to a generated time point screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_snapshotByTimeOffset_{definition}_{number}.{format}`.
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageArgs' output_storage: Target bucket of a generated time point screenshot file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a time point screencapturing template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[Sequence[str]]:
        """
        List of screenshot time points in the format of `s` or `%`: If the string ends in `s`, it means that the time point is in seconds; for example, `3.5s` means that the time point is the 3.5th second; If the string ends in `%`, it means that the time point is the specified percentage of the video duration; for example, `10%` means that the time point is 10% of the video duration.
        """
        return pulumi.get(self, "ext_time_offset_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat']:
        """
        Rule of the `{number}` variable in the time point screenshot output path.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        Output path to a generated time point screenshot, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_snapshotByTimeOffset_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage']:
        """
        Target bucket of a generated time point screenshot file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet']]:
        """
        List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterArgs' raw_parameter: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type. Valid values: image: image watermark.
        :param str coordinate_origin: Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type. Valid values: image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: Input content of watermark image. JPEG and PNG images are supported.
        :param str height: Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent':
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "headTailParameter":
            suggest = "head_tail_parameter"
        elif key == "mosaicSets":
            suggest = "mosaic_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "overrideParameter":
            suggest = "override_parameter"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 head_tail_parameter: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameter'] = None,
                 mosaic_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskMosaicSet']] = None,
                 object_number_format: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorage'] = None,
                 override_parameter: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameter'] = None,
                 raw_parameter: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameter'] = None,
                 segment_object_name: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 watermark_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSet']] = None):
        """
        :param int definition: ID of a video transcoding template.
        :param float end_time_offset: End time offset of a transcoded video, in seconds. If this parameter is left empty or set to 0, the transcoded video will end at the same time as the original video. If this parameter is set to a positive number (n for example), the transcoded video will end at the nth second of the original video. If this parameter is set to a negative number (-n for example), the transcoded video will end at the nth second before the end of the original video.
        :param 'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterArgs' head_tail_parameter: Opening and closing credits parametersNote: this field may return `null`, indicating that no valid value was found.
        :param Sequence['ScheduleActivityActivityParaTranscodeTaskMosaicSetArgs'] mosaic_sets: List of blurs. Up to 10 ones can be supported.
        :param 'ScheduleActivityActivityParaTranscodeTaskObjectNumberFormatArgs' object_number_format: Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        :param 'ScheduleActivityActivityParaTranscodeTaskOutputStorageArgs' output_storage: Target bucket of an output file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterArgs' override_parameter: Video transcoding custom parameter, which is valid when `Definition` is not 0.When any parameters in this structure are entered, they will be used to override corresponding parameters in templates.This parameter is used in highly customized scenarios. We recommend you only use `Definition` to specify the transcoding parameter.Note: this field may return `null`, indicating that no valid value was found.
        :param 'ScheduleActivityActivityParaTranscodeTaskRawParameterArgs' raw_parameter: Custom video transcoding parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the transcoding parameter preferably.
        :param str segment_object_name: Path to an output file part (the path to ts during transcoding to HLS), which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}_{number}.{format}`.
        :param float start_time_offset: Start time offset of a transcoded video, in seconds. If this parameter is left empty or set to 0, the transcoded video will start at the same time as the original video. If this parameter is set to a positive number (n for example), the transcoded video will start at the nth second of the original video. If this parameter is set to a negative number (-n for example), the transcoded video will start at the nth second before the end of the original video.
        :param Sequence['ScheduleActivityActivityParaTranscodeTaskWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a video transcoding template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of a transcoded video, in seconds. If this parameter is left empty or set to 0, the transcoded video will end at the same time as the original video. If this parameter is set to a positive number (n for example), the transcoded video will end at the nth second of the original video. If this parameter is set to a negative number (-n for example), the transcoded video will end at the nth second before the end of the original video.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameter']:
        """
        Opening and closing credits parametersNote: this field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "head_tail_parameter")

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskMosaicSet']]:
        """
        List of blurs. Up to 10 ones can be supported.
        """
        return pulumi.get(self, "mosaic_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat']:
        """
        Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorage']:
        """
        Target bucket of an output file. If this parameter is left empty, the `OutputStorage` value of the upper folder will be inherited.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameter']:
        """
        Video transcoding custom parameter, which is valid when `Definition` is not 0.When any parameters in this structure are entered, they will be used to override corresponding parameters in templates.This parameter is used in highly customized scenarios. We recommend you only use `Definition` to specify the transcoding parameter.Note: this field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "override_parameter")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameter']:
        """
        Custom video transcoding parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the transcoding parameter preferably.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        """
        Path to an output file part (the path to ts during transcoding to HLS), which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of a transcoded video, in seconds. If this parameter is left empty or set to 0, the transcoded video will start at the same time as the original video. If this parameter is set to a positive number (n for example), the transcoded video will start at the nth second of the original video. If this parameter is set to a negative number (-n for example), the transcoded video will start at the nth second before the end of the original video.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSet']]:
        """
        List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headSets":
            suggest = "head_sets"
        elif key == "tailSets":
            suggest = "tail_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskHeadTailParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 head_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet']] = None,
                 tail_sets: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet']] = None):
        """
        :param Sequence['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetArgs'] head_sets: Opening credits list.
        :param Sequence['ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetArgs'] tail_sets: Closing credits list.
        """
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet']]:
        """
        Opening credits list.
        """
        return pulumi.get(self, "head_sets")

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet']]:
        """
        Closing credits list.
        """
        return pulumi.get(self, "tail_sets")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskMosaicSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskMosaicSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskMosaicSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskMosaicSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coordinate_origin: Optional[str] = None,
                 end_time_offset: Optional[float] = None,
                 height: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 width: Optional[str] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str coordinate_origin: Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text.Default value: TopLeft.
        :param float end_time_offset: End time offset of blur in seconds. If this parameter is left empty or 0 is entered, the blur will exist till the last video frame; If this value is greater than 0 (e.g., n), the blur will exist till second n; If this value is smaller than 0 (e.g., -n), the blur will exist till second n before the last video frame.
        :param str height: Blur height. % and px formats are supported: If the string ends in %, the `Height` of the blur will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the blur will be in px; for example, `100px` means that `Height` is 100 px.Default value: 10%.
        :param float start_time_offset: Start time offset of blur in seconds. If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame. If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame; If this value is greater than 0 (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the blur will appear at second n before the last video frame.
        :param str width: Blur width. % and px formats are supported: If the string ends in %, the `Width` of the blur will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the blur will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        :param str x_pos: The horizontal position of the origin of the blur relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the blur will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the blur will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: Vertical position of the origin of blur relative to the origin of coordinates of video. % and px formats are supported: If the string ends in %, the `YPos` of the blur will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the blur will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of blur in seconds. If this parameter is left empty or 0 is entered, the blur will exist till the last video frame; If this value is greater than 0 (e.g., n), the blur will exist till second n; If this value is smaller than 0 (e.g., -n), the blur will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        Blur height. % and px formats are supported: If the string ends in %, the `Height` of the blur will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the blur will be in px; for example, `100px` means that `Height` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of blur in seconds. If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame. If this parameter is left empty or 0 is entered, the blur will appear upon the first video frame; If this value is greater than 0 (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the blur will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        Blur width. % and px formats are supported: If the string ends in %, the `Width` of the blur will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the blur will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the blur relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the blur will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the blur will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        Vertical position of the origin of blur relative to the origin of coordinates of video. % and px formats are supported: If the string ends in %, the `YPos` of the blur will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the blur will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addOnSubtitles":
            suggest = "add_on_subtitles"
        elif key == "addonAudioStreams":
            suggest = "addon_audio_streams"
        elif key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "stdExtInfo":
            suggest = "std_ext_info"
        elif key == "subtitleTemplate":
            suggest = "subtitle_template"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_on_subtitles: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle']] = None,
                 addon_audio_streams: Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream']] = None,
                 audio_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate'] = None,
                 container: Optional[str] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 std_ext_info: Optional[str] = None,
                 subtitle_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate'] = None,
                 tehd_config: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig'] = None,
                 video_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate'] = None):
        """
        :param Sequence['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleArgs'] add_on_subtitles: Subtitle files to insert.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamArgs'] addon_audio_streams: The information of the external audio track to add.Note: This field may return null, indicating that no valid values can be obtained.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateArgs' audio_template: Audio stream configuration parameter.
        :param str container: Container format. Valid values: mp4, flv, hls, mp3, flac, ogg, and m4a; mp3, flac, ogg, and m4a are formats of audio files.
        :param int remove_audio: Whether to remove audio data. Valid values: 0: retain 1: remove.
        :param int remove_video: Whether to remove video data. Valid values: 0: retain 1: remove.
        :param str std_ext_info: Transcoding extension field.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateArgs' subtitle_template: The subtitle settings.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfigArgs' tehd_config: TESHD transcoding parameter.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateArgs' video_template: Video stream configuration parameter.
        """
        if add_on_subtitles is not None:
            pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        if addon_audio_streams is not None:
            pulumi.set(__self__, "addon_audio_streams", addon_audio_streams)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if std_ext_info is not None:
            pulumi.set(__self__, "std_ext_info", std_ext_info)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle']]:
        """
        Subtitle files to insert.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter(name="addonAudioStreams")
    def addon_audio_streams(self) -> Optional[Sequence['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream']]:
        """
        The information of the external audio track to add.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "addon_audio_streams")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate']:
        """
        Audio stream configuration parameter.
        """
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        """
        Container format. Valid values: mp4, flv, hls, mp3, flac, ogg, and m4a; mp3, flac, ogg, and m4a are formats of audio files.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        """
        Whether to remove audio data. Valid values: 0: retain 1: remove.
        """
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        """
        Whether to remove video data. Valid values: 0: retain 1: remove.
        """
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="stdExtInfo")
    def std_ext_info(self) -> Optional[str]:
        """
        Transcoding extension field.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "std_ext_info")

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate']:
        """
        The subtitle settings.
        """
        return pulumi.get(self, "subtitle_template")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig']:
        """
        TESHD transcoding parameter.
        """
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate']:
        """
        Video stream configuration parameter.
        """
        return pulumi.get(self, "video_template")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitle(dict):
    def __init__(__self__, *,
                 subtitle: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle'] = None,
                 type: Optional[str] = None):
        """
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleArgs' subtitle: Subtitle file.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The inserting type. Valid values: `subtitle-stream`:Insert title track. `close-caption-708`:CEA-708 subtitle encode to SEI frame. `close-caption-608`:CEA-608 subtitle encode to SEI frame. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle']:
        """
        Subtitle file.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The inserting type. Valid values: `subtitle-stream`:Insert title track. `close-caption-708`:CEA-708 subtitle encode to SEI frame. `close-caption-608`:CEA-608 subtitle encode to SEI frame. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values:  `COS`:A COS bucket address. `URL`:A URL. `AWS-S3`:An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when Type is COS.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if Type is AWS-S3.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when Type is URL.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:  `COS`:A COS bucket address. `URL`:A URL. `AWS-S3`:An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when Type is COS.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if Type is AWS-S3.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when Type is URL.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioChannel":
            suggest = "audio_channel"
        elif key == "sampleRate":
            suggest = "sample_rate"
        elif key == "streamSelects":
            suggest = "stream_selects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_channel: Optional[int] = None,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 sample_rate: Optional[int] = None,
                 stream_selects: Optional[Sequence[int]] = None):
        """
        :param int audio_channel: Audio channel system. Valid values: 1: Mono 2: Dual 6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        :param int bitrate: Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
        :param str codec: Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is: libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is: flac.When the outer `Container` parameter is `m4a`, the valid values include: libfdk_aac; libmp3lame; ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include: libfdk_aac: more suitable for mp4; libmp3lame: more suitable for flv.When the outer `Container` parameter is `hls`, the valid values include: libfdk_aac; libmp3lame.
        :param int sample_rate: Audio stream sample rate. Valid values: 32,000 44,100 48,000In Hz.
        :param Sequence[int] stream_selects: The audio tracks to retain. All audio tracks are retained by default.
        """
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        """
        Audio channel system. Valid values: 1: Mono 2: Dual 6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        """
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        """
        Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        """
        Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is: libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is: flac.When the outer `Container` parameter is `m4a`, the valid values include: libfdk_aac; libmp3lame; ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include: libfdk_aac: more suitable for mp4; libmp3lame: more suitable for flv.When the outer `Container` parameter is `hls`, the valid values include: libfdk_aac; libmp3lame.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[int]:
        """
        Audio stream sample rate. Valid values: 32,000 44,100 48,000In Hz.
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[Sequence[int]]:
        """
        The audio tracks to retain. All audio tracks are retained by default.
        """
        return pulumi.get(self, "stream_selects")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontAlpha":
            suggest = "font_alpha"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"
        elif key == "streamIndex":
            suggest = "stream_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_alpha: Optional[float] = None,
                 font_color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 font_type: Optional[str] = None,
                 path: Optional[str] = None,
                 stream_index: Optional[int] = None):
        """
        :param float font_alpha: The text transparency. Value range: 0-1. 0: Completely transparent 1: Completely opaqueDefault value: 1.
        :param str font_color: The font color in 0xRRGGBB format. Default value: 0xFFFFFF (white).
        :param str font_size: The font size (pixels). If this is not specified, the font size in the subtitle file will be used.
        :param str font_type: The font type. Valid values: `hei.ttf` `song.ttf` `simkai.ttf` `arial.ttf` (for English only). The default is `hei.ttf`.
        :param str path: The URL of the subtitles to add to the video.
        :param int stream_index: The subtitle track to add to the video. If both `Path` and `StreamIndex` are specified, `Path` will be used. You need to specify at least one of the two parameters.
        """
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[float]:
        """
        The text transparency. Value range: 0-1. 0: Completely transparent 1: Completely opaqueDefault value: 1.
        """
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[str]:
        """
        The font color in 0xRRGGBB format. Default value: 0xFFFFFF (white).
        """
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        """
        The font size (pixels). If this is not specified, the font size in the subtitle file will be used.
        """
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[str]:
        """
        The font type. Valid values: `hei.ttf` `song.ttf` `simkai.ttf` `arial.ttf` (for English only). The default is `hei.ttf`.
        """
        return pulumi.get(self, "font_type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The URL of the subtitles to add to the video.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[int]:
        """
        The subtitle track to add to the video. If both `Path` and `StreamIndex` are specified, `Path` will be used. You need to specify at least one of the two parameters.
        """
        return pulumi.get(self, "stream_index")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_video_bitrate: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int max_video_bitrate: Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        :param str type: TESHD type. Valid values: TEHD-100: TESHD-100.If this parameter is left empty, TESHD will not be enabled.
        """
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        """
        Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        """
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        TESHD type. Valid values: TEHD-100: TESHD-100.If this parameter is left empty, TESHD will not be enabled.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentAdaptStream":
            suggest = "content_adapt_stream"
        elif key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskOverrideParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 content_adapt_stream: Optional[int] = None,
                 fill_type: Optional[str] = None,
                 fps: Optional[int] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        """
        :param int bitrate: The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        :param str codec: The video codec. Valid values: `libx264`: H.264 `libx265`: H.265 `av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        :param int content_adapt_stream: Whether to enable adaptive encoding. Valid values: 0: Disable 1: EnableDefault value: 0. If this parameter is set to `1`, multiple streams with different resolutions and bitrates will be generated automatically. The highest resolution, bitrate, and quality of the streams are determined by the values of `width` and `height`, `Bitrate`, and `Vcrf` in `VideoTemplate` respectively. If these parameters are not set in `VideoTemplate`, the highest resolution generated will be the same as that of the source video, and the highest video quality will be close to VMAF 95. To use this parameter or learn about the billing details of adaptive encoding, please contact your sales rep.
        :param str fill_type: The fill mode, which indicates how a video is resized when the video's original aspect ratio is different from the target aspect ratio. Valid values: stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding. black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars. white: Keep the image's original aspect ratio and fill the blank space with white bars. gauss: Keep the image's original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        :param int fps: The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        :param int gop: Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        :param int height: Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        :param str resolution_adaptive: Resolution adaption. Valid values: open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side. close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        :param int vcrf: The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        :param int width: Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        """
        The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        """
        The video codec. Valid values: `libx264`: H.264 `libx265`: H.265 `av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[int]:
        """
        Whether to enable adaptive encoding. Valid values: 0: Disable 1: EnableDefault value: 0. If this parameter is set to `1`, multiple streams with different resolutions and bitrates will be generated automatically. The highest resolution, bitrate, and quality of the streams are determined by the values of `width` and `height`, `Bitrate`, and `Vcrf` in `VideoTemplate` respectively. If these parameters are not set in `VideoTemplate`, the highest resolution generated will be the same as that of the source video, and the highest video quality will be close to VMAF 95. To use this parameter or learn about the billing details of adaptive encoding, please contact your sales rep.
        """
        return pulumi.get(self, "content_adapt_stream")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        """
        The fill mode, which indicates how a video is resized when the video's original aspect ratio is different from the target aspect ratio. Valid values: stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding. black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars. white: Keep the image's original aspect ratio and fill the blank space with white bars. gauss: Keep the image's original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> Optional[int]:
        """
        The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        """
        Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        """
        Resolution adaption. Valid values: open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side. close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        """
        The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        """
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container: str,
                 audio_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate'] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 tehd_config: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig'] = None,
                 video_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate'] = None):
        """
        :param str container: Container. Valid values: mp4; flv; hls; mp3; flac; ogg; m4a. Among them, mp3, flac, ogg, and m4a are for audio files.
        :param 'ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplateArgs' audio_template: Audio stream configuration parameter. This field is required when `RemoveAudio` is 0.
        :param int remove_audio: Whether to remove audio data. Valid values: 0: retain; 1: remove.Default value: 0.
        :param int remove_video: Whether to remove video data. Valid values: 0: retain; 1: remove.Default value: 0.
        :param 'ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfigArgs' tehd_config: TESHD transcoding parameter.
        :param 'ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplateArgs' video_template: Video stream configuration parameter. This field is required when `RemoveVideo` is 0.
        """
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> str:
        """
        Container. Valid values: mp4; flv; hls; mp3; flac; ogg; m4a. Among them, mp3, flac, ogg, and m4a are for audio files.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate']:
        """
        Audio stream configuration parameter. This field is required when `RemoveAudio` is 0.
        """
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        """
        Whether to remove audio data. Valid values: 0: retain; 1: remove.Default value: 0.
        """
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        """
        Whether to remove video data. Valid values: 0: retain; 1: remove.Default value: 0.
        """
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig']:
        """
        TESHD transcoding parameter.
        """
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate']:
        """
        Video stream configuration parameter. This field is required when `RemoveVideo` is 0.
        """
        return pulumi.get(self, "video_template")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        """
        :param int bitrate: Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
        :param str codec: Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is: libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is: flac.When the outer `Container` parameter is `m4a`, the valid values include: libfdk_aac; libmp3lame; ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include: libfdk_aac: more suitable for mp4; libmp3lame: more suitable for flv.When the outer `Container` parameter is `hls`, the valid values include: libfdk_aac; libmp3lame.
        :param int sample_rate: Audio stream sample rate. Valid values: 32,000 44,100 48,000In Hz.
        :param int audio_channel: Audio channel system. Valid values: 1: Mono 2: Dual 6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Audio stream bitrate in Kbps. Value range: 0 and [26, 256].If the value is 0, the bitrate of the audio stream will be the same as that of the original audio.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        Audio stream codec.When the outer `Container` parameter is `mp3`, the valid value is: libmp3lame.When the outer `Container` parameter is `ogg` or `flac`, the valid value is: flac.When the outer `Container` parameter is `m4a`, the valid values include: libfdk_aac; libmp3lame; ac3.When the outer `Container` parameter is `mp4` or `flv`, the valid values include: libfdk_aac: more suitable for mp4; libmp3lame: more suitable for flv.When the outer `Container` parameter is `hls`, the valid values include: libfdk_aac; libmp3lame.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        """
        Audio stream sample rate. Valid values: 32,000 44,100 48,000In Hz.
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        """
        Audio channel system. Valid values: 1: Mono 2: Dual 6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        """
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 max_video_bitrate: Optional[int] = None):
        """
        :param str type: TESHD type. Valid values: TEHD-100: TESHD-100.If this parameter is left empty, TESHD will not be enabled.
        :param int max_video_bitrate: Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        """
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        TESHD type. Valid values: TEHD-100: TESHD-100.If this parameter is left empty, TESHD will not be enabled.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        """
        Maximum bitrate, which is valid when `Type` is `TESHD`.If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        """
        return pulumi.get(self, "max_video_bitrate")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskRawParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        """
        :param int bitrate: The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        :param str codec: The video codec. Valid values: `libx264`: H.264 `libx265`: H.265 `av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        :param int fps: The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        :param str fill_type: The fill mode, which indicates how a video is resized when the video's original aspect ratio is different from the target aspect ratio. Valid values: stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding. black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars. white: Keep the image's original aspect ratio and fill the blank space with white bars. gauss: Keep the image's original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        :param int gop: Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        :param int height: Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        :param str resolution_adaptive: Resolution adaption. Valid values: open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side. close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        :param int vcrf: The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        :param int width: Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        The video codec. Valid values: `libx264`: H.264 `libx265`: H.265 `av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        """
        The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        """
        The fill mode, which indicates how a video is resized when the video's original aspect ratio is different from the target aspect ratio. Valid values: stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding. black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars. white: Keep the image's original aspect ratio and fill the blank space with white bars. gauss: Keep the image's original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        """
        Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        Maximum value of the height (or short side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        """
        Resolution adaption. Valid values: open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side. close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        """
        The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        """
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        Maximum value of the width (or long side) of a video stream in px. Value range: 0 and [128, 4,096]. If both `Width` and `Height` are 0, the resolution will be the same as that of the source video; If `Width` is 0, but `Height` is not 0, `Width` will be proportionally scaled; If `Width` is not 0, but `Height` is 0, `Height` will be proportionally scaled; If both `Width` and `Height` are not 0, the custom resolution will be used.Default value: 0.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param 'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterArgs' raw_parameter: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame; If this value is greater than 0 (e.g., n), the watermark will exist till second n; If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame; If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type. Valid values: image: image watermark.
        :param str coordinate_origin: Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param 'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type. Valid values: image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: Input content of watermark image. JPEG and PNG images are supported.
        :param str height: Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent':
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        Watermark height. % and px formats are supported: If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height; If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Repeat type of an animated watermark. Valid values: `once`: no longer appears after watermark playback ends. `repeat_last_frame`: stays on the last frame after watermark playback ends. `repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        Watermark width. % and px formats are supported: If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width; If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo'] = None,
                 url_input_info: Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ScheduleOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"
        elif key == "s3OutputStorage":
            suggest = "s3_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.ScheduleOutputStorageCosOutputStorage'] = None,
                 s3_output_storage: Optional['outputs.ScheduleOutputStorageS3OutputStorage'] = None):
        """
        :param str type: The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        :param 'ScheduleOutputStorageCosOutputStorageArgs' cos_output_storage: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'ScheduleOutputStorageS3OutputStorageArgs' s3_output_storage: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)
        if s3_output_storage is not None:
            pulumi.set(__self__, "s3_output_storage", s3_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The storage type for a media processing output file. Valid values: `COS`: Tencent Cloud COS `AWS-S3`: AWS S3. This type is only supported for AWS tasks, and the output bucket must be in the same region as the bucket of the source file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.ScheduleOutputStorageCosOutputStorage']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")

    @property
    @pulumi.getter(name="s3OutputStorage")
    def s3_output_storage(self) -> Optional['outputs.ScheduleOutputStorageS3OutputStorage']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storage")


@pulumi.output_type
class ScheduleOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        :param str region: The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket to which the output file of media processing is saved, such as `TopRankVideo-125xxx88`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The region of the output bucket, such as `ap-chongqing`. If this parameter is left empty, the value of the upper layer will be inherited.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ScheduleOutputStorageS3OutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleOutputStorageS3OutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleOutputStorageS3OutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleOutputStorageS3OutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsSqs":
            suggest = "aws_sqs"
        elif key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_sqs: Optional['outputs.ScheduleTaskNotifyConfigAwsSqs'] = None,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        """
        :param 'ScheduleTaskNotifyConfigAwsSqsArgs' aws_sqs: The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
        :param str cmq_model: The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
        :param str cmq_region: The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
        :param str notify_mode: Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
        :param str notify_type: The notification type. Valid values: `CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead. `TDMQ-CMQ`: Message queue `URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API. `SCF`: This notification type is not recommended. You need to configure it in the SCF console. `AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket.Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
        :param str notify_url: HTTP callback URL, required if `NotifyType` is set to `URL`.
        :param str queue_name: The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
        :param str topic_name: The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
        """
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional['outputs.ScheduleTaskNotifyConfigAwsSqs']:
        """
        The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
        """
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
        """
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        """
        Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
        """
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        """
        The notification type. Valid values: `CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead. `TDMQ-CMQ`: Message queue `URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API. `SCF`: This notification type is not recommended. You need to configure it in the SCF console. `AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket.Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
        """
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        """
        HTTP callback URL, required if `NotifyType` is set to `URL`.
        """
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class ScheduleTaskNotifyConfigAwsSqs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqsQueueName":
            suggest = "sqs_queue_name"
        elif key == "sqsRegion":
            suggest = "sqs_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTaskNotifyConfigAwsSqs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sqs_queue_name: str,
                 sqs_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str sqs_queue_name: The name of the SQS queue.
        :param str sqs_region: The region of the SQS queue.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        """
        The name of the SQS queue.
        """
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        """
        The region of the SQS queue.
        """
        return pulumi.get(self, "sqs_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsS3FileUploadTrigger":
            suggest = "aws_s3_file_upload_trigger"
        elif key == "cosFileUploadTrigger":
            suggest = "cos_file_upload_trigger"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 aws_s3_file_upload_trigger: Optional['outputs.ScheduleTriggerAwsS3FileUploadTrigger'] = None,
                 cos_file_upload_trigger: Optional['outputs.ScheduleTriggerCosFileUploadTrigger'] = None):
        """
        :param str type: The trigger type. Valid values: `CosFileUpload`: Tencent Cloud COS trigger. `AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param 'ScheduleTriggerAwsS3FileUploadTriggerArgs' aws_s3_file_upload_trigger: The AWS S3 trigger. This parameter is valid and required if `Type` is `AwsS3FileUpload`.Note: Currently, the key for the AWS S3 bucket, the trigger SQS queue, and the callback SQS queue must be the same.Note: This field may return null, indicating that no valid values can be obtained.
        :param 'ScheduleTriggerCosFileUploadTriggerArgs' cos_file_upload_trigger: This parameter is required and valid when `Type` is `CosFileUpload`, indicating the COS trigger rule.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if aws_s3_file_upload_trigger is not None:
            pulumi.set(__self__, "aws_s3_file_upload_trigger", aws_s3_file_upload_trigger)
        if cos_file_upload_trigger is not None:
            pulumi.set(__self__, "cos_file_upload_trigger", cos_file_upload_trigger)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values: `CosFileUpload`: Tencent Cloud COS trigger. `AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="awsS3FileUploadTrigger")
    def aws_s3_file_upload_trigger(self) -> Optional['outputs.ScheduleTriggerAwsS3FileUploadTrigger']:
        """
        The AWS S3 trigger. This parameter is valid and required if `Type` is `AwsS3FileUpload`.Note: Currently, the key for the AWS S3 bucket, the trigger SQS queue, and the callback SQS queue must be the same.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "aws_s3_file_upload_trigger")

    @property
    @pulumi.getter(name="cosFileUploadTrigger")
    def cos_file_upload_trigger(self) -> Optional['outputs.ScheduleTriggerCosFileUploadTrigger']:
        """
        This parameter is required and valid when `Type` is `CosFileUpload`, indicating the COS trigger rule.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "cos_file_upload_trigger")


@pulumi.output_type
class ScheduleTriggerAwsS3FileUploadTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "awsSqs":
            suggest = "aws_sqs"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTriggerAwsS3FileUploadTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTriggerAwsS3FileUploadTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTriggerAwsS3FileUploadTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 aws_sqs: Optional['outputs.ScheduleTriggerAwsS3FileUploadTriggerAwsSqs'] = None,
                 dir: Optional[str] = None,
                 formats: Optional[Sequence[str]] = None,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param 'ScheduleTriggerAwsS3FileUploadTriggerAwsSqsArgs' aws_sqs: The SQS queue of the AWS S3 bucket.Note: The queue must be in the same region as the bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str dir: The bucket directory bound. It must be an absolute path that starts and ends with `/`, such as `/movie/201907/`. If you do not specify this, the root directory will be bound.	.
        :param Sequence[str] formats: The file formats that will trigger the scheme, such as [mp4, flv, mov]. If you do not specify this, the upload of files in any format will trigger the scheme.	.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional['outputs.ScheduleTriggerAwsS3FileUploadTriggerAwsSqs']:
        """
        The SQS queue of the AWS S3 bucket.Note: The queue must be in the same region as the bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter
    def dir(self) -> Optional[str]:
        """
        The bucket directory bound. It must be an absolute path that starts and ends with `/`, such as `/movie/201907/`. If you do not specify this, the root directory will be bound.	.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence[str]]:
        """
        The file formats that will trigger the scheme, such as [mp4, flv, mov]. If you do not specify this, the upload of files in any format will trigger the scheme.	.
        """
        return pulumi.get(self, "formats")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleTriggerAwsS3FileUploadTriggerAwsSqs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqsQueueName":
            suggest = "sqs_queue_name"
        elif key == "sqsRegion":
            suggest = "sqs_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTriggerAwsS3FileUploadTriggerAwsSqs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTriggerAwsS3FileUploadTriggerAwsSqs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTriggerAwsS3FileUploadTriggerAwsSqs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sqs_queue_name: str,
                 sqs_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str sqs_queue_name: The name of the SQS queue.
        :param str sqs_region: The region of the SQS queue.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        """
        The name of the SQS queue.
        """
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        """
        The region of the SQS queue.
        """
        return pulumi.get(self, "sqs_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class ScheduleTriggerCosFileUploadTrigger(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str,
                 dir: Optional[str] = None,
                 formats: Optional[Sequence[str]] = None):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        :param str dir: Input path directory bound to a workflow, such as `/movie/201907/`. If this parameter is left empty, the `/` root directory will be used.
        :param Sequence[str] formats: Format list of files that can trigger a workflow, such as [mp4, flv, mov]. If this parameter is left empty, files in all formats can trigger the workflow.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def dir(self) -> Optional[str]:
        """
        Input path directory bound to a workflow, such as `/movie/201907/`. If this parameter is left empty, the `/` root directory will be used.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence[str]]:
        """
        Format list of files that can trigger a workflow, such as [mp4, flv, mov]. If this parameter is left empty, files in all formats can trigger the workflow.
        """
        return pulumi.get(self, "formats")


@pulumi.output_type
class TranscodeTemplateAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        """
        :param int bitrate: Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
        :param str codec: Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
        :param int sample_rate: Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
        :param int audio_channel: Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        """
        Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        """
        Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
        """
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class TranscodeTemplateEnhanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "videoEnhance":
            suggest = "video_enhance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateEnhanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateEnhanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateEnhanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 video_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhance'] = None):
        """
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceArgs' video_enhance: Video Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        if video_enhance is not None:
            pulumi.set(__self__, "video_enhance", video_enhance)

    @property
    @pulumi.getter(name="videoEnhance")
    def video_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhance']:
        """
        Video Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "video_enhance")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactRepair":
            suggest = "artifact_repair"
        elif key == "colorEnhance":
            suggest = "color_enhance"
        elif key == "faceEnhance":
            suggest = "face_enhance"
        elif key == "frameRate":
            suggest = "frame_rate"
        elif key == "imageQualityEnhance":
            suggest = "image_quality_enhance"
        elif key == "lowLightEnhance":
            suggest = "low_light_enhance"
        elif key == "scratchRepair":
            suggest = "scratch_repair"
        elif key == "sharpEnhance":
            suggest = "sharp_enhance"
        elif key == "superResolution":
            suggest = "super_resolution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateEnhanceConfigVideoEnhance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateEnhanceConfigVideoEnhance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateEnhanceConfigVideoEnhance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_repair: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair'] = None,
                 color_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance'] = None,
                 denoise: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceDenoise'] = None,
                 face_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance'] = None,
                 frame_rate: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate'] = None,
                 hdr: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceHdr'] = None,
                 image_quality_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance'] = None,
                 low_light_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance'] = None,
                 scratch_repair: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair'] = None,
                 sharp_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance'] = None,
                 super_resolution: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution'] = None):
        """
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs' artifact_repair: De-artifact (glitch) configuration.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs' color_enhance: Color Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs' denoise: Video Noise Reduction Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs' face_enhance: Face Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs' frame_rate: Interpolation frame rate configuration.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs' hdr: HDR configuration.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs' image_quality_enhance: Comprehensive Enhanced Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs' low_light_enhance: Low Light Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs' scratch_repair: De-scratch configuration.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs' sharp_enhance: Detail Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs' super_resolution: Super resolution configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        if artifact_repair is not None:
            pulumi.set(__self__, "artifact_repair", artifact_repair)
        if color_enhance is not None:
            pulumi.set(__self__, "color_enhance", color_enhance)
        if denoise is not None:
            pulumi.set(__self__, "denoise", denoise)
        if face_enhance is not None:
            pulumi.set(__self__, "face_enhance", face_enhance)
        if frame_rate is not None:
            pulumi.set(__self__, "frame_rate", frame_rate)
        if hdr is not None:
            pulumi.set(__self__, "hdr", hdr)
        if image_quality_enhance is not None:
            pulumi.set(__self__, "image_quality_enhance", image_quality_enhance)
        if low_light_enhance is not None:
            pulumi.set(__self__, "low_light_enhance", low_light_enhance)
        if scratch_repair is not None:
            pulumi.set(__self__, "scratch_repair", scratch_repair)
        if sharp_enhance is not None:
            pulumi.set(__self__, "sharp_enhance", sharp_enhance)
        if super_resolution is not None:
            pulumi.set(__self__, "super_resolution", super_resolution)

    @property
    @pulumi.getter(name="artifactRepair")
    def artifact_repair(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair']:
        """
        De-artifact (glitch) configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "artifact_repair")

    @property
    @pulumi.getter(name="colorEnhance")
    def color_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance']:
        """
        Color Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "color_enhance")

    @property
    @pulumi.getter
    def denoise(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceDenoise']:
        """
        Video Noise Reduction Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "denoise")

    @property
    @pulumi.getter(name="faceEnhance")
    def face_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance']:
        """
        Face Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "face_enhance")

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate']:
        """
        Interpolation frame rate configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "frame_rate")

    @property
    @pulumi.getter
    def hdr(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceHdr']:
        """
        HDR configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "hdr")

    @property
    @pulumi.getter(name="imageQualityEnhance")
    def image_quality_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance']:
        """
        Comprehensive Enhanced Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "image_quality_enhance")

    @property
    @pulumi.getter(name="lowLightEnhance")
    def low_light_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance']:
        """
        Low Light Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "low_light_enhance")

    @property
    @pulumi.getter(name="scratchRepair")
    def scratch_repair(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair']:
        """
        De-scratch configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "scratch_repair")

    @property
    @pulumi.getter(name="sharpEnhance")
    def sharp_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance']:
        """
        Detail Enhancement Configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "sharp_enhance")

    @property
    @pulumi.getter(name="superResolution")
    def super_resolution(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution']:
        """
        Super resolution configuration.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "super_resolution")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        :param str type: Type, optional value: weak/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type, optional value: weak/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        :param str type: Type, optional value: weak/normal/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type, optional value: weak/normal/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceDenoise(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        :param str type: Type, optional value: weak/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type, optional value: weak/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance(dict):
    def __init__(__self__, *,
                 intensity: Optional[float] = None,
                 switch: Optional[str] = None):
        """
        :param float intensity: Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[float]:
        """
        Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "intensity")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate(dict):
    def __init__(__self__, *,
                 fps: Optional[int] = None,
                 switch: Optional[str] = None):
        """
        :param int fps: Frame rate, value range: [0, 100], unit: Hz.Default value: 0.Note: For transcoding, this parameter will override the Fps inside the VideoTemplate.Note: This field may return null, indicating that no valid value can be obtained.
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def fps(self) -> Optional[int]:
        """
        Frame rate, value range: [0, 100], unit: Hz.Default value: 0.Note: For transcoding, this parameter will override the Fps inside the VideoTemplate.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceHdr(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        :param str type: Type, optional value: HDR10/HLG.Default value: HDR10.Note: The encoding method of video needs to be libx265.Note: Video encoding bit depth is 10.Note: This field may return null, indicating that no valid value can be obtained.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type, optional value: HDR10/HLG.Default value: HDR10.Note: The encoding method of video needs to be libx265.Note: Video encoding bit depth is 10.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        :param str type: Type, optional value: weak/normal/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type, optional value: weak/normal/strong.Default value: weak.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        :param str type: Type, optional value: normal.Default value: normal.Note: This field may return null, indicating that no valid value can be obtained.
        """
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type, optional value: normal.Default value: normal.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair(dict):
    def __init__(__self__, *,
                 intensity: Optional[float] = None,
                 switch: Optional[str] = None):
        """
        :param float intensity: Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[float]:
        """
        Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "intensity")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance(dict):
    def __init__(__self__, *,
                 intensity: Optional[float] = None,
                 switch: Optional[str] = None):
        """
        :param float intensity: Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[float]:
        """
        Intensity, value range: 0.0~1.0.Default value: 0.0.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "intensity")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution(dict):
    def __init__(__self__, *,
                 size: Optional[int] = None,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param int size: Super resolution multiple, optional value:2: currently only supports 2x super resolution.Default value: 2.Note: This field may return null, indicating that no valid value can be obtained.
        :param str switch: Capability configuration switch, optional value: ON/OFF.Default value: ON.
        :param str type: Type, optional value:lq: super-resolution for low-definition video with more noise.hq: super resolution for high-definition video.Default value: lq.Note: This field may return null, indicating that no valid value can be obtained.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Super resolution multiple, optional value:2: currently only supports 2x super resolution.Default value: 2.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        """
        Capability configuration switch, optional value: ON/OFF.Default value: ON.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type, optional value:lq: super-resolution for low-definition video with more noise.hq: super resolution for high-definition video.Default value: lq.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 max_video_bitrate: Optional[int] = None):
        """
        :param str type: Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
        :param int max_video_bitrate: The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
        """
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        """
        The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
        """
        return pulumi.get(self, "max_video_bitrate")


@pulumi.output_type
class TranscodeTemplateVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        """
        :param int bitrate: Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
        :param str codec: Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
        :param int fps: Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
        :param str fill_type: Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
        :param int gop: The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
        :param int height: The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        :param str resolution_adaptive: Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
        :param int vcrf: Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
        :param int width: The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        """
        Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        """
        Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        """
        The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        """
        Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        """
        Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
        """
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class WatermarkTemplateImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WatermarkTemplateImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WatermarkTemplateImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WatermarkTemplateImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: str,
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param str image_content: Watermark image[Base64](https://tools.ietf.org/html/rfc4648) encoded string. Support jpeg, png image format.
        :param str height: The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels. The value range is 0 or [8, 4096].Default value: 0px. Indicates that Height is scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges:once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
        :param str width: The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixel, such as 100px means that the Width is 100 pixels. The value range is [8, 4096].Default value: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> str:
        """
        Watermark image[Base64](https://tools.ietf.org/html/rfc4648) encoded string. Support jpeg, png image format.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels. The value range is 0 or [8, 4096].Default value: 0px. Indicates that Height is scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges:once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixel, such as 100px means that the Width is 100 pixels. The value range is [8, 4096].Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class WatermarkTemplateSvgTemplate(dict):
    def __init__(__self__, *,
                 height: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param str height: The height of the watermark, supports px, W%, H%, S%, L% six formats:When the string ends with px, it means that the watermark Height unit is pixels, such as 100px means that the Height is 100 pixels; when filling 0px and Width is not 0px, it means that the height of the watermark is proportionally scaled according to the original SVG image; when both Width and Height are filled When 0px, it means that the height of the watermark takes the height of the original SVG image.When the string ends with W%, it means that the watermark Height is a percentage of the video width, such as 10W% means that the Height is 10% of the video width.When the string ends with H%, it means that the watermark Height is the percentage size of the video height, such as 10H% means that the Height is 10% of the video height.When the string ends with S%, it means that the watermark Height is the percentage size of the short side of the video, such as 10S% means that the Height is 10% of the short side of the video.When the string ends with L%, it means that the watermark Height is the percentage size of the long side of the video, such as 10L% means that the Height is 10% of the long side of the video.When the string ends with %, the meaning is the same as H%.Default value: 0px.
        :param str width: The width of the watermark, supports px, %, W%, H%, S%, L% six formats.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels; when filling 0px and the Height is not 0px, it means that the width of the watermark is proportionally scaled according to the original SVG image; when both Width and Height are filled When 0px, it means that the width of the watermark takes the width of the original SVG image.When the string ends with W%, it means that the watermark Width is a percentage of the video width, such as 10W% means that the Width is 10% of the video width.When the string ends with H%, it means that the watermark Width is a percentage of the video height, such as 10H% means that the Width is 10% of the video height.When the string ends with S%, it means that the watermark Width is the percentage size of the short side of the video, such as 10S% means that the Width is 10% of the short side of the video.When the string ends with L%, it means that the watermark Width is the percentage size of the long side of the video, such as 10L% means that the Width is 10% of the long side of the video.When the string ends with %, it has the same meaning as W%.Default value: 10W%.
        """
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        The height of the watermark, supports px, W%, H%, S%, L% six formats:When the string ends with px, it means that the watermark Height unit is pixels, such as 100px means that the Height is 100 pixels; when filling 0px and Width is not 0px, it means that the height of the watermark is proportionally scaled according to the original SVG image; when both Width and Height are filled When 0px, it means that the height of the watermark takes the height of the original SVG image.When the string ends with W%, it means that the watermark Height is a percentage of the video width, such as 10W% means that the Height is 10% of the video width.When the string ends with H%, it means that the watermark Height is the percentage size of the video height, such as 10H% means that the Height is 10% of the video height.When the string ends with S%, it means that the watermark Height is the percentage size of the short side of the video, such as 10S% means that the Height is 10% of the short side of the video.When the string ends with L%, it means that the watermark Height is the percentage size of the long side of the video, such as 10L% means that the Height is 10% of the long side of the video.When the string ends with %, the meaning is the same as H%.Default value: 0px.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        The width of the watermark, supports px, %, W%, H%, S%, L% six formats.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels; when filling 0px and the Height is not 0px, it means that the width of the watermark is proportionally scaled according to the original SVG image; when both Width and Height are filled When 0px, it means that the width of the watermark takes the width of the original SVG image.When the string ends with W%, it means that the watermark Width is a percentage of the video width, such as 10W% means that the Width is 10% of the video width.When the string ends with H%, it means that the watermark Width is a percentage of the video height, such as 10H% means that the Width is 10% of the video height.When the string ends with S%, it means that the watermark Width is the percentage size of the short side of the video, such as 10S% means that the Width is 10% of the short side of the video.When the string ends with L%, it means that the watermark Width is the percentage size of the long side of the video, such as 10L% means that the Width is 10% of the long side of the video.When the string ends with %, it has the same meaning as W%.Default value: 10W%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class WatermarkTemplateTextTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontAlpha":
            suggest = "font_alpha"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WatermarkTemplateTextTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WatermarkTemplateTextTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WatermarkTemplateTextTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_alpha: float,
                 font_color: str,
                 font_size: str,
                 font_type: str):
        """
        :param float font_alpha: Text transparency, value range: (0, 1].0: fully transparent.1: fully opaque.Default value: 1.
        :param str font_color: Font color, format: 0xRRGGBB, default value: 0xFFFFFF (white).
        :param str font_size: Font size, format: Npx, N is a number.
        :param str font_type: Font type, currently supports two:simkai.ttf: can support Chinese and English.arial.ttf: English only.
        """
        pulumi.set(__self__, "font_alpha", font_alpha)
        pulumi.set(__self__, "font_color", font_color)
        pulumi.set(__self__, "font_size", font_size)
        pulumi.set(__self__, "font_type", font_type)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> float:
        """
        Text transparency, value range: (0, 1].0: fully transparent.1: fully opaque.Default value: 1.
        """
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> str:
        """
        Font color, format: 0xRRGGBB, default value: 0xFFFFFF (white).
        """
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> str:
        """
        Font size, format: Npx, N is a number.
        """
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> str:
        """
        Font type, currently supports two:simkai.ttf: can support Chinese and English.arial.ttf: English only.
        """
        return pulumi.get(self, "font_type")


@pulumi.output_type
class WithdrawsWatermarkOperationInputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "s3InputInfo":
            suggest = "s3_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WithdrawsWatermarkOperationInputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WithdrawsWatermarkOperationInputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WithdrawsWatermarkOperationInputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WithdrawsWatermarkOperationInputInfoCosInputInfo'] = None,
                 s3_input_info: Optional['outputs.WithdrawsWatermarkOperationInputInfoS3InputInfo'] = None,
                 url_input_info: Optional['outputs.WithdrawsWatermarkOperationInputInfoUrlInputInfo'] = None):
        """
        :param str type: The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks..
        :param 'WithdrawsWatermarkOperationInputInfoCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'WithdrawsWatermarkOperationInputInfoS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'WithdrawsWatermarkOperationInputInfoUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values: `COS`: A COS bucket address.  `URL`: A URL.  `AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks..
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WithdrawsWatermarkOperationInputInfoCosInputInfo']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.WithdrawsWatermarkOperationInputInfoS3InputInfo']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WithdrawsWatermarkOperationInputInfoUrlInputInfo']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WithdrawsWatermarkOperationInputInfoCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WithdrawsWatermarkOperationInputInfoS3InputInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3Object":
            suggest = "s3_object"
        elif key == "s3Region":
            suggest = "s3_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WithdrawsWatermarkOperationInputInfoS3InputInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WithdrawsWatermarkOperationInputInfoS3InputInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WithdrawsWatermarkOperationInputInfoS3InputInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class WithdrawsWatermarkOperationInputInfoUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class WithdrawsWatermarkOperationTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsSqs":
            suggest = "aws_sqs"
        elif key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WithdrawsWatermarkOperationTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WithdrawsWatermarkOperationTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WithdrawsWatermarkOperationTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_sqs: Optional['outputs.WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs'] = None,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        """
        :param 'WithdrawsWatermarkOperationTaskNotifyConfigAwsSqsArgs' aws_sqs: The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
        :param str cmq_model: The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
        :param str cmq_region: The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
        :param str notify_mode: Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
        :param str notify_type: The notification type. Valid values:  `CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead.  `TDMQ-CMQ`: Message queue  `URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API.  `SCF`: This notification type is not recommended. You need to configure it in the SCF console.  `AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket. Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
        :param str notify_url: HTTP callback URL, required if `NotifyType` is set to `URL`.
        :param str queue_name: The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
        :param str topic_name: The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
        """
        if aws_sqs is not None:
            pulumi.set(__self__, "aws_sqs", aws_sqs)
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Optional['outputs.WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs']:
        """
        The AWS SQS queue. This parameter is required if `NotifyType` is `AWS-SQS`.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
        """
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
        """
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        """
        Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
        """
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        """
        The notification type. Valid values:  `CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead.  `TDMQ-CMQ`: Message queue  `URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API.  `SCF`: This notification type is not recommended. You need to configure it in the SCF console.  `AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket. Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
        """
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        """
        HTTP callback URL, required if `NotifyType` is set to `URL`.
        """
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sqsQueueName":
            suggest = "sqs_queue_name"
        elif key == "sqsRegion":
            suggest = "sqs_region"
        elif key == "s3SecretId":
            suggest = "s3_secret_id"
        elif key == "s3SecretKey":
            suggest = "s3_secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WithdrawsWatermarkOperationTaskNotifyConfigAwsSqs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sqs_queue_name: str,
                 sqs_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str sqs_queue_name: The name of the SQS queue.
        :param str sqs_region: The region of the SQS queue.
        :param str s3_secret_id: The key ID required to read from/write to the SQS queue.
        :param str s3_secret_key: The key required to read from/write to the SQS queue.
        """
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        """
        The name of the SQS queue.
        """
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        """
        The region of the SQS queue.
        """
        return pulumi.get(self, "sqs_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to read from/write to the SQS queue.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class WorkflowAiAnalysisTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedParameter":
            suggest = "extended_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowAiAnalysisTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowAiAnalysisTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowAiAnalysisTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: Optional[str] = None):
        """
        :param int definition: Video Content Analysis Template ID.
        :param str extended_parameter: Extension parameter whose value is a serialized json string.Note: This parameter is a customized demand parameter, which requires offline docking.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video Content Analysis Template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[str]:
        """
        Extension parameter whose value is a serialized json string.Note: This parameter is a customized demand parameter, which requires offline docking.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class WorkflowAiContentReviewTask(dict):
    def __init__(__self__, *,
                 definition: int):
        """
        :param int definition: Video Content Review Template ID.
        """
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video Content Review Template ID.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class WorkflowAiRecognitionTask(dict):
    def __init__(__self__, *,
                 definition: int):
        """
        :param int definition: Video Intelligent Recognition Template ID.
        """
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video Intelligent Recognition Template ID.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class WorkflowMediaProcessTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adaptiveDynamicStreamingTaskSets":
            suggest = "adaptive_dynamic_streaming_task_sets"
        elif key == "animatedGraphicTaskSets":
            suggest = "animated_graphic_task_sets"
        elif key == "imageSpriteTaskSets":
            suggest = "image_sprite_task_sets"
        elif key == "sampleSnapshotTaskSets":
            suggest = "sample_snapshot_task_sets"
        elif key == "snapshotByTimeOffsetTaskSets":
            suggest = "snapshot_by_time_offset_task_sets"
        elif key == "transcodeTaskSets":
            suggest = "transcode_task_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet']] = None,
                 animated_graphic_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSet']] = None,
                 image_sprite_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskImageSpriteTaskSet']] = None,
                 sample_snapshot_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSet']] = None,
                 snapshot_by_time_offset_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet']] = None,
                 transcode_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSet']] = None):
        """
        :param Sequence['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs'] adaptive_dynamic_streaming_task_sets: Transfer Adaptive Code Stream Task List.
        :param Sequence['WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs'] animated_graphic_task_sets: Video Rotation Map Task List.
        :param Sequence['WorkflowMediaProcessTaskImageSpriteTaskSetArgs'] image_sprite_task_sets: Sprite image capture task list for video.
        :param Sequence['WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs'] sample_snapshot_task_sets: Screenshot task list for video sampling.
        :param Sequence['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs'] snapshot_by_time_offset_task_sets: Screenshot the task list of the video according to the time point.
        :param Sequence['WorkflowMediaProcessTaskTranscodeTaskSetArgs'] transcode_task_sets: Video Transcoding Task List.
        """
        if adaptive_dynamic_streaming_task_sets is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task_sets", adaptive_dynamic_streaming_task_sets)
        if animated_graphic_task_sets is not None:
            pulumi.set(__self__, "animated_graphic_task_sets", animated_graphic_task_sets)
        if image_sprite_task_sets is not None:
            pulumi.set(__self__, "image_sprite_task_sets", image_sprite_task_sets)
        if sample_snapshot_task_sets is not None:
            pulumi.set(__self__, "sample_snapshot_task_sets", sample_snapshot_task_sets)
        if snapshot_by_time_offset_task_sets is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task_sets", snapshot_by_time_offset_task_sets)
        if transcode_task_sets is not None:
            pulumi.set(__self__, "transcode_task_sets", transcode_task_sets)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTaskSets")
    def adaptive_dynamic_streaming_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet']]:
        """
        Transfer Adaptive Code Stream Task List.
        """
        return pulumi.get(self, "adaptive_dynamic_streaming_task_sets")

    @property
    @pulumi.getter(name="animatedGraphicTaskSets")
    def animated_graphic_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSet']]:
        """
        Video Rotation Map Task List.
        """
        return pulumi.get(self, "animated_graphic_task_sets")

    @property
    @pulumi.getter(name="imageSpriteTaskSets")
    def image_sprite_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskImageSpriteTaskSet']]:
        """
        Sprite image capture task list for video.
        """
        return pulumi.get(self, "image_sprite_task_sets")

    @property
    @pulumi.getter(name="sampleSnapshotTaskSets")
    def sample_snapshot_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSet']]:
        """
        Screenshot task list for video sampling.
        """
        return pulumi.get(self, "sample_snapshot_task_sets")

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTaskSets")
    def snapshot_by_time_offset_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet']]:
        """
        Screenshot the task list of the video according to the time point.
        """
        return pulumi.get(self, "snapshot_by_time_offset_task_sets")

    @property
    @pulumi.getter(name="transcodeTaskSets")
    def transcode_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSet']]:
        """
        Video Transcoding Task List.
        """
        return pulumi.get(self, "transcode_task_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "subStreamObjectName":
            suggest = "sub_stream_object_name"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage'] = None,
                 segment_object_name: Optional[str] = None,
                 sub_stream_object_name: Optional[str] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet']] = None):
        """
        :param int definition: Transfer Adaptive Code Stream Template ID.
        :param str output_object_path: After converting to an adaptive stream, the output path of the manifest file can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_adaptiveDynamicStreaming_{definition}.{format}`.
        :param 'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs' output_storage: The target storage of the file after converting to the adaptive code stream, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        :param str segment_object_name: After converting to an adaptive stream (only HLS), the output path of the fragmented file can only be a relative path. If not filled, the default is a relative path: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}_{segmentNumber}.{format}`.
        :param str sub_stream_object_name: After converting to an adaptive stream, the output path of the sub-stream file can only be a relative path. If not filled, the default is a relative path: {inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
        :param Sequence['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs'] watermark_sets: Watermark list, support multiple pictures or text watermarks, up to 10.
        """
        pulumi.set(__self__, "definition", definition)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Transfer Adaptive Code Stream Template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        After converting to an adaptive stream, the output path of the manifest file can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_adaptiveDynamicStreaming_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage']:
        """
        The target storage of the file after converting to the adaptive code stream, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        """
        After converting to an adaptive stream (only HLS), the output path of the fragmented file can only be a relative path. If not filled, the default is a relative path: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}_{segmentNumber}.{format}`.
        """
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[str]:
        """
        After converting to an adaptive stream, the output path of the sub-stream file can only be a relative path. If not filled, the default is a relative path: {inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
        """
        return pulumi.get(self, "sub_stream_object_name")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet']]:
        """
        Watermark list, support multiple pictures or text watermarks, up to 10.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage'] = None):
        """
        :param str type: The type of media processing output object storage location, now only supports COS.
        :param 'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of media processing output object storage location, now only supports COS.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage']:
        """
        Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        :param str region: The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: Watermark Template ID.
        :param float end_time_offset: End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
        :param 'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs' raw_parameter: Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
        :param float start_time_offset: The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
        :param str svg_content: SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
        :param str text_content: Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Watermark Template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter']:
        """
        Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type, optional value:image: image watermark.
        :param str coordinate_origin: Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
        :param 'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
        :param str x_pos: The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
        :param str y_pos: The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type, optional value:image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: The input content of the watermark image. Support jpeg, png image format.
        :param str height: The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
        :param str width: The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        """
        The input content of the watermark image. Support jpeg, png image format.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: Enter the type of source object, which supports COS and URL.
        :param 'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: Valid when Type is COS, this item is required, indicating media processing COS object information.
        :param 'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Enter the type of source object, which supports COS and URL.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        Valid when Type is COS, this item is required, indicating media processing COS object information.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The name of the COS Bucket where the media processing object file is located.
        :param str object: Input path for media processing object files.
        :param str region: The park to which the COS Bucket where the media processing target file resides belongs.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the COS Bucket where the media processing object file is located.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Input path for media processing object files.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The park to which the COS Bucket where the media processing target file resides belongs.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: Video URL.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Video URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAnimatedGraphicTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 start_time_offset: float,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage'] = None):
        """
        :param int definition: Video turntable template id.
        :param float end_time_offset: The end time of the animation in the video, in seconds.
        :param float start_time_offset: The start time of the animation in the video, in seconds.
        :param str output_object_path: The output path of the file after rotating the image, which can be a relative path or an absolute path. If not filled, the default is a relative path: {inputName}_animatedGraphic_{definition}.{format}.
        :param 'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs' output_storage: The target storage of the transcoded file, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video turntable template id.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        """
        The end time of the animation in the video, in seconds.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        """
        The start time of the animation in the video, in seconds.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        The output path of the file after rotating the image, which can be a relative path or an absolute path. If not filled, the default is a relative path: {inputName}_animatedGraphic_{definition}.{format}.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage']:
        """
        The target storage of the transcoded file, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage'] = None):
        """
        :param str type: The type of media processing output object storage location, now only supports COS.
        :param 'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of media processing output object storage location, now only supports COS.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage']:
        """
        Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        :param str region: The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "webVttObjectName":
            suggest = "web_vtt_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskImageSpriteTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage'] = None,
                 web_vtt_object_name: Optional[str] = None):
        """
        :param int definition: Sprite Illustration Template ID.
        :param 'WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs' object_number_format: Rules for the `{number}` variable in the output path after intercepting the Sprite image.Note: This field may return null, indicating that no valid value can be obtained.
        :param str output_object_path: After capturing the sprite image, the output path of the sprite image file can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_imageSprite_{definition}_{number}.{format}`.
        :param 'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs' output_storage: The target storage of the file after the sprite image is intercepted, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        :param str web_vtt_object_name: After capturing the sprite image, the output path of the Web VTT file can only be a relative path. If not filled, the default is a relative path: `{inputName}_imageSprite_{definition}.{format}`.
        """
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Sprite Illustration Template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat']:
        """
        Rules for the `{number}` variable in the output path after intercepting the Sprite image.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        After capturing the sprite image, the output path of the sprite image file can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_imageSprite_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage']:
        """
        The target storage of the file after the sprite image is intercepted, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[str]:
        """
        After capturing the sprite image, the output path of the Web VTT file can only be a relative path. If not filled, the default is a relative path: `{inputName}_imageSprite_{definition}.{format}`.
        """
        return pulumi.get(self, "web_vtt_object_name")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: The growth step of the `{number}` variable, the default is 1.
        :param int initial_value: The starting value of `{number}` variable, the default is 0.
        :param int min_length: The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
        :param str place_holder: When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        The growth step of the `{number}` variable, the default is 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        The starting value of `{number}` variable, the default is 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage'] = None):
        """
        :param str type: The type of media processing output object storage location, now only supports COS.
        :param 'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of media processing output object storage location, now only supports COS.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage']:
        """
        Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        :param str region: The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage'] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet']] = None):
        """
        :param int definition: Sample screenshot template ID.
        :param 'WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs' object_number_format: Rules for the `{number}` variable in the output path after sampling the screenshot.Note: This field may return null, indicating that no valid value can be obtained.
        :param str output_object_path: The output path of the image file after sampling the screenshot, which can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_sampleSnapshot_{definition}_{number}.{format}`.
        :param 'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs' output_storage: The target storage of the file after the screenshot at the time point, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs'] watermark_sets: Watermark list, support multiple pictures or text watermarks, up to 10.
        """
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Sample screenshot template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat']:
        """
        Rules for the `{number}` variable in the output path after sampling the screenshot.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        The output path of the image file after sampling the screenshot, which can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_sampleSnapshot_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage']:
        """
        The target storage of the file after the screenshot at the time point, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet']]:
        """
        Watermark list, support multiple pictures or text watermarks, up to 10.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: The growth step of the `{number}` variable, the default is 1.
        :param int initial_value: The starting value of `{number}` variable, the default is 0.
        :param int min_length: The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
        :param str place_holder: When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        The growth step of the `{number}` variable, the default is 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        The starting value of `{number}` variable, the default is 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage'] = None):
        """
        :param str type: The type of media processing output object storage location, now only supports COS.
        :param 'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of media processing output object storage location, now only supports COS.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage']:
        """
        Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        :param str region: The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: Watermark Template ID.
        :param float end_time_offset: End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
        :param 'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs' raw_parameter: Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
        :param float start_time_offset: The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
        :param str svg_content: SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
        :param str text_content: Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Watermark Template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter']:
        """
        Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type, optional value:image: image watermark.
        :param str coordinate_origin: Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
        :param 'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
        :param str x_pos: The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
        :param str y_pos: The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type, optional value:image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: The input content of the watermark image. Support jpeg, png image format.
        :param str height: The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
        :param str width: The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        """
        The input content of the watermark image. Support jpeg, png image format.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: Enter the type of source object, which supports COS and URL.
        :param 'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: Valid when Type is COS, this item is required, indicating media processing COS object information.
        :param 'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Enter the type of source object, which supports COS and URL.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        Valid when Type is COS, this item is required, indicating media processing COS object information.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The name of the COS Bucket where the media processing object file is located.
        :param str object: Input path for media processing object files.
        :param str region: The park to which the COS Bucket where the media processing target file resides belongs.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the COS Bucket where the media processing object file is located.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Input path for media processing object files.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The park to which the COS Bucket where the media processing target file resides belongs.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: Video URL.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Video URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extTimeOffsetSets":
            suggest = "ext_time_offset_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "timeOffsetSets":
            suggest = "time_offset_sets"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 ext_time_offset_sets: Optional[Sequence[str]] = None,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage'] = None,
                 time_offset_sets: Optional[Sequence[float]] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet']] = None):
        """
        :param int definition: Specified time point screenshot template ID.
        :param Sequence[str] ext_time_offset_sets: Screenshot time point list, the time point supports two formats: s and %:;When the string ends with s, it means that the time point is in seconds, such as 3.5s means that the time point is the 3.5th second.When the string ends with %, it means that the time point is the percentage of the video duration, such as 10% means that the time point is the first 10% of the time in the video.
        :param 'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs' object_number_format: Rules for the `{number}` variable in the output path after the screenshot at the time point.Note: This field may return null, indicating that no valid value can be obtained.
        :param str output_object_path: The output path of the picture file after the snapshot at the time point can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_snapshotByTimeOffset_{definition}_{number}.{format}`.
        :param 'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs' output_storage: The target storage of the file after the screenshot at the time point, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[float] time_offset_sets: Screenshot time point list, the unit is &lt;font color=red&gt;seconds&lt;/font&gt;. This parameter is no longer recommended, it is recommended that you use the ExtTimeOffsetSet parameter.
        :param Sequence['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs'] watermark_sets: Watermark list, support multiple pictures or text watermarks, up to 10.
        """
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if time_offset_sets is not None:
            pulumi.set(__self__, "time_offset_sets", time_offset_sets)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Specified time point screenshot template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[Sequence[str]]:
        """
        Screenshot time point list, the time point supports two formats: s and %:;When the string ends with s, it means that the time point is in seconds, such as 3.5s means that the time point is the 3.5th second.When the string ends with %, it means that the time point is the percentage of the video duration, such as 10% means that the time point is the first 10% of the time in the video.
        """
        return pulumi.get(self, "ext_time_offset_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat']:
        """
        Rules for the `{number}` variable in the output path after the screenshot at the time point.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        The output path of the picture file after the snapshot at the time point can be a relative path or an absolute path. If not filled, the default is a relative path: `{inputName}_snapshotByTimeOffset_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage']:
        """
        The target storage of the file after the screenshot at the time point, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="timeOffsetSets")
    def time_offset_sets(self) -> Optional[Sequence[float]]:
        """
        Screenshot time point list, the unit is &lt;font color=red&gt;seconds&lt;/font&gt;. This parameter is no longer recommended, it is recommended that you use the ExtTimeOffsetSet parameter.
        """
        return pulumi.get(self, "time_offset_sets")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet']]:
        """
        Watermark list, support multiple pictures or text watermarks, up to 10.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: The growth step of the `{number}` variable, the default is 1.
        :param int initial_value: The starting value of `{number}` variable, the default is 0.
        :param int min_length: The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
        :param str place_holder: When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        The growth step of the `{number}` variable, the default is 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        The starting value of `{number}` variable, the default is 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage'] = None):
        """
        :param str type: The type of media processing output object storage location, now only supports COS.
        :param 'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of media processing output object storage location, now only supports COS.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage']:
        """
        Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        :param str region: The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: Watermark Template ID.
        :param float end_time_offset: End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
        :param 'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs' raw_parameter: Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
        :param float start_time_offset: The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
        :param str svg_content: SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
        :param str text_content: Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Watermark Template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter']:
        """
        Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type, optional value:image: image watermark.
        :param str coordinate_origin: Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
        :param 'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
        :param str x_pos: The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
        :param str y_pos: The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type, optional value:image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: The input content of the watermark image. Support jpeg, png image format.
        :param str height: The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
        :param str width: The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        """
        The input content of the watermark image. Support jpeg, png image format.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: Enter the type of source object, which supports COS and URL.
        :param 'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: Valid when Type is COS, this item is required, indicating media processing COS object information.
        :param 'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Enter the type of source object, which supports COS and URL.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        Valid when Type is COS, this item is required, indicating media processing COS object information.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The name of the COS Bucket where the media processing object file is located.
        :param str object: Input path for media processing object files.
        :param str region: The park to which the COS Bucket where the media processing target file resides belongs.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the COS Bucket where the media processing object file is located.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Input path for media processing object files.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The park to which the COS Bucket where the media processing target file resides belongs.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: Video URL.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Video URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "headTailParameter":
            suggest = "head_tail_parameter"
        elif key == "mosaicSets":
            suggest = "mosaic_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "overrideParameter":
            suggest = "override_parameter"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 head_tail_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter'] = None,
                 mosaic_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet']] = None,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage'] = None,
                 override_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter'] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameter'] = None,
                 segment_object_name: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet']] = None):
        """
        :param int definition: Video Transcoding Template ID.
        :param float end_time_offset: End time offset of video after transcoding, unit: second.Do not fill in or fill in 0, indicating that the transcoded video continues until the end of the original video.When the value is greater than 0 (assumed to be n), it means that the transcoded video lasts until the nth second of the original video and terminates.When the value is less than 0 (assumed to be -n), it means that the transcoded video lasts until n seconds before the end of the original video.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs' head_tail_parameter: Opening and ending parameters.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs'] mosaic_sets: Mosaic list, up to 10 sheets can be supported.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs' object_number_format: Rules for the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid value can be obtained.
        :param str output_object_path: The output path of the main file after transcoding can be a relative path or an absolute path. If not filled, the default is a relative path: {inputName}_transcode_{definition}.{format}.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs' output_storage: The target storage of the transcoded file, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs' override_parameter: Video transcoding custom parameters, valid when Definition is not filled with 0.When some transcoding parameters in this structure are filled in, the parameters in the transcoding template will be overwritten with the filled parameters.This parameter is used in highly customized scenarios, it is recommended that you only use Definition to specify transcoding parameters.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs' raw_parameter: Video transcoding custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios. It is recommended that you use Definition to specify transcoding parameters first.Note: This field may return null, indicating that no valid value can be obtained.
        :param str segment_object_name: The output path of the transcoded fragment file (the path of ts when transcoding HLS), can only be a relative path. If not filled, the default is: `{inputName}_transcode_{definition}_{number}.{format}.
        :param float start_time_offset: The start time offset of the transcoded video, unit: second.Do not fill in or fill in 0, indicating that the transcoded video starts from the beginning of the original video.When the value is greater than 0 (assumed to be n), it means that the transcoded video starts from the nth second position of the original video.When the value is less than 0 (assumed to be -n), it means that the transcoded video starts from the position n seconds before the end of the original video.
        :param Sequence['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs'] watermark_sets: Watermark list, support multiple pictures or text watermarks, up to 10.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Video Transcoding Template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of video after transcoding, unit: second.Do not fill in or fill in 0, indicating that the transcoded video continues until the end of the original video.When the value is greater than 0 (assumed to be n), it means that the transcoded video lasts until the nth second of the original video and terminates.When the value is less than 0 (assumed to be -n), it means that the transcoded video lasts until n seconds before the end of the original video.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter']:
        """
        Opening and ending parameters.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "head_tail_parameter")

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet']]:
        """
        Mosaic list, up to 10 sheets can be supported.
        """
        return pulumi.get(self, "mosaic_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat']:
        """
        Rules for the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        """
        The output path of the main file after transcoding can be a relative path or an absolute path. If not filled, the default is a relative path: {inputName}_transcode_{definition}.{format}.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage']:
        """
        The target storage of the transcoded file, if not filled, it will inherit the OutputStorage value of the upper layer.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter']:
        """
        Video transcoding custom parameters, valid when Definition is not filled with 0.When some transcoding parameters in this structure are filled in, the parameters in the transcoding template will be overwritten with the filled parameters.This parameter is used in highly customized scenarios, it is recommended that you only use Definition to specify transcoding parameters.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "override_parameter")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameter']:
        """
        Video transcoding custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios. It is recommended that you use Definition to specify transcoding parameters first.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        """
        The output path of the transcoded fragment file (the path of ts when transcoding HLS), can only be a relative path. If not filled, the default is: `{inputName}_transcode_{definition}_{number}.{format}.
        """
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        The start time offset of the transcoded video, unit: second.Do not fill in or fill in 0, indicating that the transcoded video starts from the beginning of the original video.When the value is greater than 0 (assumed to be n), it means that the transcoded video starts from the nth second position of the original video.When the value is less than 0 (assumed to be -n), it means that the transcoded video starts from the position n seconds before the end of the original video.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet']]:
        """
        Watermark list, support multiple pictures or text watermarks, up to 10.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headSets":
            suggest = "head_sets"
        elif key == "tailSets":
            suggest = "tail_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 head_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet']] = None,
                 tail_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet']] = None):
        """
        :param Sequence['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs'] head_sets: Title list.
        :param Sequence['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs'] tail_sets: Ending List.
        """
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet']]:
        """
        Title list.
        """
        return pulumi.get(self, "head_sets")

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet']]:
        """
        Ending List.
        """
        return pulumi.get(self, "tail_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo'] = None):
        """
        :param str type: Enter the type of source object, which supports COS and URL.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs' cos_input_info: Valid when Type is COS, this item is required, indicating media processing COS object information.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs' url_input_info: Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Enter the type of source object, which supports COS and URL.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo']:
        """
        Valid when Type is COS, this item is required, indicating media processing COS object information.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo']:
        """
        Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The name of the COS Bucket where the media processing object file is located.
        :param str object: Input path for media processing object files.
        :param str region: The park to which the COS Bucket where the media processing target file resides belongs.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the COS Bucket where the media processing object file is located.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Input path for media processing object files.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The park to which the COS Bucket where the media processing target file resides belongs.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: Video URL.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Video URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo'] = None):
        """
        :param str type: Enter the type of source object, which supports COS and URL.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs' cos_input_info: Valid when Type is COS, this item is required, indicating media processing COS object information.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs' url_input_info: Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Enter the type of source object, which supports COS and URL.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo']:
        """
        Valid when Type is COS, this item is required, indicating media processing COS object information.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo']:
        """
        Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The name of the COS Bucket where the media processing object file is located.
        :param str object: Input path for media processing object files.
        :param str region: The park to which the COS Bucket where the media processing target file resides belongs.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the COS Bucket where the media processing object file is located.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Input path for media processing object files.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The park to which the COS Bucket where the media processing target file resides belongs.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: Video URL.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Video URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coordinate_origin: Optional[str] = None,
                 end_time_offset: Optional[float] = None,
                 height: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 width: Optional[str] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str coordinate_origin: Origin position, currently only supports:TopLeft: Indicates that the coordinate origin is located in the upper left corner of the video image, and the origin of the mosaic is the upper left corner of the picture or textDefault: TopLeft.
        :param float end_time_offset: The end time offset of the mosaic, unit: second.Fill in or fill in 0, indicating that the mosaic continues until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the mosaic lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the mosaic lasts until it disappears n seconds before the end of the screen.
        :param str height: The height of the mosaic. Support %, px two formats.When the string ends with %, it means that the mosaic Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the mosaic Height unit is pixel, such as 100px means that the Height is 100 pixels.Default: 10%.
        :param float start_time_offset: The start time offset of the mosaic, unit: second. Do not fill or fill in 0, which means that the mosaic will start to appear when the screen appears.Fill in or fill in 0, which means that the mosaic will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the mosaic appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the mosaic starts to appear n seconds before the end of the screen.
        :param str width: The width of the mosaic. Support %, px two formats:When the string ends with %, it means that the mosaic Width is the percentage size of the video width, such as 10% means that the Width is 10% of the video width.The string ends with px, indicating that the mosaic Width unit is pixels, such as 100px indicates that the Width is 100 pixels.Default: 10%.
        :param str x_pos: The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
        :param str y_pos: The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
        """
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, currently only supports:TopLeft: Indicates that the coordinate origin is located in the upper left corner of the video image, and the origin of the mosaic is the upper left corner of the picture or textDefault: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        The end time offset of the mosaic, unit: second.Fill in or fill in 0, indicating that the mosaic continues until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the mosaic lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the mosaic lasts until it disappears n seconds before the end of the screen.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        The height of the mosaic. Support %, px two formats.When the string ends with %, it means that the mosaic Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the mosaic Height unit is pixel, such as 100px means that the Height is 100 pixels.Default: 10%.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        The start time offset of the mosaic, unit: second. Do not fill or fill in 0, which means that the mosaic will start to appear when the screen appears.Fill in or fill in 0, which means that the mosaic will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the mosaic appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the mosaic starts to appear n seconds before the end of the screen.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        The width of the mosaic. Support %, px two formats:When the string ends with %, it means that the mosaic Width is the percentage size of the video width, such as 10% means that the Width is 10% of the video width.The string ends with px, indicating that the mosaic Width unit is pixels, such as 100px indicates that the Width is 100 pixels.Default: 10%.
        """
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        """
        :param int increment: The growth step of the `{number}` variable, the default is 1.
        :param int initial_value: The starting value of `{number}` variable, the default is 0.
        :param int min_length: The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
        :param str place_holder: When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
        """
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        """
        The growth step of the `{number}` variable, the default is 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        """
        The starting value of `{number}` variable, the default is 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        The minimum length of the `{number}` variable, if insufficient, placeholders will be filled. Default is 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        """
        When the length of the `{number}` variable is insufficient, a placeholder is added. Default is 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage'] = None):
        """
        :param str type: The type of media processing output object storage location, now only supports COS.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs' cos_output_storage: Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of media processing output object storage location, now only supports COS.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage']:
        """
        Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        :param str region: The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "subtitleTemplate":
            suggest = "subtitle_template"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate'] = None,
                 container: Optional[str] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 subtitle_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate'] = None,
                 tehd_config: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig'] = None,
                 video_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate'] = None):
        """
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs' audio_template: Audio stream configuration parameters.
        :param str container: Encapsulation format, optional values: mp4, flv, hls, mp3, flac, ogg, m4a. Among them, mp3, flac, ogg, m4a are pure audio files.
        :param int remove_audio: Whether to remove audio data, value:0: reserved.1: remove.
        :param int remove_video: Whether to remove video data, value:0: reserved.1: remove.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs' subtitle_template: Subtitle Stream Configuration Parameters.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs' tehd_config: Ultra-fast HD transcoding parameters.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs' video_template: Video streaming configuration parameters.
        """
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate']:
        """
        Audio stream configuration parameters.
        """
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        """
        Encapsulation format, optional values: mp4, flv, hls, mp3, flac, ogg, m4a. Among them, mp3, flac, ogg, m4a are pure audio files.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        """
        Whether to remove audio data, value:0: reserved.1: remove.
        """
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        """
        Whether to remove video data, value:0: reserved.1: remove.
        """
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate']:
        """
        Subtitle Stream Configuration Parameters.
        """
        return pulumi.get(self, "subtitle_template")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig']:
        """
        Ultra-fast HD transcoding parameters.
        """
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate']:
        """
        Video streaming configuration parameters.
        """
        return pulumi.get(self, "video_template")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioChannel":
            suggest = "audio_channel"
        elif key == "sampleRate":
            suggest = "sample_rate"
        elif key == "streamSelects":
            suggest = "stream_selects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_channel: Optional[int] = None,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 sample_rate: Optional[int] = None,
                 stream_selects: Optional[Sequence[int]] = None):
        """
        :param int audio_channel: Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
        :param int bitrate: Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
        :param str codec: Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
        :param int sample_rate: Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
        :param Sequence[int] stream_selects: Specifies the audio track to preserve for the output. The default is to keep all sources.
        """
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        """
        Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
        """
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        """
        Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        """
        Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[int]:
        """
        Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[Sequence[int]]:
        """
        Specifies the audio track to preserve for the output. The default is to keep all sources.
        """
        return pulumi.get(self, "stream_selects")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontAlpha":
            suggest = "font_alpha"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"
        elif key == "streamIndex":
            suggest = "stream_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_alpha: Optional[float] = None,
                 font_color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 font_type: Optional[str] = None,
                 path: Optional[str] = None,
                 stream_index: Optional[int] = None):
        """
        :param float font_alpha: Text transparency, value range: (0, 1].0: fully transparent.1: fully opaque.Default: 1.
        :param str font_color: Font color, format: 0xRRGGBB, default value: 0xFFFFFF (white).
        :param str font_size: Font size, format: Npx, N is a value, if not specified, the subtitle file shall prevail.
        :param str font_type: Font type.hei.ttf, song.ttf, simkai.ttf, arial.ttf.Default: hei.ttf.
        :param str path: The address of the subtitle file to be compressed into the video.
        :param int stream_index: Specifies the subtitle track to be compressed into the video. If there is a specified Path, the Path has a higher priority. Path and StreamIndex specify at least one.
        """
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[float]:
        """
        Text transparency, value range: (0, 1].0: fully transparent.1: fully opaque.Default: 1.
        """
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[str]:
        """
        Font color, format: 0xRRGGBB, default value: 0xFFFFFF (white).
        """
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        """
        Font size, format: Npx, N is a value, if not specified, the subtitle file shall prevail.
        """
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[str]:
        """
        Font type.hei.ttf, song.ttf, simkai.ttf, arial.ttf.Default: hei.ttf.
        """
        return pulumi.get(self, "font_type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The address of the subtitle file to be compressed into the video.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[int]:
        """
        Specifies the subtitle track to be compressed into the video. If there is a specified Path, the Path has a higher priority. Path and StreamIndex specify at least one.
        """
        return pulumi.get(self, "stream_index")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_video_bitrate: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int max_video_bitrate: The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
        :param str type: Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
        """
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        """
        The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
        """
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentAdaptStream":
            suggest = "content_adapt_stream"
        elif key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 content_adapt_stream: Optional[int] = None,
                 fill_type: Optional[str] = None,
                 fps: Optional[int] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        """
        :param int bitrate: Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
        :param str codec: Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
        :param int content_adapt_stream: Content Adaptive Encoding. optional value:0: not open.1: open.Default: 0.When this parameter is turned on, multiple code streams with different resolutions and different bit rates will be adaptively generated. The width and height of the VideoTemplate are the maximum resolutions among the multiple code streams, and the bit rates in the VideoTemplate are multiple code rates. The highest bit rate in the stream, the vcrf in VideoTemplate is the highest quality among multiple bit streams. When the resolution, bit rate and vcrf are not set, the highest resolution generated by the ContentAdaptStream parameter is the resolution of the video source, and the video quality is close to vmaf95. To enable this parameter or learn about billing details, please contact your Tencent Cloud Business.
        :param str fill_type: Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched;.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
        :param int fps: Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
        :param int gop: The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
        :param int height: The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        :param str resolution_adaptive: Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
        :param int vcrf: Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
        :param int width: The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        """
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        """
        Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        """
        Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[int]:
        """
        Content Adaptive Encoding. optional value:0: not open.1: open.Default: 0.When this parameter is turned on, multiple code streams with different resolutions and different bit rates will be adaptively generated. The width and height of the VideoTemplate are the maximum resolutions among the multiple code streams, and the bit rates in the VideoTemplate are multiple code rates. The highest bit rate in the stream, the vcrf in VideoTemplate is the highest quality among multiple bit streams. When the resolution, bit rate and vcrf are not set, the highest resolution generated by the ContentAdaptStream parameter is the resolution of the video source, and the video quality is close to vmaf95. To enable this parameter or learn about billing details, please contact your Tencent Cloud Business.
        """
        return pulumi.get(self, "content_adapt_stream")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        """
        Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched;.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> Optional[int]:
        """
        Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        """
        The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        """
        Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        """
        Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
        """
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container: str,
                 audio_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate'] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 tehd_config: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig'] = None,
                 video_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate'] = None):
        """
        :param str container: Encapsulation format, optional values: mp4, flv, hls, mp3, flac, ogg, m4a. Among them, mp3, flac, ogg, m4a are pure audio files.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs' audio_template: Audio stream configuration parameters, when RemoveAudio is 0, this field is required.
        :param int remove_audio: Whether to remove audio data, value:0: reserved.1: remove.Default: 0.
        :param int remove_video: Whether to remove video data, value:0: reserved.1: remove.Default: 0.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs' tehd_config: Ultra-fast HD transcoding parameters.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs' video_template: Video stream configuration parameters, when RemoveVideo is 0, this field is required.
        """
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> str:
        """
        Encapsulation format, optional values: mp4, flv, hls, mp3, flac, ogg, m4a. Among them, mp3, flac, ogg, m4a are pure audio files.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate']:
        """
        Audio stream configuration parameters, when RemoveAudio is 0, this field is required.
        """
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        """
        Whether to remove audio data, value:0: reserved.1: remove.Default: 0.
        """
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        """
        Whether to remove video data, value:0: reserved.1: remove.Default: 0.
        """
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig']:
        """
        Ultra-fast HD transcoding parameters.
        """
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate']:
        """
        Video stream configuration parameters, when RemoveVideo is 0, this field is required.
        """
        return pulumi.get(self, "video_template")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        """
        :param int bitrate: Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
        :param str codec: Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
        :param int sample_rate: Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
        :param int audio_channel: Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Bit rate of the audio stream, value range: 0 and [26, 256], unit: kbps.When the value is 0, it means that the audio bit rate is consistent with the original audio.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        Encoding format of frequency stream.When the outer parameter Container is mp3, the optional value is:libmp3lame.When the outer parameter Container is ogg or flac, the optional value is:flac.When the outer parameter Container is m4a, the optional value is:libfdk_aac.libmp3lame.ac3.When the outer parameter Container is mp4 or flv, the optional value is:libfdk_aac: more suitable for mp4.libmp3lame: more suitable for flv.When the outer parameter Container is hls, the optional value is:libfdk_aac.libmp3lame.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        """
        Sampling rate of audio stream, optional value.32000.44100.48000.Unit: Hz.
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        """
        Audio channel mode, optional values:`1: single channel.2: Dual channel.6: Stereo.When the package format of the media is an audio format (flac, ogg, mp3, m4a), the number of channels is not allowed to be set to stereo.Default: 2.
        """
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 max_video_bitrate: Optional[int] = None):
        """
        :param str type: Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
        :param int max_video_bitrate: The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
        """
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Extremely high-definition type, optional value:TEHD-100: Extreme HD-100.Not filling means that the ultra-fast high-definition is not enabled.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        """
        The upper limit of the video bit rate, which is valid when the Type specifies the ultra-fast HD type.Do not fill in or fill in 0 means that there is no upper limit on the video bit rate.
        """
        return pulumi.get(self, "max_video_bitrate")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        """
        :param int bitrate: Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
        :param str codec: Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
        :param int fps: Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
        :param str fill_type: Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched;.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
        :param int gop: The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
        :param int height: The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        :param str resolution_adaptive: Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
        :param int vcrf: Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
        :param int width: The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Bit rate of the video stream, value range: 0 and [128, 35000], unit: kbps.When the value is 0, it means that the video bit rate is consistent with the original video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        Encoding format of the video stream, optional value:libx264: H.264 encoding.libx265: H.265 encoding.av1: AOMedia Video 1 encoding.Note: Currently H.265 encoding must specify a resolution, and it needs to be within 640*480.Note: av1 encoded containers currently only support mp4.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        """
        Video frame rate, value range: [0, 100], unit: Hz.When the value is 0, it means that the frame rate is consistent with the original video.Note: The value range for adaptive code rate is [0, 60].
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        """
        Filling method, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling method:stretch: Stretch, stretch each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched;.black: Leave black, keep the aspect ratio of the video unchanged, and fill the rest of the edge with black.white: Leave blank, keep the aspect ratio of the video unchanged, and fill the rest of the edge with white.gauss: Gaussian blur, keep the aspect ratio of the video unchanged, and fill the rest of the edge with Gaussian blur.Default: black.Note: Adaptive stream only supports stretch, black.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        """
        The interval between keyframe I frames, value range: 0 and [1, 100000], unit: number of frames.When filling 0 or not filling, the system will automatically set the gop length.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        The maximum value of video stream height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        """
        Adaptive resolution, optional values:```open: open, at this time, Width represents the long side of the video, Height represents the short side of the video.close: close, at this time, Width represents the width of the video, and Height represents the height of the video.Default: open.Note: In adaptive mode, Width cannot be smaller than Height.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        """
        Video constant bit rate control factor, the value range is [1, 51].If this parameter is specified, the code rate control method of CRF will be used for transcoding (the video code rate will no longer take effect).If there is no special requirement, it is not recommended to specify this parameter.
        """
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        The maximum value of video stream width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default: 0.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        """
        :param int definition: Watermark Template ID.
        :param float end_time_offset: End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs' raw_parameter: Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
        :param float start_time_offset: The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
        :param str svg_content: SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
        :param str text_content: Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
        """
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        Watermark Template ID.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        """
        End time offset of watermark, unit: second.Do not fill in or fill in 0, indicating that the watermark lasts until the end of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark lasts until the nth second and disappears.When the value is less than 0 (assumed to be -n), it means that the watermark lasts until it disappears n seconds before the end of the screen.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter']:
        """
        Watermark custom parameters, valid when Definition is filled with 0.This parameter is used in highly customized scenarios, it is recommended that you use Definition to specify watermark parameters first.Watermark custom parameters do not support screenshot watermarking.
        """
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        """
        The start time offset of the watermark, unit: second. Do not fill in or fill in 0, which means that the watermark will start to appear when the screen appears.Do not fill in or fill in 0, which means the watermark will appear from the beginning of the screen.When the value is greater than 0 (assumed to be n), it means that the watermark appears from the nth second of the screen.When the value is less than 0 (assumed to be -n), it means that the watermark starts to appear n seconds before the end of the screen.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        """
        SVG content. The length cannot exceed 2000000 characters. Fill in only if the watermark type is SVG watermark.SVG watermark does not support screenshot watermarking.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        """
        Text content, the length does not exceed 100 characters. Fill in only when the watermark type is text watermark.Text watermark does not support screenshot watermarking.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        """
        :param str type: Watermark type, optional value:image: image watermark.
        :param str coordinate_origin: Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs' image_template: Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
        :param str x_pos: The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
        :param str y_pos: The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
        """
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Watermark type, optional value:image: image watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        """
        Origin position, currently only supports:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.Default: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate']:
        """
        Image watermark template, when Type is image, this field is required. When Type is text, this field is invalid.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        """
        The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default: 0px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        """
        The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats:When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default: 0px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        """
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs' image_content: The input content of the watermark image. Support jpeg, png image format.
        :param str height: The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
        :param str repeat_type: Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
        :param str width: The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
        """
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        """
        The input content of the watermark image. Support jpeg, png image format.
        """
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        """
        The height of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Height is the percentage size of the video height, such as 10% means that the Height is 10% of the video height.When the string ends with px, it means that the watermark Height unit is pixel, such as 100px means that the Height is 100 pixels.Default value: 0px, indicating that Height is scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        """
        Watermark repeat type. Usage scenario: The watermark is a dynamic image. Ranges.once: After the dynamic watermark is played, it will no longer appear.repeat_last_frame: After the watermark is played, stay on the last frame.repeat: the watermark loops until the end of the video (default).
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        """
        The width of the watermark. Support %, px two formats:When the string ends with %, it means that the watermark Width is a percentage of the video width, such as 10% means that the Width is 10% of the video width.When the string ends with px, it means that the watermark Width unit is pixels, such as 100px means that the Width is 100 pixels.Default: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        """
        :param str type: Enter the type of source object, which supports COS and URL.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs' cos_input_info: Valid when Type is COS, this item is required, indicating media processing COS object information.
        :param 'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs' url_input_info: Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Enter the type of source object, which supports COS and URL.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        """
        Valid when Type is COS, this item is required, indicating media processing COS object information.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        """
        Valid when Type is URL, this item is required, indicating media processing URL object information.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The name of the COS Bucket where the media processing object file is located.
        :param str object: Input path for media processing object files.
        :param str region: The park to which the COS Bucket where the media processing target file resides belongs.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the COS Bucket where the media processing object file is located.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Input path for media processing object files.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The park to which the COS Bucket where the media processing target file resides belongs.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: Video URL.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Video URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowOutputStorageCosOutputStorage'] = None):
        """
        :param str type: The type of media processing output object storage location, now only supports COS.
        :param 'WorkflowOutputStorageCosOutputStorageArgs' cos_output_storage: Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of media processing output object storage location, now only supports COS.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowOutputStorageCosOutputStorage']:
        """
        Valid when Type is COS, this item is required, indicating the media processing COS output location.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        """
        :param str bucket: The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        :param str region: The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The target Bucket name of the file output generated by media processing, if not filled, it means the upper layer.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The park of the target Bucket for the output of the file generated by media processing. If not filled, it means inheriting from the upper layer.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        """
        :param str cmq_model: CMQ or TDMQ-CMQ model, there are two kinds of Queue and Topic.
        :param str cmq_region: Region of CMQ or TDMQ-CMQ, such as sh, bj, etc.
        :param str notify_mode: The mode of the workflow notification, the possible values are Finish and Change, leaving blank means Finish.
        :param str notify_type: Notification type, optional value:CMQ: offline, it is recommended to switch to TDMQ-CMQ.TDMQ-CMQ: message queue.URL: When the URL is specified, the HTTP callback is pushed to the address specified by NotifyUrl, the callback protocol is http+json, and the package body content is the same as the output parameters of the parsing event notification interface.SCF: not recommended, additional configuration of SCF in the console is required.Note: CMQ is the default when not filled or empty, if you need to use other types, you need to fill in the corresponding type value.
        :param str notify_url: HTTP callback address, required when NotifyType is URL.
        :param str queue_name: Valid when the model is Queue, indicating the queue name of the CMQ or TDMQ-CMQ that receives the event notification.
        :param str topic_name: Valid when the model is a Topic, indicating the topic name of the CMQ or TDMQ-CMQ that receives event notifications.
        """
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        """
        CMQ or TDMQ-CMQ model, there are two kinds of Queue and Topic.
        """
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        """
        Region of CMQ or TDMQ-CMQ, such as sh, bj, etc.
        """
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        """
        The mode of the workflow notification, the possible values are Finish and Change, leaving blank means Finish.
        """
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        """
        Notification type, optional value:CMQ: offline, it is recommended to switch to TDMQ-CMQ.TDMQ-CMQ: message queue.URL: When the URL is specified, the HTTP callback is pushed to the address specified by NotifyUrl, the callback protocol is http+json, and the package body content is the same as the output parameters of the parsing event notification interface.SCF: not recommended, additional configuration of SCF in the console is required.Note: CMQ is the default when not filled or empty, if you need to use other types, you need to fill in the corresponding type value.
        """
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        """
        HTTP callback address, required when NotifyType is URL.
        """
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        """
        Valid when the model is Queue, indicating the queue name of the CMQ or TDMQ-CMQ that receives the event notification.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        Valid when the model is a Topic, indicating the topic name of the CMQ or TDMQ-CMQ that receives event notifications.
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class WorkflowTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosFileUploadTrigger":
            suggest = "cos_file_upload_trigger"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_file_upload_trigger: Optional['outputs.WorkflowTriggerCosFileUploadTrigger'] = None):
        """
        :param str type: The type of trigger, currently only supports CosFileUpload.
        :param 'WorkflowTriggerCosFileUploadTriggerArgs' cos_file_upload_trigger: Mandatory and valid when Type is CosFileUpload, the rule is triggered for COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_file_upload_trigger is not None:
            pulumi.set(__self__, "cos_file_upload_trigger", cos_file_upload_trigger)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of trigger, currently only supports CosFileUpload.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosFileUploadTrigger")
    def cos_file_upload_trigger(self) -> Optional['outputs.WorkflowTriggerCosFileUploadTrigger']:
        """
        Mandatory and valid when Type is CosFileUpload, the rule is triggered for COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_file_upload_trigger")


@pulumi.output_type
class WorkflowTriggerCosFileUploadTrigger(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str,
                 dir: Optional[str] = None,
                 formats: Optional[Sequence[str]] = None):
        """
        :param str bucket: The name of the COS Bucket bound to the workflow.
        :param str region: The park to which the COS Bucket bound to the workflow belongs.
        :param str dir: The input path directory of the workflow binding must be an absolute path, that is, start and end with `/`.
        :param Sequence[str] formats: A list of file formats that are allowed to be triggered by the workflow, if not filled in, it means that files of all formats can trigger the workflow.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the COS Bucket bound to the workflow.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The park to which the COS Bucket bound to the workflow belongs.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def dir(self) -> Optional[str]:
        """
        The input path directory of the workflow binding must be an absolute path, that is, start and end with `/`.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence[str]]:
        """
        A list of file formats that are allowed to be triggered by the workflow, if not filled in, it means that files of all formats can trigger the workflow.
        """
        return pulumi.get(self, "formats")


@pulumi.output_type
class GetMediaMetaDataInputInfoResult(dict):
    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.GetMediaMetaDataInputInfoCosInputInfoResult'] = None,
                 s3_input_info: Optional['outputs.GetMediaMetaDataInputInfoS3InputInfoResult'] = None,
                 url_input_info: Optional['outputs.GetMediaMetaDataInputInfoUrlInputInfoResult'] = None):
        """
        :param str type: The input type. Valid values:`COS`: A COS bucket address.`URL`: A URL.`AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        :param 'GetMediaMetaDataInputInfoCosInputInfoArgs' cos_input_info: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param 'GetMediaMetaDataInputInfoS3InputInfoArgs' s3_input_info: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param 'GetMediaMetaDataInputInfoUrlInputInfoArgs' url_input_info: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if s3_input_info is not None:
            pulumi.set(__self__, "s3_input_info", s3_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The input type. Valid values:`COS`: A COS bucket address.`URL`: A URL.`AWS-S3`: An AWS S3 bucket address. Currently, this type is only supported for transcoding tasks.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.GetMediaMetaDataInputInfoCosInputInfoResult']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="s3InputInfo")
    def s3_input_info(self) -> Optional['outputs.GetMediaMetaDataInputInfoS3InputInfoResult']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.GetMediaMetaDataInputInfoUrlInputInfoResult']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class GetMediaMetaDataInputInfoCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: The region of the COS bucket, such as `ap-chongqing`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The COS bucket of the object to process, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region of the COS bucket, such as `ap-chongqing`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetMediaMetaDataInputInfoS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: Optional[str] = None,
                 s3_secret_key: Optional[str] = None):
        """
        :param str s3_bucket: The AWS S3 bucket.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID required to access the AWS S3 object.
        :param str s3_secret_key: The key required to access the AWS S3 object.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_id is not None:
            pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> Optional[str]:
        """
        The key ID required to access the AWS S3 object.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[str]:
        """
        The key required to access the AWS S3 object.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetMediaMetaDataInputInfoUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetMediaMetaDataMetaDataResult(dict):
    def __init__(__self__, *,
                 audio_duration: float,
                 audio_stream_sets: Sequence['outputs.GetMediaMetaDataMetaDataAudioStreamSetResult'],
                 bitrate: int,
                 container: str,
                 duration: float,
                 height: int,
                 rotate: int,
                 size: int,
                 video_duration: float,
                 video_stream_sets: Sequence['outputs.GetMediaMetaDataMetaDataVideoStreamSetResult'],
                 width: int):
        """
        :param float audio_duration: Audio duration in seconds.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetMediaMetaDataMetaDataAudioStreamSetArgs'] audio_stream_sets: Audio stream information.Note: This field may return null, indicating that no valid values can be obtained.
        :param int bitrate: Bitrate of a video stream in bps.Note: This field may return null, indicating that no valid values can be obtained.
        :param str container: Container, such as m4a and mp4.Note: This field may return null, indicating that no valid values can be obtained.
        :param float duration: Video duration in seconds.Note: This field may return null, indicating that no valid values can be obtained.
        :param int height: Height of a video stream in px.Note: This field may return null, indicating that no valid values can be obtained.
        :param int rotate: Selected angle during video recording in degrees.Note: This field may return null, indicating that no valid values can be obtained.
        :param int size: Size of an uploaded media file in bytes (which is the sum of size of m3u8 and ts files if the video is in HLS format).Note: This field may return null, indicating that no valid values can be obtained.
        :param float video_duration: Video duration in seconds.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetMediaMetaDataMetaDataVideoStreamSetArgs'] video_stream_sets: Video stream information.Note: This field may return null, indicating that no valid values can be obtained.
        :param int width: Maximum value of the width of a video stream in px.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "audio_duration", audio_duration)
        pulumi.set(__self__, "audio_stream_sets", audio_stream_sets)
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "rotate", rotate)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "video_duration", video_duration)
        pulumi.set(__self__, "video_stream_sets", video_stream_sets)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="audioDuration")
    def audio_duration(self) -> float:
        """
        Audio duration in seconds.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "audio_duration")

    @property
    @pulumi.getter(name="audioStreamSets")
    def audio_stream_sets(self) -> Sequence['outputs.GetMediaMetaDataMetaDataAudioStreamSetResult']:
        """
        Audio stream information.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "audio_stream_sets")

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Bitrate of a video stream in bps.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def container(self) -> str:
        """
        Container, such as m4a and mp4.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def duration(self) -> float:
        """
        Video duration in seconds.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def height(self) -> int:
        """
        Height of a video stream in px.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def rotate(self) -> int:
        """
        Selected angle during video recording in degrees.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "rotate")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Size of an uploaded media file in bytes (which is the sum of size of m3u8 and ts files if the video is in HLS format).Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="videoDuration")
    def video_duration(self) -> float:
        """
        Video duration in seconds.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "video_duration")

    @property
    @pulumi.getter(name="videoStreamSets")
    def video_stream_sets(self) -> Sequence['outputs.GetMediaMetaDataMetaDataVideoStreamSetResult']:
        """
        Video stream information.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "video_stream_sets")

    @property
    @pulumi.getter
    def width(self) -> int:
        """
        Maximum value of the width of a video stream in px.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class GetMediaMetaDataMetaDataAudioStreamSetResult(dict):
    def __init__(__self__, *,
                 bitrate: int,
                 channel: int,
                 codec: str,
                 sampling_rate: int):
        """
        :param int bitrate: Bitrate of a video stream in bps.Note: This field may return null, indicating that no valid values can be obtained.
        :param int channel: Number of sound channels, e.g., 2Note: this field may return `null`, indicating that no valid value was found.
        :param str codec: Video stream codec, such as h264.Note: This field may return null, indicating that no valid values can be obtained.
        :param int sampling_rate: Sample rate of an audio stream in Hz.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sampling_rate", sampling_rate)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Bitrate of a video stream in bps.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def channel(self) -> int:
        """
        Number of sound channels, e.g., 2Note: this field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        Video stream codec, such as h264.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> int:
        """
        Sample rate of an audio stream in Hz.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "sampling_rate")


@pulumi.output_type
class GetMediaMetaDataMetaDataVideoStreamSetResult(dict):
    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 color_primaries: str,
                 color_space: str,
                 color_transfer: str,
                 fps: int,
                 hdr_type: str,
                 height: int,
                 width: int):
        """
        :param int bitrate: Bitrate of a video stream in bps.Note: This field may return null, indicating that no valid values can be obtained.
        :param str codec: Video stream codec, such as h264.Note: This field may return null, indicating that no valid values can be obtained.
        :param str color_primaries: Color primariesNote: this field may return `null`, indicating that no valid value was found.
        :param str color_space: Color spaceNote: this field may return `null`, indicating that no valid value was found.
        :param str color_transfer: Color transferNote: this field may return `null`, indicating that no valid value was found.
        :param int fps: Frame rate in Hz.Note: This field may return null, indicating that no valid values can be obtained.
        :param str hdr_type: HDR typeNote: This field may return `null`, indicating that no valid value was found.
        :param int height: Height of a video stream in px.Note: This field may return null, indicating that no valid values can be obtained.
        :param int width: Maximum value of the width of a video stream in px.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "color_primaries", color_primaries)
        pulumi.set(__self__, "color_space", color_space)
        pulumi.set(__self__, "color_transfer", color_transfer)
        pulumi.set(__self__, "fps", fps)
        pulumi.set(__self__, "hdr_type", hdr_type)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        Bitrate of a video stream in bps.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        Video stream codec, such as h264.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="colorPrimaries")
    def color_primaries(self) -> str:
        """
        Color primariesNote: this field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "color_primaries")

    @property
    @pulumi.getter(name="colorSpace")
    def color_space(self) -> str:
        """
        Color spaceNote: this field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "color_space")

    @property
    @pulumi.getter(name="colorTransfer")
    def color_transfer(self) -> str:
        """
        Color transferNote: this field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "color_transfer")

    @property
    @pulumi.getter
    def fps(self) -> int:
        """
        Frame rate in Hz.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="hdrType")
    def hdr_type(self) -> str:
        """
        HDR typeNote: This field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "hdr_type")

    @property
    @pulumi.getter
    def height(self) -> int:
        """
        Height of a video stream in px.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> int:
        """
        Maximum value of the width of a video stream in px.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetResult(dict):
    def __init__(__self__, *,
                 activities: Sequence['outputs.GetSchedulesScheduleInfoSetActivityResult'],
                 create_time: str,
                 output_dir: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageResult'],
                 resource_id: str,
                 schedule_id: int,
                 schedule_name: str,
                 status: str,
                 task_notify_configs: Sequence['outputs.GetSchedulesScheduleInfoSetTaskNotifyConfigResult'],
                 triggers: Sequence['outputs.GetSchedulesScheduleInfoSetTriggerResult'],
                 update_time: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityArgs'] activities: The subtasks of the scheme.Note: This field may return null, indicating that no valid values can be obtained.
        :param str create_time: The creation time in [ISO date format](https://intl.cloud.tencent.com/document/product/862/37710?from_cn_redirect=1#52).Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_dir: The directory to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetOutputStorageArgs'] output_storages: The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        :param str resource_id: The resource ID. If there is no associated resource ID, fill it with the account's main resource ID.
        :param int schedule_id: The scheme ID.
        :param str schedule_name: The scheme name.Note: This field may return null, indicating that no valid values can be obtained.
        :param str status: The scheme status. Valid values:`Enabled`, `Disabled`. If you do not specify this parameter, all schemes will be returned regardless of the status.
        :param Sequence['GetSchedulesScheduleInfoSetTaskNotifyConfigArgs'] task_notify_configs: The notification configuration.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetTriggerArgs'] triggers: The trigger of the scheme.Note: This field may return null, indicating that no valid values can be obtained.
        :param str update_time: The last updated time in [ISO date format](https://intl.cloud.tencent.com/document/product/862/37710?from_cn_redirect=1#52).Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "activities", activities)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "output_dir", output_dir)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "schedule_id", schedule_id)
        pulumi.set(__self__, "schedule_name", schedule_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task_notify_configs", task_notify_configs)
        pulumi.set(__self__, "triggers", triggers)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def activities(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityResult']:
        """
        The subtasks of the scheme.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "activities")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The creation time in [ISO date format](https://intl.cloud.tencent.com/document/product/862/37710?from_cn_redirect=1#52).Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> str:
        """
        The directory to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_dir")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageResult']:
        """
        The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The resource ID. If there is no associated resource ID, fill it with the account's main resource ID.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> int:
        """
        The scheme ID.
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="scheduleName")
    def schedule_name(self) -> str:
        """
        The scheme name.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "schedule_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The scheme status. Valid values:`Enabled`, `Disabled`. If you do not specify this parameter, all schemes will be returned regardless of the status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskNotifyConfigs")
    def task_notify_configs(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTaskNotifyConfigResult']:
        """
        The notification configuration.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "task_notify_configs")

    @property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTriggerResult']:
        """
        The trigger of the scheme.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The last updated time in [ISO date format](https://intl.cloud.tencent.com/document/product/862/37710?from_cn_redirect=1#52).Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityResult(dict):
    def __init__(__self__, *,
                 activity_paras: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaResult'],
                 activity_type: str,
                 reardrive_indices: Sequence[int]):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaArgs'] activity_paras: The parameters of a subtask.Note: This field may return null, indicating that no valid values can be obtained.
        :param str activity_type: The subtask type.`input`: The start.`output`: The end.`action-trans`: Transcoding.`action-samplesnapshot`: Sampled screencapturing.`action-AIAnalysis`: Content analysis.`action-AIRecognition`: Content recognition.`action-aiReview`: Content moderation.`action-animated-graphics`: Animated screenshot generation.`action-image-sprite`: Image sprite generation.`action-snapshotByTimeOffset`: Time point screencapturing.`action-adaptive-substream`: Adaptive bitrate streaming.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence[int] reardrive_indices: The indexes of the subsequent actions.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "activity_paras", activity_paras)
        pulumi.set(__self__, "activity_type", activity_type)
        pulumi.set(__self__, "reardrive_indices", reardrive_indices)

    @property
    @pulumi.getter(name="activityParas")
    def activity_paras(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaResult']:
        """
        The parameters of a subtask.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "activity_paras")

    @property
    @pulumi.getter(name="activityType")
    def activity_type(self) -> str:
        """
        The subtask type.`input`: The start.`output`: The end.`action-trans`: Transcoding.`action-samplesnapshot`: Sampled screencapturing.`action-AIAnalysis`: Content analysis.`action-AIRecognition`: Content recognition.`action-aiReview`: Content moderation.`action-animated-graphics`: Animated screenshot generation.`action-image-sprite`: Image sprite generation.`action-snapshotByTimeOffset`: Time point screencapturing.`action-adaptive-substream`: Adaptive bitrate streaming.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "activity_type")

    @property
    @pulumi.getter(name="reardriveIndices")
    def reardrive_indices(self) -> Sequence[int]:
        """
        The indexes of the subsequent actions.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "reardrive_indices")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaResult(dict):
    def __init__(__self__, *,
                 adaptive_dynamic_streaming_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskResult'],
                 ai_analysis_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTaskResult'],
                 ai_content_review_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTaskResult'],
                 ai_recognition_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTaskResult'],
                 animated_graphic_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskResult'],
                 image_sprite_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskResult'],
                 sample_snapshot_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskResult'],
                 snapshot_by_time_offset_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskResult'],
                 transcode_tasks: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskArgs'] adaptive_dynamic_streaming_tasks: An adaptive bitrate streaming task.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTaskArgs'] ai_analysis_tasks: A content analysis task.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTaskArgs'] ai_content_review_tasks: A content moderation task.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTaskArgs'] ai_recognition_tasks: A content recognition task.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskArgs'] animated_graphic_tasks: An animated screenshot generation task.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskArgs'] image_sprite_tasks: An image sprite generation task.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskArgs'] sample_snapshot_tasks: A sampled screencapturing task.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskArgs'] snapshot_by_time_offset_tasks: A time point screencapturing task.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskArgs'] transcode_tasks: A transcoding task.
        """
        pulumi.set(__self__, "adaptive_dynamic_streaming_tasks", adaptive_dynamic_streaming_tasks)
        pulumi.set(__self__, "ai_analysis_tasks", ai_analysis_tasks)
        pulumi.set(__self__, "ai_content_review_tasks", ai_content_review_tasks)
        pulumi.set(__self__, "ai_recognition_tasks", ai_recognition_tasks)
        pulumi.set(__self__, "animated_graphic_tasks", animated_graphic_tasks)
        pulumi.set(__self__, "image_sprite_tasks", image_sprite_tasks)
        pulumi.set(__self__, "sample_snapshot_tasks", sample_snapshot_tasks)
        pulumi.set(__self__, "snapshot_by_time_offset_tasks", snapshot_by_time_offset_tasks)
        pulumi.set(__self__, "transcode_tasks", transcode_tasks)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTasks")
    def adaptive_dynamic_streaming_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskResult']:
        """
        An adaptive bitrate streaming task.
        """
        return pulumi.get(self, "adaptive_dynamic_streaming_tasks")

    @property
    @pulumi.getter(name="aiAnalysisTasks")
    def ai_analysis_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTaskResult']:
        """
        A content analysis task.
        """
        return pulumi.get(self, "ai_analysis_tasks")

    @property
    @pulumi.getter(name="aiContentReviewTasks")
    def ai_content_review_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTaskResult']:
        """
        A content moderation task.
        """
        return pulumi.get(self, "ai_content_review_tasks")

    @property
    @pulumi.getter(name="aiRecognitionTasks")
    def ai_recognition_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTaskResult']:
        """
        A content recognition task.
        """
        return pulumi.get(self, "ai_recognition_tasks")

    @property
    @pulumi.getter(name="animatedGraphicTasks")
    def animated_graphic_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskResult']:
        """
        An animated screenshot generation task.
        """
        return pulumi.get(self, "animated_graphic_tasks")

    @property
    @pulumi.getter(name="imageSpriteTasks")
    def image_sprite_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskResult']:
        """
        An image sprite generation task.
        """
        return pulumi.get(self, "image_sprite_tasks")

    @property
    @pulumi.getter(name="sampleSnapshotTasks")
    def sample_snapshot_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskResult']:
        """
        A sampled screencapturing task.
        """
        return pulumi.get(self, "sample_snapshot_tasks")

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTasks")
    def snapshot_by_time_offset_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskResult']:
        """
        A time point screencapturing task.
        """
        return pulumi.get(self, "snapshot_by_time_offset_tasks")

    @property
    @pulumi.getter(name="transcodeTasks")
    def transcode_tasks(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskResult']:
        """
        A transcoding task.
        """
        return pulumi.get(self, "transcode_tasks")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskResult(dict):
    def __init__(__self__, *,
                 add_on_subtitles: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleResult'],
                 definition: int,
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageResult'],
                 segment_object_name: str,
                 sub_stream_object_name: str,
                 watermark_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleArgs'] add_on_subtitles: The subtitle file to add.Note: This field may return null, indicating that no valid values can be obtained.
        :param int definition: ID of a watermarking template.
        :param str output_object_path: Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageArgs'] output_storages: The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        :param str segment_object_name: Path to an output file part (the path to ts during transcoding to HLS), which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}_{number}.{format}`.
        :param str sub_stream_object_name: The relative output path of the substream file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "segment_object_name", segment_object_name)
        pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleResult']:
        """
        The subtitle file to add.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        """
        Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageResult']:
        """
        The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> str:
        """
        Path to an output file part (the path to ts during transcoding to HLS), which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> str:
        """
        The relative output path of the substream file after being transcoded to adaptive bitrate streaming. If this parameter is left empty, a relative path in the following format will be used by default: `{inputName}_adaptiveDynamicStreaming_{definition}_{subStreamNumber}.{format}`.
        """
        return pulumi.get(self, "sub_stream_object_name")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetResult']:
        """
        List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleResult(dict):
    def __init__(__self__, *,
                 subtitles: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleResult'],
                 type: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleArgs'] subtitles: The subtitle file.Note: This field may return null, indicating that no valid values can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "subtitles", subtitles)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitles(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleResult']:
        """
        The subtitle file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subtitles")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoArgs'] cos_input_infos: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoArgs'] s3_input_infos: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoArgs'] url_input_infos: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoResult']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoResult']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoResult']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskAddOnSubtitleSubtitleUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageArgs'] cos_output_storages: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageArgs'] s3_output_storages: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageResult']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageResult']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 raw_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterResult'],
                 start_time_offset: float,
                 svg_content: str,
                 text_content: str):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterArgs'] raw_parameters: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "raw_parameters", raw_parameters)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "svg_content", svg_content)
        pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameters")
    def raw_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterResult']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameters")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> str:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> str:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterResult(dict):
    def __init__(__self__, *,
                 coordinate_origin: str,
                 image_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateResult'],
                 type: str,
                 x_pos: str,
                 y_pos: str):
        """
        :param str coordinate_origin: Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateArgs'] image_templates: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        pulumi.set(__self__, "image_templates", image_templates)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> str:
        """
        Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplates")
    def image_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateResult']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_templates")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> str:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> str:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateResult(dict):
    def __init__(__self__, *,
                 height: str,
                 image_contents: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentResult'],
                 repeat_type: str,
                 width: str):
        """
        :param str height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentArgs'] image_contents: Input content of watermark image. JPEG and PNG images are supported.
        :param str repeat_type: Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "image_contents", image_contents)
        pulumi.set(__self__, "repeat_type", repeat_type)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> str:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="imageContents")
    def image_contents(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentResult']:
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_contents")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> str:
        """
        Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> str:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs'] cos_input_infos: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs'] s3_input_infos: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs'] url_input_infos: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAdaptiveDynamicStreamingTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAiAnalysisTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: str):
        """
        :param int definition: ID of a watermarking template.
        :param str extended_parameter: An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> str:
        """
        An extended parameter, whose value is a stringfied JSON.Note: This parameter is for customers with special requirements. It needs to be customized offline.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAiContentReviewTaskResult(dict):
    def __init__(__self__, *,
                 definition: int):
        """
        :param int definition: ID of a watermarking template.
        """
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAiRecognitionTaskResult(dict):
    def __init__(__self__, *,
                 definition: int):
        """
        :param int definition: ID of a watermarking template.
        """
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageResult'],
                 start_time_offset: float):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param str output_object_path: Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageArgs'] output_storages: The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        """
        Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageResult']:
        """
        The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageArgs'] cos_output_storages: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageArgs'] s3_output_storages: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageResult']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageResult']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaAnimatedGraphicTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 object_number_formats: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormatResult'],
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageResult'],
                 web_vtt_object_name: str):
        """
        :param int definition: ID of a watermarking template.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormatArgs'] object_number_formats: Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageArgs'] output_storages: The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        :param str web_vtt_object_name: Output path to the WebVTT file after an image sprite is generated, which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}.{format}`.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "object_number_formats", object_number_formats)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormats")
    def object_number_formats(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormatResult']:
        """
        Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_formats")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        """
        Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageResult']:
        """
        The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> str:
        """
        Output path to the WebVTT file after an image sprite is generated, which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_imageSprite_{definition}.{format}`.
        """
        return pulumi.get(self, "web_vtt_object_name")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskObjectNumberFormatResult(dict):
    def __init__(__self__, *,
                 increment: int,
                 initial_value: int,
                 min_length: int,
                 place_holder: str):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "initial_value", initial_value)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> int:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> int:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> str:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageArgs'] cos_output_storages: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageArgs'] s3_output_storages: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageResult']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageResult']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaImageSpriteTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 object_number_formats: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormatResult'],
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageResult'],
                 watermark_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetResult']):
        """
        :param int definition: ID of a watermarking template.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormatArgs'] object_number_formats: Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageArgs'] output_storages: The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "object_number_formats", object_number_formats)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormats")
    def object_number_formats(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormatResult']:
        """
        Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_formats")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        """
        Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageResult']:
        """
        The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetResult']:
        """
        List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskObjectNumberFormatResult(dict):
    def __init__(__self__, *,
                 increment: int,
                 initial_value: int,
                 min_length: int,
                 place_holder: str):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "initial_value", initial_value)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> int:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> int:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> str:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageArgs'] cos_output_storages: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageArgs'] s3_output_storages: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageResult']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageResult']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 raw_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterResult'],
                 start_time_offset: float,
                 svg_content: str,
                 text_content: str):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterArgs'] raw_parameters: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "raw_parameters", raw_parameters)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "svg_content", svg_content)
        pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameters")
    def raw_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterResult']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameters")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> str:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> str:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterResult(dict):
    def __init__(__self__, *,
                 coordinate_origin: str,
                 image_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateResult'],
                 type: str,
                 x_pos: str,
                 y_pos: str):
        """
        :param str coordinate_origin: Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateArgs'] image_templates: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        pulumi.set(__self__, "image_templates", image_templates)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> str:
        """
        Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplates")
    def image_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateResult']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_templates")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> str:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> str:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateResult(dict):
    def __init__(__self__, *,
                 height: str,
                 image_contents: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentResult'],
                 repeat_type: str,
                 width: str):
        """
        :param str height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentArgs'] image_contents: Input content of watermark image. JPEG and PNG images are supported.
        :param str repeat_type: Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "image_contents", image_contents)
        pulumi.set(__self__, "repeat_type", repeat_type)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> str:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="imageContents")
    def image_contents(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentResult']:
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_contents")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> str:
        """
        Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> str:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs'] cos_input_infos: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs'] s3_input_infos: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs'] url_input_infos: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSampleSnapshotTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 ext_time_offset_sets: Sequence[str],
                 object_number_formats: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatResult'],
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageResult'],
                 watermark_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetResult']):
        """
        :param int definition: ID of a watermarking template.
        :param Sequence[str] ext_time_offset_sets: List of screenshot time points in the format of `s` or `%`:If the string ends in `s`, it means that the time point is in seconds; for example, `3.5s` means that the time point is the 3.5th second;If the string ends in `%`, it means that the time point is the specified percentage of the video duration; for example, `10%` means that the time point is 10% of the video duration.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatArgs'] object_number_formats: Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageArgs'] output_storages: The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        pulumi.set(__self__, "object_number_formats", object_number_formats)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Sequence[str]:
        """
        List of screenshot time points in the format of `s` or `%`:If the string ends in `s`, it means that the time point is in seconds; for example, `3.5s` means that the time point is the 3.5th second;If the string ends in `%`, it means that the time point is the specified percentage of the video duration; for example, `10%` means that the time point is 10% of the video duration.
        """
        return pulumi.get(self, "ext_time_offset_sets")

    @property
    @pulumi.getter(name="objectNumberFormats")
    def object_number_formats(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatResult']:
        """
        Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_formats")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        """
        Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageResult']:
        """
        The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetResult']:
        """
        List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskObjectNumberFormatResult(dict):
    def __init__(__self__, *,
                 increment: int,
                 initial_value: int,
                 min_length: int,
                 place_holder: str):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "initial_value", initial_value)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> int:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> int:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> str:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageArgs'] cos_output_storages: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageArgs'] s3_output_storages: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageResult']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageResult']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 raw_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterResult'],
                 start_time_offset: float,
                 svg_content: str,
                 text_content: str):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterArgs'] raw_parameters: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "raw_parameters", raw_parameters)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "svg_content", svg_content)
        pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameters")
    def raw_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterResult']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameters")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> str:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> str:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterResult(dict):
    def __init__(__self__, *,
                 coordinate_origin: str,
                 image_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateResult'],
                 type: str,
                 x_pos: str,
                 y_pos: str):
        """
        :param str coordinate_origin: Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateArgs'] image_templates: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        pulumi.set(__self__, "image_templates", image_templates)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> str:
        """
        Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplates")
    def image_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateResult']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_templates")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> str:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> str:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateResult(dict):
    def __init__(__self__, *,
                 height: str,
                 image_contents: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentResult'],
                 repeat_type: str,
                 width: str):
        """
        :param str height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentArgs'] image_contents: Input content of watermark image. JPEG and PNG images are supported.
        :param str repeat_type: Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "image_contents", image_contents)
        pulumi.set(__self__, "repeat_type", repeat_type)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> str:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="imageContents")
    def image_contents(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentResult']:
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_contents")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> str:
        """
        Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> str:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs'] cos_input_infos: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs'] s3_input_infos: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs'] url_input_infos: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaSnapshotByTimeOffsetTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 head_tail_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterResult'],
                 mosaic_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSetResult'],
                 object_number_formats: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormatResult'],
                 output_object_path: str,
                 output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageResult'],
                 override_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterResult'],
                 raw_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterResult'],
                 segment_object_name: str,
                 start_time_offset: float,
                 watermark_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetResult']):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterArgs'] head_tail_parameters: Opening and closing credits parametersNote: this field may return `null`, indicating that no valid value was found.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSetArgs'] mosaic_sets: List of blurs. Up to 10 ones can be supported.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormatArgs'] object_number_formats: Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        :param str output_object_path: Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageArgs'] output_storages: The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterArgs'] override_parameters: Video transcoding custom parameter, which is valid when `Definition` is not 0.When any parameters in this structure are entered, they will be used to override corresponding parameters in templates.This parameter is used in highly customized scenarios. We recommend you only use `Definition` to specify the transcoding parameter.Note: this field may return `null`, indicating that no valid value was found.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterArgs'] raw_parameters: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param str segment_object_name: Path to an output file part (the path to ts during transcoding to HLS), which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}_{number}.{format}`.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetArgs'] watermark_sets: List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "head_tail_parameters", head_tail_parameters)
        pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        pulumi.set(__self__, "object_number_formats", object_number_formats)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storages", output_storages)
        pulumi.set(__self__, "override_parameters", override_parameters)
        pulumi.set(__self__, "raw_parameters", raw_parameters)
        pulumi.set(__self__, "segment_object_name", segment_object_name)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="headTailParameters")
    def head_tail_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterResult']:
        """
        Opening and closing credits parametersNote: this field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "head_tail_parameters")

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSetResult']:
        """
        List of blurs. Up to 10 ones can be supported.
        """
        return pulumi.get(self, "mosaic_sets")

    @property
    @pulumi.getter(name="objectNumberFormats")
    def object_number_formats(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormatResult']:
        """
        Rule of the `{number}` variable in the output path after transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "object_number_formats")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> str:
        """
        Path to a primary output file, which can be a relative path or an absolute path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}.{format}`.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorages")
    def output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageResult']:
        """
        The bucket to save the output file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "output_storages")

    @property
    @pulumi.getter(name="overrideParameters")
    def override_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterResult']:
        """
        Video transcoding custom parameter, which is valid when `Definition` is not 0.When any parameters in this structure are entered, they will be used to override corresponding parameters in templates.This parameter is used in highly customized scenarios. We recommend you only use `Definition` to specify the transcoding parameter.Note: this field may return `null`, indicating that no valid value was found.
        """
        return pulumi.get(self, "override_parameters")

    @property
    @pulumi.getter(name="rawParameters")
    def raw_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterResult']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameters")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> str:
        """
        Path to an output file part (the path to ts during transcoding to HLS), which can only be a relative path. If this parameter is left empty, the following relative path will be used by default: `{inputName}_transcode_{definition}_{number}.{format}`.
        """
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetResult']:
        """
        List of up to 10 image or text watermarks.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterResult(dict):
    def __init__(__self__, *,
                 head_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetResult'],
                 tail_sets: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetArgs'] head_sets: Opening credits list.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetArgs'] tail_sets: Closing credits list.
        """
        pulumi.set(__self__, "head_sets", head_sets)
        pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetResult']:
        """
        Opening credits list.
        """
        return pulumi.get(self, "head_sets")

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetResult']:
        """
        Closing credits list.
        """
        return pulumi.get(self, "tail_sets")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoArgs'] cos_input_infos: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoArgs'] s3_input_infos: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoArgs'] url_input_infos: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoResult']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoResult']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoResult']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterHeadSetUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoArgs'] cos_input_infos: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoArgs'] s3_input_infos: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoArgs'] url_input_infos: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoResult']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoResult']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoResult']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskHeadTailParameterTailSetUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskMosaicSetResult(dict):
    def __init__(__self__, *,
                 coordinate_origin: str,
                 end_time_offset: float,
                 height: str,
                 start_time_offset: float,
                 width: str,
                 x_pos: str,
                 y_pos: str):
        """
        :param str coordinate_origin: Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param str height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> str:
        """
        Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter
    def height(self) -> str:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def width(self) -> str:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> str:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> str:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskObjectNumberFormatResult(dict):
    def __init__(__self__, *,
                 increment: int,
                 initial_value: int,
                 min_length: int,
                 place_holder: str):
        """
        :param int increment: Increment of the `{number}` variable. Default value: 1.
        :param int initial_value: Start value of the `{number}` variable. Default value: 0.
        :param int min_length: Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        :param str place_holder: Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "initial_value", initial_value)
        pulumi.set(__self__, "min_length", min_length)
        pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> int:
        """
        Increment of the `{number}` variable. Default value: 1.
        """
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> int:
        """
        Start value of the `{number}` variable. Default value: 0.
        """
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> int:
        """
        Minimum length of the `{number}` variable. A placeholder will be used if the variable length is below the minimum requirement. Default value: 1.
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> str:
        """
        Placeholder used when the `{number}` variable length is below the minimum requirement. Default value: 0.
        """
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageResult'],
                 type: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageArgs'] cos_output_storages: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageArgs'] s3_output_storages: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageResult']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageResult']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterResult(dict):
    def __init__(__self__, *,
                 add_on_subtitles: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleResult'],
                 addon_audio_streams: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamResult'],
                 audio_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateResult'],
                 container: str,
                 remove_audio: int,
                 remove_video: int,
                 std_ext_info: str,
                 subtitle_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateResult'],
                 tehd_configs: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfigResult'],
                 video_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleArgs'] add_on_subtitles: The subtitle file to add.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamArgs'] addon_audio_streams: The information of the external audio track to add.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateArgs'] audio_templates: Audio stream configuration parameter. This field is required when `RemoveAudio` is 0.
        :param str container: Container. Valid values: mp4; flv; hls; mp3; flac; ogg; m4a. Among them, mp3, flac, ogg, and m4a are for audio files.
        :param int remove_audio: Whether to remove audio data. Valid values:0: retain;1: remove.Default value: 0.
        :param int remove_video: Whether to remove video data. Valid values:0: retain;1: remove.Default value: 0.
        :param str std_ext_info: An extended field for transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateArgs'] subtitle_templates: The subtitle settings.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfigArgs'] tehd_configs: TESHD transcoding parameter.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateArgs'] video_templates: Video stream configuration parameter. This field is required when `RemoveVideo` is 0.
        """
        pulumi.set(__self__, "add_on_subtitles", add_on_subtitles)
        pulumi.set(__self__, "addon_audio_streams", addon_audio_streams)
        pulumi.set(__self__, "audio_templates", audio_templates)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "remove_audio", remove_audio)
        pulumi.set(__self__, "remove_video", remove_video)
        pulumi.set(__self__, "std_ext_info", std_ext_info)
        pulumi.set(__self__, "subtitle_templates", subtitle_templates)
        pulumi.set(__self__, "tehd_configs", tehd_configs)
        pulumi.set(__self__, "video_templates", video_templates)

    @property
    @pulumi.getter(name="addOnSubtitles")
    def add_on_subtitles(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleResult']:
        """
        The subtitle file to add.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "add_on_subtitles")

    @property
    @pulumi.getter(name="addonAudioStreams")
    def addon_audio_streams(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamResult']:
        """
        The information of the external audio track to add.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "addon_audio_streams")

    @property
    @pulumi.getter(name="audioTemplates")
    def audio_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateResult']:
        """
        Audio stream configuration parameter. This field is required when `RemoveAudio` is 0.
        """
        return pulumi.get(self, "audio_templates")

    @property
    @pulumi.getter
    def container(self) -> str:
        """
        Container. Valid values: mp4; flv; hls; mp3; flac; ogg; m4a. Among them, mp3, flac, ogg, and m4a are for audio files.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> int:
        """
        Whether to remove audio data. Valid values:0: retain;1: remove.Default value: 0.
        """
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> int:
        """
        Whether to remove video data. Valid values:0: retain;1: remove.Default value: 0.
        """
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="stdExtInfo")
    def std_ext_info(self) -> str:
        """
        An extended field for transcoding.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "std_ext_info")

    @property
    @pulumi.getter(name="subtitleTemplates")
    def subtitle_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateResult']:
        """
        The subtitle settings.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subtitle_templates")

    @property
    @pulumi.getter(name="tehdConfigs")
    def tehd_configs(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfigResult']:
        """
        TESHD transcoding parameter.
        """
        return pulumi.get(self, "tehd_configs")

    @property
    @pulumi.getter(name="videoTemplates")
    def video_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateResult']:
        """
        Video stream configuration parameter. This field is required when `RemoveVideo` is 0.
        """
        return pulumi.get(self, "video_templates")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleResult(dict):
    def __init__(__self__, *,
                 subtitles: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleResult'],
                 type: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleArgs'] subtitles: The subtitle file.Note: This field may return null, indicating that no valid values can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "subtitles", subtitles)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def subtitles(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleResult']:
        """
        The subtitle file.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "subtitles")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoArgs'] cos_input_infos: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoArgs'] s3_input_infos: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoArgs'] url_input_infos: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoResult']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoResult']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoResult']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddOnSubtitleSubtitleUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoArgs'] cos_input_infos: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoArgs'] s3_input_infos: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoArgs'] url_input_infos: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoResult']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoResult']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoResult']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAddonAudioStreamUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterAudioTemplateResult(dict):
    def __init__(__self__, *,
                 audio_channel: int,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 stream_selects: Sequence[int]):
        """
        :param int audio_channel: Audio channel system. Valid values:1: Mono2: Dual6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        :param int bitrate: The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        :param str codec: The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        :param int sample_rate: Audio stream sample rate. Valid values:32,00044,10048,000In Hz.
        :param Sequence[int] stream_selects: The audio tracks to retain. All audio tracks are retained by default.
        """
        pulumi.set(__self__, "audio_channel", audio_channel)
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> int:
        """
        Audio channel system. Valid values:1: Mono2: Dual6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        """
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        """
        Audio stream sample rate. Valid values:32,00044,10048,000In Hz.
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Sequence[int]:
        """
        The audio tracks to retain. All audio tracks are retained by default.
        """
        return pulumi.get(self, "stream_selects")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterSubtitleTemplateResult(dict):
    def __init__(__self__, *,
                 font_alpha: float,
                 font_color: str,
                 font_size: str,
                 font_type: str,
                 path: str,
                 stream_index: int):
        """
        :param float font_alpha: The text transparency. Value range: 0-1.`0`: Fully transparent.`1`: Fully opaque.Default value: 1.Note: This field may return null, indicating that no valid values can be obtained.
        :param str font_color: The font color in 0xRRGGBB format. Default value: 0xFFFFFF (white).Note: This field may return null, indicating that no valid values can be obtained.
        :param str font_size: The font size (pixels). If this is not specified, the font size in the subtitle file will be used.Note: This field may return null, indicating that no valid values can be obtained.
        :param str font_type: The font. Valid values:`hei.ttf`: Heiti.`song.ttf`: Songti.`simkai.ttf`: Kaiti.`arial.ttf`: Arial.The default is `hei.ttf`.Note: This field may return null, indicating that no valid values can be obtained.
        :param str path: The URL of the subtitles to add to the video.Note: This field may return null, indicating that no valid values can be obtained.
        :param int stream_index: The subtitle track to add to the video. If both `Path` and `StreamIndex` are specified, `Path` will be used. You need to specify at least one of the two parameters.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "font_alpha", font_alpha)
        pulumi.set(__self__, "font_color", font_color)
        pulumi.set(__self__, "font_size", font_size)
        pulumi.set(__self__, "font_type", font_type)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> float:
        """
        The text transparency. Value range: 0-1.`0`: Fully transparent.`1`: Fully opaque.Default value: 1.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> str:
        """
        The font color in 0xRRGGBB format. Default value: 0xFFFFFF (white).Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> str:
        """
        The font size (pixels). If this is not specified, the font size in the subtitle file will be used.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> str:
        """
        The font. Valid values:`hei.ttf`: Heiti.`song.ttf`: Songti.`simkai.ttf`: Kaiti.`arial.ttf`: Arial.The default is `hei.ttf`.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "font_type")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The URL of the subtitles to add to the video.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> int:
        """
        The subtitle track to add to the video. If both `Path` and `StreamIndex` are specified, `Path` will be used. You need to specify at least one of the two parameters.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "stream_index")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterTehdConfigResult(dict):
    def __init__(__self__, *,
                 max_video_bitrate: int,
                 type: str):
        """
        :param int max_video_bitrate: Maximum bitrate, which is valid when `Type` is `TESHD`. If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> int:
        """
        Maximum bitrate, which is valid when `Type` is `TESHD`. If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        """
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskOverrideParameterVideoTemplateResult(dict):
    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 content_adapt_stream: int,
                 fill_type: str,
                 fps: int,
                 gop: int,
                 height: int,
                 resolution_adaptive: str,
                 vcrf: int,
                 width: int):
        """
        :param int bitrate: The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        :param str codec: The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        :param int content_adapt_stream: Whether to enable adaptive encoding. Valid values:0: Disable1: EnableDefault value: 0. If this parameter is set to `1`, multiple streams with different resolutions and bitrates will be generated automatically. The highest resolution, bitrate, and quality of the streams are determined by the values of `width` and `height`, `Bitrate`, and `Vcrf` in `VideoTemplate` respectively. If these parameters are not set in `VideoTemplate`, the highest resolution generated will be the same as that of the source video, and the highest video quality will be close to VMAF 95. To use this parameter or learn about the billing details of adaptive encoding, please contact your sales rep.
        :param str fill_type: The fill mode, which indicates how a video is resized when the video&#39;s original aspect ratio is different from the target aspect ratio. Valid values:stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding.black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars.white: Keep the image&#39;s original aspect ratio and fill the blank space with white bars.gauss: Keep the image&#39;s original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        :param int fps: The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        :param int gop: Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        :param int height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param str resolution_adaptive: Resolution adaption. Valid values:open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side.close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        :param int vcrf: The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        :param int width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        pulumi.set(__self__, "fill_type", fill_type)
        pulumi.set(__self__, "fps", fps)
        pulumi.set(__self__, "gop", gop)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        pulumi.set(__self__, "vcrf", vcrf)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> int:
        """
        Whether to enable adaptive encoding. Valid values:0: Disable1: EnableDefault value: 0. If this parameter is set to `1`, multiple streams with different resolutions and bitrates will be generated automatically. The highest resolution, bitrate, and quality of the streams are determined by the values of `width` and `height`, `Bitrate`, and `Vcrf` in `VideoTemplate` respectively. If these parameters are not set in `VideoTemplate`, the highest resolution generated will be the same as that of the source video, and the highest video quality will be close to VMAF 95. To use this parameter or learn about the billing details of adaptive encoding, please contact your sales rep.
        """
        return pulumi.get(self, "content_adapt_stream")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> str:
        """
        The fill mode, which indicates how a video is resized when the video&#39;s original aspect ratio is different from the target aspect ratio. Valid values:stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding.black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars.white: Keep the image&#39;s original aspect ratio and fill the blank space with white bars.gauss: Keep the image&#39;s original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> int:
        """
        The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> int:
        """
        Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> int:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> str:
        """
        Resolution adaption. Valid values:open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side.close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> int:
        """
        The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        """
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> int:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterResult(dict):
    def __init__(__self__, *,
                 audio_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplateResult'],
                 container: str,
                 remove_audio: int,
                 remove_video: int,
                 tehd_configs: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfigResult'],
                 video_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplateResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplateArgs'] audio_templates: Audio stream configuration parameter. This field is required when `RemoveAudio` is 0.
        :param str container: Container. Valid values: mp4; flv; hls; mp3; flac; ogg; m4a. Among them, mp3, flac, ogg, and m4a are for audio files.
        :param int remove_audio: Whether to remove audio data. Valid values:0: retain;1: remove.Default value: 0.
        :param int remove_video: Whether to remove video data. Valid values:0: retain;1: remove.Default value: 0.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfigArgs'] tehd_configs: TESHD transcoding parameter.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplateArgs'] video_templates: Video stream configuration parameter. This field is required when `RemoveVideo` is 0.
        """
        pulumi.set(__self__, "audio_templates", audio_templates)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "remove_audio", remove_audio)
        pulumi.set(__self__, "remove_video", remove_video)
        pulumi.set(__self__, "tehd_configs", tehd_configs)
        pulumi.set(__self__, "video_templates", video_templates)

    @property
    @pulumi.getter(name="audioTemplates")
    def audio_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplateResult']:
        """
        Audio stream configuration parameter. This field is required when `RemoveAudio` is 0.
        """
        return pulumi.get(self, "audio_templates")

    @property
    @pulumi.getter
    def container(self) -> str:
        """
        Container. Valid values: mp4; flv; hls; mp3; flac; ogg; m4a. Among them, mp3, flac, ogg, and m4a are for audio files.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> int:
        """
        Whether to remove audio data. Valid values:0: retain;1: remove.Default value: 0.
        """
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> int:
        """
        Whether to remove video data. Valid values:0: retain;1: remove.Default value: 0.
        """
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="tehdConfigs")
    def tehd_configs(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfigResult']:
        """
        TESHD transcoding parameter.
        """
        return pulumi.get(self, "tehd_configs")

    @property
    @pulumi.getter(name="videoTemplates")
    def video_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplateResult']:
        """
        Video stream configuration parameter. This field is required when `RemoveVideo` is 0.
        """
        return pulumi.get(self, "video_templates")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterAudioTemplateResult(dict):
    def __init__(__self__, *,
                 audio_channel: int,
                 bitrate: int,
                 codec: str,
                 sample_rate: int):
        """
        :param int audio_channel: Audio channel system. Valid values:1: Mono2: Dual6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        :param int bitrate: The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        :param str codec: The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        :param int sample_rate: Audio stream sample rate. Valid values:32,00044,10048,000In Hz.
        """
        pulumi.set(__self__, "audio_channel", audio_channel)
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> int:
        """
        Audio channel system. Valid values:1: Mono2: Dual6: StereoWhen the media is packaged in audio format (FLAC, OGG, MP3, M4A), the sound channel cannot be set to stereo.Default value: 2.
        """
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        """
        Audio stream sample rate. Valid values:32,00044,10048,000In Hz.
        """
        return pulumi.get(self, "sample_rate")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterTehdConfigResult(dict):
    def __init__(__self__, *,
                 max_video_bitrate: int,
                 type: str):
        """
        :param int max_video_bitrate: Maximum bitrate, which is valid when `Type` is `TESHD`. If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> int:
        """
        Maximum bitrate, which is valid when `Type` is `TESHD`. If this parameter is left empty or 0 is entered, there will be no upper limit for bitrate.
        """
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskRawParameterVideoTemplateResult(dict):
    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fill_type: str,
                 fps: int,
                 gop: int,
                 height: int,
                 resolution_adaptive: str,
                 vcrf: int,
                 width: int):
        """
        :param int bitrate: The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        :param str codec: The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        :param str fill_type: The fill mode, which indicates how a video is resized when the video&#39;s original aspect ratio is different from the target aspect ratio. Valid values:stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding.black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars.white: Keep the image&#39;s original aspect ratio and fill the blank space with white bars.gauss: Keep the image&#39;s original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        :param int fps: The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        :param int gop: Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        :param int height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param str resolution_adaptive: Resolution adaption. Valid values:open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side.close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        :param int vcrf: The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        :param int width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fill_type", fill_type)
        pulumi.set(__self__, "fps", fps)
        pulumi.set(__self__, "gop", gop)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        pulumi.set(__self__, "vcrf", vcrf)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        """
        The video bitrate (Kbps). Value range: 0 and [128, 35000].If the value is 0, the bitrate of the video will be the same as that of the source video.
        """
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        """
        The video codec. Valid values:`libx264`: H.264`libx265`: H.265`av1`: AOMedia Video 1Note: You must specify a resolution (not higher than 640 x 480) if the H.265 codec is used.Note: You can only use the AOMedia Video 1 codec for MP4 files.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> str:
        """
        The fill mode, which indicates how a video is resized when the video&#39;s original aspect ratio is different from the target aspect ratio. Valid values:stretch: Stretch the image frame by frame to fill the entire screen. The video image may become squashed or stretched after transcoding.black: Keep the image&#39;s original aspect ratio and fill the blank space with black bars.white: Keep the image&#39;s original aspect ratio and fill the blank space with white bars.gauss: Keep the image&#39;s original aspect ratio and apply Gaussian blur to the blank space.Default value: black.Note: Only `stretch` and `black` are supported for adaptive bitrate streaming.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> int:
        """
        The video frame rate (Hz). Value range: [0, 100].If the value is 0, the frame rate will be the same as that of the source video.Note: For adaptive bitrate streaming, the value range of this parameter is [0, 60].
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> int:
        """
        Frame interval between I keyframes. Value range: 0 and [1,100000].If this parameter is 0 or left empty, the system will automatically set the GOP length.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> int:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> str:
        """
        Resolution adaption. Valid values:open: Enabled. When resolution adaption is enabled, `Width` indicates the long side of a video, while `Height` indicates the short side.close: Disabled. When resolution adaption is disabled, `Width` indicates the width of a video, while `Height` indicates the height.Default value: open.Note: When resolution adaption is enabled, `Width` cannot be smaller than `Height`.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> int:
        """
        The control factor of video constant bitrate. Value range: [1, 51]If this parameter is specified, CRF (a bitrate control method) will be used for transcoding. (Video bitrate will no longer take effect.)It is not recommended to specify this parameter if there are no special requirements.
        """
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> int:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetResult(dict):
    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 raw_parameters: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterResult'],
                 start_time_offset: float,
                 svg_content: str,
                 text_content: str):
        """
        :param int definition: ID of a watermarking template.
        :param float end_time_offset: End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterArgs'] raw_parameters: Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        :param float start_time_offset: Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        :param str svg_content: SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        :param str text_content: Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "raw_parameters", raw_parameters)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "svg_content", svg_content)
        pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        """
        ID of a watermarking template.
        """
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        """
        End time offset of a watermark in seconds.If this parameter is left empty or 0 is entered, the watermark will exist till the last video frame;If this value is greater than 0 (e.g., n), the watermark will exist till second n;If this value is smaller than 0 (e.g., -n), the watermark will exist till second n before the last video frame.
        """
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameters")
    def raw_parameters(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterResult']:
        """
        Custom watermark parameter, which is valid if `Definition` is 0.This parameter is used in highly customized scenarios. We recommend you use `Definition` to specify the watermark parameter preferably.Custom watermark parameter is not available for screenshot.
        """
        return pulumi.get(self, "raw_parameters")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        """
        Start time offset of a watermark in seconds. If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame.If this parameter is left empty or 0 is entered, the watermark will appear upon the first video frame;If this value is greater than 0 (e.g., n), the watermark will appear at second n after the first video frame;If this value is smaller than 0 (e.g., -n), the watermark will appear at second n before the last video frame.
        """
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> str:
        """
        SVG content of up to 2,000,000 characters. This field is required only when the watermark type is `SVG`.SVG watermark is not available for screenshot.
        """
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> str:
        """
        Text content of up to 100 characters. This field is required only when the watermark type is text.Text watermark is not available for screenshot.
        """
        return pulumi.get(self, "text_content")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterResult(dict):
    def __init__(__self__, *,
                 coordinate_origin: str,
                 image_templates: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateResult'],
                 type: str,
                 x_pos: str,
                 y_pos: str):
        """
        :param str coordinate_origin: Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateArgs'] image_templates: Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param str x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param str y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        pulumi.set(__self__, "image_templates", image_templates)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> str:
        """
        Origin position, which currently can only be:TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplates")
    def image_templates(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateResult']:
        """
        Image watermark template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_templates")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> str:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width;If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> str:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported:If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height;If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateResult(dict):
    def __init__(__self__, *,
                 height: str,
                 image_contents: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentResult'],
                 repeat_type: str,
                 width: str):
        """
        :param str height: Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentArgs'] image_contents: Input content of watermark image. JPEG and PNG images are supported.
        :param str repeat_type: Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        :param str width: Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "image_contents", image_contents)
        pulumi.set(__self__, "repeat_type", repeat_type)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> str:
        """
        Watermark height. % and px formats are supported:If the string ends in %, the `Height` of the watermark will be the specified percentage of the video height; for example, `10%` means that `Height` is 10% of the video height;If the string ends in px, the `Height` of the watermark will be in px; for example, `100px` means that `Height` is 100 px.Default value: 0 px, which means that `Height` will be proportionally scaled according to the aspect ratio of the original watermark image.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="imageContents")
    def image_contents(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentResult']:
        """
        Input content of watermark image. JPEG and PNG images are supported.
        """
        return pulumi.get(self, "image_contents")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> str:
        """
        Repeat type of an animated watermark. Valid values:`once`: no longer appears after watermark playback ends.`repeat_last_frame`: stays on the last frame after watermark playback ends.`repeat` (default): repeats the playback until the video ends.
        """
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> str:
        """
        Watermark width. % and px formats are supported:If the string ends in %, the `Width` of the watermark will be the specified percentage of the video width; for example, `10%` means that `Width` is 10% of the video width;If the string ends in px, the `Width` of the watermark will be in px; for example, `100px` means that `Width` is 100 px.Default value: 10%.
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentResult(dict):
    def __init__(__self__, *,
                 cos_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult'],
                 s3_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult'],
                 type: str,
                 url_input_infos: Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']):
        """
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs'] cos_input_infos: The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoArgs'] s3_input_infos: The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        :param Sequence['GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs'] url_input_infos: The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cos_input_infos", cos_input_infos)
        pulumi.set(__self__, "s3_input_infos", s3_input_infos)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url_input_infos", url_input_infos)

    @property
    @pulumi.getter(name="cosInputInfos")
    def cos_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult']:
        """
        The information of the COS object to process. This parameter is valid and required when `Type` is `COS`.
        """
        return pulumi.get(self, "cos_input_infos")

    @property
    @pulumi.getter(name="s3InputInfos")
    def s3_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult']:
        """
        The information of the AWS S3 object processed. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_input_infos")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlInputInfos")
    def url_input_infos(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult']:
        """
        The URL of the object to process. This parameter is valid and required when `Type` is `URL`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "url_input_infos")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentCosInputInfoResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str object: The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The path of the object to process, such as `/movie/201907/WildAnimal.mov`.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentS3InputInfoResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_object: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_object: The path of the AWS S3 object.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_object", s3_object)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Object")
    def s3_object(self) -> str:
        """
        The path of the AWS S3 object.
        """
        return pulumi.get(self, "s3_object")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetActivityActivityParaTranscodeTaskWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: URL of a video.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL of a video.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetSchedulesScheduleInfoSetOutputStorageResult(dict):
    def __init__(__self__, *,
                 cos_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageCosOutputStorageResult'],
                 s3_output_storages: Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageS3OutputStorageResult'],
                 type: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetOutputStorageCosOutputStorageArgs'] cos_output_storages: The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetOutputStorageS3OutputStorageArgs'] s3_output_storages: The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "cos_output_storages", cos_output_storages)
        pulumi.set(__self__, "s3_output_storages", s3_output_storages)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cosOutputStorages")
    def cos_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageCosOutputStorageResult']:
        """
        The location to save the output object in COS. This parameter is valid and required when `Type` is COS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cos_output_storages")

    @property
    @pulumi.getter(name="s3OutputStorages")
    def s3_output_storages(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetOutputStorageS3OutputStorageResult']:
        """
        The AWS S3 bucket to save the output file. This parameter is required if `Type` is `AWS-S3`.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "s3_output_storages")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetOutputStorageCosOutputStorageResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetOutputStorageS3OutputStorageResult(dict):
    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTaskNotifyConfigResult(dict):
    def __init__(__self__, *,
                 aws_sqs: Sequence['outputs.GetSchedulesScheduleInfoSetTaskNotifyConfigAwsSqResult'],
                 cmq_model: str,
                 cmq_region: str,
                 notify_mode: str,
                 notify_type: str,
                 notify_url: str,
                 queue_name: str,
                 topic_name: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetTaskNotifyConfigAwsSqArgs'] aws_sqs: The SQS queue of the AWS S3 bucket.Note: The queue must be in the same region as the bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str cmq_model: The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
        :param str cmq_region: The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
        :param str notify_mode: Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
        :param str notify_type: The notification type. Valid values:`CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead.`TDMQ-CMQ`: Message queue`URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API.`SCF`: This notification type is not recommended. You need to configure it in the SCF console.`AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket.Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
        :param str notify_url: HTTP callback URL, required if `NotifyType` is set to `URL`.
        :param str queue_name: The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
        :param str topic_name: The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
        """
        pulumi.set(__self__, "aws_sqs", aws_sqs)
        pulumi.set(__self__, "cmq_model", cmq_model)
        pulumi.set(__self__, "cmq_region", cmq_region)
        pulumi.set(__self__, "notify_mode", notify_mode)
        pulumi.set(__self__, "notify_type", notify_type)
        pulumi.set(__self__, "notify_url", notify_url)
        pulumi.set(__self__, "queue_name", queue_name)
        pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTaskNotifyConfigAwsSqResult']:
        """
        The SQS queue of the AWS S3 bucket.Note: The queue must be in the same region as the bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> str:
        """
        The CMQ or TDMQ-CMQ model. Valid values: Queue, Topic.
        """
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> str:
        """
        The CMQ or TDMQ-CMQ region, such as `sh` (Shanghai) or `bj` (Beijing).
        """
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> str:
        """
        Workflow notification method. Valid values: Finish, Change. If this parameter is left empty, `Finish` will be used.
        """
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> str:
        """
        The notification type. Valid values:`CMQ`: This value is no longer used. Please use `TDMQ-CMQ` instead.`TDMQ-CMQ`: Message queue`URL`: If `NotifyType` is set to `URL`, HTTP callbacks are sent to the URL specified by `NotifyUrl`. HTTP and JSON are used for the callbacks. The packet contains the response parameters of the `ParseNotification` API.`SCF`: This notification type is not recommended. You need to configure it in the SCF console.`AWS-SQS`: AWS queue. This type is only supported for AWS tasks, and the queue must be in the same region as the AWS bucket.Note: If you do not pass this parameter or pass in an empty string, `CMQ` will be used. To use a different notification type, specify this parameter accordingly.
        """
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> str:
        """
        HTTP callback URL, required if `NotifyType` is set to `URL`.
        """
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        """
        The CMQ or TDMQ-CMQ queue to receive notifications. This parameter is valid when `CmqModel` is `Queue`.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        """
        The CMQ or TDMQ-CMQ topic to receive notifications. This parameter is valid when `CmqModel` is `Topic`.
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTaskNotifyConfigAwsSqResult(dict):
    def __init__(__self__, *,
                 s3_secret_id: str,
                 s3_secret_key: str,
                 sqs_queue_name: str,
                 sqs_region: str):
        """
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str sqs_queue_name: The name of the SQS queue.
        :param str sqs_region: The region of the SQS queue.
        """
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        """
        The name of the SQS queue.
        """
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        """
        The region of the SQS queue.
        """
        return pulumi.get(self, "sqs_region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTriggerResult(dict):
    def __init__(__self__, *,
                 aws_s3_file_upload_triggers: Sequence['outputs.GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerResult'],
                 cos_file_upload_triggers: Sequence['outputs.GetSchedulesScheduleInfoSetTriggerCosFileUploadTriggerResult'],
                 type: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerArgs'] aws_s3_file_upload_triggers: The AWS S3 trigger. This parameter is valid and required if `Type` is `AwsS3FileUpload`.Note: Currently, the key for the AWS S3 bucket, the trigger SQS queue, and the callback SQS queue must be the same.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetSchedulesScheduleInfoSetTriggerCosFileUploadTriggerArgs'] cos_file_upload_triggers: This parameter is required and valid when `Type` is `CosFileUpload`, indicating the COS trigger rule.Note: This field may return null, indicating that no valid values can be obtained.
        :param str type: The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        pulumi.set(__self__, "aws_s3_file_upload_triggers", aws_s3_file_upload_triggers)
        pulumi.set(__self__, "cos_file_upload_triggers", cos_file_upload_triggers)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="awsS3FileUploadTriggers")
    def aws_s3_file_upload_triggers(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerResult']:
        """
        The AWS S3 trigger. This parameter is valid and required if `Type` is `AwsS3FileUpload`.Note: Currently, the key for the AWS S3 bucket, the trigger SQS queue, and the callback SQS queue must be the same.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "aws_s3_file_upload_triggers")

    @property
    @pulumi.getter(name="cosFileUploadTriggers")
    def cos_file_upload_triggers(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTriggerCosFileUploadTriggerResult']:
        """
        This parameter is required and valid when `Type` is `CosFileUpload`, indicating the COS trigger rule.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "cos_file_upload_triggers")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trigger type. Valid values:`CosFileUpload`: Tencent Cloud COS trigger.`AwsS3FileUpload`: AWS S3 trigger. Currently, this type is only supported for transcoding tasks and schemes (not supported for workflows).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerResult(dict):
    def __init__(__self__, *,
                 aws_sqs: Sequence['outputs.GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSqResult'],
                 dir: str,
                 formats: Sequence[str],
                 s3_bucket: str,
                 s3_region: str,
                 s3_secret_id: str,
                 s3_secret_key: str):
        """
        :param Sequence['GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSqArgs'] aws_sqs: The SQS queue of the AWS S3 bucket.Note: The queue must be in the same region as the bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str dir: Input path directory bound to a workflow, such as `/movie/201907/`. If this parameter is left empty, the `/` root directory will be used.
        :param Sequence[str] formats: Format list of files that can trigger a workflow, such as [mp4, flv, mov]. If this parameter is left empty, files in all formats can trigger the workflow.
        :param str s3_bucket: The AWS S3 bucket bound to the scheme.
        :param str s3_region: The region of the AWS S3 bucket.
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "aws_sqs", aws_sqs)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "formats", formats)
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)

    @property
    @pulumi.getter(name="awsSqs")
    def aws_sqs(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSqResult']:
        """
        The SQS queue of the AWS S3 bucket.Note: The queue must be in the same region as the bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "aws_sqs")

    @property
    @pulumi.getter
    def dir(self) -> str:
        """
        Input path directory bound to a workflow, such as `/movie/201907/`. If this parameter is left empty, the `/` root directory will be used.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Sequence[str]:
        """
        Format list of files that can trigger a workflow, such as [mp4, flv, mov]. If this parameter is left empty, files in all formats can trigger the workflow.
        """
        return pulumi.get(self, "formats")

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        """
        The AWS S3 bucket bound to the scheme.
        """
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> str:
        """
        The region of the AWS S3 bucket.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTriggerAwsS3FileUploadTriggerAwsSqResult(dict):
    def __init__(__self__, *,
                 s3_secret_id: str,
                 s3_secret_key: str,
                 sqs_queue_name: str,
                 sqs_region: str):
        """
        :param str s3_secret_id: The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str s3_secret_key: The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        :param str sqs_queue_name: The name of the SQS queue.
        :param str sqs_region: The region of the SQS queue.
        """
        pulumi.set(__self__, "s3_secret_id", s3_secret_id)
        pulumi.set(__self__, "s3_secret_key", s3_secret_key)
        pulumi.set(__self__, "sqs_queue_name", sqs_queue_name)
        pulumi.set(__self__, "sqs_region", sqs_region)

    @property
    @pulumi.getter(name="s3SecretId")
    def s3_secret_id(self) -> str:
        """
        The key ID of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_id")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> str:
        """
        The key of the AWS S3 bucket.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "s3_secret_key")

    @property
    @pulumi.getter(name="sqsQueueName")
    def sqs_queue_name(self) -> str:
        """
        The name of the SQS queue.
        """
        return pulumi.get(self, "sqs_queue_name")

    @property
    @pulumi.getter(name="sqsRegion")
    def sqs_region(self) -> str:
        """
        The region of the SQS queue.
        """
        return pulumi.get(self, "sqs_region")


@pulumi.output_type
class GetSchedulesScheduleInfoSetTriggerCosFileUploadTriggerResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 dir: str,
                 formats: Sequence[str],
                 region: str):
        """
        :param str bucket: Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        :param str dir: Input path directory bound to a workflow, such as `/movie/201907/`. If this parameter is left empty, the `/` root directory will be used.
        :param Sequence[str] formats: Format list of files that can trigger a workflow, such as [mp4, flv, mov]. If this parameter is left empty, files in all formats can trigger the workflow.
        :param str region: Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "formats", formats)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Name of the COS bucket bound to a workflow, such as `TopRankVideo-125xxx88`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def dir(self) -> str:
        """
        Input path directory bound to a workflow, such as `/movie/201907/`. If this parameter is left empty, the `/` root directory will be used.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Sequence[str]:
        """
        Format list of files that can trigger a workflow, such as [mp4, flv, mov]. If this parameter is left empty, files in all formats can trigger the workflow.
        """
        return pulumi.get(self, "formats")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region of the COS bucket bound to a workflow, such as `ap-chongiqng`.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetTasksTaskSetResult(dict):
    def __init__(__self__, *,
                 begin_process_time: str,
                 create_time: str,
                 finish_time: str,
                 sub_task_types: Sequence[str],
                 task_id: str,
                 task_type: str):
        """
        :param str begin_process_time: Begin process time, in ISO date format. Refer to https://cloud.tencent.com/document/product/862/37710#52. If the task has not started yet, this field is: 0000-00-00T00:00:00Z.
        :param str create_time: Creation time, in ISO date format. Refer to https://cloud.tencent.com/document/product/862/37710#52.
        :param str finish_time: Task finish time, in ISO date format. Refer to https://cloud.tencent.com/document/product/862/37710#52. If the task has not been completed, this field is: 0000-00-00T00:00:00Z.
        :param Sequence[str] sub_task_types: Sub task types.
        :param str task_id: Task ID.
        :param str task_type: Task type, including:WorkflowTask, EditMediaTask, LiveProcessTask.
        """
        pulumi.set(__self__, "begin_process_time", begin_process_time)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "sub_task_types", sub_task_types)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="beginProcessTime")
    def begin_process_time(self) -> str:
        """
        Begin process time, in ISO date format. Refer to https://cloud.tencent.com/document/product/862/37710#52. If the task has not started yet, this field is: 0000-00-00T00:00:00Z.
        """
        return pulumi.get(self, "begin_process_time")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time, in ISO date format. Refer to https://cloud.tencent.com/document/product/862/37710#52.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        """
        Task finish time, in ISO date format. Refer to https://cloud.tencent.com/document/product/862/37710#52. If the task has not been completed, this field is: 0000-00-00T00:00:00Z.
        """
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter(name="subTaskTypes")
    def sub_task_types(self) -> Sequence[str]:
        """
        Sub task types.
        """
        return pulumi.get(self, "sub_task_types")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> str:
        """
        Task ID.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Task type, including:WorkflowTask, EditMediaTask, LiveProcessTask.
        """
        return pulumi.get(self, "task_type")


