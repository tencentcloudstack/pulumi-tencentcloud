# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AttachmentTargetArgs',
    'FunctionTargetsAttachmentFunctionTargetsArgs',
    'FunctionTargetsAttachmentFunctionTargetsFunctionArgs',
    'InstanceSnatIpArgs',
    'ListenerRuleOauthArgs',
    'ReplaceCertForLbsCertificateArgs',
    'SnatIpIpArgs',
    'TargetGroupAttachmentsAssociationArgs',
    'TargetGroupTargetGroupInstanceArgs',
    'GetClusterResourcesFilterArgs',
    'GetCrossTargetsFilterArgs',
    'GetExclusiveClustersFilterArgs',
    'GetInstanceDetailFilterArgs',
    'GetListenersByTargetsBackendArgs',
    'GetResourcesFilterArgs',
    'GetTargetGroupListFilterArgs',
]

@pulumi.input_type
class AttachmentTargetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 eni_ip: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] port: Port of the backend server. Valid value ranges: (0~65535).
        :param pulumi.Input[str] eni_ip: Eni IP address of the backend server, conflict with `instance_id` but must specify one of them.
        :param pulumi.Input[str] instance_id: CVM Instance Id of the backend server, conflict with `eni_ip` but must specify one of them.
        :param pulumi.Input[int] weight: Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to `10`.
        """
        pulumi.set(__self__, "port", port)
        if eni_ip is not None:
            pulumi.set(__self__, "eni_ip", eni_ip)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port of the backend server. Valid value ranges: (0~65535).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="eniIp")
    def eni_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Eni IP address of the backend server, conflict with `instance_id` but must specify one of them.
        """
        return pulumi.get(self, "eni_ip")

    @eni_ip.setter
    def eni_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eni_ip", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        CVM Instance Id of the backend server, conflict with `eni_ip` but must specify one of them.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to `10`.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FunctionTargetsAttachmentFunctionTargetsArgs:
    def __init__(__self__, *,
                 function: pulumi.Input['FunctionTargetsAttachmentFunctionTargetsFunctionArgs'],
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['FunctionTargetsAttachmentFunctionTargetsFunctionArgs'] function: Information about cloud functions.Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] weight: Weight. The default is `10`.
        """
        pulumi.set(__self__, "function", function)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Input['FunctionTargetsAttachmentFunctionTargetsFunctionArgs']:
        """
        Information about cloud functions.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: pulumi.Input['FunctionTargetsAttachmentFunctionTargetsFunctionArgs']):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight. The default is `10`.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FunctionTargetsAttachmentFunctionTargetsFunctionArgs:
    def __init__(__self__, *,
                 function_name: pulumi.Input[str],
                 function_namespace: pulumi.Input[str],
                 function_qualifier: pulumi.Input[str],
                 function_qualifier_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] function_name: The name of function.
        :param pulumi.Input[str] function_namespace: The namespace of function.
        :param pulumi.Input[str] function_qualifier: The version name or alias of the function.
        :param pulumi.Input[str] function_qualifier_type: Identifies the type of FunctionQualifier parameter, possible values: VERSION, ALIAS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "function_namespace", function_namespace)
        pulumi.set(__self__, "function_qualifier", function_qualifier)
        if function_qualifier_type is not None:
            pulumi.set(__self__, "function_qualifier_type", function_qualifier_type)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Input[str]:
        """
        The name of function.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter(name="functionNamespace")
    def function_namespace(self) -> pulumi.Input[str]:
        """
        The namespace of function.
        """
        return pulumi.get(self, "function_namespace")

    @function_namespace.setter
    def function_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_namespace", value)

    @property
    @pulumi.getter(name="functionQualifier")
    def function_qualifier(self) -> pulumi.Input[str]:
        """
        The version name or alias of the function.
        """
        return pulumi.get(self, "function_qualifier")

    @function_qualifier.setter
    def function_qualifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_qualifier", value)

    @property
    @pulumi.getter(name="functionQualifierType")
    def function_qualifier_type(self) -> Optional[pulumi.Input[str]]:
        """
        Identifies the type of FunctionQualifier parameter, possible values: VERSION, ALIAS.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "function_qualifier_type")

    @function_qualifier_type.setter
    def function_qualifier_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_qualifier_type", value)


@pulumi.input_type
class InstanceSnatIpArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet_id: Snat subnet ID.
        :param pulumi.Input[str] ip: Snat IP address, If set to empty will auto allocated.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Snat subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Snat IP address, If set to empty will auto allocated.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class ListenerRuleOauthArgs:
    def __init__(__self__, *,
                 oauth_enable: Optional[pulumi.Input[bool]] = None,
                 oauth_failure_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] oauth_enable: Enable or disable authentication. True: Enabled; False: Disabled.
        :param pulumi.Input[str] oauth_failure_status: After all IAPs fail, the request is rejected or released. BYPASS: PASS; REJECT: Reject.
        """
        if oauth_enable is not None:
            pulumi.set(__self__, "oauth_enable", oauth_enable)
        if oauth_failure_status is not None:
            pulumi.set(__self__, "oauth_failure_status", oauth_failure_status)

    @property
    @pulumi.getter(name="oauthEnable")
    def oauth_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable authentication. True: Enabled; False: Disabled.
        """
        return pulumi.get(self, "oauth_enable")

    @oauth_enable.setter
    def oauth_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oauth_enable", value)

    @property
    @pulumi.getter(name="oauthFailureStatus")
    def oauth_failure_status(self) -> Optional[pulumi.Input[str]]:
        """
        After all IAPs fail, the request is rejected or released. BYPASS: PASS; REJECT: Reject.
        """
        return pulumi.get(self, "oauth_failure_status")

    @oauth_failure_status.setter
    def oauth_failure_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_failure_status", value)


@pulumi.input_type
class ReplaceCertForLbsCertificateArgs:
    def __init__(__self__, *,
                 cert_ca_content: Optional[pulumi.Input[str]] = None,
                 cert_ca_id: Optional[pulumi.Input[str]] = None,
                 cert_ca_name: Optional[pulumi.Input[str]] = None,
                 cert_content: Optional[pulumi.Input[str]] = None,
                 cert_id: Optional[pulumi.Input[str]] = None,
                 cert_key: Optional[pulumi.Input[str]] = None,
                 cert_name: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_ca_content: Content of the uploaded client certificate. When SSLMode = mutual, if there is no CertCaId, this parameter is required.
        :param pulumi.Input[str] cert_ca_id: ID of a client certificate. When the listener adopts mutual authentication (i.e., SSLMode = mutual), if you leave this parameter empty, you must upload the client certificate, including CertCaContent and CertCaName.
        :param pulumi.Input[str] cert_ca_name: Name of the uploaded client CA certificate. When SSLMode = mutual, if there is no CertCaId, this parameter is required.
        :param pulumi.Input[str] cert_content: Content of the uploaded server certificate. If there is no CertId, this parameter is required.
        :param pulumi.Input[str] cert_id: ID of a server certificate. If you leave this parameter empty, you must upload the certificate, including CertContent, CertKey, and CertName.
        :param pulumi.Input[str] cert_key: Key of the uploaded server certificate. If there is no CertId, this parameter is required.
        :param pulumi.Input[str] cert_name: Name of the uploaded server certificate. If there is no CertId, this parameter is required.
        :param pulumi.Input[str] ssl_mode: Authentication type. Value range: UNIDIRECTIONAL (unidirectional authentication), MUTUAL (mutual authentication).
        """
        if cert_ca_content is not None:
            pulumi.set(__self__, "cert_ca_content", cert_ca_content)
        if cert_ca_id is not None:
            pulumi.set(__self__, "cert_ca_id", cert_ca_id)
        if cert_ca_name is not None:
            pulumi.set(__self__, "cert_ca_name", cert_ca_name)
        if cert_content is not None:
            pulumi.set(__self__, "cert_content", cert_content)
        if cert_id is not None:
            pulumi.set(__self__, "cert_id", cert_id)
        if cert_key is not None:
            pulumi.set(__self__, "cert_key", cert_key)
        if cert_name is not None:
            pulumi.set(__self__, "cert_name", cert_name)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)

    @property
    @pulumi.getter(name="certCaContent")
    def cert_ca_content(self) -> Optional[pulumi.Input[str]]:
        """
        Content of the uploaded client certificate. When SSLMode = mutual, if there is no CertCaId, this parameter is required.
        """
        return pulumi.get(self, "cert_ca_content")

    @cert_ca_content.setter
    def cert_ca_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_ca_content", value)

    @property
    @pulumi.getter(name="certCaId")
    def cert_ca_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of a client certificate. When the listener adopts mutual authentication (i.e., SSLMode = mutual), if you leave this parameter empty, you must upload the client certificate, including CertCaContent and CertCaName.
        """
        return pulumi.get(self, "cert_ca_id")

    @cert_ca_id.setter
    def cert_ca_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_ca_id", value)

    @property
    @pulumi.getter(name="certCaName")
    def cert_ca_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the uploaded client CA certificate. When SSLMode = mutual, if there is no CertCaId, this parameter is required.
        """
        return pulumi.get(self, "cert_ca_name")

    @cert_ca_name.setter
    def cert_ca_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_ca_name", value)

    @property
    @pulumi.getter(name="certContent")
    def cert_content(self) -> Optional[pulumi.Input[str]]:
        """
        Content of the uploaded server certificate. If there is no CertId, this parameter is required.
        """
        return pulumi.get(self, "cert_content")

    @cert_content.setter
    def cert_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_content", value)

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of a server certificate. If you leave this parameter empty, you must upload the certificate, including CertContent, CertKey, and CertName.
        """
        return pulumi.get(self, "cert_id")

    @cert_id.setter
    def cert_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_id", value)

    @property
    @pulumi.getter(name="certKey")
    def cert_key(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the uploaded server certificate. If there is no CertId, this parameter is required.
        """
        return pulumi.get(self, "cert_key")

    @cert_key.setter
    def cert_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_key", value)

    @property
    @pulumi.getter(name="certName")
    def cert_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the uploaded server certificate. If there is no CertId, this parameter is required.
        """
        return pulumi.get(self, "cert_name")

    @cert_name.setter
    def cert_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_name", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type. Value range: UNIDIRECTIONAL (unidirectional authentication), MUTUAL (mutual authentication).
        """
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)


@pulumi.input_type
class SnatIpIpArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 subnet_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] ip: Snat IP.
        :param pulumi.Input[str] subnet_id: Subnet ID.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        Snat IP.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class TargetGroupAttachmentsAssociationArgs:
    def __init__(__self__, *,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 target_group_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] listener_id: Listener ID.
        :param pulumi.Input[str] load_balancer_id: CLB instance ID, when the binding target is target group, load_balancer_id in associations is required.
        :param pulumi.Input[str] location_id: Forwarding rule ID.
        :param pulumi.Input[str] target_group_id: Target group ID, when the binding target is clb, the target_group_id in associations is required.
        """
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if target_group_id is not None:
            pulumi.set(__self__, "target_group_id", target_group_id)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        Listener ID.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLB instance ID, when the binding target is target group, load_balancer_id in associations is required.
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[str]]:
        """
        Forwarding rule ID.
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Target group ID, when the binding target is clb, the target_group_id in associations is required.
        """
        return pulumi.get(self, "target_group_id")

    @target_group_id.setter
    def target_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_group_id", value)


@pulumi.input_type
class TargetGroupTargetGroupInstanceArgs:
    def __init__(__self__, *,
                 bind_ip: pulumi.Input[str],
                 port: pulumi.Input[int],
                 new_port: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] bind_ip: The internal ip of target group instance.
        :param pulumi.Input[int] port: The port of target group instance.
        :param pulumi.Input[int] new_port: The new port of target group instance.
        :param pulumi.Input[int] weight: The weight of target group instance.
        """
        pulumi.set(__self__, "bind_ip", bind_ip)
        pulumi.set(__self__, "port", port)
        if new_port is not None:
            pulumi.set(__self__, "new_port", new_port)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="bindIp")
    def bind_ip(self) -> pulumi.Input[str]:
        """
        The internal ip of target group instance.
        """
        return pulumi.get(self, "bind_ip")

    @bind_ip.setter
    def bind_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "bind_ip", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port of target group instance.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="newPort")
    def new_port(self) -> Optional[pulumi.Input[int]]:
        """
        The new port of target group instance.
        """
        return pulumi.get(self, "new_port")

    @new_port.setter
    def new_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "new_port", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        The weight of target group instance.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class GetClusterResourcesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCrossTargetsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetExclusiveClustersFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter value array.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter value array.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetInstanceDetailFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter value array.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter value array.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetListenersByTargetsBackendArgs:
    def __init__(__self__, *,
                 private_ip: str,
                 vpc_id: str):
        """
        :param str private_ip: Private network IP to be queried, which can be of the CVM or ENI.
        :param str vpc_id: VPC ID.
        """
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        Private network IP to be queried, which can be of the CVM or ENI.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: str):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: str):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class GetResourcesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter value array.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter value array.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetTargetGroupListFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter value array.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter value array.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


