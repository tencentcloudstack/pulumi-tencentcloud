# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 clb_name: pulumi.Input[str],
                 network_type: pulumi.Input[str],
                 address_ip_version: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 delete_protect: Optional[pulumi.Input[bool]] = None,
                 dynamic_vip: Optional[pulumi.Input[bool]] = None,
                 internet_bandwidth_max_out: Optional[pulumi.Input[int]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 load_balancer_pass_to_target: Optional[pulumi.Input[bool]] = None,
                 log_set_id: Optional[pulumi.Input[str]] = None,
                 log_topic_id: Optional[pulumi.Input[str]] = None,
                 master_zone_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sla_type: Optional[pulumi.Input[str]] = None,
                 slave_zone_id: Optional[pulumi.Input[str]] = None,
                 snat_ips: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSnatIpArgs']]]] = None,
                 snat_pro: Optional[pulumi.Input[bool]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 target_region_info_region: Optional[pulumi.Input[str]] = None,
                 target_region_info_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vip_isp: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] clb_name: Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
        :param pulumi.Input[str] network_type: Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
        :param pulumi.Input[str] address_ip_version: It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
        :param pulumi.Input[str] bandwidth_package_id: Bandwidth package id. If set, the `internet_charge_type` must be `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[bool] delete_protect: Whether to enable delete protection.
        :param pulumi.Input[bool] dynamic_vip: If create dynamic vip CLB instance, `true` or `false`.
        :param pulumi.Input[int] internet_bandwidth_max_out: Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
        :param pulumi.Input[str] internet_charge_type: Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[bool] load_balancer_pass_to_target: Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
        :param pulumi.Input[str] log_set_id: The id of log set.
        :param pulumi.Input[str] log_topic_id: The id of log topic.
        :param pulumi.Input[str] master_zone_id: Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
        :param pulumi.Input[int] project_id: ID of the project within the CLB instance, `0` - Default Project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
        :param pulumi.Input[str] sla_type: This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
        :param pulumi.Input[str] slave_zone_id: Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceSnatIpArgs']]] snat_ips: Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
        :param pulumi.Input[bool] snat_pro: Indicates whether Binding IPs of other VPCs feature switch.
        :param pulumi.Input[str] subnet_id: In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this CLB.
        :param pulumi.Input[str] target_region_info_region: Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        :param pulumi.Input[str] target_region_info_vpc_id: Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        :param pulumi.Input[str] vip: Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
        :param pulumi.Input[str] vip_isp: Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
        :param pulumi.Input[str] vpc_id: VPC ID of the CLB.
        :param pulumi.Input[str] zone_id: Available zone id, only applicable to open CLB.
        """
        pulumi.set(__self__, "clb_name", clb_name)
        pulumi.set(__self__, "network_type", network_type)
        if address_ip_version is not None:
            pulumi.set(__self__, "address_ip_version", address_ip_version)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if delete_protect is not None:
            pulumi.set(__self__, "delete_protect", delete_protect)
        if dynamic_vip is not None:
            pulumi.set(__self__, "dynamic_vip", dynamic_vip)
        if internet_bandwidth_max_out is not None:
            pulumi.set(__self__, "internet_bandwidth_max_out", internet_bandwidth_max_out)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if load_balancer_pass_to_target is not None:
            pulumi.set(__self__, "load_balancer_pass_to_target", load_balancer_pass_to_target)
        if log_set_id is not None:
            pulumi.set(__self__, "log_set_id", log_set_id)
        if log_topic_id is not None:
            pulumi.set(__self__, "log_topic_id", log_topic_id)
        if master_zone_id is not None:
            pulumi.set(__self__, "master_zone_id", master_zone_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sla_type is not None:
            pulumi.set(__self__, "sla_type", sla_type)
        if slave_zone_id is not None:
            pulumi.set(__self__, "slave_zone_id", slave_zone_id)
        if snat_ips is not None:
            pulumi.set(__self__, "snat_ips", snat_ips)
        if snat_pro is not None:
            pulumi.set(__self__, "snat_pro", snat_pro)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_region_info_region is not None:
            pulumi.set(__self__, "target_region_info_region", target_region_info_region)
        if target_region_info_vpc_id is not None:
            pulumi.set(__self__, "target_region_info_vpc_id", target_region_info_vpc_id)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vip_isp is not None:
            pulumi.set(__self__, "vip_isp", vip_isp)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="clbName")
    def clb_name(self) -> pulumi.Input[str]:
        """
        Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
        """
        return pulumi.get(self, "clb_name")

    @clb_name.setter
    def clb_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "clb_name", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Input[str]:
        """
        Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="addressIpVersion")
    def address_ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
        """
        return pulumi.get(self, "address_ip_version")

    @address_ip_version.setter
    def address_ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_ip_version", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        Bandwidth package id. If set, the `internet_charge_type` must be `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="deleteProtect")
    def delete_protect(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable delete protection.
        """
        return pulumi.get(self, "delete_protect")

    @delete_protect.setter
    def delete_protect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_protect", value)

    @property
    @pulumi.getter(name="dynamicVip")
    def dynamic_vip(self) -> Optional[pulumi.Input[bool]]:
        """
        If create dynamic vip CLB instance, `true` or `false`.
        """
        return pulumi.get(self, "dynamic_vip")

    @dynamic_vip.setter
    def dynamic_vip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_vip", value)

    @property
    @pulumi.getter(name="internetBandwidthMaxOut")
    def internet_bandwidth_max_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
        """
        return pulumi.get(self, "internet_bandwidth_max_out")

    @internet_bandwidth_max_out.setter
    def internet_bandwidth_max_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_bandwidth_max_out", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="loadBalancerPassToTarget")
    def load_balancer_pass_to_target(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
        """
        return pulumi.get(self, "load_balancer_pass_to_target")

    @load_balancer_pass_to_target.setter
    def load_balancer_pass_to_target(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "load_balancer_pass_to_target", value)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of log set.
        """
        return pulumi.get(self, "log_set_id")

    @log_set_id.setter
    def log_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_set_id", value)

    @property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of log topic.
        """
        return pulumi.get(self, "log_topic_id")

    @log_topic_id.setter
    def log_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_topic_id", value)

    @property
    @pulumi.getter(name="masterZoneId")
    def master_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
        """
        return pulumi.get(self, "master_zone_id")

    @master_zone_id.setter
    def master_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_zone_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the project within the CLB instance, `0` - Default Project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="slaType")
    def sla_type(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
        """
        return pulumi.get(self, "sla_type")

    @sla_type.setter
    def sla_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_type", value)

    @property
    @pulumi.getter(name="slaveZoneId")
    def slave_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
        """
        return pulumi.get(self, "slave_zone_id")

    @slave_zone_id.setter
    def slave_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_zone_id", value)

    @property
    @pulumi.getter(name="snatIps")
    def snat_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSnatIpArgs']]]]:
        """
        Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
        """
        return pulumi.get(self, "snat_ips")

    @snat_ips.setter
    def snat_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSnatIpArgs']]]]):
        pulumi.set(self, "snat_ips", value)

    @property
    @pulumi.getter(name="snatPro")
    def snat_pro(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether Binding IPs of other VPCs feature switch.
        """
        return pulumi.get(self, "snat_pro")

    @snat_pro.setter
    def snat_pro(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snat_pro", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The available tags within this CLB.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetRegionInfoRegion")
    def target_region_info_region(self) -> Optional[pulumi.Input[str]]:
        """
        Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        """
        return pulumi.get(self, "target_region_info_region")

    @target_region_info_region.setter
    def target_region_info_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_region_info_region", value)

    @property
    @pulumi.getter(name="targetRegionInfoVpcId")
    def target_region_info_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        """
        return pulumi.get(self, "target_region_info_vpc_id")

    @target_region_info_vpc_id.setter
    def target_region_info_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_region_info_vpc_id", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter(name="vipIsp")
    def vip_isp(self) -> Optional[pulumi.Input[str]]:
        """
        Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
        """
        return pulumi.get(self, "vip_isp")

    @vip_isp.setter
    def vip_isp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip_isp", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID of the CLB.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Available zone id, only applicable to open CLB.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 address_ip_version: Optional[pulumi.Input[str]] = None,
                 address_ipv6: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 clb_name: Optional[pulumi.Input[str]] = None,
                 clb_vips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 delete_protect: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_vip: Optional[pulumi.Input[bool]] = None,
                 internet_bandwidth_max_out: Optional[pulumi.Input[int]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 ipv6_mode: Optional[pulumi.Input[str]] = None,
                 load_balancer_pass_to_target: Optional[pulumi.Input[bool]] = None,
                 log_set_id: Optional[pulumi.Input[str]] = None,
                 log_topic_id: Optional[pulumi.Input[str]] = None,
                 master_zone_id: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sla_type: Optional[pulumi.Input[str]] = None,
                 slave_zone_id: Optional[pulumi.Input[str]] = None,
                 snat_ips: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSnatIpArgs']]]] = None,
                 snat_pro: Optional[pulumi.Input[bool]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 target_region_info_region: Optional[pulumi.Input[str]] = None,
                 target_region_info_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vip_isp: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] address_ip_version: It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
        :param pulumi.Input[str] address_ipv6: The IPv6 address of the load balancing instance.
        :param pulumi.Input[str] bandwidth_package_id: Bandwidth package id. If set, the `internet_charge_type` must be `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[str] clb_name: Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] clb_vips: The virtual service address table of the CLB.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[bool] delete_protect: Whether to enable delete protection.
        :param pulumi.Input[str] domain: Domain name of the CLB instance.
        :param pulumi.Input[bool] dynamic_vip: If create dynamic vip CLB instance, `true` or `false`.
        :param pulumi.Input[int] internet_bandwidth_max_out: Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
        :param pulumi.Input[str] internet_charge_type: Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[str] ipv6_mode: This field is meaningful when the IP address version is ipv6, `IPv6Nat64` | `IPv6FullChain`.
        :param pulumi.Input[bool] load_balancer_pass_to_target: Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
        :param pulumi.Input[str] log_set_id: The id of log set.
        :param pulumi.Input[str] log_topic_id: The id of log topic.
        :param pulumi.Input[str] master_zone_id: Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
        :param pulumi.Input[str] network_type: Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
        :param pulumi.Input[int] project_id: ID of the project within the CLB instance, `0` - Default Project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
        :param pulumi.Input[str] sla_type: This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
        :param pulumi.Input[str] slave_zone_id: Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceSnatIpArgs']]] snat_ips: Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
        :param pulumi.Input[bool] snat_pro: Indicates whether Binding IPs of other VPCs feature switch.
        :param pulumi.Input[str] subnet_id: In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this CLB.
        :param pulumi.Input[str] target_region_info_region: Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        :param pulumi.Input[str] target_region_info_vpc_id: Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        :param pulumi.Input[str] vip: Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
        :param pulumi.Input[str] vip_isp: Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
        :param pulumi.Input[str] vpc_id: VPC ID of the CLB.
        :param pulumi.Input[str] zone_id: Available zone id, only applicable to open CLB.
        """
        if address_ip_version is not None:
            pulumi.set(__self__, "address_ip_version", address_ip_version)
        if address_ipv6 is not None:
            pulumi.set(__self__, "address_ipv6", address_ipv6)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if clb_name is not None:
            pulumi.set(__self__, "clb_name", clb_name)
        if clb_vips is not None:
            pulumi.set(__self__, "clb_vips", clb_vips)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if delete_protect is not None:
            pulumi.set(__self__, "delete_protect", delete_protect)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_vip is not None:
            pulumi.set(__self__, "dynamic_vip", dynamic_vip)
        if internet_bandwidth_max_out is not None:
            pulumi.set(__self__, "internet_bandwidth_max_out", internet_bandwidth_max_out)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if ipv6_mode is not None:
            pulumi.set(__self__, "ipv6_mode", ipv6_mode)
        if load_balancer_pass_to_target is not None:
            pulumi.set(__self__, "load_balancer_pass_to_target", load_balancer_pass_to_target)
        if log_set_id is not None:
            pulumi.set(__self__, "log_set_id", log_set_id)
        if log_topic_id is not None:
            pulumi.set(__self__, "log_topic_id", log_topic_id)
        if master_zone_id is not None:
            pulumi.set(__self__, "master_zone_id", master_zone_id)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sla_type is not None:
            pulumi.set(__self__, "sla_type", sla_type)
        if slave_zone_id is not None:
            pulumi.set(__self__, "slave_zone_id", slave_zone_id)
        if snat_ips is not None:
            pulumi.set(__self__, "snat_ips", snat_ips)
        if snat_pro is not None:
            pulumi.set(__self__, "snat_pro", snat_pro)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_region_info_region is not None:
            pulumi.set(__self__, "target_region_info_region", target_region_info_region)
        if target_region_info_vpc_id is not None:
            pulumi.set(__self__, "target_region_info_vpc_id", target_region_info_vpc_id)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vip_isp is not None:
            pulumi.set(__self__, "vip_isp", vip_isp)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="addressIpVersion")
    def address_ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
        """
        return pulumi.get(self, "address_ip_version")

    @address_ip_version.setter
    def address_ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_ip_version", value)

    @property
    @pulumi.getter(name="addressIpv6")
    def address_ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        The IPv6 address of the load balancing instance.
        """
        return pulumi.get(self, "address_ipv6")

    @address_ipv6.setter
    def address_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_ipv6", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        """
        Bandwidth package id. If set, the `internet_charge_type` must be `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="clbName")
    def clb_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
        """
        return pulumi.get(self, "clb_name")

    @clb_name.setter
    def clb_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clb_name", value)

    @property
    @pulumi.getter(name="clbVips")
    def clb_vips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The virtual service address table of the CLB.
        """
        return pulumi.get(self, "clb_vips")

    @clb_vips.setter
    def clb_vips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "clb_vips", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="deleteProtect")
    def delete_protect(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable delete protection.
        """
        return pulumi.get(self, "delete_protect")

    @delete_protect.setter
    def delete_protect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_protect", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of the CLB instance.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicVip")
    def dynamic_vip(self) -> Optional[pulumi.Input[bool]]:
        """
        If create dynamic vip CLB instance, `true` or `false`.
        """
        return pulumi.get(self, "dynamic_vip")

    @dynamic_vip.setter
    def dynamic_vip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic_vip", value)

    @property
    @pulumi.getter(name="internetBandwidthMaxOut")
    def internet_bandwidth_max_out(self) -> Optional[pulumi.Input[int]]:
        """
        Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
        """
        return pulumi.get(self, "internet_bandwidth_max_out")

    @internet_bandwidth_max_out.setter
    def internet_bandwidth_max_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_bandwidth_max_out", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="ipv6Mode")
    def ipv6_mode(self) -> Optional[pulumi.Input[str]]:
        """
        This field is meaningful when the IP address version is ipv6, `IPv6Nat64` | `IPv6FullChain`.
        """
        return pulumi.get(self, "ipv6_mode")

    @ipv6_mode.setter
    def ipv6_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_mode", value)

    @property
    @pulumi.getter(name="loadBalancerPassToTarget")
    def load_balancer_pass_to_target(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
        """
        return pulumi.get(self, "load_balancer_pass_to_target")

    @load_balancer_pass_to_target.setter
    def load_balancer_pass_to_target(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "load_balancer_pass_to_target", value)

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of log set.
        """
        return pulumi.get(self, "log_set_id")

    @log_set_id.setter
    def log_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_set_id", value)

    @property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of log topic.
        """
        return pulumi.get(self, "log_topic_id")

    @log_topic_id.setter
    def log_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_topic_id", value)

    @property
    @pulumi.getter(name="masterZoneId")
    def master_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
        """
        return pulumi.get(self, "master_zone_id")

    @master_zone_id.setter
    def master_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_zone_id", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the project within the CLB instance, `0` - Default Project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="slaType")
    def sla_type(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
        """
        return pulumi.get(self, "sla_type")

    @sla_type.setter
    def sla_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_type", value)

    @property
    @pulumi.getter(name="slaveZoneId")
    def slave_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
        """
        return pulumi.get(self, "slave_zone_id")

    @slave_zone_id.setter
    def slave_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_zone_id", value)

    @property
    @pulumi.getter(name="snatIps")
    def snat_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSnatIpArgs']]]]:
        """
        Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
        """
        return pulumi.get(self, "snat_ips")

    @snat_ips.setter
    def snat_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSnatIpArgs']]]]):
        pulumi.set(self, "snat_ips", value)

    @property
    @pulumi.getter(name="snatPro")
    def snat_pro(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether Binding IPs of other VPCs feature switch.
        """
        return pulumi.get(self, "snat_pro")

    @snat_pro.setter
    def snat_pro(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snat_pro", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The available tags within this CLB.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetRegionInfoRegion")
    def target_region_info_region(self) -> Optional[pulumi.Input[str]]:
        """
        Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        """
        return pulumi.get(self, "target_region_info_region")

    @target_region_info_region.setter
    def target_region_info_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_region_info_region", value)

    @property
    @pulumi.getter(name="targetRegionInfoVpcId")
    def target_region_info_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        """
        return pulumi.get(self, "target_region_info_vpc_id")

    @target_region_info_vpc_id.setter
    def target_region_info_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_region_info_vpc_id", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter(name="vipIsp")
    def vip_isp(self) -> Optional[pulumi.Input[str]]:
        """
        Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
        """
        return pulumi.get(self, "vip_isp")

    @vip_isp.setter
    def vip_isp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip_isp", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID of the CLB.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Available zone id, only applicable to open CLB.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_ip_version: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 clb_name: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 delete_protect: Optional[pulumi.Input[bool]] = None,
                 dynamic_vip: Optional[pulumi.Input[bool]] = None,
                 internet_bandwidth_max_out: Optional[pulumi.Input[int]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 load_balancer_pass_to_target: Optional[pulumi.Input[bool]] = None,
                 log_set_id: Optional[pulumi.Input[str]] = None,
                 log_topic_id: Optional[pulumi.Input[str]] = None,
                 master_zone_id: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sla_type: Optional[pulumi.Input[str]] = None,
                 slave_zone_id: Optional[pulumi.Input[str]] = None,
                 snat_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceSnatIpArgs']]]]] = None,
                 snat_pro: Optional[pulumi.Input[bool]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 target_region_info_region: Optional[pulumi.Input[str]] = None,
                 target_region_info_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vip_isp: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a CLB instance.

        ## Example Usage

        ### Create INTERNAL CLB

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24",
            is_multicast=False)
        # create clb
        example = tencentcloud.clb.Instance("example",
            network_type="INTERNAL",
            clb_name="tf-example",
            project_id=0,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create dedicated cluster clb

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24",
            cdc_id="cluster-lchwgxhs",
            is_multicast=False)
        # create clb
        example = tencentcloud.clb.Instance("example",
            network_type="INTERNAL",
            clb_name="tf-example",
            project_id=0,
            cluster_id="cluster-lchwgxhs",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create LCU-supported CLB

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24",
            is_multicast=False)
        # create clb
        example = tencentcloud.clb.Instance("example",
            network_type="INTERNAL",
            clb_name="tf-example",
            project_id=0,
            sla_type="clb.c3.medium",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create OPEN CLB

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            vpc_id=vpc.id,
            security_groups=[example_group.id],
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Support CORS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        zone = config.get("zone")
        if zone is None:
            zone = "ap-guangzhou"
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            vpc_id=vpc.id,
            security_groups=[example_group.id],
            target_region_info_region=zone,
            target_region_info_vpc_id=vpc.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Open CLB with VipIsp

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc bandwidth package
        example_bandwidth_package = tencentcloud.vpc.BandwidthPackage("exampleBandwidthPackage",
            network_type="SINGLEISP_CMCC",
            charge_type="ENHANCED95_POSTPAID_BY_MONTH",
            bandwidth_package_name="tf-example",
            internet_max_bandwidth=300,
            egress="center_egress1",
            tags={
                "createdBy": "terraform",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            vip_isp="CMCC",
            internet_charge_type="BANDWIDTH_PACKAGE",
            bandwidth_package_id=example_bandwidth_package.id,
            vpc_id=vpc.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Dynamic Vip Instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        zone = config.get("zone")
        if zone is None:
            zone = "ap-guangzhou"
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            vpc_id=vpc.id,
            target_region_info_region=zone,
            target_region_info_vpc_id=vpc.id,
            security_groups=[example_group.id],
            dynamic_vip=True,
            tags={
                "tagKey": "tagValue",
            })
        pulumi.export("domain", example_instance.domain)
        ```
        <!--End PulumiCodeChooser -->

        ### Specified Vip Instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            vpc_id=vpc.id,
            security_groups=[example_group.id],
            vip="111.230.4.204",
            tags={
                "tagKey": "tagValue",
            })
        pulumi.export("domain", example_instance.domain)
        ```
        <!--End PulumiCodeChooser -->

        ### Default enable

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        zone = config.get("zone")
        if zone is None:
            zone = "ap-guangzhou"
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            load_balancer_pass_to_target=True,
            vpc_id=vpc.id,
            security_groups=[example_group.id],
            target_region_info_vpc_id=vpc.id,
            target_region_info_region=zone,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create multiple instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        example = tencentcloud.clb.Instance("example",
            network_type="OPEN",
            clb_name="tf-example",
            master_zone_id=availability_zone)
        ```
        <!--End PulumiCodeChooser -->

        ### Create instance with log

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=var["availability_zone"],
            cidr_block="10.0.1.0/24",
            is_multicast=False)
        # create route table
        route = tencentcloud.route.Table("route", vpc_id=vpc.id)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        log = tencentcloud.clb.LogSet("log", period=7)
        # create topic
        topic = tencentcloud.clb.LogTopic("topic",
            log_set_id=log.id,
            topic_name="clb-topic")
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="INTERNAL",
            clb_name="tf-example",
            project_id=0,
            load_balancer_pass_to_target=True,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            security_groups=[example_group.id],
            log_set_id=log.id,
            log_topic_id=topic.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLB instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/instance:Instance example lb-7a0t6zqb
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address_ip_version: It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
        :param pulumi.Input[str] bandwidth_package_id: Bandwidth package id. If set, the `internet_charge_type` must be `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[str] clb_name: Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[bool] delete_protect: Whether to enable delete protection.
        :param pulumi.Input[bool] dynamic_vip: If create dynamic vip CLB instance, `true` or `false`.
        :param pulumi.Input[int] internet_bandwidth_max_out: Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
        :param pulumi.Input[str] internet_charge_type: Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[bool] load_balancer_pass_to_target: Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
        :param pulumi.Input[str] log_set_id: The id of log set.
        :param pulumi.Input[str] log_topic_id: The id of log topic.
        :param pulumi.Input[str] master_zone_id: Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
        :param pulumi.Input[str] network_type: Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
        :param pulumi.Input[int] project_id: ID of the project within the CLB instance, `0` - Default Project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
        :param pulumi.Input[str] sla_type: This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
        :param pulumi.Input[str] slave_zone_id: Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceSnatIpArgs']]]] snat_ips: Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
        :param pulumi.Input[bool] snat_pro: Indicates whether Binding IPs of other VPCs feature switch.
        :param pulumi.Input[str] subnet_id: In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this CLB.
        :param pulumi.Input[str] target_region_info_region: Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        :param pulumi.Input[str] target_region_info_vpc_id: Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        :param pulumi.Input[str] vip: Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
        :param pulumi.Input[str] vip_isp: Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
        :param pulumi.Input[str] vpc_id: VPC ID of the CLB.
        :param pulumi.Input[str] zone_id: Available zone id, only applicable to open CLB.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a CLB instance.

        ## Example Usage

        ### Create INTERNAL CLB

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24",
            is_multicast=False)
        # create clb
        example = tencentcloud.clb.Instance("example",
            network_type="INTERNAL",
            clb_name="tf-example",
            project_id=0,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create dedicated cluster clb

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24",
            cdc_id="cluster-lchwgxhs",
            is_multicast=False)
        # create clb
        example = tencentcloud.clb.Instance("example",
            network_type="INTERNAL",
            clb_name="tf-example",
            project_id=0,
            cluster_id="cluster-lchwgxhs",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create LCU-supported CLB

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24",
            is_multicast=False)
        # create clb
        example = tencentcloud.clb.Instance("example",
            network_type="INTERNAL",
            clb_name="tf-example",
            project_id=0,
            sla_type="clb.c3.medium",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create OPEN CLB

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            vpc_id=vpc.id,
            security_groups=[example_group.id],
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Support CORS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        zone = config.get("zone")
        if zone is None:
            zone = "ap-guangzhou"
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            vpc_id=vpc.id,
            security_groups=[example_group.id],
            target_region_info_region=zone,
            target_region_info_vpc_id=vpc.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Open CLB with VipIsp

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create vpc bandwidth package
        example_bandwidth_package = tencentcloud.vpc.BandwidthPackage("exampleBandwidthPackage",
            network_type="SINGLEISP_CMCC",
            charge_type="ENHANCED95_POSTPAID_BY_MONTH",
            bandwidth_package_name="tf-example",
            internet_max_bandwidth=300,
            egress="center_egress1",
            tags={
                "createdBy": "terraform",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            vip_isp="CMCC",
            internet_charge_type="BANDWIDTH_PACKAGE",
            bandwidth_package_id=example_bandwidth_package.id,
            vpc_id=vpc.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Dynamic Vip Instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        zone = config.get("zone")
        if zone is None:
            zone = "ap-guangzhou"
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            vpc_id=vpc.id,
            target_region_info_region=zone,
            target_region_info_vpc_id=vpc.id,
            security_groups=[example_group.id],
            dynamic_vip=True,
            tags={
                "tagKey": "tagValue",
            })
        pulumi.export("domain", example_instance.domain)
        ```
        <!--End PulumiCodeChooser -->

        ### Specified Vip Instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            vpc_id=vpc.id,
            security_groups=[example_group.id],
            vip="111.230.4.204",
            tags={
                "tagKey": "tagValue",
            })
        pulumi.export("domain", example_instance.domain)
        ```
        <!--End PulumiCodeChooser -->

        ### Default enable

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        zone = config.get("zone")
        if zone is None:
            zone = "ap-guangzhou"
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24",
            is_multicast=False)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="OPEN",
            clb_name="tf-example",
            project_id=0,
            load_balancer_pass_to_target=True,
            vpc_id=vpc.id,
            security_groups=[example_group.id],
            target_region_info_vpc_id=vpc.id,
            target_region_info_region=zone,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create multiple instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        example = tencentcloud.clb.Instance("example",
            network_type="OPEN",
            clb_name="tf-example",
            master_zone_id=availability_zone)
        ```
        <!--End PulumiCodeChooser -->

        ### Create instance with log

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        # create vpc
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        # create subnet
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=var["availability_zone"],
            cidr_block="10.0.1.0/24",
            is_multicast=False)
        # create route table
        route = tencentcloud.route.Table("route", vpc_id=vpc.id)
        # create security group
        example_group = tencentcloud.security.Group("exampleGroup",
            description="sg desc.",
            project_id=0,
            tags={
                "example": "test",
            })
        log = tencentcloud.clb.LogSet("log", period=7)
        # create topic
        topic = tencentcloud.clb.LogTopic("topic",
            log_set_id=log.id,
            topic_name="clb-topic")
        # create clb
        example_instance = tencentcloud.clb.Instance("exampleInstance",
            network_type="INTERNAL",
            clb_name="tf-example",
            project_id=0,
            load_balancer_pass_to_target=True,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            security_groups=[example_group.id],
            log_set_id=log.id,
            log_topic_id=topic.id,
            tags={
                "tagKey": "tagValue",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLB instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/instance:Instance example lb-7a0t6zqb
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_ip_version: Optional[pulumi.Input[str]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 clb_name: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 delete_protect: Optional[pulumi.Input[bool]] = None,
                 dynamic_vip: Optional[pulumi.Input[bool]] = None,
                 internet_bandwidth_max_out: Optional[pulumi.Input[int]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 load_balancer_pass_to_target: Optional[pulumi.Input[bool]] = None,
                 log_set_id: Optional[pulumi.Input[str]] = None,
                 log_topic_id: Optional[pulumi.Input[str]] = None,
                 master_zone_id: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sla_type: Optional[pulumi.Input[str]] = None,
                 slave_zone_id: Optional[pulumi.Input[str]] = None,
                 snat_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceSnatIpArgs']]]]] = None,
                 snat_pro: Optional[pulumi.Input[bool]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 target_region_info_region: Optional[pulumi.Input[str]] = None,
                 target_region_info_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vip_isp: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["address_ip_version"] = address_ip_version
            __props__.__dict__["bandwidth_package_id"] = bandwidth_package_id
            if clb_name is None and not opts.urn:
                raise TypeError("Missing required property 'clb_name'")
            __props__.__dict__["clb_name"] = clb_name
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["delete_protect"] = delete_protect
            __props__.__dict__["dynamic_vip"] = dynamic_vip
            __props__.__dict__["internet_bandwidth_max_out"] = internet_bandwidth_max_out
            __props__.__dict__["internet_charge_type"] = internet_charge_type
            __props__.__dict__["load_balancer_pass_to_target"] = load_balancer_pass_to_target
            __props__.__dict__["log_set_id"] = log_set_id
            __props__.__dict__["log_topic_id"] = log_topic_id
            __props__.__dict__["master_zone_id"] = master_zone_id
            if network_type is None and not opts.urn:
                raise TypeError("Missing required property 'network_type'")
            __props__.__dict__["network_type"] = network_type
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["sla_type"] = sla_type
            __props__.__dict__["slave_zone_id"] = slave_zone_id
            __props__.__dict__["snat_ips"] = snat_ips
            __props__.__dict__["snat_pro"] = snat_pro
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["target_region_info_region"] = target_region_info_region
            __props__.__dict__["target_region_info_vpc_id"] = target_region_info_vpc_id
            __props__.__dict__["vip"] = vip
            __props__.__dict__["vip_isp"] = vip_isp
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["address_ipv6"] = None
            __props__.__dict__["clb_vips"] = None
            __props__.__dict__["domain"] = None
            __props__.__dict__["ipv6_mode"] = None
        super(Instance, __self__).__init__(
            'tencentcloud:Clb/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_ip_version: Optional[pulumi.Input[str]] = None,
            address_ipv6: Optional[pulumi.Input[str]] = None,
            bandwidth_package_id: Optional[pulumi.Input[str]] = None,
            clb_name: Optional[pulumi.Input[str]] = None,
            clb_vips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            delete_protect: Optional[pulumi.Input[bool]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dynamic_vip: Optional[pulumi.Input[bool]] = None,
            internet_bandwidth_max_out: Optional[pulumi.Input[int]] = None,
            internet_charge_type: Optional[pulumi.Input[str]] = None,
            ipv6_mode: Optional[pulumi.Input[str]] = None,
            load_balancer_pass_to_target: Optional[pulumi.Input[bool]] = None,
            log_set_id: Optional[pulumi.Input[str]] = None,
            log_topic_id: Optional[pulumi.Input[str]] = None,
            master_zone_id: Optional[pulumi.Input[str]] = None,
            network_type: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            sla_type: Optional[pulumi.Input[str]] = None,
            slave_zone_id: Optional[pulumi.Input[str]] = None,
            snat_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceSnatIpArgs']]]]] = None,
            snat_pro: Optional[pulumi.Input[bool]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            target_region_info_region: Optional[pulumi.Input[str]] = None,
            target_region_info_vpc_id: Optional[pulumi.Input[str]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            vip_isp: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address_ip_version: It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
        :param pulumi.Input[str] address_ipv6: The IPv6 address of the load balancing instance.
        :param pulumi.Input[str] bandwidth_package_id: Bandwidth package id. If set, the `internet_charge_type` must be `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[str] clb_name: Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] clb_vips: The virtual service address table of the CLB.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[bool] delete_protect: Whether to enable delete protection.
        :param pulumi.Input[str] domain: Domain name of the CLB instance.
        :param pulumi.Input[bool] dynamic_vip: If create dynamic vip CLB instance, `true` or `false`.
        :param pulumi.Input[int] internet_bandwidth_max_out: Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
        :param pulumi.Input[str] internet_charge_type: Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        :param pulumi.Input[str] ipv6_mode: This field is meaningful when the IP address version is ipv6, `IPv6Nat64` | `IPv6FullChain`.
        :param pulumi.Input[bool] load_balancer_pass_to_target: Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
        :param pulumi.Input[str] log_set_id: The id of log set.
        :param pulumi.Input[str] log_topic_id: The id of log topic.
        :param pulumi.Input[str] master_zone_id: Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
        :param pulumi.Input[str] network_type: Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
        :param pulumi.Input[int] project_id: ID of the project within the CLB instance, `0` - Default Project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
        :param pulumi.Input[str] sla_type: This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
        :param pulumi.Input[str] slave_zone_id: Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceSnatIpArgs']]]] snat_ips: Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
        :param pulumi.Input[bool] snat_pro: Indicates whether Binding IPs of other VPCs feature switch.
        :param pulumi.Input[str] subnet_id: In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: The available tags within this CLB.
        :param pulumi.Input[str] target_region_info_region: Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        :param pulumi.Input[str] target_region_info_vpc_id: Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        :param pulumi.Input[str] vip: Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
        :param pulumi.Input[str] vip_isp: Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
        :param pulumi.Input[str] vpc_id: VPC ID of the CLB.
        :param pulumi.Input[str] zone_id: Available zone id, only applicable to open CLB.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["address_ip_version"] = address_ip_version
        __props__.__dict__["address_ipv6"] = address_ipv6
        __props__.__dict__["bandwidth_package_id"] = bandwidth_package_id
        __props__.__dict__["clb_name"] = clb_name
        __props__.__dict__["clb_vips"] = clb_vips
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["delete_protect"] = delete_protect
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dynamic_vip"] = dynamic_vip
        __props__.__dict__["internet_bandwidth_max_out"] = internet_bandwidth_max_out
        __props__.__dict__["internet_charge_type"] = internet_charge_type
        __props__.__dict__["ipv6_mode"] = ipv6_mode
        __props__.__dict__["load_balancer_pass_to_target"] = load_balancer_pass_to_target
        __props__.__dict__["log_set_id"] = log_set_id
        __props__.__dict__["log_topic_id"] = log_topic_id
        __props__.__dict__["master_zone_id"] = master_zone_id
        __props__.__dict__["network_type"] = network_type
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["sla_type"] = sla_type
        __props__.__dict__["slave_zone_id"] = slave_zone_id
        __props__.__dict__["snat_ips"] = snat_ips
        __props__.__dict__["snat_pro"] = snat_pro
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["target_region_info_region"] = target_region_info_region
        __props__.__dict__["target_region_info_vpc_id"] = target_region_info_vpc_id
        __props__.__dict__["vip"] = vip
        __props__.__dict__["vip_isp"] = vip_isp
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone_id"] = zone_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressIpVersion")
    def address_ip_version(self) -> pulumi.Output[str]:
        """
        It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
        """
        return pulumi.get(self, "address_ip_version")

    @property
    @pulumi.getter(name="addressIpv6")
    def address_ipv6(self) -> pulumi.Output[str]:
        """
        The IPv6 address of the load balancing instance.
        """
        return pulumi.get(self, "address_ipv6")

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> pulumi.Output[Optional[str]]:
        """
        Bandwidth package id. If set, the `internet_charge_type` must be `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "bandwidth_package_id")

    @property
    @pulumi.getter(name="clbName")
    def clb_name(self) -> pulumi.Output[str]:
        """
        Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
        """
        return pulumi.get(self, "clb_name")

    @property
    @pulumi.getter(name="clbVips")
    def clb_vips(self) -> pulumi.Output[Sequence[str]]:
        """
        The virtual service address table of the CLB.
        """
        return pulumi.get(self, "clb_vips")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="deleteProtect")
    def delete_protect(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable delete protection.
        """
        return pulumi.get(self, "delete_protect")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name of the CLB instance.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="dynamicVip")
    def dynamic_vip(self) -> pulumi.Output[Optional[bool]]:
        """
        If create dynamic vip CLB instance, `true` or `false`.
        """
        return pulumi.get(self, "dynamic_vip")

    @property
    @pulumi.getter(name="internetBandwidthMaxOut")
    def internet_bandwidth_max_out(self) -> pulumi.Output[int]:
        """
        Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
        """
        return pulumi.get(self, "internet_bandwidth_max_out")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> pulumi.Output[str]:
        """
        Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
        """
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="ipv6Mode")
    def ipv6_mode(self) -> pulumi.Output[str]:
        """
        This field is meaningful when the IP address version is ipv6, `IPv6Nat64` | `IPv6FullChain`.
        """
        return pulumi.get(self, "ipv6_mode")

    @property
    @pulumi.getter(name="loadBalancerPassToTarget")
    def load_balancer_pass_to_target(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
        """
        return pulumi.get(self, "load_balancer_pass_to_target")

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> pulumi.Output[Optional[str]]:
        """
        The id of log set.
        """
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> pulumi.Output[Optional[str]]:
        """
        The id of log topic.
        """
        return pulumi.get(self, "log_topic_id")

    @property
    @pulumi.getter(name="masterZoneId")
    def master_zone_id(self) -> pulumi.Output[str]:
        """
        Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
        """
        return pulumi.get(self, "master_zone_id")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[str]:
        """
        Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the project within the CLB instance, `0` - Default Project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="slaType")
    def sla_type(self) -> pulumi.Output[str]:
        """
        This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
        """
        return pulumi.get(self, "sla_type")

    @property
    @pulumi.getter(name="slaveZoneId")
    def slave_zone_id(self) -> pulumi.Output[str]:
        """
        Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
        """
        return pulumi.get(self, "slave_zone_id")

    @property
    @pulumi.getter(name="snatIps")
    def snat_ips(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceSnatIp']]]:
        """
        Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
        """
        return pulumi.get(self, "snat_ips")

    @property
    @pulumi.getter(name="snatPro")
    def snat_pro(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether Binding IPs of other VPCs feature switch.
        """
        return pulumi.get(self, "snat_pro")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The available tags within this CLB.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetRegionInfoRegion")
    def target_region_info_region(self) -> pulumi.Output[str]:
        """
        Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        """
        return pulumi.get(self, "target_region_info_region")

    @property
    @pulumi.getter(name="targetRegionInfoVpcId")
    def target_region_info_vpc_id(self) -> pulumi.Output[str]:
        """
        Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
        """
        return pulumi.get(self, "target_region_info_vpc_id")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vipIsp")
    def vip_isp(self) -> pulumi.Output[str]:
        """
        Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
        """
        return pulumi.get(self, "vip_isp")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        VPC ID of the CLB.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Available zone id, only applicable to open CLB.
        """
        return pulumi.get(self, "zone_id")

