# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ListenerArgs', 'Listener']

@pulumi.input_type
class ListenerArgs:
    def __init__(__self__, *,
                 clb_id: pulumi.Input[str],
                 listener_name: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 certificate_ca_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_ssl_mode: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 h2c_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_context_type: Optional[pulumi.Input[str]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_http_code: Optional[pulumi.Input[int]] = None,
                 health_check_http_domain: Optional[pulumi.Input[str]] = None,
                 health_check_http_method: Optional[pulumi.Input[str]] = None,
                 health_check_http_path: Optional[pulumi.Input[str]] = None,
                 health_check_http_version: Optional[pulumi.Input[str]] = None,
                 health_check_interval_time: Optional[pulumi.Input[int]] = None,
                 health_check_port: Optional[pulumi.Input[int]] = None,
                 health_check_recv_context: Optional[pulumi.Input[str]] = None,
                 health_check_send_context: Optional[pulumi.Input[str]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_time_out: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 health_source_ip_type: Optional[pulumi.Input[int]] = None,
                 keepalive_enable: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheduler: Optional[pulumi.Input[str]] = None,
                 session_expire_time: Optional[pulumi.Input[int]] = None,
                 session_type: Optional[pulumi.Input[str]] = None,
                 sni_switch: Optional[pulumi.Input[bool]] = None,
                 target_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Listener resource.
        :param pulumi.Input[str] clb_id: ID of the CLB.
        :param pulumi.Input[str] listener_name: Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
        :param pulumi.Input[str] protocol: Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
        :param pulumi.Input[str] certificate_ca_id: ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
        :param pulumi.Input[str] certificate_id: ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        :param pulumi.Input[str] certificate_ssl_mode: Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        :param pulumi.Input[int] end_port: This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
        :param pulumi.Input[bool] h2c_switch: Enable H2C switch for intranet HTTP listener.
        :param pulumi.Input[str] health_check_context_type: Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        :param pulumi.Input[int] health_check_http_code: HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
        :param pulumi.Input[str] health_check_http_domain: HTTP health check domain of TCP listener.
        :param pulumi.Input[str] health_check_http_method: HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
        :param pulumi.Input[str] health_check_http_path: HTTP health check path of TCP listener.
        :param pulumi.Input[str] health_check_http_version: The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
        :param pulumi.Input[int] health_check_interval_time: Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_check_port: The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
        :param pulumi.Input[str] health_check_recv_context: It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        :param pulumi.Input[str] health_check_send_context: It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled.
        :param pulumi.Input[int] health_check_time_out: Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
        :param pulumi.Input[str] health_check_type: Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_source_ip_type: Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
        :param pulumi.Input[int] keepalive_enable: Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
        :param pulumi.Input[int] port: Port of the CLB listener.
        :param pulumi.Input[str] scheduler: Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] session_expire_time: Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[str] session_type: Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
        :param pulumi.Input[bool] sni_switch: Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `Clb.ListenerRule`, otherwise all rules have a certificate.
        :param pulumi.Input[str] target_type: Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        """
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "protocol", protocol)
        if certificate_ca_id is not None:
            pulumi.set(__self__, "certificate_ca_id", certificate_ca_id)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_ssl_mode is not None:
            pulumi.set(__self__, "certificate_ssl_mode", certificate_ssl_mode)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if h2c_switch is not None:
            pulumi.set(__self__, "h2c_switch", h2c_switch)
        if health_check_context_type is not None:
            pulumi.set(__self__, "health_check_context_type", health_check_context_type)
        if health_check_health_num is not None:
            pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        if health_check_http_code is not None:
            pulumi.set(__self__, "health_check_http_code", health_check_http_code)
        if health_check_http_domain is not None:
            pulumi.set(__self__, "health_check_http_domain", health_check_http_domain)
        if health_check_http_method is not None:
            pulumi.set(__self__, "health_check_http_method", health_check_http_method)
        if health_check_http_path is not None:
            pulumi.set(__self__, "health_check_http_path", health_check_http_path)
        if health_check_http_version is not None:
            pulumi.set(__self__, "health_check_http_version", health_check_http_version)
        if health_check_interval_time is not None:
            pulumi.set(__self__, "health_check_interval_time", health_check_interval_time)
        if health_check_port is not None:
            pulumi.set(__self__, "health_check_port", health_check_port)
        if health_check_recv_context is not None:
            pulumi.set(__self__, "health_check_recv_context", health_check_recv_context)
        if health_check_send_context is not None:
            pulumi.set(__self__, "health_check_send_context", health_check_send_context)
        if health_check_switch is not None:
            pulumi.set(__self__, "health_check_switch", health_check_switch)
        if health_check_time_out is not None:
            pulumi.set(__self__, "health_check_time_out", health_check_time_out)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if health_check_unhealth_num is not None:
            pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        if health_source_ip_type is not None:
            pulumi.set(__self__, "health_source_ip_type", health_source_ip_type)
        if keepalive_enable is not None:
            pulumi.set(__self__, "keepalive_enable", keepalive_enable)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if session_expire_time is not None:
            pulumi.set(__self__, "session_expire_time", session_expire_time)
        if session_type is not None:
            pulumi.set(__self__, "session_type", session_type)
        if sni_switch is not None:
            pulumi.set(__self__, "sni_switch", sni_switch)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> pulumi.Input[str]:
        """
        ID of the CLB.
        """
        return pulumi.get(self, "clb_id")

    @clb_id.setter
    def clb_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "clb_id", value)

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> pulumi.Input[str]:
        """
        Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
        """
        return pulumi.get(self, "listener_name")

    @listener_name.setter
    def listener_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_name", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="certificateCaId")
    def certificate_ca_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
        """
        return pulumi.get(self, "certificate_ca_id")

    @certificate_ca_id.setter
    def certificate_ca_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ca_id", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateSslMode")
    def certificate_ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        """
        return pulumi.get(self, "certificate_ssl_mode")

    @certificate_ssl_mode.setter
    def certificate_ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ssl_mode", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="h2cSwitch")
    def h2c_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable H2C switch for intranet HTTP listener.
        """
        return pulumi.get(self, "h2c_switch")

    @h2c_switch.setter
    def h2c_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "h2c_switch", value)

    @property
    @pulumi.getter(name="healthCheckContextType")
    def health_check_context_type(self) -> Optional[pulumi.Input[str]]:
        """
        Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
        """
        return pulumi.get(self, "health_check_context_type")

    @health_check_context_type.setter
    def health_check_context_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_context_type", value)

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> Optional[pulumi.Input[int]]:
        """
        Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        """
        return pulumi.get(self, "health_check_health_num")

    @health_check_health_num.setter
    def health_check_health_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_health_num", value)

    @property
    @pulumi.getter(name="healthCheckHttpCode")
    def health_check_http_code(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
        """
        return pulumi.get(self, "health_check_http_code")

    @health_check_http_code.setter
    def health_check_http_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_http_code", value)

    @property
    @pulumi.getter(name="healthCheckHttpDomain")
    def health_check_http_domain(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP health check domain of TCP listener.
        """
        return pulumi.get(self, "health_check_http_domain")

    @health_check_http_domain.setter
    def health_check_http_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_domain", value)

    @property
    @pulumi.getter(name="healthCheckHttpMethod")
    def health_check_http_method(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
        """
        return pulumi.get(self, "health_check_http_method")

    @health_check_http_method.setter
    def health_check_http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_method", value)

    @property
    @pulumi.getter(name="healthCheckHttpPath")
    def health_check_http_path(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP health check path of TCP listener.
        """
        return pulumi.get(self, "health_check_http_path")

    @health_check_http_path.setter
    def health_check_http_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_path", value)

    @property
    @pulumi.getter(name="healthCheckHttpVersion")
    def health_check_http_version(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
        """
        return pulumi.get(self, "health_check_http_version")

    @health_check_http_version.setter
    def health_check_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_version", value)

    @property
    @pulumi.getter(name="healthCheckIntervalTime")
    def health_check_interval_time(self) -> Optional[pulumi.Input[int]]:
        """
        Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_interval_time")

    @health_check_interval_time.setter
    def health_check_interval_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval_time", value)

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[pulumi.Input[int]]:
        """
        The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
        """
        return pulumi.get(self, "health_check_port")

    @health_check_port.setter
    def health_check_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_port", value)

    @property
    @pulumi.getter(name="healthCheckRecvContext")
    def health_check_recv_context(self) -> Optional[pulumi.Input[str]]:
        """
        It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        """
        return pulumi.get(self, "health_check_recv_context")

    @health_check_recv_context.setter
    def health_check_recv_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_recv_context", value)

    @property
    @pulumi.getter(name="healthCheckSendContext")
    def health_check_send_context(self) -> Optional[pulumi.Input[str]]:
        """
        It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        """
        return pulumi.get(self, "health_check_send_context")

    @health_check_send_context.setter
    def health_check_send_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_send_context", value)

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether health check is enabled.
        """
        return pulumi.get(self, "health_check_switch")

    @health_check_switch.setter
    def health_check_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_check_switch", value)

    @property
    @pulumi.getter(name="healthCheckTimeOut")
    def health_check_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
        """
        return pulumi.get(self, "health_check_time_out")

    @health_check_time_out.setter
    def health_check_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_time_out", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> Optional[pulumi.Input[int]]:
        """
        Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @health_check_unhealth_num.setter
    def health_check_unhealth_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_unhealth_num", value)

    @property
    @pulumi.getter(name="healthSourceIpType")
    def health_source_ip_type(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
        """
        return pulumi.get(self, "health_source_ip_type")

    @health_source_ip_type.setter
    def health_source_ip_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_source_ip_type", value)

    @property
    @pulumi.getter(name="keepaliveEnable")
    def keepalive_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
        """
        return pulumi.get(self, "keepalive_enable")

    @keepalive_enable.setter
    def keepalive_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_enable", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the CLB listener.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler", value)

    @property
    @pulumi.getter(name="sessionExpireTime")
    def session_expire_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "session_expire_time")

    @session_expire_time.setter
    def session_expire_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_expire_time", value)

    @property
    @pulumi.getter(name="sessionType")
    def session_type(self) -> Optional[pulumi.Input[str]]:
        """
        Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
        """
        return pulumi.get(self, "session_type")

    @session_type.setter
    def session_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_type", value)

    @property
    @pulumi.getter(name="sniSwitch")
    def sni_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `Clb.ListenerRule`, otherwise all rules have a certificate.
        """
        return pulumi.get(self, "sni_switch")

    @sni_switch.setter
    def sni_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sni_switch", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)


@pulumi.input_type
class _ListenerState:
    def __init__(__self__, *,
                 certificate_ca_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_ssl_mode: Optional[pulumi.Input[str]] = None,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 h2c_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_context_type: Optional[pulumi.Input[str]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_http_code: Optional[pulumi.Input[int]] = None,
                 health_check_http_domain: Optional[pulumi.Input[str]] = None,
                 health_check_http_method: Optional[pulumi.Input[str]] = None,
                 health_check_http_path: Optional[pulumi.Input[str]] = None,
                 health_check_http_version: Optional[pulumi.Input[str]] = None,
                 health_check_interval_time: Optional[pulumi.Input[int]] = None,
                 health_check_port: Optional[pulumi.Input[int]] = None,
                 health_check_recv_context: Optional[pulumi.Input[str]] = None,
                 health_check_send_context: Optional[pulumi.Input[str]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_time_out: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 health_source_ip_type: Optional[pulumi.Input[int]] = None,
                 keepalive_enable: Optional[pulumi.Input[int]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 listener_name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 scheduler: Optional[pulumi.Input[str]] = None,
                 session_expire_time: Optional[pulumi.Input[int]] = None,
                 session_type: Optional[pulumi.Input[str]] = None,
                 sni_switch: Optional[pulumi.Input[bool]] = None,
                 target_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Listener resources.
        :param pulumi.Input[str] certificate_ca_id: ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
        :param pulumi.Input[str] certificate_id: ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        :param pulumi.Input[str] certificate_ssl_mode: Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        :param pulumi.Input[str] clb_id: ID of the CLB.
        :param pulumi.Input[int] end_port: This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
        :param pulumi.Input[bool] h2c_switch: Enable H2C switch for intranet HTTP listener.
        :param pulumi.Input[str] health_check_context_type: Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        :param pulumi.Input[int] health_check_http_code: HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
        :param pulumi.Input[str] health_check_http_domain: HTTP health check domain of TCP listener.
        :param pulumi.Input[str] health_check_http_method: HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
        :param pulumi.Input[str] health_check_http_path: HTTP health check path of TCP listener.
        :param pulumi.Input[str] health_check_http_version: The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
        :param pulumi.Input[int] health_check_interval_time: Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_check_port: The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
        :param pulumi.Input[str] health_check_recv_context: It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        :param pulumi.Input[str] health_check_send_context: It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled.
        :param pulumi.Input[int] health_check_time_out: Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
        :param pulumi.Input[str] health_check_type: Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_source_ip_type: Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
        :param pulumi.Input[int] keepalive_enable: Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
        :param pulumi.Input[str] listener_id: ID of this CLB listener.
        :param pulumi.Input[str] listener_name: Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
        :param pulumi.Input[int] port: Port of the CLB listener.
        :param pulumi.Input[str] protocol: Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
        :param pulumi.Input[str] scheduler: Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] session_expire_time: Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[str] session_type: Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
        :param pulumi.Input[bool] sni_switch: Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `Clb.ListenerRule`, otherwise all rules have a certificate.
        :param pulumi.Input[str] target_type: Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        """
        if certificate_ca_id is not None:
            pulumi.set(__self__, "certificate_ca_id", certificate_ca_id)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_ssl_mode is not None:
            pulumi.set(__self__, "certificate_ssl_mode", certificate_ssl_mode)
        if clb_id is not None:
            pulumi.set(__self__, "clb_id", clb_id)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if h2c_switch is not None:
            pulumi.set(__self__, "h2c_switch", h2c_switch)
        if health_check_context_type is not None:
            pulumi.set(__self__, "health_check_context_type", health_check_context_type)
        if health_check_health_num is not None:
            pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        if health_check_http_code is not None:
            pulumi.set(__self__, "health_check_http_code", health_check_http_code)
        if health_check_http_domain is not None:
            pulumi.set(__self__, "health_check_http_domain", health_check_http_domain)
        if health_check_http_method is not None:
            pulumi.set(__self__, "health_check_http_method", health_check_http_method)
        if health_check_http_path is not None:
            pulumi.set(__self__, "health_check_http_path", health_check_http_path)
        if health_check_http_version is not None:
            pulumi.set(__self__, "health_check_http_version", health_check_http_version)
        if health_check_interval_time is not None:
            pulumi.set(__self__, "health_check_interval_time", health_check_interval_time)
        if health_check_port is not None:
            pulumi.set(__self__, "health_check_port", health_check_port)
        if health_check_recv_context is not None:
            pulumi.set(__self__, "health_check_recv_context", health_check_recv_context)
        if health_check_send_context is not None:
            pulumi.set(__self__, "health_check_send_context", health_check_send_context)
        if health_check_switch is not None:
            pulumi.set(__self__, "health_check_switch", health_check_switch)
        if health_check_time_out is not None:
            pulumi.set(__self__, "health_check_time_out", health_check_time_out)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if health_check_unhealth_num is not None:
            pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        if health_source_ip_type is not None:
            pulumi.set(__self__, "health_source_ip_type", health_source_ip_type)
        if keepalive_enable is not None:
            pulumi.set(__self__, "keepalive_enable", keepalive_enable)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if session_expire_time is not None:
            pulumi.set(__self__, "session_expire_time", session_expire_time)
        if session_type is not None:
            pulumi.set(__self__, "session_type", session_type)
        if sni_switch is not None:
            pulumi.set(__self__, "sni_switch", sni_switch)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter(name="certificateCaId")
    def certificate_ca_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
        """
        return pulumi.get(self, "certificate_ca_id")

    @certificate_ca_id.setter
    def certificate_ca_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ca_id", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateSslMode")
    def certificate_ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        """
        return pulumi.get(self, "certificate_ssl_mode")

    @certificate_ssl_mode.setter
    def certificate_ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ssl_mode", value)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the CLB.
        """
        return pulumi.get(self, "clb_id")

    @clb_id.setter
    def clb_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clb_id", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="h2cSwitch")
    def h2c_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable H2C switch for intranet HTTP listener.
        """
        return pulumi.get(self, "h2c_switch")

    @h2c_switch.setter
    def h2c_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "h2c_switch", value)

    @property
    @pulumi.getter(name="healthCheckContextType")
    def health_check_context_type(self) -> Optional[pulumi.Input[str]]:
        """
        Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
        """
        return pulumi.get(self, "health_check_context_type")

    @health_check_context_type.setter
    def health_check_context_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_context_type", value)

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> Optional[pulumi.Input[int]]:
        """
        Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        """
        return pulumi.get(self, "health_check_health_num")

    @health_check_health_num.setter
    def health_check_health_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_health_num", value)

    @property
    @pulumi.getter(name="healthCheckHttpCode")
    def health_check_http_code(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
        """
        return pulumi.get(self, "health_check_http_code")

    @health_check_http_code.setter
    def health_check_http_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_http_code", value)

    @property
    @pulumi.getter(name="healthCheckHttpDomain")
    def health_check_http_domain(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP health check domain of TCP listener.
        """
        return pulumi.get(self, "health_check_http_domain")

    @health_check_http_domain.setter
    def health_check_http_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_domain", value)

    @property
    @pulumi.getter(name="healthCheckHttpMethod")
    def health_check_http_method(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
        """
        return pulumi.get(self, "health_check_http_method")

    @health_check_http_method.setter
    def health_check_http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_method", value)

    @property
    @pulumi.getter(name="healthCheckHttpPath")
    def health_check_http_path(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP health check path of TCP listener.
        """
        return pulumi.get(self, "health_check_http_path")

    @health_check_http_path.setter
    def health_check_http_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_path", value)

    @property
    @pulumi.getter(name="healthCheckHttpVersion")
    def health_check_http_version(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
        """
        return pulumi.get(self, "health_check_http_version")

    @health_check_http_version.setter
    def health_check_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_version", value)

    @property
    @pulumi.getter(name="healthCheckIntervalTime")
    def health_check_interval_time(self) -> Optional[pulumi.Input[int]]:
        """
        Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_interval_time")

    @health_check_interval_time.setter
    def health_check_interval_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval_time", value)

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[pulumi.Input[int]]:
        """
        The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
        """
        return pulumi.get(self, "health_check_port")

    @health_check_port.setter
    def health_check_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_port", value)

    @property
    @pulumi.getter(name="healthCheckRecvContext")
    def health_check_recv_context(self) -> Optional[pulumi.Input[str]]:
        """
        It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        """
        return pulumi.get(self, "health_check_recv_context")

    @health_check_recv_context.setter
    def health_check_recv_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_recv_context", value)

    @property
    @pulumi.getter(name="healthCheckSendContext")
    def health_check_send_context(self) -> Optional[pulumi.Input[str]]:
        """
        It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        """
        return pulumi.get(self, "health_check_send_context")

    @health_check_send_context.setter
    def health_check_send_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_send_context", value)

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether health check is enabled.
        """
        return pulumi.get(self, "health_check_switch")

    @health_check_switch.setter
    def health_check_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_check_switch", value)

    @property
    @pulumi.getter(name="healthCheckTimeOut")
    def health_check_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
        """
        return pulumi.get(self, "health_check_time_out")

    @health_check_time_out.setter
    def health_check_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_time_out", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> Optional[pulumi.Input[int]]:
        """
        Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @health_check_unhealth_num.setter
    def health_check_unhealth_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_unhealth_num", value)

    @property
    @pulumi.getter(name="healthSourceIpType")
    def health_source_ip_type(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
        """
        return pulumi.get(self, "health_source_ip_type")

    @health_source_ip_type.setter
    def health_source_ip_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_source_ip_type", value)

    @property
    @pulumi.getter(name="keepaliveEnable")
    def keepalive_enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
        """
        return pulumi.get(self, "keepalive_enable")

    @keepalive_enable.setter
    def keepalive_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_enable", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of this CLB listener.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
        """
        return pulumi.get(self, "listener_name")

    @listener_name.setter
    def listener_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the CLB listener.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler", value)

    @property
    @pulumi.getter(name="sessionExpireTime")
    def session_expire_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "session_expire_time")

    @session_expire_time.setter
    def session_expire_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_expire_time", value)

    @property
    @pulumi.getter(name="sessionType")
    def session_type(self) -> Optional[pulumi.Input[str]]:
        """
        Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
        """
        return pulumi.get(self, "session_type")

    @session_type.setter
    def session_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_type", value)

    @property
    @pulumi.getter(name="sniSwitch")
    def sni_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `Clb.ListenerRule`, otherwise all rules have a certificate.
        """
        return pulumi.get(self, "sni_switch")

    @sni_switch.setter
    def sni_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sni_switch", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)


class Listener(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_ca_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_ssl_mode: Optional[pulumi.Input[str]] = None,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 h2c_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_context_type: Optional[pulumi.Input[str]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_http_code: Optional[pulumi.Input[int]] = None,
                 health_check_http_domain: Optional[pulumi.Input[str]] = None,
                 health_check_http_method: Optional[pulumi.Input[str]] = None,
                 health_check_http_path: Optional[pulumi.Input[str]] = None,
                 health_check_http_version: Optional[pulumi.Input[str]] = None,
                 health_check_interval_time: Optional[pulumi.Input[int]] = None,
                 health_check_port: Optional[pulumi.Input[int]] = None,
                 health_check_recv_context: Optional[pulumi.Input[str]] = None,
                 health_check_send_context: Optional[pulumi.Input[str]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_time_out: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 health_source_ip_type: Optional[pulumi.Input[int]] = None,
                 keepalive_enable: Optional[pulumi.Input[int]] = None,
                 listener_name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 scheduler: Optional[pulumi.Input[str]] = None,
                 session_expire_time: Optional[pulumi.Input[int]] = None,
                 session_type: Optional[pulumi.Input[str]] = None,
                 sni_switch: Optional[pulumi.Input[bool]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a CLB listener.

        ## Example Usage

        ### HTTP Listener

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        h_ttp_listener = tencentcloud.clb.Listener("hTTPListener",
            clb_id="lb-0lh5au7v",
            listener_name="test_listener",
            port=80,
            protocol="HTTP")
        ```
        <!--End PulumiCodeChooser -->

        ### TCP/UDP Listener

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        t_cp_listener = tencentcloud.clb.Listener("tCPListener",
            clb_id="lb-0lh5au7v",
            health_check_health_num=3,
            health_check_http_code=2,
            health_check_http_method="GET",
            health_check_http_version="HTTP/1.0",
            health_check_interval_time=5,
            health_check_port=200,
            health_check_switch=True,
            health_check_time_out=2,
            health_check_type="HTTP",
            health_check_unhealth_num=3,
            listener_name="test_listener",
            port=80,
            protocol="TCP",
            scheduler="WRR",
            session_expire_time=30)
        ```
        <!--End PulumiCodeChooser -->

        ### TCP/UDP Listener with tcp health check

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        listener_tcp = tencentcloud.clb.Listener("listenerTcp",
            clb_id=tencentcloud_clb_instance["clb_basic"]["id"],
            listener_name="listener_tcp",
            port=44,
            protocol="TCP",
            health_check_switch=True,
            health_check_time_out=30,
            health_check_interval_time=100,
            health_check_health_num=2,
            health_check_unhealth_num=2,
            session_expire_time=30,
            scheduler="WRR",
            health_check_type="TCP",
            health_check_port=200)
        ```
        <!--End PulumiCodeChooser -->

        ### TCP/UDP Listener with http health check

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        listener_tcp = tencentcloud.clb.Listener("listenerTcp",
            clb_id=tencentcloud_clb_instance["clb_basic"]["id"],
            listener_name="listener_tcp",
            port=44,
            protocol="TCP",
            health_check_switch=True,
            health_check_time_out=30,
            health_check_interval_time=100,
            health_check_health_num=2,
            health_check_unhealth_num=2,
            session_expire_time=30,
            scheduler="WRR",
            health_check_type="HTTP",
            health_check_http_domain="www.tencent.com",
            health_check_http_code=16,
            health_check_http_version="HTTP/1.1",
            health_check_http_method="HEAD",
            health_check_http_path="/")
        ```
        <!--End PulumiCodeChooser -->

        ### TCP/UDP Listener with customer health check

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        listener_tcp = tencentcloud.clb.Listener("listenerTcp",
            clb_id=tencentcloud_clb_instance["clb_basic"]["id"],
            listener_name="listener_tcp",
            port=44,
            protocol="TCP",
            health_check_switch=True,
            health_check_time_out=30,
            health_check_interval_time=100,
            health_check_health_num=2,
            health_check_unhealth_num=2,
            session_expire_time=30,
            scheduler="WRR",
            health_check_type="CUSTOM",
            health_check_context_type="HEX",
            health_check_send_context="0123456789ABCDEF",
            health_check_recv_context="ABCD",
            target_type="TARGETGROUP")
        ```
        <!--End PulumiCodeChooser -->

        ### HTTPS Listener

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        h_ttps_listener = tencentcloud.clb.Listener("hTTPSListener",
            certificate_ca_id="VfqO4zkB",
            certificate_id="VjANRdz8",
            certificate_ssl_mode="MUTUAL",
            clb_id="lb-0lh5au7v",
            listener_name="test_listener",
            port=80,
            protocol="HTTPS",
            sni_switch=True)
        ```
        <!--End PulumiCodeChooser -->

        ### TCP SSL Listener

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        t_cpssl_listener = tencentcloud.clb.Listener("tCPSSLListener",
            certificate_ca_id="VfqO4zkB",
            certificate_id="VjANRdz8",
            certificate_ssl_mode="MUTUAL",
            clb_id="lb-0lh5au7v",
            health_check_health_num=3,
            health_check_interval_time=5,
            health_check_switch=True,
            health_check_time_out=2,
            health_check_unhealth_num=3,
            listener_name="test_listener",
            port=80,
            protocol="TCP_SSL",
            scheduler="WRR",
            target_type="TARGETGROUP")
        ```
        <!--End PulumiCodeChooser -->

        ### Port Range Listener

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        clb_basic = tencentcloud.clb.Instance("clbBasic",
            network_type="OPEN",
            clb_name="tf-listener-test")
        listener_basic = tencentcloud.clb.Listener("listenerBasic",
            clb_id=clb_basic.id,
            port=1,
            end_port=6,
            protocol="TCP",
            listener_name="listener_basic",
            session_expire_time=30,
            scheduler="WRR",
            target_type="NODE")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLB listener can be imported using the id (version >= 1.47.0), e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/listener:Listener foo lb-7a0t6zqb#lbl-hh141sn9
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_ca_id: ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
        :param pulumi.Input[str] certificate_id: ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        :param pulumi.Input[str] certificate_ssl_mode: Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        :param pulumi.Input[str] clb_id: ID of the CLB.
        :param pulumi.Input[int] end_port: This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
        :param pulumi.Input[bool] h2c_switch: Enable H2C switch for intranet HTTP listener.
        :param pulumi.Input[str] health_check_context_type: Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        :param pulumi.Input[int] health_check_http_code: HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
        :param pulumi.Input[str] health_check_http_domain: HTTP health check domain of TCP listener.
        :param pulumi.Input[str] health_check_http_method: HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
        :param pulumi.Input[str] health_check_http_path: HTTP health check path of TCP listener.
        :param pulumi.Input[str] health_check_http_version: The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
        :param pulumi.Input[int] health_check_interval_time: Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_check_port: The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
        :param pulumi.Input[str] health_check_recv_context: It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        :param pulumi.Input[str] health_check_send_context: It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled.
        :param pulumi.Input[int] health_check_time_out: Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
        :param pulumi.Input[str] health_check_type: Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_source_ip_type: Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
        :param pulumi.Input[int] keepalive_enable: Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
        :param pulumi.Input[str] listener_name: Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
        :param pulumi.Input[int] port: Port of the CLB listener.
        :param pulumi.Input[str] protocol: Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
        :param pulumi.Input[str] scheduler: Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] session_expire_time: Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[str] session_type: Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
        :param pulumi.Input[bool] sni_switch: Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `Clb.ListenerRule`, otherwise all rules have a certificate.
        :param pulumi.Input[str] target_type: Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ListenerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a CLB listener.

        ## Example Usage

        ### HTTP Listener

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        h_ttp_listener = tencentcloud.clb.Listener("hTTPListener",
            clb_id="lb-0lh5au7v",
            listener_name="test_listener",
            port=80,
            protocol="HTTP")
        ```
        <!--End PulumiCodeChooser -->

        ### TCP/UDP Listener

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        t_cp_listener = tencentcloud.clb.Listener("tCPListener",
            clb_id="lb-0lh5au7v",
            health_check_health_num=3,
            health_check_http_code=2,
            health_check_http_method="GET",
            health_check_http_version="HTTP/1.0",
            health_check_interval_time=5,
            health_check_port=200,
            health_check_switch=True,
            health_check_time_out=2,
            health_check_type="HTTP",
            health_check_unhealth_num=3,
            listener_name="test_listener",
            port=80,
            protocol="TCP",
            scheduler="WRR",
            session_expire_time=30)
        ```
        <!--End PulumiCodeChooser -->

        ### TCP/UDP Listener with tcp health check

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        listener_tcp = tencentcloud.clb.Listener("listenerTcp",
            clb_id=tencentcloud_clb_instance["clb_basic"]["id"],
            listener_name="listener_tcp",
            port=44,
            protocol="TCP",
            health_check_switch=True,
            health_check_time_out=30,
            health_check_interval_time=100,
            health_check_health_num=2,
            health_check_unhealth_num=2,
            session_expire_time=30,
            scheduler="WRR",
            health_check_type="TCP",
            health_check_port=200)
        ```
        <!--End PulumiCodeChooser -->

        ### TCP/UDP Listener with http health check

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        listener_tcp = tencentcloud.clb.Listener("listenerTcp",
            clb_id=tencentcloud_clb_instance["clb_basic"]["id"],
            listener_name="listener_tcp",
            port=44,
            protocol="TCP",
            health_check_switch=True,
            health_check_time_out=30,
            health_check_interval_time=100,
            health_check_health_num=2,
            health_check_unhealth_num=2,
            session_expire_time=30,
            scheduler="WRR",
            health_check_type="HTTP",
            health_check_http_domain="www.tencent.com",
            health_check_http_code=16,
            health_check_http_version="HTTP/1.1",
            health_check_http_method="HEAD",
            health_check_http_path="/")
        ```
        <!--End PulumiCodeChooser -->

        ### TCP/UDP Listener with customer health check

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        listener_tcp = tencentcloud.clb.Listener("listenerTcp",
            clb_id=tencentcloud_clb_instance["clb_basic"]["id"],
            listener_name="listener_tcp",
            port=44,
            protocol="TCP",
            health_check_switch=True,
            health_check_time_out=30,
            health_check_interval_time=100,
            health_check_health_num=2,
            health_check_unhealth_num=2,
            session_expire_time=30,
            scheduler="WRR",
            health_check_type="CUSTOM",
            health_check_context_type="HEX",
            health_check_send_context="0123456789ABCDEF",
            health_check_recv_context="ABCD",
            target_type="TARGETGROUP")
        ```
        <!--End PulumiCodeChooser -->

        ### HTTPS Listener

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        h_ttps_listener = tencentcloud.clb.Listener("hTTPSListener",
            certificate_ca_id="VfqO4zkB",
            certificate_id="VjANRdz8",
            certificate_ssl_mode="MUTUAL",
            clb_id="lb-0lh5au7v",
            listener_name="test_listener",
            port=80,
            protocol="HTTPS",
            sni_switch=True)
        ```
        <!--End PulumiCodeChooser -->

        ### TCP SSL Listener

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        t_cpssl_listener = tencentcloud.clb.Listener("tCPSSLListener",
            certificate_ca_id="VfqO4zkB",
            certificate_id="VjANRdz8",
            certificate_ssl_mode="MUTUAL",
            clb_id="lb-0lh5au7v",
            health_check_health_num=3,
            health_check_interval_time=5,
            health_check_switch=True,
            health_check_time_out=2,
            health_check_unhealth_num=3,
            listener_name="test_listener",
            port=80,
            protocol="TCP_SSL",
            scheduler="WRR",
            target_type="TARGETGROUP")
        ```
        <!--End PulumiCodeChooser -->

        ### Port Range Listener

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        clb_basic = tencentcloud.clb.Instance("clbBasic",
            network_type="OPEN",
            clb_name="tf-listener-test")
        listener_basic = tencentcloud.clb.Listener("listenerBasic",
            clb_id=clb_basic.id,
            port=1,
            end_port=6,
            protocol="TCP",
            listener_name="listener_basic",
            session_expire_time=30,
            scheduler="WRR",
            target_type="NODE")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLB listener can be imported using the id (version >= 1.47.0), e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/listener:Listener foo lb-7a0t6zqb#lbl-hh141sn9
        ```

        :param str resource_name: The name of the resource.
        :param ListenerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ListenerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_ca_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_ssl_mode: Optional[pulumi.Input[str]] = None,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 h2c_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_context_type: Optional[pulumi.Input[str]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_http_code: Optional[pulumi.Input[int]] = None,
                 health_check_http_domain: Optional[pulumi.Input[str]] = None,
                 health_check_http_method: Optional[pulumi.Input[str]] = None,
                 health_check_http_path: Optional[pulumi.Input[str]] = None,
                 health_check_http_version: Optional[pulumi.Input[str]] = None,
                 health_check_interval_time: Optional[pulumi.Input[int]] = None,
                 health_check_port: Optional[pulumi.Input[int]] = None,
                 health_check_recv_context: Optional[pulumi.Input[str]] = None,
                 health_check_send_context: Optional[pulumi.Input[str]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_time_out: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 health_source_ip_type: Optional[pulumi.Input[int]] = None,
                 keepalive_enable: Optional[pulumi.Input[int]] = None,
                 listener_name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 scheduler: Optional[pulumi.Input[str]] = None,
                 session_expire_time: Optional[pulumi.Input[int]] = None,
                 session_type: Optional[pulumi.Input[str]] = None,
                 sni_switch: Optional[pulumi.Input[bool]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ListenerArgs.__new__(ListenerArgs)

            __props__.__dict__["certificate_ca_id"] = certificate_ca_id
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["certificate_ssl_mode"] = certificate_ssl_mode
            if clb_id is None and not opts.urn:
                raise TypeError("Missing required property 'clb_id'")
            __props__.__dict__["clb_id"] = clb_id
            __props__.__dict__["end_port"] = end_port
            __props__.__dict__["h2c_switch"] = h2c_switch
            __props__.__dict__["health_check_context_type"] = health_check_context_type
            __props__.__dict__["health_check_health_num"] = health_check_health_num
            __props__.__dict__["health_check_http_code"] = health_check_http_code
            __props__.__dict__["health_check_http_domain"] = health_check_http_domain
            __props__.__dict__["health_check_http_method"] = health_check_http_method
            __props__.__dict__["health_check_http_path"] = health_check_http_path
            __props__.__dict__["health_check_http_version"] = health_check_http_version
            __props__.__dict__["health_check_interval_time"] = health_check_interval_time
            __props__.__dict__["health_check_port"] = health_check_port
            __props__.__dict__["health_check_recv_context"] = health_check_recv_context
            __props__.__dict__["health_check_send_context"] = health_check_send_context
            __props__.__dict__["health_check_switch"] = health_check_switch
            __props__.__dict__["health_check_time_out"] = health_check_time_out
            __props__.__dict__["health_check_type"] = health_check_type
            __props__.__dict__["health_check_unhealth_num"] = health_check_unhealth_num
            __props__.__dict__["health_source_ip_type"] = health_source_ip_type
            __props__.__dict__["keepalive_enable"] = keepalive_enable
            if listener_name is None and not opts.urn:
                raise TypeError("Missing required property 'listener_name'")
            __props__.__dict__["listener_name"] = listener_name
            __props__.__dict__["port"] = port
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["scheduler"] = scheduler
            __props__.__dict__["session_expire_time"] = session_expire_time
            __props__.__dict__["session_type"] = session_type
            __props__.__dict__["sni_switch"] = sni_switch
            __props__.__dict__["target_type"] = target_type
            __props__.__dict__["listener_id"] = None
        super(Listener, __self__).__init__(
            'tencentcloud:Clb/listener:Listener',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_ca_id: Optional[pulumi.Input[str]] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            certificate_ssl_mode: Optional[pulumi.Input[str]] = None,
            clb_id: Optional[pulumi.Input[str]] = None,
            end_port: Optional[pulumi.Input[int]] = None,
            h2c_switch: Optional[pulumi.Input[bool]] = None,
            health_check_context_type: Optional[pulumi.Input[str]] = None,
            health_check_health_num: Optional[pulumi.Input[int]] = None,
            health_check_http_code: Optional[pulumi.Input[int]] = None,
            health_check_http_domain: Optional[pulumi.Input[str]] = None,
            health_check_http_method: Optional[pulumi.Input[str]] = None,
            health_check_http_path: Optional[pulumi.Input[str]] = None,
            health_check_http_version: Optional[pulumi.Input[str]] = None,
            health_check_interval_time: Optional[pulumi.Input[int]] = None,
            health_check_port: Optional[pulumi.Input[int]] = None,
            health_check_recv_context: Optional[pulumi.Input[str]] = None,
            health_check_send_context: Optional[pulumi.Input[str]] = None,
            health_check_switch: Optional[pulumi.Input[bool]] = None,
            health_check_time_out: Optional[pulumi.Input[int]] = None,
            health_check_type: Optional[pulumi.Input[str]] = None,
            health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
            health_source_ip_type: Optional[pulumi.Input[int]] = None,
            keepalive_enable: Optional[pulumi.Input[int]] = None,
            listener_id: Optional[pulumi.Input[str]] = None,
            listener_name: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            scheduler: Optional[pulumi.Input[str]] = None,
            session_expire_time: Optional[pulumi.Input[int]] = None,
            session_type: Optional[pulumi.Input[str]] = None,
            sni_switch: Optional[pulumi.Input[bool]] = None,
            target_type: Optional[pulumi.Input[str]] = None) -> 'Listener':
        """
        Get an existing Listener resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_ca_id: ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
        :param pulumi.Input[str] certificate_id: ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        :param pulumi.Input[str] certificate_ssl_mode: Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        :param pulumi.Input[str] clb_id: ID of the CLB.
        :param pulumi.Input[int] end_port: This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
        :param pulumi.Input[bool] h2c_switch: Enable H2C switch for intranet HTTP listener.
        :param pulumi.Input[str] health_check_context_type: Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        :param pulumi.Input[int] health_check_http_code: HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
        :param pulumi.Input[str] health_check_http_domain: HTTP health check domain of TCP listener.
        :param pulumi.Input[str] health_check_http_method: HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
        :param pulumi.Input[str] health_check_http_path: HTTP health check path of TCP listener.
        :param pulumi.Input[str] health_check_http_version: The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
        :param pulumi.Input[int] health_check_interval_time: Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_check_port: The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
        :param pulumi.Input[str] health_check_recv_context: It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        :param pulumi.Input[str] health_check_send_context: It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled.
        :param pulumi.Input[int] health_check_time_out: Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
        :param pulumi.Input[str] health_check_type: Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_source_ip_type: Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
        :param pulumi.Input[int] keepalive_enable: Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
        :param pulumi.Input[str] listener_id: ID of this CLB listener.
        :param pulumi.Input[str] listener_name: Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
        :param pulumi.Input[int] port: Port of the CLB listener.
        :param pulumi.Input[str] protocol: Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
        :param pulumi.Input[str] scheduler: Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] session_expire_time: Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[str] session_type: Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
        :param pulumi.Input[bool] sni_switch: Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `Clb.ListenerRule`, otherwise all rules have a certificate.
        :param pulumi.Input[str] target_type: Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ListenerState.__new__(_ListenerState)

        __props__.__dict__["certificate_ca_id"] = certificate_ca_id
        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["certificate_ssl_mode"] = certificate_ssl_mode
        __props__.__dict__["clb_id"] = clb_id
        __props__.__dict__["end_port"] = end_port
        __props__.__dict__["h2c_switch"] = h2c_switch
        __props__.__dict__["health_check_context_type"] = health_check_context_type
        __props__.__dict__["health_check_health_num"] = health_check_health_num
        __props__.__dict__["health_check_http_code"] = health_check_http_code
        __props__.__dict__["health_check_http_domain"] = health_check_http_domain
        __props__.__dict__["health_check_http_method"] = health_check_http_method
        __props__.__dict__["health_check_http_path"] = health_check_http_path
        __props__.__dict__["health_check_http_version"] = health_check_http_version
        __props__.__dict__["health_check_interval_time"] = health_check_interval_time
        __props__.__dict__["health_check_port"] = health_check_port
        __props__.__dict__["health_check_recv_context"] = health_check_recv_context
        __props__.__dict__["health_check_send_context"] = health_check_send_context
        __props__.__dict__["health_check_switch"] = health_check_switch
        __props__.__dict__["health_check_time_out"] = health_check_time_out
        __props__.__dict__["health_check_type"] = health_check_type
        __props__.__dict__["health_check_unhealth_num"] = health_check_unhealth_num
        __props__.__dict__["health_source_ip_type"] = health_source_ip_type
        __props__.__dict__["keepalive_enable"] = keepalive_enable
        __props__.__dict__["listener_id"] = listener_id
        __props__.__dict__["listener_name"] = listener_name
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["scheduler"] = scheduler
        __props__.__dict__["session_expire_time"] = session_expire_time
        __props__.__dict__["session_type"] = session_type
        __props__.__dict__["sni_switch"] = sni_switch
        __props__.__dict__["target_type"] = target_type
        return Listener(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateCaId")
    def certificate_ca_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
        """
        return pulumi.get(self, "certificate_ca_id")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateSslMode")
    def certificate_ssl_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
        """
        return pulumi.get(self, "certificate_ssl_mode")

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> pulumi.Output[str]:
        """
        ID of the CLB.
        """
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> pulumi.Output[int]:
        """
        This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="h2cSwitch")
    def h2c_switch(self) -> pulumi.Output[bool]:
        """
        Enable H2C switch for intranet HTTP listener.
        """
        return pulumi.get(self, "h2c_switch")

    @property
    @pulumi.getter(name="healthCheckContextType")
    def health_check_context_type(self) -> pulumi.Output[str]:
        """
        Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
        """
        return pulumi.get(self, "health_check_context_type")

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> pulumi.Output[int]:
        """
        Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        """
        return pulumi.get(self, "health_check_health_num")

    @property
    @pulumi.getter(name="healthCheckHttpCode")
    def health_check_http_code(self) -> pulumi.Output[Optional[int]]:
        """
        HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
        """
        return pulumi.get(self, "health_check_http_code")

    @property
    @pulumi.getter(name="healthCheckHttpDomain")
    def health_check_http_domain(self) -> pulumi.Output[Optional[str]]:
        """
        HTTP health check domain of TCP listener.
        """
        return pulumi.get(self, "health_check_http_domain")

    @property
    @pulumi.getter(name="healthCheckHttpMethod")
    def health_check_http_method(self) -> pulumi.Output[str]:
        """
        HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
        """
        return pulumi.get(self, "health_check_http_method")

    @property
    @pulumi.getter(name="healthCheckHttpPath")
    def health_check_http_path(self) -> pulumi.Output[Optional[str]]:
        """
        HTTP health check path of TCP listener.
        """
        return pulumi.get(self, "health_check_http_path")

    @property
    @pulumi.getter(name="healthCheckHttpVersion")
    def health_check_http_version(self) -> pulumi.Output[Optional[str]]:
        """
        The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
        """
        return pulumi.get(self, "health_check_http_version")

    @property
    @pulumi.getter(name="healthCheckIntervalTime")
    def health_check_interval_time(self) -> pulumi.Output[int]:
        """
        Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_interval_time")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> pulumi.Output[Optional[int]]:
        """
        The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
        """
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter(name="healthCheckRecvContext")
    def health_check_recv_context(self) -> pulumi.Output[Optional[str]]:
        """
        It represents the result returned by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        """
        return pulumi.get(self, "health_check_recv_context")

    @property
    @pulumi.getter(name="healthCheckSendContext")
    def health_check_send_context(self) -> pulumi.Output[Optional[str]]:
        """
        It represents the content of the request sent by the health check. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
        """
        return pulumi.get(self, "health_check_send_context")

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> pulumi.Output[bool]:
        """
        Indicates whether health check is enabled.
        """
        return pulumi.get(self, "health_check_switch")

    @property
    @pulumi.getter(name="healthCheckTimeOut")
    def health_check_time_out(self) -> pulumi.Output[int]:
        """
        Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
        """
        return pulumi.get(self, "health_check_time_out")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> pulumi.Output[str]:
        """
        Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
        """
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> pulumi.Output[int]:
        """
        Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @property
    @pulumi.getter(name="healthSourceIpType")
    def health_source_ip_type(self) -> pulumi.Output[int]:
        """
        Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
        """
        return pulumi.get(self, "health_source_ip_type")

    @property
    @pulumi.getter(name="keepaliveEnable")
    def keepalive_enable(self) -> pulumi.Output[int]:
        """
        Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
        """
        return pulumi.get(self, "keepalive_enable")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[str]:
        """
        ID of this CLB listener.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> pulumi.Output[str]:
        """
        Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
        """
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[int]]:
        """
        Port of the CLB listener.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def scheduler(self) -> pulumi.Output[Optional[str]]:
        """
        Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter(name="sessionExpireTime")
    def session_expire_time(self) -> pulumi.Output[Optional[int]]:
        """
        Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "session_expire_time")

    @property
    @pulumi.getter(name="sessionType")
    def session_type(self) -> pulumi.Output[str]:
        """
        Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
        """
        return pulumi.get(self, "session_type")

    @property
    @pulumi.getter(name="sniSwitch")
    def sni_switch(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `Clb.ListenerRule`, otherwise all rules have a certificate.
        """
        return pulumi.get(self, "sni_switch")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[str]:
        """
        Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
        """
        return pulumi.get(self, "target_type")

