# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ListenerRuleArgs', 'ListenerRule']

@pulumi.input_type
class ListenerRuleArgs:
    def __init__(__self__, *,
                 clb_id: pulumi.Input[str],
                 listener_id: pulumi.Input[str],
                 url: pulumi.Input[str],
                 certificate_ca_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_ssl_mode: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forward_type: Optional[pulumi.Input[str]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_http_code: Optional[pulumi.Input[int]] = None,
                 health_check_http_domain: Optional[pulumi.Input[str]] = None,
                 health_check_http_method: Optional[pulumi.Input[str]] = None,
                 health_check_http_path: Optional[pulumi.Input[str]] = None,
                 health_check_interval_time: Optional[pulumi.Input[int]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_time_out: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 http2_switch: Optional[pulumi.Input[bool]] = None,
                 quic: Optional[pulumi.Input[bool]] = None,
                 scheduler: Optional[pulumi.Input[str]] = None,
                 session_expire_time: Optional[pulumi.Input[int]] = None,
                 target_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ListenerRule resource.
        :param pulumi.Input[str] clb_id: ID of CLB instance.
        :param pulumi.Input[str] listener_id: ID of CLB listener.
        :param pulumi.Input[str] url: Url of the listener rule.
        :param pulumi.Input[str] certificate_ca_id: ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] certificate_id: ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] certificate_ssl_mode: Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] domain: Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: Domain name list of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[str] forward_type: Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `GRPC`, `GRPCS`, `TRPC`. The default is `HTTP`.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_check_http_code: HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
        :param pulumi.Input[str] health_check_http_domain: Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        :param pulumi.Input[str] health_check_http_method: Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
        :param pulumi.Input[str] health_check_http_path: Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        :param pulumi.Input[int] health_check_interval_time: Interval time of health check. Valid value ranges: (2~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled.
        :param pulumi.Input[int] health_check_time_out: Time out of health check. The value range is 2-60.
        :param pulumi.Input[str] health_check_type: Type of health check. Valid value is `CUSTOM`, `PING`, `TCP`, `HTTP`, `HTTPS`, `GRPC`, `GRPCS`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[bool] http2_switch: Indicate to apply HTTP2.0 protocol or not.
        :param pulumi.Input[bool] quic: Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
        :param pulumi.Input[str] scheduler: Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] session_expire_time: Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[str] target_type: Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
        """
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "url", url)
        if certificate_ca_id is not None:
            pulumi.set(__self__, "certificate_ca_id", certificate_ca_id)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_ssl_mode is not None:
            pulumi.set(__self__, "certificate_ssl_mode", certificate_ssl_mode)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if forward_type is not None:
            pulumi.set(__self__, "forward_type", forward_type)
        if health_check_health_num is not None:
            pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        if health_check_http_code is not None:
            pulumi.set(__self__, "health_check_http_code", health_check_http_code)
        if health_check_http_domain is not None:
            pulumi.set(__self__, "health_check_http_domain", health_check_http_domain)
        if health_check_http_method is not None:
            pulumi.set(__self__, "health_check_http_method", health_check_http_method)
        if health_check_http_path is not None:
            pulumi.set(__self__, "health_check_http_path", health_check_http_path)
        if health_check_interval_time is not None:
            pulumi.set(__self__, "health_check_interval_time", health_check_interval_time)
        if health_check_switch is not None:
            pulumi.set(__self__, "health_check_switch", health_check_switch)
        if health_check_time_out is not None:
            pulumi.set(__self__, "health_check_time_out", health_check_time_out)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if health_check_unhealth_num is not None:
            pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        if http2_switch is not None:
            pulumi.set(__self__, "http2_switch", http2_switch)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if session_expire_time is not None:
            pulumi.set(__self__, "session_expire_time", session_expire_time)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> pulumi.Input[str]:
        """
        ID of CLB instance.
        """
        return pulumi.get(self, "clb_id")

    @clb_id.setter
    def clb_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "clb_id", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Input[str]:
        """
        ID of CLB listener.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Url of the listener rule.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="certificateCaId")
    def certificate_ca_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
        """
        return pulumi.get(self, "certificate_ca_id")

    @certificate_ca_id.setter
    def certificate_ca_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ca_id", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateSslMode")
    def certificate_ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
        """
        return pulumi.get(self, "certificate_ssl_mode")

    @certificate_ssl_mode.setter
    def certificate_ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ssl_mode", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Domain name list of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> Optional[pulumi.Input[str]]:
        """
        Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `GRPC`, `GRPCS`, `TRPC`. The default is `HTTP`.
        """
        return pulumi.get(self, "forward_type")

    @forward_type.setter
    def forward_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_type", value)

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> Optional[pulumi.Input[int]]:
        """
        Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_health_num")

    @health_check_health_num.setter
    def health_check_health_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_health_num", value)

    @property
    @pulumi.getter(name="healthCheckHttpCode")
    def health_check_http_code(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
        """
        return pulumi.get(self, "health_check_http_code")

    @health_check_http_code.setter
    def health_check_http_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_http_code", value)

    @property
    @pulumi.getter(name="healthCheckHttpDomain")
    def health_check_http_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        """
        return pulumi.get(self, "health_check_http_domain")

    @health_check_http_domain.setter
    def health_check_http_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_domain", value)

    @property
    @pulumi.getter(name="healthCheckHttpMethod")
    def health_check_http_method(self) -> Optional[pulumi.Input[str]]:
        """
        Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
        """
        return pulumi.get(self, "health_check_http_method")

    @health_check_http_method.setter
    def health_check_http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_method", value)

    @property
    @pulumi.getter(name="healthCheckHttpPath")
    def health_check_http_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        """
        return pulumi.get(self, "health_check_http_path")

    @health_check_http_path.setter
    def health_check_http_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_path", value)

    @property
    @pulumi.getter(name="healthCheckIntervalTime")
    def health_check_interval_time(self) -> Optional[pulumi.Input[int]]:
        """
        Interval time of health check. Valid value ranges: (2~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_interval_time")

    @health_check_interval_time.setter
    def health_check_interval_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval_time", value)

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether health check is enabled.
        """
        return pulumi.get(self, "health_check_switch")

    @health_check_switch.setter
    def health_check_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_check_switch", value)

    @property
    @pulumi.getter(name="healthCheckTimeOut")
    def health_check_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Time out of health check. The value range is 2-60.
        """
        return pulumi.get(self, "health_check_time_out")

    @health_check_time_out.setter
    def health_check_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_time_out", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of health check. Valid value is `CUSTOM`, `PING`, `TCP`, `HTTP`, `HTTPS`, `GRPC`, `GRPCS`.
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> Optional[pulumi.Input[int]]:
        """
        Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @health_check_unhealth_num.setter
    def health_check_unhealth_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_unhealth_num", value)

    @property
    @pulumi.getter(name="http2Switch")
    def http2_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate to apply HTTP2.0 protocol or not.
        """
        return pulumi.get(self, "http2_switch")

    @http2_switch.setter
    def http2_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http2_switch", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler", value)

    @property
    @pulumi.getter(name="sessionExpireTime")
    def session_expire_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "session_expire_time")

    @session_expire_time.setter
    def session_expire_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_expire_time", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)


@pulumi.input_type
class _ListenerRuleState:
    def __init__(__self__, *,
                 certificate_ca_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_ssl_mode: Optional[pulumi.Input[str]] = None,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forward_type: Optional[pulumi.Input[str]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_http_code: Optional[pulumi.Input[int]] = None,
                 health_check_http_domain: Optional[pulumi.Input[str]] = None,
                 health_check_http_method: Optional[pulumi.Input[str]] = None,
                 health_check_http_path: Optional[pulumi.Input[str]] = None,
                 health_check_interval_time: Optional[pulumi.Input[int]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_time_out: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 http2_switch: Optional[pulumi.Input[bool]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input[bool]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 scheduler: Optional[pulumi.Input[str]] = None,
                 session_expire_time: Optional[pulumi.Input[int]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ListenerRule resources.
        :param pulumi.Input[str] certificate_ca_id: ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] certificate_id: ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] certificate_ssl_mode: Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] clb_id: ID of CLB instance.
        :param pulumi.Input[str] domain: Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: Domain name list of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[str] forward_type: Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `GRPC`, `GRPCS`, `TRPC`. The default is `HTTP`.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_check_http_code: HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
        :param pulumi.Input[str] health_check_http_domain: Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        :param pulumi.Input[str] health_check_http_method: Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
        :param pulumi.Input[str] health_check_http_path: Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        :param pulumi.Input[int] health_check_interval_time: Interval time of health check. Valid value ranges: (2~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled.
        :param pulumi.Input[int] health_check_time_out: Time out of health check. The value range is 2-60.
        :param pulumi.Input[str] health_check_type: Type of health check. Valid value is `CUSTOM`, `PING`, `TCP`, `HTTP`, `HTTPS`, `GRPC`, `GRPCS`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[bool] http2_switch: Indicate to apply HTTP2.0 protocol or not.
        :param pulumi.Input[str] listener_id: ID of CLB listener.
        :param pulumi.Input[bool] quic: Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
        :param pulumi.Input[str] rule_id: ID of this CLB listener rule.
        :param pulumi.Input[str] scheduler: Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] session_expire_time: Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[str] target_type: Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
        :param pulumi.Input[str] url: Url of the listener rule.
        """
        if certificate_ca_id is not None:
            pulumi.set(__self__, "certificate_ca_id", certificate_ca_id)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_ssl_mode is not None:
            pulumi.set(__self__, "certificate_ssl_mode", certificate_ssl_mode)
        if clb_id is not None:
            pulumi.set(__self__, "clb_id", clb_id)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if forward_type is not None:
            pulumi.set(__self__, "forward_type", forward_type)
        if health_check_health_num is not None:
            pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        if health_check_http_code is not None:
            pulumi.set(__self__, "health_check_http_code", health_check_http_code)
        if health_check_http_domain is not None:
            pulumi.set(__self__, "health_check_http_domain", health_check_http_domain)
        if health_check_http_method is not None:
            pulumi.set(__self__, "health_check_http_method", health_check_http_method)
        if health_check_http_path is not None:
            pulumi.set(__self__, "health_check_http_path", health_check_http_path)
        if health_check_interval_time is not None:
            pulumi.set(__self__, "health_check_interval_time", health_check_interval_time)
        if health_check_switch is not None:
            pulumi.set(__self__, "health_check_switch", health_check_switch)
        if health_check_time_out is not None:
            pulumi.set(__self__, "health_check_time_out", health_check_time_out)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if health_check_unhealth_num is not None:
            pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        if http2_switch is not None:
            pulumi.set(__self__, "http2_switch", http2_switch)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if session_expire_time is not None:
            pulumi.set(__self__, "session_expire_time", session_expire_time)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="certificateCaId")
    def certificate_ca_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
        """
        return pulumi.get(self, "certificate_ca_id")

    @certificate_ca_id.setter
    def certificate_ca_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ca_id", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateSslMode")
    def certificate_ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
        """
        return pulumi.get(self, "certificate_ssl_mode")

    @certificate_ssl_mode.setter
    def certificate_ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ssl_mode", value)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of CLB instance.
        """
        return pulumi.get(self, "clb_id")

    @clb_id.setter
    def clb_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clb_id", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Domain name list of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> Optional[pulumi.Input[str]]:
        """
        Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `GRPC`, `GRPCS`, `TRPC`. The default is `HTTP`.
        """
        return pulumi.get(self, "forward_type")

    @forward_type.setter
    def forward_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_type", value)

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> Optional[pulumi.Input[int]]:
        """
        Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_health_num")

    @health_check_health_num.setter
    def health_check_health_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_health_num", value)

    @property
    @pulumi.getter(name="healthCheckHttpCode")
    def health_check_http_code(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
        """
        return pulumi.get(self, "health_check_http_code")

    @health_check_http_code.setter
    def health_check_http_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_http_code", value)

    @property
    @pulumi.getter(name="healthCheckHttpDomain")
    def health_check_http_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        """
        return pulumi.get(self, "health_check_http_domain")

    @health_check_http_domain.setter
    def health_check_http_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_domain", value)

    @property
    @pulumi.getter(name="healthCheckHttpMethod")
    def health_check_http_method(self) -> Optional[pulumi.Input[str]]:
        """
        Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
        """
        return pulumi.get(self, "health_check_http_method")

    @health_check_http_method.setter
    def health_check_http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_method", value)

    @property
    @pulumi.getter(name="healthCheckHttpPath")
    def health_check_http_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        """
        return pulumi.get(self, "health_check_http_path")

    @health_check_http_path.setter
    def health_check_http_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_http_path", value)

    @property
    @pulumi.getter(name="healthCheckIntervalTime")
    def health_check_interval_time(self) -> Optional[pulumi.Input[int]]:
        """
        Interval time of health check. Valid value ranges: (2~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_interval_time")

    @health_check_interval_time.setter
    def health_check_interval_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval_time", value)

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether health check is enabled.
        """
        return pulumi.get(self, "health_check_switch")

    @health_check_switch.setter
    def health_check_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_check_switch", value)

    @property
    @pulumi.getter(name="healthCheckTimeOut")
    def health_check_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Time out of health check. The value range is 2-60.
        """
        return pulumi.get(self, "health_check_time_out")

    @health_check_time_out.setter
    def health_check_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_time_out", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of health check. Valid value is `CUSTOM`, `PING`, `TCP`, `HTTP`, `HTTPS`, `GRPC`, `GRPCS`.
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> Optional[pulumi.Input[int]]:
        """
        Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @health_check_unhealth_num.setter
    def health_check_unhealth_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_unhealth_num", value)

    @property
    @pulumi.getter(name="http2Switch")
    def http2_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate to apply HTTP2.0 protocol or not.
        """
        return pulumi.get(self, "http2_switch")

    @http2_switch.setter
    def http2_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http2_switch", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of CLB listener.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of this CLB listener rule.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler", value)

    @property
    @pulumi.getter(name="sessionExpireTime")
    def session_expire_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "session_expire_time")

    @session_expire_time.setter
    def session_expire_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_expire_time", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Url of the listener rule.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class ListenerRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_ca_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_ssl_mode: Optional[pulumi.Input[str]] = None,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forward_type: Optional[pulumi.Input[str]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_http_code: Optional[pulumi.Input[int]] = None,
                 health_check_http_domain: Optional[pulumi.Input[str]] = None,
                 health_check_http_method: Optional[pulumi.Input[str]] = None,
                 health_check_http_path: Optional[pulumi.Input[str]] = None,
                 health_check_interval_time: Optional[pulumi.Input[int]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_time_out: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 http2_switch: Optional[pulumi.Input[bool]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input[bool]] = None,
                 scheduler: Optional[pulumi.Input[str]] = None,
                 session_expire_time: Optional[pulumi.Input[int]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a CLB listener rule.

        > **NOTE:** This resource only be applied to the HTTP or HTTPS listeners.

        ## Example Usage

        ### Create a single domain listener rule

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.clb.ListenerRule("example",
            certificate_ca_id="VfqO4zkB",
            certificate_id="VjANRdz8",
            certificate_ssl_mode="MUTUAL",
            clb_id="lb-k2zjp9lv",
            domain="example.com",
            health_check_health_num=3,
            health_check_http_code=2,
            health_check_http_domain="check.com",
            health_check_http_method="GET",
            health_check_http_path="/",
            health_check_interval_time=5,
            health_check_switch=True,
            health_check_unhealth_num=3,
            listener_id="lbl-hh141sn9",
            scheduler="WRR",
            session_expire_time=30,
            url="/")
        ```
        <!--End PulumiCodeChooser -->

        ### Create a listener rule for domain lists

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.clb.ListenerRule("example",
            clb_id="lb-k2zjp9lv",
            domains=[
                "example1.com",
                "example2.com",
            ],
            health_check_health_num=3,
            health_check_http_code=2,
            health_check_http_domain="check.com",
            health_check_http_method="GET",
            health_check_http_path="/",
            health_check_interval_time=5,
            health_check_switch=True,
            health_check_unhealth_num=3,
            listener_id="lbl-hh141sn9",
            scheduler="WRR",
            url="/")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLB listener rule can be imported using the id (version >= 1.47.0), e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/listenerRule:ListenerRule example lb-k2zjp9lv#lbl-hh141sn9#loc-agg236ys
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_ca_id: ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] certificate_id: ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] certificate_ssl_mode: Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] clb_id: ID of CLB instance.
        :param pulumi.Input[str] domain: Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: Domain name list of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[str] forward_type: Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `GRPC`, `GRPCS`, `TRPC`. The default is `HTTP`.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_check_http_code: HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
        :param pulumi.Input[str] health_check_http_domain: Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        :param pulumi.Input[str] health_check_http_method: Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
        :param pulumi.Input[str] health_check_http_path: Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        :param pulumi.Input[int] health_check_interval_time: Interval time of health check. Valid value ranges: (2~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled.
        :param pulumi.Input[int] health_check_time_out: Time out of health check. The value range is 2-60.
        :param pulumi.Input[str] health_check_type: Type of health check. Valid value is `CUSTOM`, `PING`, `TCP`, `HTTP`, `HTTPS`, `GRPC`, `GRPCS`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[bool] http2_switch: Indicate to apply HTTP2.0 protocol or not.
        :param pulumi.Input[str] listener_id: ID of CLB listener.
        :param pulumi.Input[bool] quic: Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
        :param pulumi.Input[str] scheduler: Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] session_expire_time: Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[str] target_type: Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
        :param pulumi.Input[str] url: Url of the listener rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ListenerRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a CLB listener rule.

        > **NOTE:** This resource only be applied to the HTTP or HTTPS listeners.

        ## Example Usage

        ### Create a single domain listener rule

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.clb.ListenerRule("example",
            certificate_ca_id="VfqO4zkB",
            certificate_id="VjANRdz8",
            certificate_ssl_mode="MUTUAL",
            clb_id="lb-k2zjp9lv",
            domain="example.com",
            health_check_health_num=3,
            health_check_http_code=2,
            health_check_http_domain="check.com",
            health_check_http_method="GET",
            health_check_http_path="/",
            health_check_interval_time=5,
            health_check_switch=True,
            health_check_unhealth_num=3,
            listener_id="lbl-hh141sn9",
            scheduler="WRR",
            session_expire_time=30,
            url="/")
        ```
        <!--End PulumiCodeChooser -->

        ### Create a listener rule for domain lists

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.clb.ListenerRule("example",
            clb_id="lb-k2zjp9lv",
            domains=[
                "example1.com",
                "example2.com",
            ],
            health_check_health_num=3,
            health_check_http_code=2,
            health_check_http_domain="check.com",
            health_check_http_method="GET",
            health_check_http_path="/",
            health_check_interval_time=5,
            health_check_switch=True,
            health_check_unhealth_num=3,
            listener_id="lbl-hh141sn9",
            scheduler="WRR",
            url="/")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLB listener rule can be imported using the id (version >= 1.47.0), e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/listenerRule:ListenerRule example lb-k2zjp9lv#lbl-hh141sn9#loc-agg236ys
        ```

        :param str resource_name: The name of the resource.
        :param ListenerRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ListenerRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_ca_id: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 certificate_ssl_mode: Optional[pulumi.Input[str]] = None,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forward_type: Optional[pulumi.Input[str]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_http_code: Optional[pulumi.Input[int]] = None,
                 health_check_http_domain: Optional[pulumi.Input[str]] = None,
                 health_check_http_method: Optional[pulumi.Input[str]] = None,
                 health_check_http_path: Optional[pulumi.Input[str]] = None,
                 health_check_interval_time: Optional[pulumi.Input[int]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_time_out: Optional[pulumi.Input[int]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 http2_switch: Optional[pulumi.Input[bool]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 quic: Optional[pulumi.Input[bool]] = None,
                 scheduler: Optional[pulumi.Input[str]] = None,
                 session_expire_time: Optional[pulumi.Input[int]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ListenerRuleArgs.__new__(ListenerRuleArgs)

            __props__.__dict__["certificate_ca_id"] = certificate_ca_id
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["certificate_ssl_mode"] = certificate_ssl_mode
            if clb_id is None and not opts.urn:
                raise TypeError("Missing required property 'clb_id'")
            __props__.__dict__["clb_id"] = clb_id
            __props__.__dict__["domain"] = domain
            __props__.__dict__["domains"] = domains
            __props__.__dict__["forward_type"] = forward_type
            __props__.__dict__["health_check_health_num"] = health_check_health_num
            __props__.__dict__["health_check_http_code"] = health_check_http_code
            __props__.__dict__["health_check_http_domain"] = health_check_http_domain
            __props__.__dict__["health_check_http_method"] = health_check_http_method
            __props__.__dict__["health_check_http_path"] = health_check_http_path
            __props__.__dict__["health_check_interval_time"] = health_check_interval_time
            __props__.__dict__["health_check_switch"] = health_check_switch
            __props__.__dict__["health_check_time_out"] = health_check_time_out
            __props__.__dict__["health_check_type"] = health_check_type
            __props__.__dict__["health_check_unhealth_num"] = health_check_unhealth_num
            __props__.__dict__["http2_switch"] = http2_switch
            if listener_id is None and not opts.urn:
                raise TypeError("Missing required property 'listener_id'")
            __props__.__dict__["listener_id"] = listener_id
            __props__.__dict__["quic"] = quic
            __props__.__dict__["scheduler"] = scheduler
            __props__.__dict__["session_expire_time"] = session_expire_time
            __props__.__dict__["target_type"] = target_type
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["rule_id"] = None
        super(ListenerRule, __self__).__init__(
            'tencentcloud:Clb/listenerRule:ListenerRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_ca_id: Optional[pulumi.Input[str]] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            certificate_ssl_mode: Optional[pulumi.Input[str]] = None,
            clb_id: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            forward_type: Optional[pulumi.Input[str]] = None,
            health_check_health_num: Optional[pulumi.Input[int]] = None,
            health_check_http_code: Optional[pulumi.Input[int]] = None,
            health_check_http_domain: Optional[pulumi.Input[str]] = None,
            health_check_http_method: Optional[pulumi.Input[str]] = None,
            health_check_http_path: Optional[pulumi.Input[str]] = None,
            health_check_interval_time: Optional[pulumi.Input[int]] = None,
            health_check_switch: Optional[pulumi.Input[bool]] = None,
            health_check_time_out: Optional[pulumi.Input[int]] = None,
            health_check_type: Optional[pulumi.Input[str]] = None,
            health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
            http2_switch: Optional[pulumi.Input[bool]] = None,
            listener_id: Optional[pulumi.Input[str]] = None,
            quic: Optional[pulumi.Input[bool]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            scheduler: Optional[pulumi.Input[str]] = None,
            session_expire_time: Optional[pulumi.Input[int]] = None,
            target_type: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'ListenerRule':
        """
        Get an existing ListenerRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_ca_id: ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] certificate_id: ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] certificate_ssl_mode: Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
        :param pulumi.Input[str] clb_id: ID of CLB instance.
        :param pulumi.Input[str] domain: Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: Domain name list of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[str] forward_type: Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `GRPC`, `GRPCS`, `TRPC`. The default is `HTTP`.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] health_check_http_code: HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
        :param pulumi.Input[str] health_check_http_domain: Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        :param pulumi.Input[str] health_check_http_method: Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
        :param pulumi.Input[str] health_check_http_path: Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        :param pulumi.Input[int] health_check_interval_time: Interval time of health check. Valid value ranges: (2~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled.
        :param pulumi.Input[int] health_check_time_out: Time out of health check. The value range is 2-60.
        :param pulumi.Input[str] health_check_type: Type of health check. Valid value is `CUSTOM`, `PING`, `TCP`, `HTTP`, `HTTPS`, `GRPC`, `GRPCS`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[bool] http2_switch: Indicate to apply HTTP2.0 protocol or not.
        :param pulumi.Input[str] listener_id: ID of CLB listener.
        :param pulumi.Input[bool] quic: Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
        :param pulumi.Input[str] rule_id: ID of this CLB listener rule.
        :param pulumi.Input[str] scheduler: Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[int] session_expire_time: Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        :param pulumi.Input[str] target_type: Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
        :param pulumi.Input[str] url: Url of the listener rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ListenerRuleState.__new__(_ListenerRuleState)

        __props__.__dict__["certificate_ca_id"] = certificate_ca_id
        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["certificate_ssl_mode"] = certificate_ssl_mode
        __props__.__dict__["clb_id"] = clb_id
        __props__.__dict__["domain"] = domain
        __props__.__dict__["domains"] = domains
        __props__.__dict__["forward_type"] = forward_type
        __props__.__dict__["health_check_health_num"] = health_check_health_num
        __props__.__dict__["health_check_http_code"] = health_check_http_code
        __props__.__dict__["health_check_http_domain"] = health_check_http_domain
        __props__.__dict__["health_check_http_method"] = health_check_http_method
        __props__.__dict__["health_check_http_path"] = health_check_http_path
        __props__.__dict__["health_check_interval_time"] = health_check_interval_time
        __props__.__dict__["health_check_switch"] = health_check_switch
        __props__.__dict__["health_check_time_out"] = health_check_time_out
        __props__.__dict__["health_check_type"] = health_check_type
        __props__.__dict__["health_check_unhealth_num"] = health_check_unhealth_num
        __props__.__dict__["http2_switch"] = http2_switch
        __props__.__dict__["listener_id"] = listener_id
        __props__.__dict__["quic"] = quic
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["scheduler"] = scheduler
        __props__.__dict__["session_expire_time"] = session_expire_time
        __props__.__dict__["target_type"] = target_type
        __props__.__dict__["url"] = url
        return ListenerRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateCaId")
    def certificate_ca_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
        """
        return pulumi.get(self, "certificate_ca_id")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateSslMode")
    def certificate_ssl_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
        """
        return pulumi.get(self, "certificate_ssl_mode")

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> pulumi.Output[str]:
        """
        ID of CLB instance.
        """
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Sequence[str]]:
        """
        Domain name list of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> pulumi.Output[str]:
        """
        Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `GRPC`, `GRPCS`, `TRPC`. The default is `HTTP`.
        """
        return pulumi.get(self, "forward_type")

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> pulumi.Output[int]:
        """
        Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_health_num")

    @property
    @pulumi.getter(name="healthCheckHttpCode")
    def health_check_http_code(self) -> pulumi.Output[int]:
        """
        HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
        """
        return pulumi.get(self, "health_check_http_code")

    @property
    @pulumi.getter(name="healthCheckHttpDomain")
    def health_check_http_domain(self) -> pulumi.Output[str]:
        """
        Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        """
        return pulumi.get(self, "health_check_http_domain")

    @property
    @pulumi.getter(name="healthCheckHttpMethod")
    def health_check_http_method(self) -> pulumi.Output[str]:
        """
        Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
        """
        return pulumi.get(self, "health_check_http_method")

    @property
    @pulumi.getter(name="healthCheckHttpPath")
    def health_check_http_path(self) -> pulumi.Output[str]:
        """
        Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
        """
        return pulumi.get(self, "health_check_http_path")

    @property
    @pulumi.getter(name="healthCheckIntervalTime")
    def health_check_interval_time(self) -> pulumi.Output[int]:
        """
        Interval time of health check. Valid value ranges: (2~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_interval_time")

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> pulumi.Output[bool]:
        """
        Indicates whether health check is enabled.
        """
        return pulumi.get(self, "health_check_switch")

    @property
    @pulumi.getter(name="healthCheckTimeOut")
    def health_check_time_out(self) -> pulumi.Output[int]:
        """
        Time out of health check. The value range is 2-60.
        """
        return pulumi.get(self, "health_check_time_out")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> pulumi.Output[str]:
        """
        Type of health check. Valid value is `CUSTOM`, `PING`, `TCP`, `HTTP`, `HTTPS`, `GRPC`, `GRPCS`.
        """
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> pulumi.Output[int]:
        """
        Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @property
    @pulumi.getter(name="http2Switch")
    def http2_switch(self) -> pulumi.Output[bool]:
        """
        Indicate to apply HTTP2.0 protocol or not.
        """
        return pulumi.get(self, "http2_switch")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[str]:
        """
        ID of CLB listener.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def quic(self) -> pulumi.Output[bool]:
        """
        Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
        """
        return pulumi.get(self, "quic")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        ID of this CLB listener rule.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def scheduler(self) -> pulumi.Output[Optional[str]]:
        """
        Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter(name="sessionExpireTime")
    def session_expire_time(self) -> pulumi.Output[Optional[int]]:
        """
        Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `Clb.ListenerRule`.
        """
        return pulumi.get(self, "session_expire_time")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[Optional[str]]:
        """
        Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Url of the listener rule.
        """
        return pulumi.get(self, "url")

