# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ListenerDefaultDomainArgs', 'ListenerDefaultDomain']

@pulumi.input_type
class ListenerDefaultDomainArgs:
    def __init__(__self__, *,
                 clb_id: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 listener_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ListenerDefaultDomain resource.
        :param pulumi.Input[str] clb_id: ID of CLB instance.
        :param pulumi.Input[str] domain: Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[str] listener_id: ID of CLB listener.
        """
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "listener_id", listener_id)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> pulumi.Input[str]:
        """
        ID of CLB instance.
        """
        return pulumi.get(self, "clb_id")

    @clb_id.setter
    def clb_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "clb_id", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Input[str]:
        """
        ID of CLB listener.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_id", value)


@pulumi.input_type
class _ListenerDefaultDomainState:
    def __init__(__self__, *,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ListenerDefaultDomain resources.
        :param pulumi.Input[str] clb_id: ID of CLB instance.
        :param pulumi.Input[str] domain: Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[str] listener_id: ID of CLB listener.
        :param pulumi.Input[str] rule_id: ID of this CLB listener rule.
        """
        if clb_id is not None:
            pulumi.set(__self__, "clb_id", clb_id)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of CLB instance.
        """
        return pulumi.get(self, "clb_id")

    @clb_id.setter
    def clb_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clb_id", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of CLB listener.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of this CLB listener rule.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)


class ListenerDefaultDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to set clb listener default domain

        ## Example Usage

        ### Set default domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.clb.ListenerDefaultDomain("example",
            clb_id="lb-g1miv1ok",
            domain="3.com",
            listener_id="lbl-duilx5qm")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLB listener default domain can be imported using the id (version >= 1.47.0), e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/listenerDefaultDomain:ListenerDefaultDomain example lb-k2zjp9lv#lbl-hh141sn9
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] clb_id: ID of CLB instance.
        :param pulumi.Input[str] domain: Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[str] listener_id: ID of CLB listener.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ListenerDefaultDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to set clb listener default domain

        ## Example Usage

        ### Set default domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.clb.ListenerDefaultDomain("example",
            clb_id="lb-g1miv1ok",
            domain="3.com",
            listener_id="lbl-duilx5qm")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLB listener default domain can be imported using the id (version >= 1.47.0), e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/listenerDefaultDomain:ListenerDefaultDomain example lb-k2zjp9lv#lbl-hh141sn9
        ```

        :param str resource_name: The name of the resource.
        :param ListenerDefaultDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ListenerDefaultDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ListenerDefaultDomainArgs.__new__(ListenerDefaultDomainArgs)

            if clb_id is None and not opts.urn:
                raise TypeError("Missing required property 'clb_id'")
            __props__.__dict__["clb_id"] = clb_id
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            if listener_id is None and not opts.urn:
                raise TypeError("Missing required property 'listener_id'")
            __props__.__dict__["listener_id"] = listener_id
            __props__.__dict__["rule_id"] = None
        super(ListenerDefaultDomain, __self__).__init__(
            'tencentcloud:Clb/listenerDefaultDomain:ListenerDefaultDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            clb_id: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            listener_id: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None) -> 'ListenerDefaultDomain':
        """
        Get an existing ListenerDefaultDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] clb_id: ID of CLB instance.
        :param pulumi.Input[str] domain: Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        :param pulumi.Input[str] listener_id: ID of CLB listener.
        :param pulumi.Input[str] rule_id: ID of this CLB listener rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ListenerDefaultDomainState.__new__(_ListenerDefaultDomainState)

        __props__.__dict__["clb_id"] = clb_id
        __props__.__dict__["domain"] = domain
        __props__.__dict__["listener_id"] = listener_id
        __props__.__dict__["rule_id"] = rule_id
        return ListenerDefaultDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> pulumi.Output[str]:
        """
        ID of CLB instance.
        """
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[str]:
        """
        ID of CLB listener.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        ID of this CLB listener rule.
        """
        return pulumi.get(self, "rule_id")

