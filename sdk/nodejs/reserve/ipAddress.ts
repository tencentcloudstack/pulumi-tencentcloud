// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a vpc reserve ip addresses
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const reserveIp = new tencentcloud.reserve.IpAddress("reserveIp", {
 *     description: "description",
 *     ipAddress: "10.0.0.13",
 *     subnetId: "xxxxxx",
 *     tags: {
 *         test1: "test1",
 *     },
 *     vpcId: "xxxxxx",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * vpc reserve_ip_addresses can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Reserve/ipAddress:IpAddress reserve_ip_addresses ${vpcId}#${reserveIpId}
 * ```
 */
export class IpAddress extends pulumi.CustomResource {
    /**
     * Get an existing IpAddress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpAddressState, opts?: pulumi.CustomResourceOptions): IpAddress {
        return new IpAddress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Reserve/ipAddress:IpAddress';

    /**
     * Returns true if the given object is an instance of IpAddress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpAddress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpAddress.__pulumiType;
    }

    /**
     * Created time.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The IP description is retained on the intranet.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specify the reserved IP address of the intranet for which the IP application is requested.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * Ip type for product application.
     */
    public /*out*/ readonly ipType!: pulumi.Output<number>;
    /**
     * The IP name is reserved for the intranet.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Reserve ip ID.
     */
    public /*out*/ readonly reserveIpId!: pulumi.Output<string>;
    /**
     * The intranet retains the resource instance ID bound to the IPs.
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    /**
     * Binding status.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Subnet ID.
     */
    public readonly subnetId!: pulumi.Output<string | undefined>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * VPC unique ID.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a IpAddress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpAddressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpAddressArgs | IpAddressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpAddressState | undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipType"] = state ? state.ipType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reserveIpId"] = state ? state.reserveIpId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as IpAddressArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["ipType"] = undefined /*out*/;
            resourceInputs["reserveIpId"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpAddress.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpAddress resources.
 */
export interface IpAddressState {
    /**
     * Created time.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * The IP description is retained on the intranet.
     */
    description?: pulumi.Input<string>;
    /**
     * Specify the reserved IP address of the intranet for which the IP application is requested.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Ip type for product application.
     */
    ipType?: pulumi.Input<number>;
    /**
     * The IP name is reserved for the intranet.
     */
    name?: pulumi.Input<string>;
    /**
     * Reserve ip ID.
     */
    reserveIpId?: pulumi.Input<string>;
    /**
     * The intranet retains the resource instance ID bound to the IPs.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Binding status.
     */
    state?: pulumi.Input<string>;
    /**
     * Subnet ID.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * VPC unique ID.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpAddress resource.
 */
export interface IpAddressArgs {
    /**
     * The IP description is retained on the intranet.
     */
    description?: pulumi.Input<string>;
    /**
     * Specify the reserved IP address of the intranet for which the IP application is requested.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The IP name is reserved for the intranet.
     */
    name?: pulumi.Input<string>;
    /**
     * Subnet ID.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * VPC unique ID.
     */
    vpcId: pulumi.Input<string>;
}
