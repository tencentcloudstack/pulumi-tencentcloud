// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of redis clusters
 *
 * ## Example Usage
 *
 * ### Query all instance
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const clusters = tencentcloud.Redis.getClusters({});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Also Support the following query conditions
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const clusters = tencentcloud.Redis.getClusters({
 *     autoRenewFlags: [
 *         0,
 *         1,
 *         2,
 *     ],
 *     clusterName: "crs-cdc-9nyfki8h",
 *     dedicatedClusterId: "cluster-0astoh6a",
 *     projectIds: [
 *         0,
 *         1,
 *     ],
 *     redisClusterIds: ["crs-cdc-9nyfki8h"],
 *     statuses: [
 *         0,
 *         1,
 *         2,
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getClusters(args?: GetClustersArgs, opts?: pulumi.InvokeOptions): Promise<GetClustersResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Redis/getClusters:getClusters", {
        "autoRenewFlags": args.autoRenewFlags,
        "clusterName": args.clusterName,
        "dedicatedClusterId": args.dedicatedClusterId,
        "projectIds": args.projectIds,
        "redisClusterIds": args.redisClusterIds,
        "resultOutputFile": args.resultOutputFile,
        "statuses": args.statuses,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusters.
 */
export interface GetClustersArgs {
    /**
     * Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
     */
    autoRenewFlags?: number[];
    /**
     * Cluster name.
     */
    clusterName?: string;
    /**
     * Dedicated cluster Id.
     */
    dedicatedClusterId?: string;
    /**
     * Project Ids.
     */
    projectIds?: number[];
    /**
     * Redis Cluster Ids.
     */
    redisClusterIds?: string[];
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * Cluster status: 1- In process, 2- Running, 3- Isolated.
     */
    statuses?: number[];
}

/**
 * A collection of values returned by getClusters.
 */
export interface GetClustersResult {
    /**
     * Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
     */
    readonly autoRenewFlags?: number[];
    /**
     * Cluster name.
     */
    readonly clusterName?: string;
    /**
     * Dedicated cluster Id.
     */
    readonly dedicatedClusterId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly projectIds?: number[];
    readonly redisClusterIds?: string[];
    /**
     * .
     */
    readonly resources: outputs.Redis.GetClustersResource[];
    readonly resultOutputFile?: string;
    /**
     * Cluster status: 1- In process, 2- Running, 3- Isolated.
     */
    readonly statuses?: number[];
}
/**
 * Use this data source to query detailed information of redis clusters
 *
 * ## Example Usage
 *
 * ### Query all instance
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const clusters = tencentcloud.Redis.getClusters({});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Also Support the following query conditions
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const clusters = tencentcloud.Redis.getClusters({
 *     autoRenewFlags: [
 *         0,
 *         1,
 *         2,
 *     ],
 *     clusterName: "crs-cdc-9nyfki8h",
 *     dedicatedClusterId: "cluster-0astoh6a",
 *     projectIds: [
 *         0,
 *         1,
 *     ],
 *     redisClusterIds: ["crs-cdc-9nyfki8h"],
 *     statuses: [
 *         0,
 *         1,
 *         2,
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getClustersOutput(args?: GetClustersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClustersResult> {
    return pulumi.output(args).apply((a: any) => getClusters(a, opts))
}

/**
 * A collection of arguments for invoking getClusters.
 */
export interface GetClustersOutputArgs {
    /**
     * Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
     */
    autoRenewFlags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Cluster name.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Dedicated cluster Id.
     */
    dedicatedClusterId?: pulumi.Input<string>;
    /**
     * Project Ids.
     */
    projectIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Redis Cluster Ids.
     */
    redisClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * Cluster status: 1- In process, 2- Running, 3- Isolated.
     */
    statuses?: pulumi.Input<pulumi.Input<number>[]>;
}
