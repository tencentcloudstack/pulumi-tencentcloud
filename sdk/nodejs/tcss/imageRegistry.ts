// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a tcss image registry
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.tcss.ImageRegistry("example", {
 *     connDetectConfigs: [{
 *         quuid: "backend",
 *         uuid: "backend",
 *     }],
 *     needScan: true,
 *     netType: "public",
 *     password: "Password@demo",
 *     registryRegion: "default",
 *     registryType: "harbor",
 *     registryVersion: "V1",
 *     url: "https://example.com",
 *     username: "root",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class ImageRegistry extends pulumi.CustomResource {
    /**
     * Get an existing ImageRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageRegistryState, opts?: pulumi.CustomResourceOptions): ImageRegistry {
        return new ImageRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tcss/imageRegistry:ImageRegistry';

    /**
     * Returns true if the given object is an instance of ImageRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageRegistry.__pulumiType;
    }

    /**
     * Connectivity detection configuration.
     */
    public readonly connDetectConfigs!: pulumi.Output<outputs.Tcss.ImageRegistryConnDetectConfig[] | undefined>;
    /**
     * Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
     */
    public readonly insecure!: pulumi.Output<number | undefined>;
    /**
     * Repository name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether to scan the latest image.
     */
    public readonly needScan!: pulumi.Output<boolean | undefined>;
    /**
     * Network type, which can be `public` (public network).
     */
    public readonly netType!: pulumi.Output<string>;
    /**
     * Password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Region. Default value: `default`.
     */
    public readonly registryRegion!: pulumi.Output<string | undefined>;
    /**
     * Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
     */
    public readonly registryType!: pulumi.Output<string>;
    /**
     * Repository version.
     */
    public readonly registryVersion!: pulumi.Output<string | undefined>;
    /**
     * Speed limit.
     */
    public readonly speedLimit!: pulumi.Output<number | undefined>;
    /**
     * Sync status.
     */
    public /*out*/ readonly syncStatus!: pulumi.Output<string>;
    /**
     * Repository URL.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * Username.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ImageRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageRegistryArgs | ImageRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageRegistryState | undefined;
            resourceInputs["connDetectConfigs"] = state ? state.connDetectConfigs : undefined;
            resourceInputs["insecure"] = state ? state.insecure : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["needScan"] = state ? state.needScan : undefined;
            resourceInputs["netType"] = state ? state.netType : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["registryRegion"] = state ? state.registryRegion : undefined;
            resourceInputs["registryType"] = state ? state.registryType : undefined;
            resourceInputs["registryVersion"] = state ? state.registryVersion : undefined;
            resourceInputs["speedLimit"] = state ? state.speedLimit : undefined;
            resourceInputs["syncStatus"] = state ? state.syncStatus : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ImageRegistryArgs | undefined;
            if ((!args || args.netType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netType'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.registryType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryType'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["connDetectConfigs"] = args ? args.connDetectConfigs : undefined;
            resourceInputs["insecure"] = args ? args.insecure : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["needScan"] = args ? args.needScan : undefined;
            resourceInputs["netType"] = args ? args.netType : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["registryRegion"] = args ? args.registryRegion : undefined;
            resourceInputs["registryType"] = args ? args.registryType : undefined;
            resourceInputs["registryVersion"] = args ? args.registryVersion : undefined;
            resourceInputs["speedLimit"] = args ? args.speedLimit : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["syncStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ImageRegistry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImageRegistry resources.
 */
export interface ImageRegistryState {
    /**
     * Connectivity detection configuration.
     */
    connDetectConfigs?: pulumi.Input<pulumi.Input<inputs.Tcss.ImageRegistryConnDetectConfig>[]>;
    /**
     * Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
     */
    insecure?: pulumi.Input<number>;
    /**
     * Repository name.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to scan the latest image.
     */
    needScan?: pulumi.Input<boolean>;
    /**
     * Network type, which can be `public` (public network).
     */
    netType?: pulumi.Input<string>;
    /**
     * Password.
     */
    password?: pulumi.Input<string>;
    /**
     * Region. Default value: `default`.
     */
    registryRegion?: pulumi.Input<string>;
    /**
     * Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
     */
    registryType?: pulumi.Input<string>;
    /**
     * Repository version.
     */
    registryVersion?: pulumi.Input<string>;
    /**
     * Speed limit.
     */
    speedLimit?: pulumi.Input<number>;
    /**
     * Sync status.
     */
    syncStatus?: pulumi.Input<string>;
    /**
     * Repository URL.
     */
    url?: pulumi.Input<string>;
    /**
     * Username.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImageRegistry resource.
 */
export interface ImageRegistryArgs {
    /**
     * Connectivity detection configuration.
     */
    connDetectConfigs?: pulumi.Input<pulumi.Input<inputs.Tcss.ImageRegistryConnDetectConfig>[]>;
    /**
     * Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
     */
    insecure?: pulumi.Input<number>;
    /**
     * Repository name.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to scan the latest image.
     */
    needScan?: pulumi.Input<boolean>;
    /**
     * Network type, which can be `public` (public network).
     */
    netType: pulumi.Input<string>;
    /**
     * Password.
     */
    password: pulumi.Input<string>;
    /**
     * Region. Default value: `default`.
     */
    registryRegion?: pulumi.Input<string>;
    /**
     * Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
     */
    registryType: pulumi.Input<string>;
    /**
     * Repository version.
     */
    registryVersion?: pulumi.Input<string>;
    /**
     * Speed limit.
     */
    speedLimit?: pulumi.Input<number>;
    /**
     * Repository URL.
     */
    url: pulumi.Input<string>;
    /**
     * Username.
     */
    username: pulumi.Input<string>;
}
