// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a organization orgMember
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const orgMember = new tencentcloud.organization.OrgMember("orgMember", {
 *     nodeId: 2003721,
 *     permissionIds: [
 *         1,
 *         2,
 *         3,
 *         4,
 *     ],
 *     policyType: "Financial",
 *     remark: "for terraform test",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * organization org_member can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Organization/orgMember:OrgMember org_member orgMember_id
 * ```
 */
export class OrgMember extends pulumi.CustomResource {
    /**
     * Get an existing OrgMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgMemberState, opts?: pulumi.CustomResourceOptions): OrgMember {
        return new OrgMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Organization/orgMember:OrgMember';

    /**
     * Returns true if the given object is an instance of OrgMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgMember.__pulumiType;
    }

    /**
     * Member creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Whether to allow member to leave the organization.Valid values:- `Allow`.- `Denied`.
     */
    public /*out*/ readonly isAllowQuit!: pulumi.Output<string>;
    /**
     * Member Type.Valid values:- `Invite`: The member is invited.- `Create`: The member is created.
     */
    public /*out*/ readonly memberType!: pulumi.Output<string>;
    /**
     * Member name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Organization node ID.
     */
    public readonly nodeId!: pulumi.Output<number>;
    /**
     * Organization node name.
     */
    public /*out*/ readonly nodeName!: pulumi.Output<string>;
    /**
     * Financial management permissions.
     */
    public /*out*/ readonly orgPermissions!: pulumi.Output<outputs.Organization.OrgMemberOrgPermission[]>;
    /**
     * Organization policy name.
     */
    public /*out*/ readonly orgPolicyName!: pulumi.Output<string>;
    /**
     * The member name which is payment account on behalf.
     */
    public /*out*/ readonly payName!: pulumi.Output<string>;
    /**
     * The uin which is payment account on behalf.When `PermissionIds` contains 7, is required.
     */
    public readonly payUin!: pulumi.Output<string | undefined>;
    /**
     * Financial management permission IDs.Valid values:- `1`: View bill.- `2`: Check balance.- `3`: Fund transfer.- `4`: Combine bill.- `5`: Issue an invoice.- `6`: Inherit discount.- `7`: Pay on behalf.value 1,2 is required.
     */
    public readonly permissionIds!: pulumi.Output<number[]>;
    /**
     * Organization policy type.- `Financial`: Financial management policy.
     */
    public readonly policyType!: pulumi.Output<string>;
    /**
     * Create member record ID.When create failed and needs to be recreated, is required.
     */
    public readonly recordId!: pulumi.Output<number | undefined>;
    /**
     * Notes.
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Member update time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a OrgMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgMemberArgs | OrgMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgMemberState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["isAllowQuit"] = state ? state.isAllowQuit : undefined;
            resourceInputs["memberType"] = state ? state.memberType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["nodeName"] = state ? state.nodeName : undefined;
            resourceInputs["orgPermissions"] = state ? state.orgPermissions : undefined;
            resourceInputs["orgPolicyName"] = state ? state.orgPolicyName : undefined;
            resourceInputs["payName"] = state ? state.payName : undefined;
            resourceInputs["payUin"] = state ? state.payUin : undefined;
            resourceInputs["permissionIds"] = state ? state.permissionIds : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["recordId"] = state ? state.recordId : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as OrgMemberArgs | undefined;
            if ((!args || args.nodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeId'");
            }
            if ((!args || args.permissionIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionIds'");
            }
            if ((!args || args.policyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyType'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["payUin"] = args ? args.payUin : undefined;
            resourceInputs["permissionIds"] = args ? args.permissionIds : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["recordId"] = args ? args.recordId : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["isAllowQuit"] = undefined /*out*/;
            resourceInputs["memberType"] = undefined /*out*/;
            resourceInputs["nodeName"] = undefined /*out*/;
            resourceInputs["orgPermissions"] = undefined /*out*/;
            resourceInputs["orgPolicyName"] = undefined /*out*/;
            resourceInputs["payName"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgMember.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgMember resources.
 */
export interface OrgMemberState {
    /**
     * Member creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Whether to allow member to leave the organization.Valid values:- `Allow`.- `Denied`.
     */
    isAllowQuit?: pulumi.Input<string>;
    /**
     * Member Type.Valid values:- `Invite`: The member is invited.- `Create`: The member is created.
     */
    memberType?: pulumi.Input<string>;
    /**
     * Member name.
     */
    name?: pulumi.Input<string>;
    /**
     * Organization node ID.
     */
    nodeId?: pulumi.Input<number>;
    /**
     * Organization node name.
     */
    nodeName?: pulumi.Input<string>;
    /**
     * Financial management permissions.
     */
    orgPermissions?: pulumi.Input<pulumi.Input<inputs.Organization.OrgMemberOrgPermission>[]>;
    /**
     * Organization policy name.
     */
    orgPolicyName?: pulumi.Input<string>;
    /**
     * The member name which is payment account on behalf.
     */
    payName?: pulumi.Input<string>;
    /**
     * The uin which is payment account on behalf.When `PermissionIds` contains 7, is required.
     */
    payUin?: pulumi.Input<string>;
    /**
     * Financial management permission IDs.Valid values:- `1`: View bill.- `2`: Check balance.- `3`: Fund transfer.- `4`: Combine bill.- `5`: Issue an invoice.- `6`: Inherit discount.- `7`: Pay on behalf.value 1,2 is required.
     */
    permissionIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Organization policy type.- `Financial`: Financial management policy.
     */
    policyType?: pulumi.Input<string>;
    /**
     * Create member record ID.When create failed and needs to be recreated, is required.
     */
    recordId?: pulumi.Input<number>;
    /**
     * Notes.
     */
    remark?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Member update time.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgMember resource.
 */
export interface OrgMemberArgs {
    /**
     * Member name.
     */
    name?: pulumi.Input<string>;
    /**
     * Organization node ID.
     */
    nodeId: pulumi.Input<number>;
    /**
     * The uin which is payment account on behalf.When `PermissionIds` contains 7, is required.
     */
    payUin?: pulumi.Input<string>;
    /**
     * Financial management permission IDs.Valid values:- `1`: View bill.- `2`: Check balance.- `3`: Fund transfer.- `4`: Combine bill.- `5`: Issue an invoice.- `6`: Inherit discount.- `7`: Pay on behalf.value 1,2 is required.
     */
    permissionIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Organization policy type.- `Financial`: Financial management policy.
     */
    policyType: pulumi.Input<string>;
    /**
     * Create member record ID.When create failed and needs to be recreated, is required.
     */
    recordId?: pulumi.Input<number>;
    /**
     * Notes.
     */
    remark?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}
