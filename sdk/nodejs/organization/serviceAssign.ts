// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a organization service assign
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.organization.ServiceAssign("example", {
 *     managementScope: 1,
 *     memberUins: [
 *         100037235241,
 *         100033738111,
 *     ],
 *     serviceId: 15,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.organization.ServiceAssign("example", {
 *     managementScope: 2,
 *     managementScopeNodeIds: [
 *         2024256,
 *         2024259,
 *     ],
 *     managementScopeUins: [
 *         100019287759,
 *         100020537485,
 *     ],
 *     memberUins: [
 *         100013415241,
 *         100078908111,
 *     ],
 *     serviceId: 15,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * organization service assign can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Organization/serviceAssign:ServiceAssign example 15
 * ```
 */
export class ServiceAssign extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAssign resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceAssignState, opts?: pulumi.CustomResourceOptions): ServiceAssign {
        return new ServiceAssign(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Organization/serviceAssign:ServiceAssign';

    /**
     * Returns true if the given object is an instance of ServiceAssign.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceAssign {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAssign.__pulumiType;
    }

    /**
     * Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
     */
    public readonly managementScope!: pulumi.Output<number>;
    /**
     * ID list of the managed departments. This parameter is valid when `managementScope` is `2`.
     */
    public readonly managementScopeNodeIds!: pulumi.Output<number[] | undefined>;
    /**
     * Uin list of the managed members. This parameter is valid when `managementScope` is `2`.
     */
    public readonly managementScopeUins!: pulumi.Output<number[] | undefined>;
    /**
     * Uin list of the delegated admins, Including up to 20 items.
     */
    public readonly memberUins!: pulumi.Output<number[]>;
    /**
     * Organization service ID.
     */
    public readonly serviceId!: pulumi.Output<number>;

    /**
     * Create a ServiceAssign resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceAssignArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceAssignArgs | ServiceAssignState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceAssignState | undefined;
            resourceInputs["managementScope"] = state ? state.managementScope : undefined;
            resourceInputs["managementScopeNodeIds"] = state ? state.managementScopeNodeIds : undefined;
            resourceInputs["managementScopeUins"] = state ? state.managementScopeUins : undefined;
            resourceInputs["memberUins"] = state ? state.memberUins : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
        } else {
            const args = argsOrState as ServiceAssignArgs | undefined;
            if ((!args || args.memberUins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memberUins'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["managementScope"] = args ? args.managementScope : undefined;
            resourceInputs["managementScopeNodeIds"] = args ? args.managementScopeNodeIds : undefined;
            resourceInputs["managementScopeUins"] = args ? args.managementScopeUins : undefined;
            resourceInputs["memberUins"] = args ? args.memberUins : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceAssign.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceAssign resources.
 */
export interface ServiceAssignState {
    /**
     * Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
     */
    managementScope?: pulumi.Input<number>;
    /**
     * ID list of the managed departments. This parameter is valid when `managementScope` is `2`.
     */
    managementScopeNodeIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Uin list of the managed members. This parameter is valid when `managementScope` is `2`.
     */
    managementScopeUins?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Uin list of the delegated admins, Including up to 20 items.
     */
    memberUins?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Organization service ID.
     */
    serviceId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ServiceAssign resource.
 */
export interface ServiceAssignArgs {
    /**
     * Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
     */
    managementScope?: pulumi.Input<number>;
    /**
     * ID list of the managed departments. This parameter is valid when `managementScope` is `2`.
     */
    managementScopeNodeIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Uin list of the managed members. This parameter is valid when `managementScope` is `2`.
     */
    managementScopeUins?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Uin list of the delegated admins, Including up to 20 items.
     */
    memberUins: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Organization service ID.
     */
    serviceId: pulumi.Input<number>;
}
