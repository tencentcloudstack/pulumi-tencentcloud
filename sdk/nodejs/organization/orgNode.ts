// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a organization orgNode
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const orgNode = new tencentcloud.organization.OrgNode("orgNode", {
 *     parentNodeId: 2003721,
 *     remark: "for terraform test",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * organization org_node can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Organization/orgNode:OrgNode org_node orgNode_id
 * ```
 */
export class OrgNode extends pulumi.CustomResource {
    /**
     * Get an existing OrgNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgNodeState, opts?: pulumi.CustomResourceOptions): OrgNode {
        return new OrgNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Organization/orgNode:OrgNode';

    /**
     * Returns true if the given object is an instance of OrgNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgNode.__pulumiType;
    }

    /**
     * Node creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Node name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Parent node ID.
     */
    public readonly parentNodeId!: pulumi.Output<number>;
    /**
     * Notes.
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Node update time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a OrgNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgNodeArgs | OrgNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgNodeState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentNodeId"] = state ? state.parentNodeId : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as OrgNodeArgs | undefined;
            if ((!args || args.parentNodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentNodeId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentNodeId"] = args ? args.parentNodeId : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgNode.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgNode resources.
 */
export interface OrgNodeState {
    /**
     * Node creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Node name.
     */
    name?: pulumi.Input<string>;
    /**
     * Parent node ID.
     */
    parentNodeId?: pulumi.Input<number>;
    /**
     * Notes.
     */
    remark?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Node update time.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgNode resource.
 */
export interface OrgNodeArgs {
    /**
     * Node name.
     */
    name?: pulumi.Input<string>;
    /**
     * Parent node ID.
     */
    parentNodeId: pulumi.Input<number>;
    /**
     * Notes.
     */
    remark?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}
