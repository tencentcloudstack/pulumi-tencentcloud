// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a rum project
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const exampleTawInstance = new tencentcloud.rum.TawInstance("exampleTawInstance", {
 *     areaId: 1,
 *     chargeType: 1,
 *     dataRetentionDays: 30,
 *     instanceName: "tf-example",
 *     instanceDesc: "desc.",
 *     tags: {
 *         createdBy: "terraform",
 *     },
 * });
 * const exampleProject = new tencentcloud.rum.Project("exampleProject", {
 *     instanceId: exampleTawInstance.id,
 *     rate: "100",
 *     enableUrlGroup: 0,
 *     type: "web",
 *     repo: "https://github.com/xxx",
 *     url: "iac-tf.com",
 *     desc: "desc.",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * rum project can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Rum/project:Project example 139422
 * ```
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Rum/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Create Time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Creator ID.
     */
    public /*out*/ readonly creator!: pulumi.Output<string>;
    /**
     * Description of the created project (optional and up to 1,000 characters).
     */
    public readonly desc!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable aggregation.
     */
    public readonly enableUrlGroup!: pulumi.Output<number>;
    /**
     * Business system ID.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Instance key.
     */
    public /*out*/ readonly instanceKey!: pulumi.Output<string>;
    /**
     * Instance name.
     */
    public /*out*/ readonly instanceName!: pulumi.Output<string>;
    /**
     * Starred status. `1`: yes; `0`: no.
     */
    public /*out*/ readonly isStar!: pulumi.Output<number>;
    /**
     * Unique project key (12 characters).
     */
    public /*out*/ readonly key!: pulumi.Output<string>;
    /**
     * Name of the created project (required and up to 200 characters).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project status (`1`: Creating; `2`: Running; `3`: Abnormal; `4`: Restarting; `5`: Stopping; `6`: Stopped; `7`: Terminating; `8`: Terminated).
     */
    public /*out*/ readonly projectStatus!: pulumi.Output<number>;
    /**
     * Project sampling rate (greater than or equal to 0).
     */
    public readonly rate!: pulumi.Output<string>;
    /**
     * Repository address of the project (optional and up to 256 characters).
     */
    public readonly repo!: pulumi.Output<string | undefined>;
    /**
     * Project type (valid values: `web`, `mp`, `android`, `ios`, `node`, `hippy`, `weex`, `viola`, `rn`).
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Webpage address of the project (optional and up to 256 characters).
     */
    public readonly url!: pulumi.Output<string | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["desc"] = state ? state.desc : undefined;
            resourceInputs["enableUrlGroup"] = state ? state.enableUrlGroup : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceKey"] = state ? state.instanceKey : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["isStar"] = state ? state.isStar : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectStatus"] = state ? state.projectStatus : undefined;
            resourceInputs["rate"] = state ? state.rate : undefined;
            resourceInputs["repo"] = state ? state.repo : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if ((!args || args.enableUrlGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableUrlGroup'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.rate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rate'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["desc"] = args ? args.desc : undefined;
            resourceInputs["enableUrlGroup"] = args ? args.enableUrlGroup : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rate"] = args ? args.rate : undefined;
            resourceInputs["repo"] = args ? args.repo : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["instanceKey"] = undefined /*out*/;
            resourceInputs["instanceName"] = undefined /*out*/;
            resourceInputs["isStar"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["projectStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Create Time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Creator ID.
     */
    creator?: pulumi.Input<string>;
    /**
     * Description of the created project (optional and up to 1,000 characters).
     */
    desc?: pulumi.Input<string>;
    /**
     * Whether to enable aggregation.
     */
    enableUrlGroup?: pulumi.Input<number>;
    /**
     * Business system ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Instance key.
     */
    instanceKey?: pulumi.Input<string>;
    /**
     * Instance name.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * Starred status. `1`: yes; `0`: no.
     */
    isStar?: pulumi.Input<number>;
    /**
     * Unique project key (12 characters).
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the created project (required and up to 200 characters).
     */
    name?: pulumi.Input<string>;
    /**
     * Project status (`1`: Creating; `2`: Running; `3`: Abnormal; `4`: Restarting; `5`: Stopping; `6`: Stopped; `7`: Terminating; `8`: Terminated).
     */
    projectStatus?: pulumi.Input<number>;
    /**
     * Project sampling rate (greater than or equal to 0).
     */
    rate?: pulumi.Input<string>;
    /**
     * Repository address of the project (optional and up to 256 characters).
     */
    repo?: pulumi.Input<string>;
    /**
     * Project type (valid values: `web`, `mp`, `android`, `ios`, `node`, `hippy`, `weex`, `viola`, `rn`).
     */
    type?: pulumi.Input<string>;
    /**
     * Webpage address of the project (optional and up to 256 characters).
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Description of the created project (optional and up to 1,000 characters).
     */
    desc?: pulumi.Input<string>;
    /**
     * Whether to enable aggregation.
     */
    enableUrlGroup: pulumi.Input<number>;
    /**
     * Business system ID.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Name of the created project (required and up to 200 characters).
     */
    name?: pulumi.Input<string>;
    /**
     * Project sampling rate (greater than or equal to 0).
     */
    rate: pulumi.Input<string>;
    /**
     * Repository address of the project (optional and up to 256 characters).
     */
    repo?: pulumi.Input<string>;
    /**
     * Project type (valid values: `web`, `mp`, `android`, `ios`, `node`, `hippy`, `weex`, `viola`, `rn`).
     */
    type: pulumi.Input<string>;
    /**
     * Webpage address of the project (optional and up to 256 characters).
     */
    url?: pulumi.Input<string>;
}
