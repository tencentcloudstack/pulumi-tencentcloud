// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a cls topic.
 *
 * ## Example Usage
 *
 * ### Create a standard cls topic
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const exampleLogset = new tencentcloud.cls.Logset("exampleLogset", {
 *     logsetName: "tf_example",
 *     tags: {
 *         tagKey: "tagValue",
 *     },
 * });
 * const exampleTopic = new tencentcloud.cls.Topic("exampleTopic", {
 *     topicName: "tf_example",
 *     logsetId: exampleLogset.id,
 *     autoSplit: false,
 *     maxSplitPartitions: 20,
 *     partitionCount: 1,
 *     period: 30,
 *     storageType: "hot",
 *     describes: "Test Demo.",
 *     hotPeriod: 10,
 *     tags: {
 *         tagKey: "tagValue",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Create a cls topic with web tracking
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const exampleLogset = new tencentcloud.cls.Logset("exampleLogset", {
 *     logsetName: "tf_example",
 *     tags: {
 *         tagKey: "tagValue",
 *     },
 * });
 * const exampleTopic = new tencentcloud.cls.Topic("exampleTopic", {
 *     topicName: "tf_example",
 *     logsetId: exampleLogset.id,
 *     autoSplit: false,
 *     maxSplitPartitions: 20,
 *     partitionCount: 1,
 *     period: 30,
 *     storageType: "hot",
 *     describes: "Test Demo.",
 *     hotPeriod: 10,
 *     isWebTracking: true,
 *     "extends": {
 *         anonymousAccess: {
 *             operations: [
 *                 "trackLog",
 *                 "realtimeProducer",
 *             ],
 *             conditions: [{
 *                 attributes: "VpcID",
 *                 rule: 1,
 *                 conditionValue: "vpc-ahr3xajx",
 *             }],
 *         },
 *     },
 *     tags: {
 *         tagKey: "tagValue",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * cls topic can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Cls/topic:Topic example 2f5764c1-c833-44c5-84c7-950979b2a278
 * ```
 */
export class Topic extends pulumi.CustomResource {
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicState, opts?: pulumi.CustomResourceOptions): Topic {
        return new Topic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cls/topic:Topic';

    /**
     * Returns true if the given object is an instance of Topic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Topic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Topic.__pulumiType;
    }

    /**
     * Whether to enable automatic split. Default value: true.
     */
    public readonly autoSplit!: pulumi.Output<boolean>;
    /**
     * Log Topic Description.
     */
    public readonly describes!: pulumi.Output<string | undefined>;
    /**
     * Log Subject Extension Information.
     */
    public readonly extends!: pulumi.Output<outputs.Cls.TopicExtends | undefined>;
    /**
     * 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
     */
    public readonly hotPeriod!: pulumi.Output<number>;
    /**
     * No authentication switch. False: closed; True: Enable. The default is false. After activation, anonymous access to the log topic will be supported for specified operations.
     */
    public readonly isWebTracking!: pulumi.Output<boolean>;
    /**
     * Logset ID.
     */
    public readonly logsetId!: pulumi.Output<string>;
    /**
     * Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
     */
    public readonly maxSplitPartitions!: pulumi.Output<number>;
    /**
     * Number of log topic partitions. Default value: 1. Maximum value: 10.
     */
    public readonly partitionCount!: pulumi.Output<number>;
    /**
     * Lifecycle in days. Value range: 1~366. Default value: 30.
     */
    public readonly period!: pulumi.Output<number>;
    /**
     * Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
     */
    public readonly storageType!: pulumi.Output<string>;
    /**
     * Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Log topic name.
     */
    public readonly topicName!: pulumi.Output<string>;

    /**
     * Create a Topic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TopicArgs | TopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TopicState | undefined;
            resourceInputs["autoSplit"] = state ? state.autoSplit : undefined;
            resourceInputs["describes"] = state ? state.describes : undefined;
            resourceInputs["extends"] = state ? state.extends : undefined;
            resourceInputs["hotPeriod"] = state ? state.hotPeriod : undefined;
            resourceInputs["isWebTracking"] = state ? state.isWebTracking : undefined;
            resourceInputs["logsetId"] = state ? state.logsetId : undefined;
            resourceInputs["maxSplitPartitions"] = state ? state.maxSplitPartitions : undefined;
            resourceInputs["partitionCount"] = state ? state.partitionCount : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
        } else {
            const args = argsOrState as TopicArgs | undefined;
            if ((!args || args.logsetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logsetId'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["autoSplit"] = args ? args.autoSplit : undefined;
            resourceInputs["describes"] = args ? args.describes : undefined;
            resourceInputs["extends"] = args ? args.extends : undefined;
            resourceInputs["hotPeriod"] = args ? args.hotPeriod : undefined;
            resourceInputs["isWebTracking"] = args ? args.isWebTracking : undefined;
            resourceInputs["logsetId"] = args ? args.logsetId : undefined;
            resourceInputs["maxSplitPartitions"] = args ? args.maxSplitPartitions : undefined;
            resourceInputs["partitionCount"] = args ? args.partitionCount : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Topic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Topic resources.
 */
export interface TopicState {
    /**
     * Whether to enable automatic split. Default value: true.
     */
    autoSplit?: pulumi.Input<boolean>;
    /**
     * Log Topic Description.
     */
    describes?: pulumi.Input<string>;
    /**
     * Log Subject Extension Information.
     */
    extends?: pulumi.Input<inputs.Cls.TopicExtends>;
    /**
     * 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
     */
    hotPeriod?: pulumi.Input<number>;
    /**
     * No authentication switch. False: closed; True: Enable. The default is false. After activation, anonymous access to the log topic will be supported for specified operations.
     */
    isWebTracking?: pulumi.Input<boolean>;
    /**
     * Logset ID.
     */
    logsetId?: pulumi.Input<string>;
    /**
     * Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
     */
    maxSplitPartitions?: pulumi.Input<number>;
    /**
     * Number of log topic partitions. Default value: 1. Maximum value: 10.
     */
    partitionCount?: pulumi.Input<number>;
    /**
     * Lifecycle in days. Value range: 1~366. Default value: 30.
     */
    period?: pulumi.Input<number>;
    /**
     * Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
     */
    storageType?: pulumi.Input<string>;
    /**
     * Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Log topic name.
     */
    topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Topic resource.
 */
export interface TopicArgs {
    /**
     * Whether to enable automatic split. Default value: true.
     */
    autoSplit?: pulumi.Input<boolean>;
    /**
     * Log Topic Description.
     */
    describes?: pulumi.Input<string>;
    /**
     * Log Subject Extension Information.
     */
    extends?: pulumi.Input<inputs.Cls.TopicExtends>;
    /**
     * 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
     */
    hotPeriod?: pulumi.Input<number>;
    /**
     * No authentication switch. False: closed; True: Enable. The default is false. After activation, anonymous access to the log topic will be supported for specified operations.
     */
    isWebTracking?: pulumi.Input<boolean>;
    /**
     * Logset ID.
     */
    logsetId: pulumi.Input<string>;
    /**
     * Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
     */
    maxSplitPartitions?: pulumi.Input<number>;
    /**
     * Number of log topic partitions. Default value: 1. Maximum value: 10.
     */
    partitionCount?: pulumi.Input<number>;
    /**
     * Lifecycle in days. Value range: 1~366. Default value: 30.
     */
    period?: pulumi.Input<number>;
    /**
     * Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
     */
    storageType?: pulumi.Input<string>;
    /**
     * Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Log topic name.
     */
    topicName: pulumi.Input<string>;
}
