// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a teo teoFunction
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const teoFunction = new tencentcloud.teo.Function("teoFunction", {
 *     content: `    addEventListener('fetch', e => {
 *       const response = new Response('Hello World!!');
 *       e.respondWith(response);
 *     });
 *
 * `,
 *     remark: "test",
 *     zoneId: "zone-2qtuhspy7cr6",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * teo teo_function can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Teo/function:Function teo_function zone_id#function_id
 * ```
 */
export class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionState, opts?: pulumi.CustomResourceOptions): Function {
        return new Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Teo/function:Function';

    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }

    /**
     * Function content, currently only supports JavaScript code, with a maximum size of 5MB.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * Creation time. The time is in Coordinated Universal Time (UTC) and follows the date and time format specified by the ISO 8601 standard.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The default domain name for the function.
     */
    public /*out*/ readonly domain!: pulumi.Output<string>;
    /**
     * ID of the Function.
     */
    public /*out*/ readonly functionId!: pulumi.Output<string>;
    /**
     * Function name. It can only contain lowercase letters, numbers, hyphens, must start and end with a letter or number, and can have a maximum length of 30 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Function description, maximum support of 60 characters.
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * Modification time. The time is in Coordinated Universal Time (UTC) and follows the date and time format specified by the ISO 8601 standard.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * ID of the site.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionArgs | FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionState | undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["functionId"] = state ? state.functionId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as FunctionArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["functionId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Function.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Function resources.
 */
export interface FunctionState {
    /**
     * Function content, currently only supports JavaScript code, with a maximum size of 5MB.
     */
    content?: pulumi.Input<string>;
    /**
     * Creation time. The time is in Coordinated Universal Time (UTC) and follows the date and time format specified by the ISO 8601 standard.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The default domain name for the function.
     */
    domain?: pulumi.Input<string>;
    /**
     * ID of the Function.
     */
    functionId?: pulumi.Input<string>;
    /**
     * Function name. It can only contain lowercase letters, numbers, hyphens, must start and end with a letter or number, and can have a maximum length of 30 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Function description, maximum support of 60 characters.
     */
    remark?: pulumi.Input<string>;
    /**
     * Modification time. The time is in Coordinated Universal Time (UTC) and follows the date and time format specified by the ISO 8601 standard.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * ID of the site.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Function resource.
 */
export interface FunctionArgs {
    /**
     * Function content, currently only supports JavaScript code, with a maximum size of 5MB.
     */
    content: pulumi.Input<string>;
    /**
     * Function name. It can only contain lowercase letters, numbers, hyphens, must start and end with a letter or number, and can have a maximum length of 30 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Function description, maximum support of 60 characters.
     */
    remark?: pulumi.Input<string>;
    /**
     * ID of the site.
     */
    zoneId: pulumi.Input<string>;
}
