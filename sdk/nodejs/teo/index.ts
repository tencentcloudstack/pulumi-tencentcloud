// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccelerationDomainArgs, AccelerationDomainState } from "./accelerationDomain";
export type AccelerationDomain = import("./accelerationDomain").AccelerationDomain;
export const AccelerationDomain: typeof import("./accelerationDomain").AccelerationDomain = null as any;
utilities.lazyLoad(exports, ["AccelerationDomain"], () => require("./accelerationDomain"));

export { ApplicationProxyArgs, ApplicationProxyState } from "./applicationProxy";
export type ApplicationProxy = import("./applicationProxy").ApplicationProxy;
export const ApplicationProxy: typeof import("./applicationProxy").ApplicationProxy = null as any;
utilities.lazyLoad(exports, ["ApplicationProxy"], () => require("./applicationProxy"));

export { ApplicationProxyRuleArgs, ApplicationProxyRuleState } from "./applicationProxyRule";
export type ApplicationProxyRule = import("./applicationProxyRule").ApplicationProxyRule;
export const ApplicationProxyRule: typeof import("./applicationProxyRule").ApplicationProxyRule = null as any;
utilities.lazyLoad(exports, ["ApplicationProxyRule"], () => require("./applicationProxyRule"));

export { CertificateConfigArgs, CertificateConfigState } from "./certificateConfig";
export type CertificateConfig = import("./certificateConfig").CertificateConfig;
export const CertificateConfig: typeof import("./certificateConfig").CertificateConfig = null as any;
utilities.lazyLoad(exports, ["CertificateConfig"], () => require("./certificateConfig"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { FunctionRuleArgs, FunctionRuleState } from "./functionRule";
export type FunctionRule = import("./functionRule").FunctionRule;
export const FunctionRule: typeof import("./functionRule").FunctionRule = null as any;
utilities.lazyLoad(exports, ["FunctionRule"], () => require("./functionRule"));

export { FunctionRulePriorityArgs, FunctionRulePriorityState } from "./functionRulePriority";
export type FunctionRulePriority = import("./functionRulePriority").FunctionRulePriority;
export const FunctionRulePriority: typeof import("./functionRulePriority").FunctionRulePriority = null as any;
utilities.lazyLoad(exports, ["FunctionRulePriority"], () => require("./functionRulePriority"));

export { FunctionRuntimeEnvironmentArgs, FunctionRuntimeEnvironmentState } from "./functionRuntimeEnvironment";
export type FunctionRuntimeEnvironment = import("./functionRuntimeEnvironment").FunctionRuntimeEnvironment;
export const FunctionRuntimeEnvironment: typeof import("./functionRuntimeEnvironment").FunctionRuntimeEnvironment = null as any;
utilities.lazyLoad(exports, ["FunctionRuntimeEnvironment"], () => require("./functionRuntimeEnvironment"));

export { GetRuleEngineSettingsArgs, GetRuleEngineSettingsResult, GetRuleEngineSettingsOutputArgs } from "./getRuleEngineSettings";
export const getRuleEngineSettings: typeof import("./getRuleEngineSettings").getRuleEngineSettings = null as any;
export const getRuleEngineSettingsOutput: typeof import("./getRuleEngineSettings").getRuleEngineSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getRuleEngineSettings","getRuleEngineSettingsOutput"], () => require("./getRuleEngineSettings"));

export { GetZoneAvailablePlansArgs, GetZoneAvailablePlansResult, GetZoneAvailablePlansOutputArgs } from "./getZoneAvailablePlans";
export const getZoneAvailablePlans: typeof import("./getZoneAvailablePlans").getZoneAvailablePlans = null as any;
export const getZoneAvailablePlansOutput: typeof import("./getZoneAvailablePlans").getZoneAvailablePlansOutput = null as any;
utilities.lazyLoad(exports, ["getZoneAvailablePlans","getZoneAvailablePlansOutput"], () => require("./getZoneAvailablePlans"));

export { L4ProxyArgs, L4ProxyState } from "./l4proxy";
export type L4Proxy = import("./l4proxy").L4Proxy;
export const L4Proxy: typeof import("./l4proxy").L4Proxy = null as any;
utilities.lazyLoad(exports, ["L4Proxy"], () => require("./l4proxy"));

export { OriginGroupArgs, OriginGroupState } from "./originGroup";
export type OriginGroup = import("./originGroup").OriginGroup;
export const OriginGroup: typeof import("./originGroup").OriginGroup = null as any;
utilities.lazyLoad(exports, ["OriginGroup"], () => require("./originGroup"));

export { OwnershipVerifyArgs, OwnershipVerifyState } from "./ownershipVerify";
export type OwnershipVerify = import("./ownershipVerify").OwnershipVerify;
export const OwnershipVerify: typeof import("./ownershipVerify").OwnershipVerify = null as any;
utilities.lazyLoad(exports, ["OwnershipVerify"], () => require("./ownershipVerify"));

export { RealtimeLogDeliveryArgs, RealtimeLogDeliveryState } from "./realtimeLogDelivery";
export type RealtimeLogDelivery = import("./realtimeLogDelivery").RealtimeLogDelivery;
export const RealtimeLogDelivery: typeof import("./realtimeLogDelivery").RealtimeLogDelivery = null as any;
utilities.lazyLoad(exports, ["RealtimeLogDelivery"], () => require("./realtimeLogDelivery"));

export { RuleEngineArgs, RuleEngineState } from "./ruleEngine";
export type RuleEngine = import("./ruleEngine").RuleEngine;
export const RuleEngine: typeof import("./ruleEngine").RuleEngine = null as any;
utilities.lazyLoad(exports, ["RuleEngine"], () => require("./ruleEngine"));

export { SecurityIpGroupArgs, SecurityIpGroupState } from "./securityIpGroup";
export type SecurityIpGroup = import("./securityIpGroup").SecurityIpGroup;
export const SecurityIpGroup: typeof import("./securityIpGroup").SecurityIpGroup = null as any;
utilities.lazyLoad(exports, ["SecurityIpGroup"], () => require("./securityIpGroup"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));

export { ZoneSettingArgs, ZoneSettingState } from "./zoneSetting";
export type ZoneSetting = import("./zoneSetting").ZoneSetting;
export const ZoneSetting: typeof import("./zoneSetting").ZoneSetting = null as any;
utilities.lazyLoad(exports, ["ZoneSetting"], () => require("./zoneSetting"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Teo/accelerationDomain:AccelerationDomain":
                return new AccelerationDomain(name, <any>undefined, { urn })
            case "tencentcloud:Teo/applicationProxy:ApplicationProxy":
                return new ApplicationProxy(name, <any>undefined, { urn })
            case "tencentcloud:Teo/applicationProxyRule:ApplicationProxyRule":
                return new ApplicationProxyRule(name, <any>undefined, { urn })
            case "tencentcloud:Teo/certificateConfig:CertificateConfig":
                return new CertificateConfig(name, <any>undefined, { urn })
            case "tencentcloud:Teo/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "tencentcloud:Teo/functionRule:FunctionRule":
                return new FunctionRule(name, <any>undefined, { urn })
            case "tencentcloud:Teo/functionRulePriority:FunctionRulePriority":
                return new FunctionRulePriority(name, <any>undefined, { urn })
            case "tencentcloud:Teo/functionRuntimeEnvironment:FunctionRuntimeEnvironment":
                return new FunctionRuntimeEnvironment(name, <any>undefined, { urn })
            case "tencentcloud:Teo/l4Proxy:L4Proxy":
                return new L4Proxy(name, <any>undefined, { urn })
            case "tencentcloud:Teo/originGroup:OriginGroup":
                return new OriginGroup(name, <any>undefined, { urn })
            case "tencentcloud:Teo/ownershipVerify:OwnershipVerify":
                return new OwnershipVerify(name, <any>undefined, { urn })
            case "tencentcloud:Teo/realtimeLogDelivery:RealtimeLogDelivery":
                return new RealtimeLogDelivery(name, <any>undefined, { urn })
            case "tencentcloud:Teo/ruleEngine:RuleEngine":
                return new RuleEngine(name, <any>undefined, { urn })
            case "tencentcloud:Teo/securityIpGroup:SecurityIpGroup":
                return new SecurityIpGroup(name, <any>undefined, { urn })
            case "tencentcloud:Teo/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            case "tencentcloud:Teo/zoneSetting:ZoneSetting":
                return new ZoneSetting(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/accelerationDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/applicationProxy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/applicationProxyRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/certificateConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/function", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/functionRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/functionRulePriority", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/functionRuntimeEnvironment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/l4Proxy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/originGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/ownershipVerify", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/realtimeLogDelivery", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/ruleEngine", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/securityIpGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/zone", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Teo/zoneSetting", _module)
