// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a audit track
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.audit.Track("example", {
 *     actionType: "Read",
 *     eventNames: ["*"],
 *     resourceType: "*",
 *     status: 1,
 *     storage: {
 *         storageName: "db90b92c-91d2-46b0-94ac-debbbb21dc4e",
 *         storagePrefix: "cloudaudit",
 *         storageRegion: "ap-guangzhou",
 *         storageType: "cls",
 *     },
 *     trackForAllMembers: 0,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Specify storage user
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.audit.Track("example", {
 *     actionType: "Read",
 *     eventNames: ["*"],
 *     resourceType: "*",
 *     status: 1,
 *     storage: {
 *         storageAccountId: "100037717137",
 *         storageAppId: "1309116520",
 *         storageName: "db90b92c-91d2-46b0-94ac-debbbb21dc4e",
 *         storagePrefix: "cloudaudit",
 *         storageRegion: "ap-guangzhou",
 *         storageType: "cos",
 *     },
 *     trackForAllMembers: 0,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * audit track can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Audit/track:Track example 24283
 * ```
 */
export class Track extends pulumi.CustomResource {
    /**
     * Get an existing Track resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrackState, opts?: pulumi.CustomResourceOptions): Track {
        return new Track(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Audit/track:Track';

    /**
     * Returns true if the given object is an instance of Track.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Track {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Track.__pulumiType;
    }

    /**
     * Track interface type, optional:- `Read`: Read interface- `Write`: Write interface- `*`: All interface.
     */
    public readonly actionType!: pulumi.Output<string>;
    /**
     * Track create time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Track interface name list:- when ResourceType is `*`, EventNames is must `[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support all interface:`[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support some interface, up to 10.
     */
    public readonly eventNames!: pulumi.Output<string[]>;
    /**
     * Track name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Track product, optional:- `*`: All product- Single product, such as `cos`.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * Track status, optional:- `0`: Close- `1`: Open.
     */
    public readonly status!: pulumi.Output<number>;
    /**
     * Track Storage, support `cos` and `cls`.
     */
    public readonly storage!: pulumi.Output<outputs.Audit.TrackStorage>;
    /**
     * Whether to enable the delivery of group member operation logs to the group management account or trusted service management account, optional:- `0`: Close- `1`: Open.
     */
    public readonly trackForAllMembers!: pulumi.Output<number | undefined>;

    /**
     * Create a Track resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrackArgs | TrackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrackState | undefined;
            resourceInputs["actionType"] = state ? state.actionType : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["eventNames"] = state ? state.eventNames : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["trackForAllMembers"] = state ? state.trackForAllMembers : undefined;
        } else {
            const args = argsOrState as TrackArgs | undefined;
            if ((!args || args.actionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionType'");
            }
            if ((!args || args.eventNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventNames'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.storage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storage'");
            }
            resourceInputs["actionType"] = args ? args.actionType : undefined;
            resourceInputs["eventNames"] = args ? args.eventNames : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["trackForAllMembers"] = args ? args.trackForAllMembers : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Track.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Track resources.
 */
export interface TrackState {
    /**
     * Track interface type, optional:- `Read`: Read interface- `Write`: Write interface- `*`: All interface.
     */
    actionType?: pulumi.Input<string>;
    /**
     * Track create time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Track interface name list:- when ResourceType is `*`, EventNames is must `[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support all interface:`[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support some interface, up to 10.
     */
    eventNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Track name.
     */
    name?: pulumi.Input<string>;
    /**
     * Track product, optional:- `*`: All product- Single product, such as `cos`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Track status, optional:- `0`: Close- `1`: Open.
     */
    status?: pulumi.Input<number>;
    /**
     * Track Storage, support `cos` and `cls`.
     */
    storage?: pulumi.Input<inputs.Audit.TrackStorage>;
    /**
     * Whether to enable the delivery of group member operation logs to the group management account or trusted service management account, optional:- `0`: Close- `1`: Open.
     */
    trackForAllMembers?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Track resource.
 */
export interface TrackArgs {
    /**
     * Track interface type, optional:- `Read`: Read interface- `Write`: Write interface- `*`: All interface.
     */
    actionType: pulumi.Input<string>;
    /**
     * Track interface name list:- when ResourceType is `*`, EventNames is must `[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support all interface:`[&amp;quot;*&amp;quot;]`- when ResourceType is a single product, EventNames support some interface, up to 10.
     */
    eventNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Track name.
     */
    name?: pulumi.Input<string>;
    /**
     * Track product, optional:- `*`: All product- Single product, such as `cos`.
     */
    resourceType: pulumi.Input<string>;
    /**
     * Track status, optional:- `0`: Close- `1`: Open.
     */
    status: pulumi.Input<number>;
    /**
     * Track Storage, support `cos` and `cls`.
     */
    storage: pulumi.Input<inputs.Audit.TrackStorage>;
    /**
     * Whether to enable the delivery of group member operation logs to the group management account or trusted service management account, optional:- `0`: Close- `1`: Open.
     */
    trackForAllMembers?: pulumi.Input<number>;
}
