// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of CBS storages in parallel.
 *
 * ## Example Usage
 *
 * ### Query CBS by storage set by zone
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const example = tencentcloud.Cbs.getStoragesSet({
 *     availabilityZone: "ap-guangzhou-3",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getStoragesSet(args?: GetStoragesSetArgs, opts?: pulumi.InvokeOptions): Promise<GetStoragesSetResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Cbs/getStoragesSet:getStoragesSet", {
        "availabilityZone": args.availabilityZone,
        "chargeTypes": args.chargeTypes,
        "dedicatedClusterId": args.dedicatedClusterId,
        "instanceIps": args.instanceIps,
        "instanceNames": args.instanceNames,
        "portable": args.portable,
        "projectId": args.projectId,
        "resultOutputFile": args.resultOutputFile,
        "storageId": args.storageId,
        "storageName": args.storageName,
        "storageStates": args.storageStates,
        "storageType": args.storageType,
        "storageUsage": args.storageUsage,
        "tagKeys": args.tagKeys,
        "tagValues": args.tagValues,
    }, opts);
}

/**
 * A collection of arguments for invoking getStoragesSet.
 */
export interface GetStoragesSetArgs {
    /**
     * The available zone that the CBS instance locates at.
     */
    availabilityZone?: string;
    /**
     * List filter by disk charge type (`POSTPAID_BY_HOUR` | `PREPAID` | `CDCPAID` | `DEDICATED_CLUSTER_PAID`).
     */
    chargeTypes?: string[];
    /**
     * Exclusive cluster id.
     */
    dedicatedClusterId?: string;
    /**
     * List filter by attached instance public or private IPs.
     */
    instanceIps?: string[];
    /**
     * List filter by attached instance name.
     */
    instanceNames?: string[];
    /**
     * Filter by whether the disk is portable (Boolean `true` or `false`).
     */
    portable?: boolean;
    /**
     * ID of the project with which the CBS is associated.
     */
    projectId?: number;
    /**
     * Used to save results.
     */
    resultOutputFile?: string;
    /**
     * ID of the CBS to be queried.
     */
    storageId?: string;
    /**
     * Name of the CBS to be queried.
     */
    storageName?: string;
    /**
     * List filter by disk state (`UNATTACHED` | `ATTACHING` | `ATTACHED` | `DETACHING` | `EXPANDING` | `ROLLBACKING` | `TORECYCLE`).
     */
    storageStates?: string[];
    /**
     * Filter by cloud disk media type (`CLOUD_BASIC`: HDD cloud disk | `CLOUD_PREMIUM`: Premium Cloud Storage | `CLOUD_SSD`: SSD cloud disk).
     */
    storageType?: string;
    /**
     * Filter by cloud disk type (`SYSTEM_DISK`: system disk | `DATA_DISK`: data disk).
     */
    storageUsage?: string;
    /**
     * List filter by tag keys.
     */
    tagKeys?: string[];
    /**
     * List filter by tag values.
     */
    tagValues?: string[];
}

/**
 * A collection of values returned by getStoragesSet.
 */
export interface GetStoragesSetResult {
    /**
     * The zone of CBS.
     */
    readonly availabilityZone?: string;
    /**
     * Pay type of the CBS instance.
     */
    readonly chargeTypes?: string[];
    /**
     * Exclusive cluster id.
     */
    readonly dedicatedClusterId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceIps?: string[];
    readonly instanceNames?: string[];
    readonly portable?: boolean;
    /**
     * ID of the project.
     */
    readonly projectId?: number;
    readonly resultOutputFile?: string;
    /**
     * ID of CBS.
     */
    readonly storageId?: string;
    /**
     * A list of storage. Each element contains the following attributes:
     */
    readonly storageLists: outputs.Cbs.GetStoragesSetStorageList[];
    /**
     * Name of CBS.
     */
    readonly storageName?: string;
    readonly storageStates?: string[];
    /**
     * Types of storage medium.
     */
    readonly storageType?: string;
    /**
     * Types of CBS.
     */
    readonly storageUsage?: string;
    readonly tagKeys?: string[];
    readonly tagValues?: string[];
}
/**
 * Use this data source to query detailed information of CBS storages in parallel.
 *
 * ## Example Usage
 *
 * ### Query CBS by storage set by zone
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const example = tencentcloud.Cbs.getStoragesSet({
 *     availabilityZone: "ap-guangzhou-3",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getStoragesSetOutput(args?: GetStoragesSetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStoragesSetResult> {
    return pulumi.output(args).apply((a: any) => getStoragesSet(a, opts))
}

/**
 * A collection of arguments for invoking getStoragesSet.
 */
export interface GetStoragesSetOutputArgs {
    /**
     * The available zone that the CBS instance locates at.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * List filter by disk charge type (`POSTPAID_BY_HOUR` | `PREPAID` | `CDCPAID` | `DEDICATED_CLUSTER_PAID`).
     */
    chargeTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Exclusive cluster id.
     */
    dedicatedClusterId?: pulumi.Input<string>;
    /**
     * List filter by attached instance public or private IPs.
     */
    instanceIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List filter by attached instance name.
     */
    instanceNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter by whether the disk is portable (Boolean `true` or `false`).
     */
    portable?: pulumi.Input<boolean>;
    /**
     * ID of the project with which the CBS is associated.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Used to save results.
     */
    resultOutputFile?: pulumi.Input<string>;
    /**
     * ID of the CBS to be queried.
     */
    storageId?: pulumi.Input<string>;
    /**
     * Name of the CBS to be queried.
     */
    storageName?: pulumi.Input<string>;
    /**
     * List filter by disk state (`UNATTACHED` | `ATTACHING` | `ATTACHED` | `DETACHING` | `EXPANDING` | `ROLLBACKING` | `TORECYCLE`).
     */
    storageStates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter by cloud disk media type (`CLOUD_BASIC`: HDD cloud disk | `CLOUD_PREMIUM`: Premium Cloud Storage | `CLOUD_SSD`: SSD cloud disk).
     */
    storageType?: pulumi.Input<string>;
    /**
     * Filter by cloud disk type (`SYSTEM_DISK`: system disk | `DATA_DISK`: data disk).
     */
    storageUsage?: pulumi.Input<string>;
    /**
     * List filter by tag keys.
     */
    tagKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List filter by tag values.
     */
    tagValues?: pulumi.Input<pulumi.Input<string>[]>;
}
