// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a mps schedule
 *
 * ## Example Usage
 * ### Create a schedule through COS bucket
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const object = tencentcloud.Cos.getBucketObject({
 *     bucket: `keep-bucket-${local.app_id}`,
 *     key: "/mps-test/test.mov",
 * });
 * const output = new tencentcloud.cos.Bucket("output", {
 *     bucket: `tf-bucket-mps-schedule-output-${local.app_id}`,
 *     forceClean: true,
 *     acl: "public-read",
 * });
 * const schedule = new tencentcloud.mps.Schedule("schedule", {
 *     scheduleName: `tf_test_mps_schedule_%d`,
 *     trigger: {
 *         type: "CosFileUpload",
 *         cosFileUploadTrigger: {
 *             bucket: object.then(object => object.bucket),
 *             region: `%s`,
 *             dir: "/upload/",
 *             formats: [
 *                 "flv",
 *                 "mov",
 *             ],
 *         },
 *     },
 *     activities: [
 *         {
 *             activityType: "input",
 *             reardriveIndices: [
 *                 1,
 *                 2,
 *             ],
 *         },
 *         {
 *             activityType: "action-trans",
 *             reardriveIndices: [3],
 *             activityPara: {
 *                 transcodeTask: {
 *                     definition: 10,
 *                 },
 *             },
 *         },
 *         {
 *             activityType: "action-trans",
 *             reardriveIndices: [
 *                 6,
 *                 7,
 *             ],
 *             activityPara: {
 *                 transcodeTask: {
 *                     definition: 10,
 *                 },
 *             },
 *         },
 *         {
 *             activityType: "action-trans",
 *             reardriveIndices: [
 *                 4,
 *                 5,
 *             ],
 *             activityPara: {
 *                 transcodeTask: {
 *                     definition: 10,
 *                 },
 *             },
 *         },
 *         {
 *             activityType: "action-trans",
 *             reardriveIndices: [10],
 *             activityPara: {
 *                 transcodeTask: {
 *                     definition: 10,
 *                 },
 *             },
 *         },
 *         {
 *             activityType: "action-trans",
 *             reardriveIndices: [10],
 *             activityPara: {
 *                 transcodeTask: {
 *                     definition: 10,
 *                 },
 *             },
 *         },
 *         {
 *             activityType: "action-trans",
 *             reardriveIndices: [10],
 *             activityPara: {
 *                 transcodeTask: {
 *                     definition: 10,
 *                 },
 *             },
 *         },
 *         {
 *             activityType: "action-trans",
 *             reardriveIndices: [8],
 *             activityPara: {
 *                 transcodeTask: {
 *                     definition: 10,
 *                 },
 *             },
 *         },
 *         {
 *             activityType: "action-trans",
 *             reardriveIndices: [9],
 *             activityPara: {
 *                 transcodeTask: {
 *                     definition: 10,
 *                 },
 *             },
 *         },
 *         {
 *             activityType: "action-trans",
 *             reardriveIndices: [10],
 *             activityPara: {
 *                 transcodeTask: {
 *                     definition: 10,
 *                 },
 *             },
 *         },
 *         {
 *             activityType: "output",
 *         },
 *     ],
 *     outputStorage: {
 *         type: "COS",
 *         cosOutputStorage: {
 *             bucket: output.bucket,
 *             region: `%s`,
 *         },
 *     },
 *     outputDir: "output/",
 * });
 * ```
 *
 * ## Import
 *
 * mps schedule can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Mps/schedule:Schedule schedule schedule_id
 * ```
 */
export class Schedule extends pulumi.CustomResource {
    /**
     * Get an existing Schedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduleState, opts?: pulumi.CustomResourceOptions): Schedule {
        return new Schedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Mps/schedule:Schedule';

    /**
     * Returns true if the given object is an instance of Schedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schedule.__pulumiType;
    }

    /**
     * The subtasks of the scheme.
     */
    public readonly activities!: pulumi.Output<outputs.Mps.ScheduleActivity[]>;
    /**
     * The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this, the file will be saved to the trigger directory.
     */
    public readonly outputDir!: pulumi.Output<string | undefined>;
    /**
     * The bucket to save the output file. If you do not specify this parameter, the bucket in `Trigger` will be used.
     */
    public readonly outputStorage!: pulumi.Output<outputs.Mps.ScheduleOutputStorage | undefined>;
    /**
     * Resource ID, you need to ensure that the corresponding resource is open. The default is the account main resource ID.
     */
    public readonly resourceId!: pulumi.Output<string | undefined>;
    /**
     * The scheme name (max 128 characters). This name should be unique across your account.
     */
    public readonly scheduleName!: pulumi.Output<string>;
    /**
     * The notification configuration. If you do not specify this parameter, notifications will not be sent.
     */
    public readonly taskNotifyConfig!: pulumi.Output<outputs.Mps.ScheduleTaskNotifyConfig>;
    /**
     * The trigger of the scheme. If a file is uploaded to the specified bucket, the scheme will be triggered.
     */
    public readonly trigger!: pulumi.Output<outputs.Mps.ScheduleTrigger>;

    /**
     * Create a Schedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduleArgs | ScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduleState | undefined;
            resourceInputs["activities"] = state ? state.activities : undefined;
            resourceInputs["outputDir"] = state ? state.outputDir : undefined;
            resourceInputs["outputStorage"] = state ? state.outputStorage : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["scheduleName"] = state ? state.scheduleName : undefined;
            resourceInputs["taskNotifyConfig"] = state ? state.taskNotifyConfig : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
        } else {
            const args = argsOrState as ScheduleArgs | undefined;
            if ((!args || args.activities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'activities'");
            }
            if ((!args || args.scheduleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduleName'");
            }
            if ((!args || args.trigger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trigger'");
            }
            resourceInputs["activities"] = args ? args.activities : undefined;
            resourceInputs["outputDir"] = args ? args.outputDir : undefined;
            resourceInputs["outputStorage"] = args ? args.outputStorage : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["scheduleName"] = args ? args.scheduleName : undefined;
            resourceInputs["taskNotifyConfig"] = args ? args.taskNotifyConfig : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Schedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Schedule resources.
 */
export interface ScheduleState {
    /**
     * The subtasks of the scheme.
     */
    activities?: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivity>[]>;
    /**
     * The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this, the file will be saved to the trigger directory.
     */
    outputDir?: pulumi.Input<string>;
    /**
     * The bucket to save the output file. If you do not specify this parameter, the bucket in `Trigger` will be used.
     */
    outputStorage?: pulumi.Input<inputs.Mps.ScheduleOutputStorage>;
    /**
     * Resource ID, you need to ensure that the corresponding resource is open. The default is the account main resource ID.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The scheme name (max 128 characters). This name should be unique across your account.
     */
    scheduleName?: pulumi.Input<string>;
    /**
     * The notification configuration. If you do not specify this parameter, notifications will not be sent.
     */
    taskNotifyConfig?: pulumi.Input<inputs.Mps.ScheduleTaskNotifyConfig>;
    /**
     * The trigger of the scheme. If a file is uploaded to the specified bucket, the scheme will be triggered.
     */
    trigger?: pulumi.Input<inputs.Mps.ScheduleTrigger>;
}

/**
 * The set of arguments for constructing a Schedule resource.
 */
export interface ScheduleArgs {
    /**
     * The subtasks of the scheme.
     */
    activities: pulumi.Input<pulumi.Input<inputs.Mps.ScheduleActivity>[]>;
    /**
     * The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this, the file will be saved to the trigger directory.
     */
    outputDir?: pulumi.Input<string>;
    /**
     * The bucket to save the output file. If you do not specify this parameter, the bucket in `Trigger` will be used.
     */
    outputStorage?: pulumi.Input<inputs.Mps.ScheduleOutputStorage>;
    /**
     * Resource ID, you need to ensure that the corresponding resource is open. The default is the account main resource ID.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The scheme name (max 128 characters). This name should be unique across your account.
     */
    scheduleName: pulumi.Input<string>;
    /**
     * The notification configuration. If you do not specify this parameter, notifications will not be sent.
     */
    taskNotifyConfig?: pulumi.Input<inputs.Mps.ScheduleTaskNotifyConfig>;
    /**
     * The trigger of the scheme. If a file is uploaded to the specified bucket, the scheme will be triggered.
     */
    trigger: pulumi.Input<inputs.Mps.ScheduleTrigger>;
}
