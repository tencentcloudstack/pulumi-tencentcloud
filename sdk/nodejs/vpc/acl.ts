// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provide a resource to create a VPC ACL instance.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const vpc = new tencentcloud.vpc.Instance("vpc", {cidrBlock: "10.0.0.0/16"});
 * const example = new tencentcloud.vpc.Acl("example", {
 *     vpcId: vpc.id,
 *     ingresses: [
 *         "ACCEPT#192.168.1.0/24#800#TCP",
 *         "ACCEPT#192.168.1.0/24#800-900#TCP",
 *     ],
 *     egresses: [
 *         "ACCEPT#192.168.1.0/24#800#TCP",
 *         "ACCEPT#192.168.1.0/24#800-900#TCP",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Vpc ACL can be imported, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Vpc/acl:Acl default acl-id
 * ```
 */
export class Acl extends pulumi.CustomResource {
    /**
     * Get an existing Acl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclState, opts?: pulumi.CustomResourceOptions): Acl {
        return new Acl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Vpc/acl:Acl';

    /**
     * Returns true if the given object is an instance of Acl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acl.__pulumiType;
    }

    /**
     * Creation time of ACL.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Egress rules. A rule must match the following format: [action]#[cidrIp]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is `80`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    public readonly egresses!: pulumi.Output<string[] | undefined>;
    /**
     * Ingress rules. A rule must match the following format: [action]#[cidrIp]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is `80`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    public readonly ingresses!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the network ACL.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Tags of the vpc acl.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * ID of the VPC instance.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Acl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclArgs | AclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["egresses"] = state ? state.egresses : undefined;
            resourceInputs["ingresses"] = state ? state.ingresses : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as AclArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["egresses"] = args ? args.egresses : undefined;
            resourceInputs["ingresses"] = args ? args.ingresses : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Acl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Acl resources.
 */
export interface AclState {
    /**
     * Creation time of ACL.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Egress rules. A rule must match the following format: [action]#[cidrIp]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is `80`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    egresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Ingress rules. A rule must match the following format: [action]#[cidrIp]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is `80`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    ingresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the network ACL.
     */
    name?: pulumi.Input<string>;
    /**
     * Tags of the vpc acl.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of the VPC instance.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Acl resource.
 */
export interface AclArgs {
    /**
     * Egress rules. A rule must match the following format: [action]#[cidrIp]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is `80`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    egresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Ingress rules. A rule must match the following format: [action]#[cidrIp]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'cidr_ip' must be an IP address network or segment. The 'port' valid format is `80`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP` and `ALL`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
     */
    ingresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the network ACL.
     */
    name?: pulumi.Input<string>;
    /**
     * Tags of the vpc acl.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * ID of the VPC instance.
     */
    vpcId: pulumi.Input<string>;
}
