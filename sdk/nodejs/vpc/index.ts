// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { AclAttachmentArgs, AclAttachmentState } from "./aclAttachment";
export type AclAttachment = import("./aclAttachment").AclAttachment;
export const AclAttachment: typeof import("./aclAttachment").AclAttachment = null as any;
utilities.lazyLoad(exports, ["AclAttachment"], () => require("./aclAttachment"));

export { BandwidthPackageArgs, BandwidthPackageState } from "./bandwidthPackage";
export type BandwidthPackage = import("./bandwidthPackage").BandwidthPackage;
export const BandwidthPackage: typeof import("./bandwidthPackage").BandwidthPackage = null as any;
utilities.lazyLoad(exports, ["BandwidthPackage"], () => require("./bandwidthPackage"));

export { BandwidthPackageAttachmentArgs, BandwidthPackageAttachmentState } from "./bandwidthPackageAttachment";
export type BandwidthPackageAttachment = import("./bandwidthPackageAttachment").BandwidthPackageAttachment;
export const BandwidthPackageAttachment: typeof import("./bandwidthPackageAttachment").BandwidthPackageAttachment = null as any;
utilities.lazyLoad(exports, ["BandwidthPackageAttachment"], () => require("./bandwidthPackageAttachment"));

export { ClassicLinkAttachmentArgs, ClassicLinkAttachmentState } from "./classicLinkAttachment";
export type ClassicLinkAttachment = import("./classicLinkAttachment").ClassicLinkAttachment;
export const ClassicLinkAttachment: typeof import("./classicLinkAttachment").ClassicLinkAttachment = null as any;
utilities.lazyLoad(exports, ["ClassicLinkAttachment"], () => require("./classicLinkAttachment"));

export { DhcpAssociateAddressArgs, DhcpAssociateAddressState } from "./dhcpAssociateAddress";
export type DhcpAssociateAddress = import("./dhcpAssociateAddress").DhcpAssociateAddress;
export const DhcpAssociateAddress: typeof import("./dhcpAssociateAddress").DhcpAssociateAddress = null as any;
utilities.lazyLoad(exports, ["DhcpAssociateAddress"], () => require("./dhcpAssociateAddress"));

export { DhcpIpArgs, DhcpIpState } from "./dhcpIp";
export type DhcpIp = import("./dhcpIp").DhcpIp;
export const DhcpIp: typeof import("./dhcpIp").DhcpIp = null as any;
utilities.lazyLoad(exports, ["DhcpIp"], () => require("./dhcpIp"));

export { EnableEndPointConnectArgs, EnableEndPointConnectState } from "./enableEndPointConnect";
export type EnableEndPointConnect = import("./enableEndPointConnect").EnableEndPointConnect;
export const EnableEndPointConnect: typeof import("./enableEndPointConnect").EnableEndPointConnect = null as any;
utilities.lazyLoad(exports, ["EnableEndPointConnect"], () => require("./enableEndPointConnect"));

export { EndPointArgs, EndPointState } from "./endPoint";
export type EndPoint = import("./endPoint").EndPoint;
export const EndPoint: typeof import("./endPoint").EndPoint = null as any;
utilities.lazyLoad(exports, ["EndPoint"], () => require("./endPoint"));

export { EndPointServiceArgs, EndPointServiceState } from "./endPointService";
export type EndPointService = import("./endPointService").EndPointService;
export const EndPointService: typeof import("./endPointService").EndPointService = null as any;
utilities.lazyLoad(exports, ["EndPointService"], () => require("./endPointService"));

export { EndPointServiceWhiteListArgs, EndPointServiceWhiteListState } from "./endPointServiceWhiteList";
export type EndPointServiceWhiteList = import("./endPointServiceWhiteList").EndPointServiceWhiteList;
export const EndPointServiceWhiteList: typeof import("./endPointServiceWhiteList").EndPointServiceWhiteList = null as any;
utilities.lazyLoad(exports, ["EndPointServiceWhiteList"], () => require("./endPointServiceWhiteList"));

export { FlowLogArgs, FlowLogState } from "./flowLog";
export type FlowLog = import("./flowLog").FlowLog;
export const FlowLog: typeof import("./flowLog").FlowLog = null as any;
utilities.lazyLoad(exports, ["FlowLog"], () => require("./flowLog"));

export { FlowLogConfigArgs, FlowLogConfigState } from "./flowLogConfig";
export type FlowLogConfig = import("./flowLogConfig").FlowLogConfig;
export const FlowLogConfig: typeof import("./flowLogConfig").FlowLogConfig = null as any;
utilities.lazyLoad(exports, ["FlowLogConfig"], () => require("./flowLogConfig"));

export { GetAccountAttributesArgs, GetAccountAttributesResult, GetAccountAttributesOutputArgs } from "./getAccountAttributes";
export const getAccountAttributes: typeof import("./getAccountAttributes").getAccountAttributes = null as any;
export const getAccountAttributesOutput: typeof import("./getAccountAttributes").getAccountAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getAccountAttributes","getAccountAttributesOutput"], () => require("./getAccountAttributes"));

export { GetAclsArgs, GetAclsResult, GetAclsOutputArgs } from "./getAcls";
export const getAcls: typeof import("./getAcls").getAcls = null as any;
export const getAclsOutput: typeof import("./getAcls").getAclsOutput = null as any;
utilities.lazyLoad(exports, ["getAcls","getAclsOutput"], () => require("./getAcls"));

export { GetBandwidthPackageBillUsageArgs, GetBandwidthPackageBillUsageResult, GetBandwidthPackageBillUsageOutputArgs } from "./getBandwidthPackageBillUsage";
export const getBandwidthPackageBillUsage: typeof import("./getBandwidthPackageBillUsage").getBandwidthPackageBillUsage = null as any;
export const getBandwidthPackageBillUsageOutput: typeof import("./getBandwidthPackageBillUsage").getBandwidthPackageBillUsageOutput = null as any;
utilities.lazyLoad(exports, ["getBandwidthPackageBillUsage","getBandwidthPackageBillUsageOutput"], () => require("./getBandwidthPackageBillUsage"));

export { GetBandwidthPackageQuotaArgs, GetBandwidthPackageQuotaResult, GetBandwidthPackageQuotaOutputArgs } from "./getBandwidthPackageQuota";
export const getBandwidthPackageQuota: typeof import("./getBandwidthPackageQuota").getBandwidthPackageQuota = null as any;
export const getBandwidthPackageQuotaOutput: typeof import("./getBandwidthPackageQuota").getBandwidthPackageQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getBandwidthPackageQuota","getBandwidthPackageQuotaOutput"], () => require("./getBandwidthPackageQuota"));

export { GetClassicLinkInstancesArgs, GetClassicLinkInstancesResult, GetClassicLinkInstancesOutputArgs } from "./getClassicLinkInstances";
export const getClassicLinkInstances: typeof import("./getClassicLinkInstances").getClassicLinkInstances = null as any;
export const getClassicLinkInstancesOutput: typeof import("./getClassicLinkInstances").getClassicLinkInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getClassicLinkInstances","getClassicLinkInstancesOutput"], () => require("./getClassicLinkInstances"));

export { GetCvmInstancesArgs, GetCvmInstancesResult, GetCvmInstancesOutputArgs } from "./getCvmInstances";
export const getCvmInstances: typeof import("./getCvmInstances").getCvmInstances = null as any;
export const getCvmInstancesOutput: typeof import("./getCvmInstances").getCvmInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCvmInstances","getCvmInstancesOutput"], () => require("./getCvmInstances"));

export { GetGatewayFlowMonitorDetailArgs, GetGatewayFlowMonitorDetailResult, GetGatewayFlowMonitorDetailOutputArgs } from "./getGatewayFlowMonitorDetail";
export const getGatewayFlowMonitorDetail: typeof import("./getGatewayFlowMonitorDetail").getGatewayFlowMonitorDetail = null as any;
export const getGatewayFlowMonitorDetailOutput: typeof import("./getGatewayFlowMonitorDetail").getGatewayFlowMonitorDetailOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayFlowMonitorDetail","getGatewayFlowMonitorDetailOutput"], () => require("./getGatewayFlowMonitorDetail"));

export { GetGatewayFlowQosArgs, GetGatewayFlowQosResult, GetGatewayFlowQosOutputArgs } from "./getGatewayFlowQos";
export const getGatewayFlowQos: typeof import("./getGatewayFlowQos").getGatewayFlowQos = null as any;
export const getGatewayFlowQosOutput: typeof import("./getGatewayFlowQos").getGatewayFlowQosOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayFlowQos","getGatewayFlowQosOutput"], () => require("./getGatewayFlowQos"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetLimitsArgs, GetLimitsResult, GetLimitsOutputArgs } from "./getLimits";
export const getLimits: typeof import("./getLimits").getLimits = null as any;
export const getLimitsOutput: typeof import("./getLimits").getLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getLimits","getLimitsOutput"], () => require("./getLimits"));

export { GetNetDetectStateCheckArgs, GetNetDetectStateCheckResult, GetNetDetectStateCheckOutputArgs } from "./getNetDetectStateCheck";
export const getNetDetectStateCheck: typeof import("./getNetDetectStateCheck").getNetDetectStateCheck = null as any;
export const getNetDetectStateCheckOutput: typeof import("./getNetDetectStateCheck").getNetDetectStateCheckOutput = null as any;
utilities.lazyLoad(exports, ["getNetDetectStateCheck","getNetDetectStateCheckOutput"], () => require("./getNetDetectStateCheck"));

export { GetNetDetectStatesArgs, GetNetDetectStatesResult, GetNetDetectStatesOutputArgs } from "./getNetDetectStates";
export const getNetDetectStates: typeof import("./getNetDetectStates").getNetDetectStates = null as any;
export const getNetDetectStatesOutput: typeof import("./getNetDetectStates").getNetDetectStatesOutput = null as any;
utilities.lazyLoad(exports, ["getNetDetectStates","getNetDetectStatesOutput"], () => require("./getNetDetectStates"));

export { GetNetworkInterfaceLimitArgs, GetNetworkInterfaceLimitResult, GetNetworkInterfaceLimitOutputArgs } from "./getNetworkInterfaceLimit";
export const getNetworkInterfaceLimit: typeof import("./getNetworkInterfaceLimit").getNetworkInterfaceLimit = null as any;
export const getNetworkInterfaceLimitOutput: typeof import("./getNetworkInterfaceLimit").getNetworkInterfaceLimitOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterfaceLimit","getNetworkInterfaceLimitOutput"], () => require("./getNetworkInterfaceLimit"));

export { GetPrivateIpAddressesArgs, GetPrivateIpAddressesResult, GetPrivateIpAddressesOutputArgs } from "./getPrivateIpAddresses";
export const getPrivateIpAddresses: typeof import("./getPrivateIpAddresses").getPrivateIpAddresses = null as any;
export const getPrivateIpAddressesOutput: typeof import("./getPrivateIpAddresses").getPrivateIpAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateIpAddresses","getPrivateIpAddressesOutput"], () => require("./getPrivateIpAddresses"));

export { GetProductQuotaArgs, GetProductQuotaResult, GetProductQuotaOutputArgs } from "./getProductQuota";
export const getProductQuota: typeof import("./getProductQuota").getProductQuota = null as any;
export const getProductQuotaOutput: typeof import("./getProductQuota").getProductQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getProductQuota","getProductQuotaOutput"], () => require("./getProductQuota"));

export { GetResourceDashboardArgs, GetResourceDashboardResult, GetResourceDashboardOutputArgs } from "./getResourceDashboard";
export const getResourceDashboard: typeof import("./getResourceDashboard").getResourceDashboard = null as any;
export const getResourceDashboardOutput: typeof import("./getResourceDashboard").getResourceDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getResourceDashboard","getResourceDashboardOutput"], () => require("./getResourceDashboard"));

export { GetRouteConflictsArgs, GetRouteConflictsResult, GetRouteConflictsOutputArgs } from "./getRouteConflicts";
export const getRouteConflicts: typeof import("./getRouteConflicts").getRouteConflicts = null as any;
export const getRouteConflictsOutput: typeof import("./getRouteConflicts").getRouteConflictsOutput = null as any;
utilities.lazyLoad(exports, ["getRouteConflicts","getRouteConflictsOutput"], () => require("./getRouteConflicts"));

export { GetRouteTablesArgs, GetRouteTablesResult, GetRouteTablesOutputArgs } from "./getRouteTables";
export const getRouteTables: typeof import("./getRouteTables").getRouteTables = null as any;
export const getRouteTablesOutput: typeof import("./getRouteTables").getRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTables","getRouteTablesOutput"], () => require("./getRouteTables"));

export { GetSecurityGroupLimitsArgs, GetSecurityGroupLimitsResult, GetSecurityGroupLimitsOutputArgs } from "./getSecurityGroupLimits";
export const getSecurityGroupLimits: typeof import("./getSecurityGroupLimits").getSecurityGroupLimits = null as any;
export const getSecurityGroupLimitsOutput: typeof import("./getSecurityGroupLimits").getSecurityGroupLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupLimits","getSecurityGroupLimitsOutput"], () => require("./getSecurityGroupLimits"));

export { GetSecurityGroupReferencesArgs, GetSecurityGroupReferencesResult, GetSecurityGroupReferencesOutputArgs } from "./getSecurityGroupReferences";
export const getSecurityGroupReferences: typeof import("./getSecurityGroupReferences").getSecurityGroupReferences = null as any;
export const getSecurityGroupReferencesOutput: typeof import("./getSecurityGroupReferences").getSecurityGroupReferencesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupReferences","getSecurityGroupReferencesOutput"], () => require("./getSecurityGroupReferences"));

export { GetSgSnapshotFileContentArgs, GetSgSnapshotFileContentResult, GetSgSnapshotFileContentOutputArgs } from "./getSgSnapshotFileContent";
export const getSgSnapshotFileContent: typeof import("./getSgSnapshotFileContent").getSgSnapshotFileContent = null as any;
export const getSgSnapshotFileContentOutput: typeof import("./getSgSnapshotFileContent").getSgSnapshotFileContentOutput = null as any;
utilities.lazyLoad(exports, ["getSgSnapshotFileContent","getSgSnapshotFileContentOutput"], () => require("./getSgSnapshotFileContent"));

export { GetSnapshotFilesArgs, GetSnapshotFilesResult, GetSnapshotFilesOutputArgs } from "./getSnapshotFiles";
export const getSnapshotFiles: typeof import("./getSnapshotFiles").getSnapshotFiles = null as any;
export const getSnapshotFilesOutput: typeof import("./getSnapshotFiles").getSnapshotFilesOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshotFiles","getSnapshotFilesOutput"], () => require("./getSnapshotFiles"));

export { GetSubnetResourceDashboardArgs, GetSubnetResourceDashboardResult, GetSubnetResourceDashboardOutputArgs } from "./getSubnetResourceDashboard";
export const getSubnetResourceDashboard: typeof import("./getSubnetResourceDashboard").getSubnetResourceDashboard = null as any;
export const getSubnetResourceDashboardOutput: typeof import("./getSubnetResourceDashboard").getSubnetResourceDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetResourceDashboard","getSubnetResourceDashboardOutput"], () => require("./getSubnetResourceDashboard"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { GetTemplateLimitsArgs, GetTemplateLimitsResult, GetTemplateLimitsOutputArgs } from "./getTemplateLimits";
export const getTemplateLimits: typeof import("./getTemplateLimits").getTemplateLimits = null as any;
export const getTemplateLimitsOutput: typeof import("./getTemplateLimits").getTemplateLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getTemplateLimits","getTemplateLimitsOutput"], () => require("./getTemplateLimits"));

export { GetUsedIpAddressArgs, GetUsedIpAddressResult, GetUsedIpAddressOutputArgs } from "./getUsedIpAddress";
export const getUsedIpAddress: typeof import("./getUsedIpAddress").getUsedIpAddress = null as any;
export const getUsedIpAddressOutput: typeof import("./getUsedIpAddress").getUsedIpAddressOutput = null as any;
utilities.lazyLoad(exports, ["getUsedIpAddress","getUsedIpAddressOutput"], () => require("./getUsedIpAddress"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { Ipv6CidrBlockArgs, Ipv6CidrBlockState } from "./ipv6CidrBlock";
export type Ipv6CidrBlock = import("./ipv6CidrBlock").Ipv6CidrBlock;
export const Ipv6CidrBlock: typeof import("./ipv6CidrBlock").Ipv6CidrBlock = null as any;
utilities.lazyLoad(exports, ["Ipv6CidrBlock"], () => require("./ipv6CidrBlock"));

export { Ipv6SubnetCidrBlockArgs, Ipv6SubnetCidrBlockState } from "./ipv6SubnetCidrBlock";
export type Ipv6SubnetCidrBlock = import("./ipv6SubnetCidrBlock").Ipv6SubnetCidrBlock;
export const Ipv6SubnetCidrBlock: typeof import("./ipv6SubnetCidrBlock").Ipv6SubnetCidrBlock = null as any;
utilities.lazyLoad(exports, ["Ipv6SubnetCidrBlock"], () => require("./ipv6SubnetCidrBlock"));

export { LocalGatewayArgs, LocalGatewayState } from "./localGateway";
export type LocalGateway = import("./localGateway").LocalGateway;
export const LocalGateway: typeof import("./localGateway").LocalGateway = null as any;
utilities.lazyLoad(exports, ["LocalGateway"], () => require("./localGateway"));

export { NetDetectArgs, NetDetectState } from "./netDetect";
export type NetDetect = import("./netDetect").NetDetect;
export const NetDetect: typeof import("./netDetect").NetDetect = null as any;
utilities.lazyLoad(exports, ["NetDetect"], () => require("./netDetect"));

export { NetworkAclQuintupleArgs, NetworkAclQuintupleState } from "./networkAclQuintuple";
export type NetworkAclQuintuple = import("./networkAclQuintuple").NetworkAclQuintuple;
export const NetworkAclQuintuple: typeof import("./networkAclQuintuple").NetworkAclQuintuple = null as any;
utilities.lazyLoad(exports, ["NetworkAclQuintuple"], () => require("./networkAclQuintuple"));

export { NotifyRoutesArgs, NotifyRoutesState } from "./notifyRoutes";
export type NotifyRoutes = import("./notifyRoutes").NotifyRoutes;
export const NotifyRoutes: typeof import("./notifyRoutes").NotifyRoutes = null as any;
utilities.lazyLoad(exports, ["NotifyRoutes"], () => require("./notifyRoutes"));

export { PeerConnectAcceptOperationArgs, PeerConnectAcceptOperationState } from "./peerConnectAcceptOperation";
export type PeerConnectAcceptOperation = import("./peerConnectAcceptOperation").PeerConnectAcceptOperation;
export const PeerConnectAcceptOperation: typeof import("./peerConnectAcceptOperation").PeerConnectAcceptOperation = null as any;
utilities.lazyLoad(exports, ["PeerConnectAcceptOperation"], () => require("./peerConnectAcceptOperation"));

export { PeerConnectManagerArgs, PeerConnectManagerState } from "./peerConnectManager";
export type PeerConnectManager = import("./peerConnectManager").PeerConnectManager;
export const PeerConnectManager: typeof import("./peerConnectManager").PeerConnectManager = null as any;
utilities.lazyLoad(exports, ["PeerConnectManager"], () => require("./peerConnectManager"));

export { PeerConnectRejectOperationArgs, PeerConnectRejectOperationState } from "./peerConnectRejectOperation";
export type PeerConnectRejectOperation = import("./peerConnectRejectOperation").PeerConnectRejectOperation;
export const PeerConnectRejectOperation: typeof import("./peerConnectRejectOperation").PeerConnectRejectOperation = null as any;
utilities.lazyLoad(exports, ["PeerConnectRejectOperation"], () => require("./peerConnectRejectOperation"));

export { PrivateNatGatewayArgs, PrivateNatGatewayState } from "./privateNatGateway";
export type PrivateNatGateway = import("./privateNatGateway").PrivateNatGateway;
export const PrivateNatGateway: typeof import("./privateNatGateway").PrivateNatGateway = null as any;
utilities.lazyLoad(exports, ["PrivateNatGateway"], () => require("./privateNatGateway"));

export { ResumeSnapshotInstanceArgs, ResumeSnapshotInstanceState } from "./resumeSnapshotInstance";
export type ResumeSnapshotInstance = import("./resumeSnapshotInstance").ResumeSnapshotInstance;
export const ResumeSnapshotInstance: typeof import("./resumeSnapshotInstance").ResumeSnapshotInstance = null as any;
utilities.lazyLoad(exports, ["ResumeSnapshotInstance"], () => require("./resumeSnapshotInstance"));

export { SnapshotPolicyArgs, SnapshotPolicyState } from "./snapshotPolicy";
export type SnapshotPolicy = import("./snapshotPolicy").SnapshotPolicy;
export const SnapshotPolicy: typeof import("./snapshotPolicy").SnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["SnapshotPolicy"], () => require("./snapshotPolicy"));

export { SnapshotPolicyAttachmentArgs, SnapshotPolicyAttachmentState } from "./snapshotPolicyAttachment";
export type SnapshotPolicyAttachment = import("./snapshotPolicyAttachment").SnapshotPolicyAttachment;
export const SnapshotPolicyAttachment: typeof import("./snapshotPolicyAttachment").SnapshotPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["SnapshotPolicyAttachment"], () => require("./snapshotPolicyAttachment"));

export { SnapshotPolicyConfigArgs, SnapshotPolicyConfigState } from "./snapshotPolicyConfig";
export type SnapshotPolicyConfig = import("./snapshotPolicyConfig").SnapshotPolicyConfig;
export const SnapshotPolicyConfig: typeof import("./snapshotPolicyConfig").SnapshotPolicyConfig = null as any;
utilities.lazyLoad(exports, ["SnapshotPolicyConfig"], () => require("./snapshotPolicyConfig"));

export { TrafficPackageArgs, TrafficPackageState } from "./trafficPackage";
export type TrafficPackage = import("./trafficPackage").TrafficPackage;
export const TrafficPackage: typeof import("./trafficPackage").TrafficPackage = null as any;
utilities.lazyLoad(exports, ["TrafficPackage"], () => require("./trafficPackage"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Vpc/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/aclAttachment:AclAttachment":
                return new AclAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/bandwidthPackage:BandwidthPackage":
                return new BandwidthPackage(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/bandwidthPackageAttachment:BandwidthPackageAttachment":
                return new BandwidthPackageAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/classicLinkAttachment:ClassicLinkAttachment":
                return new ClassicLinkAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/dhcpAssociateAddress:DhcpAssociateAddress":
                return new DhcpAssociateAddress(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/dhcpIp:DhcpIp":
                return new DhcpIp(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/enableEndPointConnect:EnableEndPointConnect":
                return new EnableEndPointConnect(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/endPoint:EndPoint":
                return new EndPoint(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/endPointService:EndPointService":
                return new EndPointService(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/endPointServiceWhiteList:EndPointServiceWhiteList":
                return new EndPointServiceWhiteList(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/flowLog:FlowLog":
                return new FlowLog(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/flowLogConfig:FlowLogConfig":
                return new FlowLogConfig(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/ipv6CidrBlock:Ipv6CidrBlock":
                return new Ipv6CidrBlock(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/ipv6SubnetCidrBlock:Ipv6SubnetCidrBlock":
                return new Ipv6SubnetCidrBlock(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/localGateway:LocalGateway":
                return new LocalGateway(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/netDetect:NetDetect":
                return new NetDetect(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/networkAclQuintuple:NetworkAclQuintuple":
                return new NetworkAclQuintuple(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/notifyRoutes:NotifyRoutes":
                return new NotifyRoutes(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/peerConnectAcceptOperation:PeerConnectAcceptOperation":
                return new PeerConnectAcceptOperation(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/peerConnectManager:PeerConnectManager":
                return new PeerConnectManager(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/peerConnectRejectOperation:PeerConnectRejectOperation":
                return new PeerConnectRejectOperation(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/privateNatGateway:PrivateNatGateway":
                return new PrivateNatGateway(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/resumeSnapshotInstance:ResumeSnapshotInstance":
                return new ResumeSnapshotInstance(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/snapshotPolicy:SnapshotPolicy":
                return new SnapshotPolicy(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/snapshotPolicyAttachment:SnapshotPolicyAttachment":
                return new SnapshotPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/snapshotPolicyConfig:SnapshotPolicyConfig":
                return new SnapshotPolicyConfig(name, <any>undefined, { urn })
            case "tencentcloud:Vpc/trafficPackage:TrafficPackage":
                return new TrafficPackage(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/acl", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/aclAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/bandwidthPackage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/bandwidthPackageAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/classicLinkAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/dhcpAssociateAddress", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/dhcpIp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/enableEndPointConnect", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/endPoint", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/endPointService", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/endPointServiceWhiteList", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/flowLog", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/flowLogConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/instance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/ipv6CidrBlock", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/ipv6SubnetCidrBlock", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/localGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/netDetect", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/networkAclQuintuple", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/notifyRoutes", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/peerConnectAcceptOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/peerConnectManager", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/peerConnectRejectOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/privateNatGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/resumeSnapshotInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/snapshotPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/snapshotPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/snapshotPolicyConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Vpc/trafficPackage", _module)
