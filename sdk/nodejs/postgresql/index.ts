// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountPrivilegesOperationArgs, AccountPrivilegesOperationState } from "./accountPrivilegesOperation";
export type AccountPrivilegesOperation = import("./accountPrivilegesOperation").AccountPrivilegesOperation;
export const AccountPrivilegesOperation: typeof import("./accountPrivilegesOperation").AccountPrivilegesOperation = null as any;
utilities.lazyLoad(exports, ["AccountPrivilegesOperation"], () => require("./accountPrivilegesOperation"));

export { ApplyParameterTemplateOperationArgs, ApplyParameterTemplateOperationState } from "./applyParameterTemplateOperation";
export type ApplyParameterTemplateOperation = import("./applyParameterTemplateOperation").ApplyParameterTemplateOperation;
export const ApplyParameterTemplateOperation: typeof import("./applyParameterTemplateOperation").ApplyParameterTemplateOperation = null as any;
utilities.lazyLoad(exports, ["ApplyParameterTemplateOperation"], () => require("./applyParameterTemplateOperation"));

export { BackupDownloadRestrictionConfigArgs, BackupDownloadRestrictionConfigState } from "./backupDownloadRestrictionConfig";
export type BackupDownloadRestrictionConfig = import("./backupDownloadRestrictionConfig").BackupDownloadRestrictionConfig;
export const BackupDownloadRestrictionConfig: typeof import("./backupDownloadRestrictionConfig").BackupDownloadRestrictionConfig = null as any;
utilities.lazyLoad(exports, ["BackupDownloadRestrictionConfig"], () => require("./backupDownloadRestrictionConfig"));

export { BackupPlanConfigArgs, BackupPlanConfigState } from "./backupPlanConfig";
export type BackupPlanConfig = import("./backupPlanConfig").BackupPlanConfig;
export const BackupPlanConfig: typeof import("./backupPlanConfig").BackupPlanConfig = null as any;
utilities.lazyLoad(exports, ["BackupPlanConfig"], () => require("./backupPlanConfig"));

export { BaseBackupArgs, BaseBackupState } from "./baseBackup";
export type BaseBackup = import("./baseBackup").BaseBackup;
export const BaseBackup: typeof import("./baseBackup").BaseBackup = null as any;
utilities.lazyLoad(exports, ["BaseBackup"], () => require("./baseBackup"));

export { CloneDbInstanceArgs, CloneDbInstanceState } from "./cloneDbInstance";
export type CloneDbInstance = import("./cloneDbInstance").CloneDbInstance;
export const CloneDbInstance: typeof import("./cloneDbInstance").CloneDbInstance = null as any;
utilities.lazyLoad(exports, ["CloneDbInstance"], () => require("./cloneDbInstance"));

export { DeleteLogBackupOperationArgs, DeleteLogBackupOperationState } from "./deleteLogBackupOperation";
export type DeleteLogBackupOperation = import("./deleteLogBackupOperation").DeleteLogBackupOperation;
export const DeleteLogBackupOperation: typeof import("./deleteLogBackupOperation").DeleteLogBackupOperation = null as any;
utilities.lazyLoad(exports, ["DeleteLogBackupOperation"], () => require("./deleteLogBackupOperation"));

export { DisisolateDbInstanceOperationArgs, DisisolateDbInstanceOperationState } from "./disisolateDbInstanceOperation";
export type DisisolateDbInstanceOperation = import("./disisolateDbInstanceOperation").DisisolateDbInstanceOperation;
export const DisisolateDbInstanceOperation: typeof import("./disisolateDbInstanceOperation").DisisolateDbInstanceOperation = null as any;
utilities.lazyLoad(exports, ["DisisolateDbInstanceOperation"], () => require("./disisolateDbInstanceOperation"));

export { GetAccountPrivilegesArgs, GetAccountPrivilegesResult, GetAccountPrivilegesOutputArgs } from "./getAccountPrivileges";
export const getAccountPrivileges: typeof import("./getAccountPrivileges").getAccountPrivileges = null as any;
export const getAccountPrivilegesOutput: typeof import("./getAccountPrivileges").getAccountPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getAccountPrivileges","getAccountPrivilegesOutput"], () => require("./getAccountPrivileges"));

export { GetBackupDownloadUrlsArgs, GetBackupDownloadUrlsResult, GetBackupDownloadUrlsOutputArgs } from "./getBackupDownloadUrls";
export const getBackupDownloadUrls: typeof import("./getBackupDownloadUrls").getBackupDownloadUrls = null as any;
export const getBackupDownloadUrlsOutput: typeof import("./getBackupDownloadUrls").getBackupDownloadUrlsOutput = null as any;
utilities.lazyLoad(exports, ["getBackupDownloadUrls","getBackupDownloadUrlsOutput"], () => require("./getBackupDownloadUrls"));

export { GetBaseBackupsArgs, GetBaseBackupsResult, GetBaseBackupsOutputArgs } from "./getBaseBackups";
export const getBaseBackups: typeof import("./getBaseBackups").getBaseBackups = null as any;
export const getBaseBackupsOutput: typeof import("./getBaseBackups").getBaseBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getBaseBackups","getBaseBackupsOutput"], () => require("./getBaseBackups"));

export { GetDbInstanceClassesArgs, GetDbInstanceClassesResult, GetDbInstanceClassesOutputArgs } from "./getDbInstanceClasses";
export const getDbInstanceClasses: typeof import("./getDbInstanceClasses").getDbInstanceClasses = null as any;
export const getDbInstanceClassesOutput: typeof import("./getDbInstanceClasses").getDbInstanceClassesOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstanceClasses","getDbInstanceClassesOutput"], () => require("./getDbInstanceClasses"));

export { GetDbInstanceVersionsArgs, GetDbInstanceVersionsResult, GetDbInstanceVersionsOutputArgs } from "./getDbInstanceVersions";
export const getDbInstanceVersions: typeof import("./getDbInstanceVersions").getDbInstanceVersions = null as any;
export const getDbInstanceVersionsOutput: typeof import("./getDbInstanceVersions").getDbInstanceVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstanceVersions","getDbInstanceVersionsOutput"], () => require("./getDbInstanceVersions"));

export { GetDedicatedClustersArgs, GetDedicatedClustersResult, GetDedicatedClustersOutputArgs } from "./getDedicatedClusters";
export const getDedicatedClusters: typeof import("./getDedicatedClusters").getDedicatedClusters = null as any;
export const getDedicatedClustersOutput: typeof import("./getDedicatedClusters").getDedicatedClustersOutput = null as any;
utilities.lazyLoad(exports, ["getDedicatedClusters","getDedicatedClustersOutput"], () => require("./getDedicatedClusters"));

export { GetDefaultParametersArgs, GetDefaultParametersResult, GetDefaultParametersOutputArgs } from "./getDefaultParameters";
export const getDefaultParameters: typeof import("./getDefaultParameters").getDefaultParameters = null as any;
export const getDefaultParametersOutput: typeof import("./getDefaultParameters").getDefaultParametersOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultParameters","getDefaultParametersOutput"], () => require("./getDefaultParameters"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetLogBackupsArgs, GetLogBackupsResult, GetLogBackupsOutputArgs } from "./getLogBackups";
export const getLogBackups: typeof import("./getLogBackups").getLogBackups = null as any;
export const getLogBackupsOutput: typeof import("./getLogBackups").getLogBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getLogBackups","getLogBackupsOutput"], () => require("./getLogBackups"));

export { GetParameterTemplatesArgs, GetParameterTemplatesResult, GetParameterTemplatesOutputArgs } from "./getParameterTemplates";
export const getParameterTemplates: typeof import("./getParameterTemplates").getParameterTemplates = null as any;
export const getParameterTemplatesOutput: typeof import("./getParameterTemplates").getParameterTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getParameterTemplates","getParameterTemplatesOutput"], () => require("./getParameterTemplates"));

export { GetReadonlyGroupsArgs, GetReadonlyGroupsResult, GetReadonlyGroupsOutputArgs } from "./getReadonlyGroups";
export const getReadonlyGroups: typeof import("./getReadonlyGroups").getReadonlyGroups = null as any;
export const getReadonlyGroupsOutput: typeof import("./getReadonlyGroups").getReadonlyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getReadonlyGroups","getReadonlyGroupsOutput"], () => require("./getReadonlyGroups"));

export { GetRecoveryTimeArgs, GetRecoveryTimeResult, GetRecoveryTimeOutputArgs } from "./getRecoveryTime";
export const getRecoveryTime: typeof import("./getRecoveryTime").getRecoveryTime = null as any;
export const getRecoveryTimeOutput: typeof import("./getRecoveryTime").getRecoveryTimeOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryTime","getRecoveryTimeOutput"], () => require("./getRecoveryTime"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetSpecinfosArgs, GetSpecinfosResult, GetSpecinfosOutputArgs } from "./getSpecinfos";
export const getSpecinfos: typeof import("./getSpecinfos").getSpecinfos = null as any;
export const getSpecinfosOutput: typeof import("./getSpecinfos").getSpecinfosOutput = null as any;
utilities.lazyLoad(exports, ["getSpecinfos","getSpecinfosOutput"], () => require("./getSpecinfos"));

export { GetXlogsArgs, GetXlogsResult, GetXlogsOutputArgs } from "./getXlogs";
export const getXlogs: typeof import("./getXlogs").getXlogs = null as any;
export const getXlogsOutput: typeof import("./getXlogs").getXlogsOutput = null as any;
utilities.lazyLoad(exports, ["getXlogs","getXlogsOutput"], () => require("./getXlogs"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceHaConfigArgs, InstanceHaConfigState } from "./instanceHaConfig";
export type InstanceHaConfig = import("./instanceHaConfig").InstanceHaConfig;
export const InstanceHaConfig: typeof import("./instanceHaConfig").InstanceHaConfig = null as any;
utilities.lazyLoad(exports, ["InstanceHaConfig"], () => require("./instanceHaConfig"));

export { IsolateDbInstanceOperationArgs, IsolateDbInstanceOperationState } from "./isolateDbInstanceOperation";
export type IsolateDbInstanceOperation = import("./isolateDbInstanceOperation").IsolateDbInstanceOperation;
export const IsolateDbInstanceOperation: typeof import("./isolateDbInstanceOperation").IsolateDbInstanceOperation = null as any;
utilities.lazyLoad(exports, ["IsolateDbInstanceOperation"], () => require("./isolateDbInstanceOperation"));

export { ModifyAccountRemarkOperationArgs, ModifyAccountRemarkOperationState } from "./modifyAccountRemarkOperation";
export type ModifyAccountRemarkOperation = import("./modifyAccountRemarkOperation").ModifyAccountRemarkOperation;
export const ModifyAccountRemarkOperation: typeof import("./modifyAccountRemarkOperation").ModifyAccountRemarkOperation = null as any;
utilities.lazyLoad(exports, ["ModifyAccountRemarkOperation"], () => require("./modifyAccountRemarkOperation"));

export { ModifySwitchTimePeriodOperationArgs, ModifySwitchTimePeriodOperationState } from "./modifySwitchTimePeriodOperation";
export type ModifySwitchTimePeriodOperation = import("./modifySwitchTimePeriodOperation").ModifySwitchTimePeriodOperation;
export const ModifySwitchTimePeriodOperation: typeof import("./modifySwitchTimePeriodOperation").ModifySwitchTimePeriodOperation = null as any;
utilities.lazyLoad(exports, ["ModifySwitchTimePeriodOperation"], () => require("./modifySwitchTimePeriodOperation"));

export { ParameterTemplateArgs, ParameterTemplateState } from "./parameterTemplate";
export type ParameterTemplate = import("./parameterTemplate").ParameterTemplate;
export const ParameterTemplate: typeof import("./parameterTemplate").ParameterTemplate = null as any;
utilities.lazyLoad(exports, ["ParameterTemplate"], () => require("./parameterTemplate"));

export { ReadonlyAttachmentArgs, ReadonlyAttachmentState } from "./readonlyAttachment";
export type ReadonlyAttachment = import("./readonlyAttachment").ReadonlyAttachment;
export const ReadonlyAttachment: typeof import("./readonlyAttachment").ReadonlyAttachment = null as any;
utilities.lazyLoad(exports, ["ReadonlyAttachment"], () => require("./readonlyAttachment"));

export { ReadonlyGroupArgs, ReadonlyGroupState } from "./readonlyGroup";
export type ReadonlyGroup = import("./readonlyGroup").ReadonlyGroup;
export const ReadonlyGroup: typeof import("./readonlyGroup").ReadonlyGroup = null as any;
utilities.lazyLoad(exports, ["ReadonlyGroup"], () => require("./readonlyGroup"));

export { ReadonlyInstanceArgs, ReadonlyInstanceState } from "./readonlyInstance";
export type ReadonlyInstance = import("./readonlyInstance").ReadonlyInstance;
export const ReadonlyInstance: typeof import("./readonlyInstance").ReadonlyInstance = null as any;
utilities.lazyLoad(exports, ["ReadonlyInstance"], () => require("./readonlyInstance"));

export { RebalanceReadonlyGroupOperationArgs, RebalanceReadonlyGroupOperationState } from "./rebalanceReadonlyGroupOperation";
export type RebalanceReadonlyGroupOperation = import("./rebalanceReadonlyGroupOperation").RebalanceReadonlyGroupOperation;
export const RebalanceReadonlyGroupOperation: typeof import("./rebalanceReadonlyGroupOperation").RebalanceReadonlyGroupOperation = null as any;
utilities.lazyLoad(exports, ["RebalanceReadonlyGroupOperation"], () => require("./rebalanceReadonlyGroupOperation"));

export { RenewDbInstanceOperationArgs, RenewDbInstanceOperationState } from "./renewDbInstanceOperation";
export type RenewDbInstanceOperation = import("./renewDbInstanceOperation").RenewDbInstanceOperation;
export const RenewDbInstanceOperation: typeof import("./renewDbInstanceOperation").RenewDbInstanceOperation = null as any;
utilities.lazyLoad(exports, ["RenewDbInstanceOperation"], () => require("./renewDbInstanceOperation"));

export { RestartDbInstanceOperationArgs, RestartDbInstanceOperationState } from "./restartDbInstanceOperation";
export type RestartDbInstanceOperation = import("./restartDbInstanceOperation").RestartDbInstanceOperation;
export const RestartDbInstanceOperation: typeof import("./restartDbInstanceOperation").RestartDbInstanceOperation = null as any;
utilities.lazyLoad(exports, ["RestartDbInstanceOperation"], () => require("./restartDbInstanceOperation"));

export { SecurityGroupConfigArgs, SecurityGroupConfigState } from "./securityGroupConfig";
export type SecurityGroupConfig = import("./securityGroupConfig").SecurityGroupConfig;
export const SecurityGroupConfig: typeof import("./securityGroupConfig").SecurityGroupConfig = null as any;
utilities.lazyLoad(exports, ["SecurityGroupConfig"], () => require("./securityGroupConfig"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Postgresql/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/accountPrivilegesOperation:AccountPrivilegesOperation":
                return new AccountPrivilegesOperation(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/applyParameterTemplateOperation:ApplyParameterTemplateOperation":
                return new ApplyParameterTemplateOperation(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/backupDownloadRestrictionConfig:BackupDownloadRestrictionConfig":
                return new BackupDownloadRestrictionConfig(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/backupPlanConfig:BackupPlanConfig":
                return new BackupPlanConfig(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/baseBackup:BaseBackup":
                return new BaseBackup(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/cloneDbInstance:CloneDbInstance":
                return new CloneDbInstance(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/deleteLogBackupOperation:DeleteLogBackupOperation":
                return new DeleteLogBackupOperation(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/disisolateDbInstanceOperation:DisisolateDbInstanceOperation":
                return new DisisolateDbInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/instanceHaConfig:InstanceHaConfig":
                return new InstanceHaConfig(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/isolateDbInstanceOperation:IsolateDbInstanceOperation":
                return new IsolateDbInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/modifyAccountRemarkOperation:ModifyAccountRemarkOperation":
                return new ModifyAccountRemarkOperation(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/modifySwitchTimePeriodOperation:ModifySwitchTimePeriodOperation":
                return new ModifySwitchTimePeriodOperation(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/parameterTemplate:ParameterTemplate":
                return new ParameterTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/readonlyAttachment:ReadonlyAttachment":
                return new ReadonlyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/readonlyGroup:ReadonlyGroup":
                return new ReadonlyGroup(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/readonlyInstance:ReadonlyInstance":
                return new ReadonlyInstance(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/rebalanceReadonlyGroupOperation:RebalanceReadonlyGroupOperation":
                return new RebalanceReadonlyGroupOperation(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/renewDbInstanceOperation:RenewDbInstanceOperation":
                return new RenewDbInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/restartDbInstanceOperation:RestartDbInstanceOperation":
                return new RestartDbInstanceOperation(name, <any>undefined, { urn })
            case "tencentcloud:Postgresql/securityGroupConfig:SecurityGroupConfig":
                return new SecurityGroupConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/account", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/accountPrivilegesOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/applyParameterTemplateOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/backupDownloadRestrictionConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/backupPlanConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/baseBackup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/cloneDbInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/deleteLogBackupOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/disisolateDbInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/instance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/instanceHaConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/isolateDbInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/modifyAccountRemarkOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/modifySwitchTimePeriodOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/parameterTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/readonlyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/readonlyGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/readonlyInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/rebalanceReadonlyGroupOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/renewDbInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/restartDbInstanceOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Postgresql/securityGroupConfig", _module)
