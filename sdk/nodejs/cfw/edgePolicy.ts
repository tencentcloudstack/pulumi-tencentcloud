// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a cfw edgePolicy
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 *
 * const example = new tencentcloud.Cfw.EdgePolicy("example", {
 *     description: "policy description.",
 *     direction: 1,
 *     enable: "true",
 *     port: "-1/-1",
 *     protocol: "TCP",
 *     ruleAction: "drop",
 *     scope: "all",
 *     sourceContent: "1.1.1.1/0",
 *     sourceType: "net",
 *     targetContent: "0.0.0.0/0",
 *     targetType: "net",
 * });
 * ```
 * ### If targetType is tag
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.cfw.EdgePolicy("example", {
 *     sourceContent: "0.0.0.0/0",
 *     sourceType: "net",
 *     targetContent: JSON.stringify({
 *         Key: "test",
 *         Value: "dddd",
 *     }),
 *     targetType: "tag",
 *     protocol: "TCP",
 *     ruleAction: "drop",
 *     port: "-1/-1",
 *     direction: 1,
 *     enable: "true",
 *     description: "policy description.",
 *     scope: "all",
 * });
 * ```
 *
 * ## Import
 *
 * cfw edge_policy can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Cfw/edgePolicy:EdgePolicy example edge_policy_id
 * ```
 */
export class EdgePolicy extends pulumi.CustomResource {
    /**
     * Get an existing EdgePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgePolicyState, opts?: pulumi.CustomResourceOptions): EdgePolicy {
        return new EdgePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cfw/edgePolicy:EdgePolicy';

    /**
     * Returns true if the given object is an instance of EdgePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgePolicy.__pulumiType;
    }

    /**
     * Description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Rule direction: 1, inbound; 0, outbound.
     */
    public readonly direction!: pulumi.Output<number>;
    /**
     * Rule status, true means enabled, false means disabled. Default is true.
     */
    public readonly enable!: pulumi.Output<string | undefined>;
    /**
     * Parameter template id.
     */
    public /*out*/ readonly paramTemplateId!: pulumi.Output<string>;
    /**
     * The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
     */
    public readonly port!: pulumi.Output<string>;
    /**
     * Protocol. If Direction=1 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 && Scope!=serial, optional values: TCP; If Direction=0 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 && Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
     */
    public readonly ruleAction!: pulumi.Output<string>;
    /**
     * Effective range. serial: serial; side: bypass; all: global, Default is all.
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * Access source example: net:IP/CIDR(192.168.0.2).
     */
    public readonly sourceContent!: pulumi.Output<string>;
    /**
     * Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
     */
    public readonly sourceType!: pulumi.Output<string>;
    /**
     * Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
     */
    public readonly targetContent!: pulumi.Output<string>;
    /**
     * Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
     */
    public readonly targetType!: pulumi.Output<string>;
    /**
     * The unique id corresponding to the rule, no need to fill in when creating the rule.
     */
    public /*out*/ readonly uuid!: pulumi.Output<number>;

    /**
     * Create a EdgePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgePolicyArgs | EdgePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgePolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["paramTemplateId"] = state ? state.paramTemplateId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["ruleAction"] = state ? state.ruleAction : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["sourceContent"] = state ? state.sourceContent : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["targetContent"] = state ? state.targetContent : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as EdgePolicyArgs | undefined;
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.ruleAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleAction'");
            }
            if ((!args || args.sourceContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceContent'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            if ((!args || args.targetContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetContent'");
            }
            if ((!args || args.targetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["ruleAction"] = args ? args.ruleAction : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["sourceContent"] = args ? args.sourceContent : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["targetContent"] = args ? args.targetContent : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["paramTemplateId"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EdgePolicy resources.
 */
export interface EdgePolicyState {
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Rule direction: 1, inbound; 0, outbound.
     */
    direction?: pulumi.Input<number>;
    /**
     * Rule status, true means enabled, false means disabled. Default is true.
     */
    enable?: pulumi.Input<string>;
    /**
     * Parameter template id.
     */
    paramTemplateId?: pulumi.Input<string>;
    /**
     * The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
     */
    port?: pulumi.Input<string>;
    /**
     * Protocol. If Direction=1 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 && Scope!=serial, optional values: TCP; If Direction=0 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 && Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
     */
    protocol?: pulumi.Input<string>;
    /**
     * How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
     */
    ruleAction?: pulumi.Input<string>;
    /**
     * Effective range. serial: serial; side: bypass; all: global, Default is all.
     */
    scope?: pulumi.Input<string>;
    /**
     * Access source example: net:IP/CIDR(192.168.0.2).
     */
    sourceContent?: pulumi.Input<string>;
    /**
     * Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
     */
    targetContent?: pulumi.Input<string>;
    /**
     * Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
     */
    targetType?: pulumi.Input<string>;
    /**
     * The unique id corresponding to the rule, no need to fill in when creating the rule.
     */
    uuid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a EdgePolicy resource.
 */
export interface EdgePolicyArgs {
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Rule direction: 1, inbound; 0, outbound.
     */
    direction: pulumi.Input<number>;
    /**
     * Rule status, true means enabled, false means disabled. Default is true.
     */
    enable?: pulumi.Input<string>;
    /**
     * The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
     */
    port: pulumi.Input<string>;
    /**
     * Protocol. If Direction=1 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 && Scope!=serial, optional values: TCP; If Direction=0 && Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 && Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
     */
    protocol: pulumi.Input<string>;
    /**
     * How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
     */
    ruleAction: pulumi.Input<string>;
    /**
     * Effective range. serial: serial; side: bypass; all: global, Default is all.
     */
    scope?: pulumi.Input<string>;
    /**
     * Access source example: net:IP/CIDR(192.168.0.2).
     */
    sourceContent: pulumi.Input<string>;
    /**
     * Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
     */
    sourceType: pulumi.Input<string>;
    /**
     * Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
     */
    targetContent: pulumi.Input<string>;
    /**
     * Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
     */
    targetType: pulumi.Input<string>;
}
