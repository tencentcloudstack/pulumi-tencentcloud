// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a CLB listener.
 *
 * ## Example Usage
 *
 * ### HTTP Listener
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const hTTPListener = new tencentcloud.clb.Listener("hTTPListener", {
 *     clbId: "lb-0lh5au7v",
 *     listenerName: "test_listener",
 *     port: 80,
 *     protocol: "HTTP",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### TCP/UDP Listener
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const tCPListener = new tencentcloud.clb.Listener("tCPListener", {
 *     clbId: "lb-0lh5au7v",
 *     healthCheckHealthNum: 3,
 *     healthCheckHttpCode: 2,
 *     healthCheckHttpMethod: "GET",
 *     healthCheckHttpVersion: "HTTP/1.0",
 *     healthCheckIntervalTime: 5,
 *     healthCheckPort: 200,
 *     healthCheckSwitch: true,
 *     healthCheckTimeOut: 2,
 *     healthCheckType: "HTTP",
 *     healthCheckUnhealthNum: 3,
 *     listenerName: "test_listener",
 *     port: 80,
 *     protocol: "TCP",
 *     scheduler: "WRR",
 *     sessionExpireTime: 30,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### TCP/UDP Listener with tcp health check
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const listenerTcp = new tencentcloud.clb.Listener("listenerTcp", {
 *     clbId: tencentcloud_clb_instance.clb_basic.id,
 *     listenerName: "listener_tcp",
 *     port: 44,
 *     protocol: "TCP",
 *     healthCheckSwitch: true,
 *     healthCheckTimeOut: 30,
 *     healthCheckIntervalTime: 100,
 *     healthCheckHealthNum: 2,
 *     healthCheckUnhealthNum: 2,
 *     sessionExpireTime: 30,
 *     scheduler: "WRR",
 *     healthCheckType: "TCP",
 *     healthCheckPort: 200,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### TCP/UDP Listener with http health check
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const listenerTcp = new tencentcloud.clb.Listener("listenerTcp", {
 *     clbId: tencentcloud_clb_instance.clb_basic.id,
 *     listenerName: "listener_tcp",
 *     port: 44,
 *     protocol: "TCP",
 *     healthCheckSwitch: true,
 *     healthCheckTimeOut: 30,
 *     healthCheckIntervalTime: 100,
 *     healthCheckHealthNum: 2,
 *     healthCheckUnhealthNum: 2,
 *     sessionExpireTime: 30,
 *     scheduler: "WRR",
 *     healthCheckType: "HTTP",
 *     healthCheckHttpDomain: "www.tencent.com",
 *     healthCheckHttpCode: 16,
 *     healthCheckHttpVersion: "HTTP/1.1",
 *     healthCheckHttpMethod: "HEAD",
 *     healthCheckHttpPath: "/",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### TCP/UDP Listener with customer health check
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const listenerTcp = new tencentcloud.clb.Listener("listenerTcp", {
 *     clbId: tencentcloud_clb_instance.clb_basic.id,
 *     listenerName: "listener_tcp",
 *     port: 44,
 *     protocol: "TCP",
 *     healthCheckSwitch: true,
 *     healthCheckTimeOut: 30,
 *     healthCheckIntervalTime: 100,
 *     healthCheckHealthNum: 2,
 *     healthCheckUnhealthNum: 2,
 *     sessionExpireTime: 30,
 *     scheduler: "WRR",
 *     healthCheckType: "CUSTOM",
 *     healthCheckContextType: "HEX",
 *     healthCheckSendContext: "0123456789ABCDEF",
 *     healthCheckRecvContext: "ABCD",
 *     targetType: "TARGETGROUP",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### HTTPS Listener
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const hTTPSListener = new tencentcloud.clb.Listener("hTTPSListener", {
 *     certificateCaId: "VfqO4zkB",
 *     certificateId: "VjANRdz8",
 *     certificateSslMode: "MUTUAL",
 *     clbId: "lb-0lh5au7v",
 *     listenerName: "test_listener",
 *     port: 80,
 *     protocol: "HTTPS",
 *     sniSwitch: true,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### TCP SSL Listener
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const tCPSSLListener = new tencentcloud.clb.Listener("tCPSSLListener", {
 *     certificateCaId: "VfqO4zkB",
 *     certificateId: "VjANRdz8",
 *     certificateSslMode: "MUTUAL",
 *     clbId: "lb-0lh5au7v",
 *     healthCheckHealthNum: 3,
 *     healthCheckIntervalTime: 5,
 *     healthCheckSwitch: true,
 *     healthCheckTimeOut: 2,
 *     healthCheckUnhealthNum: 3,
 *     listenerName: "test_listener",
 *     port: 80,
 *     protocol: "TCP_SSL",
 *     scheduler: "WRR",
 *     targetType: "TARGETGROUP",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Port Range Listener
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const clbBasic = new tencentcloud.clb.Instance("clbBasic", {
 *     networkType: "OPEN",
 *     clbName: "tf-listener-test",
 * });
 * const listenerBasic = new tencentcloud.clb.Listener("listenerBasic", {
 *     clbId: clbBasic.id,
 *     port: 1,
 *     endPort: 6,
 *     protocol: "TCP",
 *     listenerName: "listener_basic",
 *     sessionExpireTime: 30,
 *     scheduler: "WRR",
 *     targetType: "NODE",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * CLB listener can be imported using the id (version >= 1.47.0), e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Clb/listener:Listener foo lb-7a0t6zqb#lbl-hh141sn9
 * ```
 */
export class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerState, opts?: pulumi.CustomResourceOptions): Listener {
        return new Listener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Clb/listener:Listener';

    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Listener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }

    /**
     * ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
     */
    public readonly certificateCaId!: pulumi.Output<string | undefined>;
    /**
     * ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
     */
    public readonly certificateId!: pulumi.Output<string | undefined>;
    /**
     * Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
     */
    public readonly certificateSslMode!: pulumi.Output<string | undefined>;
    /**
     * ID of the CLB.
     */
    public readonly clbId!: pulumi.Output<string>;
    /**
     * This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
     */
    public readonly endPort!: pulumi.Output<number>;
    /**
     * Enable H2C switch for intranet HTTP listener.
     */
    public readonly h2cSwitch!: pulumi.Output<boolean>;
    /**
     * Health check protocol. When the value of `healthCheckType` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
     */
    public readonly healthCheckContextType!: pulumi.Output<string>;
    /**
     * Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
     */
    public readonly healthCheckHealthNum!: pulumi.Output<number>;
    /**
     * HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `healthCheckType` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
     */
    public readonly healthCheckHttpCode!: pulumi.Output<number | undefined>;
    /**
     * HTTP health check domain of TCP listener.
     */
    public readonly healthCheckHttpDomain!: pulumi.Output<string | undefined>;
    /**
     * HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
     */
    public readonly healthCheckHttpMethod!: pulumi.Output<string>;
    /**
     * HTTP health check path of TCP listener.
     */
    public readonly healthCheckHttpPath!: pulumi.Output<string | undefined>;
    /**
     * The HTTP version of the backend service. When the value of `healthCheckType` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
     */
    public readonly healthCheckHttpVersion!: pulumi.Output<string | undefined>;
    /**
     * Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    public readonly healthCheckIntervalTime!: pulumi.Output<number>;
    /**
     * The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
     */
    public readonly healthCheckPort!: pulumi.Output<number | undefined>;
    /**
     * It represents the result returned by the health check. When the value of `healthCheckType` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `healthCheckContextType` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
     */
    public readonly healthCheckRecvContext!: pulumi.Output<string | undefined>;
    /**
     * It represents the content of the request sent by the health check. When the value of `healthCheckType` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `healthCheckContextType` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
     */
    public readonly healthCheckSendContext!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether health check is enabled.
     */
    public readonly healthCheckSwitch!: pulumi.Output<boolean>;
    /**
     * Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
     */
    public readonly healthCheckTimeOut!: pulumi.Output<number>;
    /**
     * Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
     */
    public readonly healthCheckType!: pulumi.Output<string>;
    /**
     * Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    public readonly healthCheckUnhealthNum!: pulumi.Output<number>;
    /**
     * Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
     */
    public readonly healthSourceIpType!: pulumi.Output<number>;
    /**
     * Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
     */
    public readonly keepaliveEnable!: pulumi.Output<number>;
    /**
     * ID of this CLB listener.
     */
    public /*out*/ readonly listenerId!: pulumi.Output<string>;
    /**
     * Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
     */
    public readonly listenerName!: pulumi.Output<string>;
    /**
     * Port of the CLB listener.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    public readonly scheduler!: pulumi.Output<string | undefined>;
    /**
     * Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    public readonly sessionExpireTime!: pulumi.Output<number | undefined>;
    /**
     * Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
     */
    public readonly sessionType!: pulumi.Output<string>;
    /**
     * Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `tencentcloud.Clb.ListenerRule`, otherwise all rules have a certificate.
     */
    public readonly sniSwitch!: pulumi.Output<boolean | undefined>;
    /**
     * Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
     */
    public readonly targetType!: pulumi.Output<string>;

    /**
     * Create a Listener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerArgs | ListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerState | undefined;
            resourceInputs["certificateCaId"] = state ? state.certificateCaId : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["certificateSslMode"] = state ? state.certificateSslMode : undefined;
            resourceInputs["clbId"] = state ? state.clbId : undefined;
            resourceInputs["endPort"] = state ? state.endPort : undefined;
            resourceInputs["h2cSwitch"] = state ? state.h2cSwitch : undefined;
            resourceInputs["healthCheckContextType"] = state ? state.healthCheckContextType : undefined;
            resourceInputs["healthCheckHealthNum"] = state ? state.healthCheckHealthNum : undefined;
            resourceInputs["healthCheckHttpCode"] = state ? state.healthCheckHttpCode : undefined;
            resourceInputs["healthCheckHttpDomain"] = state ? state.healthCheckHttpDomain : undefined;
            resourceInputs["healthCheckHttpMethod"] = state ? state.healthCheckHttpMethod : undefined;
            resourceInputs["healthCheckHttpPath"] = state ? state.healthCheckHttpPath : undefined;
            resourceInputs["healthCheckHttpVersion"] = state ? state.healthCheckHttpVersion : undefined;
            resourceInputs["healthCheckIntervalTime"] = state ? state.healthCheckIntervalTime : undefined;
            resourceInputs["healthCheckPort"] = state ? state.healthCheckPort : undefined;
            resourceInputs["healthCheckRecvContext"] = state ? state.healthCheckRecvContext : undefined;
            resourceInputs["healthCheckSendContext"] = state ? state.healthCheckSendContext : undefined;
            resourceInputs["healthCheckSwitch"] = state ? state.healthCheckSwitch : undefined;
            resourceInputs["healthCheckTimeOut"] = state ? state.healthCheckTimeOut : undefined;
            resourceInputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            resourceInputs["healthCheckUnhealthNum"] = state ? state.healthCheckUnhealthNum : undefined;
            resourceInputs["healthSourceIpType"] = state ? state.healthSourceIpType : undefined;
            resourceInputs["keepaliveEnable"] = state ? state.keepaliveEnable : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["listenerName"] = state ? state.listenerName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["sessionExpireTime"] = state ? state.sessionExpireTime : undefined;
            resourceInputs["sessionType"] = state ? state.sessionType : undefined;
            resourceInputs["sniSwitch"] = state ? state.sniSwitch : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
        } else {
            const args = argsOrState as ListenerArgs | undefined;
            if ((!args || args.clbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clbId'");
            }
            if ((!args || args.listenerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerName'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["certificateCaId"] = args ? args.certificateCaId : undefined;
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["certificateSslMode"] = args ? args.certificateSslMode : undefined;
            resourceInputs["clbId"] = args ? args.clbId : undefined;
            resourceInputs["endPort"] = args ? args.endPort : undefined;
            resourceInputs["h2cSwitch"] = args ? args.h2cSwitch : undefined;
            resourceInputs["healthCheckContextType"] = args ? args.healthCheckContextType : undefined;
            resourceInputs["healthCheckHealthNum"] = args ? args.healthCheckHealthNum : undefined;
            resourceInputs["healthCheckHttpCode"] = args ? args.healthCheckHttpCode : undefined;
            resourceInputs["healthCheckHttpDomain"] = args ? args.healthCheckHttpDomain : undefined;
            resourceInputs["healthCheckHttpMethod"] = args ? args.healthCheckHttpMethod : undefined;
            resourceInputs["healthCheckHttpPath"] = args ? args.healthCheckHttpPath : undefined;
            resourceInputs["healthCheckHttpVersion"] = args ? args.healthCheckHttpVersion : undefined;
            resourceInputs["healthCheckIntervalTime"] = args ? args.healthCheckIntervalTime : undefined;
            resourceInputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            resourceInputs["healthCheckRecvContext"] = args ? args.healthCheckRecvContext : undefined;
            resourceInputs["healthCheckSendContext"] = args ? args.healthCheckSendContext : undefined;
            resourceInputs["healthCheckSwitch"] = args ? args.healthCheckSwitch : undefined;
            resourceInputs["healthCheckTimeOut"] = args ? args.healthCheckTimeOut : undefined;
            resourceInputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            resourceInputs["healthCheckUnhealthNum"] = args ? args.healthCheckUnhealthNum : undefined;
            resourceInputs["healthSourceIpType"] = args ? args.healthSourceIpType : undefined;
            resourceInputs["keepaliveEnable"] = args ? args.keepaliveEnable : undefined;
            resourceInputs["listenerName"] = args ? args.listenerName : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["sessionExpireTime"] = args ? args.sessionExpireTime : undefined;
            resourceInputs["sessionType"] = args ? args.sessionType : undefined;
            resourceInputs["sniSwitch"] = args ? args.sniSwitch : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["listenerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listener resources.
 */
export interface ListenerState {
    /**
     * ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
     */
    certificateCaId?: pulumi.Input<string>;
    /**
     * ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
     */
    certificateSslMode?: pulumi.Input<string>;
    /**
     * ID of the CLB.
     */
    clbId?: pulumi.Input<string>;
    /**
     * This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
     */
    endPort?: pulumi.Input<number>;
    /**
     * Enable H2C switch for intranet HTTP listener.
     */
    h2cSwitch?: pulumi.Input<boolean>;
    /**
     * Health check protocol. When the value of `healthCheckType` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
     */
    healthCheckContextType?: pulumi.Input<string>;
    /**
     * Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
     */
    healthCheckHealthNum?: pulumi.Input<number>;
    /**
     * HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `healthCheckType` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
     */
    healthCheckHttpCode?: pulumi.Input<number>;
    /**
     * HTTP health check domain of TCP listener.
     */
    healthCheckHttpDomain?: pulumi.Input<string>;
    /**
     * HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
     */
    healthCheckHttpMethod?: pulumi.Input<string>;
    /**
     * HTTP health check path of TCP listener.
     */
    healthCheckHttpPath?: pulumi.Input<string>;
    /**
     * The HTTP version of the backend service. When the value of `healthCheckType` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
     */
    healthCheckHttpVersion?: pulumi.Input<string>;
    /**
     * Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    healthCheckIntervalTime?: pulumi.Input<number>;
    /**
     * The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * It represents the result returned by the health check. When the value of `healthCheckType` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `healthCheckContextType` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
     */
    healthCheckRecvContext?: pulumi.Input<string>;
    /**
     * It represents the content of the request sent by the health check. When the value of `healthCheckType` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `healthCheckContextType` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
     */
    healthCheckSendContext?: pulumi.Input<string>;
    /**
     * Indicates whether health check is enabled.
     */
    healthCheckSwitch?: pulumi.Input<boolean>;
    /**
     * Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
     */
    healthCheckTimeOut?: pulumi.Input<number>;
    /**
     * Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    healthCheckUnhealthNum?: pulumi.Input<number>;
    /**
     * Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
     */
    healthSourceIpType?: pulumi.Input<number>;
    /**
     * Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
     */
    keepaliveEnable?: pulumi.Input<number>;
    /**
     * ID of this CLB listener.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
     */
    listenerName?: pulumi.Input<string>;
    /**
     * Port of the CLB listener.
     */
    port?: pulumi.Input<number>;
    /**
     * Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    sessionExpireTime?: pulumi.Input<number>;
    /**
     * Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
     */
    sessionType?: pulumi.Input<string>;
    /**
     * Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `tencentcloud.Clb.ListenerRule`, otherwise all rules have a certificate.
     */
    sniSwitch?: pulumi.Input<boolean>;
    /**
     * Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
     */
    targetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Listener resource.
 */
export interface ListenerArgs {
    /**
     * ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the ssl mode is `MUTUAL`.
     */
    certificateCaId?: pulumi.Input<string>;
    /**
     * ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it is available.
     */
    certificateSslMode?: pulumi.Input<string>;
    /**
     * ID of the CLB.
     */
    clbId: pulumi.Input<string>;
    /**
     * This parameter is used to specify the end port and is required when creating a port range listener. Only one member can be passed in when inputting the `Ports` parameter, which is used to specify the start port. If you want to try the port range feature, please [submit a ticket](https://console.cloud.tencent.com/workorder/category).
     */
    endPort?: pulumi.Input<number>;
    /**
     * Enable H2C switch for intranet HTTP listener.
     */
    h2cSwitch?: pulumi.Input<boolean>;
    /**
     * Health check protocol. When the value of `healthCheckType` of the health check protocol is `CUSTOM`, this field is required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
     */
    healthCheckContextType?: pulumi.Input<string>;
    /**
     * Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3 consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
     */
    healthCheckHealthNum?: pulumi.Input<number>;
    /**
     * HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `healthCheckType` of the health check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate health, need to add the corresponding values.
     */
    healthCheckHttpCode?: pulumi.Input<number>;
    /**
     * HTTP health check domain of TCP listener.
     */
    healthCheckHttpDomain?: pulumi.Input<string>;
    /**
     * HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
     */
    healthCheckHttpMethod?: pulumi.Input<string>;
    /**
     * HTTP health check path of TCP listener.
     */
    healthCheckHttpPath?: pulumi.Input<string>;
    /**
     * The HTTP version of the backend service. When the value of `healthCheckType` of the health check protocol is `HTTP`, this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
     */
    healthCheckHttpVersion?: pulumi.Input<string>;
    /**
     * Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    healthCheckIntervalTime?: pulumi.Input<number>;
    /**
     * The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is recommended to leave it blank. Only applicable to TCP/UDP listener.
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * It represents the result returned by the health check. When the value of `healthCheckType` of the health check protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500. When `healthCheckContextType` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
     */
    healthCheckRecvContext?: pulumi.Input<string>;
    /**
     * It represents the content of the request sent by the health check. When the value of `healthCheckType` of the health check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is 500. When `healthCheckContextType` value is `HEX`, the characters of SendContext and RecvContext can only be selected in `0123456789ABCDEF` and the length must be even digits.
     */
    healthCheckSendContext?: pulumi.Input<string>;
    /**
     * Indicates whether health check is enabled.
     */
    healthCheckSwitch?: pulumi.Input<boolean>;
    /**
     * Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
     */
    healthCheckTimeOut?: pulumi.Input<number>;
    /**
     * Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`,`HTTPS`, `PING`, `GRPC`.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    healthCheckUnhealthNum?: pulumi.Input<number>;
    /**
     * Specifies the type of health check source IP. `0` (default): CLB VIP. `1`: 100.64 IP range.
     */
    healthSourceIpType?: pulumi.Input<number>;
    /**
     * Whether to enable a persistent connection. This parameter is applicable only to HTTP and HTTPS listeners. Valid values: 0 (disable; default value) and 1 (enable).
     */
    keepaliveEnable?: pulumi.Input<number>;
    /**
     * Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and hyphen '-'.
     */
    listenerName: pulumi.Input<string>;
    /**
     * Port of the CLB listener.
     */
    port?: pulumi.Input<number>;
    /**
     * Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
     */
    protocol: pulumi.Input<string>;
    /**
     * Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud.Clb.ListenerRule`.
     */
    sessionExpireTime?: pulumi.Input<number>;
    /**
     * Session persistence type. Valid values: `NORMAL`: the default session persistence type; `QUIC_CID`: session persistence by QUIC connection ID. The `QUIC_CID` value can only be configured in UDP listeners. If this field is not specified, the default session persistence type will be used.
     */
    sessionType?: pulumi.Input<string>;
    /**
     * Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for each rule in `tencentcloud.Clb.ListenerRule`, otherwise all rules have a certificate.
     */
    sniSwitch?: pulumi.Input<boolean>;
    /**
     * Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
     */
    targetType?: pulumi.Input<string>;
}
