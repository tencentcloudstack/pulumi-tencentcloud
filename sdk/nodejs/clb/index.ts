// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AttachmentArgs, AttachmentState } from "./attachment";
export type Attachment = import("./attachment").Attachment;
export const Attachment: typeof import("./attachment").Attachment = null as any;
utilities.lazyLoad(exports, ["Attachment"], () => require("./attachment"));

export { CustomizedConfigArgs, CustomizedConfigState } from "./customizedConfig";
export type CustomizedConfig = import("./customizedConfig").CustomizedConfig;
export const CustomizedConfig: typeof import("./customizedConfig").CustomizedConfig = null as any;
utilities.lazyLoad(exports, ["CustomizedConfig"], () => require("./customizedConfig"));

export { FunctionTargetsAttachmentArgs, FunctionTargetsAttachmentState } from "./functionTargetsAttachment";
export type FunctionTargetsAttachment = import("./functionTargetsAttachment").FunctionTargetsAttachment;
export const FunctionTargetsAttachment: typeof import("./functionTargetsAttachment").FunctionTargetsAttachment = null as any;
utilities.lazyLoad(exports, ["FunctionTargetsAttachment"], () => require("./functionTargetsAttachment"));

export { GetAttachmentsArgs, GetAttachmentsResult, GetAttachmentsOutputArgs } from "./getAttachments";
export const getAttachments: typeof import("./getAttachments").getAttachments = null as any;
export const getAttachmentsOutput: typeof import("./getAttachments").getAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAttachments","getAttachmentsOutput"], () => require("./getAttachments"));

export { GetClusterResourcesArgs, GetClusterResourcesResult, GetClusterResourcesOutputArgs } from "./getClusterResources";
export const getClusterResources: typeof import("./getClusterResources").getClusterResources = null as any;
export const getClusterResourcesOutput: typeof import("./getClusterResources").getClusterResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getClusterResources","getClusterResourcesOutput"], () => require("./getClusterResources"));

export { GetCrossTargetsArgs, GetCrossTargetsResult, GetCrossTargetsOutputArgs } from "./getCrossTargets";
export const getCrossTargets: typeof import("./getCrossTargets").getCrossTargets = null as any;
export const getCrossTargetsOutput: typeof import("./getCrossTargets").getCrossTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getCrossTargets","getCrossTargetsOutput"], () => require("./getCrossTargets"));

export { GetExclusiveClustersArgs, GetExclusiveClustersResult, GetExclusiveClustersOutputArgs } from "./getExclusiveClusters";
export const getExclusiveClusters: typeof import("./getExclusiveClusters").getExclusiveClusters = null as any;
export const getExclusiveClustersOutput: typeof import("./getExclusiveClusters").getExclusiveClustersOutput = null as any;
utilities.lazyLoad(exports, ["getExclusiveClusters","getExclusiveClustersOutput"], () => require("./getExclusiveClusters"));

export { GetIdleInstancesArgs, GetIdleInstancesResult, GetIdleInstancesOutputArgs } from "./getIdleInstances";
export const getIdleInstances: typeof import("./getIdleInstances").getIdleInstances = null as any;
export const getIdleInstancesOutput: typeof import("./getIdleInstances").getIdleInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getIdleInstances","getIdleInstancesOutput"], () => require("./getIdleInstances"));

export { GetInstanceByCertIdArgs, GetInstanceByCertIdResult, GetInstanceByCertIdOutputArgs } from "./getInstanceByCertId";
export const getInstanceByCertId: typeof import("./getInstanceByCertId").getInstanceByCertId = null as any;
export const getInstanceByCertIdOutput: typeof import("./getInstanceByCertId").getInstanceByCertIdOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceByCertId","getInstanceByCertIdOutput"], () => require("./getInstanceByCertId"));

export { GetInstanceDetailArgs, GetInstanceDetailResult, GetInstanceDetailOutputArgs } from "./getInstanceDetail";
export const getInstanceDetail: typeof import("./getInstanceDetail").getInstanceDetail = null as any;
export const getInstanceDetailOutput: typeof import("./getInstanceDetail").getInstanceDetailOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceDetail","getInstanceDetailOutput"], () => require("./getInstanceDetail"));

export { GetInstanceTrafficArgs, GetInstanceTrafficResult, GetInstanceTrafficOutputArgs } from "./getInstanceTraffic";
export const getInstanceTraffic: typeof import("./getInstanceTraffic").getInstanceTraffic = null as any;
export const getInstanceTrafficOutput: typeof import("./getInstanceTraffic").getInstanceTrafficOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTraffic","getInstanceTrafficOutput"], () => require("./getInstanceTraffic"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetListenerRulesArgs, GetListenerRulesResult, GetListenerRulesOutputArgs } from "./getListenerRules";
export const getListenerRules: typeof import("./getListenerRules").getListenerRules = null as any;
export const getListenerRulesOutput: typeof import("./getListenerRules").getListenerRulesOutput = null as any;
utilities.lazyLoad(exports, ["getListenerRules","getListenerRulesOutput"], () => require("./getListenerRules"));

export { GetListenersArgs, GetListenersResult, GetListenersOutputArgs } from "./getListeners";
export const getListeners: typeof import("./getListeners").getListeners = null as any;
export const getListenersOutput: typeof import("./getListeners").getListenersOutput = null as any;
utilities.lazyLoad(exports, ["getListeners","getListenersOutput"], () => require("./getListeners"));

export { GetListenersByTargetsArgs, GetListenersByTargetsResult, GetListenersByTargetsOutputArgs } from "./getListenersByTargets";
export const getListenersByTargets: typeof import("./getListenersByTargets").getListenersByTargets = null as any;
export const getListenersByTargetsOutput: typeof import("./getListenersByTargets").getListenersByTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getListenersByTargets","getListenersByTargetsOutput"], () => require("./getListenersByTargets"));

export { GetRedirectionsArgs, GetRedirectionsResult, GetRedirectionsOutputArgs } from "./getRedirections";
export const getRedirections: typeof import("./getRedirections").getRedirections = null as any;
export const getRedirectionsOutput: typeof import("./getRedirections").getRedirectionsOutput = null as any;
utilities.lazyLoad(exports, ["getRedirections","getRedirectionsOutput"], () => require("./getRedirections"));

export { GetResourcesArgs, GetResourcesResult, GetResourcesOutputArgs } from "./getResources";
export const getResources: typeof import("./getResources").getResources = null as any;
export const getResourcesOutput: typeof import("./getResources").getResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getResources","getResourcesOutput"], () => require("./getResources"));

export { GetTargetGroupListArgs, GetTargetGroupListResult, GetTargetGroupListOutputArgs } from "./getTargetGroupList";
export const getTargetGroupList: typeof import("./getTargetGroupList").getTargetGroupList = null as any;
export const getTargetGroupListOutput: typeof import("./getTargetGroupList").getTargetGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getTargetGroupList","getTargetGroupListOutput"], () => require("./getTargetGroupList"));

export { GetTargetGroupsArgs, GetTargetGroupsResult, GetTargetGroupsOutputArgs } from "./getTargetGroups";
export const getTargetGroups: typeof import("./getTargetGroups").getTargetGroups = null as any;
export const getTargetGroupsOutput: typeof import("./getTargetGroups").getTargetGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getTargetGroups","getTargetGroupsOutput"], () => require("./getTargetGroups"));

export { GetTargetHealthArgs, GetTargetHealthResult, GetTargetHealthOutputArgs } from "./getTargetHealth";
export const getTargetHealth: typeof import("./getTargetHealth").getTargetHealth = null as any;
export const getTargetHealthOutput: typeof import("./getTargetHealth").getTargetHealthOutput = null as any;
utilities.lazyLoad(exports, ["getTargetHealth","getTargetHealthOutput"], () => require("./getTargetHealth"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceMixIpTargetConfigArgs, InstanceMixIpTargetConfigState } from "./instanceMixIpTargetConfig";
export type InstanceMixIpTargetConfig = import("./instanceMixIpTargetConfig").InstanceMixIpTargetConfig;
export const InstanceMixIpTargetConfig: typeof import("./instanceMixIpTargetConfig").InstanceMixIpTargetConfig = null as any;
utilities.lazyLoad(exports, ["InstanceMixIpTargetConfig"], () => require("./instanceMixIpTargetConfig"));

export { InstanceSlaConfigArgs, InstanceSlaConfigState } from "./instanceSlaConfig";
export type InstanceSlaConfig = import("./instanceSlaConfig").InstanceSlaConfig;
export const InstanceSlaConfig: typeof import("./instanceSlaConfig").InstanceSlaConfig = null as any;
utilities.lazyLoad(exports, ["InstanceSlaConfig"], () => require("./instanceSlaConfig"));

export { ListenerArgs, ListenerState } from "./listener";
export type Listener = import("./listener").Listener;
export const Listener: typeof import("./listener").Listener = null as any;
utilities.lazyLoad(exports, ["Listener"], () => require("./listener"));

export { ListenerDefaultDomainArgs, ListenerDefaultDomainState } from "./listenerDefaultDomain";
export type ListenerDefaultDomain = import("./listenerDefaultDomain").ListenerDefaultDomain;
export const ListenerDefaultDomain: typeof import("./listenerDefaultDomain").ListenerDefaultDomain = null as any;
utilities.lazyLoad(exports, ["ListenerDefaultDomain"], () => require("./listenerDefaultDomain"));

export { ListenerRuleArgs, ListenerRuleState } from "./listenerRule";
export type ListenerRule = import("./listenerRule").ListenerRule;
export const ListenerRule: typeof import("./listenerRule").ListenerRule = null as any;
utilities.lazyLoad(exports, ["ListenerRule"], () => require("./listenerRule"));

export { LogSetArgs, LogSetState } from "./logSet";
export type LogSet = import("./logSet").LogSet;
export const LogSet: typeof import("./logSet").LogSet = null as any;
utilities.lazyLoad(exports, ["LogSet"], () => require("./logSet"));

export { LogTopicArgs, LogTopicState } from "./logTopic";
export type LogTopic = import("./logTopic").LogTopic;
export const LogTopic: typeof import("./logTopic").LogTopic = null as any;
utilities.lazyLoad(exports, ["LogTopic"], () => require("./logTopic"));

export { RedirectionArgs, RedirectionState } from "./redirection";
export type Redirection = import("./redirection").Redirection;
export const Redirection: typeof import("./redirection").Redirection = null as any;
utilities.lazyLoad(exports, ["Redirection"], () => require("./redirection"));

export { ReplaceCertForLbsArgs, ReplaceCertForLbsState } from "./replaceCertForLbs";
export type ReplaceCertForLbs = import("./replaceCertForLbs").ReplaceCertForLbs;
export const ReplaceCertForLbs: typeof import("./replaceCertForLbs").ReplaceCertForLbs = null as any;
utilities.lazyLoad(exports, ["ReplaceCertForLbs"], () => require("./replaceCertForLbs"));

export { SecurityGroupAttachmentArgs, SecurityGroupAttachmentState } from "./securityGroupAttachment";
export type SecurityGroupAttachment = import("./securityGroupAttachment").SecurityGroupAttachment;
export const SecurityGroupAttachment: typeof import("./securityGroupAttachment").SecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["SecurityGroupAttachment"], () => require("./securityGroupAttachment"));

export { SnatIpArgs, SnatIpState } from "./snatIp";
export type SnatIp = import("./snatIp").SnatIp;
export const SnatIp: typeof import("./snatIp").SnatIp = null as any;
utilities.lazyLoad(exports, ["SnatIp"], () => require("./snatIp"));

export { TargetGroupArgs, TargetGroupState } from "./targetGroup";
export type TargetGroup = import("./targetGroup").TargetGroup;
export const TargetGroup: typeof import("./targetGroup").TargetGroup = null as any;
utilities.lazyLoad(exports, ["TargetGroup"], () => require("./targetGroup"));

export { TargetGroupAttachmentArgs, TargetGroupAttachmentState } from "./targetGroupAttachment";
export type TargetGroupAttachment = import("./targetGroupAttachment").TargetGroupAttachment;
export const TargetGroupAttachment: typeof import("./targetGroupAttachment").TargetGroupAttachment = null as any;
utilities.lazyLoad(exports, ["TargetGroupAttachment"], () => require("./targetGroupAttachment"));

export { TargetGroupAttachmentsArgs, TargetGroupAttachmentsState } from "./targetGroupAttachments";
export type TargetGroupAttachments = import("./targetGroupAttachments").TargetGroupAttachments;
export const TargetGroupAttachments: typeof import("./targetGroupAttachments").TargetGroupAttachments = null as any;
utilities.lazyLoad(exports, ["TargetGroupAttachments"], () => require("./targetGroupAttachments"));

export { TargetGroupInstanceAttachmentArgs, TargetGroupInstanceAttachmentState } from "./targetGroupInstanceAttachment";
export type TargetGroupInstanceAttachment = import("./targetGroupInstanceAttachment").TargetGroupInstanceAttachment;
export const TargetGroupInstanceAttachment: typeof import("./targetGroupInstanceAttachment").TargetGroupInstanceAttachment = null as any;
utilities.lazyLoad(exports, ["TargetGroupInstanceAttachment"], () => require("./targetGroupInstanceAttachment"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Clb/attachment:Attachment":
                return new Attachment(name, <any>undefined, { urn })
            case "tencentcloud:Clb/customizedConfig:CustomizedConfig":
                return new CustomizedConfig(name, <any>undefined, { urn })
            case "tencentcloud:Clb/functionTargetsAttachment:FunctionTargetsAttachment":
                return new FunctionTargetsAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Clb/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "tencentcloud:Clb/instanceMixIpTargetConfig:InstanceMixIpTargetConfig":
                return new InstanceMixIpTargetConfig(name, <any>undefined, { urn })
            case "tencentcloud:Clb/instanceSlaConfig:InstanceSlaConfig":
                return new InstanceSlaConfig(name, <any>undefined, { urn })
            case "tencentcloud:Clb/listener:Listener":
                return new Listener(name, <any>undefined, { urn })
            case "tencentcloud:Clb/listenerDefaultDomain:ListenerDefaultDomain":
                return new ListenerDefaultDomain(name, <any>undefined, { urn })
            case "tencentcloud:Clb/listenerRule:ListenerRule":
                return new ListenerRule(name, <any>undefined, { urn })
            case "tencentcloud:Clb/logSet:LogSet":
                return new LogSet(name, <any>undefined, { urn })
            case "tencentcloud:Clb/logTopic:LogTopic":
                return new LogTopic(name, <any>undefined, { urn })
            case "tencentcloud:Clb/redirection:Redirection":
                return new Redirection(name, <any>undefined, { urn })
            case "tencentcloud:Clb/replaceCertForLbs:ReplaceCertForLbs":
                return new ReplaceCertForLbs(name, <any>undefined, { urn })
            case "tencentcloud:Clb/securityGroupAttachment:SecurityGroupAttachment":
                return new SecurityGroupAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Clb/snatIp:SnatIp":
                return new SnatIp(name, <any>undefined, { urn })
            case "tencentcloud:Clb/targetGroup:TargetGroup":
                return new TargetGroup(name, <any>undefined, { urn })
            case "tencentcloud:Clb/targetGroupAttachment:TargetGroupAttachment":
                return new TargetGroupAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Clb/targetGroupAttachments:TargetGroupAttachments":
                return new TargetGroupAttachments(name, <any>undefined, { urn })
            case "tencentcloud:Clb/targetGroupInstanceAttachment:TargetGroupInstanceAttachment":
                return new TargetGroupInstanceAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/attachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/customizedConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/functionTargetsAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/instance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/instanceMixIpTargetConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/instanceSlaConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/listener", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/listenerDefaultDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/listenerRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/logSet", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/logTopic", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/redirection", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/replaceCertForLbs", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/securityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/snatIp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/targetGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/targetGroupAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/targetGroupAttachments", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Clb/targetGroupInstanceAttachment", _module)
