// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AttachmentArgs, AttachmentState } from "./attachment";
export type Attachment = import("./attachment").Attachment;
export const Attachment: typeof import("./attachment").Attachment = null as any;
utilities.lazyLoad(exports, ["Attachment"], () => require("./attachment"));

export { BandwidthLimitArgs, BandwidthLimitState } from "./bandwidthLimit";
export type BandwidthLimit = import("./bandwidthLimit").BandwidthLimit;
export const BandwidthLimit: typeof import("./bandwidthLimit").BandwidthLimit = null as any;
utilities.lazyLoad(exports, ["BandwidthLimit"], () => require("./bandwidthLimit"));

export { GetBandwidthLimitsArgs, GetBandwidthLimitsResult, GetBandwidthLimitsOutputArgs } from "./getBandwidthLimits";
export const getBandwidthLimits: typeof import("./getBandwidthLimits").getBandwidthLimits = null as any;
export const getBandwidthLimitsOutput: typeof import("./getBandwidthLimits").getBandwidthLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getBandwidthLimits","getBandwidthLimitsOutput"], () => require("./getBandwidthLimits"));

export { GetCrossBorderComplianceArgs, GetCrossBorderComplianceResult, GetCrossBorderComplianceOutputArgs } from "./getCrossBorderCompliance";
export const getCrossBorderCompliance: typeof import("./getCrossBorderCompliance").getCrossBorderCompliance = null as any;
export const getCrossBorderComplianceOutput: typeof import("./getCrossBorderCompliance").getCrossBorderComplianceOutput = null as any;
utilities.lazyLoad(exports, ["getCrossBorderCompliance","getCrossBorderComplianceOutput"], () => require("./getCrossBorderCompliance"));

export { GetCrossBorderFlowMonitorArgs, GetCrossBorderFlowMonitorResult, GetCrossBorderFlowMonitorOutputArgs } from "./getCrossBorderFlowMonitor";
export const getCrossBorderFlowMonitor: typeof import("./getCrossBorderFlowMonitor").getCrossBorderFlowMonitor = null as any;
export const getCrossBorderFlowMonitorOutput: typeof import("./getCrossBorderFlowMonitor").getCrossBorderFlowMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getCrossBorderFlowMonitor","getCrossBorderFlowMonitorOutput"], () => require("./getCrossBorderFlowMonitor"));

export { GetCrossBorderRegionBandwidthLimitsArgs, GetCrossBorderRegionBandwidthLimitsResult, GetCrossBorderRegionBandwidthLimitsOutputArgs } from "./getCrossBorderRegionBandwidthLimits";
export const getCrossBorderRegionBandwidthLimits: typeof import("./getCrossBorderRegionBandwidthLimits").getCrossBorderRegionBandwidthLimits = null as any;
export const getCrossBorderRegionBandwidthLimitsOutput: typeof import("./getCrossBorderRegionBandwidthLimits").getCrossBorderRegionBandwidthLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getCrossBorderRegionBandwidthLimits","getCrossBorderRegionBandwidthLimitsOutput"], () => require("./getCrossBorderRegionBandwidthLimits"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetRouteTableInputPoliciesArgs, GetRouteTableInputPoliciesResult, GetRouteTableInputPoliciesOutputArgs } from "./getRouteTableInputPolicies";
export const getRouteTableInputPolicies: typeof import("./getRouteTableInputPolicies").getRouteTableInputPolicies = null as any;
export const getRouteTableInputPoliciesOutput: typeof import("./getRouteTableInputPolicies").getRouteTableInputPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTableInputPolicies","getRouteTableInputPoliciesOutput"], () => require("./getRouteTableInputPolicies"));

export { GetRoutesArgs, GetRoutesResult, GetRoutesOutputArgs } from "./getRoutes";
export const getRoutes: typeof import("./getRoutes").getRoutes = null as any;
export const getRoutesOutput: typeof import("./getRoutes").getRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getRoutes","getRoutesOutput"], () => require("./getRoutes"));

export { GetTenantInstancesArgs, GetTenantInstancesResult, GetTenantInstancesOutputArgs } from "./getTenantInstances";
export const getTenantInstances: typeof import("./getTenantInstances").getTenantInstances = null as any;
export const getTenantInstancesOutput: typeof import("./getTenantInstances").getTenantInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getTenantInstances","getTenantInstancesOutput"], () => require("./getTenantInstances"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstancesAcceptAttachArgs, InstancesAcceptAttachState } from "./instancesAcceptAttach";
export type InstancesAcceptAttach = import("./instancesAcceptAttach").InstancesAcceptAttach;
export const InstancesAcceptAttach: typeof import("./instancesAcceptAttach").InstancesAcceptAttach = null as any;
utilities.lazyLoad(exports, ["InstancesAcceptAttach"], () => require("./instancesAcceptAttach"));

export { InstancesRejectAttachArgs, InstancesRejectAttachState } from "./instancesRejectAttach";
export type InstancesRejectAttach = import("./instancesRejectAttach").InstancesRejectAttach;
export const InstancesRejectAttach: typeof import("./instancesRejectAttach").InstancesRejectAttach = null as any;
utilities.lazyLoad(exports, ["InstancesRejectAttach"], () => require("./instancesRejectAttach"));

export { InstancesResetAttachArgs, InstancesResetAttachState } from "./instancesResetAttach";
export type InstancesResetAttach = import("./instancesResetAttach").InstancesResetAttach;
export const InstancesResetAttach: typeof import("./instancesResetAttach").InstancesResetAttach = null as any;
utilities.lazyLoad(exports, ["InstancesResetAttach"], () => require("./instancesResetAttach"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { RouteTableAssociateInstanceConfigArgs, RouteTableAssociateInstanceConfigState } from "./routeTableAssociateInstanceConfig";
export type RouteTableAssociateInstanceConfig = import("./routeTableAssociateInstanceConfig").RouteTableAssociateInstanceConfig;
export const RouteTableAssociateInstanceConfig: typeof import("./routeTableAssociateInstanceConfig").RouteTableAssociateInstanceConfig = null as any;
utilities.lazyLoad(exports, ["RouteTableAssociateInstanceConfig"], () => require("./routeTableAssociateInstanceConfig"));

export { RouteTableBroadcastPoliciesArgs, RouteTableBroadcastPoliciesState } from "./routeTableBroadcastPolicies";
export type RouteTableBroadcastPolicies = import("./routeTableBroadcastPolicies").RouteTableBroadcastPolicies;
export const RouteTableBroadcastPolicies: typeof import("./routeTableBroadcastPolicies").RouteTableBroadcastPolicies = null as any;
utilities.lazyLoad(exports, ["RouteTableBroadcastPolicies"], () => require("./routeTableBroadcastPolicies"));

export { RouteTableInputPoliciesArgs, RouteTableInputPoliciesState } from "./routeTableInputPolicies";
export type RouteTableInputPolicies = import("./routeTableInputPolicies").RouteTableInputPolicies;
export const RouteTableInputPolicies: typeof import("./routeTableInputPolicies").RouteTableInputPolicies = null as any;
utilities.lazyLoad(exports, ["RouteTableInputPolicies"], () => require("./routeTableInputPolicies"));

export { RouteTableSelectionPoliciesArgs, RouteTableSelectionPoliciesState } from "./routeTableSelectionPolicies";
export type RouteTableSelectionPolicies = import("./routeTableSelectionPolicies").RouteTableSelectionPolicies;
export const RouteTableSelectionPolicies: typeof import("./routeTableSelectionPolicies").RouteTableSelectionPolicies = null as any;
utilities.lazyLoad(exports, ["RouteTableSelectionPolicies"], () => require("./routeTableSelectionPolicies"));

export { RoutesArgs, RoutesState } from "./routes";
export type Routes = import("./routes").Routes;
export const Routes: typeof import("./routes").Routes = null as any;
utilities.lazyLoad(exports, ["Routes"], () => require("./routes"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Ccn/attachment:Attachment":
                return new Attachment(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/bandwidthLimit:BandwidthLimit":
                return new BandwidthLimit(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/instancesAcceptAttach:InstancesAcceptAttach":
                return new InstancesAcceptAttach(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/instancesRejectAttach:InstancesRejectAttach":
                return new InstancesRejectAttach(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/instancesResetAttach:InstancesResetAttach":
                return new InstancesResetAttach(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/routeTableAssociateInstanceConfig:RouteTableAssociateInstanceConfig":
                return new RouteTableAssociateInstanceConfig(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/routeTableBroadcastPolicies:RouteTableBroadcastPolicies":
                return new RouteTableBroadcastPolicies(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/routeTableInputPolicies:RouteTableInputPolicies":
                return new RouteTableInputPolicies(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/routeTableSelectionPolicies:RouteTableSelectionPolicies":
                return new RouteTableSelectionPolicies(name, <any>undefined, { urn })
            case "tencentcloud:Ccn/routes:Routes":
                return new Routes(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/attachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/bandwidthLimit", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/instance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/instancesAcceptAttach", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/instancesRejectAttach", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/instancesResetAttach", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/routeTable", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/routeTableAssociateInstanceConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/routeTableBroadcastPolicies", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/routeTableInputPolicies", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/routeTableSelectionPolicies", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ccn/routes", _module)
