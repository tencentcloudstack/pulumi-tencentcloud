// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a vpc ccnRoutes switch
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const example = new tencentcloud.ccn.Routes("example", {
 *     ccnId: "ccn-gr7nynbd",
 *     routeId: "ccnr-5uhewx1s",
 *     "switch": "off",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * vpc ccn_routes can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Ccn/routes:Routes ccn_routes ccn-gr7nynbd#ccnr-5uhewx1s
 * ```
 */
export class Routes extends pulumi.CustomResource {
    /**
     * Get an existing Routes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoutesState, opts?: pulumi.CustomResourceOptions): Routes {
        return new Routes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Ccn/routes:Routes';

    /**
     * Returns true if the given object is an instance of Routes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Routes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Routes.__pulumiType;
    }

    /**
     * CCN Instance ID.
     */
    public readonly ccnId!: pulumi.Output<string>;
    /**
     * CCN Route Id List.
     */
    public readonly routeId!: pulumi.Output<string>;
    /**
     * `on`: Enable, `off`: Disable.
     */
    public readonly switch!: pulumi.Output<string>;

    /**
     * Create a Routes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoutesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoutesArgs | RoutesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoutesState | undefined;
            resourceInputs["ccnId"] = state ? state.ccnId : undefined;
            resourceInputs["routeId"] = state ? state.routeId : undefined;
            resourceInputs["switch"] = state ? state.switch : undefined;
        } else {
            const args = argsOrState as RoutesArgs | undefined;
            if ((!args || args.ccnId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ccnId'");
            }
            if ((!args || args.routeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeId'");
            }
            if ((!args || args.switch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switch'");
            }
            resourceInputs["ccnId"] = args ? args.ccnId : undefined;
            resourceInputs["routeId"] = args ? args.routeId : undefined;
            resourceInputs["switch"] = args ? args.switch : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Routes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Routes resources.
 */
export interface RoutesState {
    /**
     * CCN Instance ID.
     */
    ccnId?: pulumi.Input<string>;
    /**
     * CCN Route Id List.
     */
    routeId?: pulumi.Input<string>;
    /**
     * `on`: Enable, `off`: Disable.
     */
    switch?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Routes resource.
 */
export interface RoutesArgs {
    /**
     * CCN Instance ID.
     */
    ccnId: pulumi.Input<string>;
    /**
     * CCN Route Id List.
     */
    routeId: pulumi.Input<string>;
    /**
     * `on`: Enable, `off`: Disable.
     */
    switch: pulumi.Input<string>;
}
