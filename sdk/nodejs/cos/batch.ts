// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a cos bucket batch.
 *
 * > **NOTE:** The current resource does not support `cosDomain`.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const cosBatch = new tencentcloud.cos.Batch("cosBatch", {
 *     appid: 1308919341,
 *     confirmationRequired: true,
 *     description: "cos_batch",
 *     manifest: {
 *         location: {
 *             etag: "64357de8fd75a3abae2200135a2c9627",
 *             objectArn: "qcs::cos:ap-guangzhou:uid/1308919341:keep-test-1308919341/cos_bucket_inventory/1308919341/keep-test/test/20230621/manifest.json",
 *         },
 *         spec: {
 *             format: "COSInventoryReport_CSV_V1",
 *         },
 *     },
 *     operation: {
 *         cosPutObjectCopy: {
 *             accessControlDirective: "Copy",
 *             metadataDirective: "Copy",
 *             prefixReplace: false,
 *             storageClass: "STANDARD",
 *             taggingDirective: "Copy",
 *             targetResource: "qcs::cos:ap-guangzhou:uid/1308919341:cos-lock-1308919341",
 *         },
 *     },
 *     priority: 1,
 *     report: {
 *         bucket: "qcs::cos:ap-guangzhou:uid/1308919341:keep-test-1308919341",
 *         enabled: "true",
 *         format: "Report_CSV_V1",
 *         reportScope: "AllTasks",
 *     },
 *     roleArn: "qcs::cam::uin/100022975249:roleName/COSBatch_QCSRole",
 *     status: "Cancelled",
 *     uin: "100022975249",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * cos bucket batch can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Cos/batch:Batch cos_batch ${uin}#${appid}#{job_id}
 * ```
 */
export class Batch extends pulumi.CustomResource {
    /**
     * Get an existing Batch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BatchState, opts?: pulumi.CustomResourceOptions): Batch {
        return new Batch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cos/batch:Batch';

    /**
     * Returns true if the given object is an instance of Batch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Batch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Batch.__pulumiType;
    }

    /**
     * Appid.
     */
    public readonly appid!: pulumi.Output<number>;
    /**
     * Whether to confirm before performing the task. The default is false.
     */
    public readonly confirmationRequired!: pulumi.Output<boolean | undefined>;
    /**
     * Mission description. If you configured this information when you created the task, the content is returned. The description length ranges from 0 to 256 bytes.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Job id.
     */
    public /*out*/ readonly jobId!: pulumi.Output<string>;
    /**
     * List of objects to be processed.
     */
    public readonly manifest!: pulumi.Output<outputs.Cos.BatchManifest>;
    /**
     * Select the action to be performed on the objects in the manifest file.
     */
    public readonly operation!: pulumi.Output<outputs.Cos.BatchOperation>;
    /**
     * Mission priority. The higher the value, the higher the priority of the task. Priority values range from 0 to 2147483647.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Task completion report.
     */
    public readonly report!: pulumi.Output<outputs.Cos.BatchReport>;
    /**
     * COS resource identifier, which is used to identify the role you created. You need this resource identifier to verify your identity.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * Current status of the task.
     * Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
     * For Update status, when you move a task to the Ready state, COS will assume that you have confirmed the task and will perform it. When you move a task to the Cancelled state, COS cancels the task. Optional parameters include: Ready, Cancelled.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Uin.
     */
    public readonly uin!: pulumi.Output<string>;

    /**
     * Create a Batch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BatchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BatchArgs | BatchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BatchState | undefined;
            resourceInputs["appid"] = state ? state.appid : undefined;
            resourceInputs["confirmationRequired"] = state ? state.confirmationRequired : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["jobId"] = state ? state.jobId : undefined;
            resourceInputs["manifest"] = state ? state.manifest : undefined;
            resourceInputs["operation"] = state ? state.operation : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["report"] = state ? state.report : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uin"] = state ? state.uin : undefined;
        } else {
            const args = argsOrState as BatchArgs | undefined;
            if ((!args || args.appid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appid'");
            }
            if ((!args || args.manifest === undefined) && !opts.urn) {
                throw new Error("Missing required property 'manifest'");
            }
            if ((!args || args.operation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operation'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.report === undefined) && !opts.urn) {
                throw new Error("Missing required property 'report'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.uin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uin'");
            }
            resourceInputs["appid"] = args ? args.appid : undefined;
            resourceInputs["confirmationRequired"] = args ? args.confirmationRequired : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["manifest"] = args ? args.manifest : undefined;
            resourceInputs["operation"] = args ? args.operation : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["report"] = args ? args.report : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["uin"] = args ? args.uin : undefined;
            resourceInputs["jobId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Batch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Batch resources.
 */
export interface BatchState {
    /**
     * Appid.
     */
    appid?: pulumi.Input<number>;
    /**
     * Whether to confirm before performing the task. The default is false.
     */
    confirmationRequired?: pulumi.Input<boolean>;
    /**
     * Mission description. If you configured this information when you created the task, the content is returned. The description length ranges from 0 to 256 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * Job id.
     */
    jobId?: pulumi.Input<string>;
    /**
     * List of objects to be processed.
     */
    manifest?: pulumi.Input<inputs.Cos.BatchManifest>;
    /**
     * Select the action to be performed on the objects in the manifest file.
     */
    operation?: pulumi.Input<inputs.Cos.BatchOperation>;
    /**
     * Mission priority. The higher the value, the higher the priority of the task. Priority values range from 0 to 2147483647.
     */
    priority?: pulumi.Input<number>;
    /**
     * Task completion report.
     */
    report?: pulumi.Input<inputs.Cos.BatchReport>;
    /**
     * COS resource identifier, which is used to identify the role you created. You need this resource identifier to verify your identity.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Current status of the task.
     * Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
     * For Update status, when you move a task to the Ready state, COS will assume that you have confirmed the task and will perform it. When you move a task to the Cancelled state, COS cancels the task. Optional parameters include: Ready, Cancelled.
     */
    status?: pulumi.Input<string>;
    /**
     * Uin.
     */
    uin?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Batch resource.
 */
export interface BatchArgs {
    /**
     * Appid.
     */
    appid: pulumi.Input<number>;
    /**
     * Whether to confirm before performing the task. The default is false.
     */
    confirmationRequired?: pulumi.Input<boolean>;
    /**
     * Mission description. If you configured this information when you created the task, the content is returned. The description length ranges from 0 to 256 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * List of objects to be processed.
     */
    manifest: pulumi.Input<inputs.Cos.BatchManifest>;
    /**
     * Select the action to be performed on the objects in the manifest file.
     */
    operation: pulumi.Input<inputs.Cos.BatchOperation>;
    /**
     * Mission priority. The higher the value, the higher the priority of the task. Priority values range from 0 to 2147483647.
     */
    priority: pulumi.Input<number>;
    /**
     * Task completion report.
     */
    report: pulumi.Input<inputs.Cos.BatchReport>;
    /**
     * COS resource identifier, which is used to identify the role you created. You need this resource identifier to verify your identity.
     */
    roleArn: pulumi.Input<string>;
    /**
     * Current status of the task.
     * Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
     * For Update status, when you move a task to the Ready state, COS will assume that you have confirmed the task and will perform it. When you move a task to the Cancelled state, COS cancels the task. Optional parameters include: Ready, Cancelled.
     */
    status?: pulumi.Input<string>;
    /**
     * Uin.
     */
    uin: pulumi.Input<string>;
}
