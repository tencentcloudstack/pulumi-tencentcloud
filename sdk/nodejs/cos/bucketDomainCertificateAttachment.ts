// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to attach/detach the corresponding certificate for the domain name in specified cos bucket.
 *
 * > **NOTE:** The current resource does not support cdc.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const foo = new tencentcloud.cos.BucketDomainCertificateAttachment("foo", {
 *     bucket: "",
 *     domainCertificate: {
 *         certificate: {
 *             certType: "CustomCert",
 *             customCert: {
 *                 cert: "===CERTIFICATE===",
 *                 privateKey: "===PRIVATE_KEY===",
 *             },
 *         },
 *         domain: "domain_name",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class BucketDomainCertificateAttachment extends pulumi.CustomResource {
    /**
     * Get an existing BucketDomainCertificateAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketDomainCertificateAttachmentState, opts?: pulumi.CustomResourceOptions): BucketDomainCertificateAttachment {
        return new BucketDomainCertificateAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cos/bucketDomainCertificateAttachment:BucketDomainCertificateAttachment';

    /**
     * Returns true if the given object is an instance of BucketDomainCertificateAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketDomainCertificateAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketDomainCertificateAttachment.__pulumiType;
    }

    /**
     * Bucket name.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * The certificate of specified doamin.
     */
    public readonly domainCertificate!: pulumi.Output<outputs.Cos.BucketDomainCertificateAttachmentDomainCertificate>;

    /**
     * Create a BucketDomainCertificateAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketDomainCertificateAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketDomainCertificateAttachmentArgs | BucketDomainCertificateAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketDomainCertificateAttachmentState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["domainCertificate"] = state ? state.domainCertificate : undefined;
        } else {
            const args = argsOrState as BucketDomainCertificateAttachmentArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.domainCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainCertificate'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["domainCertificate"] = args ? args.domainCertificate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketDomainCertificateAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketDomainCertificateAttachment resources.
 */
export interface BucketDomainCertificateAttachmentState {
    /**
     * Bucket name.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The certificate of specified doamin.
     */
    domainCertificate?: pulumi.Input<inputs.Cos.BucketDomainCertificateAttachmentDomainCertificate>;
}

/**
 * The set of arguments for constructing a BucketDomainCertificateAttachment resource.
 */
export interface BucketDomainCertificateAttachmentArgs {
    /**
     * Bucket name.
     */
    bucket: pulumi.Input<string>;
    /**
     * The certificate of specified doamin.
     */
    domainCertificate: pulumi.Input<inputs.Cos.BucketDomainCertificateAttachmentDomainCertificate>;
}
