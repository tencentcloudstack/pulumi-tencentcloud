// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provide a resource to increase instance to cluster
 *
 * > **NOTE:** To use the custom Kubernetes component startup parameter function (parameter `extraArgs`), you need to submit a ticket for application.
 *
 * > **NOTE:** Import Node: Currently, only one node can be imported at a time.
 *
 * > **NOTE:** If you need to view error messages during instance creation, you can use parameter `createResultOutputFile` to set the file save path
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const config = new pulumi.Config();
 * const availabilityZone = config.get("availabilityZone") || "ap-guangzhou-3";
 * const subnet = config.get("subnet") || "subnet-pqfek0t8";
 * const scaleInstanceType = config.get("scaleInstanceType") || "S2.LARGE16";
 * const example = new tencentcloud.kubernetes.ScaleWorker("example", {
 *     clusterId: "cls-godovr32",
 *     desiredPodNum: 16,
 *     labels: {
 *         test1: "test1",
 *         test2: "test2",
 *     },
 *     workerConfig: {
 *         count: 3,
 *         availabilityZone: availabilityZone,
 *         instanceType: scaleInstanceType,
 *         subnetId: subnet,
 *         systemDiskType: "CLOUD_SSD",
 *         systemDiskSize: 50,
 *         internetChargeType: "TRAFFIC_POSTPAID_BY_HOUR",
 *         internetMaxBandwidthOut: 100,
 *         publicIpAssigned: true,
 *         dataDisks: [{
 *             diskType: "CLOUD_PREMIUM",
 *             diskSize: 50,
 *         }],
 *         enhancedSecurityService: false,
 *         enhancedMonitorService: false,
 *         userData: "dGVzdA==",
 *         password: "AABBccdd1122",
 *     },
 *     createResultOutputFile: "my_output_file_path",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Use Kubelet
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const config = new pulumi.Config();
 * const availabilityZone = config.get("availabilityZone") || "ap-guangzhou-3";
 * const subnet = config.get("subnet") || "subnet-pqfek0t8";
 * const scaleInstanceType = config.get("scaleInstanceType") || "S2.LARGE16";
 * const example = new tencentcloud.kubernetes.ScaleWorker("example", {
 *     clusterId: "cls-godovr32",
 *     extraArgs: ["root-dir=/var/lib/kubelet"],
 *     labels: {
 *         test1: "test1",
 *         test2: "test2",
 *     },
 *     workerConfig: {
 *         count: 3,
 *         availabilityZone: availabilityZone,
 *         instanceType: scaleInstanceType,
 *         subnetId: subnet,
 *         systemDiskType: "CLOUD_SSD",
 *         systemDiskSize: 50,
 *         internetChargeType: "TRAFFIC_POSTPAID_BY_HOUR",
 *         internetMaxBandwidthOut: 100,
 *         publicIpAssigned: true,
 *         dataDisks: [{
 *             diskType: "CLOUD_PREMIUM",
 *             diskSize: 50,
 *         }],
 *         enhancedSecurityService: false,
 *         enhancedMonitorService: false,
 *         userData: "dGVzdA==",
 *         password: "AABBccdd1122",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * tke scale worker can be imported, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Kubernetes/scaleWorker:ScaleWorker example cls-mij6c2pq#ins-n6esjkdi
 * ```
 */
export class ScaleWorker extends pulumi.CustomResource {
    /**
     * Get an existing ScaleWorker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScaleWorkerState, opts?: pulumi.CustomResourceOptions): ScaleWorker {
        return new ScaleWorker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Kubernetes/scaleWorker:ScaleWorker';

    /**
     * Returns true if the given object is an instance of ScaleWorker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScaleWorker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScaleWorker.__pulumiType;
    }

    /**
     * ID of the cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Used to save results of CVMs creation error messages.
     */
    public readonly createResultOutputFile!: pulumi.Output<string | undefined>;
    /**
     * Configurations of tke data disk.
     */
    public readonly dataDisks!: pulumi.Output<outputs.Kubernetes.ScaleWorkerDataDisk[] | undefined>;
    /**
     * Indicate to set desired pod number in current node. Valid when the cluster enable customized pod cidr.
     */
    public readonly desiredPodNum!: pulumi.Output<number | undefined>;
    /**
     * Docker graph path. Default is `/var/lib/docker`.
     */
    public readonly dockerGraphPath!: pulumi.Output<string | undefined>;
    /**
     * Custom parameter information related to the node.
     */
    public readonly extraArgs!: pulumi.Output<string[] | undefined>;
    /**
     * GPU driver parameters.
     */
    public readonly gpuArgs!: pulumi.Output<outputs.Kubernetes.ScaleWorkerGpuArgs | undefined>;
    /**
     * Labels of kubernetes scale worker created nodes.
     */
    public readonly labels!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Mount target. Default is not mounting.
     */
    public readonly mountTarget!: pulumi.Output<string | undefined>;
    /**
     * Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
     */
    public readonly preStartUserScript!: pulumi.Output<string | undefined>;
    /**
     * Node taint.
     */
    public readonly taints!: pulumi.Output<outputs.Kubernetes.ScaleWorkerTaint[] | undefined>;
    /**
     * Set whether the added node participates in scheduling. The default value is 0, which means participating in scheduling; non-0 means not participating in scheduling. After the node initialization is completed, you can execute kubectl uncordon nodename to join the node in scheduling.
     */
    public readonly unschedulable!: pulumi.Output<number | undefined>;
    /**
     * Base64 encoded user script, this script will be executed after the k8s component is run. The user needs to ensure that the script is reentrant and retry logic. The script and its generated log files can be viewed in the /data/ccs_userscript/ path of the node, if required. The node needs to be initialized before it can be added to the schedule. It can be used with the unschedulable parameter. After the final initialization of userScript is completed, add the kubectl uncordon nodename --kubeconfig=/root/.kube/config command to add the node to the schedule.
     */
    public readonly userScript!: pulumi.Output<string | undefined>;
    /**
     * Deploy the machine configuration information of the 'WORK' service, and create <=20 units for common users.
     */
    public readonly workerConfig!: pulumi.Output<outputs.Kubernetes.ScaleWorkerWorkerConfig>;
    /**
     * An information list of kubernetes cluster 'WORKER'. Each element contains the following attributes:
     */
    public /*out*/ readonly workerInstancesLists!: pulumi.Output<outputs.Kubernetes.ScaleWorkerWorkerInstancesList[]>;

    /**
     * Create a ScaleWorker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScaleWorkerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScaleWorkerArgs | ScaleWorkerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScaleWorkerState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["createResultOutputFile"] = state ? state.createResultOutputFile : undefined;
            resourceInputs["dataDisks"] = state ? state.dataDisks : undefined;
            resourceInputs["desiredPodNum"] = state ? state.desiredPodNum : undefined;
            resourceInputs["dockerGraphPath"] = state ? state.dockerGraphPath : undefined;
            resourceInputs["extraArgs"] = state ? state.extraArgs : undefined;
            resourceInputs["gpuArgs"] = state ? state.gpuArgs : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["mountTarget"] = state ? state.mountTarget : undefined;
            resourceInputs["preStartUserScript"] = state ? state.preStartUserScript : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["unschedulable"] = state ? state.unschedulable : undefined;
            resourceInputs["userScript"] = state ? state.userScript : undefined;
            resourceInputs["workerConfig"] = state ? state.workerConfig : undefined;
            resourceInputs["workerInstancesLists"] = state ? state.workerInstancesLists : undefined;
        } else {
            const args = argsOrState as ScaleWorkerArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.workerConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerConfig'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["createResultOutputFile"] = args ? args.createResultOutputFile : undefined;
            resourceInputs["dataDisks"] = args ? args.dataDisks : undefined;
            resourceInputs["desiredPodNum"] = args ? args.desiredPodNum : undefined;
            resourceInputs["dockerGraphPath"] = args ? args.dockerGraphPath : undefined;
            resourceInputs["extraArgs"] = args ? args.extraArgs : undefined;
            resourceInputs["gpuArgs"] = args ? args.gpuArgs : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["mountTarget"] = args ? args.mountTarget : undefined;
            resourceInputs["preStartUserScript"] = args ? args.preStartUserScript : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["unschedulable"] = args ? args.unschedulable : undefined;
            resourceInputs["userScript"] = args ? args.userScript : undefined;
            resourceInputs["workerConfig"] = args ? args.workerConfig : undefined;
            resourceInputs["workerInstancesLists"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScaleWorker.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScaleWorker resources.
 */
export interface ScaleWorkerState {
    /**
     * ID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Used to save results of CVMs creation error messages.
     */
    createResultOutputFile?: pulumi.Input<string>;
    /**
     * Configurations of tke data disk.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ScaleWorkerDataDisk>[]>;
    /**
     * Indicate to set desired pod number in current node. Valid when the cluster enable customized pod cidr.
     */
    desiredPodNum?: pulumi.Input<number>;
    /**
     * Docker graph path. Default is `/var/lib/docker`.
     */
    dockerGraphPath?: pulumi.Input<string>;
    /**
     * Custom parameter information related to the node.
     */
    extraArgs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * GPU driver parameters.
     */
    gpuArgs?: pulumi.Input<inputs.Kubernetes.ScaleWorkerGpuArgs>;
    /**
     * Labels of kubernetes scale worker created nodes.
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Mount target. Default is not mounting.
     */
    mountTarget?: pulumi.Input<string>;
    /**
     * Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
     */
    preStartUserScript?: pulumi.Input<string>;
    /**
     * Node taint.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ScaleWorkerTaint>[]>;
    /**
     * Set whether the added node participates in scheduling. The default value is 0, which means participating in scheduling; non-0 means not participating in scheduling. After the node initialization is completed, you can execute kubectl uncordon nodename to join the node in scheduling.
     */
    unschedulable?: pulumi.Input<number>;
    /**
     * Base64 encoded user script, this script will be executed after the k8s component is run. The user needs to ensure that the script is reentrant and retry logic. The script and its generated log files can be viewed in the /data/ccs_userscript/ path of the node, if required. The node needs to be initialized before it can be added to the schedule. It can be used with the unschedulable parameter. After the final initialization of userScript is completed, add the kubectl uncordon nodename --kubeconfig=/root/.kube/config command to add the node to the schedule.
     */
    userScript?: pulumi.Input<string>;
    /**
     * Deploy the machine configuration information of the 'WORK' service, and create <=20 units for common users.
     */
    workerConfig?: pulumi.Input<inputs.Kubernetes.ScaleWorkerWorkerConfig>;
    /**
     * An information list of kubernetes cluster 'WORKER'. Each element contains the following attributes:
     */
    workerInstancesLists?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ScaleWorkerWorkerInstancesList>[]>;
}

/**
 * The set of arguments for constructing a ScaleWorker resource.
 */
export interface ScaleWorkerArgs {
    /**
     * ID of the cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Used to save results of CVMs creation error messages.
     */
    createResultOutputFile?: pulumi.Input<string>;
    /**
     * Configurations of tke data disk.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ScaleWorkerDataDisk>[]>;
    /**
     * Indicate to set desired pod number in current node. Valid when the cluster enable customized pod cidr.
     */
    desiredPodNum?: pulumi.Input<number>;
    /**
     * Docker graph path. Default is `/var/lib/docker`.
     */
    dockerGraphPath?: pulumi.Input<string>;
    /**
     * Custom parameter information related to the node.
     */
    extraArgs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * GPU driver parameters.
     */
    gpuArgs?: pulumi.Input<inputs.Kubernetes.ScaleWorkerGpuArgs>;
    /**
     * Labels of kubernetes scale worker created nodes.
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Mount target. Default is not mounting.
     */
    mountTarget?: pulumi.Input<string>;
    /**
     * Base64-encoded user script, executed before initializing the node, currently only effective for adding existing nodes.
     */
    preStartUserScript?: pulumi.Input<string>;
    /**
     * Node taint.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.Kubernetes.ScaleWorkerTaint>[]>;
    /**
     * Set whether the added node participates in scheduling. The default value is 0, which means participating in scheduling; non-0 means not participating in scheduling. After the node initialization is completed, you can execute kubectl uncordon nodename to join the node in scheduling.
     */
    unschedulable?: pulumi.Input<number>;
    /**
     * Base64 encoded user script, this script will be executed after the k8s component is run. The user needs to ensure that the script is reentrant and retry logic. The script and its generated log files can be viewed in the /data/ccs_userscript/ path of the node, if required. The node needs to be initialized before it can be added to the schedule. It can be used with the unschedulable parameter. After the final initialization of userScript is completed, add the kubectl uncordon nodename --kubeconfig=/root/.kube/config command to add the node to the schedule.
     */
    userScript?: pulumi.Input<string>;
    /**
     * Deploy the machine configuration information of the 'WORK' service, and create <=20 units for common users.
     */
    workerConfig: pulumi.Input<inputs.Kubernetes.ScaleWorkerWorkerConfig>;
}
