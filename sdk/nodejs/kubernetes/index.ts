// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddonArgs, AddonState } from "./addon";
export type Addon = import("./addon").Addon;
export const Addon: typeof import("./addon").Addon = null as any;
utilities.lazyLoad(exports, ["Addon"], () => require("./addon"));

export { AddonAttachmentArgs, AddonAttachmentState } from "./addonAttachment";
export type AddonAttachment = import("./addonAttachment").AddonAttachment;
export const AddonAttachment: typeof import("./addonAttachment").AddonAttachment = null as any;
utilities.lazyLoad(exports, ["AddonAttachment"], () => require("./addonAttachment"));

export { AddonConfigArgs, AddonConfigState } from "./addonConfig";
export type AddonConfig = import("./addonConfig").AddonConfig;
export const AddonConfig: typeof import("./addonConfig").AddonConfig = null as any;
utilities.lazyLoad(exports, ["AddonConfig"], () => require("./addonConfig"));

export { AuthAttachmentArgs, AuthAttachmentState } from "./authAttachment";
export type AuthAttachment = import("./authAttachment").AuthAttachment;
export const AuthAttachment: typeof import("./authAttachment").AuthAttachment = null as any;
utilities.lazyLoad(exports, ["AuthAttachment"], () => require("./authAttachment"));

export { BackupStorageLocationArgs, BackupStorageLocationState } from "./backupStorageLocation";
export type BackupStorageLocation = import("./backupStorageLocation").BackupStorageLocation;
export const BackupStorageLocation: typeof import("./backupStorageLocation").BackupStorageLocation = null as any;
utilities.lazyLoad(exports, ["BackupStorageLocation"], () => require("./backupStorageLocation"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterAttachmentArgs, ClusterAttachmentState } from "./clusterAttachment";
export type ClusterAttachment = import("./clusterAttachment").ClusterAttachment;
export const ClusterAttachment: typeof import("./clusterAttachment").ClusterAttachment = null as any;
utilities.lazyLoad(exports, ["ClusterAttachment"], () => require("./clusterAttachment"));

export { ClusterEndpointArgs, ClusterEndpointState } from "./clusterEndpoint";
export type ClusterEndpoint = import("./clusterEndpoint").ClusterEndpoint;
export const ClusterEndpoint: typeof import("./clusterEndpoint").ClusterEndpoint = null as any;
utilities.lazyLoad(exports, ["ClusterEndpoint"], () => require("./clusterEndpoint"));

export { EncryptionProtectionArgs, EncryptionProtectionState } from "./encryptionProtection";
export type EncryptionProtection = import("./encryptionProtection").EncryptionProtection;
export const EncryptionProtection: typeof import("./encryptionProtection").EncryptionProtection = null as any;
utilities.lazyLoad(exports, ["EncryptionProtection"], () => require("./encryptionProtection"));

export { GetAvailableClusterVersionsArgs, GetAvailableClusterVersionsResult, GetAvailableClusterVersionsOutputArgs } from "./getAvailableClusterVersions";
export const getAvailableClusterVersions: typeof import("./getAvailableClusterVersions").getAvailableClusterVersions = null as any;
export const getAvailableClusterVersionsOutput: typeof import("./getAvailableClusterVersions").getAvailableClusterVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getAvailableClusterVersions","getAvailableClusterVersionsOutput"], () => require("./getAvailableClusterVersions"));

export { GetChartsArgs, GetChartsResult, GetChartsOutputArgs } from "./getCharts";
export const getCharts: typeof import("./getCharts").getCharts = null as any;
export const getChartsOutput: typeof import("./getCharts").getChartsOutput = null as any;
utilities.lazyLoad(exports, ["getCharts","getChartsOutput"], () => require("./getCharts"));

export { GetClusterAuthenticationOptionsArgs, GetClusterAuthenticationOptionsResult, GetClusterAuthenticationOptionsOutputArgs } from "./getClusterAuthenticationOptions";
export const getClusterAuthenticationOptions: typeof import("./getClusterAuthenticationOptions").getClusterAuthenticationOptions = null as any;
export const getClusterAuthenticationOptionsOutput: typeof import("./getClusterAuthenticationOptions").getClusterAuthenticationOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getClusterAuthenticationOptions","getClusterAuthenticationOptionsOutput"], () => require("./getClusterAuthenticationOptions"));

export { GetClusterCommonNamesArgs, GetClusterCommonNamesResult, GetClusterCommonNamesOutputArgs } from "./getClusterCommonNames";
export const getClusterCommonNames: typeof import("./getClusterCommonNames").getClusterCommonNames = null as any;
export const getClusterCommonNamesOutput: typeof import("./getClusterCommonNames").getClusterCommonNamesOutput = null as any;
utilities.lazyLoad(exports, ["getClusterCommonNames","getClusterCommonNamesOutput"], () => require("./getClusterCommonNames"));

export { GetClusterInstancesArgs, GetClusterInstancesResult, GetClusterInstancesOutputArgs } from "./getClusterInstances";
export const getClusterInstances: typeof import("./getClusterInstances").getClusterInstances = null as any;
export const getClusterInstancesOutput: typeof import("./getClusterInstances").getClusterInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getClusterInstances","getClusterInstancesOutput"], () => require("./getClusterInstances"));

export { GetClusterLevelsArgs, GetClusterLevelsResult, GetClusterLevelsOutputArgs } from "./getClusterLevels";
export const getClusterLevels: typeof import("./getClusterLevels").getClusterLevels = null as any;
export const getClusterLevelsOutput: typeof import("./getClusterLevels").getClusterLevelsOutput = null as any;
utilities.lazyLoad(exports, ["getClusterLevels","getClusterLevelsOutput"], () => require("./getClusterLevels"));

export { GetClusterNativeNodePoolsArgs, GetClusterNativeNodePoolsResult, GetClusterNativeNodePoolsOutputArgs } from "./getClusterNativeNodePools";
export const getClusterNativeNodePools: typeof import("./getClusterNativeNodePools").getClusterNativeNodePools = null as any;
export const getClusterNativeNodePoolsOutput: typeof import("./getClusterNativeNodePools").getClusterNativeNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getClusterNativeNodePools","getClusterNativeNodePoolsOutput"], () => require("./getClusterNativeNodePools"));

export { GetClusterNodePoolsArgs, GetClusterNodePoolsResult, GetClusterNodePoolsOutputArgs } from "./getClusterNodePools";
export const getClusterNodePools: typeof import("./getClusterNodePools").getClusterNodePools = null as any;
export const getClusterNodePoolsOutput: typeof import("./getClusterNodePools").getClusterNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getClusterNodePools","getClusterNodePoolsOutput"], () => require("./getClusterNodePools"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { HealthCheckPolicyArgs, HealthCheckPolicyState } from "./healthCheckPolicy";
export type HealthCheckPolicy = import("./healthCheckPolicy").HealthCheckPolicy;
export const HealthCheckPolicy: typeof import("./healthCheckPolicy").HealthCheckPolicy = null as any;
utilities.lazyLoad(exports, ["HealthCheckPolicy"], () => require("./healthCheckPolicy"));

export { LogConfigArgs, LogConfigState } from "./logConfig";
export type LogConfig = import("./logConfig").LogConfig;
export const LogConfig: typeof import("./logConfig").LogConfig = null as any;
utilities.lazyLoad(exports, ["LogConfig"], () => require("./logConfig"));

export { NativeNodePoolArgs, NativeNodePoolState } from "./nativeNodePool";
export type NativeNodePool = import("./nativeNodePool").NativeNodePool;
export const NativeNodePool: typeof import("./nativeNodePool").NativeNodePool = null as any;
utilities.lazyLoad(exports, ["NativeNodePool"], () => require("./nativeNodePool"));

export { NodePoolArgs, NodePoolState } from "./nodePool";
export type NodePool = import("./nodePool").NodePool;
export const NodePool: typeof import("./nodePool").NodePool = null as any;
utilities.lazyLoad(exports, ["NodePool"], () => require("./nodePool"));

export { ScaleWorkerArgs, ScaleWorkerState } from "./scaleWorker";
export type ScaleWorker = import("./scaleWorker").ScaleWorker;
export const ScaleWorker: typeof import("./scaleWorker").ScaleWorker = null as any;
utilities.lazyLoad(exports, ["ScaleWorker"], () => require("./scaleWorker"));

export { ServerlessNodePoolArgs, ServerlessNodePoolState } from "./serverlessNodePool";
export type ServerlessNodePool = import("./serverlessNodePool").ServerlessNodePool;
export const ServerlessNodePool: typeof import("./serverlessNodePool").ServerlessNodePool = null as any;
utilities.lazyLoad(exports, ["ServerlessNodePool"], () => require("./serverlessNodePool"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Kubernetes/addon:Addon":
                return new Addon(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/addonAttachment:AddonAttachment":
                return new AddonAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/addonConfig:AddonConfig":
                return new AddonConfig(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/authAttachment:AuthAttachment":
                return new AuthAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/backupStorageLocation:BackupStorageLocation":
                return new BackupStorageLocation(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/clusterAttachment:ClusterAttachment":
                return new ClusterAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/clusterEndpoint:ClusterEndpoint":
                return new ClusterEndpoint(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/encryptionProtection:EncryptionProtection":
                return new EncryptionProtection(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/healthCheckPolicy:HealthCheckPolicy":
                return new HealthCheckPolicy(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/logConfig:LogConfig":
                return new LogConfig(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/nativeNodePool:NativeNodePool":
                return new NativeNodePool(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/nodePool:NodePool":
                return new NodePool(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/scaleWorker:ScaleWorker":
                return new ScaleWorker(name, <any>undefined, { urn })
            case "tencentcloud:Kubernetes/serverlessNodePool:ServerlessNodePool":
                return new ServerlessNodePool(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/addon", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/addonAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/addonConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/authAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/backupStorageLocation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/cluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/clusterAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/clusterEndpoint", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/encryptionProtection", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/healthCheckPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/logConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/nativeNodePool", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/nodePool", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/scaleWorker", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Kubernetes/serverlessNodePool", _module)
