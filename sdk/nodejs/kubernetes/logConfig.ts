// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a tke kubernetesLogConfig
 *
 * ## Example Usage
 *
 * ### Create a cls log config
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@pulumi/tencentcloud";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const vpcOne = tencentcloud.Vpc.getSubnets({
 *     isDefault: true,
 *     availabilityZone: "ap-guangzhou-3",
 * });
 * const firstVpcId = vpcOne.then(vpcOne => vpcOne.instanceLists?.[0]?.vpcId);
 * const firstSubnetId = vpcOne.then(vpcOne => vpcOne.instanceLists?.[0]?.subnetId);
 * const gz = tencentcloud.Availability.getZonesByProduct({
 *     name: "ap-guangzhou-3",
 *     product: "ckafka",
 * });
 * const zoneId = gz.then(gz => gz.zones?.[0]?.id);
 * const config = new pulumi.Config();
 * const exampleClusterCidr = config.get("exampleClusterCidr") || "10.31.0.0/16";
 * const example = new tencentcloud.kubernetes.Cluster("example", {
 *     vpcId: firstVpcId,
 *     clusterCidr: exampleClusterCidr,
 *     clusterMaxPodNum: 32,
 *     clusterName: "tf_example_cluster",
 *     clusterDesc: "example for tke cluster",
 *     clusterMaxServiceNum: 32,
 *     clusterInternet: false,
 *     clusterVersion: "1.22.5",
 *     clusterOs: "tlinux2.2(tkernel3)x86_64",
 *     clusterDeployType: "MANAGED_CLUSTER",
 *     logAgent: {
 *         enabled: true,
 *     },
 * });
 * // without any worker config
 * const logset = new tencentcloud.cls.Logset("logset", {
 *     logsetName: "tf-test-example",
 *     tags: {
 *         createdBy: "terraform",
 *     },
 * });
 * const kubernetesLogConfigCls = new tencentcloud.kubernetes.LogConfig("kubernetesLogConfigCls", {
 *     logConfigName: "tf-test-cls",
 *     clusterId: example.id,
 *     logsetId: logset.id,
 *     logConfig: JSON.stringify({
 *         apiVersion: "cls.cloud.tencent.com/v1",
 *         kind: "LogConfig",
 *         metadata: {
 *             name: "tf-test-cls",
 *         },
 *         spec: {
 *             clsDetail: {
 *                 extractRule: {
 *                     backtracking: "0",
 *                     isGBK: "false",
 *                     jsonStandard: "false",
 *                     unMatchUpload: "false",
 *                 },
 *                 indexs: [
 *                     {
 *                         indexName: "namespace",
 *                     },
 *                     {
 *                         indexName: "pod_name",
 *                     },
 *                     {
 *                         indexName: "container_name",
 *                     },
 *                 ],
 *                 logFormat: "default",
 *                 logType: "minimalist_log",
 *                 maxSplitPartitions: 0,
 *                 region: "ap-guangzhou",
 *                 storageType: "",
 *             },
 *             inputDetail: {
 *                 containerStdout: {
 *                     metadataContainer: [
 *                         "namespace",
 *                         "pod_name",
 *                         "pod_ip",
 *                         "pod_uid",
 *                         "container_id",
 *                         "container_name",
 *                         "image_name",
 *                         "cluster_id",
 *                     ],
 *                     nsLabelSelector: "",
 *                     workloads: [{
 *                         kind: "deployment",
 *                         name: "testlog1",
 *                         namespace: "default",
 *                     }],
 *                 },
 *                 type: "container_stdout",
 *             },
 *         },
 *     }),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Create a ckafka log config
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const exampleInstance = new tencentcloud.ckafka.Instance("exampleInstance", {
 *     instanceName: "ckafka-instance-postpaid",
 *     zoneId: local.zone_id,
 *     vpcId: local.first_vpc_id,
 *     subnetId: local.first_subnet_id,
 *     msgRetentionTime: 1300,
 *     kafkaVersion: "1.1.1",
 *     diskSize: 500,
 *     bandWidth: 20,
 *     diskType: "CLOUD_BASIC",
 *     partition: 400,
 *     chargeType: "POSTPAID_BY_HOUR",
 *     config: {
 *         autoCreateTopicEnable: true,
 *         defaultNumPartitions: 3,
 *         defaultReplicationFactor: 3,
 *     },
 *     dynamicRetentionConfig: {
 *         enable: 1,
 *     },
 * });
 * const exampleTopic = new tencentcloud.ckafka.Topic("exampleTopic", {
 *     instanceId: exampleInstance.id,
 *     topicName: "tmp",
 *     note: "topic note",
 *     replicaNum: 2,
 *     partitionNum: 1,
 *     cleanUpPolicy: "delete",
 *     syncReplicaMinNum: 1,
 *     uncleanLeaderElectionEnable: false,
 *     retention: 60000,
 * });
 * const ckafkaTopic = exampleTopic.topicName;
 * const kubernetesLogConfigCkafka = new tencentcloud.kubernetes.LogConfig("kubernetesLogConfigCkafka", {
 *     logConfigName: "tf-test-ckafka",
 *     clusterId: tencentcloud_kubernetes_cluster.example.id,
 *     logsetId: tencentcloud_cls_logset.logset.id,
 *     logConfig: pulumi.jsonStringify({
 *         apiVersion: "cls.cloud.tencent.com/v1",
 *         kind: "LogConfig",
 *         metadata: {
 *             name: "tf-test-ckafka",
 *         },
 *         spec: {
 *             inputDetail: {
 *                 containerStdout: {
 *                     allContainers: true,
 *                     namespace: "default",
 *                     nsLabelSelector: "",
 *                 },
 *                 type: "container_stdout",
 *             },
 *             kafkaDetail: {
 *                 brokers: "172.16.0.30:9092",
 *                 extractRule: {},
 *                 instanceId: "",
 *                 kafkaType: "SelfBuildKafka",
 *                 logType: "minimalist_log",
 *                 messageKey: {
 *                     value: "",
 *                     valueFrom: {
 *                         fieldRef: {
 *                             fieldPath: "",
 *                         },
 *                     },
 *                 },
 *                 metadata: {},
 *                 timestampFormat: "double",
 *                 timestampKey: "",
 *                 topic: ckafkaTopic,
 *             },
 *         },
 *     }),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class LogConfig extends pulumi.CustomResource {
    /**
     * Get an existing LogConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogConfigState, opts?: pulumi.CustomResourceOptions): LogConfig {
        return new LogConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Kubernetes/logConfig:LogConfig';

    /**
     * Returns true if the given object is an instance of LogConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogConfig.__pulumiType;
    }

    /**
     * Cluster ID.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The current cluster type supports tke and eks, default is tke.
     */
    public readonly clusterType!: pulumi.Output<string | undefined>;
    /**
     * JSON expression of log collection configuration.
     */
    public readonly logConfig!: pulumi.Output<string>;
    /**
     * Log config name.
     */
    public readonly logConfigName!: pulumi.Output<string>;
    /**
     * CLS log set ID.
     */
    public readonly logsetId!: pulumi.Output<string | undefined>;

    /**
     * Create a LogConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogConfigArgs | LogConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogConfigState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["logConfig"] = state ? state.logConfig : undefined;
            resourceInputs["logConfigName"] = state ? state.logConfigName : undefined;
            resourceInputs["logsetId"] = state ? state.logsetId : undefined;
        } else {
            const args = argsOrState as LogConfigArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.logConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logConfig'");
            }
            if ((!args || args.logConfigName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logConfigName'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["logConfig"] = args ? args.logConfig : undefined;
            resourceInputs["logConfigName"] = args ? args.logConfigName : undefined;
            resourceInputs["logsetId"] = args ? args.logsetId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogConfig resources.
 */
export interface LogConfigState {
    /**
     * Cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The current cluster type supports tke and eks, default is tke.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * JSON expression of log collection configuration.
     */
    logConfig?: pulumi.Input<string>;
    /**
     * Log config name.
     */
    logConfigName?: pulumi.Input<string>;
    /**
     * CLS log set ID.
     */
    logsetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogConfig resource.
 */
export interface LogConfigArgs {
    /**
     * Cluster ID.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The current cluster type supports tke and eks, default is tke.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * JSON expression of log collection configuration.
     */
    logConfig: pulumi.Input<string>;
    /**
     * Log config name.
     */
    logConfigName: pulumi.Input<string>;
    /**
     * CLS log set ID.
     */
    logsetId?: pulumi.Input<string>;
}
