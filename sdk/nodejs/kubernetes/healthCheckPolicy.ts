// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a tke kubernetesHealthCheckPolicy
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const kubernetesHealthCheckPolicy = new tencentcloud.kubernetes.HealthCheckPolicy("kubernetesHealthCheckPolicy", {
 *     clusterId: "cls-xxxxx",
 *     rules: [
 *         {
 *             autoRepairEnabled: true,
 *             enabled: true,
 *             name: "OOMKilling",
 *         },
 *         {
 *             autoRepairEnabled: true,
 *             enabled: true,
 *             name: "KubeletUnhealthy",
 *         },
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * tke kubernetes_health_check_policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Kubernetes/healthCheckPolicy:HealthCheckPolicy kubernetes_health_check_policy cls-xxxxx#healthcheckpolicyname
 * ```
 */
export class HealthCheckPolicy extends pulumi.CustomResource {
    /**
     * Get an existing HealthCheckPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthCheckPolicyState, opts?: pulumi.CustomResourceOptions): HealthCheckPolicy {
        return new HealthCheckPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Kubernetes/healthCheckPolicy:HealthCheckPolicy';

    /**
     * Returns true if the given object is an instance of HealthCheckPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthCheckPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthCheckPolicy.__pulumiType;
    }

    /**
     * ID of the cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Health Check Policy Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Health check policy rule list.
     */
    public readonly rules!: pulumi.Output<outputs.Kubernetes.HealthCheckPolicyRule[]>;

    /**
     * Create a HealthCheckPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthCheckPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthCheckPolicyArgs | HealthCheckPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthCheckPolicyState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as HealthCheckPolicyArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthCheckPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HealthCheckPolicy resources.
 */
export interface HealthCheckPolicyState {
    /**
     * ID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Health Check Policy Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Health check policy rule list.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.Kubernetes.HealthCheckPolicyRule>[]>;
}

/**
 * The set of arguments for constructing a HealthCheckPolicy resource.
 */
export interface HealthCheckPolicyArgs {
    /**
     * ID of the cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Health Check Policy Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Health check policy rule list.
     */
    rules: pulumi.Input<pulumi.Input<inputs.Kubernetes.HealthCheckPolicyRule>[]>;
}
