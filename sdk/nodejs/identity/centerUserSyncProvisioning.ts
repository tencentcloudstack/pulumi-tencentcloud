// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a organization identityCenterUserSyncProvisioning
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const identityCenterUserSyncProvisioning = new tencentcloud.identity.CenterUserSyncProvisioning("identityCenterUserSyncProvisioning", {
 *     deletionStrategy: "Keep",
 *     description: "tf-test",
 *     duplicationStrategy: "TakeOver",
 *     principalId: "u-xxxxxx",
 *     principalType: "User",
 *     targetType: "MemberUin",
 *     targetUin: "xxxxxx",
 *     zoneId: "z-xxxxxx",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * organization identity_center_user_sync_provisioning can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Identity/centerUserSyncProvisioning:CenterUserSyncProvisioning identity_center_user_sync_provisioning ${zoneId}#${userProvisioningId}
 * ```
 */
export class CenterUserSyncProvisioning extends pulumi.CustomResource {
    /**
     * Get an existing CenterUserSyncProvisioning resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenterUserSyncProvisioningState, opts?: pulumi.CustomResourceOptions): CenterUserSyncProvisioning {
        return new CenterUserSyncProvisioning(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Identity/centerUserSyncProvisioning:CenterUserSyncProvisioning';

    /**
     * Returns true if the given object is an instance of CenterUserSyncProvisioning.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenterUserSyncProvisioning {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenterUserSyncProvisioning.__pulumiType;
    }

    /**
     * Create time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
     */
    public readonly deletionStrategy!: pulumi.Output<string | undefined>;
    /**
     * Description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
     */
    public readonly duplicationStrategy!: pulumi.Output<string | undefined>;
    /**
     * Identity ID for the CAM user synchronization. Valid values:
     * When the PrincipalType value is Group, it is the CIC user group ID (g-********).
     * When the PrincipalType value is User, it is the CIC user ID (u-********).
     */
    public readonly principalId!: pulumi.Output<string | undefined>;
    /**
     * The identity name of the CAM user synchronization. Value: When PrincipalType is Group, the value is the CIC user group name; When PrincipalType takes the value to User, the value is the CIC user name.
     */
    public /*out*/ readonly principalName!: pulumi.Output<string>;
    /**
     * Identity type for the CAM user synchronization. Valid values:
     *
     * User: indicates that the identity for the CAM user synchronization is a CIC user.
     * Group: indicates that the identity for the CAM user synchronization is a CIC user group.
     */
    public readonly principalType!: pulumi.Output<string | undefined>;
    /**
     * Status of CAM user synchronization. Value:
     * * Enabled: CAM user synchronization is enabled;
     * * Disabled: CAM user synchronization is not enabled.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Group account The name of the target account..
     */
    public /*out*/ readonly targetName!: pulumi.Output<string>;
    /**
     * Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
     */
    public readonly targetType!: pulumi.Output<string | undefined>;
    /**
     * UIN of the synchronized target account of the Tencent Cloud Organization.
     */
    public readonly targetUin!: pulumi.Output<number | undefined>;
    /**
     * Update time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * User provisioning id.
     */
    public /*out*/ readonly userProvisioningId!: pulumi.Output<string>;
    /**
     * Space ID.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a CenterUserSyncProvisioning resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenterUserSyncProvisioningArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenterUserSyncProvisioningArgs | CenterUserSyncProvisioningState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenterUserSyncProvisioningState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deletionStrategy"] = state ? state.deletionStrategy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["duplicationStrategy"] = state ? state.duplicationStrategy : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["principalName"] = state ? state.principalName : undefined;
            resourceInputs["principalType"] = state ? state.principalType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["targetUin"] = state ? state.targetUin : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["userProvisioningId"] = state ? state.userProvisioningId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as CenterUserSyncProvisioningArgs | undefined;
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["deletionStrategy"] = args ? args.deletionStrategy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["duplicationStrategy"] = args ? args.duplicationStrategy : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["principalType"] = args ? args.principalType : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["targetUin"] = args ? args.targetUin : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["principalName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["targetName"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["userProvisioningId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenterUserSyncProvisioning.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CenterUserSyncProvisioning resources.
 */
export interface CenterUserSyncProvisioningState {
    /**
     * Create time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
     */
    deletionStrategy?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
     */
    duplicationStrategy?: pulumi.Input<string>;
    /**
     * Identity ID for the CAM user synchronization. Valid values:
     * When the PrincipalType value is Group, it is the CIC user group ID (g-********).
     * When the PrincipalType value is User, it is the CIC user ID (u-********).
     */
    principalId?: pulumi.Input<string>;
    /**
     * The identity name of the CAM user synchronization. Value: When PrincipalType is Group, the value is the CIC user group name; When PrincipalType takes the value to User, the value is the CIC user name.
     */
    principalName?: pulumi.Input<string>;
    /**
     * Identity type for the CAM user synchronization. Valid values:
     *
     * User: indicates that the identity for the CAM user synchronization is a CIC user.
     * Group: indicates that the identity for the CAM user synchronization is a CIC user group.
     */
    principalType?: pulumi.Input<string>;
    /**
     * Status of CAM user synchronization. Value:
     * * Enabled: CAM user synchronization is enabled;
     * * Disabled: CAM user synchronization is not enabled.
     */
    status?: pulumi.Input<string>;
    /**
     * Group account The name of the target account..
     */
    targetName?: pulumi.Input<string>;
    /**
     * Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
     */
    targetType?: pulumi.Input<string>;
    /**
     * UIN of the synchronized target account of the Tencent Cloud Organization.
     */
    targetUin?: pulumi.Input<number>;
    /**
     * Update time.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * User provisioning id.
     */
    userProvisioningId?: pulumi.Input<string>;
    /**
     * Space ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenterUserSyncProvisioning resource.
 */
export interface CenterUserSyncProvisioningArgs {
    /**
     * Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
     */
    deletionStrategy?: pulumi.Input<string>;
    /**
     * Description.
     */
    description?: pulumi.Input<string>;
    /**
     * Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
     */
    duplicationStrategy?: pulumi.Input<string>;
    /**
     * Identity ID for the CAM user synchronization. Valid values:
     * When the PrincipalType value is Group, it is the CIC user group ID (g-********).
     * When the PrincipalType value is User, it is the CIC user ID (u-********).
     */
    principalId?: pulumi.Input<string>;
    /**
     * Identity type for the CAM user synchronization. Valid values:
     *
     * User: indicates that the identity for the CAM user synchronization is a CIC user.
     * Group: indicates that the identity for the CAM user synchronization is a CIC user group.
     */
    principalType?: pulumi.Input<string>;
    /**
     * Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
     */
    targetType?: pulumi.Input<string>;
    /**
     * UIN of the synchronized target account of the Tencent Cloud Organization.
     */
    targetUin?: pulumi.Input<number>;
    /**
     * Space ID.
     */
    zoneId: pulumi.Input<string>;
}
