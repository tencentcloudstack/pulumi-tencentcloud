// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create an identity center scim credential
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const identityCenterScimCredential = new tencentcloud.identity.CenterScimCredential("identityCenterScimCredential", {zoneId: "z-xxxxxx"});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * organization identity_center_scim_credential can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Identity/centerScimCredential:CenterScimCredential identity_center_scim_credential ${zone_id}#${credential_id}
 * ```
 */
export class CenterScimCredential extends pulumi.CustomResource {
    /**
     * Get an existing CenterScimCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenterScimCredentialState, opts?: pulumi.CustomResourceOptions): CenterScimCredential {
        return new CenterScimCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Identity/centerScimCredential:CenterScimCredential';

    /**
     * Returns true if the given object is an instance of CenterScimCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenterScimCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenterScimCredential.__pulumiType;
    }

    /**
     * SCIM create time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
     */
    public /*out*/ readonly credentialId!: pulumi.Output<string>;
    /**
     * SCIM credential type.
     */
    public /*out*/ readonly credentialType!: pulumi.Output<string>;
    /**
     * SCIM expire time.
     */
    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    /**
     * SCIM key status, Enabled-On, Disabled-Closed.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Space ID. z-prefix starts with 12 random digits/lowercase letters.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a CenterScimCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenterScimCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenterScimCredentialArgs | CenterScimCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenterScimCredentialState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["credentialType"] = state ? state.credentialType : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as CenterScimCredentialArgs | undefined;
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["credentialId"] = undefined /*out*/;
            resourceInputs["credentialType"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenterScimCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CenterScimCredential resources.
 */
export interface CenterScimCredentialState {
    /**
     * SCIM create time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * SCIM credential type.
     */
    credentialType?: pulumi.Input<string>;
    /**
     * SCIM expire time.
     */
    expireTime?: pulumi.Input<string>;
    /**
     * SCIM key status, Enabled-On, Disabled-Closed.
     */
    status?: pulumi.Input<string>;
    /**
     * Space ID. z-prefix starts with 12 random digits/lowercase letters.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenterScimCredential resource.
 */
export interface CenterScimCredentialArgs {
    /**
     * Space ID. z-prefix starts with 12 random digits/lowercase letters.
     */
    zoneId: pulumi.Input<string>;
}
