// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create an identity center group
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const identityCenterGroup = new tencentcloud.identity.CenterGroup("identityCenterGroup", {
 *     description: "test",
 *     groupName: "test-group",
 *     zoneId: "z-xxxxxx",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * tencentcloud_identity_center_group can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Identity/centerGroup:CenterGroup identity_center_group ${zoneId}#${groupId}
 * ```
 */
export class CenterGroup extends pulumi.CustomResource {
    /**
     * Get an existing CenterGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenterGroupState, opts?: pulumi.CustomResourceOptions): CenterGroup {
        return new CenterGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Identity/centerGroup:CenterGroup';

    /**
     * Returns true if the given object is an instance of CenterGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenterGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenterGroup.__pulumiType;
    }

    /**
     * Creation time of the user group.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * A description of the user group. Length: Maximum 1024 characters.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * ID of the user group.
     */
    public /*out*/ readonly groupId!: pulumi.Output<string>;
    /**
     * The name of the user group. Format: Allow English letters, numbers and special characters-. Length: Maximum 128 characters.
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * Type of user group. `Manual`: manual creation, `Synchronized`: external import.
     */
    public /*out*/ readonly groupType!: pulumi.Output<string>;
    /**
     * Number of team members.
     */
    public /*out*/ readonly memberCount!: pulumi.Output<number>;
    /**
     * Modification time for the user group.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Zone id.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a CenterGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenterGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenterGroupArgs | CenterGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenterGroupState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["groupType"] = state ? state.groupType : undefined;
            resourceInputs["memberCount"] = state ? state.memberCount : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as CenterGroupArgs | undefined;
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["groupType"] = undefined /*out*/;
            resourceInputs["memberCount"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenterGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CenterGroup resources.
 */
export interface CenterGroupState {
    /**
     * Creation time of the user group.
     */
    createTime?: pulumi.Input<string>;
    /**
     * A description of the user group. Length: Maximum 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the user group.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The name of the user group. Format: Allow English letters, numbers and special characters-. Length: Maximum 128 characters.
     */
    groupName?: pulumi.Input<string>;
    /**
     * Type of user group. `Manual`: manual creation, `Synchronized`: external import.
     */
    groupType?: pulumi.Input<string>;
    /**
     * Number of team members.
     */
    memberCount?: pulumi.Input<number>;
    /**
     * Modification time for the user group.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Zone id.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenterGroup resource.
 */
export interface CenterGroupArgs {
    /**
     * A description of the user group. Length: Maximum 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the user group. Format: Allow English letters, numbers and special characters-. Length: Maximum 128 characters.
     */
    groupName: pulumi.Input<string>;
    /**
     * Zone id.
     */
    zoneId: pulumi.Input<string>;
}
