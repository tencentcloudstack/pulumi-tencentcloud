// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CenterExternalSamlIdentityProviderArgs, CenterExternalSamlIdentityProviderState } from "./centerExternalSamlIdentityProvider";
export type CenterExternalSamlIdentityProvider = import("./centerExternalSamlIdentityProvider").CenterExternalSamlIdentityProvider;
export const CenterExternalSamlIdentityProvider: typeof import("./centerExternalSamlIdentityProvider").CenterExternalSamlIdentityProvider = null as any;
utilities.lazyLoad(exports, ["CenterExternalSamlIdentityProvider"], () => require("./centerExternalSamlIdentityProvider"));

export { CenterGroupArgs, CenterGroupState } from "./centerGroup";
export type CenterGroup = import("./centerGroup").CenterGroup;
export const CenterGroup: typeof import("./centerGroup").CenterGroup = null as any;
utilities.lazyLoad(exports, ["CenterGroup"], () => require("./centerGroup"));

export { CenterRoleAssignmentArgs, CenterRoleAssignmentState } from "./centerRoleAssignment";
export type CenterRoleAssignment = import("./centerRoleAssignment").CenterRoleAssignment;
export const CenterRoleAssignment: typeof import("./centerRoleAssignment").CenterRoleAssignment = null as any;
utilities.lazyLoad(exports, ["CenterRoleAssignment"], () => require("./centerRoleAssignment"));

export { CenterRoleConfigurationArgs, CenterRoleConfigurationState } from "./centerRoleConfiguration";
export type CenterRoleConfiguration = import("./centerRoleConfiguration").CenterRoleConfiguration;
export const CenterRoleConfiguration: typeof import("./centerRoleConfiguration").CenterRoleConfiguration = null as any;
utilities.lazyLoad(exports, ["CenterRoleConfiguration"], () => require("./centerRoleConfiguration"));

export { CenterRoleConfigurationPermissionCustomPoliciesAttachmentArgs, CenterRoleConfigurationPermissionCustomPoliciesAttachmentState } from "./centerRoleConfigurationPermissionCustomPoliciesAttachment";
export type CenterRoleConfigurationPermissionCustomPoliciesAttachment = import("./centerRoleConfigurationPermissionCustomPoliciesAttachment").CenterRoleConfigurationPermissionCustomPoliciesAttachment;
export const CenterRoleConfigurationPermissionCustomPoliciesAttachment: typeof import("./centerRoleConfigurationPermissionCustomPoliciesAttachment").CenterRoleConfigurationPermissionCustomPoliciesAttachment = null as any;
utilities.lazyLoad(exports, ["CenterRoleConfigurationPermissionCustomPoliciesAttachment"], () => require("./centerRoleConfigurationPermissionCustomPoliciesAttachment"));

export { CenterRoleConfigurationPermissionCustomPolicyAttachmentArgs, CenterRoleConfigurationPermissionCustomPolicyAttachmentState } from "./centerRoleConfigurationPermissionCustomPolicyAttachment";
export type CenterRoleConfigurationPermissionCustomPolicyAttachment = import("./centerRoleConfigurationPermissionCustomPolicyAttachment").CenterRoleConfigurationPermissionCustomPolicyAttachment;
export const CenterRoleConfigurationPermissionCustomPolicyAttachment: typeof import("./centerRoleConfigurationPermissionCustomPolicyAttachment").CenterRoleConfigurationPermissionCustomPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["CenterRoleConfigurationPermissionCustomPolicyAttachment"], () => require("./centerRoleConfigurationPermissionCustomPolicyAttachment"));

export { CenterRoleConfigurationPermissionPolicyAttachmentArgs, CenterRoleConfigurationPermissionPolicyAttachmentState } from "./centerRoleConfigurationPermissionPolicyAttachment";
export type CenterRoleConfigurationPermissionPolicyAttachment = import("./centerRoleConfigurationPermissionPolicyAttachment").CenterRoleConfigurationPermissionPolicyAttachment;
export const CenterRoleConfigurationPermissionPolicyAttachment: typeof import("./centerRoleConfigurationPermissionPolicyAttachment").CenterRoleConfigurationPermissionPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["CenterRoleConfigurationPermissionPolicyAttachment"], () => require("./centerRoleConfigurationPermissionPolicyAttachment"));

export { CenterScimCredentialArgs, CenterScimCredentialState } from "./centerScimCredential";
export type CenterScimCredential = import("./centerScimCredential").CenterScimCredential;
export const CenterScimCredential: typeof import("./centerScimCredential").CenterScimCredential = null as any;
utilities.lazyLoad(exports, ["CenterScimCredential"], () => require("./centerScimCredential"));

export { CenterScimCredentialStatusArgs, CenterScimCredentialStatusState } from "./centerScimCredentialStatus";
export type CenterScimCredentialStatus = import("./centerScimCredentialStatus").CenterScimCredentialStatus;
export const CenterScimCredentialStatus: typeof import("./centerScimCredentialStatus").CenterScimCredentialStatus = null as any;
utilities.lazyLoad(exports, ["CenterScimCredentialStatus"], () => require("./centerScimCredentialStatus"));

export { CenterScimSynchronizationStatusArgs, CenterScimSynchronizationStatusState } from "./centerScimSynchronizationStatus";
export type CenterScimSynchronizationStatus = import("./centerScimSynchronizationStatus").CenterScimSynchronizationStatus;
export const CenterScimSynchronizationStatus: typeof import("./centerScimSynchronizationStatus").CenterScimSynchronizationStatus = null as any;
utilities.lazyLoad(exports, ["CenterScimSynchronizationStatus"], () => require("./centerScimSynchronizationStatus"));

export { CenterUserArgs, CenterUserState } from "./centerUser";
export type CenterUser = import("./centerUser").CenterUser;
export const CenterUser: typeof import("./centerUser").CenterUser = null as any;
utilities.lazyLoad(exports, ["CenterUser"], () => require("./centerUser"));

export { CenterUserGroupAttachmentArgs, CenterUserGroupAttachmentState } from "./centerUserGroupAttachment";
export type CenterUserGroupAttachment = import("./centerUserGroupAttachment").CenterUserGroupAttachment;
export const CenterUserGroupAttachment: typeof import("./centerUserGroupAttachment").CenterUserGroupAttachment = null as any;
utilities.lazyLoad(exports, ["CenterUserGroupAttachment"], () => require("./centerUserGroupAttachment"));

export { CenterUserSyncProvisioningArgs, CenterUserSyncProvisioningState } from "./centerUserSyncProvisioning";
export type CenterUserSyncProvisioning = import("./centerUserSyncProvisioning").CenterUserSyncProvisioning;
export const CenterUserSyncProvisioning: typeof import("./centerUserSyncProvisioning").CenterUserSyncProvisioning = null as any;
utilities.lazyLoad(exports, ["CenterUserSyncProvisioning"], () => require("./centerUserSyncProvisioning"));

export { GetCenterGroupsArgs, GetCenterGroupsResult, GetCenterGroupsOutputArgs } from "./getCenterGroups";
export const getCenterGroups: typeof import("./getCenterGroups").getCenterGroups = null as any;
export const getCenterGroupsOutput: typeof import("./getCenterGroups").getCenterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCenterGroups","getCenterGroupsOutput"], () => require("./getCenterGroups"));

export { GetCenterRoleConfigurationsArgs, GetCenterRoleConfigurationsResult, GetCenterRoleConfigurationsOutputArgs } from "./getCenterRoleConfigurations";
export const getCenterRoleConfigurations: typeof import("./getCenterRoleConfigurations").getCenterRoleConfigurations = null as any;
export const getCenterRoleConfigurationsOutput: typeof import("./getCenterRoleConfigurations").getCenterRoleConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getCenterRoleConfigurations","getCenterRoleConfigurationsOutput"], () => require("./getCenterRoleConfigurations"));

export { GetCenterUsersArgs, GetCenterUsersResult, GetCenterUsersOutputArgs } from "./getCenterUsers";
export const getCenterUsers: typeof import("./getCenterUsers").getCenterUsers = null as any;
export const getCenterUsersOutput: typeof import("./getCenterUsers").getCenterUsersOutput = null as any;
utilities.lazyLoad(exports, ["getCenterUsers","getCenterUsersOutput"], () => require("./getCenterUsers"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Identity/centerExternalSamlIdentityProvider:CenterExternalSamlIdentityProvider":
                return new CenterExternalSamlIdentityProvider(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerGroup:CenterGroup":
                return new CenterGroup(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerRoleAssignment:CenterRoleAssignment":
                return new CenterRoleAssignment(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerRoleConfiguration:CenterRoleConfiguration":
                return new CenterRoleConfiguration(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerRoleConfigurationPermissionCustomPoliciesAttachment:CenterRoleConfigurationPermissionCustomPoliciesAttachment":
                return new CenterRoleConfigurationPermissionCustomPoliciesAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerRoleConfigurationPermissionCustomPolicyAttachment:CenterRoleConfigurationPermissionCustomPolicyAttachment":
                return new CenterRoleConfigurationPermissionCustomPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerRoleConfigurationPermissionPolicyAttachment:CenterRoleConfigurationPermissionPolicyAttachment":
                return new CenterRoleConfigurationPermissionPolicyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerScimCredential:CenterScimCredential":
                return new CenterScimCredential(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerScimCredentialStatus:CenterScimCredentialStatus":
                return new CenterScimCredentialStatus(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerScimSynchronizationStatus:CenterScimSynchronizationStatus":
                return new CenterScimSynchronizationStatus(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerUser:CenterUser":
                return new CenterUser(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerUserGroupAttachment:CenterUserGroupAttachment":
                return new CenterUserGroupAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Identity/centerUserSyncProvisioning:CenterUserSyncProvisioning":
                return new CenterUserSyncProvisioning(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerExternalSamlIdentityProvider", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerRoleAssignment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerRoleConfiguration", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerRoleConfigurationPermissionCustomPoliciesAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerRoleConfigurationPermissionCustomPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerRoleConfigurationPermissionPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerScimCredential", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerScimCredentialStatus", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerScimSynchronizationStatus", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerUser", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerUserGroupAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Identity/centerUserSyncProvisioning", _module)
