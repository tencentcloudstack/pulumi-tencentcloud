// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create an identity center user
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as tencentcloud from "@tencentcloud_iac/pulumi";
 *
 * const identityCenterUser = new tencentcloud.identity.CenterUser("identityCenterUser", {
 *     description: "test",
 *     userName: "test-user",
 *     zoneId: "z-xxxxxx",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * organization identity_center_user can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import tencentcloud:Identity/centerUser:CenterUser identity_center_user ${zoneId}#${userId}
 * ```
 */
export class CenterUser extends pulumi.CustomResource {
    /**
     * Get an existing CenterUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenterUserState, opts?: pulumi.CustomResourceOptions): CenterUser {
        return new CenterUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Identity/centerUser:CenterUser';

    /**
     * Returns true if the given object is an instance of CenterUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenterUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenterUser.__pulumiType;
    }

    /**
     * Create time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * User's description. Length: Maximum 1024 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of the user. Length: Maximum 256 characters.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The user's email address. Must be unique within the catalog. Length: Maximum 128 characters.
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * The user's last name. Length: Maximum 64 characters.
     */
    public readonly firstName!: pulumi.Output<string | undefined>;
    /**
     * The user's name. Length: Maximum 64 characters.
     */
    public readonly lastName!: pulumi.Output<string | undefined>;
    /**
     * Update time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * User id.
     */
    public /*out*/ readonly userId!: pulumi.Output<string>;
    /**
     * User name. It must be unique in space. Modifications are not supported. Format: Contains numbers, English letters and special symbols(`+`, `=`, `,`, `.`, `@`, `-`, `_`). Length: Maximum 64 characters.
     */
    public readonly userName!: pulumi.Output<string>;
    /**
     * The status of the user. Value: Enabled (default): Enabled. Disabled: Disabled.
     */
    public readonly userStatus!: pulumi.Output<string>;
    /**
     * User type.
     */
    public /*out*/ readonly userType!: pulumi.Output<string>;
    /**
     * Zone id.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a CenterUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenterUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenterUserArgs | CenterUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenterUserState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userStatus"] = state ? state.userStatus : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as CenterUserArgs | undefined;
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userStatus"] = args ? args.userStatus : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
            resourceInputs["userType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenterUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CenterUser resources.
 */
export interface CenterUserState {
    /**
     * Create time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * User's description. Length: Maximum 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the user. Length: Maximum 256 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The user's email address. Must be unique within the catalog. Length: Maximum 128 characters.
     */
    email?: pulumi.Input<string>;
    /**
     * The user's last name. Length: Maximum 64 characters.
     */
    firstName?: pulumi.Input<string>;
    /**
     * The user's name. Length: Maximum 64 characters.
     */
    lastName?: pulumi.Input<string>;
    /**
     * Update time.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * User id.
     */
    userId?: pulumi.Input<string>;
    /**
     * User name. It must be unique in space. Modifications are not supported. Format: Contains numbers, English letters and special symbols(`+`, `=`, `,`, `.`, `@`, `-`, `_`). Length: Maximum 64 characters.
     */
    userName?: pulumi.Input<string>;
    /**
     * The status of the user. Value: Enabled (default): Enabled. Disabled: Disabled.
     */
    userStatus?: pulumi.Input<string>;
    /**
     * User type.
     */
    userType?: pulumi.Input<string>;
    /**
     * Zone id.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenterUser resource.
 */
export interface CenterUserArgs {
    /**
     * User's description. Length: Maximum 1024 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the user. Length: Maximum 256 characters.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The user's email address. Must be unique within the catalog. Length: Maximum 128 characters.
     */
    email?: pulumi.Input<string>;
    /**
     * The user's last name. Length: Maximum 64 characters.
     */
    firstName?: pulumi.Input<string>;
    /**
     * The user's name. Length: Maximum 64 characters.
     */
    lastName?: pulumi.Input<string>;
    /**
     * User name. It must be unique in space. Modifications are not supported. Format: Contains numbers, English letters and special symbols(`+`, `=`, `,`, `.`, `@`, `-`, `_`). Length: Maximum 64 characters.
     */
    userName: pulumi.Input<string>;
    /**
     * The status of the user. Value: Enabled (default): Enabled. Disabled: Disabled.
     */
    userStatus?: pulumi.Input<string>;
    /**
     * Zone id.
     */
    zoneId: pulumi.Input<string>;
}
