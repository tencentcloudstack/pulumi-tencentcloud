// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to create a tdmq rabbitmqVipInstance
 *
 * ## Import
 *
 * tdmq rabbitmq_vip_instance can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import tencentcloud:Tdmq/rabbitmqVipInstance:RabbitmqVipInstance example amqp-mok52gmn
 * ```
 */
export class RabbitmqVipInstance extends pulumi.CustomResource {
    /**
     * Get an existing RabbitmqVipInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RabbitmqVipInstanceState, opts?: pulumi.CustomResourceOptions): RabbitmqVipInstance {
        return new RabbitmqVipInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tdmq/rabbitmqVipInstance:RabbitmqVipInstance';

    /**
     * Returns true if the given object is an instance of RabbitmqVipInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RabbitmqVipInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RabbitmqVipInstance.__pulumiType;
    }

    /**
     * Automatic renewal, the default is true.
     */
    public readonly autoRenewFlag!: pulumi.Output<boolean | undefined>;
    /**
     * cluster name.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Mirrored queue, the default is false.
     */
    public readonly enableCreateDefaultHaMirrorQueue!: pulumi.Output<boolean | undefined>;
    /**
     * The number of nodes, a minimum of 3 nodes for a multi-availability zone. If not passed, the default single availability zone is 1, and the multi-availability zone is 3.
     */
    public readonly nodeNum!: pulumi.Output<number | undefined>;
    /**
     * Node specifications, basic type rabbit-vip-basic-1, standard type rabbit-vip-basic-2, high-level type 1 rabbit-vip-basic-3, high-level type 2 rabbit-vip-basic-4. If not passed, the default is the basic type.
     */
    public readonly nodeSpec!: pulumi.Output<string | undefined>;
    /**
     * Single node storage specification, the default is 200G.
     */
    public readonly storageSize!: pulumi.Output<number | undefined>;
    /**
     * Private network SubnetId.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Purchase duration, the default is 1 (month).
     */
    public readonly timeSpan!: pulumi.Output<number | undefined>;
    /**
     * Private network VpcId.
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * availability zone.
     */
    public readonly zoneIds!: pulumi.Output<number[]>;

    /**
     * Create a RabbitmqVipInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RabbitmqVipInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RabbitmqVipInstanceArgs | RabbitmqVipInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RabbitmqVipInstanceState | undefined;
            resourceInputs["autoRenewFlag"] = state ? state.autoRenewFlag : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["enableCreateDefaultHaMirrorQueue"] = state ? state.enableCreateDefaultHaMirrorQueue : undefined;
            resourceInputs["nodeNum"] = state ? state.nodeNum : undefined;
            resourceInputs["nodeSpec"] = state ? state.nodeSpec : undefined;
            resourceInputs["storageSize"] = state ? state.storageSize : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeSpan"] = state ? state.timeSpan : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["zoneIds"] = state ? state.zoneIds : undefined;
        } else {
            const args = argsOrState as RabbitmqVipInstanceArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.zoneIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneIds'");
            }
            resourceInputs["autoRenewFlag"] = args ? args.autoRenewFlag : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["enableCreateDefaultHaMirrorQueue"] = args ? args.enableCreateDefaultHaMirrorQueue : undefined;
            resourceInputs["nodeNum"] = args ? args.nodeNum : undefined;
            resourceInputs["nodeSpec"] = args ? args.nodeSpec : undefined;
            resourceInputs["storageSize"] = args ? args.storageSize : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeSpan"] = args ? args.timeSpan : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["zoneIds"] = args ? args.zoneIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RabbitmqVipInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RabbitmqVipInstance resources.
 */
export interface RabbitmqVipInstanceState {
    /**
     * Automatic renewal, the default is true.
     */
    autoRenewFlag?: pulumi.Input<boolean>;
    /**
     * cluster name.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Mirrored queue, the default is false.
     */
    enableCreateDefaultHaMirrorQueue?: pulumi.Input<boolean>;
    /**
     * The number of nodes, a minimum of 3 nodes for a multi-availability zone. If not passed, the default single availability zone is 1, and the multi-availability zone is 3.
     */
    nodeNum?: pulumi.Input<number>;
    /**
     * Node specifications, basic type rabbit-vip-basic-1, standard type rabbit-vip-basic-2, high-level type 1 rabbit-vip-basic-3, high-level type 2 rabbit-vip-basic-4. If not passed, the default is the basic type.
     */
    nodeSpec?: pulumi.Input<string>;
    /**
     * Single node storage specification, the default is 200G.
     */
    storageSize?: pulumi.Input<number>;
    /**
     * Private network SubnetId.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Purchase duration, the default is 1 (month).
     */
    timeSpan?: pulumi.Input<number>;
    /**
     * Private network VpcId.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * availability zone.
     */
    zoneIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a RabbitmqVipInstance resource.
 */
export interface RabbitmqVipInstanceArgs {
    /**
     * Automatic renewal, the default is true.
     */
    autoRenewFlag?: pulumi.Input<boolean>;
    /**
     * cluster name.
     */
    clusterName: pulumi.Input<string>;
    /**
     * Mirrored queue, the default is false.
     */
    enableCreateDefaultHaMirrorQueue?: pulumi.Input<boolean>;
    /**
     * The number of nodes, a minimum of 3 nodes for a multi-availability zone. If not passed, the default single availability zone is 1, and the multi-availability zone is 3.
     */
    nodeNum?: pulumi.Input<number>;
    /**
     * Node specifications, basic type rabbit-vip-basic-1, standard type rabbit-vip-basic-2, high-level type 1 rabbit-vip-basic-3, high-level type 2 rabbit-vip-basic-4. If not passed, the default is the basic type.
     */
    nodeSpec?: pulumi.Input<string>;
    /**
     * Single node storage specification, the default is 200G.
     */
    storageSize?: pulumi.Input<number>;
    /**
     * Private network SubnetId.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Purchase duration, the default is 1 (month).
     */
    timeSpan?: pulumi.Input<number>;
    /**
     * Private network VpcId.
     */
    vpcId: pulumi.Input<string>;
    /**
     * availability zone.
     */
    zoneIds: pulumi.Input<pulumi.Input<number>[]>;
}
