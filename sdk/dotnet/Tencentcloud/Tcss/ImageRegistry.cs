// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Tcss
{
    /// <summary>
    /// Provides a resource to create a tcss image registry
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Tencentcloud.Tcss.ImageRegistry("example", new()
    ///     {
    ///         ConnDetectConfigs = new[]
    ///         {
    ///             new Tencentcloud.Tcss.Inputs.ImageRegistryConnDetectConfigArgs
    ///             {
    ///                 Quuid = "backend",
    ///                 Uuid = "backend",
    ///             },
    ///         },
    ///         NeedScan = true,
    ///         NetType = "public",
    ///         Password = "Password@demo",
    ///         RegistryRegion = "default",
    ///         RegistryType = "harbor",
    ///         RegistryVersion = "V1",
    ///         Url = "https://example.com",
    ///         Username = "root",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Tcss/imageRegistry:ImageRegistry")]
    public partial class ImageRegistry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Connectivity detection configuration.
        /// </summary>
        [Output("connDetectConfigs")]
        public Output<ImmutableArray<Outputs.ImageRegistryConnDetectConfig>> ConnDetectConfigs { get; private set; } = null!;

        /// <summary>
        /// Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        /// </summary>
        [Output("insecure")]
        public Output<int?> Insecure { get; private set; } = null!;

        /// <summary>
        /// Repository name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether to scan the latest image.
        /// </summary>
        [Output("needScan")]
        public Output<bool?> NeedScan { get; private set; } = null!;

        /// <summary>
        /// Network type, which can be `public` (public network).
        /// </summary>
        [Output("netType")]
        public Output<string> NetType { get; private set; } = null!;

        /// <summary>
        /// Password.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Region. Default value: `default`.
        /// </summary>
        [Output("registryRegion")]
        public Output<string?> RegistryRegion { get; private set; } = null!;

        /// <summary>
        /// Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
        /// </summary>
        [Output("registryType")]
        public Output<string> RegistryType { get; private set; } = null!;

        /// <summary>
        /// Repository version.
        /// </summary>
        [Output("registryVersion")]
        public Output<string?> RegistryVersion { get; private set; } = null!;

        /// <summary>
        /// Speed limit.
        /// </summary>
        [Output("speedLimit")]
        public Output<int?> SpeedLimit { get; private set; } = null!;

        /// <summary>
        /// Sync status.
        /// </summary>
        [Output("syncStatus")]
        public Output<string> SyncStatus { get; private set; } = null!;

        /// <summary>
        /// Repository URL.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// Username.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a ImageRegistry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImageRegistry(string name, ImageRegistryArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Tcss/imageRegistry:ImageRegistry", name, args ?? new ImageRegistryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImageRegistry(string name, Input<string> id, ImageRegistryState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Tcss/imageRegistry:ImageRegistry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImageRegistry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImageRegistry Get(string name, Input<string> id, ImageRegistryState? state = null, CustomResourceOptions? options = null)
        {
            return new ImageRegistry(name, id, state, options);
        }
    }

    public sealed class ImageRegistryArgs : global::Pulumi.ResourceArgs
    {
        [Input("connDetectConfigs")]
        private InputList<Inputs.ImageRegistryConnDetectConfigArgs>? _connDetectConfigs;

        /// <summary>
        /// Connectivity detection configuration.
        /// </summary>
        public InputList<Inputs.ImageRegistryConnDetectConfigArgs> ConnDetectConfigs
        {
            get => _connDetectConfigs ?? (_connDetectConfigs = new InputList<Inputs.ImageRegistryConnDetectConfigArgs>());
            set => _connDetectConfigs = value;
        }

        /// <summary>
        /// Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        /// </summary>
        [Input("insecure")]
        public Input<int>? Insecure { get; set; }

        /// <summary>
        /// Repository name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether to scan the latest image.
        /// </summary>
        [Input("needScan")]
        public Input<bool>? NeedScan { get; set; }

        /// <summary>
        /// Network type, which can be `public` (public network).
        /// </summary>
        [Input("netType", required: true)]
        public Input<string> NetType { get; set; } = null!;

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// Password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Region. Default value: `default`.
        /// </summary>
        [Input("registryRegion")]
        public Input<string>? RegistryRegion { get; set; }

        /// <summary>
        /// Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
        /// </summary>
        [Input("registryType", required: true)]
        public Input<string> RegistryType { get; set; } = null!;

        /// <summary>
        /// Repository version.
        /// </summary>
        [Input("registryVersion")]
        public Input<string>? RegistryVersion { get; set; }

        /// <summary>
        /// Speed limit.
        /// </summary>
        [Input("speedLimit")]
        public Input<int>? SpeedLimit { get; set; }

        /// <summary>
        /// Repository URL.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Username.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public ImageRegistryArgs()
        {
        }
        public static new ImageRegistryArgs Empty => new ImageRegistryArgs();
    }

    public sealed class ImageRegistryState : global::Pulumi.ResourceArgs
    {
        [Input("connDetectConfigs")]
        private InputList<Inputs.ImageRegistryConnDetectConfigGetArgs>? _connDetectConfigs;

        /// <summary>
        /// Connectivity detection configuration.
        /// </summary>
        public InputList<Inputs.ImageRegistryConnDetectConfigGetArgs> ConnDetectConfigs
        {
            get => _connDetectConfigs ?? (_connDetectConfigs = new InputList<Inputs.ImageRegistryConnDetectConfigGetArgs>());
            set => _connDetectConfigs = value;
        }

        /// <summary>
        /// Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
        /// </summary>
        [Input("insecure")]
        public Input<int>? Insecure { get; set; }

        /// <summary>
        /// Repository name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether to scan the latest image.
        /// </summary>
        [Input("needScan")]
        public Input<bool>? NeedScan { get; set; }

        /// <summary>
        /// Network type, which can be `public` (public network).
        /// </summary>
        [Input("netType")]
        public Input<string>? NetType { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Region. Default value: `default`.
        /// </summary>
        [Input("registryRegion")]
        public Input<string>? RegistryRegion { get; set; }

        /// <summary>
        /// Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
        /// </summary>
        [Input("registryType")]
        public Input<string>? RegistryType { get; set; }

        /// <summary>
        /// Repository version.
        /// </summary>
        [Input("registryVersion")]
        public Input<string>? RegistryVersion { get; set; }

        /// <summary>
        /// Speed limit.
        /// </summary>
        [Input("speedLimit")]
        public Input<int>? SpeedLimit { get; set; }

        /// <summary>
        /// Sync status.
        /// </summary>
        [Input("syncStatus")]
        public Input<string>? SyncStatus { get; set; }

        /// <summary>
        /// Repository URL.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Username.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ImageRegistryState()
        {
        }
        public static new ImageRegistryState Empty => new ImageRegistryState();
    }
}
