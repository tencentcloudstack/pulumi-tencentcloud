// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cls
{
    /// <summary>
    /// Provides a resource to create a CLS data transform
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var logsetSrc = new Tencentcloud.Cls.Logset("logsetSrc", new()
    ///     {
    ///         LogsetName = "tf-example-src",
    ///         Tags = 
    ///         {
    ///             { "createdBy", "terraform" },
    ///         },
    ///     });
    /// 
    ///     var topicSrc = new Tencentcloud.Cls.Topic("topicSrc", new()
    ///     {
    ///         TopicName = "tf-example_src",
    ///         LogsetId = logsetSrc.Id,
    ///         AutoSplit = false,
    ///         MaxSplitPartitions = 20,
    ///         PartitionCount = 1,
    ///         Period = 10,
    ///         StorageType = "hot",
    ///         Tags = 
    ///         {
    ///             { "createdBy", "terraform" },
    ///         },
    ///     });
    /// 
    ///     var logsetDst = new Tencentcloud.Cls.Logset("logsetDst", new()
    ///     {
    ///         LogsetName = "tf-example-dst",
    ///         Tags = 
    ///         {
    ///             { "createdBy", "terraform" },
    ///         },
    ///     });
    /// 
    ///     var topicDst = new Tencentcloud.Cls.Topic("topicDst", new()
    ///     {
    ///         TopicName = "tf-example-dst",
    ///         LogsetId = logsetDst.Id,
    ///         AutoSplit = false,
    ///         MaxSplitPartitions = 20,
    ///         PartitionCount = 1,
    ///         Period = 10,
    ///         StorageType = "hot",
    ///         Tags = 
    ///         {
    ///             { "createdBy", "terraform" },
    ///         },
    ///     });
    /// 
    ///     var example = new Tencentcloud.Cls.DataTransform("example", new()
    ///     {
    ///         FuncType = 1,
    ///         SrcTopicId = topicSrc.Id,
    ///         EtlContent = "ext_sep(\"content\", \"f1, f2, f3\", sep=\",\", quote=\"\", restrict=False, mode=\"overwrite\")fields_drop(\"content\")",
    ///         TaskType = 3,
    ///         EnableFlag = 1,
    ///         DstResources = new[]
    ///         {
    ///             new Tencentcloud.Cls.Inputs.DataTransformDstResourceArgs
    ///             {
    ///                 TopicId = topicDst.Id,
    ///                 Alias = "iac-test-dst",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// CLS data transform can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Cls/dataTransform:DataTransform example 7b4bcb05-9154-4cdc-a479-f6b5743846e5
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Cls/dataTransform:DataTransform")]
    public partial class DataTransform : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Data transform des resources. If `func_type` is `1`, this parameter is required. If `func_type` is `2`, this parameter does not need to be filled in.
        /// </summary>
        [Output("dstResources")]
        public Output<ImmutableArray<Outputs.DataTransformDstResource>> DstResources { get; private set; } = null!;

        /// <summary>
        /// Task enable flag. `1`: enable, `2`: disable, Default is `1`.
        /// </summary>
        [Output("enableFlag")]
        public Output<int?> EnableFlag { get; private set; } = null!;

        /// <summary>
        /// Data transform content. If `func_type` is `2`, must use `log_auto_output`.
        /// </summary>
        [Output("etlContent")]
        public Output<string> EtlContent { get; private set; } = null!;

        /// <summary>
        /// Task type. `1`: Specify the theme; `2`: Dynamic creation.
        /// </summary>
        [Output("funcType")]
        public Output<int> FuncType { get; private set; } = null!;

        /// <summary>
        /// Task name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Source topic ID.
        /// </summary>
        [Output("srcTopicId")]
        public Output<string> SrcTopicId { get; private set; } = null!;

        /// <summary>
        /// Task type. `1`: Use random data from the source log theme for processing preview; `2`: Use user-defined test data for processing preview; `3`: Create real machining tasks.
        /// </summary>
        [Output("taskType")]
        public Output<int> TaskType { get; private set; } = null!;


        /// <summary>
        /// Create a DataTransform resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataTransform(string name, DataTransformArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Cls/dataTransform:DataTransform", name, args ?? new DataTransformArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataTransform(string name, Input<string> id, DataTransformState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Cls/dataTransform:DataTransform", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataTransform resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataTransform Get(string name, Input<string> id, DataTransformState? state = null, CustomResourceOptions? options = null)
        {
            return new DataTransform(name, id, state, options);
        }
    }

    public sealed class DataTransformArgs : global::Pulumi.ResourceArgs
    {
        [Input("dstResources")]
        private InputList<Inputs.DataTransformDstResourceArgs>? _dstResources;

        /// <summary>
        /// Data transform des resources. If `func_type` is `1`, this parameter is required. If `func_type` is `2`, this parameter does not need to be filled in.
        /// </summary>
        public InputList<Inputs.DataTransformDstResourceArgs> DstResources
        {
            get => _dstResources ?? (_dstResources = new InputList<Inputs.DataTransformDstResourceArgs>());
            set => _dstResources = value;
        }

        /// <summary>
        /// Task enable flag. `1`: enable, `2`: disable, Default is `1`.
        /// </summary>
        [Input("enableFlag")]
        public Input<int>? EnableFlag { get; set; }

        /// <summary>
        /// Data transform content. If `func_type` is `2`, must use `log_auto_output`.
        /// </summary>
        [Input("etlContent", required: true)]
        public Input<string> EtlContent { get; set; } = null!;

        /// <summary>
        /// Task type. `1`: Specify the theme; `2`: Dynamic creation.
        /// </summary>
        [Input("funcType", required: true)]
        public Input<int> FuncType { get; set; } = null!;

        /// <summary>
        /// Task name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Source topic ID.
        /// </summary>
        [Input("srcTopicId", required: true)]
        public Input<string> SrcTopicId { get; set; } = null!;

        /// <summary>
        /// Task type. `1`: Use random data from the source log theme for processing preview; `2`: Use user-defined test data for processing preview; `3`: Create real machining tasks.
        /// </summary>
        [Input("taskType", required: true)]
        public Input<int> TaskType { get; set; } = null!;

        public DataTransformArgs()
        {
        }
        public static new DataTransformArgs Empty => new DataTransformArgs();
    }

    public sealed class DataTransformState : global::Pulumi.ResourceArgs
    {
        [Input("dstResources")]
        private InputList<Inputs.DataTransformDstResourceGetArgs>? _dstResources;

        /// <summary>
        /// Data transform des resources. If `func_type` is `1`, this parameter is required. If `func_type` is `2`, this parameter does not need to be filled in.
        /// </summary>
        public InputList<Inputs.DataTransformDstResourceGetArgs> DstResources
        {
            get => _dstResources ?? (_dstResources = new InputList<Inputs.DataTransformDstResourceGetArgs>());
            set => _dstResources = value;
        }

        /// <summary>
        /// Task enable flag. `1`: enable, `2`: disable, Default is `1`.
        /// </summary>
        [Input("enableFlag")]
        public Input<int>? EnableFlag { get; set; }

        /// <summary>
        /// Data transform content. If `func_type` is `2`, must use `log_auto_output`.
        /// </summary>
        [Input("etlContent")]
        public Input<string>? EtlContent { get; set; }

        /// <summary>
        /// Task type. `1`: Specify the theme; `2`: Dynamic creation.
        /// </summary>
        [Input("funcType")]
        public Input<int>? FuncType { get; set; }

        /// <summary>
        /// Task name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Source topic ID.
        /// </summary>
        [Input("srcTopicId")]
        public Input<string>? SrcTopicId { get; set; }

        /// <summary>
        /// Task type. `1`: Use random data from the source log theme for processing preview; `2`: Use user-defined test data for processing preview; `3`: Create real machining tasks.
        /// </summary>
        [Input("taskType")]
        public Input<int>? TaskType { get; set; }

        public DataTransformState()
        {
        }
        public static new DataTransformState Empty => new DataTransformState();
    }
}
