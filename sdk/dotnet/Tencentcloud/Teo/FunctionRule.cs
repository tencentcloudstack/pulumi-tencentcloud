// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Teo
{
    /// <summary>
    /// Provides a resource to create a teo teo_function_rule
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var teoFunctionRule = new Tencentcloud.Teo.FunctionRule("teoFunctionRule", new()
    ///     {
    ///         FunctionId = "ef-txx7fnua",
    ///         Remark = "aaa",
    ///         ZoneId = "zone-2qtuhspy7cr6",
    ///         FunctionRuleConditions = new[]
    ///         {
    ///             new Tencentcloud.Teo.Inputs.FunctionRuleFunctionRuleConditionArgs
    ///             {
    ///                 RuleConditions = new[]
    ///                 {
    ///                     new Tencentcloud.Teo.Inputs.FunctionRuleFunctionRuleConditionRuleConditionArgs
    ///                     {
    ///                         IgnoreCase = false,
    ///                         Name = null,
    ///                         Operator = "equal",
    ///                         Target = "host",
    ///                         Values = new[]
    ///                         {
    ///                             "aaa.makn.cn",
    ///                         },
    ///                     },
    ///                     new Tencentcloud.Teo.Inputs.FunctionRuleFunctionRuleConditionRuleConditionArgs
    ///                     {
    ///                         IgnoreCase = false,
    ///                         Name = null,
    ///                         Operator = "equal",
    ///                         Target = "extension",
    ///                         Values = new[]
    ///                         {
    ///                             ".txt",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Tencentcloud.Teo.Inputs.FunctionRuleFunctionRuleConditionArgs
    ///             {
    ///                 RuleConditions = new[]
    ///                 {
    ///                     new Tencentcloud.Teo.Inputs.FunctionRuleFunctionRuleConditionRuleConditionArgs
    ///                     {
    ///                         IgnoreCase = false,
    ///                         Name = null,
    ///                         Operator = "notequal",
    ///                         Target = "host",
    ///                         Values = new[]
    ///                         {
    ///                             "aaa.makn.cn",
    ///                         },
    ///                     },
    ///                     new Tencentcloud.Teo.Inputs.FunctionRuleFunctionRuleConditionRuleConditionArgs
    ///                     {
    ///                         IgnoreCase = false,
    ///                         Name = null,
    ///                         Operator = "equal",
    ///                         Target = "extension",
    ///                         Values = new[]
    ///                         {
    ///                             ".png",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// teo teo_function_rule can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Teo/functionRule:FunctionRule teo_function_rule zone_id#function_id#rule_id
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Teo/functionRule:FunctionRule")]
    public partial class FunctionRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the Function.
        /// </summary>
        [Output("functionId")]
        public Output<string> FunctionId { get; private set; } = null!;

        /// <summary>
        /// The name of the function.
        /// </summary>
        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        /// <summary>
        /// The list of rule conditions, where the conditions are connected by an "OR" relationship.
        /// </summary>
        [Output("functionRuleConditions")]
        public Output<ImmutableArray<Outputs.FunctionRuleFunctionRuleCondition>> FunctionRuleConditions { get; private set; } = null!;

        /// <summary>
        /// The priority of the function trigger rule. A higher numerical value indicates a higher priority.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// Rule description, maximum support of 60 characters.
        /// </summary>
        [Output("remark")]
        public Output<string?> Remark { get; private set; } = null!;

        /// <summary>
        /// ID of the Function Rule.
        /// </summary>
        [Output("ruleId")]
        public Output<string> RuleId { get; private set; } = null!;

        /// <summary>
        /// ID of the site.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a FunctionRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FunctionRule(string name, FunctionRuleArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Teo/functionRule:FunctionRule", name, args ?? new FunctionRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FunctionRule(string name, Input<string> id, FunctionRuleState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Teo/functionRule:FunctionRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FunctionRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FunctionRule Get(string name, Input<string> id, FunctionRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new FunctionRule(name, id, state, options);
        }
    }

    public sealed class FunctionRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Function.
        /// </summary>
        [Input("functionId", required: true)]
        public Input<string> FunctionId { get; set; } = null!;

        [Input("functionRuleConditions", required: true)]
        private InputList<Inputs.FunctionRuleFunctionRuleConditionArgs>? _functionRuleConditions;

        /// <summary>
        /// The list of rule conditions, where the conditions are connected by an "OR" relationship.
        /// </summary>
        public InputList<Inputs.FunctionRuleFunctionRuleConditionArgs> FunctionRuleConditions
        {
            get => _functionRuleConditions ?? (_functionRuleConditions = new InputList<Inputs.FunctionRuleFunctionRuleConditionArgs>());
            set => _functionRuleConditions = value;
        }

        /// <summary>
        /// Rule description, maximum support of 60 characters.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// ID of the site.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public FunctionRuleArgs()
        {
        }
        public static new FunctionRuleArgs Empty => new FunctionRuleArgs();
    }

    public sealed class FunctionRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Function.
        /// </summary>
        [Input("functionId")]
        public Input<string>? FunctionId { get; set; }

        /// <summary>
        /// The name of the function.
        /// </summary>
        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        [Input("functionRuleConditions")]
        private InputList<Inputs.FunctionRuleFunctionRuleConditionGetArgs>? _functionRuleConditions;

        /// <summary>
        /// The list of rule conditions, where the conditions are connected by an "OR" relationship.
        /// </summary>
        public InputList<Inputs.FunctionRuleFunctionRuleConditionGetArgs> FunctionRuleConditions
        {
            get => _functionRuleConditions ?? (_functionRuleConditions = new InputList<Inputs.FunctionRuleFunctionRuleConditionGetArgs>());
            set => _functionRuleConditions = value;
        }

        /// <summary>
        /// The priority of the function trigger rule. A higher numerical value indicates a higher priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Rule description, maximum support of 60 characters.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// ID of the Function Rule.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
        /// ID of the site.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public FunctionRuleState()
        {
        }
        public static new FunctionRuleState Empty => new FunctionRuleState();
    }
}
