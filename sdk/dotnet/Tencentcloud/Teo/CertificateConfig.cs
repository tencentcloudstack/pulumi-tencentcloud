// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Teo
{
    /// <summary>
    /// Provides a resource to create a teo certificate
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var certificate = new Tencentcloud.Teo.CertificateConfig("certificate", new()
    ///     {
    ///         Host = "test.tencentcloud-terraform-provider.cn",
    ///         Mode = "eofreecert",
    ///         ZoneId = "zone-2o1t24kgy362",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Configure SSL certificate
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var certificate = new Tencentcloud.Teo.CertificateConfig("certificate", new()
    ///     {
    ///         Host = "test.tencentcloud-terraform-provider.cn",
    ///         Mode = "sslcert",
    ///         ServerCertInfos = new[]
    ///         {
    ///             new Tencentcloud.Teo.Inputs.CertificateConfigServerCertInfoArgs
    ///             {
    ///                 CertId = "8xiUJIJd",
    ///             },
    ///         },
    ///         ZoneId = "zone-2o1t24kgy362",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// teo certificate can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Teo/certificateConfig:CertificateConfig certificate zone_id#host
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Teo/certificateConfig:CertificateConfig")]
    public partial class CertificateConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Acceleration domain name that needs to modify the certificate configuration.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// Mode of configuring the certificate, the values are: `disable`: Do not configure the certificate; `eofreecert`: Configure EdgeOne free certificate; `sslcert`: Configure SSL certificate. If not filled in, the default value is `disable`.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// SSL certificate configuration, this parameter takes effect only when mode = sslcert, just enter the corresponding CertId. You can go to the SSL certificate list to view the CertId.
        /// </summary>
        [Output("serverCertInfos")]
        public Output<ImmutableArray<Outputs.CertificateConfigServerCertInfo>> ServerCertInfos { get; private set; } = null!;

        /// <summary>
        /// Site ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateConfig(string name, CertificateConfigArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Teo/certificateConfig:CertificateConfig", name, args ?? new CertificateConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateConfig(string name, Input<string> id, CertificateConfigState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Teo/certificateConfig:CertificateConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateConfig Get(string name, Input<string> id, CertificateConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificateConfig(name, id, state, options);
        }
    }

    public sealed class CertificateConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Acceleration domain name that needs to modify the certificate configuration.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// Mode of configuring the certificate, the values are: `disable`: Do not configure the certificate; `eofreecert`: Configure EdgeOne free certificate; `sslcert`: Configure SSL certificate. If not filled in, the default value is `disable`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("serverCertInfos")]
        private InputList<Inputs.CertificateConfigServerCertInfoArgs>? _serverCertInfos;

        /// <summary>
        /// SSL certificate configuration, this parameter takes effect only when mode = sslcert, just enter the corresponding CertId. You can go to the SSL certificate list to view the CertId.
        /// </summary>
        public InputList<Inputs.CertificateConfigServerCertInfoArgs> ServerCertInfos
        {
            get => _serverCertInfos ?? (_serverCertInfos = new InputList<Inputs.CertificateConfigServerCertInfoArgs>());
            set => _serverCertInfos = value;
        }

        /// <summary>
        /// Site ID.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public CertificateConfigArgs()
        {
        }
        public static new CertificateConfigArgs Empty => new CertificateConfigArgs();
    }

    public sealed class CertificateConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Acceleration domain name that needs to modify the certificate configuration.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Mode of configuring the certificate, the values are: `disable`: Do not configure the certificate; `eofreecert`: Configure EdgeOne free certificate; `sslcert`: Configure SSL certificate. If not filled in, the default value is `disable`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("serverCertInfos")]
        private InputList<Inputs.CertificateConfigServerCertInfoGetArgs>? _serverCertInfos;

        /// <summary>
        /// SSL certificate configuration, this parameter takes effect only when mode = sslcert, just enter the corresponding CertId. You can go to the SSL certificate list to view the CertId.
        /// </summary>
        public InputList<Inputs.CertificateConfigServerCertInfoGetArgs> ServerCertInfos
        {
            get => _serverCertInfos ?? (_serverCertInfos = new InputList<Inputs.CertificateConfigServerCertInfoGetArgs>());
            set => _serverCertInfos = value;
        }

        /// <summary>
        /// Site ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public CertificateConfigState()
        {
        }
        public static new CertificateConfigState Empty => new CertificateConfigState();
    }
}
