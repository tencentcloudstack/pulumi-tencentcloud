// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cbs
{
    /// <summary>
    /// Provides a resource to create CBS set.
    /// 
    /// ## Example Usage
    /// 
    /// ### Create 3 standard CBS storages
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Tencentcloud.Cbs.StorageSet("example", new()
    ///     {
    ///         AvailabilityZone = "ap-guangzhou-3",
    ///         DiskCount = 3,
    ///         Encrypt = false,
    ///         ProjectId = 0,
    ///         StorageName = "tf-example",
    ///         StorageSize = 100,
    ///         StorageType = "CLOUD_SSD",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Create 3 dedicated cluster CBS storages
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Tencentcloud.Cbs.StorageSet("example", new()
    ///     {
    ///         AvailabilityZone = "ap-guangzhou-4",
    ///         ChargeType = "DEDICATED_CLUSTER_PAID",
    ///         DedicatedClusterId = "cluster-262n63e8",
    ///         DiskCount = 3,
    ///         Encrypt = false,
    ///         ProjectId = 0,
    ///         StorageName = "tf-example",
    ///         StorageSize = 100,
    ///         StorageType = "CLOUD_SSD",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Cbs/storageSet:StorageSet")]
    public partial class StorageSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether the CBS is mounted the CVM.
        /// </summary>
        [Output("attached")]
        public Output<bool> Attached { get; private set; } = null!;

        /// <summary>
        /// The available zone that the CBS instance locates at.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// The charge type of CBS instance. Support `POSTPAID_BY_HOUR` and `DEDICATED_CLUSTER_PAID`. The default is `POSTPAID_BY_HOUR`.
        /// </summary>
        [Output("chargeType")]
        public Output<string?> ChargeType { get; private set; } = null!;

        /// <summary>
        /// Exclusive cluster id.
        /// </summary>
        [Output("dedicatedClusterId")]
        public Output<string?> DedicatedClusterId { get; private set; } = null!;

        /// <summary>
        /// The number of disks to be purchased. Default 1.
        /// </summary>
        [Output("diskCount")]
        public Output<int?> DiskCount { get; private set; } = null!;

        /// <summary>
        /// disk id list.
        /// </summary>
        [Output("diskIds")]
        public Output<ImmutableArray<string>> DiskIds { get; private set; } = null!;

        /// <summary>
        /// Indicates whether CBS is encrypted.
        /// </summary>
        [Output("encrypt")]
        public Output<bool?> Encrypt { get; private set; } = null!;

        /// <summary>
        /// ID of the project to which the instance belongs.
        /// </summary>
        [Output("projectId")]
        public Output<int?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// ID of the snapshot. If specified, created the CBS by this snapshot.
        /// </summary>
        [Output("snapshotId")]
        public Output<string> SnapshotId { get; private set; } = null!;

        /// <summary>
        /// Name of CBS. The maximum length can not exceed 60 bytes.
        /// </summary>
        [Output("storageName")]
        public Output<string> StorageName { get; private set; } = null!;

        /// <summary>
        /// Volume of CBS, and unit is GB.
        /// </summary>
        [Output("storageSize")]
        public Output<int> StorageSize { get; private set; } = null!;

        /// <summary>
        /// Status of CBS. Valid values: UNATTACHED, ATTACHING, ATTACHED, DETACHING, EXPANDING, ROLLBACKING, TORECYCLE and DUMPING.
        /// </summary>
        [Output("storageStatus")]
        public Output<string> StorageStatus { get; private set; } = null!;

        /// <summary>
        /// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;

        /// <summary>
        /// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
        /// </summary>
        [Output("throughputPerformance")]
        public Output<int?> ThroughputPerformance { get; private set; } = null!;


        /// <summary>
        /// Create a StorageSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageSet(string name, StorageSetArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Cbs/storageSet:StorageSet", name, args ?? new StorageSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageSet(string name, Input<string> id, StorageSetState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Cbs/storageSet:StorageSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageSet Get(string name, Input<string> id, StorageSetState? state = null, CustomResourceOptions? options = null)
        {
            return new StorageSet(name, id, state, options);
        }
    }

    public sealed class StorageSetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The available zone that the CBS instance locates at.
        /// </summary>
        [Input("availabilityZone", required: true)]
        public Input<string> AvailabilityZone { get; set; } = null!;

        /// <summary>
        /// The charge type of CBS instance. Support `POSTPAID_BY_HOUR` and `DEDICATED_CLUSTER_PAID`. The default is `POSTPAID_BY_HOUR`.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// Exclusive cluster id.
        /// </summary>
        [Input("dedicatedClusterId")]
        public Input<string>? DedicatedClusterId { get; set; }

        /// <summary>
        /// The number of disks to be purchased. Default 1.
        /// </summary>
        [Input("diskCount")]
        public Input<int>? DiskCount { get; set; }

        /// <summary>
        /// Indicates whether CBS is encrypted.
        /// </summary>
        [Input("encrypt")]
        public Input<bool>? Encrypt { get; set; }

        /// <summary>
        /// ID of the project to which the instance belongs.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// ID of the snapshot. If specified, created the CBS by this snapshot.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// Name of CBS. The maximum length can not exceed 60 bytes.
        /// </summary>
        [Input("storageName", required: true)]
        public Input<string> StorageName { get; set; } = null!;

        /// <summary>
        /// Volume of CBS, and unit is GB.
        /// </summary>
        [Input("storageSize", required: true)]
        public Input<int> StorageSize { get; set; } = null!;

        /// <summary>
        /// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
        /// </summary>
        [Input("storageType", required: true)]
        public Input<string> StorageType { get; set; } = null!;

        /// <summary>
        /// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
        /// </summary>
        [Input("throughputPerformance")]
        public Input<int>? ThroughputPerformance { get; set; }

        public StorageSetArgs()
        {
        }
        public static new StorageSetArgs Empty => new StorageSetArgs();
    }

    public sealed class StorageSetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the CBS is mounted the CVM.
        /// </summary>
        [Input("attached")]
        public Input<bool>? Attached { get; set; }

        /// <summary>
        /// The available zone that the CBS instance locates at.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// The charge type of CBS instance. Support `POSTPAID_BY_HOUR` and `DEDICATED_CLUSTER_PAID`. The default is `POSTPAID_BY_HOUR`.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// Exclusive cluster id.
        /// </summary>
        [Input("dedicatedClusterId")]
        public Input<string>? DedicatedClusterId { get; set; }

        /// <summary>
        /// The number of disks to be purchased. Default 1.
        /// </summary>
        [Input("diskCount")]
        public Input<int>? DiskCount { get; set; }

        [Input("diskIds")]
        private InputList<string>? _diskIds;

        /// <summary>
        /// disk id list.
        /// </summary>
        public InputList<string> DiskIds
        {
            get => _diskIds ?? (_diskIds = new InputList<string>());
            set => _diskIds = value;
        }

        /// <summary>
        /// Indicates whether CBS is encrypted.
        /// </summary>
        [Input("encrypt")]
        public Input<bool>? Encrypt { get; set; }

        /// <summary>
        /// ID of the project to which the instance belongs.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// ID of the snapshot. If specified, created the CBS by this snapshot.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// Name of CBS. The maximum length can not exceed 60 bytes.
        /// </summary>
        [Input("storageName")]
        public Input<string>? StorageName { get; set; }

        /// <summary>
        /// Volume of CBS, and unit is GB.
        /// </summary>
        [Input("storageSize")]
        public Input<int>? StorageSize { get; set; }

        /// <summary>
        /// Status of CBS. Valid values: UNATTACHED, ATTACHING, ATTACHED, DETACHING, EXPANDING, ROLLBACKING, TORECYCLE and DUMPING.
        /// </summary>
        [Input("storageStatus")]
        public Input<string>? StorageStatus { get; set; }

        /// <summary>
        /// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        /// <summary>
        /// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
        /// </summary>
        [Input("throughputPerformance")]
        public Input<int>? ThroughputPerformance { get; set; }

        public StorageSetState()
        {
        }
        public static new StorageSetState Empty => new StorageSetState();
    }
}
