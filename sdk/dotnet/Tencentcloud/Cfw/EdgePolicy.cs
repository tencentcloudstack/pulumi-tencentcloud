// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cfw
{
    /// <summary>
    /// Provides a resource to create a cfw edge_policy
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Tencentcloud.Cfw.EdgePolicy("example", new Tencentcloud.Cfw.EdgePolicyArgs
    ///         {
    ///             Description = "policy description.",
    ///             Direction = 1,
    ///             Enable = "true",
    ///             Port = "-1/-1",
    ///             Protocol = "TCP",
    ///             RuleAction = "drop",
    ///             Scope = "all",
    ///             SourceContent = "1.1.1.1/0",
    ///             SourceType = "net",
    ///             TargetContent = "0.0.0.0/0",
    ///             TargetType = "net",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### If target_type is tag
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Tencentcloud.Cfw.EdgePolicy("example", new Tencentcloud.Cfw.EdgePolicyArgs
    ///         {
    ///             SourceContent = "0.0.0.0/0",
    ///             SourceType = "net",
    ///             TargetContent = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "Key", "test" },
    ///                 { "Value", "dddd" },
    ///             }),
    ///             TargetType = "tag",
    ///             Protocol = "TCP",
    ///             RuleAction = "drop",
    ///             Port = "-1/-1",
    ///             Direction = 1,
    ///             Enable = "true",
    ///             Description = "policy description.",
    ///             Scope = "all",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// cfw edge_policy can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import tencentcloud:Cfw/edgePolicy:EdgePolicy example edge_policy_id
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Cfw/edgePolicy:EdgePolicy")]
    public partial class EdgePolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// Description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Rule direction: 1, inbound; 0, outbound.
        /// </summary>
        [Output("direction")]
        public Output<int> Direction { get; private set; } = null!;

        /// <summary>
        /// Rule status, true means enabled, false means disabled. Default is true.
        /// </summary>
        [Output("enable")]
        public Output<string?> Enable { get; private set; } = null!;

        /// <summary>
        /// Parameter template id.
        /// </summary>
        [Output("paramTemplateId")]
        public Output<string> ParamTemplateId { get; private set; } = null!;

        /// <summary>
        /// The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
        /// </summary>
        [Output("port")]
        public Output<string> Port { get; private set; } = null!;

        /// <summary>
        /// Protocol. If Direction=1 &amp;&amp; Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 &amp;&amp; Scope!=serial, optional values: TCP; If Direction=0 &amp;&amp; Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 &amp;&amp; Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
        /// </summary>
        [Output("ruleAction")]
        public Output<string> RuleAction { get; private set; } = null!;

        /// <summary>
        /// Effective range. serial: serial; side: bypass; all: global, Default is all.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// Access source example: net:IP/CIDR(192.168.0.2).
        /// </summary>
        [Output("sourceContent")]
        public Output<string> SourceContent { get; private set; } = null!;

        /// <summary>
        /// Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
        /// </summary>
        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        /// <summary>
        /// Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
        /// </summary>
        [Output("targetContent")]
        public Output<string> TargetContent { get; private set; } = null!;

        /// <summary>
        /// Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
        /// </summary>
        [Output("targetType")]
        public Output<string> TargetType { get; private set; } = null!;

        /// <summary>
        /// The unique id corresponding to the rule, no need to fill in when creating the rule.
        /// </summary>
        [Output("uuid")]
        public Output<int> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a EdgePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EdgePolicy(string name, EdgePolicyArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Cfw/edgePolicy:EdgePolicy", name, args ?? new EdgePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EdgePolicy(string name, Input<string> id, EdgePolicyState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Cfw/edgePolicy:EdgePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EdgePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EdgePolicy Get(string name, Input<string> id, EdgePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new EdgePolicy(name, id, state, options);
        }
    }

    public sealed class EdgePolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Rule direction: 1, inbound; 0, outbound.
        /// </summary>
        [Input("direction", required: true)]
        public Input<int> Direction { get; set; } = null!;

        /// <summary>
        /// Rule status, true means enabled, false means disabled. Default is true.
        /// </summary>
        [Input("enable")]
        public Input<string>? Enable { get; set; }

        /// <summary>
        /// The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
        /// </summary>
        [Input("port", required: true)]
        public Input<string> Port { get; set; } = null!;

        /// <summary>
        /// Protocol. If Direction=1 &amp;&amp; Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 &amp;&amp; Scope!=serial, optional values: TCP; If Direction=0 &amp;&amp; Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 &amp;&amp; Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
        /// </summary>
        [Input("ruleAction", required: true)]
        public Input<string> RuleAction { get; set; } = null!;

        /// <summary>
        /// Effective range. serial: serial; side: bypass; all: global, Default is all.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Access source example: net:IP/CIDR(192.168.0.2).
        /// </summary>
        [Input("sourceContent", required: true)]
        public Input<string> SourceContent { get; set; } = null!;

        /// <summary>
        /// Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
        /// </summary>
        [Input("sourceType", required: true)]
        public Input<string> SourceType { get; set; } = null!;

        /// <summary>
        /// Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
        /// </summary>
        [Input("targetContent", required: true)]
        public Input<string> TargetContent { get; set; } = null!;

        /// <summary>
        /// Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
        /// </summary>
        [Input("targetType", required: true)]
        public Input<string> TargetType { get; set; } = null!;

        public EdgePolicyArgs()
        {
        }
    }

    public sealed class EdgePolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Rule direction: 1, inbound; 0, outbound.
        /// </summary>
        [Input("direction")]
        public Input<int>? Direction { get; set; }

        /// <summary>
        /// Rule status, true means enabled, false means disabled. Default is true.
        /// </summary>
        [Input("enable")]
        public Input<string>? Enable { get; set; }

        /// <summary>
        /// Parameter template id.
        /// </summary>
        [Input("paramTemplateId")]
        public Input<string>? ParamTemplateId { get; set; }

        /// <summary>
        /// The port for the access control policy. Value: -1/-1: All ports 80: Port 80.
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// Protocol. If Direction=1 &amp;&amp; Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=1 &amp;&amp; Scope!=serial, optional values: TCP; If Direction=0 &amp;&amp; Scope=serial, optional values: TCP UDP ICMP ANY HTTP HTTPS HTTP/HTTPS SMTP SMTPS SMTP/SMTPS FTP DNS; If Direction=0 &amp;&amp; Scope!=serial, optional values: TCP HTTP/HTTPS TLS/SSL.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// How the traffic set in the access control policy passes through the cloud firewall. Values: accept: allow; drop: reject; log: observe.
        /// </summary>
        [Input("ruleAction")]
        public Input<string>? RuleAction { get; set; }

        /// <summary>
        /// Effective range. serial: serial; side: bypass; all: global, Default is all.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Access source example: net:IP/CIDR(192.168.0.2).
        /// </summary>
        [Input("sourceContent")]
        public Input<string>? SourceContent { get; set; }

        /// <summary>
        /// Access source type: for inbound rules, the type can be net, location, vendor, template; for outbound rules, it can be net, instance, tag, template, group.
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        /// <summary>
        /// Example of access purpose: net: IP/CIDR(192.168.0.2) domain: domain name rules, such as *.qq.com.
        /// </summary>
        [Input("targetContent")]
        public Input<string>? TargetContent { get; set; }

        /// <summary>
        /// Access purpose type: For inbound rules, the type can be net, instance, tag, template, group; for outbound rules, it can be net, location, vendor, template.
        /// </summary>
        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        /// <summary>
        /// The unique id corresponding to the rule, no need to fill in when creating the rule.
        /// </summary>
        [Input("uuid")]
        public Input<int>? Uuid { get; set; }

        public EdgePolicyState()
        {
        }
    }
}
