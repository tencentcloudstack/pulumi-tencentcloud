// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cos
{
    /// <summary>
    /// Provides a COS resource to create a COS bucket and set its attributes.
    /// 
    /// &gt; **NOTE:** The following capabilities do not support cdc scenarios: `multi_az`, `website`, and bucket replication `replica_role`.
    /// 
    /// ## Example Usage
    /// 
    /// ### Private Bucket
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var privateBucket = new Tencentcloud.Cos.Bucket("privateBucket", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"private-bucket-{appId}"),
    ///         Acl = "private",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Private Bucket with CDC cluster
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var region = "ap-guangzhou";
    /// 
    ///     var cdcId = "cluster-262n63e8";
    /// 
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var privateBucket = new Tencentcloud.Cos.Bucket("privateBucket", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"private-bucket-{appId}"),
    ///         Acl = "private",
    ///         VersioningEnable = true,
    ///         ForceClean = true,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Enable SSE-KMS encryption
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var example = new Tencentcloud.Kms.Key("example", new()
    ///     {
    ///         Alias = "tf-example-kms-key",
    ///         Description = "example of kms key",
    ///         KeyRotationEnabled = false,
    ///         IsEnabled = true,
    ///         Tags = 
    ///         {
    ///             { "createdBy", "terraform" },
    ///         },
    ///     });
    /// 
    ///     var bucketBasic = new Tencentcloud.Cos.Bucket("bucketBasic", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"tf-bucket-cdc-{appId}"),
    ///         Acl = "private",
    ///         EncryptionAlgorithm = "KMS",
    ///         KmsId = example.Id,
    ///         VersioningEnable = true,
    ///         AccelerationEnable = false,
    ///         ForceClean = true,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Creation of multiple available zone bucket
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var multiZoneBucket = new Tencentcloud.Cos.Bucket("multiZoneBucket", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"multi-zone-bucket-{appId}"),
    ///         Acl = "private",
    ///         MultiAz = true,
    ///         VersioningEnable = true,
    ///         ForceClean = true,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Using verbose acl
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var bucketWithAcl = new Tencentcloud.Cos.Bucket("bucketWithAcl", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"bucketwith-acl-{appId}"),
    ///         AclBody = @"&lt;AccessControlPolicy&gt;
    /// 	&lt;Owner&gt;
    /// 		&lt;ID&gt;qcs::cam::uin/100022975249:uin/100022975249&lt;/ID&gt;
    /// 		&lt;DisplayName&gt;qcs::cam::uin/100022975249:uin/100022975249&lt;/DisplayName&gt;
    /// 	&lt;/Owner&gt;
    /// 	&lt;AccessControlList&gt;
    /// 		&lt;Grant&gt;
    /// 			&lt;Grantee xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Group""&gt;
    /// 				&lt;URI&gt;http://cam.qcloud.com/groups/global/AllUsers&lt;/URI&gt;
    /// 			&lt;/Grantee&gt;
    /// 			&lt;Permission&gt;READ&lt;/Permission&gt;
    /// 		&lt;/Grant&gt;
    /// 		&lt;Grant&gt;
    /// 			&lt;Grantee xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""CanonicalUser""&gt;
    /// 				&lt;ID&gt;qcs::cam::uin/100022975249:uin/100022975249&lt;/ID&gt;
    /// 				&lt;DisplayName&gt;qcs::cam::uin/100022975249:uin/100022975249&lt;/DisplayName&gt;
    /// 			&lt;/Grantee&gt;
    /// 			&lt;Permission&gt;FULL_CONTROL&lt;/Permission&gt;
    /// 		&lt;/Grant&gt;
    /// 		&lt;Grant&gt;
    /// 			&lt;Grantee xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""CanonicalUser""&gt;
    /// 				&lt;ID&gt;qcs::cam::uin/100022975249:uin/100022975249&lt;/ID&gt;
    /// 				&lt;DisplayName&gt;qcs::cam::uin/100022975249:uin/100022975249&lt;/DisplayName&gt;
    /// 			&lt;/Grantee&gt;
    /// 			&lt;Permission&gt;WRITE_ACP&lt;/Permission&gt;
    /// 		&lt;/Grant&gt;
    /// 		&lt;Grant&gt;
    /// 			&lt;Grantee xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Group""&gt;
    /// 				&lt;URI&gt;http://cam.qcloud.com/groups/global/AllUsers&lt;/URI&gt;
    /// 			&lt;/Grantee&gt;
    /// 			&lt;Permission&gt;READ_ACP&lt;/Permission&gt;
    /// 		&lt;/Grant&gt;
    /// 		&lt;Grant&gt;
    /// 			&lt;Grantee xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Group""&gt;
    /// 				&lt;URI&gt;http://cam.qcloud.com/groups/global/AllUsers&lt;/URI&gt;
    /// 			&lt;/Grantee&gt;
    /// 			&lt;Permission&gt;WRITE_ACP&lt;/Permission&gt;
    /// 		&lt;/Grant&gt;
    /// 		&lt;Grant&gt;
    /// 			&lt;Grantee xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""CanonicalUser""&gt;
    /// 				&lt;ID&gt;qcs::cam::uin/100022975249:uin/100022975249&lt;/ID&gt;
    /// 				&lt;DisplayName&gt;qcs::cam::uin/100022975249:uin/100022975249&lt;/DisplayName&gt;
    /// 			&lt;/Grantee&gt;
    /// 			&lt;Permission&gt;READ&lt;/Permission&gt;
    /// 		&lt;/Grant&gt;
    /// 		&lt;Grant&gt;
    /// 			&lt;Grantee xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""CanonicalUser""&gt;
    /// 				&lt;ID&gt;qcs::cam::uin/100022975249:uin/100022975249&lt;/ID&gt;
    /// 				&lt;DisplayName&gt;qcs::cam::uin/100022975249:uin/100022975249&lt;/DisplayName&gt;
    /// 			&lt;/Grantee&gt;
    /// 			&lt;Permission&gt;WRITE&lt;/Permission&gt;
    /// 		&lt;/Grant&gt;
    /// 		&lt;Grant&gt;
    /// 			&lt;Grantee xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Group""&gt;
    /// 				&lt;URI&gt;http://cam.qcloud.com/groups/global/AllUsers&lt;/URI&gt;
    /// 			&lt;/Grantee&gt;
    /// 			&lt;Permission&gt;FULL_CONTROL&lt;/Permission&gt;
    /// 		&lt;/Grant&gt;
    /// 	&lt;/AccessControlList&gt;
    /// &lt;/AccessControlPolicy&gt;
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Using verbose acl with CDC cluster
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var region = "ap-guangzhou";
    /// 
    ///     var cdcId = "cluster-262n63e8";
    /// 
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var bucketWithAcl = new Tencentcloud.Cos.Bucket("bucketWithAcl", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"private-bucket-{appId}"),
    ///         Acl = "private",
    ///         AclBody = @"&lt;AccessControlPolicy&gt;
    ///     &lt;Owner&gt;
    ///         &lt;ID&gt;qcs::cam::uin/100023201586:uin/100023201586&lt;/ID&gt;
    ///         &lt;DisplayName&gt;qcs::cam::uin/100023201586:uin/100023201586&lt;/DisplayName&gt;
    ///     &lt;/Owner&gt;
    ///     &lt;AccessControlList&gt;
    ///         &lt;Grant&gt;
    ///             &lt;Grantee type=""CanonicalUser""&gt;
    ///                 &lt;ID&gt;qcs::cam::uin/100015006748:uin/100015006748&lt;/ID&gt;
    ///                 &lt;DisplayName&gt;qcs::cam::uin/100015006748:uin/100015006748&lt;/DisplayName&gt;
    ///             &lt;/Grantee&gt;
    ///             &lt;Permission&gt;WRITE&lt;/Permission&gt;
    ///         &lt;/Grant&gt;
    ///         &lt;Grant&gt;
    ///             &lt;Grantee type=""CanonicalUser""&gt;
    ///                 &lt;ID&gt;qcs::cam::uin/100023201586:uin/100023201586&lt;/ID&gt;
    ///                 &lt;DisplayName&gt;qcs::cam::uin/100023201586:uin/100023201586&lt;/DisplayName&gt;
    ///             &lt;/Grantee&gt;
    ///             &lt;Permission&gt;FULL_CONTROL&lt;/Permission&gt;
    ///         &lt;/Grant&gt;
    ///     &lt;/AccessControlList&gt;
    /// &lt;/AccessControlPolicy&gt;
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Static Website
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var bucketWithStaticWebsite = new Tencentcloud.Cos.Bucket("bucketWithStaticWebsite", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"bucket-with-static-website-{appId}"),
    ///         Website = new Tencentcloud.Cos.Inputs.BucketWebsiteArgs
    ///         {
    ///             IndexDocument = "index.html",
    ///             ErrorDocument = "error.html",
    ///             RedirectAllRequestsTo = "https",
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["endpointTest"] = bucketWithStaticWebsite.Website.Apply(website =&gt; website?.Endpoint),
    ///     };
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Using CORS
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var bucketWithCors = new Tencentcloud.Cos.Bucket("bucketWithCors", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"bucket-with-cors-{appId}"),
    ///         Acl = "public-read-write",
    ///         CorsRules = new[]
    ///         {
    ///             new Tencentcloud.Cos.Inputs.BucketCorsRuleArgs
    ///             {
    ///                 AllowedOrigins = new[]
    ///                 {
    ///                     "http://*.abc.com",
    ///                 },
    ///                 AllowedMethods = new[]
    ///                 {
    ///                     "PUT",
    ///                     "POST",
    ///                 },
    ///                 AllowedHeaders = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 MaxAgeSeconds = 300,
    ///                 ExposeHeaders = new[]
    ///                 {
    ///                     "Etag",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Using CORS with CDC
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var region = "ap-guangzhou";
    /// 
    ///     var cdcId = "cluster-262n63e8";
    /// 
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var bucketWithCors = new Tencentcloud.Cos.Bucket("bucketWithCors", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"bucket-with-cors-{appId}"),
    ///         CorsRules = new[]
    ///         {
    ///             new Tencentcloud.Cos.Inputs.BucketCorsRuleArgs
    ///             {
    ///                 AllowedOrigins = new[]
    ///                 {
    ///                     "http://*.abc.com",
    ///                 },
    ///                 AllowedMethods = new[]
    ///                 {
    ///                     "PUT",
    ///                     "POST",
    ///                 },
    ///                 AllowedHeaders = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 MaxAgeSeconds = 300,
    ///                 ExposeHeaders = new[]
    ///                 {
    ///                     "Etag",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Using object lifecycle
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var bucketWithLifecycle = new Tencentcloud.Cos.Bucket("bucketWithLifecycle", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"bucket-with-lifecycle-{appId}"),
    ///         Acl = "public-read-write",
    ///         LifecycleRules = new[]
    ///         {
    ///             new Tencentcloud.Cos.Inputs.BucketLifecycleRuleArgs
    ///             {
    ///                 FilterPrefix = "path1/",
    ///                 Transitions = new[]
    ///                 {
    ///                     new Tencentcloud.Cos.Inputs.BucketLifecycleRuleTransitionArgs
    ///                     {
    ///                         Days = 30,
    ///                         StorageClass = "STANDARD_IA",
    ///                     },
    ///                 },
    ///                 Expiration = new Tencentcloud.Cos.Inputs.BucketLifecycleRuleExpirationArgs
    ///                 {
    ///                     Days = 90,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Using object lifecycle with CDC
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var region = "ap-guangzhou";
    /// 
    ///     var cdcId = "cluster-262n63e8";
    /// 
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var bucketWithLifecycle = new Tencentcloud.Cos.Bucket("bucketWithLifecycle", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"bucket-with-lifecycle-{appId}"),
    ///         Acl = "private",
    ///         LifecycleRules = new[]
    ///         {
    ///             new Tencentcloud.Cos.Inputs.BucketLifecycleRuleArgs
    ///             {
    ///                 FilterPrefix = "path1/",
    ///                 Expiration = new Tencentcloud.Cos.Inputs.BucketLifecycleRuleExpirationArgs
    ///                 {
    ///                     Days = 90,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Using replication
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var info = Tencentcloud.User.GetInfo.Invoke();
    /// 
    ///     var appId = info.Apply(getInfoResult =&gt; getInfoResult.AppId);
    /// 
    ///     var uin = info.Apply(getInfoResult =&gt; getInfoResult.Uin);
    /// 
    ///     var ownerUin = info.Apply(getInfoResult =&gt; getInfoResult.OwnerUin);
    /// 
    ///     var region = "ap-guangzhou";
    /// 
    ///     var bucketReplicate = new Tencentcloud.Cos.Bucket("bucketReplicate", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"bucket-replicate-{appId}"),
    ///         Acl = "private",
    ///         VersioningEnable = true,
    ///     });
    /// 
    ///     var bucketWithReplication = new Tencentcloud.Cos.Bucket("bucketWithReplication", new()
    ///     {
    ///         CosBucket = appId.Apply(appId =&gt; $"bucket-with-replication-{appId}"),
    ///         Acl = "private",
    ///         VersioningEnable = true,
    ///         ReplicaRole = Output.Tuple(ownerUin, uin).Apply(values =&gt;
    ///         {
    ///             var ownerUin = values.Item1;
    ///             var uin = values.Item2;
    ///             return $"qcs::cam::uin/{ownerUin}:uin/{uin}";
    ///         }),
    ///         ReplicaRules = new[]
    ///         {
    ///             new Tencentcloud.Cos.Inputs.BucketReplicaRuleArgs
    ///             {
    ///                 Id = "test-rep1",
    ///                 Status = "Enabled",
    ///                 Prefix = "dist",
    ///                 DestinationBucket = bucketReplicate.CosBucket.Apply(bucket =&gt; $"qcs::cos:{region}::{bucket}"),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// COS bucket can be imported, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Cos/bucket:Bucket bucket bucket-name
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Cos/bucket:Bucket")]
    public partial class Bucket : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable bucket acceleration.
        /// </summary>
        [Output("accelerationEnable")]
        public Output<bool?> AccelerationEnable { get; private set; } = null!;

        /// <summary>
        /// The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        /// </summary>
        [Output("acl")]
        public Output<string?> Acl { get; private set; } = null!;

        /// <summary>
        /// ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        /// </summary>
        [Output("aclBody")]
        public Output<string> AclBody { get; private set; } = null!;

        /// <summary>
        /// The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        /// </summary>
        [Output("bucket")]
        public Output<string> CosBucket { get; private set; } = null!;

        /// <summary>
        /// CDC cluster ID.
        /// </summary>
        [Output("cdcId")]
        public Output<string?> CdcId { get; private set; } = null!;

        /// <summary>
        /// A rule of Cross-Origin Resource Sharing (documented below).
        /// </summary>
        [Output("corsRules")]
        public Output<ImmutableArray<Outputs.BucketCorsRule>> CorsRules { get; private set; } = null!;

        /// <summary>
        /// The URL of this cos bucket.
        /// </summary>
        [Output("cosBucketUrl")]
        public Output<string> CosBucketUrl { get; private set; } = null!;

        /// <summary>
        /// Enable intelligent tiering. NOTE: When intelligent tiering configuration is enabled, it cannot be turned off or modified.
        /// </summary>
        [Output("enableIntelligentTiering")]
        public Output<bool> EnableIntelligentTiering { get; private set; } = null!;

        /// <summary>
        /// The server-side encryption algorithm to use. Valid values are `AES256`, `KMS` and `cos/kms`, `cos/kms` is for cdc cos scenario.
        /// </summary>
        [Output("encryptionAlgorithm")]
        public Output<string?> EncryptionAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Force cleanup all objects before delete bucket.
        /// </summary>
        [Output("forceClean")]
        public Output<bool?> ForceClean { get; private set; } = null!;

        /// <summary>
        /// Specifies the limit of days for standard-tier data to low-frequency data in an intelligent tiered storage configuration, with optional days of 30, 60, 90. Default value is 30.
        /// </summary>
        [Output("intelligentTieringDays")]
        public Output<int> IntelligentTieringDays { get; private set; } = null!;

        /// <summary>
        /// Specify the access limit for converting standard layer data into low-frequency layer data in the configuration. The default value is once, which can be used in combination with the number of days to achieve the conversion effect. For example, if the parameter is set to 1 and the number of access days is 30, it means that objects with less than one visit in 30 consecutive days will be reduced from the standard layer to the low frequency layer.
        /// </summary>
        [Output("intelligentTieringRequestFrequent")]
        public Output<int> IntelligentTieringRequestFrequent { get; private set; } = null!;

        /// <summary>
        /// The KMS Master Key ID. This value is valid only when `encryption_algorithm` is set to KMS or cos/kms. Set kms id to the specified value. If not specified, the default kms id is used.
        /// </summary>
        [Output("kmsId")]
        public Output<string?> KmsId { get; private set; } = null!;

        /// <summary>
        /// A configuration of object lifecycle management (documented below).
        /// </summary>
        [Output("lifecycleRules")]
        public Output<ImmutableArray<Outputs.BucketLifecycleRule>> LifecycleRules { get; private set; } = null!;

        /// <summary>
        /// Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        /// </summary>
        [Output("logEnable")]
        public Output<bool?> LogEnable { get; private set; } = null!;

        /// <summary>
        /// The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        /// </summary>
        [Output("logPrefix")]
        public Output<string> LogPrefix { get; private set; } = null!;

        /// <summary>
        /// The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`. User must have full access on this bucket.
        /// </summary>
        [Output("logTargetBucket")]
        public Output<string> LogTargetBucket { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to create a bucket of multi available zone.
        /// </summary>
        [Output("multiAz")]
        public Output<bool?> MultiAz { get; private set; } = null!;

        /// <summary>
        /// Bucket Origin Domain settings.
        /// </summary>
        [Output("originDomainRules")]
        public Output<ImmutableArray<Outputs.BucketOriginDomainRule>> OriginDomainRules { get; private set; } = null!;

        /// <summary>
        /// Bucket Origin-Pull settings.
        /// </summary>
        [Output("originPullRules")]
        public Output<ImmutableArray<Outputs.BucketOriginPullRule>> OriginPullRules { get; private set; } = null!;

        /// <summary>
        /// Request initiator identifier, format: `qcs::cam::uin/&lt;owneruin&gt;:uin/&lt;subuin&gt;`. NOTE: only `versioning_enable` is true can configure this argument.
        /// </summary>
        [Output("replicaRole")]
        public Output<string?> ReplicaRole { get; private set; } = null!;

        /// <summary>
        /// List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        /// </summary>
        [Output("replicaRules")]
        public Output<ImmutableArray<Outputs.BucketReplicaRule>> ReplicaRules { get; private set; } = null!;

        /// <summary>
        /// The tags of a bucket.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Enable bucket versioning. NOTE: The `multi_az` feature is true for the current bucket, cannot disable version control.
        /// </summary>
        [Output("versioningEnable")]
        public Output<bool?> VersioningEnable { get; private set; } = null!;

        /// <summary>
        /// A website object(documented below).
        /// </summary>
        [Output("website")]
        public Output<Outputs.BucketWebsite?> Website { get; private set; } = null!;


        /// <summary>
        /// Create a Bucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Bucket(string name, BucketArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Cos/bucket:Bucket", name, args ?? new BucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Bucket(string name, Input<string> id, BucketState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Cos/bucket:Bucket", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Bucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Bucket Get(string name, Input<string> id, BucketState? state = null, CustomResourceOptions? options = null)
        {
            return new Bucket(name, id, state, options);
        }
    }

    public sealed class BucketArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable bucket acceleration.
        /// </summary>
        [Input("accelerationEnable")]
        public Input<bool>? AccelerationEnable { get; set; }

        /// <summary>
        /// The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        /// </summary>
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        /// <summary>
        /// ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        /// </summary>
        [Input("aclBody")]
        public Input<string>? AclBody { get; set; }

        /// <summary>
        /// The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> CosBucket { get; set; } = null!;

        /// <summary>
        /// CDC cluster ID.
        /// </summary>
        [Input("cdcId")]
        public Input<string>? CdcId { get; set; }

        [Input("corsRules")]
        private InputList<Inputs.BucketCorsRuleArgs>? _corsRules;

        /// <summary>
        /// A rule of Cross-Origin Resource Sharing (documented below).
        /// </summary>
        public InputList<Inputs.BucketCorsRuleArgs> CorsRules
        {
            get => _corsRules ?? (_corsRules = new InputList<Inputs.BucketCorsRuleArgs>());
            set => _corsRules = value;
        }

        /// <summary>
        /// Enable intelligent tiering. NOTE: When intelligent tiering configuration is enabled, it cannot be turned off or modified.
        /// </summary>
        [Input("enableIntelligentTiering")]
        public Input<bool>? EnableIntelligentTiering { get; set; }

        /// <summary>
        /// The server-side encryption algorithm to use. Valid values are `AES256`, `KMS` and `cos/kms`, `cos/kms` is for cdc cos scenario.
        /// </summary>
        [Input("encryptionAlgorithm")]
        public Input<string>? EncryptionAlgorithm { get; set; }

        /// <summary>
        /// Force cleanup all objects before delete bucket.
        /// </summary>
        [Input("forceClean")]
        public Input<bool>? ForceClean { get; set; }

        /// <summary>
        /// Specifies the limit of days for standard-tier data to low-frequency data in an intelligent tiered storage configuration, with optional days of 30, 60, 90. Default value is 30.
        /// </summary>
        [Input("intelligentTieringDays")]
        public Input<int>? IntelligentTieringDays { get; set; }

        /// <summary>
        /// Specify the access limit for converting standard layer data into low-frequency layer data in the configuration. The default value is once, which can be used in combination with the number of days to achieve the conversion effect. For example, if the parameter is set to 1 and the number of access days is 30, it means that objects with less than one visit in 30 consecutive days will be reduced from the standard layer to the low frequency layer.
        /// </summary>
        [Input("intelligentTieringRequestFrequent")]
        public Input<int>? IntelligentTieringRequestFrequent { get; set; }

        /// <summary>
        /// The KMS Master Key ID. This value is valid only when `encryption_algorithm` is set to KMS or cos/kms. Set kms id to the specified value. If not specified, the default kms id is used.
        /// </summary>
        [Input("kmsId")]
        public Input<string>? KmsId { get; set; }

        [Input("lifecycleRules")]
        private InputList<Inputs.BucketLifecycleRuleArgs>? _lifecycleRules;

        /// <summary>
        /// A configuration of object lifecycle management (documented below).
        /// </summary>
        public InputList<Inputs.BucketLifecycleRuleArgs> LifecycleRules
        {
            get => _lifecycleRules ?? (_lifecycleRules = new InputList<Inputs.BucketLifecycleRuleArgs>());
            set => _lifecycleRules = value;
        }

        /// <summary>
        /// Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        /// </summary>
        [Input("logEnable")]
        public Input<bool>? LogEnable { get; set; }

        /// <summary>
        /// The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        /// </summary>
        [Input("logPrefix")]
        public Input<string>? LogPrefix { get; set; }

        /// <summary>
        /// The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`. User must have full access on this bucket.
        /// </summary>
        [Input("logTargetBucket")]
        public Input<string>? LogTargetBucket { get; set; }

        /// <summary>
        /// Indicates whether to create a bucket of multi available zone.
        /// </summary>
        [Input("multiAz")]
        public Input<bool>? MultiAz { get; set; }

        [Input("originDomainRules")]
        private InputList<Inputs.BucketOriginDomainRuleArgs>? _originDomainRules;

        /// <summary>
        /// Bucket Origin Domain settings.
        /// </summary>
        public InputList<Inputs.BucketOriginDomainRuleArgs> OriginDomainRules
        {
            get => _originDomainRules ?? (_originDomainRules = new InputList<Inputs.BucketOriginDomainRuleArgs>());
            set => _originDomainRules = value;
        }

        [Input("originPullRules")]
        private InputList<Inputs.BucketOriginPullRuleArgs>? _originPullRules;

        /// <summary>
        /// Bucket Origin-Pull settings.
        /// </summary>
        public InputList<Inputs.BucketOriginPullRuleArgs> OriginPullRules
        {
            get => _originPullRules ?? (_originPullRules = new InputList<Inputs.BucketOriginPullRuleArgs>());
            set => _originPullRules = value;
        }

        /// <summary>
        /// Request initiator identifier, format: `qcs::cam::uin/&lt;owneruin&gt;:uin/&lt;subuin&gt;`. NOTE: only `versioning_enable` is true can configure this argument.
        /// </summary>
        [Input("replicaRole")]
        public Input<string>? ReplicaRole { get; set; }

        [Input("replicaRules")]
        private InputList<Inputs.BucketReplicaRuleArgs>? _replicaRules;

        /// <summary>
        /// List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        /// </summary>
        public InputList<Inputs.BucketReplicaRuleArgs> ReplicaRules
        {
            get => _replicaRules ?? (_replicaRules = new InputList<Inputs.BucketReplicaRuleArgs>());
            set => _replicaRules = value;
        }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// The tags of a bucket.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Enable bucket versioning. NOTE: The `multi_az` feature is true for the current bucket, cannot disable version control.
        /// </summary>
        [Input("versioningEnable")]
        public Input<bool>? VersioningEnable { get; set; }

        /// <summary>
        /// A website object(documented below).
        /// </summary>
        [Input("website")]
        public Input<Inputs.BucketWebsiteArgs>? Website { get; set; }

        public BucketArgs()
        {
        }
        public static new BucketArgs Empty => new BucketArgs();
    }

    public sealed class BucketState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable bucket acceleration.
        /// </summary>
        [Input("accelerationEnable")]
        public Input<bool>? AccelerationEnable { get; set; }

        /// <summary>
        /// The canned ACL to apply. Valid values: private, public-read, and public-read-write. Defaults to private.
        /// </summary>
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        /// <summary>
        /// ACL XML body for multiple grant info. NOTE: this argument will overwrite `acl`. Check https://intl.cloud.tencent.com/document/product/436/7737 for more detail.
        /// </summary>
        [Input("aclBody")]
        public Input<string>? AclBody { get; set; }

        /// <summary>
        /// The name of a bucket to be created. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        /// </summary>
        [Input("bucket")]
        public Input<string>? CosBucket { get; set; }

        /// <summary>
        /// CDC cluster ID.
        /// </summary>
        [Input("cdcId")]
        public Input<string>? CdcId { get; set; }

        [Input("corsRules")]
        private InputList<Inputs.BucketCorsRuleGetArgs>? _corsRules;

        /// <summary>
        /// A rule of Cross-Origin Resource Sharing (documented below).
        /// </summary>
        public InputList<Inputs.BucketCorsRuleGetArgs> CorsRules
        {
            get => _corsRules ?? (_corsRules = new InputList<Inputs.BucketCorsRuleGetArgs>());
            set => _corsRules = value;
        }

        /// <summary>
        /// The URL of this cos bucket.
        /// </summary>
        [Input("cosBucketUrl")]
        public Input<string>? CosBucketUrl { get; set; }

        /// <summary>
        /// Enable intelligent tiering. NOTE: When intelligent tiering configuration is enabled, it cannot be turned off or modified.
        /// </summary>
        [Input("enableIntelligentTiering")]
        public Input<bool>? EnableIntelligentTiering { get; set; }

        /// <summary>
        /// The server-side encryption algorithm to use. Valid values are `AES256`, `KMS` and `cos/kms`, `cos/kms` is for cdc cos scenario.
        /// </summary>
        [Input("encryptionAlgorithm")]
        public Input<string>? EncryptionAlgorithm { get; set; }

        /// <summary>
        /// Force cleanup all objects before delete bucket.
        /// </summary>
        [Input("forceClean")]
        public Input<bool>? ForceClean { get; set; }

        /// <summary>
        /// Specifies the limit of days for standard-tier data to low-frequency data in an intelligent tiered storage configuration, with optional days of 30, 60, 90. Default value is 30.
        /// </summary>
        [Input("intelligentTieringDays")]
        public Input<int>? IntelligentTieringDays { get; set; }

        /// <summary>
        /// Specify the access limit for converting standard layer data into low-frequency layer data in the configuration. The default value is once, which can be used in combination with the number of days to achieve the conversion effect. For example, if the parameter is set to 1 and the number of access days is 30, it means that objects with less than one visit in 30 consecutive days will be reduced from the standard layer to the low frequency layer.
        /// </summary>
        [Input("intelligentTieringRequestFrequent")]
        public Input<int>? IntelligentTieringRequestFrequent { get; set; }

        /// <summary>
        /// The KMS Master Key ID. This value is valid only when `encryption_algorithm` is set to KMS or cos/kms. Set kms id to the specified value. If not specified, the default kms id is used.
        /// </summary>
        [Input("kmsId")]
        public Input<string>? KmsId { get; set; }

        [Input("lifecycleRules")]
        private InputList<Inputs.BucketLifecycleRuleGetArgs>? _lifecycleRules;

        /// <summary>
        /// A configuration of object lifecycle management (documented below).
        /// </summary>
        public InputList<Inputs.BucketLifecycleRuleGetArgs> LifecycleRules
        {
            get => _lifecycleRules ?? (_lifecycleRules = new InputList<Inputs.BucketLifecycleRuleGetArgs>());
            set => _lifecycleRules = value;
        }

        /// <summary>
        /// Indicate the access log of this bucket to be saved or not. Default is `false`. If set `true`, the access log will be saved with `log_target_bucket`. To enable log, the full access of log service must be granted. [Full Access Role Policy](https://intl.cloud.tencent.com/document/product/436/16920).
        /// </summary>
        [Input("logEnable")]
        public Input<bool>? LogEnable { get; set; }

        /// <summary>
        /// The prefix log name which saves the access log of this bucket per 5 minutes. Eg. `MyLogPrefix/`. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`.
        /// </summary>
        [Input("logPrefix")]
        public Input<string>? LogPrefix { get; set; }

        /// <summary>
        /// The target bucket name which saves the access log of this bucket per 5 minutes. The log access file format is `log_target_bucket`/`log_prefix`{YYYY}/{MM}/{DD}/{time}_{random}_{index}.gz. Only valid when `log_enable` is `true`. User must have full access on this bucket.
        /// </summary>
        [Input("logTargetBucket")]
        public Input<string>? LogTargetBucket { get; set; }

        /// <summary>
        /// Indicates whether to create a bucket of multi available zone.
        /// </summary>
        [Input("multiAz")]
        public Input<bool>? MultiAz { get; set; }

        [Input("originDomainRules")]
        private InputList<Inputs.BucketOriginDomainRuleGetArgs>? _originDomainRules;

        /// <summary>
        /// Bucket Origin Domain settings.
        /// </summary>
        public InputList<Inputs.BucketOriginDomainRuleGetArgs> OriginDomainRules
        {
            get => _originDomainRules ?? (_originDomainRules = new InputList<Inputs.BucketOriginDomainRuleGetArgs>());
            set => _originDomainRules = value;
        }

        [Input("originPullRules")]
        private InputList<Inputs.BucketOriginPullRuleGetArgs>? _originPullRules;

        /// <summary>
        /// Bucket Origin-Pull settings.
        /// </summary>
        public InputList<Inputs.BucketOriginPullRuleGetArgs> OriginPullRules
        {
            get => _originPullRules ?? (_originPullRules = new InputList<Inputs.BucketOriginPullRuleGetArgs>());
            set => _originPullRules = value;
        }

        /// <summary>
        /// Request initiator identifier, format: `qcs::cam::uin/&lt;owneruin&gt;:uin/&lt;subuin&gt;`. NOTE: only `versioning_enable` is true can configure this argument.
        /// </summary>
        [Input("replicaRole")]
        public Input<string>? ReplicaRole { get; set; }

        [Input("replicaRules")]
        private InputList<Inputs.BucketReplicaRuleGetArgs>? _replicaRules;

        /// <summary>
        /// List of replica rule. NOTE: only `versioning_enable` is true and `replica_role` set can configure this argument.
        /// </summary>
        public InputList<Inputs.BucketReplicaRuleGetArgs> ReplicaRules
        {
            get => _replicaRules ?? (_replicaRules = new InputList<Inputs.BucketReplicaRuleGetArgs>());
            set => _replicaRules = value;
        }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// The tags of a bucket.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Enable bucket versioning. NOTE: The `multi_az` feature is true for the current bucket, cannot disable version control.
        /// </summary>
        [Input("versioningEnable")]
        public Input<bool>? VersioningEnable { get; set; }

        /// <summary>
        /// A website object(documented below).
        /// </summary>
        [Input("website")]
        public Input<Inputs.BucketWebsiteGetArgs>? Website { get; set; }

        public BucketState()
        {
        }
        public static new BucketState Empty => new BucketState();
    }
}
