// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cos
{
    /// <summary>
    /// Provides a resource to attach/detach the corresponding certificate for the domain name in specified cos bucket.
    /// 
    /// &gt; **NOTE:** The current resource does not support cdc.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Tencentcloud.Cos.BucketDomainCertificateAttachment("foo", new()
    ///     {
    ///         Bucket = "",
    ///         DomainCertificate = new Tencentcloud.Cos.Inputs.BucketDomainCertificateAttachmentDomainCertificateArgs
    ///         {
    ///             Certificate = new Tencentcloud.Cos.Inputs.BucketDomainCertificateAttachmentDomainCertificateCertificateArgs
    ///             {
    ///                 CertType = "CustomCert",
    ///                 CustomCert = new Tencentcloud.Cos.Inputs.BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs
    ///                 {
    ///                     Cert = "===CERTIFICATE===",
    ///                     PrivateKey = "===PRIVATE_KEY===",
    ///                 },
    ///             },
    ///             Domain = "domain_name",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Cos/bucketDomainCertificateAttachment:BucketDomainCertificateAttachment")]
    public partial class BucketDomainCertificateAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Bucket name.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// The certificate of specified doamin.
        /// </summary>
        [Output("domainCertificate")]
        public Output<Outputs.BucketDomainCertificateAttachmentDomainCertificate> DomainCertificate { get; private set; } = null!;


        /// <summary>
        /// Create a BucketDomainCertificateAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BucketDomainCertificateAttachment(string name, BucketDomainCertificateAttachmentArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Cos/bucketDomainCertificateAttachment:BucketDomainCertificateAttachment", name, args ?? new BucketDomainCertificateAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BucketDomainCertificateAttachment(string name, Input<string> id, BucketDomainCertificateAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Cos/bucketDomainCertificateAttachment:BucketDomainCertificateAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BucketDomainCertificateAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BucketDomainCertificateAttachment Get(string name, Input<string> id, BucketDomainCertificateAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new BucketDomainCertificateAttachment(name, id, state, options);
        }
    }

    public sealed class BucketDomainCertificateAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bucket name.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// The certificate of specified doamin.
        /// </summary>
        [Input("domainCertificate", required: true)]
        public Input<Inputs.BucketDomainCertificateAttachmentDomainCertificateArgs> DomainCertificate { get; set; } = null!;

        public BucketDomainCertificateAttachmentArgs()
        {
        }
        public static new BucketDomainCertificateAttachmentArgs Empty => new BucketDomainCertificateAttachmentArgs();
    }

    public sealed class BucketDomainCertificateAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Bucket name.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The certificate of specified doamin.
        /// </summary>
        [Input("domainCertificate")]
        public Input<Inputs.BucketDomainCertificateAttachmentDomainCertificateGetArgs>? DomainCertificate { get; set; }

        public BucketDomainCertificateAttachmentState()
        {
        }
        public static new BucketDomainCertificateAttachmentState Empty => new BucketDomainCertificateAttachmentState();
    }
}
