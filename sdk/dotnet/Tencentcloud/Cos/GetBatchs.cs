// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Cos
{
    public static class GetBatchs
    {
        /// <summary>
        /// Use this data source to query the COS batch.
        /// 
        /// &gt; **NOTE:** The current resource does not support `cos_domain`.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cosBatchs = Tencentcloud.Cos.GetBatchs.Invoke(new()
        ///     {
        ///         Appid = "xxxxxx",
        ///         Uin = "xxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetBatchsResult> InvokeAsync(GetBatchsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBatchsResult>("tencentcloud:Cos/getBatchs:getBatchs", args ?? new GetBatchsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query the COS batch.
        /// 
        /// &gt; **NOTE:** The current resource does not support `cos_domain`.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Tencentcloud = Pulumi.Tencentcloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var cosBatchs = Tencentcloud.Cos.GetBatchs.Invoke(new()
        ///     {
        ///         Appid = "xxxxxx",
        ///         Uin = "xxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetBatchsResult> Invoke(GetBatchsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBatchsResult>("tencentcloud:Cos/getBatchs:getBatchs", args ?? new GetBatchsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBatchsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Appid.
        /// </summary>
        [Input("appid", required: true)]
        public int Appid { get; set; }

        /// <summary>
        /// The task status information you need to query. If you do not specify a task status, COS returns the status of all tasks that have been executed, including those that are in progress. If you specify a task status, COS returns the task in the specified state. Optional task states include: Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
        /// </summary>
        [Input("jobStatuses")]
        public string? JobStatuses { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        /// <summary>
        /// Uin.
        /// </summary>
        [Input("uin", required: true)]
        public string Uin { get; set; } = null!;

        public GetBatchsArgs()
        {
        }
        public static new GetBatchsArgs Empty => new GetBatchsArgs();
    }

    public sealed class GetBatchsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Appid.
        /// </summary>
        [Input("appid", required: true)]
        public Input<int> Appid { get; set; } = null!;

        /// <summary>
        /// The task status information you need to query. If you do not specify a task status, COS returns the status of all tasks that have been executed, including those that are in progress. If you specify a task status, COS returns the task in the specified state. Optional task states include: Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
        /// </summary>
        [Input("jobStatuses")]
        public Input<string>? JobStatuses { get; set; }

        /// <summary>
        /// Used to save results.
        /// </summary>
        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        /// <summary>
        /// Uin.
        /// </summary>
        [Input("uin", required: true)]
        public Input<string> Uin { get; set; } = null!;

        public GetBatchsInvokeArgs()
        {
        }
        public static new GetBatchsInvokeArgs Empty => new GetBatchsInvokeArgs();
    }


    [OutputType]
    public sealed class GetBatchsResult
    {
        public readonly int Appid;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? JobStatuses;
        /// <summary>
        /// Multiple batch processing task information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBatchsJobResult> Jobs;
        public readonly string? ResultOutputFile;
        public readonly string Uin;

        [OutputConstructor]
        private GetBatchsResult(
            int appid,

            string id,

            string? jobStatuses,

            ImmutableArray<Outputs.GetBatchsJobResult> jobs,

            string? resultOutputFile,

            string uin)
        {
            Appid = appid;
            Id = id;
            JobStatuses = jobStatuses;
            Jobs = jobs;
            ResultOutputFile = resultOutputFile;
            Uin = uin;
        }
    }
}
