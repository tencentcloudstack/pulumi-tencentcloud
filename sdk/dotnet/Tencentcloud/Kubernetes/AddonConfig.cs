// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Kubernetes
{
    /// <summary>
    /// Provide a resource to configure addon that kubernetes comes with.
    /// 
    /// ## Example Usage
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Kubernetes/addonConfig:AddonConfig")]
    public partial class AddonConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of addon.
        /// </summary>
        [Output("addonName")]
        public Output<string> AddonName { get; private set; } = null!;

        /// <summary>
        /// Version of addon.
        /// </summary>
        [Output("addonVersion")]
        public Output<string> AddonVersion { get; private set; } = null!;

        /// <summary>
        /// ID of cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Status of addon.
        /// </summary>
        [Output("phase")]
        public Output<string> Phase { get; private set; } = null!;

        /// <summary>
        /// Params of addon, base64 encoded json format.
        /// </summary>
        [Output("rawValues")]
        public Output<string> RawValues { get; private set; } = null!;

        /// <summary>
        /// Reason of addon failed.
        /// </summary>
        [Output("reason")]
        public Output<string> Reason { get; private set; } = null!;


        /// <summary>
        /// Create a AddonConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AddonConfig(string name, AddonConfigArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Kubernetes/addonConfig:AddonConfig", name, args ?? new AddonConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AddonConfig(string name, Input<string> id, AddonConfigState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Kubernetes/addonConfig:AddonConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AddonConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AddonConfig Get(string name, Input<string> id, AddonConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new AddonConfig(name, id, state, options);
        }
    }

    public sealed class AddonConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of addon.
        /// </summary>
        [Input("addonName", required: true)]
        public Input<string> AddonName { get; set; } = null!;

        /// <summary>
        /// Version of addon.
        /// </summary>
        [Input("addonVersion")]
        public Input<string>? AddonVersion { get; set; }

        /// <summary>
        /// ID of cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Params of addon, base64 encoded json format.
        /// </summary>
        [Input("rawValues")]
        public Input<string>? RawValues { get; set; }

        public AddonConfigArgs()
        {
        }
        public static new AddonConfigArgs Empty => new AddonConfigArgs();
    }

    public sealed class AddonConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of addon.
        /// </summary>
        [Input("addonName")]
        public Input<string>? AddonName { get; set; }

        /// <summary>
        /// Version of addon.
        /// </summary>
        [Input("addonVersion")]
        public Input<string>? AddonVersion { get; set; }

        /// <summary>
        /// ID of cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Status of addon.
        /// </summary>
        [Input("phase")]
        public Input<string>? Phase { get; set; }

        /// <summary>
        /// Params of addon, base64 encoded json format.
        /// </summary>
        [Input("rawValues")]
        public Input<string>? RawValues { get; set; }

        /// <summary>
        /// Reason of addon failed.
        /// </summary>
        [Input("reason")]
        public Input<string>? Reason { get; set; }

        public AddonConfigState()
        {
        }
        public static new AddonConfigState Empty => new AddonConfigState();
    }
}
