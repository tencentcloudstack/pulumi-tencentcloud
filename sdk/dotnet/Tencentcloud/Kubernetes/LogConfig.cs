// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Kubernetes
{
    /// <summary>
    /// Provides a resource to create a tke kubernetes_log_config
    /// 
    /// ## Example Usage
    /// 
    /// ### Create a cls log config
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Tencentcloud = Pulumi.Tencentcloud;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpcOne = Tencentcloud.Vpc.GetSubnets.Invoke(new()
    ///     {
    ///         IsDefault = true,
    ///         AvailabilityZone = "ap-guangzhou-3",
    ///     });
    /// 
    ///     var firstVpcId = vpcOne.Apply(getSubnetsResult =&gt; getSubnetsResult.InstanceLists[0]?.VpcId);
    /// 
    ///     var firstSubnetId = vpcOne.Apply(getSubnetsResult =&gt; getSubnetsResult.InstanceLists[0]?.SubnetId);
    /// 
    ///     var gz = Tencentcloud.Availability.GetZonesByProduct.Invoke(new()
    ///     {
    ///         Name = "ap-guangzhou-3",
    ///         Product = "ckafka",
    ///     });
    /// 
    ///     var zoneId = gz.Apply(getZonesByProductResult =&gt; getZonesByProductResult.Zones[0]?.Id);
    /// 
    ///     var config = new Config();
    ///     var exampleClusterCidr = config.Get("exampleClusterCidr") ?? "10.31.0.0/16";
    ///     var example = new Tencentcloud.Kubernetes.Cluster("example", new()
    ///     {
    ///         VpcId = firstVpcId,
    ///         ClusterCidr = exampleClusterCidr,
    ///         ClusterMaxPodNum = 32,
    ///         ClusterName = "tf_example_cluster",
    ///         ClusterDesc = "example for tke cluster",
    ///         ClusterMaxServiceNum = 32,
    ///         ClusterInternet = false,
    ///         ClusterVersion = "1.22.5",
    ///         ClusterOs = "tlinux2.2(tkernel3)x86_64",
    ///         ClusterDeployType = "MANAGED_CLUSTER",
    ///         LogAgent = new Tencentcloud.Kubernetes.Inputs.ClusterLogAgentArgs
    ///         {
    ///             Enabled = true,
    ///         },
    ///     });
    /// 
    ///     // without any worker config
    ///     var logset = new Tencentcloud.Cls.Logset("logset", new()
    ///     {
    ///         LogsetName = "tf-test-example",
    ///         Tags = 
    ///         {
    ///             { "createdBy", "terraform" },
    ///         },
    ///     });
    /// 
    ///     var kubernetesLogConfigCls = new Tencentcloud.Kubernetes.LogConfig("kubernetesLogConfigCls", new()
    ///     {
    ///         LogConfigName = "tf-test-cls",
    ///         ClusterId = example.Id,
    ///         LogsetId = logset.Id,
    ///         KubernetesLogConfig = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["apiVersion"] = "cls.cloud.tencent.com/v1",
    ///             ["kind"] = "LogConfig",
    ///             ["metadata"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["name"] = "tf-test-cls",
    ///             },
    ///             ["spec"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["clsDetail"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["extractRule"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["backtracking"] = "0",
    ///                         ["isGBK"] = "false",
    ///                         ["jsonStandard"] = "false",
    ///                         ["unMatchUpload"] = "false",
    ///                     },
    ///                     ["indexs"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["indexName"] = "namespace",
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["indexName"] = "pod_name",
    ///                         },
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["indexName"] = "container_name",
    ///                         },
    ///                     },
    ///                     ["logFormat"] = "default",
    ///                     ["logType"] = "minimalist_log",
    ///                     ["maxSplitPartitions"] = 0,
    ///                     ["region"] = "ap-guangzhou",
    ///                     ["storageType"] = "",
    ///                 },
    ///                 ["inputDetail"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["containerStdout"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["metadataContainer"] = new[]
    ///                         {
    ///                             "namespace",
    ///                             "pod_name",
    ///                             "pod_ip",
    ///                             "pod_uid",
    ///                             "container_id",
    ///                             "container_name",
    ///                             "image_name",
    ///                             "cluster_id",
    ///                         },
    ///                         ["nsLabelSelector"] = "",
    ///                         ["workloads"] = new[]
    ///                         {
    ///                             new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["kind"] = "deployment",
    ///                                 ["name"] = "testlog1",
    ///                                 ["namespace"] = "default",
    ///                             },
    ///                         },
    ///                     },
    ///                     ["type"] = "container_stdout",
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Create a ckafka log config
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleInstance = new Tencentcloud.Ckafka.Instance("exampleInstance", new()
    ///     {
    ///         InstanceName = "ckafka-instance-postpaid",
    ///         ZoneId = local.Zone_id,
    ///         VpcId = local.First_vpc_id,
    ///         SubnetId = local.First_subnet_id,
    ///         MsgRetentionTime = 1300,
    ///         KafkaVersion = "1.1.1",
    ///         DiskSize = 500,
    ///         BandWidth = 20,
    ///         DiskType = "CLOUD_BASIC",
    ///         Partition = 400,
    ///         ChargeType = "POSTPAID_BY_HOUR",
    ///         Config = new Tencentcloud.Ckafka.Inputs.InstanceConfigArgs
    ///         {
    ///             AutoCreateTopicEnable = true,
    ///             DefaultNumPartitions = 3,
    ///             DefaultReplicationFactor = 3,
    ///         },
    ///         DynamicRetentionConfig = new Tencentcloud.Ckafka.Inputs.InstanceDynamicRetentionConfigArgs
    ///         {
    ///             Enable = 1,
    ///         },
    ///     });
    /// 
    ///     var exampleTopic = new Tencentcloud.Ckafka.Topic("exampleTopic", new()
    ///     {
    ///         InstanceId = exampleInstance.Id,
    ///         TopicName = "tmp",
    ///         Note = "topic note",
    ///         ReplicaNum = 2,
    ///         PartitionNum = 1,
    ///         CleanUpPolicy = "delete",
    ///         SyncReplicaMinNum = 1,
    ///         UncleanLeaderElectionEnable = false,
    ///         Retention = 60000,
    ///     });
    /// 
    ///     var ckafkaTopic = exampleTopic.TopicName;
    /// 
    ///     var kubernetesLogConfigCkafka = new Tencentcloud.Kubernetes.LogConfig("kubernetesLogConfigCkafka", new()
    ///     {
    ///         LogConfigName = "tf-test-ckafka",
    ///         ClusterId = tencentcloud_kubernetes_cluster.Example.Id,
    ///         LogsetId = tencentcloud_cls_logset.Logset.Id,
    ///         KubernetesLogConfig = Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["apiVersion"] = "cls.cloud.tencent.com/v1",
    ///             ["kind"] = "LogConfig",
    ///             ["metadata"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["name"] = "tf-test-ckafka",
    ///             },
    ///             ["spec"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["inputDetail"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["containerStdout"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["allContainers"] = true,
    ///                         ["namespace"] = "default",
    ///                         ["nsLabelSelector"] = "",
    ///                     },
    ///                     ["type"] = "container_stdout",
    ///                 },
    ///                 ["kafkaDetail"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["brokers"] = "172.16.0.30:9092",
    ///                     ["extractRule"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                     },
    ///                     ["instanceId"] = "",
    ///                     ["kafkaType"] = "SelfBuildKafka",
    ///                     ["logType"] = "minimalist_log",
    ///                     ["messageKey"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["value"] = "",
    ///                         ["valueFrom"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["fieldRef"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["fieldPath"] = "",
    ///                             },
    ///                         },
    ///                     },
    ///                     ["metadata"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                     },
    ///                     ["timestampFormat"] = "double",
    ///                     ["timestampKey"] = "",
    ///                     ["topic"] = ckafkaTopic,
    ///                 },
    ///             },
    ///         })),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Kubernetes/logConfig:LogConfig")]
    public partial class LogConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The current cluster type supports tke and eks, default is tke.
        /// </summary>
        [Output("clusterType")]
        public Output<string?> ClusterType { get; private set; } = null!;

        /// <summary>
        /// JSON expression of log collection configuration.
        /// </summary>
        [Output("logConfig")]
        public Output<string> KubernetesLogConfig { get; private set; } = null!;

        /// <summary>
        /// Log config name.
        /// </summary>
        [Output("logConfigName")]
        public Output<string> LogConfigName { get; private set; } = null!;

        /// <summary>
        /// CLS log set ID.
        /// </summary>
        [Output("logsetId")]
        public Output<string?> LogsetId { get; private set; } = null!;


        /// <summary>
        /// Create a LogConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogConfig(string name, LogConfigArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Kubernetes/logConfig:LogConfig", name, args ?? new LogConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogConfig(string name, Input<string> id, LogConfigState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Kubernetes/logConfig:LogConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogConfig Get(string name, Input<string> id, LogConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new LogConfig(name, id, state, options);
        }
    }

    public sealed class LogConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The current cluster type supports tke and eks, default is tke.
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// JSON expression of log collection configuration.
        /// </summary>
        [Input("logConfig", required: true)]
        public Input<string> KubernetesLogConfig { get; set; } = null!;

        /// <summary>
        /// Log config name.
        /// </summary>
        [Input("logConfigName", required: true)]
        public Input<string> LogConfigName { get; set; } = null!;

        /// <summary>
        /// CLS log set ID.
        /// </summary>
        [Input("logsetId")]
        public Input<string>? LogsetId { get; set; }

        public LogConfigArgs()
        {
        }
        public static new LogConfigArgs Empty => new LogConfigArgs();
    }

    public sealed class LogConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The current cluster type supports tke and eks, default is tke.
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// JSON expression of log collection configuration.
        /// </summary>
        [Input("logConfig")]
        public Input<string>? KubernetesLogConfig { get; set; }

        /// <summary>
        /// Log config name.
        /// </summary>
        [Input("logConfigName")]
        public Input<string>? LogConfigName { get; set; }

        /// <summary>
        /// CLS log set ID.
        /// </summary>
        [Input("logsetId")]
        public Input<string>? LogsetId { get; set; }

        public LogConfigState()
        {
        }
        public static new LogConfigState Empty => new LogConfigState();
    }
}
