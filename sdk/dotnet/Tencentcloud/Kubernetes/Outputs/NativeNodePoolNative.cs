// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Kubernetes.Outputs
{

    [OutputType]
    public sealed class NativeNodePoolNative
    {
        /// <summary>
        /// Whether to enable self-healing ability.
        /// </summary>
        public readonly bool? AutoRepair;
        /// <summary>
        /// Native node pool data disk list.
        /// </summary>
        public readonly ImmutableArray<Outputs.NativeNodePoolNativeDataDisk> DataDisks;
        /// <summary>
        /// Whether to enable elastic scaling.
        /// </summary>
        public readonly bool? EnableAutoscaling;
        /// <summary>
        /// Fault self-healing rule name.
        /// </summary>
        public readonly string? HealthCheckPolicyName;
        /// <summary>
        /// Native node pool hostName pattern string.
        /// </summary>
        public readonly string? HostNamePattern;
        /// <summary>
        /// Billing configuration for yearly and monthly models.
        /// </summary>
        public readonly Outputs.NativeNodePoolNativeInstanceChargePrepaid? InstanceChargePrepaid;
        /// <summary>
        /// Node billing type. `PREPAID` is a yearly and monthly subscription, `POSTPAID_BY_HOUR` is a pay-as-you-go plan. The default is `POSTPAID_BY_HOUR`.
        /// </summary>
        public readonly string InstanceChargeType;
        /// <summary>
        /// Model list.
        /// </summary>
        public readonly ImmutableArray<string> InstanceTypes;
        /// <summary>
        /// Public network bandwidth settings.
        /// </summary>
        public readonly Outputs.NativeNodePoolNativeInternetAccessible? InternetAccessible;
        /// <summary>
        /// Node pool ssh public key id array.
        /// </summary>
        public readonly ImmutableArray<string> KeyIds;
        /// <summary>
        /// Kubelet custom parameters.
        /// </summary>
        public readonly ImmutableArray<string> KubeletArgs;
        /// <summary>
        /// Predefined scripts.
        /// </summary>
        public readonly Outputs.NativeNodePoolNativeLifecycle? Lifecycle;
        /// <summary>
        /// Node pool type. Example value: `NativeCVM` or `Native`. Default is `Native`.
        /// </summary>
        public readonly string? MachineType;
        /// <summary>
        /// Node pool management parameter settings.
        /// </summary>
        public readonly Outputs.NativeNodePoolNativeManagement? Management;
        /// <summary>
        /// Desired number of nodes.
        /// </summary>
        public readonly int? Replicas;
        /// <summary>
        /// Runtime root directory.
        /// </summary>
        public readonly string? RuntimeRootDir;
        /// <summary>
        /// Node pool scaling configuration.
        /// </summary>
        public readonly Outputs.NativeNodePoolNativeScaling? Scaling;
        /// <summary>
        /// Security group list.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// Subnet list.
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// System disk configuration.
        /// </summary>
        public readonly Outputs.NativeNodePoolNativeSystemDisk SystemDisk;

        [OutputConstructor]
        private NativeNodePoolNative(
            bool? autoRepair,

            ImmutableArray<Outputs.NativeNodePoolNativeDataDisk> dataDisks,

            bool? enableAutoscaling,

            string? healthCheckPolicyName,

            string? hostNamePattern,

            Outputs.NativeNodePoolNativeInstanceChargePrepaid? instanceChargePrepaid,

            string instanceChargeType,

            ImmutableArray<string> instanceTypes,

            Outputs.NativeNodePoolNativeInternetAccessible? internetAccessible,

            ImmutableArray<string> keyIds,

            ImmutableArray<string> kubeletArgs,

            Outputs.NativeNodePoolNativeLifecycle? lifecycle,

            string? machineType,

            Outputs.NativeNodePoolNativeManagement? management,

            int? replicas,

            string? runtimeRootDir,

            Outputs.NativeNodePoolNativeScaling? scaling,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<string> subnetIds,

            Outputs.NativeNodePoolNativeSystemDisk systemDisk)
        {
            AutoRepair = autoRepair;
            DataDisks = dataDisks;
            EnableAutoscaling = enableAutoscaling;
            HealthCheckPolicyName = healthCheckPolicyName;
            HostNamePattern = hostNamePattern;
            InstanceChargePrepaid = instanceChargePrepaid;
            InstanceChargeType = instanceChargeType;
            InstanceTypes = instanceTypes;
            InternetAccessible = internetAccessible;
            KeyIds = keyIds;
            KubeletArgs = kubeletArgs;
            Lifecycle = lifecycle;
            MachineType = machineType;
            Management = management;
            Replicas = replicas;
            RuntimeRootDir = runtimeRootDir;
            Scaling = scaling;
            SecurityGroupIds = securityGroupIds;
            SubnetIds = subnetIds;
            SystemDisk = systemDisk;
        }
    }
}
