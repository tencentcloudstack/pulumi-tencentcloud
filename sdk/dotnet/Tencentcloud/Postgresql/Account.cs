// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Postgresql
{
    /// <summary>
    /// Provides a resource to create a postgresql account
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var availabilityZone = config.Get("availabilityZone") ?? "ap-guangzhou-3";
    ///     // create vpc
    ///     var vpc = new Tencentcloud.Vpc.Instance("vpc", new()
    ///     {
    ///         CidrBlock = "10.0.0.0/16",
    ///     });
    /// 
    ///     // create vpc subnet
    ///     var subnet = new Tencentcloud.Subnet.Instance("subnet", new()
    ///     {
    ///         AvailabilityZone = availabilityZone,
    ///         VpcId = vpc.Id,
    ///         CidrBlock = "10.0.20.0/28",
    ///         IsMulticast = false,
    ///     });
    /// 
    ///     // create postgresql
    ///     var exampleInstance = new Tencentcloud.Postgresql.Instance("exampleInstance", new()
    ///     {
    ///         AvailabilityZone = availabilityZone,
    ///         ChargeType = "POSTPAID_BY_HOUR",
    ///         VpcId = vpc.Id,
    ///         SubnetId = subnet.Id,
    ///         DbMajorVersion = "10",
    ///         EngineVersion = "10.23",
    ///         RootUser = "root123",
    ///         RootPassword = "Root123$",
    ///         Charset = "UTF8",
    ///         ProjectId = 0,
    ///         Cpu = 1,
    ///         Memory = 2,
    ///         Storage = 10,
    ///         Tags = 
    ///         {
    ///             { "test", "tf" },
    ///         },
    ///     });
    /// 
    ///     // create account
    ///     var exampleAccount = new Tencentcloud.Postgresql.Account("exampleAccount", new()
    ///     {
    ///         DbInstanceId = exampleInstance.Id,
    ///         UserName = "tf_example",
    ///         Password = "Password@123",
    ///         Type = "normal",
    ///         Remark = "remark",
    ///         LockStatus = false,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// postgres account can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Postgresql/account:Account example postgres-3hk6b6tj#tf_example
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Postgresql/account:Account")]
    public partial class Account : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Instance ID in the format of postgres-4wdeb0zv.
        /// </summary>
        [Output("dbInstanceId")]
        public Output<string> DbInstanceId { get; private set; } = null!;

        /// <summary>
        /// whether lock account. true: locked; false: unlock.
        /// </summary>
        [Output("lockStatus")]
        public Output<bool> LockStatus { get; private set; } = null!;

        /// <summary>
        /// Password, which can contain 8-32 letters, digits, and symbols (()`~!@#$%^&amp;amp;amp;amp;*-+=_|{}[]:;&amp;amp;amp;#39;&amp;amp;amp;lt;&amp;amp;amp;gt;,.?/); can&amp;amp;amp;#39;t start with slash /.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Remarks correspond to user `UserName`, which can contain 0-60 letters, digits, symbols (-_), and Chinese characters.
        /// </summary>
        [Output("remark")]
        public Output<string?> Remark { get; private set; } = null!;

        /// <summary>
        /// The type of user. Valid values: 1. normal: regular user; 2. tencentDBSuper: user with the pg_tencentdb_superuser role.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Instance username, which can contain 1-16 letters, digits, and underscore (_); can&amp;amp;amp;#39;t be postgres; can&amp;amp;amp;#39;t start with numbers, pg_, and tencentdb_.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a Account resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Account(string name, AccountArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Postgresql/account:Account", name, args ?? new AccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Account(string name, Input<string> id, AccountState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Postgresql/account:Account", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Account resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Account Get(string name, Input<string> id, AccountState? state = null, CustomResourceOptions? options = null)
        {
            return new Account(name, id, state, options);
        }
    }

    public sealed class AccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance ID in the format of postgres-4wdeb0zv.
        /// </summary>
        [Input("dbInstanceId", required: true)]
        public Input<string> DbInstanceId { get; set; } = null!;

        /// <summary>
        /// whether lock account. true: locked; false: unlock.
        /// </summary>
        [Input("lockStatus")]
        public Input<bool>? LockStatus { get; set; }

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// Password, which can contain 8-32 letters, digits, and symbols (()`~!@#$%^&amp;amp;amp;amp;*-+=_|{}[]:;&amp;amp;amp;#39;&amp;amp;amp;lt;&amp;amp;amp;gt;,.?/); can&amp;amp;amp;#39;t start with slash /.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Remarks correspond to user `UserName`, which can contain 0-60 letters, digits, symbols (-_), and Chinese characters.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// The type of user. Valid values: 1. normal: regular user; 2. tencentDBSuper: user with the pg_tencentdb_superuser role.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Instance username, which can contain 1-16 letters, digits, and underscore (_); can&amp;amp;amp;#39;t be postgres; can&amp;amp;amp;#39;t start with numbers, pg_, and tencentdb_.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public AccountArgs()
        {
        }
        public static new AccountArgs Empty => new AccountArgs();
    }

    public sealed class AccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance ID in the format of postgres-4wdeb0zv.
        /// </summary>
        [Input("dbInstanceId")]
        public Input<string>? DbInstanceId { get; set; }

        /// <summary>
        /// whether lock account. true: locked; false: unlock.
        /// </summary>
        [Input("lockStatus")]
        public Input<bool>? LockStatus { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password, which can contain 8-32 letters, digits, and symbols (()`~!@#$%^&amp;amp;amp;amp;*-+=_|{}[]:;&amp;amp;amp;#39;&amp;amp;amp;lt;&amp;amp;amp;gt;,.?/); can&amp;amp;amp;#39;t start with slash /.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Remarks correspond to user `UserName`, which can contain 0-60 letters, digits, symbols (-_), and Chinese characters.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// The type of user. Valid values: 1. normal: regular user; 2. tencentDBSuper: user with the pg_tencentdb_superuser role.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Instance username, which can contain 1-16 letters, digits, and underscore (_); can&amp;amp;amp;#39;t be postgres; can&amp;amp;amp;#39;t start with numbers, pg_, and tencentdb_.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public AccountState()
        {
        }
        public static new AccountState Empty => new AccountState();
    }
}
