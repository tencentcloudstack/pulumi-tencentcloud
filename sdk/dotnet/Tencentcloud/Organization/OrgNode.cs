// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Organization
{
    /// <summary>
    /// Provides a resource to create a organization org_node
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var orgNode = new Tencentcloud.Organization.OrgNode("orgNode", new()
    ///     {
    ///         ParentNodeId = 2003721,
    ///         Remark = "for terraform test",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// organization org_node can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Organization/orgNode:OrgNode org_node orgNode_id
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Organization/orgNode:OrgNode")]
    public partial class OrgNode : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Node creation time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Node name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Parent node ID.
        /// </summary>
        [Output("parentNodeId")]
        public Output<int> ParentNodeId { get; private set; } = null!;

        /// <summary>
        /// Notes.
        /// </summary>
        [Output("remark")]
        public Output<string?> Remark { get; private set; } = null!;

        /// <summary>
        /// Tag description list.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Node update time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a OrgNode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrgNode(string name, OrgNodeArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Organization/orgNode:OrgNode", name, args ?? new OrgNodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrgNode(string name, Input<string> id, OrgNodeState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Organization/orgNode:OrgNode", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrgNode resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrgNode Get(string name, Input<string> id, OrgNodeState? state = null, CustomResourceOptions? options = null)
        {
            return new OrgNode(name, id, state, options);
        }
    }

    public sealed class OrgNodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Node name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parent node ID.
        /// </summary>
        [Input("parentNodeId", required: true)]
        public Input<int> ParentNodeId { get; set; } = null!;

        /// <summary>
        /// Notes.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tag description list.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public OrgNodeArgs()
        {
        }
        public static new OrgNodeArgs Empty => new OrgNodeArgs();
    }

    public sealed class OrgNodeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Node creation time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Node name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parent node ID.
        /// </summary>
        [Input("parentNodeId")]
        public Input<int>? ParentNodeId { get; set; }

        /// <summary>
        /// Notes.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tag description list.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Node update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public OrgNodeState()
        {
        }
        public static new OrgNodeState Empty => new OrgNodeState();
    }
}
