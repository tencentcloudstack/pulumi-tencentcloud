// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Identity
{
    /// <summary>
    /// Provides a resource to create a organization identity_center_user_sync_provisioning
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var identityCenterUserSyncProvisioning = new Tencentcloud.Identity.CenterUserSyncProvisioning("identityCenterUserSyncProvisioning", new()
    ///     {
    ///         DeletionStrategy = "Keep",
    ///         Description = "tf-test",
    ///         DuplicationStrategy = "TakeOver",
    ///         PrincipalId = "u-xxxxxx",
    ///         PrincipalType = "User",
    ///         TargetType = "MemberUin",
    ///         TargetUin = "xxxxxx",
    ///         ZoneId = "z-xxxxxx",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// organization identity_center_user_sync_provisioning can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Identity/centerUserSyncProvisioning:CenterUserSyncProvisioning identity_center_user_sync_provisioning ${zoneId}#${userProvisioningId}
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Identity/centerUserSyncProvisioning:CenterUserSyncProvisioning")]
    public partial class CenterUserSyncProvisioning : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Create time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
        /// </summary>
        [Output("deletionStrategy")]
        public Output<string?> DeletionStrategy { get; private set; } = null!;

        /// <summary>
        /// Description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
        /// </summary>
        [Output("duplicationStrategy")]
        public Output<string?> DuplicationStrategy { get; private set; } = null!;

        /// <summary>
        /// Identity ID for the CAM user synchronization. Valid values:
        /// When the PrincipalType value is Group, it is the CIC user group ID (g-********).
        /// When the PrincipalType value is User, it is the CIC user ID (u-********).
        /// </summary>
        [Output("principalId")]
        public Output<string?> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// The identity name of the CAM user synchronization. Value: When PrincipalType is Group, the value is the CIC user group name; When PrincipalType takes the value to User, the value is the CIC user name.
        /// </summary>
        [Output("principalName")]
        public Output<string> PrincipalName { get; private set; } = null!;

        /// <summary>
        /// Identity type for the CAM user synchronization. Valid values:
        /// 
        /// User: indicates that the identity for the CAM user synchronization is a CIC user.
        /// Group: indicates that the identity for the CAM user synchronization is a CIC user group.
        /// </summary>
        [Output("principalType")]
        public Output<string?> PrincipalType { get; private set; } = null!;

        /// <summary>
        /// Status of CAM user synchronization. Value:
        /// * Enabled: CAM user synchronization is enabled;
        /// * Disabled: CAM user synchronization is not enabled.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Group account The name of the target account..
        /// </summary>
        [Output("targetName")]
        public Output<string> TargetName { get; private set; } = null!;

        /// <summary>
        /// Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
        /// </summary>
        [Output("targetType")]
        public Output<string?> TargetType { get; private set; } = null!;

        /// <summary>
        /// UIN of the synchronized target account of the Tencent Cloud Organization.
        /// </summary>
        [Output("targetUin")]
        public Output<int?> TargetUin { get; private set; } = null!;

        /// <summary>
        /// Update time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// User provisioning id.
        /// </summary>
        [Output("userProvisioningId")]
        public Output<string> UserProvisioningId { get; private set; } = null!;

        /// <summary>
        /// Space ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a CenterUserSyncProvisioning resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CenterUserSyncProvisioning(string name, CenterUserSyncProvisioningArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Identity/centerUserSyncProvisioning:CenterUserSyncProvisioning", name, args ?? new CenterUserSyncProvisioningArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CenterUserSyncProvisioning(string name, Input<string> id, CenterUserSyncProvisioningState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Identity/centerUserSyncProvisioning:CenterUserSyncProvisioning", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CenterUserSyncProvisioning resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CenterUserSyncProvisioning Get(string name, Input<string> id, CenterUserSyncProvisioningState? state = null, CustomResourceOptions? options = null)
        {
            return new CenterUserSyncProvisioning(name, id, state, options);
        }
    }

    public sealed class CenterUserSyncProvisioningArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
        /// </summary>
        [Input("deletionStrategy")]
        public Input<string>? DeletionStrategy { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
        /// </summary>
        [Input("duplicationStrategy")]
        public Input<string>? DuplicationStrategy { get; set; }

        /// <summary>
        /// Identity ID for the CAM user synchronization. Valid values:
        /// When the PrincipalType value is Group, it is the CIC user group ID (g-********).
        /// When the PrincipalType value is User, it is the CIC user ID (u-********).
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// Identity type for the CAM user synchronization. Valid values:
        /// 
        /// User: indicates that the identity for the CAM user synchronization is a CIC user.
        /// Group: indicates that the identity for the CAM user synchronization is a CIC user group.
        /// </summary>
        [Input("principalType")]
        public Input<string>? PrincipalType { get; set; }

        /// <summary>
        /// Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
        /// </summary>
        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        /// <summary>
        /// UIN of the synchronized target account of the Tencent Cloud Organization.
        /// </summary>
        [Input("targetUin")]
        public Input<int>? TargetUin { get; set; }

        /// <summary>
        /// Space ID.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public CenterUserSyncProvisioningArgs()
        {
        }
        public static new CenterUserSyncProvisioningArgs Empty => new CenterUserSyncProvisioningArgs();
    }

    public sealed class CenterUserSyncProvisioningState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Create time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
        /// </summary>
        [Input("deletionStrategy")]
        public Input<string>? DeletionStrategy { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
        /// </summary>
        [Input("duplicationStrategy")]
        public Input<string>? DuplicationStrategy { get; set; }

        /// <summary>
        /// Identity ID for the CAM user synchronization. Valid values:
        /// When the PrincipalType value is Group, it is the CIC user group ID (g-********).
        /// When the PrincipalType value is User, it is the CIC user ID (u-********).
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The identity name of the CAM user synchronization. Value: When PrincipalType is Group, the value is the CIC user group name; When PrincipalType takes the value to User, the value is the CIC user name.
        /// </summary>
        [Input("principalName")]
        public Input<string>? PrincipalName { get; set; }

        /// <summary>
        /// Identity type for the CAM user synchronization. Valid values:
        /// 
        /// User: indicates that the identity for the CAM user synchronization is a CIC user.
        /// Group: indicates that the identity for the CAM user synchronization is a CIC user group.
        /// </summary>
        [Input("principalType")]
        public Input<string>? PrincipalType { get; set; }

        /// <summary>
        /// Status of CAM user synchronization. Value:
        /// * Enabled: CAM user synchronization is enabled;
        /// * Disabled: CAM user synchronization is not enabled.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Group account The name of the target account..
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        /// <summary>
        /// Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
        /// </summary>
        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        /// <summary>
        /// UIN of the synchronized target account of the Tencent Cloud Organization.
        /// </summary>
        [Input("targetUin")]
        public Input<int>? TargetUin { get; set; }

        /// <summary>
        /// Update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// User provisioning id.
        /// </summary>
        [Input("userProvisioningId")]
        public Input<string>? UserProvisioningId { get; set; }

        /// <summary>
        /// Space ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public CenterUserSyncProvisioningState()
        {
        }
        public static new CenterUserSyncProvisioningState Empty => new CenterUserSyncProvisioningState();
    }
}
