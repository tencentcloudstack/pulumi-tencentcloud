// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Identity
{
    /// <summary>
    /// Provides a resource to create a organization identity_center_external_saml_identity_provider
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Tencentcloud = TencentCloudIAC.PulumiPackage.Tencentcloud;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var identityCenterExternalSamlIdentityProvider = new Tencentcloud.Identity.CenterExternalSamlIdentityProvider("identityCenterExternalSamlIdentityProvider", new()
    ///     {
    ///         SsoStatus = "Enabled",
    ///         ZoneId = "z-xxxxxx",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// organization identity_center_external_saml_identity_provider can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import tencentcloud:Identity/centerExternalSamlIdentityProvider:CenterExternalSamlIdentityProvider identity_center_external_saml_identity_provider ${zoneId}
    /// ```
    /// </summary>
    [TencentcloudResourceType("tencentcloud:Identity/centerExternalSamlIdentityProvider:CenterExternalSamlIdentityProvider")]
    public partial class CenterExternalSamlIdentityProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Acs url.
        /// </summary>
        [Output("acsUrl")]
        public Output<string> AcsUrl { get; private set; } = null!;

        /// <summary>
        /// Certificate ids.
        /// </summary>
        [Output("certificateIds")]
        public Output<ImmutableArray<string>> CertificateIds { get; private set; } = null!;

        /// <summary>
        /// Create time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// IdP metadata document (Base64 encoded). Provided by an IdP that supports the SAML 2.0 protocol.
        /// </summary>
        [Output("encodedMetadataDocument")]
        public Output<string> EncodedMetadataDocument { get; private set; } = null!;

        /// <summary>
        /// IdP identifier.
        /// </summary>
        [Output("entityId")]
        public Output<string> EntityId { get; private set; } = null!;

        /// <summary>
        /// IdP login URL.
        /// </summary>
        [Output("loginUrl")]
        public Output<string> LoginUrl { get; private set; } = null!;

        /// <summary>
        /// SSO enabling status. Valid values: Enabled, Disabled (default).
        /// </summary>
        [Output("ssoStatus")]
        public Output<string> SsoStatus { get; private set; } = null!;

        /// <summary>
        /// Update time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// X509 certificate in PEM format. If this parameter is specified, all existing certificates will be replaced.
        /// </summary>
        [Output("x509Certificate")]
        public Output<string> X509Certificate { get; private set; } = null!;

        /// <summary>
        /// Space ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a CenterExternalSamlIdentityProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CenterExternalSamlIdentityProvider(string name, CenterExternalSamlIdentityProviderArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Identity/centerExternalSamlIdentityProvider:CenterExternalSamlIdentityProvider", name, args ?? new CenterExternalSamlIdentityProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CenterExternalSamlIdentityProvider(string name, Input<string> id, CenterExternalSamlIdentityProviderState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Identity/centerExternalSamlIdentityProvider:CenterExternalSamlIdentityProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tencentcloudstack",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CenterExternalSamlIdentityProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CenterExternalSamlIdentityProvider Get(string name, Input<string> id, CenterExternalSamlIdentityProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new CenterExternalSamlIdentityProvider(name, id, state, options);
        }
    }

    public sealed class CenterExternalSamlIdentityProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// IdP metadata document (Base64 encoded). Provided by an IdP that supports the SAML 2.0 protocol.
        /// </summary>
        [Input("encodedMetadataDocument")]
        public Input<string>? EncodedMetadataDocument { get; set; }

        /// <summary>
        /// IdP identifier.
        /// </summary>
        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        /// <summary>
        /// IdP login URL.
        /// </summary>
        [Input("loginUrl")]
        public Input<string>? LoginUrl { get; set; }

        /// <summary>
        /// SSO enabling status. Valid values: Enabled, Disabled (default).
        /// </summary>
        [Input("ssoStatus")]
        public Input<string>? SsoStatus { get; set; }

        /// <summary>
        /// X509 certificate in PEM format. If this parameter is specified, all existing certificates will be replaced.
        /// </summary>
        [Input("x509Certificate")]
        public Input<string>? X509Certificate { get; set; }

        /// <summary>
        /// Space ID.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public CenterExternalSamlIdentityProviderArgs()
        {
        }
        public static new CenterExternalSamlIdentityProviderArgs Empty => new CenterExternalSamlIdentityProviderArgs();
    }

    public sealed class CenterExternalSamlIdentityProviderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Acs url.
        /// </summary>
        [Input("acsUrl")]
        public Input<string>? AcsUrl { get; set; }

        [Input("certificateIds")]
        private InputList<string>? _certificateIds;

        /// <summary>
        /// Certificate ids.
        /// </summary>
        public InputList<string> CertificateIds
        {
            get => _certificateIds ?? (_certificateIds = new InputList<string>());
            set => _certificateIds = value;
        }

        /// <summary>
        /// Create time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// IdP metadata document (Base64 encoded). Provided by an IdP that supports the SAML 2.0 protocol.
        /// </summary>
        [Input("encodedMetadataDocument")]
        public Input<string>? EncodedMetadataDocument { get; set; }

        /// <summary>
        /// IdP identifier.
        /// </summary>
        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        /// <summary>
        /// IdP login URL.
        /// </summary>
        [Input("loginUrl")]
        public Input<string>? LoginUrl { get; set; }

        /// <summary>
        /// SSO enabling status. Valid values: Enabled, Disabled (default).
        /// </summary>
        [Input("ssoStatus")]
        public Input<string>? SsoStatus { get; set; }

        /// <summary>
        /// Update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// X509 certificate in PEM format. If this parameter is specified, all existing certificates will be replaced.
        /// </summary>
        [Input("x509Certificate")]
        public Input<string>? X509Certificate { get; set; }

        /// <summary>
        /// Space ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public CenterExternalSamlIdentityProviderState()
        {
        }
        public static new CenterExternalSamlIdentityProviderState Empty => new CenterExternalSamlIdentityProviderState();
    }
}
