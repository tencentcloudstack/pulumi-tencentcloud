// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace TencentCloudIAC.PulumiPackage.Tencentcloud.Monitor.Outputs
{

    [OutputType]
    public sealed class GetTmpInstancesInstanceSetResult
    {
        /// <summary>
        /// Alert rule limit.
        /// </summary>
        public readonly int AlertRuleLimit;
        /// <summary>
        /// Prometheus http api root address.
        /// </summary>
        public readonly string ApiRootPath;
        /// <summary>
        /// Token required for data writing.
        /// </summary>
        public readonly string AuthToken;
        /// <summary>
        /// Automatic renewal flag.
        /// - 0: No automatic renewal;
        /// - 1: Enable automatic renewal;
        /// - 2: Automatic renewal is prohibited;
        /// - -1: Invalid.
        /// </summary>
        public readonly int AutoRenewFlag;
        /// <summary>
        /// Charge status.
        /// - 1: Normal;
        /// - 2: Expires;
        /// - 3: Destruction;
        /// - 4: Allocation;
        /// - 5: Allocation failed.
        /// </summary>
        public readonly int ChargeStatus;
        /// <summary>
        /// Created_at.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Data retention time.
        /// </summary>
        public readonly int DataRetentionTime;
        /// <summary>
        /// Whether to enable grafana.
        /// - 0: closed;
        /// - 1: open.
        /// </summary>
        public readonly int EnableGrafana;
        /// <summary>
        /// Expires for purchased instances.
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// Binding grafana instance id.
        /// </summary>
        public readonly string GrafanaInstanceId;
        /// <summary>
        /// Grafana IP whitelist list.
        /// </summary>
        public readonly string GrafanaIpWhiteList;
        /// <summary>
        /// Grafana status.
        /// - 1: Creating;
        /// - 2: In operation;
        /// - 3: Abnormal;
        /// - 4: Rebooting;
        /// - 5: Destruction;
        /// - 6: Shutdown;
        /// - 7: Deleted.
        /// </summary>
        public readonly int GrafanaStatus;
        /// <summary>
        /// Grafana panel url.
        /// </summary>
        public readonly string GrafanaUrl;
        /// <summary>
        /// Authorization information for the instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTmpInstancesInstanceSetGrantResult> Grants;
        /// <summary>
        /// Filter according to instance charge type.
        /// - 2: Prepaid;
        /// - 3: Postpaid by hour.
        /// </summary>
        public readonly int InstanceChargeType;
        /// <summary>
        /// Instance id.
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// Filter according to instance name.
        /// </summary>
        public readonly string InstanceName;
        /// <summary>
        /// Filter according to instance status.
        /// - 1: Creating;
        /// - 2: In operation;
        /// - 3: Abnormal;
        /// - 4: Reconstruction;
        /// - 5: Destruction;
        /// - 6: Stopped taking;
        /// - 8: Suspension of service due to arrears;
        /// - 9: Service has been suspended due to arrears.
        /// </summary>
        public readonly int InstanceStatus;
        /// <summary>
        /// Filter according to ipv4 address.
        /// </summary>
        public readonly string Ipv4Address;
        /// <summary>
        /// Whether it is about to expire.
        /// - 0: No;
        /// - 1: Expiring soon.
        /// </summary>
        public readonly int IsNearExpire;
        /// <summary>
        /// Migration status.
        /// - 0: Not in migration;
        /// +- 1: Migrating, original instance;
        /// +- 2: Migrating, target instance.
        /// </summary>
        public readonly int MigrationType;
        /// <summary>
        /// Proxy address.
        /// </summary>
        public readonly string ProxyAddress;
        /// <summary>
        /// Pre-aggregation rule limitations.
        /// </summary>
        public readonly int RecordingRuleLimit;
        /// <summary>
        /// Region id.
        /// </summary>
        public readonly int RegionId;
        /// <summary>
        /// Address of prometheus remote write.
        /// </summary>
        public readonly string RemoteWrite;
        /// <summary>
        /// Specification name.
        /// </summary>
        public readonly string SpecName;
        /// <summary>
        /// Subnet id.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// List of tags associated with the instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTmpInstancesInstanceSetTagSpecificationResult> TagSpecifications;
        /// <summary>
        /// VPC id.
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// Zone.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetTmpInstancesInstanceSetResult(
            int alertRuleLimit,

            string apiRootPath,

            string authToken,

            int autoRenewFlag,

            int chargeStatus,

            string createdAt,

            int dataRetentionTime,

            int enableGrafana,

            string expireTime,

            string grafanaInstanceId,

            string grafanaIpWhiteList,

            int grafanaStatus,

            string grafanaUrl,

            ImmutableArray<Outputs.GetTmpInstancesInstanceSetGrantResult> grants,

            int instanceChargeType,

            string instanceId,

            string instanceName,

            int instanceStatus,

            string ipv4Address,

            int isNearExpire,

            int migrationType,

            string proxyAddress,

            int recordingRuleLimit,

            int regionId,

            string remoteWrite,

            string specName,

            string subnetId,

            ImmutableArray<Outputs.GetTmpInstancesInstanceSetTagSpecificationResult> tagSpecifications,

            string vpcId,

            string zone)
        {
            AlertRuleLimit = alertRuleLimit;
            ApiRootPath = apiRootPath;
            AuthToken = authToken;
            AutoRenewFlag = autoRenewFlag;
            ChargeStatus = chargeStatus;
            CreatedAt = createdAt;
            DataRetentionTime = dataRetentionTime;
            EnableGrafana = enableGrafana;
            ExpireTime = expireTime;
            GrafanaInstanceId = grafanaInstanceId;
            GrafanaIpWhiteList = grafanaIpWhiteList;
            GrafanaStatus = grafanaStatus;
            GrafanaUrl = grafanaUrl;
            Grants = grants;
            InstanceChargeType = instanceChargeType;
            InstanceId = instanceId;
            InstanceName = instanceName;
            InstanceStatus = instanceStatus;
            Ipv4Address = ipv4Address;
            IsNearExpire = isNearExpire;
            MigrationType = migrationType;
            ProxyAddress = proxyAddress;
            RecordingRuleLimit = recordingRuleLimit;
            RegionId = regionId;
            RemoteWrite = remoteWrite;
            SpecName = specName;
            SubnetId = subnetId;
            TagSpecifications = tagSpecifications;
            VpcId = vpcId;
            Zone = zone;
        }
    }
}
