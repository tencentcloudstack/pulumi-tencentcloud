// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provide a resource to attach an existing  cvm to kubernetes cluster.
//
// > **NOTE:** Use `unschedulable` to set whether the join node participates in the schedule. The `isSchedule` of 'worker_config' and 'worker_config_overrides' was deprecated.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Instance"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-3"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			clusterCidr := "172.16.0.0/16"
//			if param := cfg.Get("clusterCidr"); param != "" {
//				clusterCidr = param
//			}
//			defaultInstanceType := "S1.SMALL1"
//			if param := cfg.Get("defaultInstanceType"); param != "" {
//				defaultInstanceType = param
//			}
//			defaultInstance, err := Images.GetInstance(ctx, &images.GetInstanceArgs{
//				ImageTypes: []string{
//					"PUBLIC_IMAGE",
//				},
//				OsName: pulumi.StringRef("centos"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.GetSubnets(ctx, &vpc.GetSubnetsArgs{
//				IsDefault:        pulumi.BoolRef(true),
//				AvailabilityZone: pulumi.StringRef(availabilityZone),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Instance.GetTypes(ctx, &instance.GetTypesArgs{
//				Filters: []instance.GetTypesFilter{
//					{
//						Name: "instance-family",
//						Values: []string{
//							"SA2",
//						},
//					},
//				},
//				CpuCoreCount: pulumi.IntRef(8),
//				MemorySize:   pulumi.IntRef(16),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			foo, err := Instance.NewInstance(ctx, "foo", &Instance.InstanceArgs{
//				InstanceName:     pulumi.String("tf-auto-test-1-1"),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				ImageId:          pulumi.String(defaultInstance.Images[0].ImageId),
//				InstanceType:     pulumi.String(defaultInstanceType),
//				SystemDiskType:   pulumi.String("CLOUD_PREMIUM"),
//				SystemDiskSize:   pulumi.Int(50),
//			})
//			if err != nil {
//				return err
//			}
//			managedCluster, err := Kubernetes.NewCluster(ctx, "managedCluster", &Kubernetes.ClusterArgs{
//				VpcId:                pulumi.String(vpc.InstanceLists[0].VpcId),
//				ClusterCidr:          pulumi.String("10.1.0.0/16"),
//				ClusterMaxPodNum:     pulumi.Int(32),
//				ClusterName:          pulumi.String("keep"),
//				ClusterDesc:          pulumi.String("test cluster desc"),
//				ClusterMaxServiceNum: pulumi.Int(32),
//				WorkerConfigs: kubernetes.ClusterWorkerConfigArray{
//					&kubernetes.ClusterWorkerConfigArgs{
//						Count:                   pulumi.Int(1),
//						AvailabilityZone:        pulumi.String(availabilityZone),
//						InstanceType:            pulumi.String(defaultInstanceType),
//						SystemDiskType:          pulumi.String("CLOUD_SSD"),
//						SystemDiskSize:          pulumi.Int(60),
//						InternetChargeType:      pulumi.String("TRAFFIC_POSTPAID_BY_HOUR"),
//						InternetMaxBandwidthOut: pulumi.Int(100),
//						PublicIpAssigned:        pulumi.Bool(true),
//						SubnetId:                pulumi.String(vpc.InstanceLists[0].SubnetId),
//						DataDisks: kubernetes.ClusterWorkerConfigDataDiskArray{
//							&kubernetes.ClusterWorkerConfigDataDiskArgs{
//								DiskType: pulumi.String("CLOUD_PREMIUM"),
//								DiskSize: pulumi.Int(50),
//							},
//						},
//						EnhancedSecurityService: pulumi.Bool(false),
//						EnhancedMonitorService:  pulumi.Bool(false),
//						UserData:                pulumi.String("dGVzdA=="),
//						Password:                pulumi.String("ZZXXccvv1212"),
//					},
//				},
//				ClusterDeployType: pulumi.String("MANAGED_CLUSTER"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Kubernetes.NewClusterAttachment(ctx, "testAttach", &Kubernetes.ClusterAttachmentArgs{
//				ClusterId:  managedCluster.ID(),
//				InstanceId: foo.ID(),
//				Password:   pulumi.String("Lo4wbdit"),
//				Labels: pulumi.Map{
//					"test1": pulumi.Any("test1"),
//					"test2": pulumi.Any("test2"),
//				},
//				WorkerConfigOverrides: &kubernetes.ClusterAttachmentWorkerConfigOverridesArgs{
//					DesiredPodNum: pulumi.Int(8),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type ClusterAttachment struct {
	pulumi.CustomResourceState

	// ID of the cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
	Hostname pulumi.StringPtrOutput `pulumi:"hostname"`
	// ID of Node image.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// ID of the CVM instance, this cvm will reinstall the system.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
	KeyIds pulumi.StringPtrOutput `pulumi:"keyIds"`
	// Labels of tke attachment exits CVM.
	Labels pulumi.MapOutput `pulumi:"labels"`
	// Password to access, should be set if `keyIds` not set.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// A list of security group IDs after attach to cluster.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// State of the node.
	State pulumi.StringOutput `pulumi:"state"`
	// Sets whether the joining node participates in the schedule. Default is `0`, which means it participates in scheduling. Non-zero(eg: `1`) number means it does not participate in scheduling.
	Unschedulable pulumi.IntPtrOutput `pulumi:"unschedulable"`
	// Deploy the machine configuration information of the 'WORKER', commonly used to attach existing instances.
	WorkerConfig ClusterAttachmentWorkerConfigPtrOutput `pulumi:"workerConfig"`
	// Override variable worker_config, commonly used to attach existing instances.
	WorkerConfigOverrides ClusterAttachmentWorkerConfigOverridesPtrOutput `pulumi:"workerConfigOverrides"`
}

// NewClusterAttachment registers a new resource with the given unique name, arguments, and options.
func NewClusterAttachment(ctx *pulumi.Context,
	name string, args *ClusterAttachmentArgs, opts ...pulumi.ResourceOption) (*ClusterAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterAttachment
	err := ctx.RegisterResource("tencentcloud:Kubernetes/clusterAttachment:ClusterAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterAttachment gets an existing ClusterAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterAttachmentState, opts ...pulumi.ResourceOption) (*ClusterAttachment, error) {
	var resource ClusterAttachment
	err := ctx.ReadResource("tencentcloud:Kubernetes/clusterAttachment:ClusterAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterAttachment resources.
type clusterAttachmentState struct {
	// ID of the cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
	Hostname *string `pulumi:"hostname"`
	// ID of Node image.
	ImageId *string `pulumi:"imageId"`
	// ID of the CVM instance, this cvm will reinstall the system.
	InstanceId *string `pulumi:"instanceId"`
	// The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
	KeyIds *string `pulumi:"keyIds"`
	// Labels of tke attachment exits CVM.
	Labels map[string]interface{} `pulumi:"labels"`
	// Password to access, should be set if `keyIds` not set.
	Password *string `pulumi:"password"`
	// A list of security group IDs after attach to cluster.
	SecurityGroups []string `pulumi:"securityGroups"`
	// State of the node.
	State *string `pulumi:"state"`
	// Sets whether the joining node participates in the schedule. Default is `0`, which means it participates in scheduling. Non-zero(eg: `1`) number means it does not participate in scheduling.
	Unschedulable *int `pulumi:"unschedulable"`
	// Deploy the machine configuration information of the 'WORKER', commonly used to attach existing instances.
	WorkerConfig *ClusterAttachmentWorkerConfig `pulumi:"workerConfig"`
	// Override variable worker_config, commonly used to attach existing instances.
	WorkerConfigOverrides *ClusterAttachmentWorkerConfigOverrides `pulumi:"workerConfigOverrides"`
}

type ClusterAttachmentState struct {
	// ID of the cluster.
	ClusterId pulumi.StringPtrInput
	// The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
	Hostname pulumi.StringPtrInput
	// ID of Node image.
	ImageId pulumi.StringPtrInput
	// ID of the CVM instance, this cvm will reinstall the system.
	InstanceId pulumi.StringPtrInput
	// The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
	KeyIds pulumi.StringPtrInput
	// Labels of tke attachment exits CVM.
	Labels pulumi.MapInput
	// Password to access, should be set if `keyIds` not set.
	Password pulumi.StringPtrInput
	// A list of security group IDs after attach to cluster.
	SecurityGroups pulumi.StringArrayInput
	// State of the node.
	State pulumi.StringPtrInput
	// Sets whether the joining node participates in the schedule. Default is `0`, which means it participates in scheduling. Non-zero(eg: `1`) number means it does not participate in scheduling.
	Unschedulable pulumi.IntPtrInput
	// Deploy the machine configuration information of the 'WORKER', commonly used to attach existing instances.
	WorkerConfig ClusterAttachmentWorkerConfigPtrInput
	// Override variable worker_config, commonly used to attach existing instances.
	WorkerConfigOverrides ClusterAttachmentWorkerConfigOverridesPtrInput
}

func (ClusterAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAttachmentState)(nil)).Elem()
}

type clusterAttachmentArgs struct {
	// ID of the cluster.
	ClusterId string `pulumi:"clusterId"`
	// The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
	Hostname *string `pulumi:"hostname"`
	// ID of Node image.
	ImageId *string `pulumi:"imageId"`
	// ID of the CVM instance, this cvm will reinstall the system.
	InstanceId string `pulumi:"instanceId"`
	// The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
	KeyIds *string `pulumi:"keyIds"`
	// Labels of tke attachment exits CVM.
	Labels map[string]interface{} `pulumi:"labels"`
	// Password to access, should be set if `keyIds` not set.
	Password *string `pulumi:"password"`
	// A list of security group IDs after attach to cluster.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Sets whether the joining node participates in the schedule. Default is `0`, which means it participates in scheduling. Non-zero(eg: `1`) number means it does not participate in scheduling.
	Unschedulable *int `pulumi:"unschedulable"`
	// Deploy the machine configuration information of the 'WORKER', commonly used to attach existing instances.
	WorkerConfig *ClusterAttachmentWorkerConfig `pulumi:"workerConfig"`
	// Override variable worker_config, commonly used to attach existing instances.
	WorkerConfigOverrides *ClusterAttachmentWorkerConfigOverrides `pulumi:"workerConfigOverrides"`
}

// The set of arguments for constructing a ClusterAttachment resource.
type ClusterAttachmentArgs struct {
	// ID of the cluster.
	ClusterId pulumi.StringInput
	// The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
	Hostname pulumi.StringPtrInput
	// ID of Node image.
	ImageId pulumi.StringPtrInput
	// ID of the CVM instance, this cvm will reinstall the system.
	InstanceId pulumi.StringInput
	// The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
	KeyIds pulumi.StringPtrInput
	// Labels of tke attachment exits CVM.
	Labels pulumi.MapInput
	// Password to access, should be set if `keyIds` not set.
	Password pulumi.StringPtrInput
	// A list of security group IDs after attach to cluster.
	SecurityGroups pulumi.StringArrayInput
	// Sets whether the joining node participates in the schedule. Default is `0`, which means it participates in scheduling. Non-zero(eg: `1`) number means it does not participate in scheduling.
	Unschedulable pulumi.IntPtrInput
	// Deploy the machine configuration information of the 'WORKER', commonly used to attach existing instances.
	WorkerConfig ClusterAttachmentWorkerConfigPtrInput
	// Override variable worker_config, commonly used to attach existing instances.
	WorkerConfigOverrides ClusterAttachmentWorkerConfigOverridesPtrInput
}

func (ClusterAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAttachmentArgs)(nil)).Elem()
}

type ClusterAttachmentInput interface {
	pulumi.Input

	ToClusterAttachmentOutput() ClusterAttachmentOutput
	ToClusterAttachmentOutputWithContext(ctx context.Context) ClusterAttachmentOutput
}

func (*ClusterAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAttachment)(nil)).Elem()
}

func (i *ClusterAttachment) ToClusterAttachmentOutput() ClusterAttachmentOutput {
	return i.ToClusterAttachmentOutputWithContext(context.Background())
}

func (i *ClusterAttachment) ToClusterAttachmentOutputWithContext(ctx context.Context) ClusterAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAttachmentOutput)
}

// ClusterAttachmentArrayInput is an input type that accepts ClusterAttachmentArray and ClusterAttachmentArrayOutput values.
// You can construct a concrete instance of `ClusterAttachmentArrayInput` via:
//
//	ClusterAttachmentArray{ ClusterAttachmentArgs{...} }
type ClusterAttachmentArrayInput interface {
	pulumi.Input

	ToClusterAttachmentArrayOutput() ClusterAttachmentArrayOutput
	ToClusterAttachmentArrayOutputWithContext(context.Context) ClusterAttachmentArrayOutput
}

type ClusterAttachmentArray []ClusterAttachmentInput

func (ClusterAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterAttachment)(nil)).Elem()
}

func (i ClusterAttachmentArray) ToClusterAttachmentArrayOutput() ClusterAttachmentArrayOutput {
	return i.ToClusterAttachmentArrayOutputWithContext(context.Background())
}

func (i ClusterAttachmentArray) ToClusterAttachmentArrayOutputWithContext(ctx context.Context) ClusterAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAttachmentArrayOutput)
}

// ClusterAttachmentMapInput is an input type that accepts ClusterAttachmentMap and ClusterAttachmentMapOutput values.
// You can construct a concrete instance of `ClusterAttachmentMapInput` via:
//
//	ClusterAttachmentMap{ "key": ClusterAttachmentArgs{...} }
type ClusterAttachmentMapInput interface {
	pulumi.Input

	ToClusterAttachmentMapOutput() ClusterAttachmentMapOutput
	ToClusterAttachmentMapOutputWithContext(context.Context) ClusterAttachmentMapOutput
}

type ClusterAttachmentMap map[string]ClusterAttachmentInput

func (ClusterAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterAttachment)(nil)).Elem()
}

func (i ClusterAttachmentMap) ToClusterAttachmentMapOutput() ClusterAttachmentMapOutput {
	return i.ToClusterAttachmentMapOutputWithContext(context.Background())
}

func (i ClusterAttachmentMap) ToClusterAttachmentMapOutputWithContext(ctx context.Context) ClusterAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAttachmentMapOutput)
}

type ClusterAttachmentOutput struct{ *pulumi.OutputState }

func (ClusterAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAttachment)(nil)).Elem()
}

func (o ClusterAttachmentOutput) ToClusterAttachmentOutput() ClusterAttachmentOutput {
	return o
}

func (o ClusterAttachmentOutput) ToClusterAttachmentOutputWithContext(ctx context.Context) ClusterAttachmentOutput {
	return o
}

// ID of the cluster.
func (o ClusterAttachmentOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAttachment) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The host name of the attached instance. Dot (.) and dash (-) cannot be used as the first and last characters of HostName and cannot be used consecutively. Windows example: The length of the name character is [2, 15], letters (capitalization is not restricted), numbers and dashes (-) are allowed, dots (.) are not supported, and not all numbers are allowed. Examples of other types (Linux, etc.): The character length is [2, 60], and multiple dots are allowed. There is a segment between the dots. Each segment allows letters (with no limitation on capitalization), numbers and dashes (-).
func (o ClusterAttachmentOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterAttachment) pulumi.StringPtrOutput { return v.Hostname }).(pulumi.StringPtrOutput)
}

// ID of Node image.
func (o ClusterAttachmentOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAttachment) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// ID of the CVM instance, this cvm will reinstall the system.
func (o ClusterAttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAttachment) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The key pair to use for the instance, it looks like skey-16jig7tx, it should be set if `password` not set.
func (o ClusterAttachmentOutput) KeyIds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterAttachment) pulumi.StringPtrOutput { return v.KeyIds }).(pulumi.StringPtrOutput)
}

// Labels of tke attachment exits CVM.
func (o ClusterAttachmentOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v *ClusterAttachment) pulumi.MapOutput { return v.Labels }).(pulumi.MapOutput)
}

// Password to access, should be set if `keyIds` not set.
func (o ClusterAttachmentOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterAttachment) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of security group IDs after attach to cluster.
func (o ClusterAttachmentOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterAttachment) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// State of the node.
func (o ClusterAttachmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAttachment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Sets whether the joining node participates in the schedule. Default is `0`, which means it participates in scheduling. Non-zero(eg: `1`) number means it does not participate in scheduling.
func (o ClusterAttachmentOutput) Unschedulable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterAttachment) pulumi.IntPtrOutput { return v.Unschedulable }).(pulumi.IntPtrOutput)
}

// Deploy the machine configuration information of the 'WORKER', commonly used to attach existing instances.
func (o ClusterAttachmentOutput) WorkerConfig() ClusterAttachmentWorkerConfigPtrOutput {
	return o.ApplyT(func(v *ClusterAttachment) ClusterAttachmentWorkerConfigPtrOutput { return v.WorkerConfig }).(ClusterAttachmentWorkerConfigPtrOutput)
}

// Override variable worker_config, commonly used to attach existing instances.
func (o ClusterAttachmentOutput) WorkerConfigOverrides() ClusterAttachmentWorkerConfigOverridesPtrOutput {
	return o.ApplyT(func(v *ClusterAttachment) ClusterAttachmentWorkerConfigOverridesPtrOutput {
		return v.WorkerConfigOverrides
	}).(ClusterAttachmentWorkerConfigOverridesPtrOutput)
}

type ClusterAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ClusterAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterAttachment)(nil)).Elem()
}

func (o ClusterAttachmentArrayOutput) ToClusterAttachmentArrayOutput() ClusterAttachmentArrayOutput {
	return o
}

func (o ClusterAttachmentArrayOutput) ToClusterAttachmentArrayOutputWithContext(ctx context.Context) ClusterAttachmentArrayOutput {
	return o
}

func (o ClusterAttachmentArrayOutput) Index(i pulumi.IntInput) ClusterAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterAttachment {
		return vs[0].([]*ClusterAttachment)[vs[1].(int)]
	}).(ClusterAttachmentOutput)
}

type ClusterAttachmentMapOutput struct{ *pulumi.OutputState }

func (ClusterAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterAttachment)(nil)).Elem()
}

func (o ClusterAttachmentMapOutput) ToClusterAttachmentMapOutput() ClusterAttachmentMapOutput {
	return o
}

func (o ClusterAttachmentMapOutput) ToClusterAttachmentMapOutputWithContext(ctx context.Context) ClusterAttachmentMapOutput {
	return o
}

func (o ClusterAttachmentMapOutput) MapIndex(k pulumi.StringInput) ClusterAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterAttachment {
		return vs[0].(map[string]*ClusterAttachment)[vs[1].(string)]
	}).(ClusterAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAttachmentInput)(nil)).Elem(), &ClusterAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAttachmentArrayInput)(nil)).Elem(), ClusterAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAttachmentMapInput)(nil)).Elem(), ClusterAttachmentMap{})
	pulumi.RegisterOutputType(ClusterAttachmentOutput{})
	pulumi.RegisterOutputType(ClusterAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ClusterAttachmentMapOutput{})
}
