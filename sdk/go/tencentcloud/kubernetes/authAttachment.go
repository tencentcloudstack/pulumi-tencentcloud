// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to configure kubernetes cluster authentication info.
//
// > **NOTE:** Only available for cluster version >= 1.20
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-3"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			clusterCidr := "172.16.0.0/16"
//			if param := cfg.Get("clusterCidr"); param != "" {
//				clusterCidr = param
//			}
//			defaultInstanceType := "S1.SMALL1"
//			if param := cfg.Get("defaultInstanceType"); param != "" {
//				defaultInstanceType = param
//			}
//			_, err := Images.GetInstance(ctx, &images.GetInstanceArgs{
//				ImageTypes: []string{
//					"PUBLIC_IMAGE",
//				},
//				OsName: pulumi.StringRef("centos"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.GetSubnets(ctx, &vpc.GetSubnetsArgs{
//				IsDefault:        pulumi.BoolRef(true),
//				AvailabilityZone: pulumi.StringRef(availabilityZone),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			managedCluster, err := Kubernetes.NewCluster(ctx, "managedCluster", &Kubernetes.ClusterArgs{
//				VpcId:                pulumi.String(vpc.InstanceLists[0].VpcId),
//				ClusterCidr:          pulumi.String("10.31.0.0/16"),
//				ClusterMaxPodNum:     pulumi.Int(32),
//				ClusterName:          pulumi.String("keep"),
//				ClusterDesc:          pulumi.String("test cluster desc"),
//				ClusterVersion:       pulumi.String("1.20.6"),
//				ClusterMaxServiceNum: pulumi.Int(32),
//				WorkerConfigs: kubernetes.ClusterWorkerConfigArray{
//					&kubernetes.ClusterWorkerConfigArgs{
//						Count:                   pulumi.Int(1),
//						AvailabilityZone:        pulumi.String(availabilityZone),
//						InstanceType:            pulumi.String(defaultInstanceType),
//						SystemDiskType:          pulumi.String("CLOUD_SSD"),
//						SystemDiskSize:          pulumi.Int(60),
//						InternetChargeType:      pulumi.String("TRAFFIC_POSTPAID_BY_HOUR"),
//						InternetMaxBandwidthOut: pulumi.Int(100),
//						PublicIpAssigned:        pulumi.Bool(true),
//						SubnetId:                pulumi.String(vpc.InstanceLists[0].SubnetId),
//						DataDisks: kubernetes.ClusterWorkerConfigDataDiskArray{
//							&kubernetes.ClusterWorkerConfigDataDiskArgs{
//								DiskType: pulumi.String("CLOUD_PREMIUM"),
//								DiskSize: pulumi.Int(50),
//							},
//						},
//						EnhancedSecurityService: pulumi.Bool(false),
//						EnhancedMonitorService:  pulumi.Bool(false),
//						UserData:                pulumi.String("dGVzdA=="),
//						Password:                pulumi.String("ZZXXccvv1212"),
//					},
//				},
//				ClusterDeployType: pulumi.String("MANAGED_CLUSTER"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Kubernetes.NewAuthAttachment(ctx, "testAuthAttach", &Kubernetes.AuthAttachmentArgs{
//				ClusterId: managedCluster.ID(),
//				JwksUri: managedCluster.ID().ApplyT(func(id string) (string, error) {
//					return fmt.Sprintf("%v%v%v", "https://", id, ".ccs.tencent-cloud.com/openid/v1/jwks"), nil
//				}).(pulumi.StringOutput),
//				Issuer: managedCluster.ID().ApplyT(func(id string) (string, error) {
//					return fmt.Sprintf("%v%v%v", "https://", id, ".ccs.tencent-cloud.com"), nil
//				}).(pulumi.StringOutput),
//				AutoCreateDiscoveryAnonymousAuth: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Use the TKE default issuer and jwksUri
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-3"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			clusterCidr := "172.16.0.0/16"
//			if param := cfg.Get("clusterCidr"); param != "" {
//				clusterCidr = param
//			}
//			defaultInstanceType := "S1.SMALL1"
//			if param := cfg.Get("defaultInstanceType"); param != "" {
//				defaultInstanceType = param
//			}
//			_, err := Images.GetInstance(ctx, &images.GetInstanceArgs{
//				ImageTypes: []string{
//					"PUBLIC_IMAGE",
//				},
//				OsName: pulumi.StringRef("centos"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.GetSubnets(ctx, &vpc.GetSubnetsArgs{
//				IsDefault:        pulumi.BoolRef(true),
//				AvailabilityZone: pulumi.StringRef(availabilityZone),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			managedCluster, err := Kubernetes.NewCluster(ctx, "managedCluster", &Kubernetes.ClusterArgs{
//				VpcId:                pulumi.String(vpc.InstanceLists[0].VpcId),
//				ClusterCidr:          pulumi.String("10.31.0.0/16"),
//				ClusterMaxPodNum:     pulumi.Int(32),
//				ClusterName:          pulumi.String("keep"),
//				ClusterDesc:          pulumi.String("test cluster desc"),
//				ClusterVersion:       pulumi.String("1.20.6"),
//				ClusterMaxServiceNum: pulumi.Int(32),
//				WorkerConfigs: kubernetes.ClusterWorkerConfigArray{
//					&kubernetes.ClusterWorkerConfigArgs{
//						Count:                   pulumi.Int(1),
//						AvailabilityZone:        pulumi.String(availabilityZone),
//						InstanceType:            pulumi.String(defaultInstanceType),
//						SystemDiskType:          pulumi.String("CLOUD_SSD"),
//						SystemDiskSize:          pulumi.Int(60),
//						InternetChargeType:      pulumi.String("TRAFFIC_POSTPAID_BY_HOUR"),
//						InternetMaxBandwidthOut: pulumi.Int(100),
//						PublicIpAssigned:        pulumi.Bool(true),
//						SubnetId:                pulumi.String(vpc.InstanceLists[0].SubnetId),
//						DataDisks: kubernetes.ClusterWorkerConfigDataDiskArray{
//							&kubernetes.ClusterWorkerConfigDataDiskArgs{
//								DiskType: pulumi.String("CLOUD_PREMIUM"),
//								DiskSize: pulumi.Int(50),
//							},
//						},
//						EnhancedSecurityService: pulumi.Bool(false),
//						EnhancedMonitorService:  pulumi.Bool(false),
//						UserData:                pulumi.String("dGVzdA=="),
//						Password:                pulumi.String("ZZXXccvv1212"),
//					},
//				},
//				ClusterDeployType: pulumi.String("MANAGED_CLUSTER"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Kubernetes.NewAuthAttachment(ctx, "testUseTkeDefaultAuthAttach", &Kubernetes.AuthAttachmentArgs{
//				ClusterId:                        managedCluster.ID(),
//				AutoCreateDiscoveryAnonymousAuth: pulumi.Bool(true),
//				UseTkeDefault:                    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Use OIDC Config
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Kubernetes.NewAuthAttachment(ctx, "testAuthAttach", &Kubernetes.AuthAttachmentArgs{
//				ClusterId:                          pulumi.Any(tencentcloud_kubernetes_cluster.Managed_cluster.Id),
//				UseTkeDefault:                      pulumi.Bool(true),
//				AutoCreateDiscoveryAnonymousAuth:   pulumi.Bool(true),
//				AutoCreateOidcConfig:               pulumi.Bool(true),
//				AutoInstallPodIdentityWebhookAddon: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			oidcConfig, err := Cam.GetOidcConfig(ctx, &cam.GetOidcConfigArgs{
//				Name: tencentcloud_kubernetes_cluster.Managed_cluster.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("identityKey", oidcConfig.IdentityKey)
//			ctx.Export("identityUrl", oidcConfig.IdentityUrl)
//			return nil
//		})
//	}
//
// ```
type AuthAttachment struct {
	pulumi.CustomResourceState

	// Creating ClientId of the identity provider.
	AutoCreateClientIds pulumi.StringArrayOutput `pulumi:"autoCreateClientIds"`
	// If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
	AutoCreateDiscoveryAnonymousAuth pulumi.BoolPtrOutput `pulumi:"autoCreateDiscoveryAnonymousAuth"`
	// Creating an identity provider.
	AutoCreateOidcConfig pulumi.BoolOutput `pulumi:"autoCreateOidcConfig"`
	// Creating the PodIdentityWebhook component. if `autoCreateOidcConfig` is true, this field must set true.
	AutoInstallPodIdentityWebhookAddon pulumi.BoolOutput `pulumi:"autoInstallPodIdentityWebhookAddon"`
	// ID of clusters.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Specify service-account-issuer. If useTkeDefault is set to `true`, please do not set this field.
	Issuer pulumi.StringPtrOutput `pulumi:"issuer"`
	// Specify service-account-jwks-uri. If useTkeDefault is set to `true`, please do not set this field.
	JwksUri pulumi.StringPtrOutput `pulumi:"jwksUri"`
	// The default issuer of tke. If useTkeDefault is set to `true`, this parameter will be set to the default value.
	TkeDefaultIssuer pulumi.StringOutput `pulumi:"tkeDefaultIssuer"`
	// The default jwksUri of tke. If useTkeDefault is set to `true`, this parameter will be set to the default value.
	TkeDefaultJwksUri pulumi.StringOutput `pulumi:"tkeDefaultJwksUri"`
	// If set to `true`, the issuer and jwksUri will be generated automatically by tke, please do not set issuer and jwks_uri.
	UseTkeDefault pulumi.BoolPtrOutput `pulumi:"useTkeDefault"`
}

// NewAuthAttachment registers a new resource with the given unique name, arguments, and options.
func NewAuthAttachment(ctx *pulumi.Context,
	name string, args *AuthAttachmentArgs, opts ...pulumi.ResourceOption) (*AuthAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AuthAttachment
	err := ctx.RegisterResource("tencentcloud:Kubernetes/authAttachment:AuthAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthAttachment gets an existing AuthAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthAttachmentState, opts ...pulumi.ResourceOption) (*AuthAttachment, error) {
	var resource AuthAttachment
	err := ctx.ReadResource("tencentcloud:Kubernetes/authAttachment:AuthAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthAttachment resources.
type authAttachmentState struct {
	// Creating ClientId of the identity provider.
	AutoCreateClientIds []string `pulumi:"autoCreateClientIds"`
	// If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
	AutoCreateDiscoveryAnonymousAuth *bool `pulumi:"autoCreateDiscoveryAnonymousAuth"`
	// Creating an identity provider.
	AutoCreateOidcConfig *bool `pulumi:"autoCreateOidcConfig"`
	// Creating the PodIdentityWebhook component. if `autoCreateOidcConfig` is true, this field must set true.
	AutoInstallPodIdentityWebhookAddon *bool `pulumi:"autoInstallPodIdentityWebhookAddon"`
	// ID of clusters.
	ClusterId *string `pulumi:"clusterId"`
	// Specify service-account-issuer. If useTkeDefault is set to `true`, please do not set this field.
	Issuer *string `pulumi:"issuer"`
	// Specify service-account-jwks-uri. If useTkeDefault is set to `true`, please do not set this field.
	JwksUri *string `pulumi:"jwksUri"`
	// The default issuer of tke. If useTkeDefault is set to `true`, this parameter will be set to the default value.
	TkeDefaultIssuer *string `pulumi:"tkeDefaultIssuer"`
	// The default jwksUri of tke. If useTkeDefault is set to `true`, this parameter will be set to the default value.
	TkeDefaultJwksUri *string `pulumi:"tkeDefaultJwksUri"`
	// If set to `true`, the issuer and jwksUri will be generated automatically by tke, please do not set issuer and jwks_uri.
	UseTkeDefault *bool `pulumi:"useTkeDefault"`
}

type AuthAttachmentState struct {
	// Creating ClientId of the identity provider.
	AutoCreateClientIds pulumi.StringArrayInput
	// If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
	AutoCreateDiscoveryAnonymousAuth pulumi.BoolPtrInput
	// Creating an identity provider.
	AutoCreateOidcConfig pulumi.BoolPtrInput
	// Creating the PodIdentityWebhook component. if `autoCreateOidcConfig` is true, this field must set true.
	AutoInstallPodIdentityWebhookAddon pulumi.BoolPtrInput
	// ID of clusters.
	ClusterId pulumi.StringPtrInput
	// Specify service-account-issuer. If useTkeDefault is set to `true`, please do not set this field.
	Issuer pulumi.StringPtrInput
	// Specify service-account-jwks-uri. If useTkeDefault is set to `true`, please do not set this field.
	JwksUri pulumi.StringPtrInput
	// The default issuer of tke. If useTkeDefault is set to `true`, this parameter will be set to the default value.
	TkeDefaultIssuer pulumi.StringPtrInput
	// The default jwksUri of tke. If useTkeDefault is set to `true`, this parameter will be set to the default value.
	TkeDefaultJwksUri pulumi.StringPtrInput
	// If set to `true`, the issuer and jwksUri will be generated automatically by tke, please do not set issuer and jwks_uri.
	UseTkeDefault pulumi.BoolPtrInput
}

func (AuthAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*authAttachmentState)(nil)).Elem()
}

type authAttachmentArgs struct {
	// Creating ClientId of the identity provider.
	AutoCreateClientIds []string `pulumi:"autoCreateClientIds"`
	// If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
	AutoCreateDiscoveryAnonymousAuth *bool `pulumi:"autoCreateDiscoveryAnonymousAuth"`
	// Creating an identity provider.
	AutoCreateOidcConfig *bool `pulumi:"autoCreateOidcConfig"`
	// Creating the PodIdentityWebhook component. if `autoCreateOidcConfig` is true, this field must set true.
	AutoInstallPodIdentityWebhookAddon *bool `pulumi:"autoInstallPodIdentityWebhookAddon"`
	// ID of clusters.
	ClusterId string `pulumi:"clusterId"`
	// Specify service-account-issuer. If useTkeDefault is set to `true`, please do not set this field.
	Issuer *string `pulumi:"issuer"`
	// Specify service-account-jwks-uri. If useTkeDefault is set to `true`, please do not set this field.
	JwksUri *string `pulumi:"jwksUri"`
	// If set to `true`, the issuer and jwksUri will be generated automatically by tke, please do not set issuer and jwks_uri.
	UseTkeDefault *bool `pulumi:"useTkeDefault"`
}

// The set of arguments for constructing a AuthAttachment resource.
type AuthAttachmentArgs struct {
	// Creating ClientId of the identity provider.
	AutoCreateClientIds pulumi.StringArrayInput
	// If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
	AutoCreateDiscoveryAnonymousAuth pulumi.BoolPtrInput
	// Creating an identity provider.
	AutoCreateOidcConfig pulumi.BoolPtrInput
	// Creating the PodIdentityWebhook component. if `autoCreateOidcConfig` is true, this field must set true.
	AutoInstallPodIdentityWebhookAddon pulumi.BoolPtrInput
	// ID of clusters.
	ClusterId pulumi.StringInput
	// Specify service-account-issuer. If useTkeDefault is set to `true`, please do not set this field.
	Issuer pulumi.StringPtrInput
	// Specify service-account-jwks-uri. If useTkeDefault is set to `true`, please do not set this field.
	JwksUri pulumi.StringPtrInput
	// If set to `true`, the issuer and jwksUri will be generated automatically by tke, please do not set issuer and jwks_uri.
	UseTkeDefault pulumi.BoolPtrInput
}

func (AuthAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authAttachmentArgs)(nil)).Elem()
}

type AuthAttachmentInput interface {
	pulumi.Input

	ToAuthAttachmentOutput() AuthAttachmentOutput
	ToAuthAttachmentOutputWithContext(ctx context.Context) AuthAttachmentOutput
}

func (*AuthAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthAttachment)(nil)).Elem()
}

func (i *AuthAttachment) ToAuthAttachmentOutput() AuthAttachmentOutput {
	return i.ToAuthAttachmentOutputWithContext(context.Background())
}

func (i *AuthAttachment) ToAuthAttachmentOutputWithContext(ctx context.Context) AuthAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthAttachmentOutput)
}

// AuthAttachmentArrayInput is an input type that accepts AuthAttachmentArray and AuthAttachmentArrayOutput values.
// You can construct a concrete instance of `AuthAttachmentArrayInput` via:
//
//	AuthAttachmentArray{ AuthAttachmentArgs{...} }
type AuthAttachmentArrayInput interface {
	pulumi.Input

	ToAuthAttachmentArrayOutput() AuthAttachmentArrayOutput
	ToAuthAttachmentArrayOutputWithContext(context.Context) AuthAttachmentArrayOutput
}

type AuthAttachmentArray []AuthAttachmentInput

func (AuthAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthAttachment)(nil)).Elem()
}

func (i AuthAttachmentArray) ToAuthAttachmentArrayOutput() AuthAttachmentArrayOutput {
	return i.ToAuthAttachmentArrayOutputWithContext(context.Background())
}

func (i AuthAttachmentArray) ToAuthAttachmentArrayOutputWithContext(ctx context.Context) AuthAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthAttachmentArrayOutput)
}

// AuthAttachmentMapInput is an input type that accepts AuthAttachmentMap and AuthAttachmentMapOutput values.
// You can construct a concrete instance of `AuthAttachmentMapInput` via:
//
//	AuthAttachmentMap{ "key": AuthAttachmentArgs{...} }
type AuthAttachmentMapInput interface {
	pulumi.Input

	ToAuthAttachmentMapOutput() AuthAttachmentMapOutput
	ToAuthAttachmentMapOutputWithContext(context.Context) AuthAttachmentMapOutput
}

type AuthAttachmentMap map[string]AuthAttachmentInput

func (AuthAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthAttachment)(nil)).Elem()
}

func (i AuthAttachmentMap) ToAuthAttachmentMapOutput() AuthAttachmentMapOutput {
	return i.ToAuthAttachmentMapOutputWithContext(context.Background())
}

func (i AuthAttachmentMap) ToAuthAttachmentMapOutputWithContext(ctx context.Context) AuthAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthAttachmentMapOutput)
}

type AuthAttachmentOutput struct{ *pulumi.OutputState }

func (AuthAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthAttachment)(nil)).Elem()
}

func (o AuthAttachmentOutput) ToAuthAttachmentOutput() AuthAttachmentOutput {
	return o
}

func (o AuthAttachmentOutput) ToAuthAttachmentOutputWithContext(ctx context.Context) AuthAttachmentOutput {
	return o
}

// Creating ClientId of the identity provider.
func (o AuthAttachmentOutput) AutoCreateClientIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthAttachment) pulumi.StringArrayOutput { return v.AutoCreateClientIds }).(pulumi.StringArrayOutput)
}

// If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.
func (o AuthAttachmentOutput) AutoCreateDiscoveryAnonymousAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthAttachment) pulumi.BoolPtrOutput { return v.AutoCreateDiscoveryAnonymousAuth }).(pulumi.BoolPtrOutput)
}

// Creating an identity provider.
func (o AuthAttachmentOutput) AutoCreateOidcConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthAttachment) pulumi.BoolOutput { return v.AutoCreateOidcConfig }).(pulumi.BoolOutput)
}

// Creating the PodIdentityWebhook component. if `autoCreateOidcConfig` is true, this field must set true.
func (o AuthAttachmentOutput) AutoInstallPodIdentityWebhookAddon() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthAttachment) pulumi.BoolOutput { return v.AutoInstallPodIdentityWebhookAddon }).(pulumi.BoolOutput)
}

// ID of clusters.
func (o AuthAttachmentOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthAttachment) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Specify service-account-issuer. If useTkeDefault is set to `true`, please do not set this field.
func (o AuthAttachmentOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthAttachment) pulumi.StringPtrOutput { return v.Issuer }).(pulumi.StringPtrOutput)
}

// Specify service-account-jwks-uri. If useTkeDefault is set to `true`, please do not set this field.
func (o AuthAttachmentOutput) JwksUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthAttachment) pulumi.StringPtrOutput { return v.JwksUri }).(pulumi.StringPtrOutput)
}

// The default issuer of tke. If useTkeDefault is set to `true`, this parameter will be set to the default value.
func (o AuthAttachmentOutput) TkeDefaultIssuer() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthAttachment) pulumi.StringOutput { return v.TkeDefaultIssuer }).(pulumi.StringOutput)
}

// The default jwksUri of tke. If useTkeDefault is set to `true`, this parameter will be set to the default value.
func (o AuthAttachmentOutput) TkeDefaultJwksUri() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthAttachment) pulumi.StringOutput { return v.TkeDefaultJwksUri }).(pulumi.StringOutput)
}

// If set to `true`, the issuer and jwksUri will be generated automatically by tke, please do not set issuer and jwks_uri.
func (o AuthAttachmentOutput) UseTkeDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthAttachment) pulumi.BoolPtrOutput { return v.UseTkeDefault }).(pulumi.BoolPtrOutput)
}

type AuthAttachmentArrayOutput struct{ *pulumi.OutputState }

func (AuthAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthAttachment)(nil)).Elem()
}

func (o AuthAttachmentArrayOutput) ToAuthAttachmentArrayOutput() AuthAttachmentArrayOutput {
	return o
}

func (o AuthAttachmentArrayOutput) ToAuthAttachmentArrayOutputWithContext(ctx context.Context) AuthAttachmentArrayOutput {
	return o
}

func (o AuthAttachmentArrayOutput) Index(i pulumi.IntInput) AuthAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthAttachment {
		return vs[0].([]*AuthAttachment)[vs[1].(int)]
	}).(AuthAttachmentOutput)
}

type AuthAttachmentMapOutput struct{ *pulumi.OutputState }

func (AuthAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthAttachment)(nil)).Elem()
}

func (o AuthAttachmentMapOutput) ToAuthAttachmentMapOutput() AuthAttachmentMapOutput {
	return o
}

func (o AuthAttachmentMapOutput) ToAuthAttachmentMapOutputWithContext(ctx context.Context) AuthAttachmentMapOutput {
	return o
}

func (o AuthAttachmentMapOutput) MapIndex(k pulumi.StringInput) AuthAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthAttachment {
		return vs[0].(map[string]*AuthAttachment)[vs[1].(string)]
	}).(AuthAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthAttachmentInput)(nil)).Elem(), &AuthAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthAttachmentArrayInput)(nil)).Elem(), AuthAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthAttachmentMapInput)(nil)).Elem(), AuthAttachmentMap{})
	pulumi.RegisterOutputType(AuthAttachmentOutput{})
	pulumi.RegisterOutputType(AuthAttachmentArrayOutput{})
	pulumi.RegisterOutputType(AuthAttachmentMapOutput{})
}
