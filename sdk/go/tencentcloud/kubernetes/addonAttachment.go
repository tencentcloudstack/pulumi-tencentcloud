// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to configure kubernetes cluster app addons.
//
// > **NOTE**: Avoid to using legacy "1.0.0" version, leave the versions empty so we can fetch the latest while creating.
//
// ## Example Usage
// ### Install cbs addon by passing values
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Kubernetes.NewAddonAttachment(ctx, "addonCbs", &Kubernetes.AddonAttachmentArgs{
//				ClusterId: pulumi.String("cls-xxxxxxxx"),
//				Values: pulumi.StringArray{
//					pulumi.String("rootdir=/var/lib/kubelet"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Install tcr addon by passing values
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			mytcr, err := Tcr.NewInstance(ctx, "mytcr", &Tcr.InstanceArgs{
//				InstanceType: pulumi.String("basic"),
//				DeleteBucket: pulumi.Bool(true),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tcrId := mytcr.ID()
//			tcrName := mytcr.Name
//			myNs, err := Tcr.NewNamespace(ctx, "myNs", &Tcr.NamespaceArgs{
//				InstanceId:   pulumi.String(tcrId),
//				IsPublic:     pulumi.Bool(true),
//				IsAutoScan:   pulumi.Bool(true),
//				IsPreventVul: pulumi.Bool(true),
//				Severity:     pulumi.String("medium"),
//				CveWhitelistItems: tcr.NamespaceCveWhitelistItemArray{
//					&tcr.NamespaceCveWhitelistItemArgs{
//						CveId: pulumi.String("cve-xxxxx"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			nsName := myNs.Name
//			myToken, err := Tcr.NewToken(ctx, "myToken", &Tcr.TokenArgs{
//				InstanceId:  pulumi.String(tcrId),
//				Description: pulumi.String("tcr token"),
//			})
//			if err != nil {
//				return err
//			}
//			userName := myToken.UserName
//			token := myToken.Token
//			myIns := Tcr.GetInstancesOutput(ctx, tcr.GetInstancesOutputArgs{
//				InstanceId: pulumi.String(tcrId),
//			}, nil)
//			_, err = Kubernetes.NewAddonAttachment(ctx, "addonTcr", &Kubernetes.AddonAttachmentArgs{
//				ClusterId: pulumi.String("cls-xxxxxxxx"),
//				Version:   pulumi.String("1.0.0"),
//				Values: pulumi.StringArray{
//					tcrId.ApplyT(func(tcrId string) (string, error) {
//						return fmt.Sprintf("%v%v%v", "global.imagePullSecretsCrs[0].name=", tcrId, "-vpc"), nil
//					}).(pulumi.StringOutput),
//					nsName.ApplyT(func(nsName string) (string, error) {
//						return fmt.Sprintf("%v%v", "global.imagePullSecretsCrs[0].namespaces=", nsName), nil
//					}).(pulumi.StringOutput),
//					pulumi.String("global.imagePullSecretsCrs[0].serviceAccounts=*"),
//					pulumi.String("global.imagePullSecretsCrs[0].type=docker"),
//					userName.ApplyT(func(userName string) (string, error) {
//						return fmt.Sprintf("%v%v", "global.imagePullSecretsCrs[0].dockerUsername=", userName), nil
//					}).(pulumi.StringOutput),
//					token.ApplyT(func(token string) (string, error) {
//						return fmt.Sprintf("%v%v", "global.imagePullSecretsCrs[0].dockerPassword=", token), nil
//					}).(pulumi.StringOutput),
//					tcrName.ApplyT(func(tcrName string) (string, error) {
//						return fmt.Sprintf("%v%v%v", "global.imagePullSecretsCrs[0].dockerServer=", tcrName, "-vpc.tencentcloudcr.com"), nil
//					}).(pulumi.StringOutput),
//					tcrId.ApplyT(func(tcrId string) (string, error) {
//						return fmt.Sprintf("%v%v%v", "global.imagePullSecretsCrs[1].name=", tcrId, "-public"), nil
//					}).(pulumi.StringOutput),
//					nsName.ApplyT(func(nsName string) (string, error) {
//						return fmt.Sprintf("%v%v", "global.imagePullSecretsCrs[1].namespaces=", nsName), nil
//					}).(pulumi.StringOutput),
//					pulumi.String("global.imagePullSecretsCrs[1].serviceAccounts=*"),
//					pulumi.String("global.imagePullSecretsCrs[1].type=docker"),
//					userName.ApplyT(func(userName string) (string, error) {
//						return fmt.Sprintf("%v%v", "global.imagePullSecretsCrs[1].dockerUsername=", userName), nil
//					}).(pulumi.StringOutput),
//					token.ApplyT(func(token string) (string, error) {
//						return fmt.Sprintf("%v%v", "global.imagePullSecretsCrs[1].dockerPassword=", token), nil
//					}).(pulumi.StringOutput),
//					tcrName.ApplyT(func(tcrName string) (string, error) {
//						return fmt.Sprintf("%v%v%v", "global.imagePullSecretsCrs[1].dockerServer=", tcrName, ".tencentcloudcr.com"), nil
//					}).(pulumi.StringOutput),
//					pulumi.String("global.cluster.region=gz"),
//					pulumi.String("global.cluster.longregion=ap-guangzhou"),
//					tcrName.ApplyT(func(tcrName string) (string, error) {
//						return fmt.Sprintf("%v%v%v", "global.hosts[0].domain=", tcrName, "-vpc.tencentcloudcr.com"), nil
//					}).(pulumi.StringOutput),
//					endPoint.ApplyT(func(endPoint string) (string, error) {
//						return fmt.Sprintf("%v%v", "global.hosts[0].ip=", endPoint), nil
//					}).(pulumi.StringOutput),
//					pulumi.String("global.hosts[0].disabled=false"),
//					tcrName.ApplyT(func(tcrName string) (string, error) {
//						return fmt.Sprintf("%v%v%v", "global.hosts[1].domain=", tcrName, ".tencentcloudcr.com"), nil
//					}).(pulumi.StringOutput),
//					endPoint.ApplyT(func(endPoint string) (string, error) {
//						return fmt.Sprintf("%v%v", "global.hosts[1].ip=", endPoint), nil
//					}).(pulumi.StringOutput),
//					pulumi.String("global.hosts[1].disabled=false"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Install new addon by passing spec json to reqBody directly
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Kubernetes.NewAddonAttachment(ctx, "addonCbs", &Kubernetes.AddonAttachmentArgs{
//				ClusterId:   pulumi.String("cls-xxxxxxxx"),
//				RequestBody: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "  {\n", "    \"spec\":{\n", "        \"chart\":{\n", "            \"chartName\":\"cbs\",\n", "            \"chartVersion\":\"1.0.5\"\n", "        },\n", "        \"values\":{\n", "            \"rawValuesType\":\"yaml\",\n", "            \"values\":[\n", "              \"rootdir=/var/lib/kubelet\"\n", "            ]\n", "        }\n", "    }\n", "  }\n", "\n")),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Addon can be imported by using cluster_id#addon_name
//
// ```sh
//
//	$ pulumi import tencentcloud:Kubernetes/addonAttachment:AddonAttachment addon_cos cls-xxxxxxxx#cos
//
// ```
type AddonAttachment struct {
	pulumi.CustomResourceState

	// ID of cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Name of addon.
	Name pulumi.StringOutput `pulumi:"name"`
	// Raw Values. Conflict with `requestBody`. Required with `rawValuesType`.
	RawValues pulumi.StringOutput `pulumi:"rawValues"`
	// The type of raw Values. Required with `rawValues`.
	RawValuesType pulumi.StringOutput `pulumi:"rawValuesType"`
	// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
	RequestBody pulumi.StringPtrOutput `pulumi:"requestBody"`
	// Addon response body.
	ResponseBody pulumi.StringOutput `pulumi:"responseBody"`
	// Addon current status.
	Status pulumi.MapOutput `pulumi:"status"`
	// Values the addon passthroughs. Conflict with `requestBody`.
	Values pulumi.StringArrayOutput `pulumi:"values"`
	// Addon version, default latest version. Conflict with `requestBody`.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewAddonAttachment registers a new resource with the given unique name, arguments, and options.
func NewAddonAttachment(ctx *pulumi.Context,
	name string, args *AddonAttachmentArgs, opts ...pulumi.ResourceOption) (*AddonAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AddonAttachment
	err := ctx.RegisterResource("tencentcloud:Kubernetes/addonAttachment:AddonAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAddonAttachment gets an existing AddonAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAddonAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AddonAttachmentState, opts ...pulumi.ResourceOption) (*AddonAttachment, error) {
	var resource AddonAttachment
	err := ctx.ReadResource("tencentcloud:Kubernetes/addonAttachment:AddonAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AddonAttachment resources.
type addonAttachmentState struct {
	// ID of cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Name of addon.
	Name *string `pulumi:"name"`
	// Raw Values. Conflict with `requestBody`. Required with `rawValuesType`.
	RawValues *string `pulumi:"rawValues"`
	// The type of raw Values. Required with `rawValues`.
	RawValuesType *string `pulumi:"rawValuesType"`
	// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
	RequestBody *string `pulumi:"requestBody"`
	// Addon response body.
	ResponseBody *string `pulumi:"responseBody"`
	// Addon current status.
	Status map[string]interface{} `pulumi:"status"`
	// Values the addon passthroughs. Conflict with `requestBody`.
	Values []string `pulumi:"values"`
	// Addon version, default latest version. Conflict with `requestBody`.
	Version *string `pulumi:"version"`
}

type AddonAttachmentState struct {
	// ID of cluster.
	ClusterId pulumi.StringPtrInput
	// Name of addon.
	Name pulumi.StringPtrInput
	// Raw Values. Conflict with `requestBody`. Required with `rawValuesType`.
	RawValues pulumi.StringPtrInput
	// The type of raw Values. Required with `rawValues`.
	RawValuesType pulumi.StringPtrInput
	// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
	RequestBody pulumi.StringPtrInput
	// Addon response body.
	ResponseBody pulumi.StringPtrInput
	// Addon current status.
	Status pulumi.MapInput
	// Values the addon passthroughs. Conflict with `requestBody`.
	Values pulumi.StringArrayInput
	// Addon version, default latest version. Conflict with `requestBody`.
	Version pulumi.StringPtrInput
}

func (AddonAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*addonAttachmentState)(nil)).Elem()
}

type addonAttachmentArgs struct {
	// ID of cluster.
	ClusterId string `pulumi:"clusterId"`
	// Name of addon.
	Name *string `pulumi:"name"`
	// Raw Values. Conflict with `requestBody`. Required with `rawValuesType`.
	RawValues *string `pulumi:"rawValues"`
	// The type of raw Values. Required with `rawValues`.
	RawValuesType *string `pulumi:"rawValuesType"`
	// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
	RequestBody *string `pulumi:"requestBody"`
	// Values the addon passthroughs. Conflict with `requestBody`.
	Values []string `pulumi:"values"`
	// Addon version, default latest version. Conflict with `requestBody`.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a AddonAttachment resource.
type AddonAttachmentArgs struct {
	// ID of cluster.
	ClusterId pulumi.StringInput
	// Name of addon.
	Name pulumi.StringPtrInput
	// Raw Values. Conflict with `requestBody`. Required with `rawValuesType`.
	RawValues pulumi.StringPtrInput
	// The type of raw Values. Required with `rawValues`.
	RawValuesType pulumi.StringPtrInput
	// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
	RequestBody pulumi.StringPtrInput
	// Values the addon passthroughs. Conflict with `requestBody`.
	Values pulumi.StringArrayInput
	// Addon version, default latest version. Conflict with `requestBody`.
	Version pulumi.StringPtrInput
}

func (AddonAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*addonAttachmentArgs)(nil)).Elem()
}

type AddonAttachmentInput interface {
	pulumi.Input

	ToAddonAttachmentOutput() AddonAttachmentOutput
	ToAddonAttachmentOutputWithContext(ctx context.Context) AddonAttachmentOutput
}

func (*AddonAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonAttachment)(nil)).Elem()
}

func (i *AddonAttachment) ToAddonAttachmentOutput() AddonAttachmentOutput {
	return i.ToAddonAttachmentOutputWithContext(context.Background())
}

func (i *AddonAttachment) ToAddonAttachmentOutputWithContext(ctx context.Context) AddonAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonAttachmentOutput)
}

// AddonAttachmentArrayInput is an input type that accepts AddonAttachmentArray and AddonAttachmentArrayOutput values.
// You can construct a concrete instance of `AddonAttachmentArrayInput` via:
//
//	AddonAttachmentArray{ AddonAttachmentArgs{...} }
type AddonAttachmentArrayInput interface {
	pulumi.Input

	ToAddonAttachmentArrayOutput() AddonAttachmentArrayOutput
	ToAddonAttachmentArrayOutputWithContext(context.Context) AddonAttachmentArrayOutput
}

type AddonAttachmentArray []AddonAttachmentInput

func (AddonAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AddonAttachment)(nil)).Elem()
}

func (i AddonAttachmentArray) ToAddonAttachmentArrayOutput() AddonAttachmentArrayOutput {
	return i.ToAddonAttachmentArrayOutputWithContext(context.Background())
}

func (i AddonAttachmentArray) ToAddonAttachmentArrayOutputWithContext(ctx context.Context) AddonAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonAttachmentArrayOutput)
}

// AddonAttachmentMapInput is an input type that accepts AddonAttachmentMap and AddonAttachmentMapOutput values.
// You can construct a concrete instance of `AddonAttachmentMapInput` via:
//
//	AddonAttachmentMap{ "key": AddonAttachmentArgs{...} }
type AddonAttachmentMapInput interface {
	pulumi.Input

	ToAddonAttachmentMapOutput() AddonAttachmentMapOutput
	ToAddonAttachmentMapOutputWithContext(context.Context) AddonAttachmentMapOutput
}

type AddonAttachmentMap map[string]AddonAttachmentInput

func (AddonAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AddonAttachment)(nil)).Elem()
}

func (i AddonAttachmentMap) ToAddonAttachmentMapOutput() AddonAttachmentMapOutput {
	return i.ToAddonAttachmentMapOutputWithContext(context.Background())
}

func (i AddonAttachmentMap) ToAddonAttachmentMapOutputWithContext(ctx context.Context) AddonAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonAttachmentMapOutput)
}

type AddonAttachmentOutput struct{ *pulumi.OutputState }

func (AddonAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonAttachment)(nil)).Elem()
}

func (o AddonAttachmentOutput) ToAddonAttachmentOutput() AddonAttachmentOutput {
	return o
}

func (o AddonAttachmentOutput) ToAddonAttachmentOutputWithContext(ctx context.Context) AddonAttachmentOutput {
	return o
}

// ID of cluster.
func (o AddonAttachmentOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Name of addon.
func (o AddonAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Raw Values. Conflict with `requestBody`. Required with `rawValuesType`.
func (o AddonAttachmentOutput) RawValues() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringOutput { return v.RawValues }).(pulumi.StringOutput)
}

// The type of raw Values. Required with `rawValues`.
func (o AddonAttachmentOutput) RawValuesType() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringOutput { return v.RawValuesType }).(pulumi.StringOutput)
}

// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
func (o AddonAttachmentOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringPtrOutput { return v.RequestBody }).(pulumi.StringPtrOutput)
}

// Addon response body.
func (o AddonAttachmentOutput) ResponseBody() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringOutput { return v.ResponseBody }).(pulumi.StringOutput)
}

// Addon current status.
func (o AddonAttachmentOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

// Values the addon passthroughs. Conflict with `requestBody`.
func (o AddonAttachmentOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringArrayOutput { return v.Values }).(pulumi.StringArrayOutput)
}

// Addon version, default latest version. Conflict with `requestBody`.
func (o AddonAttachmentOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type AddonAttachmentArrayOutput struct{ *pulumi.OutputState }

func (AddonAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AddonAttachment)(nil)).Elem()
}

func (o AddonAttachmentArrayOutput) ToAddonAttachmentArrayOutput() AddonAttachmentArrayOutput {
	return o
}

func (o AddonAttachmentArrayOutput) ToAddonAttachmentArrayOutputWithContext(ctx context.Context) AddonAttachmentArrayOutput {
	return o
}

func (o AddonAttachmentArrayOutput) Index(i pulumi.IntInput) AddonAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AddonAttachment {
		return vs[0].([]*AddonAttachment)[vs[1].(int)]
	}).(AddonAttachmentOutput)
}

type AddonAttachmentMapOutput struct{ *pulumi.OutputState }

func (AddonAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AddonAttachment)(nil)).Elem()
}

func (o AddonAttachmentMapOutput) ToAddonAttachmentMapOutput() AddonAttachmentMapOutput {
	return o
}

func (o AddonAttachmentMapOutput) ToAddonAttachmentMapOutputWithContext(ctx context.Context) AddonAttachmentMapOutput {
	return o
}

func (o AddonAttachmentMapOutput) MapIndex(k pulumi.StringInput) AddonAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AddonAttachment {
		return vs[0].(map[string]*AddonAttachment)[vs[1].(string)]
	}).(AddonAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddonAttachmentInput)(nil)).Elem(), &AddonAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonAttachmentArrayInput)(nil)).Elem(), AddonAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonAttachmentMapInput)(nil)).Elem(), AddonAttachmentMap{})
	pulumi.RegisterOutputType(AddonAttachmentOutput{})
	pulumi.RegisterOutputType(AddonAttachmentArrayOutput{})
	pulumi.RegisterOutputType(AddonAttachmentMapOutput{})
}
