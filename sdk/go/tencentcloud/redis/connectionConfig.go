// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a redis connectionConfig
//
// ## Example Usage
// ### Modify the maximum number of connections and maximum network throughput of an instance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zone, err := Redis.GetZoneConfig(ctx, &redis.GetZoneConfigArgs{
//				TypeId: pulumi.IntRef(7),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(zone.Lists[0].Zone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Redis.NewInstance(ctx, "foo", &Redis.InstanceArgs{
//				AvailabilityZone: pulumi.String(zone.Lists[0].Zone),
//				TypeId:           pulumi.Int(zone.Lists[0].TypeId),
//				Password:         pulumi.String("test12345789"),
//				MemSize:          pulumi.Int(8192),
//				RedisShardNum:    pulumi.Int(zone.Lists[0].RedisShardNums[0]),
//				RedisReplicasNum: pulumi.Int(zone.Lists[0].RedisReplicasNums[0]),
//				Port:             pulumi.Int(6379),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Redis.NewConnectionConfig(ctx, "connectionConfig", &Redis.ConnectionConfigArgs{
//				InstanceId:   pulumi.String("crs-fhm9fnv1"),
//				ClientLimit:  pulumi.Int(20000),
//				AddBandwidth: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Redis connectionConfig can be imported, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Redis/connectionConfig:ConnectionConfig connection_config instance_id
//
// ```
type ConnectionConfig struct {
	pulumi.CustomResourceState

	// Refers to the additional bandwidth of the instance. When the standard bandwidth does not meet the demand, the user can increase the bandwidth by himself. When the read-only copy is enabled, the total bandwidth of the instance = additional bandwidth * number of fragments + standard bandwidth * number of fragments * Max ([number of read-only replicas, 1] ), the number of shards in the standard architecture = 1, and when read-only replicas are not enabled, the total bandwidth of the instance = additional bandwidth * number of shards + standard bandwidth * number of shards, and the number of shards in the standard architecture = 1.
	AddBandwidth pulumi.IntOutput `pulumi:"addBandwidth"`
	// standard bandwidth. Refers to the bandwidth allocated by the system to each node when an instance is purchased.
	BaseBandwidth pulumi.IntOutput `pulumi:"baseBandwidth"`
	// The total number of connections per shard.If read-only replicas are not enabled, the lower limit is 10,000 and the upper limit is 40,000.When you enable read-only replicas, the minimum limit is 10,000 and the upper limit is 10,000 * (the number of read replicas +3).
	ClientLimit pulumi.IntPtrOutput `pulumi:"clientLimit"`
	// The ID of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Additional bandwidth is capped.
	MaxAddBandwidth pulumi.IntOutput `pulumi:"maxAddBandwidth"`
	// Additional bandwidth sets the lower limit.
	MinAddBandwidth pulumi.IntOutput `pulumi:"minAddBandwidth"`
	// Total bandwidth of the instance = additional bandwidth * number of shards + standard bandwidth * number of shards * (number of primary nodes + number of read-only replica nodes), the number of shards of the standard architecture = 1, in Mb/s.
	TotalBandwidth pulumi.IntOutput `pulumi:"totalBandwidth"`
}

// NewConnectionConfig registers a new resource with the given unique name, arguments, and options.
func NewConnectionConfig(ctx *pulumi.Context,
	name string, args *ConnectionConfigArgs, opts ...pulumi.ResourceOption) (*ConnectionConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectionConfig
	err := ctx.RegisterResource("tencentcloud:Redis/connectionConfig:ConnectionConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionConfig gets an existing ConnectionConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionConfigState, opts ...pulumi.ResourceOption) (*ConnectionConfig, error) {
	var resource ConnectionConfig
	err := ctx.ReadResource("tencentcloud:Redis/connectionConfig:ConnectionConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionConfig resources.
type connectionConfigState struct {
	// Refers to the additional bandwidth of the instance. When the standard bandwidth does not meet the demand, the user can increase the bandwidth by himself. When the read-only copy is enabled, the total bandwidth of the instance = additional bandwidth * number of fragments + standard bandwidth * number of fragments * Max ([number of read-only replicas, 1] ), the number of shards in the standard architecture = 1, and when read-only replicas are not enabled, the total bandwidth of the instance = additional bandwidth * number of shards + standard bandwidth * number of shards, and the number of shards in the standard architecture = 1.
	AddBandwidth *int `pulumi:"addBandwidth"`
	// standard bandwidth. Refers to the bandwidth allocated by the system to each node when an instance is purchased.
	BaseBandwidth *int `pulumi:"baseBandwidth"`
	// The total number of connections per shard.If read-only replicas are not enabled, the lower limit is 10,000 and the upper limit is 40,000.When you enable read-only replicas, the minimum limit is 10,000 and the upper limit is 10,000 * (the number of read replicas +3).
	ClientLimit *int `pulumi:"clientLimit"`
	// The ID of instance.
	InstanceId *string `pulumi:"instanceId"`
	// Additional bandwidth is capped.
	MaxAddBandwidth *int `pulumi:"maxAddBandwidth"`
	// Additional bandwidth sets the lower limit.
	MinAddBandwidth *int `pulumi:"minAddBandwidth"`
	// Total bandwidth of the instance = additional bandwidth * number of shards + standard bandwidth * number of shards * (number of primary nodes + number of read-only replica nodes), the number of shards of the standard architecture = 1, in Mb/s.
	TotalBandwidth *int `pulumi:"totalBandwidth"`
}

type ConnectionConfigState struct {
	// Refers to the additional bandwidth of the instance. When the standard bandwidth does not meet the demand, the user can increase the bandwidth by himself. When the read-only copy is enabled, the total bandwidth of the instance = additional bandwidth * number of fragments + standard bandwidth * number of fragments * Max ([number of read-only replicas, 1] ), the number of shards in the standard architecture = 1, and when read-only replicas are not enabled, the total bandwidth of the instance = additional bandwidth * number of shards + standard bandwidth * number of shards, and the number of shards in the standard architecture = 1.
	AddBandwidth pulumi.IntPtrInput
	// standard bandwidth. Refers to the bandwidth allocated by the system to each node when an instance is purchased.
	BaseBandwidth pulumi.IntPtrInput
	// The total number of connections per shard.If read-only replicas are not enabled, the lower limit is 10,000 and the upper limit is 40,000.When you enable read-only replicas, the minimum limit is 10,000 and the upper limit is 10,000 * (the number of read replicas +3).
	ClientLimit pulumi.IntPtrInput
	// The ID of instance.
	InstanceId pulumi.StringPtrInput
	// Additional bandwidth is capped.
	MaxAddBandwidth pulumi.IntPtrInput
	// Additional bandwidth sets the lower limit.
	MinAddBandwidth pulumi.IntPtrInput
	// Total bandwidth of the instance = additional bandwidth * number of shards + standard bandwidth * number of shards * (number of primary nodes + number of read-only replica nodes), the number of shards of the standard architecture = 1, in Mb/s.
	TotalBandwidth pulumi.IntPtrInput
}

func (ConnectionConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionConfigState)(nil)).Elem()
}

type connectionConfigArgs struct {
	// Refers to the additional bandwidth of the instance. When the standard bandwidth does not meet the demand, the user can increase the bandwidth by himself. When the read-only copy is enabled, the total bandwidth of the instance = additional bandwidth * number of fragments + standard bandwidth * number of fragments * Max ([number of read-only replicas, 1] ), the number of shards in the standard architecture = 1, and when read-only replicas are not enabled, the total bandwidth of the instance = additional bandwidth * number of shards + standard bandwidth * number of shards, and the number of shards in the standard architecture = 1.
	AddBandwidth *int `pulumi:"addBandwidth"`
	// The total number of connections per shard.If read-only replicas are not enabled, the lower limit is 10,000 and the upper limit is 40,000.When you enable read-only replicas, the minimum limit is 10,000 and the upper limit is 10,000 * (the number of read replicas +3).
	ClientLimit *int `pulumi:"clientLimit"`
	// The ID of instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a ConnectionConfig resource.
type ConnectionConfigArgs struct {
	// Refers to the additional bandwidth of the instance. When the standard bandwidth does not meet the demand, the user can increase the bandwidth by himself. When the read-only copy is enabled, the total bandwidth of the instance = additional bandwidth * number of fragments + standard bandwidth * number of fragments * Max ([number of read-only replicas, 1] ), the number of shards in the standard architecture = 1, and when read-only replicas are not enabled, the total bandwidth of the instance = additional bandwidth * number of shards + standard bandwidth * number of shards, and the number of shards in the standard architecture = 1.
	AddBandwidth pulumi.IntPtrInput
	// The total number of connections per shard.If read-only replicas are not enabled, the lower limit is 10,000 and the upper limit is 40,000.When you enable read-only replicas, the minimum limit is 10,000 and the upper limit is 10,000 * (the number of read replicas +3).
	ClientLimit pulumi.IntPtrInput
	// The ID of instance.
	InstanceId pulumi.StringInput
}

func (ConnectionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionConfigArgs)(nil)).Elem()
}

type ConnectionConfigInput interface {
	pulumi.Input

	ToConnectionConfigOutput() ConnectionConfigOutput
	ToConnectionConfigOutputWithContext(ctx context.Context) ConnectionConfigOutput
}

func (*ConnectionConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfig)(nil)).Elem()
}

func (i *ConnectionConfig) ToConnectionConfigOutput() ConnectionConfigOutput {
	return i.ToConnectionConfigOutputWithContext(context.Background())
}

func (i *ConnectionConfig) ToConnectionConfigOutputWithContext(ctx context.Context) ConnectionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfigOutput)
}

// ConnectionConfigArrayInput is an input type that accepts ConnectionConfigArray and ConnectionConfigArrayOutput values.
// You can construct a concrete instance of `ConnectionConfigArrayInput` via:
//
//	ConnectionConfigArray{ ConnectionConfigArgs{...} }
type ConnectionConfigArrayInput interface {
	pulumi.Input

	ToConnectionConfigArrayOutput() ConnectionConfigArrayOutput
	ToConnectionConfigArrayOutputWithContext(context.Context) ConnectionConfigArrayOutput
}

type ConnectionConfigArray []ConnectionConfigInput

func (ConnectionConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionConfig)(nil)).Elem()
}

func (i ConnectionConfigArray) ToConnectionConfigArrayOutput() ConnectionConfigArrayOutput {
	return i.ToConnectionConfigArrayOutputWithContext(context.Background())
}

func (i ConnectionConfigArray) ToConnectionConfigArrayOutputWithContext(ctx context.Context) ConnectionConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfigArrayOutput)
}

// ConnectionConfigMapInput is an input type that accepts ConnectionConfigMap and ConnectionConfigMapOutput values.
// You can construct a concrete instance of `ConnectionConfigMapInput` via:
//
//	ConnectionConfigMap{ "key": ConnectionConfigArgs{...} }
type ConnectionConfigMapInput interface {
	pulumi.Input

	ToConnectionConfigMapOutput() ConnectionConfigMapOutput
	ToConnectionConfigMapOutputWithContext(context.Context) ConnectionConfigMapOutput
}

type ConnectionConfigMap map[string]ConnectionConfigInput

func (ConnectionConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionConfig)(nil)).Elem()
}

func (i ConnectionConfigMap) ToConnectionConfigMapOutput() ConnectionConfigMapOutput {
	return i.ToConnectionConfigMapOutputWithContext(context.Background())
}

func (i ConnectionConfigMap) ToConnectionConfigMapOutputWithContext(ctx context.Context) ConnectionConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionConfigMapOutput)
}

type ConnectionConfigOutput struct{ *pulumi.OutputState }

func (ConnectionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionConfig)(nil)).Elem()
}

func (o ConnectionConfigOutput) ToConnectionConfigOutput() ConnectionConfigOutput {
	return o
}

func (o ConnectionConfigOutput) ToConnectionConfigOutputWithContext(ctx context.Context) ConnectionConfigOutput {
	return o
}

// Refers to the additional bandwidth of the instance. When the standard bandwidth does not meet the demand, the user can increase the bandwidth by himself. When the read-only copy is enabled, the total bandwidth of the instance = additional bandwidth * number of fragments + standard bandwidth * number of fragments * Max ([number of read-only replicas, 1] ), the number of shards in the standard architecture = 1, and when read-only replicas are not enabled, the total bandwidth of the instance = additional bandwidth * number of shards + standard bandwidth * number of shards, and the number of shards in the standard architecture = 1.
func (o ConnectionConfigOutput) AddBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *ConnectionConfig) pulumi.IntOutput { return v.AddBandwidth }).(pulumi.IntOutput)
}

// standard bandwidth. Refers to the bandwidth allocated by the system to each node when an instance is purchased.
func (o ConnectionConfigOutput) BaseBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *ConnectionConfig) pulumi.IntOutput { return v.BaseBandwidth }).(pulumi.IntOutput)
}

// The total number of connections per shard.If read-only replicas are not enabled, the lower limit is 10,000 and the upper limit is 40,000.When you enable read-only replicas, the minimum limit is 10,000 and the upper limit is 10,000 * (the number of read replicas +3).
func (o ConnectionConfigOutput) ClientLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionConfig) pulumi.IntPtrOutput { return v.ClientLimit }).(pulumi.IntPtrOutput)
}

// The ID of instance.
func (o ConnectionConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Additional bandwidth is capped.
func (o ConnectionConfigOutput) MaxAddBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *ConnectionConfig) pulumi.IntOutput { return v.MaxAddBandwidth }).(pulumi.IntOutput)
}

// Additional bandwidth sets the lower limit.
func (o ConnectionConfigOutput) MinAddBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *ConnectionConfig) pulumi.IntOutput { return v.MinAddBandwidth }).(pulumi.IntOutput)
}

// Total bandwidth of the instance = additional bandwidth * number of shards + standard bandwidth * number of shards * (number of primary nodes + number of read-only replica nodes), the number of shards of the standard architecture = 1, in Mb/s.
func (o ConnectionConfigOutput) TotalBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *ConnectionConfig) pulumi.IntOutput { return v.TotalBandwidth }).(pulumi.IntOutput)
}

type ConnectionConfigArrayOutput struct{ *pulumi.OutputState }

func (ConnectionConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionConfig)(nil)).Elem()
}

func (o ConnectionConfigArrayOutput) ToConnectionConfigArrayOutput() ConnectionConfigArrayOutput {
	return o
}

func (o ConnectionConfigArrayOutput) ToConnectionConfigArrayOutputWithContext(ctx context.Context) ConnectionConfigArrayOutput {
	return o
}

func (o ConnectionConfigArrayOutput) Index(i pulumi.IntInput) ConnectionConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionConfig {
		return vs[0].([]*ConnectionConfig)[vs[1].(int)]
	}).(ConnectionConfigOutput)
}

type ConnectionConfigMapOutput struct{ *pulumi.OutputState }

func (ConnectionConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionConfig)(nil)).Elem()
}

func (o ConnectionConfigMapOutput) ToConnectionConfigMapOutput() ConnectionConfigMapOutput {
	return o
}

func (o ConnectionConfigMapOutput) ToConnectionConfigMapOutputWithContext(ctx context.Context) ConnectionConfigMapOutput {
	return o
}

func (o ConnectionConfigMapOutput) MapIndex(k pulumi.StringInput) ConnectionConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionConfig {
		return vs[0].(map[string]*ConnectionConfig)[vs[1].(string)]
	}).(ConnectionConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfigInput)(nil)).Elem(), &ConnectionConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfigArrayInput)(nil)).Elem(), ConnectionConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionConfigMapInput)(nil)).Elem(), ConnectionConfigMap{})
	pulumi.RegisterOutputType(ConnectionConfigOutput{})
	pulumi.RegisterOutputType(ConnectionConfigArrayOutput{})
	pulumi.RegisterOutputType(ConnectionConfigMapOutput{})
}
