// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a redis switchMaster
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zone, err := Redis.GetZoneConfig(ctx, &redis.GetZoneConfigArgs{
//				TypeId: pulumi.IntRef(7),
//				Region: pulumi.StringRef("ap-guangzhou"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			cfg := config.New(ctx, "")
//			replicaZoneIds := []float64{
//				100004,
//				100006,
//			}
//			if param := cfg.GetBool("replicaZoneIds"); param != nil {
//				replicaZoneIds = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(zone.Lists[2].Zone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			fooGroup, err := Security.NewGroup(ctx, "fooGroup", nil)
//			if err != nil {
//				return err
//			}
//			_, err = Security.NewGroupLiteRule(ctx, "fooGroupLiteRule", &Security.GroupLiteRuleArgs{
//				SecurityGroupId: fooGroup.ID(),
//				Ingresses: pulumi.StringArray{
//					pulumi.String("ACCEPT#192.168.1.0/24#80#TCP"),
//					pulumi.String("DROP#8.8.8.8#80,90#UDP"),
//					pulumi.String("DROP#0.0.0.0/0#80-90#TCP"),
//				},
//				Egresses: pulumi.StringArray{
//					pulumi.String("ACCEPT#192.168.0.0/16#ALL#TCP"),
//					pulumi.String("ACCEPT#10.0.0.0/8#ALL#ICMP"),
//					pulumi.String("DROP#0.0.0.0/0#ALL#ALL"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := Redis.NewInstance(ctx, "fooInstance", &Redis.InstanceArgs{
//				AvailabilityZone: pulumi.String(zone.Lists[2].Zone),
//				TypeId:           pulumi.Int(zone.Lists[2].TypeId),
//				Password:         pulumi.String("test12345789"),
//				MemSize:          pulumi.Int(8192),
//				RedisShardNum:    pulumi.Int(zone.Lists[2].RedisShardNums[0]),
//				RedisReplicasNum: pulumi.Int(2),
//				ReplicaZoneIds:   pulumi.Any(replicaZoneIds),
//				Port:             pulumi.Int(6379),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				SecurityGroups: pulumi.StringArray{
//					fooGroup.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooInstanceZoneInfo := Redis.GetInstanceZoneInfoOutput(ctx, redis.GetInstanceZoneInfoOutputArgs{
//				InstanceId: fooInstance.ID(),
//			}, nil)
//			_, err = Redis.NewSwitchMaster(ctx, "switchMaster", &Redis.SwitchMasterArgs{
//				InstanceId: fooInstance.ID(),
//				GroupId: fooInstanceZoneInfo.ApplyT(func(fooInstanceZoneInfo redis.GetInstanceZoneInfoResult) (int, error) {
//					return fooInstanceZoneInfo.ReplicaGroups[1].GroupId, nil
//				}).(pulumi.IntOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SwitchMaster struct {
	pulumi.CustomResourceState

	// Replication group ID, required for multi-AZ instances.
	GroupId pulumi.IntPtrOutput `pulumi:"groupId"`
	// The ID of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewSwitchMaster registers a new resource with the given unique name, arguments, and options.
func NewSwitchMaster(ctx *pulumi.Context,
	name string, args *SwitchMasterArgs, opts ...pulumi.ResourceOption) (*SwitchMaster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchMaster
	err := ctx.RegisterResource("tencentcloud:Redis/switchMaster:SwitchMaster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchMaster gets an existing SwitchMaster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchMaster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchMasterState, opts ...pulumi.ResourceOption) (*SwitchMaster, error) {
	var resource SwitchMaster
	err := ctx.ReadResource("tencentcloud:Redis/switchMaster:SwitchMaster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchMaster resources.
type switchMasterState struct {
	// Replication group ID, required for multi-AZ instances.
	GroupId *int `pulumi:"groupId"`
	// The ID of instance.
	InstanceId *string `pulumi:"instanceId"`
}

type SwitchMasterState struct {
	// Replication group ID, required for multi-AZ instances.
	GroupId pulumi.IntPtrInput
	// The ID of instance.
	InstanceId pulumi.StringPtrInput
}

func (SwitchMasterState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchMasterState)(nil)).Elem()
}

type switchMasterArgs struct {
	// Replication group ID, required for multi-AZ instances.
	GroupId *int `pulumi:"groupId"`
	// The ID of instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a SwitchMaster resource.
type SwitchMasterArgs struct {
	// Replication group ID, required for multi-AZ instances.
	GroupId pulumi.IntPtrInput
	// The ID of instance.
	InstanceId pulumi.StringInput
}

func (SwitchMasterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchMasterArgs)(nil)).Elem()
}

type SwitchMasterInput interface {
	pulumi.Input

	ToSwitchMasterOutput() SwitchMasterOutput
	ToSwitchMasterOutputWithContext(ctx context.Context) SwitchMasterOutput
}

func (*SwitchMaster) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchMaster)(nil)).Elem()
}

func (i *SwitchMaster) ToSwitchMasterOutput() SwitchMasterOutput {
	return i.ToSwitchMasterOutputWithContext(context.Background())
}

func (i *SwitchMaster) ToSwitchMasterOutputWithContext(ctx context.Context) SwitchMasterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchMasterOutput)
}

// SwitchMasterArrayInput is an input type that accepts SwitchMasterArray and SwitchMasterArrayOutput values.
// You can construct a concrete instance of `SwitchMasterArrayInput` via:
//
//	SwitchMasterArray{ SwitchMasterArgs{...} }
type SwitchMasterArrayInput interface {
	pulumi.Input

	ToSwitchMasterArrayOutput() SwitchMasterArrayOutput
	ToSwitchMasterArrayOutputWithContext(context.Context) SwitchMasterArrayOutput
}

type SwitchMasterArray []SwitchMasterInput

func (SwitchMasterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchMaster)(nil)).Elem()
}

func (i SwitchMasterArray) ToSwitchMasterArrayOutput() SwitchMasterArrayOutput {
	return i.ToSwitchMasterArrayOutputWithContext(context.Background())
}

func (i SwitchMasterArray) ToSwitchMasterArrayOutputWithContext(ctx context.Context) SwitchMasterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchMasterArrayOutput)
}

// SwitchMasterMapInput is an input type that accepts SwitchMasterMap and SwitchMasterMapOutput values.
// You can construct a concrete instance of `SwitchMasterMapInput` via:
//
//	SwitchMasterMap{ "key": SwitchMasterArgs{...} }
type SwitchMasterMapInput interface {
	pulumi.Input

	ToSwitchMasterMapOutput() SwitchMasterMapOutput
	ToSwitchMasterMapOutputWithContext(context.Context) SwitchMasterMapOutput
}

type SwitchMasterMap map[string]SwitchMasterInput

func (SwitchMasterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchMaster)(nil)).Elem()
}

func (i SwitchMasterMap) ToSwitchMasterMapOutput() SwitchMasterMapOutput {
	return i.ToSwitchMasterMapOutputWithContext(context.Background())
}

func (i SwitchMasterMap) ToSwitchMasterMapOutputWithContext(ctx context.Context) SwitchMasterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchMasterMapOutput)
}

type SwitchMasterOutput struct{ *pulumi.OutputState }

func (SwitchMasterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchMaster)(nil)).Elem()
}

func (o SwitchMasterOutput) ToSwitchMasterOutput() SwitchMasterOutput {
	return o
}

func (o SwitchMasterOutput) ToSwitchMasterOutputWithContext(ctx context.Context) SwitchMasterOutput {
	return o
}

// Replication group ID, required for multi-AZ instances.
func (o SwitchMasterOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SwitchMaster) pulumi.IntPtrOutput { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The ID of instance.
func (o SwitchMasterOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchMaster) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type SwitchMasterArrayOutput struct{ *pulumi.OutputState }

func (SwitchMasterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchMaster)(nil)).Elem()
}

func (o SwitchMasterArrayOutput) ToSwitchMasterArrayOutput() SwitchMasterArrayOutput {
	return o
}

func (o SwitchMasterArrayOutput) ToSwitchMasterArrayOutputWithContext(ctx context.Context) SwitchMasterArrayOutput {
	return o
}

func (o SwitchMasterArrayOutput) Index(i pulumi.IntInput) SwitchMasterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchMaster {
		return vs[0].([]*SwitchMaster)[vs[1].(int)]
	}).(SwitchMasterOutput)
}

type SwitchMasterMapOutput struct{ *pulumi.OutputState }

func (SwitchMasterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchMaster)(nil)).Elem()
}

func (o SwitchMasterMapOutput) ToSwitchMasterMapOutput() SwitchMasterMapOutput {
	return o
}

func (o SwitchMasterMapOutput) ToSwitchMasterMapOutputWithContext(ctx context.Context) SwitchMasterMapOutput {
	return o
}

func (o SwitchMasterMapOutput) MapIndex(k pulumi.StringInput) SwitchMasterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchMaster {
		return vs[0].(map[string]*SwitchMaster)[vs[1].(string)]
	}).(SwitchMasterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchMasterInput)(nil)).Elem(), &SwitchMaster{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchMasterArrayInput)(nil)).Elem(), SwitchMasterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchMasterMapInput)(nil)).Elem(), SwitchMasterMap{})
	pulumi.RegisterOutputType(SwitchMasterOutput{})
	pulumi.RegisterOutputType(SwitchMasterArrayOutput{})
	pulumi.RegisterOutputType(SwitchMasterMapOutput{})
}
