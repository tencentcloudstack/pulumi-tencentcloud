// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a redis parameter template
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Redis.NewParamTemplate(ctx, "paramTemplate", &Redis.ParamTemplateArgs{
//				Description: pulumi.String("This is an example redis param template."),
//				ParamsOverrides: redis.ParamTemplateParamsOverrideArray{
//					&redis.ParamTemplateParamsOverrideArgs{
//						Key:   pulumi.String("timeout"),
//						Value: pulumi.String("7200"),
//					},
//				},
//				ProductType: pulumi.Int(6),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Copy from another template
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := Redis.NewParamTemplate(ctx, "foo", &Redis.ParamTemplateArgs{
//				Description: pulumi.String("This is an example redis param template."),
//				ProductType: pulumi.Int(6),
//				ParamsOverrides: redis.ParamTemplateParamsOverrideArray{
//					&redis.ParamTemplateParamsOverrideArgs{
//						Key:   pulumi.String("timeout"),
//						Value: pulumi.String("7200"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Redis.NewParamTemplate(ctx, "paramTemplate", &Redis.ParamTemplateArgs{
//				Description: pulumi.String("This is an copied redis param template from tf-template."),
//				TemplateId:  foo.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// redis param_template can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Redis/paramTemplate:ParamTemplate param_template param_template_id
//
// ```
type ParamTemplate struct {
	pulumi.CustomResourceState

	// Parameter template description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Parameter template name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Readonly full parameter list details.
	ParamDetails ParamTemplateParamDetailArrayOutput `pulumi:"paramDetails"`
	// Specify override parameter list, NOTE: Do not remove override params once set, removing will not take effects to current value.
	ParamsOverrides ParamTemplateParamsOverrideArrayOutput `pulumi:"paramsOverrides"`
	// Specify product type. Valid values: 1 (Redis 2.8 Memory Edition in cluster architecture), 2 (Redis 2.8 Memory Edition in standard architecture), 3 (CKV 3.2 Memory Edition in standard architecture), 4 (CKV 3.2 Memory Edition in cluster architecture), 5 (Redis 2.8 Memory Edition in standalone architecture), 6 (Redis 4.0 Memory Edition in standard architecture), 7 (Redis 4.0 Memory Edition in cluster architecture), 8 (Redis 5.0 Memory Edition in standard architecture), 9 (Redis 5.0 Memory Edition in cluster architecture). If `templateId` is specified, this parameter can be left blank; otherwise, it is required.
	ProductType pulumi.IntPtrOutput `pulumi:"productType"`
	// Specify which existed template import from.
	TemplateId pulumi.StringPtrOutput `pulumi:"templateId"`
}

// NewParamTemplate registers a new resource with the given unique name, arguments, and options.
func NewParamTemplate(ctx *pulumi.Context,
	name string, args *ParamTemplateArgs, opts ...pulumi.ResourceOption) (*ParamTemplate, error) {
	if args == nil {
		args = &ParamTemplateArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ParamTemplate
	err := ctx.RegisterResource("tencentcloud:Redis/paramTemplate:ParamTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParamTemplate gets an existing ParamTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParamTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParamTemplateState, opts ...pulumi.ResourceOption) (*ParamTemplate, error) {
	var resource ParamTemplate
	err := ctx.ReadResource("tencentcloud:Redis/paramTemplate:ParamTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ParamTemplate resources.
type paramTemplateState struct {
	// Parameter template description.
	Description *string `pulumi:"description"`
	// Parameter template name.
	Name *string `pulumi:"name"`
	// Readonly full parameter list details.
	ParamDetails []ParamTemplateParamDetail `pulumi:"paramDetails"`
	// Specify override parameter list, NOTE: Do not remove override params once set, removing will not take effects to current value.
	ParamsOverrides []ParamTemplateParamsOverride `pulumi:"paramsOverrides"`
	// Specify product type. Valid values: 1 (Redis 2.8 Memory Edition in cluster architecture), 2 (Redis 2.8 Memory Edition in standard architecture), 3 (CKV 3.2 Memory Edition in standard architecture), 4 (CKV 3.2 Memory Edition in cluster architecture), 5 (Redis 2.8 Memory Edition in standalone architecture), 6 (Redis 4.0 Memory Edition in standard architecture), 7 (Redis 4.0 Memory Edition in cluster architecture), 8 (Redis 5.0 Memory Edition in standard architecture), 9 (Redis 5.0 Memory Edition in cluster architecture). If `templateId` is specified, this parameter can be left blank; otherwise, it is required.
	ProductType *int `pulumi:"productType"`
	// Specify which existed template import from.
	TemplateId *string `pulumi:"templateId"`
}

type ParamTemplateState struct {
	// Parameter template description.
	Description pulumi.StringPtrInput
	// Parameter template name.
	Name pulumi.StringPtrInput
	// Readonly full parameter list details.
	ParamDetails ParamTemplateParamDetailArrayInput
	// Specify override parameter list, NOTE: Do not remove override params once set, removing will not take effects to current value.
	ParamsOverrides ParamTemplateParamsOverrideArrayInput
	// Specify product type. Valid values: 1 (Redis 2.8 Memory Edition in cluster architecture), 2 (Redis 2.8 Memory Edition in standard architecture), 3 (CKV 3.2 Memory Edition in standard architecture), 4 (CKV 3.2 Memory Edition in cluster architecture), 5 (Redis 2.8 Memory Edition in standalone architecture), 6 (Redis 4.0 Memory Edition in standard architecture), 7 (Redis 4.0 Memory Edition in cluster architecture), 8 (Redis 5.0 Memory Edition in standard architecture), 9 (Redis 5.0 Memory Edition in cluster architecture). If `templateId` is specified, this parameter can be left blank; otherwise, it is required.
	ProductType pulumi.IntPtrInput
	// Specify which existed template import from.
	TemplateId pulumi.StringPtrInput
}

func (ParamTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*paramTemplateState)(nil)).Elem()
}

type paramTemplateArgs struct {
	// Parameter template description.
	Description *string `pulumi:"description"`
	// Parameter template name.
	Name *string `pulumi:"name"`
	// Specify override parameter list, NOTE: Do not remove override params once set, removing will not take effects to current value.
	ParamsOverrides []ParamTemplateParamsOverride `pulumi:"paramsOverrides"`
	// Specify product type. Valid values: 1 (Redis 2.8 Memory Edition in cluster architecture), 2 (Redis 2.8 Memory Edition in standard architecture), 3 (CKV 3.2 Memory Edition in standard architecture), 4 (CKV 3.2 Memory Edition in cluster architecture), 5 (Redis 2.8 Memory Edition in standalone architecture), 6 (Redis 4.0 Memory Edition in standard architecture), 7 (Redis 4.0 Memory Edition in cluster architecture), 8 (Redis 5.0 Memory Edition in standard architecture), 9 (Redis 5.0 Memory Edition in cluster architecture). If `templateId` is specified, this parameter can be left blank; otherwise, it is required.
	ProductType *int `pulumi:"productType"`
	// Specify which existed template import from.
	TemplateId *string `pulumi:"templateId"`
}

// The set of arguments for constructing a ParamTemplate resource.
type ParamTemplateArgs struct {
	// Parameter template description.
	Description pulumi.StringPtrInput
	// Parameter template name.
	Name pulumi.StringPtrInput
	// Specify override parameter list, NOTE: Do not remove override params once set, removing will not take effects to current value.
	ParamsOverrides ParamTemplateParamsOverrideArrayInput
	// Specify product type. Valid values: 1 (Redis 2.8 Memory Edition in cluster architecture), 2 (Redis 2.8 Memory Edition in standard architecture), 3 (CKV 3.2 Memory Edition in standard architecture), 4 (CKV 3.2 Memory Edition in cluster architecture), 5 (Redis 2.8 Memory Edition in standalone architecture), 6 (Redis 4.0 Memory Edition in standard architecture), 7 (Redis 4.0 Memory Edition in cluster architecture), 8 (Redis 5.0 Memory Edition in standard architecture), 9 (Redis 5.0 Memory Edition in cluster architecture). If `templateId` is specified, this parameter can be left blank; otherwise, it is required.
	ProductType pulumi.IntPtrInput
	// Specify which existed template import from.
	TemplateId pulumi.StringPtrInput
}

func (ParamTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*paramTemplateArgs)(nil)).Elem()
}

type ParamTemplateInput interface {
	pulumi.Input

	ToParamTemplateOutput() ParamTemplateOutput
	ToParamTemplateOutputWithContext(ctx context.Context) ParamTemplateOutput
}

func (*ParamTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamTemplate)(nil)).Elem()
}

func (i *ParamTemplate) ToParamTemplateOutput() ParamTemplateOutput {
	return i.ToParamTemplateOutputWithContext(context.Background())
}

func (i *ParamTemplate) ToParamTemplateOutputWithContext(ctx context.Context) ParamTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamTemplateOutput)
}

// ParamTemplateArrayInput is an input type that accepts ParamTemplateArray and ParamTemplateArrayOutput values.
// You can construct a concrete instance of `ParamTemplateArrayInput` via:
//
//	ParamTemplateArray{ ParamTemplateArgs{...} }
type ParamTemplateArrayInput interface {
	pulumi.Input

	ToParamTemplateArrayOutput() ParamTemplateArrayOutput
	ToParamTemplateArrayOutputWithContext(context.Context) ParamTemplateArrayOutput
}

type ParamTemplateArray []ParamTemplateInput

func (ParamTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ParamTemplate)(nil)).Elem()
}

func (i ParamTemplateArray) ToParamTemplateArrayOutput() ParamTemplateArrayOutput {
	return i.ToParamTemplateArrayOutputWithContext(context.Background())
}

func (i ParamTemplateArray) ToParamTemplateArrayOutputWithContext(ctx context.Context) ParamTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamTemplateArrayOutput)
}

// ParamTemplateMapInput is an input type that accepts ParamTemplateMap and ParamTemplateMapOutput values.
// You can construct a concrete instance of `ParamTemplateMapInput` via:
//
//	ParamTemplateMap{ "key": ParamTemplateArgs{...} }
type ParamTemplateMapInput interface {
	pulumi.Input

	ToParamTemplateMapOutput() ParamTemplateMapOutput
	ToParamTemplateMapOutputWithContext(context.Context) ParamTemplateMapOutput
}

type ParamTemplateMap map[string]ParamTemplateInput

func (ParamTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ParamTemplate)(nil)).Elem()
}

func (i ParamTemplateMap) ToParamTemplateMapOutput() ParamTemplateMapOutput {
	return i.ToParamTemplateMapOutputWithContext(context.Background())
}

func (i ParamTemplateMap) ToParamTemplateMapOutputWithContext(ctx context.Context) ParamTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamTemplateMapOutput)
}

type ParamTemplateOutput struct{ *pulumi.OutputState }

func (ParamTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamTemplate)(nil)).Elem()
}

func (o ParamTemplateOutput) ToParamTemplateOutput() ParamTemplateOutput {
	return o
}

func (o ParamTemplateOutput) ToParamTemplateOutputWithContext(ctx context.Context) ParamTemplateOutput {
	return o
}

// Parameter template description.
func (o ParamTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameter template name.
func (o ParamTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Readonly full parameter list details.
func (o ParamTemplateOutput) ParamDetails() ParamTemplateParamDetailArrayOutput {
	return o.ApplyT(func(v *ParamTemplate) ParamTemplateParamDetailArrayOutput { return v.ParamDetails }).(ParamTemplateParamDetailArrayOutput)
}

// Specify override parameter list, NOTE: Do not remove override params once set, removing will not take effects to current value.
func (o ParamTemplateOutput) ParamsOverrides() ParamTemplateParamsOverrideArrayOutput {
	return o.ApplyT(func(v *ParamTemplate) ParamTemplateParamsOverrideArrayOutput { return v.ParamsOverrides }).(ParamTemplateParamsOverrideArrayOutput)
}

// Specify product type. Valid values: 1 (Redis 2.8 Memory Edition in cluster architecture), 2 (Redis 2.8 Memory Edition in standard architecture), 3 (CKV 3.2 Memory Edition in standard architecture), 4 (CKV 3.2 Memory Edition in cluster architecture), 5 (Redis 2.8 Memory Edition in standalone architecture), 6 (Redis 4.0 Memory Edition in standard architecture), 7 (Redis 4.0 Memory Edition in cluster architecture), 8 (Redis 5.0 Memory Edition in standard architecture), 9 (Redis 5.0 Memory Edition in cluster architecture). If `templateId` is specified, this parameter can be left blank; otherwise, it is required.
func (o ParamTemplateOutput) ProductType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.IntPtrOutput { return v.ProductType }).(pulumi.IntPtrOutput)
}

// Specify which existed template import from.
func (o ParamTemplateOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringPtrOutput { return v.TemplateId }).(pulumi.StringPtrOutput)
}

type ParamTemplateArrayOutput struct{ *pulumi.OutputState }

func (ParamTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ParamTemplate)(nil)).Elem()
}

func (o ParamTemplateArrayOutput) ToParamTemplateArrayOutput() ParamTemplateArrayOutput {
	return o
}

func (o ParamTemplateArrayOutput) ToParamTemplateArrayOutputWithContext(ctx context.Context) ParamTemplateArrayOutput {
	return o
}

func (o ParamTemplateArrayOutput) Index(i pulumi.IntInput) ParamTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ParamTemplate {
		return vs[0].([]*ParamTemplate)[vs[1].(int)]
	}).(ParamTemplateOutput)
}

type ParamTemplateMapOutput struct{ *pulumi.OutputState }

func (ParamTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ParamTemplate)(nil)).Elem()
}

func (o ParamTemplateMapOutput) ToParamTemplateMapOutput() ParamTemplateMapOutput {
	return o
}

func (o ParamTemplateMapOutput) ToParamTemplateMapOutputWithContext(ctx context.Context) ParamTemplateMapOutput {
	return o
}

func (o ParamTemplateMapOutput) MapIndex(k pulumi.StringInput) ParamTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ParamTemplate {
		return vs[0].(map[string]*ParamTemplate)[vs[1].(string)]
	}).(ParamTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ParamTemplateInput)(nil)).Elem(), &ParamTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamTemplateArrayInput)(nil)).Elem(), ParamTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamTemplateMapInput)(nil)).Elem(), ParamTemplateMap{})
	pulumi.RegisterOutputType(ParamTemplateOutput{})
	pulumi.RegisterOutputType(ParamTemplateArrayOutput{})
	pulumi.RegisterOutputType(ParamTemplateMapOutput{})
}
