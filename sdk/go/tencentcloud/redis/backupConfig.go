// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create a backup config of redis.
//
// ## Example Usage
// ### Set configuration for automatic backups
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zone, err := Redis.GetZoneConfig(ctx, &redis.GetZoneConfigArgs{
//				TypeId: pulumi.IntRef(7),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(zone.Lists[1].Zone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := Redis.NewInstance(ctx, "fooInstance", &Redis.InstanceArgs{
//				AvailabilityZone: pulumi.String(zone.Lists[1].Zone),
//				TypeId:           pulumi.Int(zone.Lists[1].TypeId),
//				Password:         pulumi.String("test12345789"),
//				MemSize:          pulumi.Int(8192),
//				RedisShardNum:    pulumi.Int(zone.Lists[1].RedisShardNums[0]),
//				RedisReplicasNum: pulumi.Int(zone.Lists[1].RedisReplicasNums[0]),
//				Port:             pulumi.Int(6379),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Redis.NewBackupConfig(ctx, "fooBackupConfig", &Redis.BackupConfigArgs{
//				RedisId:    fooInstance.ID(),
//				BackupTime: pulumi.String("04:00-05:00"),
//				BackupPeriods: pulumi.StringArray{
//					pulumi.String("Monday"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Redis
//
// backup config can be imported, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Redis/backupConfig:BackupConfig foo redis-id
//
// ```
type BackupConfig struct {
	pulumi.CustomResourceState

	// It has been deprecated from version 1.58.2. It makes no difference to online config at all Specifys which day the backup action should take place. Valid values: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
	//
	// Deprecated: It has been deprecated from version 1.58.2. It makes no difference to online config at all
	BackupPeriods pulumi.StringArrayOutput `pulumi:"backupPeriods"`
	// Specifys what time the backup action should take place. And the time interval should be one hour.
	BackupTime pulumi.StringOutput `pulumi:"backupTime"`
	// ID of a redis instance to which the policy will be applied.
	RedisId pulumi.StringOutput `pulumi:"redisId"`
}

// NewBackupConfig registers a new resource with the given unique name, arguments, and options.
func NewBackupConfig(ctx *pulumi.Context,
	name string, args *BackupConfigArgs, opts ...pulumi.ResourceOption) (*BackupConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupTime == nil {
		return nil, errors.New("invalid value for required argument 'BackupTime'")
	}
	if args.RedisId == nil {
		return nil, errors.New("invalid value for required argument 'RedisId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BackupConfig
	err := ctx.RegisterResource("tencentcloud:Redis/backupConfig:BackupConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupConfig gets an existing BackupConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupConfigState, opts ...pulumi.ResourceOption) (*BackupConfig, error) {
	var resource BackupConfig
	err := ctx.ReadResource("tencentcloud:Redis/backupConfig:BackupConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupConfig resources.
type backupConfigState struct {
	// It has been deprecated from version 1.58.2. It makes no difference to online config at all Specifys which day the backup action should take place. Valid values: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
	//
	// Deprecated: It has been deprecated from version 1.58.2. It makes no difference to online config at all
	BackupPeriods []string `pulumi:"backupPeriods"`
	// Specifys what time the backup action should take place. And the time interval should be one hour.
	BackupTime *string `pulumi:"backupTime"`
	// ID of a redis instance to which the policy will be applied.
	RedisId *string `pulumi:"redisId"`
}

type BackupConfigState struct {
	// It has been deprecated from version 1.58.2. It makes no difference to online config at all Specifys which day the backup action should take place. Valid values: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
	//
	// Deprecated: It has been deprecated from version 1.58.2. It makes no difference to online config at all
	BackupPeriods pulumi.StringArrayInput
	// Specifys what time the backup action should take place. And the time interval should be one hour.
	BackupTime pulumi.StringPtrInput
	// ID of a redis instance to which the policy will be applied.
	RedisId pulumi.StringPtrInput
}

func (BackupConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupConfigState)(nil)).Elem()
}

type backupConfigArgs struct {
	// It has been deprecated from version 1.58.2. It makes no difference to online config at all Specifys which day the backup action should take place. Valid values: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
	//
	// Deprecated: It has been deprecated from version 1.58.2. It makes no difference to online config at all
	BackupPeriods []string `pulumi:"backupPeriods"`
	// Specifys what time the backup action should take place. And the time interval should be one hour.
	BackupTime string `pulumi:"backupTime"`
	// ID of a redis instance to which the policy will be applied.
	RedisId string `pulumi:"redisId"`
}

// The set of arguments for constructing a BackupConfig resource.
type BackupConfigArgs struct {
	// It has been deprecated from version 1.58.2. It makes no difference to online config at all Specifys which day the backup action should take place. Valid values: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
	//
	// Deprecated: It has been deprecated from version 1.58.2. It makes no difference to online config at all
	BackupPeriods pulumi.StringArrayInput
	// Specifys what time the backup action should take place. And the time interval should be one hour.
	BackupTime pulumi.StringInput
	// ID of a redis instance to which the policy will be applied.
	RedisId pulumi.StringInput
}

func (BackupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupConfigArgs)(nil)).Elem()
}

type BackupConfigInput interface {
	pulumi.Input

	ToBackupConfigOutput() BackupConfigOutput
	ToBackupConfigOutputWithContext(ctx context.Context) BackupConfigOutput
}

func (*BackupConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupConfig)(nil)).Elem()
}

func (i *BackupConfig) ToBackupConfigOutput() BackupConfigOutput {
	return i.ToBackupConfigOutputWithContext(context.Background())
}

func (i *BackupConfig) ToBackupConfigOutputWithContext(ctx context.Context) BackupConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupConfigOutput)
}

// BackupConfigArrayInput is an input type that accepts BackupConfigArray and BackupConfigArrayOutput values.
// You can construct a concrete instance of `BackupConfigArrayInput` via:
//
//	BackupConfigArray{ BackupConfigArgs{...} }
type BackupConfigArrayInput interface {
	pulumi.Input

	ToBackupConfigArrayOutput() BackupConfigArrayOutput
	ToBackupConfigArrayOutputWithContext(context.Context) BackupConfigArrayOutput
}

type BackupConfigArray []BackupConfigInput

func (BackupConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupConfig)(nil)).Elem()
}

func (i BackupConfigArray) ToBackupConfigArrayOutput() BackupConfigArrayOutput {
	return i.ToBackupConfigArrayOutputWithContext(context.Background())
}

func (i BackupConfigArray) ToBackupConfigArrayOutputWithContext(ctx context.Context) BackupConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupConfigArrayOutput)
}

// BackupConfigMapInput is an input type that accepts BackupConfigMap and BackupConfigMapOutput values.
// You can construct a concrete instance of `BackupConfigMapInput` via:
//
//	BackupConfigMap{ "key": BackupConfigArgs{...} }
type BackupConfigMapInput interface {
	pulumi.Input

	ToBackupConfigMapOutput() BackupConfigMapOutput
	ToBackupConfigMapOutputWithContext(context.Context) BackupConfigMapOutput
}

type BackupConfigMap map[string]BackupConfigInput

func (BackupConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupConfig)(nil)).Elem()
}

func (i BackupConfigMap) ToBackupConfigMapOutput() BackupConfigMapOutput {
	return i.ToBackupConfigMapOutputWithContext(context.Background())
}

func (i BackupConfigMap) ToBackupConfigMapOutputWithContext(ctx context.Context) BackupConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupConfigMapOutput)
}

type BackupConfigOutput struct{ *pulumi.OutputState }

func (BackupConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupConfig)(nil)).Elem()
}

func (o BackupConfigOutput) ToBackupConfigOutput() BackupConfigOutput {
	return o
}

func (o BackupConfigOutput) ToBackupConfigOutputWithContext(ctx context.Context) BackupConfigOutput {
	return o
}

// It has been deprecated from version 1.58.2. It makes no difference to online config at all Specifys which day the backup action should take place. Valid values: `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
//
// Deprecated: It has been deprecated from version 1.58.2. It makes no difference to online config at all
func (o BackupConfigOutput) BackupPeriods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupConfig) pulumi.StringArrayOutput { return v.BackupPeriods }).(pulumi.StringArrayOutput)
}

// Specifys what time the backup action should take place. And the time interval should be one hour.
func (o BackupConfigOutput) BackupTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupConfig) pulumi.StringOutput { return v.BackupTime }).(pulumi.StringOutput)
}

// ID of a redis instance to which the policy will be applied.
func (o BackupConfigOutput) RedisId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupConfig) pulumi.StringOutput { return v.RedisId }).(pulumi.StringOutput)
}

type BackupConfigArrayOutput struct{ *pulumi.OutputState }

func (BackupConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupConfig)(nil)).Elem()
}

func (o BackupConfigArrayOutput) ToBackupConfigArrayOutput() BackupConfigArrayOutput {
	return o
}

func (o BackupConfigArrayOutput) ToBackupConfigArrayOutputWithContext(ctx context.Context) BackupConfigArrayOutput {
	return o
}

func (o BackupConfigArrayOutput) Index(i pulumi.IntInput) BackupConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupConfig {
		return vs[0].([]*BackupConfig)[vs[1].(int)]
	}).(BackupConfigOutput)
}

type BackupConfigMapOutput struct{ *pulumi.OutputState }

func (BackupConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupConfig)(nil)).Elem()
}

func (o BackupConfigMapOutput) ToBackupConfigMapOutput() BackupConfigMapOutput {
	return o
}

func (o BackupConfigMapOutput) ToBackupConfigMapOutputWithContext(ctx context.Context) BackupConfigMapOutput {
	return o
}

func (o BackupConfigMapOutput) MapIndex(k pulumi.StringInput) BackupConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupConfig {
		return vs[0].(map[string]*BackupConfig)[vs[1].(string)]
	}).(BackupConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupConfigInput)(nil)).Elem(), &BackupConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupConfigArrayInput)(nil)).Elem(), BackupConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupConfigMapInput)(nil)).Elem(), BackupConfigMap{})
	pulumi.RegisterOutputType(BackupConfigOutput{})
	pulumi.RegisterOutputType(BackupConfigArrayOutput{})
	pulumi.RegisterOutputType(BackupConfigMapOutput{})
}
