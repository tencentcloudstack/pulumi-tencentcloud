// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a redis clearInstanceOperation
//
// ## Example Usage
// ### Clear the instance data of the Redis instance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			password := "test12345789"
//			if param := cfg.Get("password"); param != "" {
//				password = param
//			}
//			zone, err := Redis.GetZoneConfig(ctx, &redis.GetZoneConfigArgs{
//				TypeId: pulumi.IntRef(7),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(zone.Lists[1].Zone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			foo, err := Redis.NewInstance(ctx, "foo", &Redis.InstanceArgs{
//				AvailabilityZone: pulumi.String(zone.Lists[1].Zone),
//				TypeId:           pulumi.Int(zone.Lists[1].TypeId),
//				Password:         pulumi.String(password),
//				MemSize:          pulumi.Int(8192),
//				RedisShardNum:    pulumi.Int(zone.Lists[1].RedisShardNums[0]),
//				RedisReplicasNum: pulumi.Int(zone.Lists[1].RedisReplicasNums[0]),
//				Port:             pulumi.Int(6379),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Redis.NewClearInstanceOperation(ctx, "clearInstanceOperation", &Redis.ClearInstanceOperationArgs{
//				InstanceId: foo.ID(),
//				Password:   pulumi.String(password),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ClearInstanceOperation struct {
	pulumi.CustomResourceState

	// The ID of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Redis instance password (password-free instances do not need to pass passwords, non-password-free instances must be transmitted).
	Password pulumi.StringPtrOutput `pulumi:"password"`
}

// NewClearInstanceOperation registers a new resource with the given unique name, arguments, and options.
func NewClearInstanceOperation(ctx *pulumi.Context,
	name string, args *ClearInstanceOperationArgs, opts ...pulumi.ResourceOption) (*ClearInstanceOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ClearInstanceOperation
	err := ctx.RegisterResource("tencentcloud:Redis/clearInstanceOperation:ClearInstanceOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClearInstanceOperation gets an existing ClearInstanceOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClearInstanceOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClearInstanceOperationState, opts ...pulumi.ResourceOption) (*ClearInstanceOperation, error) {
	var resource ClearInstanceOperation
	err := ctx.ReadResource("tencentcloud:Redis/clearInstanceOperation:ClearInstanceOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClearInstanceOperation resources.
type clearInstanceOperationState struct {
	// The ID of instance.
	InstanceId *string `pulumi:"instanceId"`
	// Redis instance password (password-free instances do not need to pass passwords, non-password-free instances must be transmitted).
	Password *string `pulumi:"password"`
}

type ClearInstanceOperationState struct {
	// The ID of instance.
	InstanceId pulumi.StringPtrInput
	// Redis instance password (password-free instances do not need to pass passwords, non-password-free instances must be transmitted).
	Password pulumi.StringPtrInput
}

func (ClearInstanceOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*clearInstanceOperationState)(nil)).Elem()
}

type clearInstanceOperationArgs struct {
	// The ID of instance.
	InstanceId string `pulumi:"instanceId"`
	// Redis instance password (password-free instances do not need to pass passwords, non-password-free instances must be transmitted).
	Password *string `pulumi:"password"`
}

// The set of arguments for constructing a ClearInstanceOperation resource.
type ClearInstanceOperationArgs struct {
	// The ID of instance.
	InstanceId pulumi.StringInput
	// Redis instance password (password-free instances do not need to pass passwords, non-password-free instances must be transmitted).
	Password pulumi.StringPtrInput
}

func (ClearInstanceOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clearInstanceOperationArgs)(nil)).Elem()
}

type ClearInstanceOperationInput interface {
	pulumi.Input

	ToClearInstanceOperationOutput() ClearInstanceOperationOutput
	ToClearInstanceOperationOutputWithContext(ctx context.Context) ClearInstanceOperationOutput
}

func (*ClearInstanceOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**ClearInstanceOperation)(nil)).Elem()
}

func (i *ClearInstanceOperation) ToClearInstanceOperationOutput() ClearInstanceOperationOutput {
	return i.ToClearInstanceOperationOutputWithContext(context.Background())
}

func (i *ClearInstanceOperation) ToClearInstanceOperationOutputWithContext(ctx context.Context) ClearInstanceOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClearInstanceOperationOutput)
}

// ClearInstanceOperationArrayInput is an input type that accepts ClearInstanceOperationArray and ClearInstanceOperationArrayOutput values.
// You can construct a concrete instance of `ClearInstanceOperationArrayInput` via:
//
//	ClearInstanceOperationArray{ ClearInstanceOperationArgs{...} }
type ClearInstanceOperationArrayInput interface {
	pulumi.Input

	ToClearInstanceOperationArrayOutput() ClearInstanceOperationArrayOutput
	ToClearInstanceOperationArrayOutputWithContext(context.Context) ClearInstanceOperationArrayOutput
}

type ClearInstanceOperationArray []ClearInstanceOperationInput

func (ClearInstanceOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClearInstanceOperation)(nil)).Elem()
}

func (i ClearInstanceOperationArray) ToClearInstanceOperationArrayOutput() ClearInstanceOperationArrayOutput {
	return i.ToClearInstanceOperationArrayOutputWithContext(context.Background())
}

func (i ClearInstanceOperationArray) ToClearInstanceOperationArrayOutputWithContext(ctx context.Context) ClearInstanceOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClearInstanceOperationArrayOutput)
}

// ClearInstanceOperationMapInput is an input type that accepts ClearInstanceOperationMap and ClearInstanceOperationMapOutput values.
// You can construct a concrete instance of `ClearInstanceOperationMapInput` via:
//
//	ClearInstanceOperationMap{ "key": ClearInstanceOperationArgs{...} }
type ClearInstanceOperationMapInput interface {
	pulumi.Input

	ToClearInstanceOperationMapOutput() ClearInstanceOperationMapOutput
	ToClearInstanceOperationMapOutputWithContext(context.Context) ClearInstanceOperationMapOutput
}

type ClearInstanceOperationMap map[string]ClearInstanceOperationInput

func (ClearInstanceOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClearInstanceOperation)(nil)).Elem()
}

func (i ClearInstanceOperationMap) ToClearInstanceOperationMapOutput() ClearInstanceOperationMapOutput {
	return i.ToClearInstanceOperationMapOutputWithContext(context.Background())
}

func (i ClearInstanceOperationMap) ToClearInstanceOperationMapOutputWithContext(ctx context.Context) ClearInstanceOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClearInstanceOperationMapOutput)
}

type ClearInstanceOperationOutput struct{ *pulumi.OutputState }

func (ClearInstanceOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClearInstanceOperation)(nil)).Elem()
}

func (o ClearInstanceOperationOutput) ToClearInstanceOperationOutput() ClearInstanceOperationOutput {
	return o
}

func (o ClearInstanceOperationOutput) ToClearInstanceOperationOutputWithContext(ctx context.Context) ClearInstanceOperationOutput {
	return o
}

// The ID of instance.
func (o ClearInstanceOperationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClearInstanceOperation) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Redis instance password (password-free instances do not need to pass passwords, non-password-free instances must be transmitted).
func (o ClearInstanceOperationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClearInstanceOperation) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

type ClearInstanceOperationArrayOutput struct{ *pulumi.OutputState }

func (ClearInstanceOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClearInstanceOperation)(nil)).Elem()
}

func (o ClearInstanceOperationArrayOutput) ToClearInstanceOperationArrayOutput() ClearInstanceOperationArrayOutput {
	return o
}

func (o ClearInstanceOperationArrayOutput) ToClearInstanceOperationArrayOutputWithContext(ctx context.Context) ClearInstanceOperationArrayOutput {
	return o
}

func (o ClearInstanceOperationArrayOutput) Index(i pulumi.IntInput) ClearInstanceOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClearInstanceOperation {
		return vs[0].([]*ClearInstanceOperation)[vs[1].(int)]
	}).(ClearInstanceOperationOutput)
}

type ClearInstanceOperationMapOutput struct{ *pulumi.OutputState }

func (ClearInstanceOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClearInstanceOperation)(nil)).Elem()
}

func (o ClearInstanceOperationMapOutput) ToClearInstanceOperationMapOutput() ClearInstanceOperationMapOutput {
	return o
}

func (o ClearInstanceOperationMapOutput) ToClearInstanceOperationMapOutputWithContext(ctx context.Context) ClearInstanceOperationMapOutput {
	return o
}

func (o ClearInstanceOperationMapOutput) MapIndex(k pulumi.StringInput) ClearInstanceOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClearInstanceOperation {
		return vs[0].(map[string]*ClearInstanceOperation)[vs[1].(string)]
	}).(ClearInstanceOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClearInstanceOperationInput)(nil)).Elem(), &ClearInstanceOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClearInstanceOperationArrayInput)(nil)).Elem(), ClearInstanceOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClearInstanceOperationMapInput)(nil)).Elem(), ClearInstanceOperationMap{})
	pulumi.RegisterOutputType(ClearInstanceOperationOutput{})
	pulumi.RegisterOutputType(ClearInstanceOperationArrayOutput{})
	pulumi.RegisterOutputType(ClearInstanceOperationMapOutput{})
}
