// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a redis param
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Redis.NewParam(ctx, "param", &Redis.ParamArgs{
//				InstanceId: pulumi.String("crs-c1nl9rpv"),
//				InstanceParams: pulumi.AnyMap{
//					"cluster-node-timeout":          pulumi.Any("15000"),
//					"disable-command-list":          pulumi.Any("\"\""),
//					"hash-max-ziplist-entries":      pulumi.Any("512"),
//					"hash-max-ziplist-value":        pulumi.Any("64"),
//					"hz":                            pulumi.Any("10"),
//					"lazyfree-lazy-eviction":        pulumi.Any("yes"),
//					"lazyfree-lazy-expire":          pulumi.Any("yes"),
//					"lazyfree-lazy-server-del":      pulumi.Any("yes"),
//					"maxmemory-policy":              pulumi.Any("noeviction"),
//					"notify-keyspace-events":        pulumi.Any("\"\""),
//					"proxy-slowlog-log-slower-than": pulumi.Any("500"),
//					"replica-lazy-flush":            pulumi.Any("yes"),
//					"sentineauth":                   pulumi.Any("no"),
//					"set-max-intset-entries":        pulumi.Any("512"),
//					"slowlog-log-slower-than":       pulumi.Any("10"),
//					"timeout":                       pulumi.Any("31536000"),
//					"zset-max-ziplist-entries":      pulumi.Any("128"),
//					"zset-max-ziplist-value":        pulumi.Any("64"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// redis param can be imported using the instanceId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Redis/param:Param param crs-c1nl9rpv
//
// ```
type Param struct {
	pulumi.CustomResourceState

	// The ID of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// A list of parameters modified by the instance.
	InstanceParams pulumi.MapOutput `pulumi:"instanceParams"`
}

// NewParam registers a new resource with the given unique name, arguments, and options.
func NewParam(ctx *pulumi.Context,
	name string, args *ParamArgs, opts ...pulumi.ResourceOption) (*Param, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.InstanceParams == nil {
		return nil, errors.New("invalid value for required argument 'InstanceParams'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Param
	err := ctx.RegisterResource("tencentcloud:Redis/param:Param", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParam gets an existing Param resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParamState, opts ...pulumi.ResourceOption) (*Param, error) {
	var resource Param
	err := ctx.ReadResource("tencentcloud:Redis/param:Param", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Param resources.
type paramState struct {
	// The ID of instance.
	InstanceId *string `pulumi:"instanceId"`
	// A list of parameters modified by the instance.
	InstanceParams map[string]interface{} `pulumi:"instanceParams"`
}

type ParamState struct {
	// The ID of instance.
	InstanceId pulumi.StringPtrInput
	// A list of parameters modified by the instance.
	InstanceParams pulumi.MapInput
}

func (ParamState) ElementType() reflect.Type {
	return reflect.TypeOf((*paramState)(nil)).Elem()
}

type paramArgs struct {
	// The ID of instance.
	InstanceId string `pulumi:"instanceId"`
	// A list of parameters modified by the instance.
	InstanceParams map[string]interface{} `pulumi:"instanceParams"`
}

// The set of arguments for constructing a Param resource.
type ParamArgs struct {
	// The ID of instance.
	InstanceId pulumi.StringInput
	// A list of parameters modified by the instance.
	InstanceParams pulumi.MapInput
}

func (ParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*paramArgs)(nil)).Elem()
}

type ParamInput interface {
	pulumi.Input

	ToParamOutput() ParamOutput
	ToParamOutputWithContext(ctx context.Context) ParamOutput
}

func (*Param) ElementType() reflect.Type {
	return reflect.TypeOf((**Param)(nil)).Elem()
}

func (i *Param) ToParamOutput() ParamOutput {
	return i.ToParamOutputWithContext(context.Background())
}

func (i *Param) ToParamOutputWithContext(ctx context.Context) ParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamOutput)
}

// ParamArrayInput is an input type that accepts ParamArray and ParamArrayOutput values.
// You can construct a concrete instance of `ParamArrayInput` via:
//
//	ParamArray{ ParamArgs{...} }
type ParamArrayInput interface {
	pulumi.Input

	ToParamArrayOutput() ParamArrayOutput
	ToParamArrayOutputWithContext(context.Context) ParamArrayOutput
}

type ParamArray []ParamInput

func (ParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Param)(nil)).Elem()
}

func (i ParamArray) ToParamArrayOutput() ParamArrayOutput {
	return i.ToParamArrayOutputWithContext(context.Background())
}

func (i ParamArray) ToParamArrayOutputWithContext(ctx context.Context) ParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamArrayOutput)
}

// ParamMapInput is an input type that accepts ParamMap and ParamMapOutput values.
// You can construct a concrete instance of `ParamMapInput` via:
//
//	ParamMap{ "key": ParamArgs{...} }
type ParamMapInput interface {
	pulumi.Input

	ToParamMapOutput() ParamMapOutput
	ToParamMapOutputWithContext(context.Context) ParamMapOutput
}

type ParamMap map[string]ParamInput

func (ParamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Param)(nil)).Elem()
}

func (i ParamMap) ToParamMapOutput() ParamMapOutput {
	return i.ToParamMapOutputWithContext(context.Background())
}

func (i ParamMap) ToParamMapOutputWithContext(ctx context.Context) ParamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamMapOutput)
}

type ParamOutput struct{ *pulumi.OutputState }

func (ParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Param)(nil)).Elem()
}

func (o ParamOutput) ToParamOutput() ParamOutput {
	return o
}

func (o ParamOutput) ToParamOutputWithContext(ctx context.Context) ParamOutput {
	return o
}

// The ID of instance.
func (o ParamOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Param) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// A list of parameters modified by the instance.
func (o ParamOutput) InstanceParams() pulumi.MapOutput {
	return o.ApplyT(func(v *Param) pulumi.MapOutput { return v.InstanceParams }).(pulumi.MapOutput)
}

type ParamArrayOutput struct{ *pulumi.OutputState }

func (ParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Param)(nil)).Elem()
}

func (o ParamArrayOutput) ToParamArrayOutput() ParamArrayOutput {
	return o
}

func (o ParamArrayOutput) ToParamArrayOutputWithContext(ctx context.Context) ParamArrayOutput {
	return o
}

func (o ParamArrayOutput) Index(i pulumi.IntInput) ParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Param {
		return vs[0].([]*Param)[vs[1].(int)]
	}).(ParamOutput)
}

type ParamMapOutput struct{ *pulumi.OutputState }

func (ParamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Param)(nil)).Elem()
}

func (o ParamMapOutput) ToParamMapOutput() ParamMapOutput {
	return o
}

func (o ParamMapOutput) ToParamMapOutputWithContext(ctx context.Context) ParamMapOutput {
	return o
}

func (o ParamMapOutput) MapIndex(k pulumi.StringInput) ParamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Param {
		return vs[0].(map[string]*Param)[vs[1].(string)]
	}).(ParamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ParamInput)(nil)).Elem(), &Param{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamArrayInput)(nil)).Elem(), ParamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamMapInput)(nil)).Elem(), ParamMap{})
	pulumi.RegisterOutputType(ParamOutput{})
	pulumi.RegisterOutputType(ParamArrayOutput{})
	pulumi.RegisterOutputType(ParamMapOutput{})
}
