// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a redis readOnly
//
// ## Example Usage
// ### Set instance input mode
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zone, err := Redis.GetZoneConfig(ctx, &redis.GetZoneConfigArgs{
//				TypeId: pulumi.IntRef(7),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(zone.Lists[1].Zone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			fooGroup, err := Security.NewGroup(ctx, "fooGroup", nil)
//			if err != nil {
//				return err
//			}
//			_, err = Security.NewGroupLiteRule(ctx, "fooGroupLiteRule", &Security.GroupLiteRuleArgs{
//				SecurityGroupId: fooGroup.ID(),
//				Ingresses: pulumi.StringArray{
//					pulumi.String("ACCEPT#192.168.1.0/24#80#TCP"),
//					pulumi.String("DROP#8.8.8.8#80,90#UDP"),
//					pulumi.String("DROP#0.0.0.0/0#80-90#TCP"),
//				},
//				Egresses: pulumi.StringArray{
//					pulumi.String("ACCEPT#192.168.0.0/16#ALL#TCP"),
//					pulumi.String("ACCEPT#10.0.0.0/8#ALL#ICMP"),
//					pulumi.String("DROP#0.0.0.0/0#ALL#ALL"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := Redis.NewInstance(ctx, "fooInstance", &Redis.InstanceArgs{
//				AvailabilityZone: pulumi.String(zone.Lists[0].Zone),
//				TypeId:           pulumi.Int(zone.Lists[0].TypeId),
//				Password:         pulumi.String("test12345789"),
//				MemSize:          pulumi.Int(8192),
//				RedisShardNum:    pulumi.Int(zone.Lists[0].RedisShardNums[0]),
//				RedisReplicasNum: pulumi.Int(zone.Lists[0].RedisReplicasNums[0]),
//				Port:             pulumi.Int(6379),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				SecurityGroups: pulumi.StringArray{
//					fooGroup.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Redis.NewReadOnly(ctx, "readOnly", &Redis.ReadOnlyArgs{
//				InstanceId: fooInstance.ID(),
//				InputMode:  pulumi.String("0"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// redis read_only can be imported using the instanceId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Redis/readOnly:ReadOnly read_only crs-c1nl9rpv
//
// ```
type ReadOnly struct {
	pulumi.CustomResourceState

	// Instance input mode: `0`: read-write; `1`: read-only.
	InputMode pulumi.StringOutput `pulumi:"inputMode"`
	// The ID of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewReadOnly registers a new resource with the given unique name, arguments, and options.
func NewReadOnly(ctx *pulumi.Context,
	name string, args *ReadOnlyArgs, opts ...pulumi.ResourceOption) (*ReadOnly, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InputMode == nil {
		return nil, errors.New("invalid value for required argument 'InputMode'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ReadOnly
	err := ctx.RegisterResource("tencentcloud:Redis/readOnly:ReadOnly", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReadOnly gets an existing ReadOnly resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReadOnly(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReadOnlyState, opts ...pulumi.ResourceOption) (*ReadOnly, error) {
	var resource ReadOnly
	err := ctx.ReadResource("tencentcloud:Redis/readOnly:ReadOnly", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReadOnly resources.
type readOnlyState struct {
	// Instance input mode: `0`: read-write; `1`: read-only.
	InputMode *string `pulumi:"inputMode"`
	// The ID of instance.
	InstanceId *string `pulumi:"instanceId"`
}

type ReadOnlyState struct {
	// Instance input mode: `0`: read-write; `1`: read-only.
	InputMode pulumi.StringPtrInput
	// The ID of instance.
	InstanceId pulumi.StringPtrInput
}

func (ReadOnlyState) ElementType() reflect.Type {
	return reflect.TypeOf((*readOnlyState)(nil)).Elem()
}

type readOnlyArgs struct {
	// Instance input mode: `0`: read-write; `1`: read-only.
	InputMode string `pulumi:"inputMode"`
	// The ID of instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a ReadOnly resource.
type ReadOnlyArgs struct {
	// Instance input mode: `0`: read-write; `1`: read-only.
	InputMode pulumi.StringInput
	// The ID of instance.
	InstanceId pulumi.StringInput
}

func (ReadOnlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*readOnlyArgs)(nil)).Elem()
}

type ReadOnlyInput interface {
	pulumi.Input

	ToReadOnlyOutput() ReadOnlyOutput
	ToReadOnlyOutputWithContext(ctx context.Context) ReadOnlyOutput
}

func (*ReadOnly) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadOnly)(nil)).Elem()
}

func (i *ReadOnly) ToReadOnlyOutput() ReadOnlyOutput {
	return i.ToReadOnlyOutputWithContext(context.Background())
}

func (i *ReadOnly) ToReadOnlyOutputWithContext(ctx context.Context) ReadOnlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadOnlyOutput)
}

// ReadOnlyArrayInput is an input type that accepts ReadOnlyArray and ReadOnlyArrayOutput values.
// You can construct a concrete instance of `ReadOnlyArrayInput` via:
//
//	ReadOnlyArray{ ReadOnlyArgs{...} }
type ReadOnlyArrayInput interface {
	pulumi.Input

	ToReadOnlyArrayOutput() ReadOnlyArrayOutput
	ToReadOnlyArrayOutputWithContext(context.Context) ReadOnlyArrayOutput
}

type ReadOnlyArray []ReadOnlyInput

func (ReadOnlyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReadOnly)(nil)).Elem()
}

func (i ReadOnlyArray) ToReadOnlyArrayOutput() ReadOnlyArrayOutput {
	return i.ToReadOnlyArrayOutputWithContext(context.Background())
}

func (i ReadOnlyArray) ToReadOnlyArrayOutputWithContext(ctx context.Context) ReadOnlyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadOnlyArrayOutput)
}

// ReadOnlyMapInput is an input type that accepts ReadOnlyMap and ReadOnlyMapOutput values.
// You can construct a concrete instance of `ReadOnlyMapInput` via:
//
//	ReadOnlyMap{ "key": ReadOnlyArgs{...} }
type ReadOnlyMapInput interface {
	pulumi.Input

	ToReadOnlyMapOutput() ReadOnlyMapOutput
	ToReadOnlyMapOutputWithContext(context.Context) ReadOnlyMapOutput
}

type ReadOnlyMap map[string]ReadOnlyInput

func (ReadOnlyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReadOnly)(nil)).Elem()
}

func (i ReadOnlyMap) ToReadOnlyMapOutput() ReadOnlyMapOutput {
	return i.ToReadOnlyMapOutputWithContext(context.Background())
}

func (i ReadOnlyMap) ToReadOnlyMapOutputWithContext(ctx context.Context) ReadOnlyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadOnlyMapOutput)
}

type ReadOnlyOutput struct{ *pulumi.OutputState }

func (ReadOnlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadOnly)(nil)).Elem()
}

func (o ReadOnlyOutput) ToReadOnlyOutput() ReadOnlyOutput {
	return o
}

func (o ReadOnlyOutput) ToReadOnlyOutputWithContext(ctx context.Context) ReadOnlyOutput {
	return o
}

// Instance input mode: `0`: read-write; `1`: read-only.
func (o ReadOnlyOutput) InputMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadOnly) pulumi.StringOutput { return v.InputMode }).(pulumi.StringOutput)
}

// The ID of instance.
func (o ReadOnlyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadOnly) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type ReadOnlyArrayOutput struct{ *pulumi.OutputState }

func (ReadOnlyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReadOnly)(nil)).Elem()
}

func (o ReadOnlyArrayOutput) ToReadOnlyArrayOutput() ReadOnlyArrayOutput {
	return o
}

func (o ReadOnlyArrayOutput) ToReadOnlyArrayOutputWithContext(ctx context.Context) ReadOnlyArrayOutput {
	return o
}

func (o ReadOnlyArrayOutput) Index(i pulumi.IntInput) ReadOnlyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReadOnly {
		return vs[0].([]*ReadOnly)[vs[1].(int)]
	}).(ReadOnlyOutput)
}

type ReadOnlyMapOutput struct{ *pulumi.OutputState }

func (ReadOnlyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReadOnly)(nil)).Elem()
}

func (o ReadOnlyMapOutput) ToReadOnlyMapOutput() ReadOnlyMapOutput {
	return o
}

func (o ReadOnlyMapOutput) ToReadOnlyMapOutputWithContext(ctx context.Context) ReadOnlyMapOutput {
	return o
}

func (o ReadOnlyMapOutput) MapIndex(k pulumi.StringInput) ReadOnlyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReadOnly {
		return vs[0].(map[string]*ReadOnly)[vs[1].(string)]
	}).(ReadOnlyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReadOnlyInput)(nil)).Elem(), &ReadOnly{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadOnlyArrayInput)(nil)).Elem(), ReadOnlyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadOnlyMapInput)(nil)).Elem(), ReadOnlyMap{})
	pulumi.RegisterOutputType(ReadOnlyOutput{})
	pulumi.RegisterOutputType(ReadOnlyArrayOutput{})
	pulumi.RegisterOutputType(ReadOnlyMapOutput{})
}
