// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create Redis instance log delivery land set its attributes.
//
// > **NOTE:** When you use an existing cls logset and topic to enable logging, there is no need to set parameters such
// as `period`, `createIndex`, `logRegion`, etc.
//
// ## Example Usage
//
// ### Use cls logset and topic which existed
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Redis.NewLogDelivery(ctx, "delivery", &Redis.LogDeliveryArgs{
//				InstanceId: pulumi.String("crs-dmjj8en7"),
//				LogsetId:   pulumi.String("cc31d9d6-74c0-4888-8b2f-b8148c3bcc5c"),
//				TopicId:    pulumi.String("5c2333e9-0bab-41fd-9f75-c602b3f9545f"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Use exist cls logset and create new topic
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Redis.NewLogDelivery(ctx, "delivery", &Redis.LogDeliveryArgs{
//				CreateIndex: pulumi.Bool(true),
//				InstanceId:  pulumi.String("crs-dmjj8en7"),
//				LogsetId:    pulumi.String("cc31d9d6-74c0-4888-8b2f-b8148c3bcc5c"),
//				Period:      pulumi.Int(20),
//				TopicName:   pulumi.String("test13"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create new cls logset and topic
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Redis.NewLogDelivery(ctx, "delivery", &Redis.LogDeliveryArgs{
//				CreateIndex: pulumi.Bool(true),
//				InstanceId:  pulumi.String("crs-dmjj8en7"),
//				LogRegion:   pulumi.String("ap-guangzhou"),
//				LogsetName:  pulumi.String("test"),
//				Period:      pulumi.Int(20),
//				TopicName:   pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Redis log delivery can be imported, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Redis/logDelivery:LogDelivery delivery crs-dmjj8en7
// ```
type LogDelivery struct {
	pulumi.CustomResourceState

	// Whether to create an index when creating a log topic.
	CreateIndex pulumi.BoolOutput `pulumi:"createIndex"`
	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The region where the log set is located; if not specified, the region where the instance is located will be used by default.
	LogRegion pulumi.StringOutput `pulumi:"logRegion"`
	// The ID of the log set being delivered.
	LogsetId pulumi.StringOutput `pulumi:"logsetId"`
	// Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
	LogsetName pulumi.StringOutput `pulumi:"logsetName"`
	// Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
	Period pulumi.IntOutput `pulumi:"period"`
	// The ID of the topic being delivered.
	TopicId pulumi.StringOutput `pulumi:"topicId"`
	// Log topic name, required when TopicId is empty, a new log topic will be automatically created.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
}

// NewLogDelivery registers a new resource with the given unique name, arguments, and options.
func NewLogDelivery(ctx *pulumi.Context,
	name string, args *LogDeliveryArgs, opts ...pulumi.ResourceOption) (*LogDelivery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogDelivery
	err := ctx.RegisterResource("tencentcloud:Redis/logDelivery:LogDelivery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogDelivery gets an existing LogDelivery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogDelivery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogDeliveryState, opts ...pulumi.ResourceOption) (*LogDelivery, error) {
	var resource LogDelivery
	err := ctx.ReadResource("tencentcloud:Redis/logDelivery:LogDelivery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogDelivery resources.
type logDeliveryState struct {
	// Whether to create an index when creating a log topic.
	CreateIndex *bool `pulumi:"createIndex"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// The region where the log set is located; if not specified, the region where the instance is located will be used by default.
	LogRegion *string `pulumi:"logRegion"`
	// The ID of the log set being delivered.
	LogsetId *string `pulumi:"logsetId"`
	// Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
	LogsetName *string `pulumi:"logsetName"`
	// Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
	Period *int `pulumi:"period"`
	// The ID of the topic being delivered.
	TopicId *string `pulumi:"topicId"`
	// Log topic name, required when TopicId is empty, a new log topic will be automatically created.
	TopicName *string `pulumi:"topicName"`
}

type LogDeliveryState struct {
	// Whether to create an index when creating a log topic.
	CreateIndex pulumi.BoolPtrInput
	// Instance ID.
	InstanceId pulumi.StringPtrInput
	// The region where the log set is located; if not specified, the region where the instance is located will be used by default.
	LogRegion pulumi.StringPtrInput
	// The ID of the log set being delivered.
	LogsetId pulumi.StringPtrInput
	// Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
	LogsetName pulumi.StringPtrInput
	// Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
	Period pulumi.IntPtrInput
	// The ID of the topic being delivered.
	TopicId pulumi.StringPtrInput
	// Log topic name, required when TopicId is empty, a new log topic will be automatically created.
	TopicName pulumi.StringPtrInput
}

func (LogDeliveryState) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliveryState)(nil)).Elem()
}

type logDeliveryArgs struct {
	// Whether to create an index when creating a log topic.
	CreateIndex *bool `pulumi:"createIndex"`
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// The region where the log set is located; if not specified, the region where the instance is located will be used by default.
	LogRegion *string `pulumi:"logRegion"`
	// The ID of the log set being delivered.
	LogsetId *string `pulumi:"logsetId"`
	// Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
	LogsetName *string `pulumi:"logsetName"`
	// Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
	Period *int `pulumi:"period"`
	// The ID of the topic being delivered.
	TopicId *string `pulumi:"topicId"`
	// Log topic name, required when TopicId is empty, a new log topic will be automatically created.
	TopicName *string `pulumi:"topicName"`
}

// The set of arguments for constructing a LogDelivery resource.
type LogDeliveryArgs struct {
	// Whether to create an index when creating a log topic.
	CreateIndex pulumi.BoolPtrInput
	// Instance ID.
	InstanceId pulumi.StringInput
	// The region where the log set is located; if not specified, the region where the instance is located will be used by default.
	LogRegion pulumi.StringPtrInput
	// The ID of the log set being delivered.
	LogsetId pulumi.StringPtrInput
	// Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
	LogsetName pulumi.StringPtrInput
	// Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
	Period pulumi.IntPtrInput
	// The ID of the topic being delivered.
	TopicId pulumi.StringPtrInput
	// Log topic name, required when TopicId is empty, a new log topic will be automatically created.
	TopicName pulumi.StringPtrInput
}

func (LogDeliveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logDeliveryArgs)(nil)).Elem()
}

type LogDeliveryInput interface {
	pulumi.Input

	ToLogDeliveryOutput() LogDeliveryOutput
	ToLogDeliveryOutputWithContext(ctx context.Context) LogDeliveryOutput
}

func (*LogDelivery) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDelivery)(nil)).Elem()
}

func (i *LogDelivery) ToLogDeliveryOutput() LogDeliveryOutput {
	return i.ToLogDeliveryOutputWithContext(context.Background())
}

func (i *LogDelivery) ToLogDeliveryOutputWithContext(ctx context.Context) LogDeliveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryOutput)
}

// LogDeliveryArrayInput is an input type that accepts LogDeliveryArray and LogDeliveryArrayOutput values.
// You can construct a concrete instance of `LogDeliveryArrayInput` via:
//
//	LogDeliveryArray{ LogDeliveryArgs{...} }
type LogDeliveryArrayInput interface {
	pulumi.Input

	ToLogDeliveryArrayOutput() LogDeliveryArrayOutput
	ToLogDeliveryArrayOutputWithContext(context.Context) LogDeliveryArrayOutput
}

type LogDeliveryArray []LogDeliveryInput

func (LogDeliveryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDelivery)(nil)).Elem()
}

func (i LogDeliveryArray) ToLogDeliveryArrayOutput() LogDeliveryArrayOutput {
	return i.ToLogDeliveryArrayOutputWithContext(context.Background())
}

func (i LogDeliveryArray) ToLogDeliveryArrayOutputWithContext(ctx context.Context) LogDeliveryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryArrayOutput)
}

// LogDeliveryMapInput is an input type that accepts LogDeliveryMap and LogDeliveryMapOutput values.
// You can construct a concrete instance of `LogDeliveryMapInput` via:
//
//	LogDeliveryMap{ "key": LogDeliveryArgs{...} }
type LogDeliveryMapInput interface {
	pulumi.Input

	ToLogDeliveryMapOutput() LogDeliveryMapOutput
	ToLogDeliveryMapOutputWithContext(context.Context) LogDeliveryMapOutput
}

type LogDeliveryMap map[string]LogDeliveryInput

func (LogDeliveryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDelivery)(nil)).Elem()
}

func (i LogDeliveryMap) ToLogDeliveryMapOutput() LogDeliveryMapOutput {
	return i.ToLogDeliveryMapOutputWithContext(context.Background())
}

func (i LogDeliveryMap) ToLogDeliveryMapOutputWithContext(ctx context.Context) LogDeliveryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDeliveryMapOutput)
}

type LogDeliveryOutput struct{ *pulumi.OutputState }

func (LogDeliveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogDelivery)(nil)).Elem()
}

func (o LogDeliveryOutput) ToLogDeliveryOutput() LogDeliveryOutput {
	return o
}

func (o LogDeliveryOutput) ToLogDeliveryOutputWithContext(ctx context.Context) LogDeliveryOutput {
	return o
}

// Whether to create an index when creating a log topic.
func (o LogDeliveryOutput) CreateIndex() pulumi.BoolOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.BoolOutput { return v.CreateIndex }).(pulumi.BoolOutput)
}

// Instance ID.
func (o LogDeliveryOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The region where the log set is located; if not specified, the region where the instance is located will be used by default.
func (o LogDeliveryOutput) LogRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringOutput { return v.LogRegion }).(pulumi.StringOutput)
}

// The ID of the log set being delivered.
func (o LogDeliveryOutput) LogsetId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringOutput { return v.LogsetId }).(pulumi.StringOutput)
}

// Log set name. If LogsetId does not specify a specific log set ID, please configure this parameter to set the log set name, and the system will automatically create a new log set with the specified name.
func (o LogDeliveryOutput) LogsetName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringOutput { return v.LogsetName }).(pulumi.StringOutput)
}

// Log storage time, defaults to 30 days, with an optional range of 1-3600 days.
func (o LogDeliveryOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.IntOutput { return v.Period }).(pulumi.IntOutput)
}

// The ID of the topic being delivered.
func (o LogDeliveryOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

// Log topic name, required when TopicId is empty, a new log topic will be automatically created.
func (o LogDeliveryOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogDelivery) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

type LogDeliveryArrayOutput struct{ *pulumi.OutputState }

func (LogDeliveryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogDelivery)(nil)).Elem()
}

func (o LogDeliveryArrayOutput) ToLogDeliveryArrayOutput() LogDeliveryArrayOutput {
	return o
}

func (o LogDeliveryArrayOutput) ToLogDeliveryArrayOutputWithContext(ctx context.Context) LogDeliveryArrayOutput {
	return o
}

func (o LogDeliveryArrayOutput) Index(i pulumi.IntInput) LogDeliveryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogDelivery {
		return vs[0].([]*LogDelivery)[vs[1].(int)]
	}).(LogDeliveryOutput)
}

type LogDeliveryMapOutput struct{ *pulumi.OutputState }

func (LogDeliveryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogDelivery)(nil)).Elem()
}

func (o LogDeliveryMapOutput) ToLogDeliveryMapOutput() LogDeliveryMapOutput {
	return o
}

func (o LogDeliveryMapOutput) ToLogDeliveryMapOutputWithContext(ctx context.Context) LogDeliveryMapOutput {
	return o
}

func (o LogDeliveryMapOutput) MapIndex(k pulumi.StringInput) LogDeliveryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogDelivery {
		return vs[0].(map[string]*LogDelivery)[vs[1].(string)]
	}).(LogDeliveryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryInput)(nil)).Elem(), &LogDelivery{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryArrayInput)(nil)).Elem(), LogDeliveryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogDeliveryMapInput)(nil)).Elem(), LogDeliveryMap{})
	pulumi.RegisterOutputType(LogDeliveryOutput{})
	pulumi.RegisterOutputType(LogDeliveryArrayOutput{})
	pulumi.RegisterOutputType(LogDeliveryMapOutput{})
}
