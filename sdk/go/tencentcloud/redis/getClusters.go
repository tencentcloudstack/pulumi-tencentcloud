// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Use this data source to query detailed information of redis clusters
//
// ## Example Usage
//
// ### Query all instance
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Redis.GetClusters(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Also Support the following query conditions
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Redis"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _, err := Redis.GetClusters(ctx, &redis.GetClustersArgs{
// AutoRenewFlags: interface{}{
// 0,
// 1,
// 2,
// },
// ClusterName: pulumi.StringRef("crs-cdc-9nyfki8h"),
// DedicatedClusterId: pulumi.StringRef("cluster-0astoh6a"),
// ProjectIds: interface{}{
// 0,
// 1,
// },
// RedisClusterIds: []string{
// "crs-cdc-9nyfki8h",
// },
// Statuses: interface{}{
// 0,
// 1,
// 2,
// },
// }, nil);
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
// <!--End PulumiCodeChooser -->
func GetClusters(ctx *pulumi.Context, args *GetClustersArgs, opts ...pulumi.InvokeOption) (*GetClustersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetClustersResult
	err := ctx.Invoke("tencentcloud:Redis/getClusters:getClusters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusters.
type GetClustersArgs struct {
	// Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
	AutoRenewFlags []int `pulumi:"autoRenewFlags"`
	// Cluster name.
	ClusterName *string `pulumi:"clusterName"`
	// Dedicated cluster Id.
	DedicatedClusterId *string `pulumi:"dedicatedClusterId"`
	// Project Ids.
	ProjectIds []int `pulumi:"projectIds"`
	// Redis Cluster Ids.
	RedisClusterIds []string `pulumi:"redisClusterIds"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Cluster status: 1- In process, 2- Running, 3- Isolated.
	Statuses []int `pulumi:"statuses"`
}

// A collection of values returned by getClusters.
type GetClustersResult struct {
	// Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
	AutoRenewFlags []int `pulumi:"autoRenewFlags"`
	// Cluster name.
	ClusterName *string `pulumi:"clusterName"`
	// Dedicated cluster Id.
	DedicatedClusterId *string `pulumi:"dedicatedClusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id              string   `pulumi:"id"`
	ProjectIds      []int    `pulumi:"projectIds"`
	RedisClusterIds []string `pulumi:"redisClusterIds"`
	// .
	Resources        []GetClustersResource `pulumi:"resources"`
	ResultOutputFile *string               `pulumi:"resultOutputFile"`
	// Cluster status: 1- In process, 2- Running, 3- Isolated.
	Statuses []int `pulumi:"statuses"`
}

func GetClustersOutput(ctx *pulumi.Context, args GetClustersOutputArgs, opts ...pulumi.InvokeOption) GetClustersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetClustersResult, error) {
			args := v.(GetClustersArgs)
			r, err := GetClusters(ctx, &args, opts...)
			var s GetClustersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetClustersResultOutput)
}

// A collection of arguments for invoking getClusters.
type GetClustersOutputArgs struct {
	// Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
	AutoRenewFlags pulumi.IntArrayInput `pulumi:"autoRenewFlags"`
	// Cluster name.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// Dedicated cluster Id.
	DedicatedClusterId pulumi.StringPtrInput `pulumi:"dedicatedClusterId"`
	// Project Ids.
	ProjectIds pulumi.IntArrayInput `pulumi:"projectIds"`
	// Redis Cluster Ids.
	RedisClusterIds pulumi.StringArrayInput `pulumi:"redisClusterIds"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Cluster status: 1- In process, 2- Running, 3- Isolated.
	Statuses pulumi.IntArrayInput `pulumi:"statuses"`
}

func (GetClustersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersArgs)(nil)).Elem()
}

// A collection of values returned by getClusters.
type GetClustersResultOutput struct{ *pulumi.OutputState }

func (GetClustersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersResult)(nil)).Elem()
}

func (o GetClustersResultOutput) ToGetClustersResultOutput() GetClustersResultOutput {
	return o
}

func (o GetClustersResultOutput) ToGetClustersResultOutputWithContext(ctx context.Context) GetClustersResultOutput {
	return o
}

// Renewal mode: 0- default state (manual renewal); 1- Automatic renewal; 2- Clearly stating that automatic renewal is not allowed.
func (o GetClustersResultOutput) AutoRenewFlags() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetClustersResult) []int { return v.AutoRenewFlags }).(pulumi.IntArrayOutput)
}

// Cluster name.
func (o GetClustersResultOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClustersResult) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// Dedicated cluster Id.
func (o GetClustersResultOutput) DedicatedClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClustersResult) *string { return v.DedicatedClusterId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetClustersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetClustersResultOutput) ProjectIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetClustersResult) []int { return v.ProjectIds }).(pulumi.IntArrayOutput)
}

func (o GetClustersResultOutput) RedisClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClustersResult) []string { return v.RedisClusterIds }).(pulumi.StringArrayOutput)
}

// .
func (o GetClustersResultOutput) Resources() GetClustersResourceArrayOutput {
	return o.ApplyT(func(v GetClustersResult) []GetClustersResource { return v.Resources }).(GetClustersResourceArrayOutput)
}

func (o GetClustersResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClustersResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Cluster status: 1- In process, 2- Running, 3- Isolated.
func (o GetClustersResultOutput) Statuses() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetClustersResult) []int { return v.Statuses }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetClustersResultOutput{})
}
