// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbbrain

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of dbbrain diagDbInstances
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dbbrain"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dbbrain"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dbbrain.GetDiagDbInstances(ctx, &dbbrain.GetDiagDbInstancesArgs{
//				InstanceNames: []string{
//					"keep_preset_mysql",
//				},
//				IsSupported: true,
//				Product:     "mysql",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDiagDbInstances(ctx *pulumi.Context, args *GetDiagDbInstancesArgs, opts ...pulumi.InvokeOption) (*GetDiagDbInstancesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetDiagDbInstancesResult
	err := ctx.Invoke("tencentcloud:Dbbrain/getDiagDbInstances:getDiagDbInstances", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDiagDbInstances.
type GetDiagDbInstancesArgs struct {
	// query based on the instance ID condition.
	InstanceIds []string `pulumi:"instanceIds"`
	// query based on the instance name condition.
	InstanceNames []string `pulumi:"instanceNames"`
	// whether it is an instance supported by DBbrain, always pass `true`.
	IsSupported bool `pulumi:"isSupported"`
	// service product type, supported values include: `mysql` - cloud database MySQL, `cynosdb` - cloud database TDSQL-C for MySQL, the default is `mysql`.
	Product string `pulumi:"product"`
	// query based on geographical conditions.
	Regions []string `pulumi:"regions"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getDiagDbInstances.
type GetDiagDbInstancesResult struct {
	// all-instance inspection status. `0`: All-instance inspection is enabled; `1`: All-instance inspection is not enabled.
	DbScanStatus int `pulumi:"dbScanStatus"`
	// The provider-assigned unique ID for this managed resource.
	Id            string   `pulumi:"id"`
	InstanceIds   []string `pulumi:"instanceIds"`
	InstanceNames []string `pulumi:"instanceNames"`
	// whether it is an instance supported by DBbrain.
	IsSupported bool `pulumi:"isSupported"`
	// information about the instance.
	Items []GetDiagDbInstancesItem `pulumi:"items"`
	// belongs to the product.
	Product          string   `pulumi:"product"`
	Regions          []string `pulumi:"regions"`
	ResultOutputFile *string  `pulumi:"resultOutputFile"`
}

func GetDiagDbInstancesOutput(ctx *pulumi.Context, args GetDiagDbInstancesOutputArgs, opts ...pulumi.InvokeOption) GetDiagDbInstancesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDiagDbInstancesResult, error) {
			args := v.(GetDiagDbInstancesArgs)
			r, err := GetDiagDbInstances(ctx, &args, opts...)
			var s GetDiagDbInstancesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDiagDbInstancesResultOutput)
}

// A collection of arguments for invoking getDiagDbInstances.
type GetDiagDbInstancesOutputArgs struct {
	// query based on the instance ID condition.
	InstanceIds pulumi.StringArrayInput `pulumi:"instanceIds"`
	// query based on the instance name condition.
	InstanceNames pulumi.StringArrayInput `pulumi:"instanceNames"`
	// whether it is an instance supported by DBbrain, always pass `true`.
	IsSupported pulumi.BoolInput `pulumi:"isSupported"`
	// service product type, supported values include: `mysql` - cloud database MySQL, `cynosdb` - cloud database TDSQL-C for MySQL, the default is `mysql`.
	Product pulumi.StringInput `pulumi:"product"`
	// query based on geographical conditions.
	Regions pulumi.StringArrayInput `pulumi:"regions"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetDiagDbInstancesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDiagDbInstancesArgs)(nil)).Elem()
}

// A collection of values returned by getDiagDbInstances.
type GetDiagDbInstancesResultOutput struct{ *pulumi.OutputState }

func (GetDiagDbInstancesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDiagDbInstancesResult)(nil)).Elem()
}

func (o GetDiagDbInstancesResultOutput) ToGetDiagDbInstancesResultOutput() GetDiagDbInstancesResultOutput {
	return o
}

func (o GetDiagDbInstancesResultOutput) ToGetDiagDbInstancesResultOutputWithContext(ctx context.Context) GetDiagDbInstancesResultOutput {
	return o
}

// all-instance inspection status. `0`: All-instance inspection is enabled; `1`: All-instance inspection is not enabled.
func (o GetDiagDbInstancesResultOutput) DbScanStatus() pulumi.IntOutput {
	return o.ApplyT(func(v GetDiagDbInstancesResult) int { return v.DbScanStatus }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDiagDbInstancesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDiagDbInstancesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDiagDbInstancesResultOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDiagDbInstancesResult) []string { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

func (o GetDiagDbInstancesResultOutput) InstanceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDiagDbInstancesResult) []string { return v.InstanceNames }).(pulumi.StringArrayOutput)
}

// whether it is an instance supported by DBbrain.
func (o GetDiagDbInstancesResultOutput) IsSupported() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDiagDbInstancesResult) bool { return v.IsSupported }).(pulumi.BoolOutput)
}

// information about the instance.
func (o GetDiagDbInstancesResultOutput) Items() GetDiagDbInstancesItemArrayOutput {
	return o.ApplyT(func(v GetDiagDbInstancesResult) []GetDiagDbInstancesItem { return v.Items }).(GetDiagDbInstancesItemArrayOutput)
}

// belongs to the product.
func (o GetDiagDbInstancesResultOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v GetDiagDbInstancesResult) string { return v.Product }).(pulumi.StringOutput)
}

func (o GetDiagDbInstancesResultOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDiagDbInstancesResult) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

func (o GetDiagDbInstancesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDiagDbInstancesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDiagDbInstancesResultOutput{})
}
