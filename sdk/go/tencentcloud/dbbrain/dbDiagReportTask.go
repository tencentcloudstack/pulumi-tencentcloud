// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbbrain

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dbbrain dbDiagReportTask
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dbbrain"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dbbrain.NewDbDiagReportTask(ctx, "dbDiagReportTask", &Dbbrain.DbDiagReportTaskArgs{
//				EndTime:      pulumi.String(fmt.Sprintf("%v%v", "%", "s")),
//				InstanceId:   pulumi.String(fmt.Sprintf("%v%v", "%", "s")),
//				Product:      pulumi.String("mysql"),
//				SendMailFlag: pulumi.Int(0),
//				StartTime:    pulumi.String(fmt.Sprintf("%v%v", "%", "s")),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DbDiagReportTask struct {
	pulumi.CustomResourceState

	// An array of contact group IDs to receive mail from.
	ContactGroups pulumi.IntArrayOutput `pulumi:"contactGroups"`
	// An array of contact IDs to receive emails from.
	ContactPeoples pulumi.IntArrayOutput `pulumi:"contactPeoples"`
	// End time, such as 2020-11-09T14:00:00+08:00.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
	Product pulumi.StringOutput `pulumi:"product"`
	// Whether to send mail: 0 - no, 1 - yes.
	SendMailFlag pulumi.IntOutput `pulumi:"sendMailFlag"`
	// Start time, such as 2020-11-08T14:00:00+08:00.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
}

// NewDbDiagReportTask registers a new resource with the given unique name, arguments, and options.
func NewDbDiagReportTask(ctx *pulumi.Context,
	name string, args *DbDiagReportTaskArgs, opts ...pulumi.ResourceOption) (*DbDiagReportTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndTime == nil {
		return nil, errors.New("invalid value for required argument 'EndTime'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Product == nil {
		return nil, errors.New("invalid value for required argument 'Product'")
	}
	if args.SendMailFlag == nil {
		return nil, errors.New("invalid value for required argument 'SendMailFlag'")
	}
	if args.StartTime == nil {
		return nil, errors.New("invalid value for required argument 'StartTime'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DbDiagReportTask
	err := ctx.RegisterResource("tencentcloud:Dbbrain/dbDiagReportTask:DbDiagReportTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbDiagReportTask gets an existing DbDiagReportTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbDiagReportTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbDiagReportTaskState, opts ...pulumi.ResourceOption) (*DbDiagReportTask, error) {
	var resource DbDiagReportTask
	err := ctx.ReadResource("tencentcloud:Dbbrain/dbDiagReportTask:DbDiagReportTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbDiagReportTask resources.
type dbDiagReportTaskState struct {
	// An array of contact group IDs to receive mail from.
	ContactGroups []int `pulumi:"contactGroups"`
	// An array of contact IDs to receive emails from.
	ContactPeoples []int `pulumi:"contactPeoples"`
	// End time, such as 2020-11-09T14:00:00+08:00.
	EndTime *string `pulumi:"endTime"`
	// instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
	Product *string `pulumi:"product"`
	// Whether to send mail: 0 - no, 1 - yes.
	SendMailFlag *int `pulumi:"sendMailFlag"`
	// Start time, such as 2020-11-08T14:00:00+08:00.
	StartTime *string `pulumi:"startTime"`
}

type DbDiagReportTaskState struct {
	// An array of contact group IDs to receive mail from.
	ContactGroups pulumi.IntArrayInput
	// An array of contact IDs to receive emails from.
	ContactPeoples pulumi.IntArrayInput
	// End time, such as 2020-11-09T14:00:00+08:00.
	EndTime pulumi.StringPtrInput
	// instance id.
	InstanceId pulumi.StringPtrInput
	// Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
	Product pulumi.StringPtrInput
	// Whether to send mail: 0 - no, 1 - yes.
	SendMailFlag pulumi.IntPtrInput
	// Start time, such as 2020-11-08T14:00:00+08:00.
	StartTime pulumi.StringPtrInput
}

func (DbDiagReportTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbDiagReportTaskState)(nil)).Elem()
}

type dbDiagReportTaskArgs struct {
	// An array of contact group IDs to receive mail from.
	ContactGroups []int `pulumi:"contactGroups"`
	// An array of contact IDs to receive emails from.
	ContactPeoples []int `pulumi:"contactPeoples"`
	// End time, such as 2020-11-09T14:00:00+08:00.
	EndTime string `pulumi:"endTime"`
	// instance id.
	InstanceId string `pulumi:"instanceId"`
	// Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
	Product string `pulumi:"product"`
	// Whether to send mail: 0 - no, 1 - yes.
	SendMailFlag int `pulumi:"sendMailFlag"`
	// Start time, such as 2020-11-08T14:00:00+08:00.
	StartTime string `pulumi:"startTime"`
}

// The set of arguments for constructing a DbDiagReportTask resource.
type DbDiagReportTaskArgs struct {
	// An array of contact group IDs to receive mail from.
	ContactGroups pulumi.IntArrayInput
	// An array of contact IDs to receive emails from.
	ContactPeoples pulumi.IntArrayInput
	// End time, such as 2020-11-09T14:00:00+08:00.
	EndTime pulumi.StringInput
	// instance id.
	InstanceId pulumi.StringInput
	// Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
	Product pulumi.StringInput
	// Whether to send mail: 0 - no, 1 - yes.
	SendMailFlag pulumi.IntInput
	// Start time, such as 2020-11-08T14:00:00+08:00.
	StartTime pulumi.StringInput
}

func (DbDiagReportTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbDiagReportTaskArgs)(nil)).Elem()
}

type DbDiagReportTaskInput interface {
	pulumi.Input

	ToDbDiagReportTaskOutput() DbDiagReportTaskOutput
	ToDbDiagReportTaskOutputWithContext(ctx context.Context) DbDiagReportTaskOutput
}

func (*DbDiagReportTask) ElementType() reflect.Type {
	return reflect.TypeOf((**DbDiagReportTask)(nil)).Elem()
}

func (i *DbDiagReportTask) ToDbDiagReportTaskOutput() DbDiagReportTaskOutput {
	return i.ToDbDiagReportTaskOutputWithContext(context.Background())
}

func (i *DbDiagReportTask) ToDbDiagReportTaskOutputWithContext(ctx context.Context) DbDiagReportTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbDiagReportTaskOutput)
}

// DbDiagReportTaskArrayInput is an input type that accepts DbDiagReportTaskArray and DbDiagReportTaskArrayOutput values.
// You can construct a concrete instance of `DbDiagReportTaskArrayInput` via:
//
//	DbDiagReportTaskArray{ DbDiagReportTaskArgs{...} }
type DbDiagReportTaskArrayInput interface {
	pulumi.Input

	ToDbDiagReportTaskArrayOutput() DbDiagReportTaskArrayOutput
	ToDbDiagReportTaskArrayOutputWithContext(context.Context) DbDiagReportTaskArrayOutput
}

type DbDiagReportTaskArray []DbDiagReportTaskInput

func (DbDiagReportTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbDiagReportTask)(nil)).Elem()
}

func (i DbDiagReportTaskArray) ToDbDiagReportTaskArrayOutput() DbDiagReportTaskArrayOutput {
	return i.ToDbDiagReportTaskArrayOutputWithContext(context.Background())
}

func (i DbDiagReportTaskArray) ToDbDiagReportTaskArrayOutputWithContext(ctx context.Context) DbDiagReportTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbDiagReportTaskArrayOutput)
}

// DbDiagReportTaskMapInput is an input type that accepts DbDiagReportTaskMap and DbDiagReportTaskMapOutput values.
// You can construct a concrete instance of `DbDiagReportTaskMapInput` via:
//
//	DbDiagReportTaskMap{ "key": DbDiagReportTaskArgs{...} }
type DbDiagReportTaskMapInput interface {
	pulumi.Input

	ToDbDiagReportTaskMapOutput() DbDiagReportTaskMapOutput
	ToDbDiagReportTaskMapOutputWithContext(context.Context) DbDiagReportTaskMapOutput
}

type DbDiagReportTaskMap map[string]DbDiagReportTaskInput

func (DbDiagReportTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbDiagReportTask)(nil)).Elem()
}

func (i DbDiagReportTaskMap) ToDbDiagReportTaskMapOutput() DbDiagReportTaskMapOutput {
	return i.ToDbDiagReportTaskMapOutputWithContext(context.Background())
}

func (i DbDiagReportTaskMap) ToDbDiagReportTaskMapOutputWithContext(ctx context.Context) DbDiagReportTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbDiagReportTaskMapOutput)
}

type DbDiagReportTaskOutput struct{ *pulumi.OutputState }

func (DbDiagReportTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbDiagReportTask)(nil)).Elem()
}

func (o DbDiagReportTaskOutput) ToDbDiagReportTaskOutput() DbDiagReportTaskOutput {
	return o
}

func (o DbDiagReportTaskOutput) ToDbDiagReportTaskOutputWithContext(ctx context.Context) DbDiagReportTaskOutput {
	return o
}

// An array of contact group IDs to receive mail from.
func (o DbDiagReportTaskOutput) ContactGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DbDiagReportTask) pulumi.IntArrayOutput { return v.ContactGroups }).(pulumi.IntArrayOutput)
}

// An array of contact IDs to receive emails from.
func (o DbDiagReportTaskOutput) ContactPeoples() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DbDiagReportTask) pulumi.IntArrayOutput { return v.ContactPeoples }).(pulumi.IntArrayOutput)
}

// End time, such as 2020-11-09T14:00:00+08:00.
func (o DbDiagReportTaskOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DbDiagReportTask) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// instance id.
func (o DbDiagReportTaskOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbDiagReportTask) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
func (o DbDiagReportTaskOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v *DbDiagReportTask) pulumi.StringOutput { return v.Product }).(pulumi.StringOutput)
}

// Whether to send mail: 0 - no, 1 - yes.
func (o DbDiagReportTaskOutput) SendMailFlag() pulumi.IntOutput {
	return o.ApplyT(func(v *DbDiagReportTask) pulumi.IntOutput { return v.SendMailFlag }).(pulumi.IntOutput)
}

// Start time, such as 2020-11-08T14:00:00+08:00.
func (o DbDiagReportTaskOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DbDiagReportTask) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

type DbDiagReportTaskArrayOutput struct{ *pulumi.OutputState }

func (DbDiagReportTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbDiagReportTask)(nil)).Elem()
}

func (o DbDiagReportTaskArrayOutput) ToDbDiagReportTaskArrayOutput() DbDiagReportTaskArrayOutput {
	return o
}

func (o DbDiagReportTaskArrayOutput) ToDbDiagReportTaskArrayOutputWithContext(ctx context.Context) DbDiagReportTaskArrayOutput {
	return o
}

func (o DbDiagReportTaskArrayOutput) Index(i pulumi.IntInput) DbDiagReportTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbDiagReportTask {
		return vs[0].([]*DbDiagReportTask)[vs[1].(int)]
	}).(DbDiagReportTaskOutput)
}

type DbDiagReportTaskMapOutput struct{ *pulumi.OutputState }

func (DbDiagReportTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbDiagReportTask)(nil)).Elem()
}

func (o DbDiagReportTaskMapOutput) ToDbDiagReportTaskMapOutput() DbDiagReportTaskMapOutput {
	return o
}

func (o DbDiagReportTaskMapOutput) ToDbDiagReportTaskMapOutputWithContext(ctx context.Context) DbDiagReportTaskMapOutput {
	return o
}

func (o DbDiagReportTaskMapOutput) MapIndex(k pulumi.StringInput) DbDiagReportTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbDiagReportTask {
		return vs[0].(map[string]*DbDiagReportTask)[vs[1].(string)]
	}).(DbDiagReportTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbDiagReportTaskInput)(nil)).Elem(), &DbDiagReportTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbDiagReportTaskArrayInput)(nil)).Elem(), DbDiagReportTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbDiagReportTaskMapInput)(nil)).Elem(), DbDiagReportTaskMap{})
	pulumi.RegisterOutputType(DbDiagReportTaskOutput{})
	pulumi.RegisterOutputType(DbDiagReportTaskArrayOutput{})
	pulumi.RegisterOutputType(DbDiagReportTaskMapOutput{})
}
