// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tem

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tem application
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tem"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tem.NewApplication(ctx, "application", &Tem.ApplicationArgs{
//				ApplicationName: pulumi.String("demo"),
//				CodingLanguage:  pulumi.String("JAVA"),
//				Description:     pulumi.String("demo for test"),
//				RepoName:        pulumi.String("qcloud/nginx"),
//				RepoServer:      pulumi.String("ccr.ccs.tencentyun.com"),
//				RepoType:        pulumi.Int(2),
//				Tags: pulumi.AnyMap{
//					"created": pulumi.Any("terraform"),
//				},
//				UseDefaultImageService: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Application struct {
	pulumi.CustomResourceState

	// application name.
	ApplicationName pulumi.StringOutput `pulumi:"applicationName"`
	// program language, like JAVA.
	CodingLanguage pulumi.StringOutput `pulumi:"codingLanguage"`
	// application description.
	Description pulumi.StringOutput `pulumi:"description"`
	// tcr instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// repository name.
	RepoName pulumi.StringPtrOutput `pulumi:"repoName"`
	// registry address.
	RepoServer pulumi.StringPtrOutput `pulumi:"repoServer"`
	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	RepoType pulumi.IntPtrOutput `pulumi:"repoType"`
	// application tag list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// create image repo or not.
	UseDefaultImageService pulumi.IntPtrOutput `pulumi:"useDefaultImageService"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationName == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationName'")
	}
	if args.CodingLanguage == nil {
		return nil, errors.New("invalid value for required argument 'CodingLanguage'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("tencentcloud:Tem/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("tencentcloud:Tem/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// application name.
	ApplicationName *string `pulumi:"applicationName"`
	// program language, like JAVA.
	CodingLanguage *string `pulumi:"codingLanguage"`
	// application description.
	Description *string `pulumi:"description"`
	// tcr instance id.
	InstanceId *string `pulumi:"instanceId"`
	// repository name.
	RepoName *string `pulumi:"repoName"`
	// registry address.
	RepoServer *string `pulumi:"repoServer"`
	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	RepoType *int `pulumi:"repoType"`
	// application tag list.
	Tags map[string]interface{} `pulumi:"tags"`
	// create image repo or not.
	UseDefaultImageService *int `pulumi:"useDefaultImageService"`
}

type ApplicationState struct {
	// application name.
	ApplicationName pulumi.StringPtrInput
	// program language, like JAVA.
	CodingLanguage pulumi.StringPtrInput
	// application description.
	Description pulumi.StringPtrInput
	// tcr instance id.
	InstanceId pulumi.StringPtrInput
	// repository name.
	RepoName pulumi.StringPtrInput
	// registry address.
	RepoServer pulumi.StringPtrInput
	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	RepoType pulumi.IntPtrInput
	// application tag list.
	Tags pulumi.MapInput
	// create image repo or not.
	UseDefaultImageService pulumi.IntPtrInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// application name.
	ApplicationName string `pulumi:"applicationName"`
	// program language, like JAVA.
	CodingLanguage string `pulumi:"codingLanguage"`
	// application description.
	Description string `pulumi:"description"`
	// tcr instance id.
	InstanceId *string `pulumi:"instanceId"`
	// repository name.
	RepoName *string `pulumi:"repoName"`
	// registry address.
	RepoServer *string `pulumi:"repoServer"`
	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	RepoType *int `pulumi:"repoType"`
	// application tag list.
	Tags map[string]interface{} `pulumi:"tags"`
	// create image repo or not.
	UseDefaultImageService *int `pulumi:"useDefaultImageService"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// application name.
	ApplicationName pulumi.StringInput
	// program language, like JAVA.
	CodingLanguage pulumi.StringInput
	// application description.
	Description pulumi.StringInput
	// tcr instance id.
	InstanceId pulumi.StringPtrInput
	// repository name.
	RepoName pulumi.StringPtrInput
	// registry address.
	RepoServer pulumi.StringPtrInput
	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	RepoType pulumi.IntPtrInput
	// application tag list.
	Tags pulumi.MapInput
	// create image repo or not.
	UseDefaultImageService pulumi.IntPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// application name.
func (o ApplicationOutput) ApplicationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationName }).(pulumi.StringOutput)
}

// program language, like JAVA.
func (o ApplicationOutput) CodingLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.CodingLanguage }).(pulumi.StringOutput)
}

// application description.
func (o ApplicationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// tcr instance id.
func (o ApplicationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// repository name.
func (o ApplicationOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.RepoName }).(pulumi.StringPtrOutput)
}

// registry address.
func (o ApplicationOutput) RepoServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.RepoServer }).(pulumi.StringPtrOutput)
}

// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
func (o ApplicationOutput) RepoType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.IntPtrOutput { return v.RepoType }).(pulumi.IntPtrOutput)
}

// application tag list.
func (o ApplicationOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Application) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// create image repo or not.
func (o ApplicationOutput) UseDefaultImageService() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.IntPtrOutput { return v.UseDefaultImageService }).(pulumi.IntPtrOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}
