// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tem

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tem appConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tem"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tem"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tem.NewAppConfig(ctx, "appConfig", &Tem.AppConfigArgs{
//				ConfigDatas: tem.AppConfigConfigDataArray{
//					&tem.AppConfigConfigDataArgs{
//						Key:   pulumi.String("key"),
//						Value: pulumi.String("value"),
//					},
//					&tem.AppConfigConfigDataArgs{
//						Key:   pulumi.String("key1"),
//						Value: pulumi.String("value1"),
//					},
//				},
//				EnvironmentId: pulumi.String("en-o5edaepv"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tem appConfig can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tem/appConfig:AppConfig appConfig environmentId#name
//
// ```
type AppConfig struct {
	pulumi.CustomResourceState

	// payload.
	ConfigDatas AppConfigConfigDataArrayOutput `pulumi:"configDatas"`
	// environment ID.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// appConfig name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppConfig registers a new resource with the given unique name, arguments, and options.
func NewAppConfig(ctx *pulumi.Context,
	name string, args *AppConfigArgs, opts ...pulumi.ResourceOption) (*AppConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigDatas == nil {
		return nil, errors.New("invalid value for required argument 'ConfigDatas'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AppConfig
	err := ctx.RegisterResource("tencentcloud:Tem/appConfig:AppConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppConfig gets an existing AppConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppConfigState, opts ...pulumi.ResourceOption) (*AppConfig, error) {
	var resource AppConfig
	err := ctx.ReadResource("tencentcloud:Tem/appConfig:AppConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppConfig resources.
type appConfigState struct {
	// payload.
	ConfigDatas []AppConfigConfigData `pulumi:"configDatas"`
	// environment ID.
	EnvironmentId *string `pulumi:"environmentId"`
	// appConfig name.
	Name *string `pulumi:"name"`
}

type AppConfigState struct {
	// payload.
	ConfigDatas AppConfigConfigDataArrayInput
	// environment ID.
	EnvironmentId pulumi.StringPtrInput
	// appConfig name.
	Name pulumi.StringPtrInput
}

func (AppConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*appConfigState)(nil)).Elem()
}

type appConfigArgs struct {
	// payload.
	ConfigDatas []AppConfigConfigData `pulumi:"configDatas"`
	// environment ID.
	EnvironmentId string `pulumi:"environmentId"`
	// appConfig name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppConfig resource.
type AppConfigArgs struct {
	// payload.
	ConfigDatas AppConfigConfigDataArrayInput
	// environment ID.
	EnvironmentId pulumi.StringInput
	// appConfig name.
	Name pulumi.StringPtrInput
}

func (AppConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appConfigArgs)(nil)).Elem()
}

type AppConfigInput interface {
	pulumi.Input

	ToAppConfigOutput() AppConfigOutput
	ToAppConfigOutputWithContext(ctx context.Context) AppConfigOutput
}

func (*AppConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConfig)(nil)).Elem()
}

func (i *AppConfig) ToAppConfigOutput() AppConfigOutput {
	return i.ToAppConfigOutputWithContext(context.Background())
}

func (i *AppConfig) ToAppConfigOutputWithContext(ctx context.Context) AppConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConfigOutput)
}

// AppConfigArrayInput is an input type that accepts AppConfigArray and AppConfigArrayOutput values.
// You can construct a concrete instance of `AppConfigArrayInput` via:
//
//	AppConfigArray{ AppConfigArgs{...} }
type AppConfigArrayInput interface {
	pulumi.Input

	ToAppConfigArrayOutput() AppConfigArrayOutput
	ToAppConfigArrayOutputWithContext(context.Context) AppConfigArrayOutput
}

type AppConfigArray []AppConfigInput

func (AppConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConfig)(nil)).Elem()
}

func (i AppConfigArray) ToAppConfigArrayOutput() AppConfigArrayOutput {
	return i.ToAppConfigArrayOutputWithContext(context.Background())
}

func (i AppConfigArray) ToAppConfigArrayOutputWithContext(ctx context.Context) AppConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConfigArrayOutput)
}

// AppConfigMapInput is an input type that accepts AppConfigMap and AppConfigMapOutput values.
// You can construct a concrete instance of `AppConfigMapInput` via:
//
//	AppConfigMap{ "key": AppConfigArgs{...} }
type AppConfigMapInput interface {
	pulumi.Input

	ToAppConfigMapOutput() AppConfigMapOutput
	ToAppConfigMapOutputWithContext(context.Context) AppConfigMapOutput
}

type AppConfigMap map[string]AppConfigInput

func (AppConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConfig)(nil)).Elem()
}

func (i AppConfigMap) ToAppConfigMapOutput() AppConfigMapOutput {
	return i.ToAppConfigMapOutputWithContext(context.Background())
}

func (i AppConfigMap) ToAppConfigMapOutputWithContext(ctx context.Context) AppConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppConfigMapOutput)
}

type AppConfigOutput struct{ *pulumi.OutputState }

func (AppConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppConfig)(nil)).Elem()
}

func (o AppConfigOutput) ToAppConfigOutput() AppConfigOutput {
	return o
}

func (o AppConfigOutput) ToAppConfigOutputWithContext(ctx context.Context) AppConfigOutput {
	return o
}

// payload.
func (o AppConfigOutput) ConfigDatas() AppConfigConfigDataArrayOutput {
	return o.ApplyT(func(v *AppConfig) AppConfigConfigDataArrayOutput { return v.ConfigDatas }).(AppConfigConfigDataArrayOutput)
}

// environment ID.
func (o AppConfigOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConfig) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// appConfig name.
func (o AppConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppConfigArrayOutput struct{ *pulumi.OutputState }

func (AppConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppConfig)(nil)).Elem()
}

func (o AppConfigArrayOutput) ToAppConfigArrayOutput() AppConfigArrayOutput {
	return o
}

func (o AppConfigArrayOutput) ToAppConfigArrayOutputWithContext(ctx context.Context) AppConfigArrayOutput {
	return o
}

func (o AppConfigArrayOutput) Index(i pulumi.IntInput) AppConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppConfig {
		return vs[0].([]*AppConfig)[vs[1].(int)]
	}).(AppConfigOutput)
}

type AppConfigMapOutput struct{ *pulumi.OutputState }

func (AppConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppConfig)(nil)).Elem()
}

func (o AppConfigMapOutput) ToAppConfigMapOutput() AppConfigMapOutput {
	return o
}

func (o AppConfigMapOutput) ToAppConfigMapOutputWithContext(ctx context.Context) AppConfigMapOutput {
	return o
}

func (o AppConfigMapOutput) MapIndex(k pulumi.StringInput) AppConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppConfig {
		return vs[0].(map[string]*AppConfig)[vs[1].(string)]
	}).(AppConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppConfigInput)(nil)).Elem(), &AppConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConfigArrayInput)(nil)).Elem(), AppConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppConfigMapInput)(nil)).Elem(), AppConfigMap{})
	pulumi.RegisterOutputType(AppConfigOutput{})
	pulumi.RegisterOutputType(AppConfigArrayOutput{})
	pulumi.RegisterOutputType(AppConfigMapOutput{})
}
