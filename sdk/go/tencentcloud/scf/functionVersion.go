// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a scf functionVersion
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Scf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Scf.NewFunctionVersion(ctx, "functionVersion", &Scf.FunctionVersionArgs{
//				Description:  pulumi.String("for-terraform-test"),
//				FunctionName: pulumi.String("keep-1676351130"),
//				Namespace:    pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// scf function_version can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Scf/functionVersion:FunctionVersion function_version functionName#namespace#functionVersion
//
// ```
type FunctionVersion struct {
	pulumi.CustomResourceState

	// Function description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the released function.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// Version of the released function.
	FunctionVersion pulumi.StringOutput `pulumi:"functionVersion"`
	// Function namespace.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
}

// NewFunctionVersion registers a new resource with the given unique name, arguments, and options.
func NewFunctionVersion(ctx *pulumi.Context,
	name string, args *FunctionVersionArgs, opts ...pulumi.ResourceOption) (*FunctionVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FunctionVersion
	err := ctx.RegisterResource("tencentcloud:Scf/functionVersion:FunctionVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionVersion gets an existing FunctionVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionVersionState, opts ...pulumi.ResourceOption) (*FunctionVersion, error) {
	var resource FunctionVersion
	err := ctx.ReadResource("tencentcloud:Scf/functionVersion:FunctionVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionVersion resources.
type functionVersionState struct {
	// Function description.
	Description *string `pulumi:"description"`
	// Name of the released function.
	FunctionName *string `pulumi:"functionName"`
	// Version of the released function.
	FunctionVersion *string `pulumi:"functionVersion"`
	// Function namespace.
	Namespace *string `pulumi:"namespace"`
}

type FunctionVersionState struct {
	// Function description.
	Description pulumi.StringPtrInput
	// Name of the released function.
	FunctionName pulumi.StringPtrInput
	// Version of the released function.
	FunctionVersion pulumi.StringPtrInput
	// Function namespace.
	Namespace pulumi.StringPtrInput
}

func (FunctionVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionVersionState)(nil)).Elem()
}

type functionVersionArgs struct {
	// Function description.
	Description *string `pulumi:"description"`
	// Name of the released function.
	FunctionName string `pulumi:"functionName"`
	// Function namespace.
	Namespace *string `pulumi:"namespace"`
}

// The set of arguments for constructing a FunctionVersion resource.
type FunctionVersionArgs struct {
	// Function description.
	Description pulumi.StringPtrInput
	// Name of the released function.
	FunctionName pulumi.StringInput
	// Function namespace.
	Namespace pulumi.StringPtrInput
}

func (FunctionVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionVersionArgs)(nil)).Elem()
}

type FunctionVersionInput interface {
	pulumi.Input

	ToFunctionVersionOutput() FunctionVersionOutput
	ToFunctionVersionOutputWithContext(ctx context.Context) FunctionVersionOutput
}

func (*FunctionVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionVersion)(nil)).Elem()
}

func (i *FunctionVersion) ToFunctionVersionOutput() FunctionVersionOutput {
	return i.ToFunctionVersionOutputWithContext(context.Background())
}

func (i *FunctionVersion) ToFunctionVersionOutputWithContext(ctx context.Context) FunctionVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionVersionOutput)
}

// FunctionVersionArrayInput is an input type that accepts FunctionVersionArray and FunctionVersionArrayOutput values.
// You can construct a concrete instance of `FunctionVersionArrayInput` via:
//
//	FunctionVersionArray{ FunctionVersionArgs{...} }
type FunctionVersionArrayInput interface {
	pulumi.Input

	ToFunctionVersionArrayOutput() FunctionVersionArrayOutput
	ToFunctionVersionArrayOutputWithContext(context.Context) FunctionVersionArrayOutput
}

type FunctionVersionArray []FunctionVersionInput

func (FunctionVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionVersion)(nil)).Elem()
}

func (i FunctionVersionArray) ToFunctionVersionArrayOutput() FunctionVersionArrayOutput {
	return i.ToFunctionVersionArrayOutputWithContext(context.Background())
}

func (i FunctionVersionArray) ToFunctionVersionArrayOutputWithContext(ctx context.Context) FunctionVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionVersionArrayOutput)
}

// FunctionVersionMapInput is an input type that accepts FunctionVersionMap and FunctionVersionMapOutput values.
// You can construct a concrete instance of `FunctionVersionMapInput` via:
//
//	FunctionVersionMap{ "key": FunctionVersionArgs{...} }
type FunctionVersionMapInput interface {
	pulumi.Input

	ToFunctionVersionMapOutput() FunctionVersionMapOutput
	ToFunctionVersionMapOutputWithContext(context.Context) FunctionVersionMapOutput
}

type FunctionVersionMap map[string]FunctionVersionInput

func (FunctionVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionVersion)(nil)).Elem()
}

func (i FunctionVersionMap) ToFunctionVersionMapOutput() FunctionVersionMapOutput {
	return i.ToFunctionVersionMapOutputWithContext(context.Background())
}

func (i FunctionVersionMap) ToFunctionVersionMapOutputWithContext(ctx context.Context) FunctionVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionVersionMapOutput)
}

type FunctionVersionOutput struct{ *pulumi.OutputState }

func (FunctionVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionVersion)(nil)).Elem()
}

func (o FunctionVersionOutput) ToFunctionVersionOutput() FunctionVersionOutput {
	return o
}

func (o FunctionVersionOutput) ToFunctionVersionOutputWithContext(ctx context.Context) FunctionVersionOutput {
	return o
}

// Function description.
func (o FunctionVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the released function.
func (o FunctionVersionOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionVersion) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// Version of the released function.
func (o FunctionVersionOutput) FunctionVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionVersion) pulumi.StringOutput { return v.FunctionVersion }).(pulumi.StringOutput)
}

// Function namespace.
func (o FunctionVersionOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionVersion) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

type FunctionVersionArrayOutput struct{ *pulumi.OutputState }

func (FunctionVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionVersion)(nil)).Elem()
}

func (o FunctionVersionArrayOutput) ToFunctionVersionArrayOutput() FunctionVersionArrayOutput {
	return o
}

func (o FunctionVersionArrayOutput) ToFunctionVersionArrayOutputWithContext(ctx context.Context) FunctionVersionArrayOutput {
	return o
}

func (o FunctionVersionArrayOutput) Index(i pulumi.IntInput) FunctionVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FunctionVersion {
		return vs[0].([]*FunctionVersion)[vs[1].(int)]
	}).(FunctionVersionOutput)
}

type FunctionVersionMapOutput struct{ *pulumi.OutputState }

func (FunctionVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionVersion)(nil)).Elem()
}

func (o FunctionVersionMapOutput) ToFunctionVersionMapOutput() FunctionVersionMapOutput {
	return o
}

func (o FunctionVersionMapOutput) ToFunctionVersionMapOutputWithContext(ctx context.Context) FunctionVersionMapOutput {
	return o
}

func (o FunctionVersionMapOutput) MapIndex(k pulumi.StringInput) FunctionVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FunctionVersion {
		return vs[0].(map[string]*FunctionVersion)[vs[1].(string)]
	}).(FunctionVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionVersionInput)(nil)).Elem(), &FunctionVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionVersionArrayInput)(nil)).Elem(), FunctionVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionVersionMapInput)(nil)).Elem(), FunctionVersionMap{})
	pulumi.RegisterOutputType(FunctionVersionOutput{})
	pulumi.RegisterOutputType(FunctionVersionArrayOutput{})
	pulumi.RegisterOutputType(FunctionVersionMapOutput{})
}
