// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a scf provisionedConcurrencyConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Scf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Scf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Scf.NewProvisionedConcurrencyConfig(ctx, "provisionedConcurrencyConfig", &Scf.ProvisionedConcurrencyConfigArgs{
//				FunctionName:    pulumi.String("keep-1676351130"),
//				MaxCapacity:     pulumi.Int(2),
//				MinCapacity:     pulumi.Int(1),
//				Namespace:       pulumi.String("default"),
//				ProvisionedType: pulumi.String("Default"),
//				Qualifier:       pulumi.String("2"),
//				TrackingTarget:  pulumi.Float64(0.5),
//				TriggerActions: scf.ProvisionedConcurrencyConfigTriggerActionArray{
//					&scf.ProvisionedConcurrencyConfigTriggerActionArgs{
//						ProvisionedType:                  pulumi.String("Default"),
//						TriggerCronConfig:                pulumi.String("29 45 12 29 05 * 2023"),
//						TriggerName:                      pulumi.String("test"),
//						TriggerProvisionedConcurrencyNum: pulumi.Int(2),
//					},
//				},
//				VersionProvisionedConcurrencyNum: pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ProvisionedConcurrencyConfig struct {
	pulumi.CustomResourceState

	// Name of the function for which to set the provisioned concurrency.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// The maximum number of instances.
	MaxCapacity pulumi.IntPtrOutput `pulumi:"maxCapacity"`
	// The minimum number of instances. It can not be smaller than 1.
	MinCapacity pulumi.IntPtrOutput `pulumi:"minCapacity"`
	// Function namespace. Default value: default.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// Specifies the provisioned concurrency type. Default: Static provisioned concurrency. ConcurrencyUtilizationTracking: Scales the concurrency automatically according to the concurrency utilization. If ConcurrencyUtilizationTracking is passed in, TrackingTarget, MinCapacity and MaxCapacity are required, and VersionProvisionedConcurrencyNum must be 0.
	ProvisionedType pulumi.StringPtrOutput `pulumi:"provisionedType"`
	// Function version number. Note: the $LATEST version does not support provisioned concurrency.
	Qualifier pulumi.StringOutput `pulumi:"qualifier"`
	// The target concurrency utilization. Range: (0,1) (two decimal places).
	TrackingTarget pulumi.Float64PtrOutput `pulumi:"trackingTarget"`
	// Scheduled provisioned concurrency scaling action.
	TriggerActions ProvisionedConcurrencyConfigTriggerActionArrayOutput `pulumi:"triggerActions"`
	// Provisioned concurrency amount. Note: there is an upper limit for the sum of provisioned concurrency amounts of all versions, which currently is the function&amp;#39;s maximum concurrency quota minus 100.
	VersionProvisionedConcurrencyNum pulumi.IntOutput `pulumi:"versionProvisionedConcurrencyNum"`
}

// NewProvisionedConcurrencyConfig registers a new resource with the given unique name, arguments, and options.
func NewProvisionedConcurrencyConfig(ctx *pulumi.Context,
	name string, args *ProvisionedConcurrencyConfigArgs, opts ...pulumi.ResourceOption) (*ProvisionedConcurrencyConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	if args.Qualifier == nil {
		return nil, errors.New("invalid value for required argument 'Qualifier'")
	}
	if args.VersionProvisionedConcurrencyNum == nil {
		return nil, errors.New("invalid value for required argument 'VersionProvisionedConcurrencyNum'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ProvisionedConcurrencyConfig
	err := ctx.RegisterResource("tencentcloud:Scf/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProvisionedConcurrencyConfig gets an existing ProvisionedConcurrencyConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProvisionedConcurrencyConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProvisionedConcurrencyConfigState, opts ...pulumi.ResourceOption) (*ProvisionedConcurrencyConfig, error) {
	var resource ProvisionedConcurrencyConfig
	err := ctx.ReadResource("tencentcloud:Scf/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProvisionedConcurrencyConfig resources.
type provisionedConcurrencyConfigState struct {
	// Name of the function for which to set the provisioned concurrency.
	FunctionName *string `pulumi:"functionName"`
	// The maximum number of instances.
	MaxCapacity *int `pulumi:"maxCapacity"`
	// The minimum number of instances. It can not be smaller than 1.
	MinCapacity *int `pulumi:"minCapacity"`
	// Function namespace. Default value: default.
	Namespace *string `pulumi:"namespace"`
	// Specifies the provisioned concurrency type. Default: Static provisioned concurrency. ConcurrencyUtilizationTracking: Scales the concurrency automatically according to the concurrency utilization. If ConcurrencyUtilizationTracking is passed in, TrackingTarget, MinCapacity and MaxCapacity are required, and VersionProvisionedConcurrencyNum must be 0.
	ProvisionedType *string `pulumi:"provisionedType"`
	// Function version number. Note: the $LATEST version does not support provisioned concurrency.
	Qualifier *string `pulumi:"qualifier"`
	// The target concurrency utilization. Range: (0,1) (two decimal places).
	TrackingTarget *float64 `pulumi:"trackingTarget"`
	// Scheduled provisioned concurrency scaling action.
	TriggerActions []ProvisionedConcurrencyConfigTriggerAction `pulumi:"triggerActions"`
	// Provisioned concurrency amount. Note: there is an upper limit for the sum of provisioned concurrency amounts of all versions, which currently is the function&amp;#39;s maximum concurrency quota minus 100.
	VersionProvisionedConcurrencyNum *int `pulumi:"versionProvisionedConcurrencyNum"`
}

type ProvisionedConcurrencyConfigState struct {
	// Name of the function for which to set the provisioned concurrency.
	FunctionName pulumi.StringPtrInput
	// The maximum number of instances.
	MaxCapacity pulumi.IntPtrInput
	// The minimum number of instances. It can not be smaller than 1.
	MinCapacity pulumi.IntPtrInput
	// Function namespace. Default value: default.
	Namespace pulumi.StringPtrInput
	// Specifies the provisioned concurrency type. Default: Static provisioned concurrency. ConcurrencyUtilizationTracking: Scales the concurrency automatically according to the concurrency utilization. If ConcurrencyUtilizationTracking is passed in, TrackingTarget, MinCapacity and MaxCapacity are required, and VersionProvisionedConcurrencyNum must be 0.
	ProvisionedType pulumi.StringPtrInput
	// Function version number. Note: the $LATEST version does not support provisioned concurrency.
	Qualifier pulumi.StringPtrInput
	// The target concurrency utilization. Range: (0,1) (two decimal places).
	TrackingTarget pulumi.Float64PtrInput
	// Scheduled provisioned concurrency scaling action.
	TriggerActions ProvisionedConcurrencyConfigTriggerActionArrayInput
	// Provisioned concurrency amount. Note: there is an upper limit for the sum of provisioned concurrency amounts of all versions, which currently is the function&amp;#39;s maximum concurrency quota minus 100.
	VersionProvisionedConcurrencyNum pulumi.IntPtrInput
}

func (ProvisionedConcurrencyConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*provisionedConcurrencyConfigState)(nil)).Elem()
}

type provisionedConcurrencyConfigArgs struct {
	// Name of the function for which to set the provisioned concurrency.
	FunctionName string `pulumi:"functionName"`
	// The maximum number of instances.
	MaxCapacity *int `pulumi:"maxCapacity"`
	// The minimum number of instances. It can not be smaller than 1.
	MinCapacity *int `pulumi:"minCapacity"`
	// Function namespace. Default value: default.
	Namespace *string `pulumi:"namespace"`
	// Specifies the provisioned concurrency type. Default: Static provisioned concurrency. ConcurrencyUtilizationTracking: Scales the concurrency automatically according to the concurrency utilization. If ConcurrencyUtilizationTracking is passed in, TrackingTarget, MinCapacity and MaxCapacity are required, and VersionProvisionedConcurrencyNum must be 0.
	ProvisionedType *string `pulumi:"provisionedType"`
	// Function version number. Note: the $LATEST version does not support provisioned concurrency.
	Qualifier string `pulumi:"qualifier"`
	// The target concurrency utilization. Range: (0,1) (two decimal places).
	TrackingTarget *float64 `pulumi:"trackingTarget"`
	// Scheduled provisioned concurrency scaling action.
	TriggerActions []ProvisionedConcurrencyConfigTriggerAction `pulumi:"triggerActions"`
	// Provisioned concurrency amount. Note: there is an upper limit for the sum of provisioned concurrency amounts of all versions, which currently is the function&amp;#39;s maximum concurrency quota minus 100.
	VersionProvisionedConcurrencyNum int `pulumi:"versionProvisionedConcurrencyNum"`
}

// The set of arguments for constructing a ProvisionedConcurrencyConfig resource.
type ProvisionedConcurrencyConfigArgs struct {
	// Name of the function for which to set the provisioned concurrency.
	FunctionName pulumi.StringInput
	// The maximum number of instances.
	MaxCapacity pulumi.IntPtrInput
	// The minimum number of instances. It can not be smaller than 1.
	MinCapacity pulumi.IntPtrInput
	// Function namespace. Default value: default.
	Namespace pulumi.StringPtrInput
	// Specifies the provisioned concurrency type. Default: Static provisioned concurrency. ConcurrencyUtilizationTracking: Scales the concurrency automatically according to the concurrency utilization. If ConcurrencyUtilizationTracking is passed in, TrackingTarget, MinCapacity and MaxCapacity are required, and VersionProvisionedConcurrencyNum must be 0.
	ProvisionedType pulumi.StringPtrInput
	// Function version number. Note: the $LATEST version does not support provisioned concurrency.
	Qualifier pulumi.StringInput
	// The target concurrency utilization. Range: (0,1) (two decimal places).
	TrackingTarget pulumi.Float64PtrInput
	// Scheduled provisioned concurrency scaling action.
	TriggerActions ProvisionedConcurrencyConfigTriggerActionArrayInput
	// Provisioned concurrency amount. Note: there is an upper limit for the sum of provisioned concurrency amounts of all versions, which currently is the function&amp;#39;s maximum concurrency quota minus 100.
	VersionProvisionedConcurrencyNum pulumi.IntInput
}

func (ProvisionedConcurrencyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*provisionedConcurrencyConfigArgs)(nil)).Elem()
}

type ProvisionedConcurrencyConfigInput interface {
	pulumi.Input

	ToProvisionedConcurrencyConfigOutput() ProvisionedConcurrencyConfigOutput
	ToProvisionedConcurrencyConfigOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigOutput
}

func (*ProvisionedConcurrencyConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (i *ProvisionedConcurrencyConfig) ToProvisionedConcurrencyConfigOutput() ProvisionedConcurrencyConfigOutput {
	return i.ToProvisionedConcurrencyConfigOutputWithContext(context.Background())
}

func (i *ProvisionedConcurrencyConfig) ToProvisionedConcurrencyConfigOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedConcurrencyConfigOutput)
}

// ProvisionedConcurrencyConfigArrayInput is an input type that accepts ProvisionedConcurrencyConfigArray and ProvisionedConcurrencyConfigArrayOutput values.
// You can construct a concrete instance of `ProvisionedConcurrencyConfigArrayInput` via:
//
//	ProvisionedConcurrencyConfigArray{ ProvisionedConcurrencyConfigArgs{...} }
type ProvisionedConcurrencyConfigArrayInput interface {
	pulumi.Input

	ToProvisionedConcurrencyConfigArrayOutput() ProvisionedConcurrencyConfigArrayOutput
	ToProvisionedConcurrencyConfigArrayOutputWithContext(context.Context) ProvisionedConcurrencyConfigArrayOutput
}

type ProvisionedConcurrencyConfigArray []ProvisionedConcurrencyConfigInput

func (ProvisionedConcurrencyConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (i ProvisionedConcurrencyConfigArray) ToProvisionedConcurrencyConfigArrayOutput() ProvisionedConcurrencyConfigArrayOutput {
	return i.ToProvisionedConcurrencyConfigArrayOutputWithContext(context.Background())
}

func (i ProvisionedConcurrencyConfigArray) ToProvisionedConcurrencyConfigArrayOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedConcurrencyConfigArrayOutput)
}

// ProvisionedConcurrencyConfigMapInput is an input type that accepts ProvisionedConcurrencyConfigMap and ProvisionedConcurrencyConfigMapOutput values.
// You can construct a concrete instance of `ProvisionedConcurrencyConfigMapInput` via:
//
//	ProvisionedConcurrencyConfigMap{ "key": ProvisionedConcurrencyConfigArgs{...} }
type ProvisionedConcurrencyConfigMapInput interface {
	pulumi.Input

	ToProvisionedConcurrencyConfigMapOutput() ProvisionedConcurrencyConfigMapOutput
	ToProvisionedConcurrencyConfigMapOutputWithContext(context.Context) ProvisionedConcurrencyConfigMapOutput
}

type ProvisionedConcurrencyConfigMap map[string]ProvisionedConcurrencyConfigInput

func (ProvisionedConcurrencyConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (i ProvisionedConcurrencyConfigMap) ToProvisionedConcurrencyConfigMapOutput() ProvisionedConcurrencyConfigMapOutput {
	return i.ToProvisionedConcurrencyConfigMapOutputWithContext(context.Background())
}

func (i ProvisionedConcurrencyConfigMap) ToProvisionedConcurrencyConfigMapOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisionedConcurrencyConfigMapOutput)
}

type ProvisionedConcurrencyConfigOutput struct{ *pulumi.OutputState }

func (ProvisionedConcurrencyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (o ProvisionedConcurrencyConfigOutput) ToProvisionedConcurrencyConfigOutput() ProvisionedConcurrencyConfigOutput {
	return o
}

func (o ProvisionedConcurrencyConfigOutput) ToProvisionedConcurrencyConfigOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigOutput {
	return o
}

// Name of the function for which to set the provisioned concurrency.
func (o ProvisionedConcurrencyConfigOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// The maximum number of instances.
func (o ProvisionedConcurrencyConfigOutput) MaxCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.IntPtrOutput { return v.MaxCapacity }).(pulumi.IntPtrOutput)
}

// The minimum number of instances. It can not be smaller than 1.
func (o ProvisionedConcurrencyConfigOutput) MinCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.IntPtrOutput { return v.MinCapacity }).(pulumi.IntPtrOutput)
}

// Function namespace. Default value: default.
func (o ProvisionedConcurrencyConfigOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specifies the provisioned concurrency type. Default: Static provisioned concurrency. ConcurrencyUtilizationTracking: Scales the concurrency automatically according to the concurrency utilization. If ConcurrencyUtilizationTracking is passed in, TrackingTarget, MinCapacity and MaxCapacity are required, and VersionProvisionedConcurrencyNum must be 0.
func (o ProvisionedConcurrencyConfigOutput) ProvisionedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.StringPtrOutput { return v.ProvisionedType }).(pulumi.StringPtrOutput)
}

// Function version number. Note: the $LATEST version does not support provisioned concurrency.
func (o ProvisionedConcurrencyConfigOutput) Qualifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.StringOutput { return v.Qualifier }).(pulumi.StringOutput)
}

// The target concurrency utilization. Range: (0,1) (two decimal places).
func (o ProvisionedConcurrencyConfigOutput) TrackingTarget() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.Float64PtrOutput { return v.TrackingTarget }).(pulumi.Float64PtrOutput)
}

// Scheduled provisioned concurrency scaling action.
func (o ProvisionedConcurrencyConfigOutput) TriggerActions() ProvisionedConcurrencyConfigTriggerActionArrayOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) ProvisionedConcurrencyConfigTriggerActionArrayOutput {
		return v.TriggerActions
	}).(ProvisionedConcurrencyConfigTriggerActionArrayOutput)
}

// Provisioned concurrency amount. Note: there is an upper limit for the sum of provisioned concurrency amounts of all versions, which currently is the function&amp;#39;s maximum concurrency quota minus 100.
func (o ProvisionedConcurrencyConfigOutput) VersionProvisionedConcurrencyNum() pulumi.IntOutput {
	return o.ApplyT(func(v *ProvisionedConcurrencyConfig) pulumi.IntOutput { return v.VersionProvisionedConcurrencyNum }).(pulumi.IntOutput)
}

type ProvisionedConcurrencyConfigArrayOutput struct{ *pulumi.OutputState }

func (ProvisionedConcurrencyConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (o ProvisionedConcurrencyConfigArrayOutput) ToProvisionedConcurrencyConfigArrayOutput() ProvisionedConcurrencyConfigArrayOutput {
	return o
}

func (o ProvisionedConcurrencyConfigArrayOutput) ToProvisionedConcurrencyConfigArrayOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigArrayOutput {
	return o
}

func (o ProvisionedConcurrencyConfigArrayOutput) Index(i pulumi.IntInput) ProvisionedConcurrencyConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProvisionedConcurrencyConfig {
		return vs[0].([]*ProvisionedConcurrencyConfig)[vs[1].(int)]
	}).(ProvisionedConcurrencyConfigOutput)
}

type ProvisionedConcurrencyConfigMapOutput struct{ *pulumi.OutputState }

func (ProvisionedConcurrencyConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProvisionedConcurrencyConfig)(nil)).Elem()
}

func (o ProvisionedConcurrencyConfigMapOutput) ToProvisionedConcurrencyConfigMapOutput() ProvisionedConcurrencyConfigMapOutput {
	return o
}

func (o ProvisionedConcurrencyConfigMapOutput) ToProvisionedConcurrencyConfigMapOutputWithContext(ctx context.Context) ProvisionedConcurrencyConfigMapOutput {
	return o
}

func (o ProvisionedConcurrencyConfigMapOutput) MapIndex(k pulumi.StringInput) ProvisionedConcurrencyConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProvisionedConcurrencyConfig {
		return vs[0].(map[string]*ProvisionedConcurrencyConfig)[vs[1].(string)]
	}).(ProvisionedConcurrencyConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedConcurrencyConfigInput)(nil)).Elem(), &ProvisionedConcurrencyConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedConcurrencyConfigArrayInput)(nil)).Elem(), ProvisionedConcurrencyConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisionedConcurrencyConfigMapInput)(nil)).Elem(), ProvisionedConcurrencyConfigMap{})
	pulumi.RegisterOutputType(ProvisionedConcurrencyConfigOutput{})
	pulumi.RegisterOutputType(ProvisionedConcurrencyConfigArrayOutput{})
	pulumi.RegisterOutputType(ProvisionedConcurrencyConfigMapOutput{})
}
