// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a scf invokeFunction
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Scf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Scf.NewInvokeFunction(ctx, "invokeFunction", &Scf.InvokeFunctionArgs{
//				FunctionName: pulumi.String("keep-1676351130"),
//				Namespace:    pulumi.String("default"),
//				Qualifier:    pulumi.String("2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InvokeFunction struct {
	pulumi.CustomResourceState

	// Function running parameter, which is in the JSON format. The maximum parameter size is 6 MB for synchronized invocations and 128KB for asynchronized invocations. This field corresponds to event input parameter.
	ClientContext pulumi.StringPtrOutput `pulumi:"clientContext"`
	// Function name.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// Fill in RequestResponse for synchronized invocations (default and recommended) and Event for asychronized invocations. Note that for synchronized invocations, the max timeout period is 300s. Choose asychronized invocations if the required timeout period is longer than 300 seconds. You can also use InvokeFunction for synchronized invocations.
	InvocationType pulumi.StringPtrOutput `pulumi:"invocationType"`
	// Null for async invocations.
	LogType pulumi.StringPtrOutput `pulumi:"logType"`
	// Namespace.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The version or alias of the triggered function. It defaults to $LATEST.
	Qualifier pulumi.StringPtrOutput `pulumi:"qualifier"`
	// Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
	RoutingKey pulumi.StringPtrOutput `pulumi:"routingKey"`
}

// NewInvokeFunction registers a new resource with the given unique name, arguments, and options.
func NewInvokeFunction(ctx *pulumi.Context,
	name string, args *InvokeFunctionArgs, opts ...pulumi.ResourceOption) (*InvokeFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InvokeFunction
	err := ctx.RegisterResource("tencentcloud:Scf/invokeFunction:InvokeFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInvokeFunction gets an existing InvokeFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInvokeFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InvokeFunctionState, opts ...pulumi.ResourceOption) (*InvokeFunction, error) {
	var resource InvokeFunction
	err := ctx.ReadResource("tencentcloud:Scf/invokeFunction:InvokeFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InvokeFunction resources.
type invokeFunctionState struct {
	// Function running parameter, which is in the JSON format. The maximum parameter size is 6 MB for synchronized invocations and 128KB for asynchronized invocations. This field corresponds to event input parameter.
	ClientContext *string `pulumi:"clientContext"`
	// Function name.
	FunctionName *string `pulumi:"functionName"`
	// Fill in RequestResponse for synchronized invocations (default and recommended) and Event for asychronized invocations. Note that for synchronized invocations, the max timeout period is 300s. Choose asychronized invocations if the required timeout period is longer than 300 seconds. You can also use InvokeFunction for synchronized invocations.
	InvocationType *string `pulumi:"invocationType"`
	// Null for async invocations.
	LogType *string `pulumi:"logType"`
	// Namespace.
	Namespace *string `pulumi:"namespace"`
	// The version or alias of the triggered function. It defaults to $LATEST.
	Qualifier *string `pulumi:"qualifier"`
	// Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
	RoutingKey *string `pulumi:"routingKey"`
}

type InvokeFunctionState struct {
	// Function running parameter, which is in the JSON format. The maximum parameter size is 6 MB for synchronized invocations and 128KB for asynchronized invocations. This field corresponds to event input parameter.
	ClientContext pulumi.StringPtrInput
	// Function name.
	FunctionName pulumi.StringPtrInput
	// Fill in RequestResponse for synchronized invocations (default and recommended) and Event for asychronized invocations. Note that for synchronized invocations, the max timeout period is 300s. Choose asychronized invocations if the required timeout period is longer than 300 seconds. You can also use InvokeFunction for synchronized invocations.
	InvocationType pulumi.StringPtrInput
	// Null for async invocations.
	LogType pulumi.StringPtrInput
	// Namespace.
	Namespace pulumi.StringPtrInput
	// The version or alias of the triggered function. It defaults to $LATEST.
	Qualifier pulumi.StringPtrInput
	// Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
	RoutingKey pulumi.StringPtrInput
}

func (InvokeFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*invokeFunctionState)(nil)).Elem()
}

type invokeFunctionArgs struct {
	// Function running parameter, which is in the JSON format. The maximum parameter size is 6 MB for synchronized invocations and 128KB for asynchronized invocations. This field corresponds to event input parameter.
	ClientContext *string `pulumi:"clientContext"`
	// Function name.
	FunctionName string `pulumi:"functionName"`
	// Fill in RequestResponse for synchronized invocations (default and recommended) and Event for asychronized invocations. Note that for synchronized invocations, the max timeout period is 300s. Choose asychronized invocations if the required timeout period is longer than 300 seconds. You can also use InvokeFunction for synchronized invocations.
	InvocationType *string `pulumi:"invocationType"`
	// Null for async invocations.
	LogType *string `pulumi:"logType"`
	// Namespace.
	Namespace *string `pulumi:"namespace"`
	// The version or alias of the triggered function. It defaults to $LATEST.
	Qualifier *string `pulumi:"qualifier"`
	// Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
	RoutingKey *string `pulumi:"routingKey"`
}

// The set of arguments for constructing a InvokeFunction resource.
type InvokeFunctionArgs struct {
	// Function running parameter, which is in the JSON format. The maximum parameter size is 6 MB for synchronized invocations and 128KB for asynchronized invocations. This field corresponds to event input parameter.
	ClientContext pulumi.StringPtrInput
	// Function name.
	FunctionName pulumi.StringInput
	// Fill in RequestResponse for synchronized invocations (default and recommended) and Event for asychronized invocations. Note that for synchronized invocations, the max timeout period is 300s. Choose asychronized invocations if the required timeout period is longer than 300 seconds. You can also use InvokeFunction for synchronized invocations.
	InvocationType pulumi.StringPtrInput
	// Null for async invocations.
	LogType pulumi.StringPtrInput
	// Namespace.
	Namespace pulumi.StringPtrInput
	// The version or alias of the triggered function. It defaults to $LATEST.
	Qualifier pulumi.StringPtrInput
	// Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
	RoutingKey pulumi.StringPtrInput
}

func (InvokeFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*invokeFunctionArgs)(nil)).Elem()
}

type InvokeFunctionInput interface {
	pulumi.Input

	ToInvokeFunctionOutput() InvokeFunctionOutput
	ToInvokeFunctionOutputWithContext(ctx context.Context) InvokeFunctionOutput
}

func (*InvokeFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**InvokeFunction)(nil)).Elem()
}

func (i *InvokeFunction) ToInvokeFunctionOutput() InvokeFunctionOutput {
	return i.ToInvokeFunctionOutputWithContext(context.Background())
}

func (i *InvokeFunction) ToInvokeFunctionOutputWithContext(ctx context.Context) InvokeFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvokeFunctionOutput)
}

// InvokeFunctionArrayInput is an input type that accepts InvokeFunctionArray and InvokeFunctionArrayOutput values.
// You can construct a concrete instance of `InvokeFunctionArrayInput` via:
//
//	InvokeFunctionArray{ InvokeFunctionArgs{...} }
type InvokeFunctionArrayInput interface {
	pulumi.Input

	ToInvokeFunctionArrayOutput() InvokeFunctionArrayOutput
	ToInvokeFunctionArrayOutputWithContext(context.Context) InvokeFunctionArrayOutput
}

type InvokeFunctionArray []InvokeFunctionInput

func (InvokeFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InvokeFunction)(nil)).Elem()
}

func (i InvokeFunctionArray) ToInvokeFunctionArrayOutput() InvokeFunctionArrayOutput {
	return i.ToInvokeFunctionArrayOutputWithContext(context.Background())
}

func (i InvokeFunctionArray) ToInvokeFunctionArrayOutputWithContext(ctx context.Context) InvokeFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvokeFunctionArrayOutput)
}

// InvokeFunctionMapInput is an input type that accepts InvokeFunctionMap and InvokeFunctionMapOutput values.
// You can construct a concrete instance of `InvokeFunctionMapInput` via:
//
//	InvokeFunctionMap{ "key": InvokeFunctionArgs{...} }
type InvokeFunctionMapInput interface {
	pulumi.Input

	ToInvokeFunctionMapOutput() InvokeFunctionMapOutput
	ToInvokeFunctionMapOutputWithContext(context.Context) InvokeFunctionMapOutput
}

type InvokeFunctionMap map[string]InvokeFunctionInput

func (InvokeFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InvokeFunction)(nil)).Elem()
}

func (i InvokeFunctionMap) ToInvokeFunctionMapOutput() InvokeFunctionMapOutput {
	return i.ToInvokeFunctionMapOutputWithContext(context.Background())
}

func (i InvokeFunctionMap) ToInvokeFunctionMapOutputWithContext(ctx context.Context) InvokeFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvokeFunctionMapOutput)
}

type InvokeFunctionOutput struct{ *pulumi.OutputState }

func (InvokeFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InvokeFunction)(nil)).Elem()
}

func (o InvokeFunctionOutput) ToInvokeFunctionOutput() InvokeFunctionOutput {
	return o
}

func (o InvokeFunctionOutput) ToInvokeFunctionOutputWithContext(ctx context.Context) InvokeFunctionOutput {
	return o
}

// Function running parameter, which is in the JSON format. The maximum parameter size is 6 MB for synchronized invocations and 128KB for asynchronized invocations. This field corresponds to event input parameter.
func (o InvokeFunctionOutput) ClientContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InvokeFunction) pulumi.StringPtrOutput { return v.ClientContext }).(pulumi.StringPtrOutput)
}

// Function name.
func (o InvokeFunctionOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *InvokeFunction) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// Fill in RequestResponse for synchronized invocations (default and recommended) and Event for asychronized invocations. Note that for synchronized invocations, the max timeout period is 300s. Choose asychronized invocations if the required timeout period is longer than 300 seconds. You can also use InvokeFunction for synchronized invocations.
func (o InvokeFunctionOutput) InvocationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InvokeFunction) pulumi.StringPtrOutput { return v.InvocationType }).(pulumi.StringPtrOutput)
}

// Null for async invocations.
func (o InvokeFunctionOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InvokeFunction) pulumi.StringPtrOutput { return v.LogType }).(pulumi.StringPtrOutput)
}

// Namespace.
func (o InvokeFunctionOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InvokeFunction) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The version or alias of the triggered function. It defaults to $LATEST.
func (o InvokeFunctionOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InvokeFunction) pulumi.StringPtrOutput { return v.Qualifier }).(pulumi.StringPtrOutput)
}

// Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
func (o InvokeFunctionOutput) RoutingKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InvokeFunction) pulumi.StringPtrOutput { return v.RoutingKey }).(pulumi.StringPtrOutput)
}

type InvokeFunctionArrayOutput struct{ *pulumi.OutputState }

func (InvokeFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InvokeFunction)(nil)).Elem()
}

func (o InvokeFunctionArrayOutput) ToInvokeFunctionArrayOutput() InvokeFunctionArrayOutput {
	return o
}

func (o InvokeFunctionArrayOutput) ToInvokeFunctionArrayOutputWithContext(ctx context.Context) InvokeFunctionArrayOutput {
	return o
}

func (o InvokeFunctionArrayOutput) Index(i pulumi.IntInput) InvokeFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InvokeFunction {
		return vs[0].([]*InvokeFunction)[vs[1].(int)]
	}).(InvokeFunctionOutput)
}

type InvokeFunctionMapOutput struct{ *pulumi.OutputState }

func (InvokeFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InvokeFunction)(nil)).Elem()
}

func (o InvokeFunctionMapOutput) ToInvokeFunctionMapOutput() InvokeFunctionMapOutput {
	return o
}

func (o InvokeFunctionMapOutput) ToInvokeFunctionMapOutputWithContext(ctx context.Context) InvokeFunctionMapOutput {
	return o
}

func (o InvokeFunctionMapOutput) MapIndex(k pulumi.StringInput) InvokeFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InvokeFunction {
		return vs[0].(map[string]*InvokeFunction)[vs[1].(string)]
	}).(InvokeFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InvokeFunctionInput)(nil)).Elem(), &InvokeFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvokeFunctionArrayInput)(nil)).Elem(), InvokeFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvokeFunctionMapInput)(nil)).Elem(), InvokeFunctionMap{})
	pulumi.RegisterOutputType(InvokeFunctionOutput{})
	pulumi.RegisterOutputType(InvokeFunctionArrayOutput{})
	pulumi.RegisterOutputType(InvokeFunctionMapOutput{})
}
