// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to create a SCF layer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Scf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Scf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Scf.NewLayer(ctx, "foo", &Scf.LayerArgs{
//				CompatibleRuntimes: pulumi.StringArray{
//					pulumi.String("Python3.6"),
//				},
//				Content: &scf.LayerContentArgs{
//					CosBucketName:   pulumi.String("test-bucket"),
//					CosBucketRegion: pulumi.String("ap-guangzhou"),
//					CosObjectName:   pulumi.String("/foo.zip"),
//				},
//				Description: pulumi.String("foo"),
//				LayerName:   pulumi.String("foo"),
//				LicenseInfo: pulumi.String("foo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Scf layer can be imported, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Scf/layer:Layer layer layerId#layerVersion
//
// ```
type Layer struct {
	pulumi.CustomResourceState

	// The code type of layer.
	CodeSha256 pulumi.StringOutput `pulumi:"codeSha256"`
	// The compatible runtimes of layer.
	CompatibleRuntimes pulumi.StringArrayOutput `pulumi:"compatibleRuntimes"`
	// The source code of layer.
	Content LayerContentOutput `pulumi:"content"`
	// The create time of layer.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of layer.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of layer.
	LayerName pulumi.StringOutput `pulumi:"layerName"`
	// The version of layer.
	LayerVersion pulumi.IntOutput `pulumi:"layerVersion"`
	// The license info of layer.
	LicenseInfo pulumi.StringPtrOutput `pulumi:"licenseInfo"`
	// The download location url of layer.
	Location pulumi.StringOutput `pulumi:"location"`
	// The current status of layer.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewLayer registers a new resource with the given unique name, arguments, and options.
func NewLayer(ctx *pulumi.Context,
	name string, args *LayerArgs, opts ...pulumi.ResourceOption) (*Layer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompatibleRuntimes == nil {
		return nil, errors.New("invalid value for required argument 'CompatibleRuntimes'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.LayerName == nil {
		return nil, errors.New("invalid value for required argument 'LayerName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Layer
	err := ctx.RegisterResource("tencentcloud:Scf/layer:Layer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLayer gets an existing Layer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLayer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LayerState, opts ...pulumi.ResourceOption) (*Layer, error) {
	var resource Layer
	err := ctx.ReadResource("tencentcloud:Scf/layer:Layer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Layer resources.
type layerState struct {
	// The code type of layer.
	CodeSha256 *string `pulumi:"codeSha256"`
	// The compatible runtimes of layer.
	CompatibleRuntimes []string `pulumi:"compatibleRuntimes"`
	// The source code of layer.
	Content *LayerContent `pulumi:"content"`
	// The create time of layer.
	CreateTime *string `pulumi:"createTime"`
	// The description of layer.
	Description *string `pulumi:"description"`
	// The name of layer.
	LayerName *string `pulumi:"layerName"`
	// The version of layer.
	LayerVersion *int `pulumi:"layerVersion"`
	// The license info of layer.
	LicenseInfo *string `pulumi:"licenseInfo"`
	// The download location url of layer.
	Location *string `pulumi:"location"`
	// The current status of layer.
	Status *string `pulumi:"status"`
}

type LayerState struct {
	// The code type of layer.
	CodeSha256 pulumi.StringPtrInput
	// The compatible runtimes of layer.
	CompatibleRuntimes pulumi.StringArrayInput
	// The source code of layer.
	Content LayerContentPtrInput
	// The create time of layer.
	CreateTime pulumi.StringPtrInput
	// The description of layer.
	Description pulumi.StringPtrInput
	// The name of layer.
	LayerName pulumi.StringPtrInput
	// The version of layer.
	LayerVersion pulumi.IntPtrInput
	// The license info of layer.
	LicenseInfo pulumi.StringPtrInput
	// The download location url of layer.
	Location pulumi.StringPtrInput
	// The current status of layer.
	Status pulumi.StringPtrInput
}

func (LayerState) ElementType() reflect.Type {
	return reflect.TypeOf((*layerState)(nil)).Elem()
}

type layerArgs struct {
	// The compatible runtimes of layer.
	CompatibleRuntimes []string `pulumi:"compatibleRuntimes"`
	// The source code of layer.
	Content LayerContent `pulumi:"content"`
	// The description of layer.
	Description *string `pulumi:"description"`
	// The name of layer.
	LayerName string `pulumi:"layerName"`
	// The license info of layer.
	LicenseInfo *string `pulumi:"licenseInfo"`
}

// The set of arguments for constructing a Layer resource.
type LayerArgs struct {
	// The compatible runtimes of layer.
	CompatibleRuntimes pulumi.StringArrayInput
	// The source code of layer.
	Content LayerContentInput
	// The description of layer.
	Description pulumi.StringPtrInput
	// The name of layer.
	LayerName pulumi.StringInput
	// The license info of layer.
	LicenseInfo pulumi.StringPtrInput
}

func (LayerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*layerArgs)(nil)).Elem()
}

type LayerInput interface {
	pulumi.Input

	ToLayerOutput() LayerOutput
	ToLayerOutputWithContext(ctx context.Context) LayerOutput
}

func (*Layer) ElementType() reflect.Type {
	return reflect.TypeOf((**Layer)(nil)).Elem()
}

func (i *Layer) ToLayerOutput() LayerOutput {
	return i.ToLayerOutputWithContext(context.Background())
}

func (i *Layer) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerOutput)
}

// LayerArrayInput is an input type that accepts LayerArray and LayerArrayOutput values.
// You can construct a concrete instance of `LayerArrayInput` via:
//
//	LayerArray{ LayerArgs{...} }
type LayerArrayInput interface {
	pulumi.Input

	ToLayerArrayOutput() LayerArrayOutput
	ToLayerArrayOutputWithContext(context.Context) LayerArrayOutput
}

type LayerArray []LayerInput

func (LayerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Layer)(nil)).Elem()
}

func (i LayerArray) ToLayerArrayOutput() LayerArrayOutput {
	return i.ToLayerArrayOutputWithContext(context.Background())
}

func (i LayerArray) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerArrayOutput)
}

// LayerMapInput is an input type that accepts LayerMap and LayerMapOutput values.
// You can construct a concrete instance of `LayerMapInput` via:
//
//	LayerMap{ "key": LayerArgs{...} }
type LayerMapInput interface {
	pulumi.Input

	ToLayerMapOutput() LayerMapOutput
	ToLayerMapOutputWithContext(context.Context) LayerMapOutput
}

type LayerMap map[string]LayerInput

func (LayerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Layer)(nil)).Elem()
}

func (i LayerMap) ToLayerMapOutput() LayerMapOutput {
	return i.ToLayerMapOutputWithContext(context.Background())
}

func (i LayerMap) ToLayerMapOutputWithContext(ctx context.Context) LayerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LayerMapOutput)
}

type LayerOutput struct{ *pulumi.OutputState }

func (LayerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Layer)(nil)).Elem()
}

func (o LayerOutput) ToLayerOutput() LayerOutput {
	return o
}

func (o LayerOutput) ToLayerOutputWithContext(ctx context.Context) LayerOutput {
	return o
}

// The code type of layer.
func (o LayerOutput) CodeSha256() pulumi.StringOutput {
	return o.ApplyT(func(v *Layer) pulumi.StringOutput { return v.CodeSha256 }).(pulumi.StringOutput)
}

// The compatible runtimes of layer.
func (o LayerOutput) CompatibleRuntimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Layer) pulumi.StringArrayOutput { return v.CompatibleRuntimes }).(pulumi.StringArrayOutput)
}

// The source code of layer.
func (o LayerOutput) Content() LayerContentOutput {
	return o.ApplyT(func(v *Layer) LayerContentOutput { return v.Content }).(LayerContentOutput)
}

// The create time of layer.
func (o LayerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Layer) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of layer.
func (o LayerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Layer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of layer.
func (o LayerOutput) LayerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Layer) pulumi.StringOutput { return v.LayerName }).(pulumi.StringOutput)
}

// The version of layer.
func (o LayerOutput) LayerVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *Layer) pulumi.IntOutput { return v.LayerVersion }).(pulumi.IntOutput)
}

// The license info of layer.
func (o LayerOutput) LicenseInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Layer) pulumi.StringPtrOutput { return v.LicenseInfo }).(pulumi.StringPtrOutput)
}

// The download location url of layer.
func (o LayerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Layer) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The current status of layer.
func (o LayerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Layer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type LayerArrayOutput struct{ *pulumi.OutputState }

func (LayerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Layer)(nil)).Elem()
}

func (o LayerArrayOutput) ToLayerArrayOutput() LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) ToLayerArrayOutputWithContext(ctx context.Context) LayerArrayOutput {
	return o
}

func (o LayerArrayOutput) Index(i pulumi.IntInput) LayerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Layer {
		return vs[0].([]*Layer)[vs[1].(int)]
	}).(LayerOutput)
}

type LayerMapOutput struct{ *pulumi.OutputState }

func (LayerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Layer)(nil)).Elem()
}

func (o LayerMapOutput) ToLayerMapOutput() LayerMapOutput {
	return o
}

func (o LayerMapOutput) ToLayerMapOutputWithContext(ctx context.Context) LayerMapOutput {
	return o
}

func (o LayerMapOutput) MapIndex(k pulumi.StringInput) LayerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Layer {
		return vs[0].(map[string]*Layer)[vs[1].(string)]
	}).(LayerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LayerInput)(nil)).Elem(), &Layer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerArrayInput)(nil)).Elem(), LayerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LayerMapInput)(nil)).Elem(), LayerMap{})
	pulumi.RegisterOutputType(LayerOutput{})
	pulumi.RegisterOutputType(LayerArrayOutput{})
	pulumi.RegisterOutputType(LayerMapOutput{})
}
