// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a eb eventBus
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Eb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Eb.NewEventBus(ctx, "foo", &Eb.EventBusArgs{
//				Description:  pulumi.String("event bus desc"),
//				EnableStore:  pulumi.Bool(false),
//				EventBusName: pulumi.String("tf-event_bus"),
//				SaveDays:     pulumi.Int(1),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// eb event_bus can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Eb/eventBus:EventBus event_bus event_bus_id
//
// ```
type EventBus struct {
	pulumi.CustomResourceState

	// Event set description, unlimited character type, description within 200 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the EB storage is enabled.
	EnableStore pulumi.BoolPtrOutput `pulumi:"enableStore"`
	// Event set name, which can only contain letters, numbers, underscores, hyphens, starts with a letter and ends with a number or letter, 2~60 characters.
	EventBusName pulumi.StringOutput `pulumi:"eventBusName"`
	// EB storage duration.
	SaveDays pulumi.IntPtrOutput `pulumi:"saveDays"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewEventBus registers a new resource with the given unique name, arguments, and options.
func NewEventBus(ctx *pulumi.Context,
	name string, args *EventBusArgs, opts ...pulumi.ResourceOption) (*EventBus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventBusName == nil {
		return nil, errors.New("invalid value for required argument 'EventBusName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource EventBus
	err := ctx.RegisterResource("tencentcloud:Eb/eventBus:EventBus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventBus gets an existing EventBus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventBus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventBusState, opts ...pulumi.ResourceOption) (*EventBus, error) {
	var resource EventBus
	err := ctx.ReadResource("tencentcloud:Eb/eventBus:EventBus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventBus resources.
type eventBusState struct {
	// Event set description, unlimited character type, description within 200 characters.
	Description *string `pulumi:"description"`
	// Whether the EB storage is enabled.
	EnableStore *bool `pulumi:"enableStore"`
	// Event set name, which can only contain letters, numbers, underscores, hyphens, starts with a letter and ends with a number or letter, 2~60 characters.
	EventBusName *string `pulumi:"eventBusName"`
	// EB storage duration.
	SaveDays *int `pulumi:"saveDays"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
}

type EventBusState struct {
	// Event set description, unlimited character type, description within 200 characters.
	Description pulumi.StringPtrInput
	// Whether the EB storage is enabled.
	EnableStore pulumi.BoolPtrInput
	// Event set name, which can only contain letters, numbers, underscores, hyphens, starts with a letter and ends with a number or letter, 2~60 characters.
	EventBusName pulumi.StringPtrInput
	// EB storage duration.
	SaveDays pulumi.IntPtrInput
	// Tag description list.
	Tags pulumi.MapInput
}

func (EventBusState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventBusState)(nil)).Elem()
}

type eventBusArgs struct {
	// Event set description, unlimited character type, description within 200 characters.
	Description *string `pulumi:"description"`
	// Whether the EB storage is enabled.
	EnableStore *bool `pulumi:"enableStore"`
	// Event set name, which can only contain letters, numbers, underscores, hyphens, starts with a letter and ends with a number or letter, 2~60 characters.
	EventBusName string `pulumi:"eventBusName"`
	// EB storage duration.
	SaveDays *int `pulumi:"saveDays"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a EventBus resource.
type EventBusArgs struct {
	// Event set description, unlimited character type, description within 200 characters.
	Description pulumi.StringPtrInput
	// Whether the EB storage is enabled.
	EnableStore pulumi.BoolPtrInput
	// Event set name, which can only contain letters, numbers, underscores, hyphens, starts with a letter and ends with a number or letter, 2~60 characters.
	EventBusName pulumi.StringInput
	// EB storage duration.
	SaveDays pulumi.IntPtrInput
	// Tag description list.
	Tags pulumi.MapInput
}

func (EventBusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventBusArgs)(nil)).Elem()
}

type EventBusInput interface {
	pulumi.Input

	ToEventBusOutput() EventBusOutput
	ToEventBusOutputWithContext(ctx context.Context) EventBusOutput
}

func (*EventBus) ElementType() reflect.Type {
	return reflect.TypeOf((**EventBus)(nil)).Elem()
}

func (i *EventBus) ToEventBusOutput() EventBusOutput {
	return i.ToEventBusOutputWithContext(context.Background())
}

func (i *EventBus) ToEventBusOutputWithContext(ctx context.Context) EventBusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusOutput)
}

// EventBusArrayInput is an input type that accepts EventBusArray and EventBusArrayOutput values.
// You can construct a concrete instance of `EventBusArrayInput` via:
//
//	EventBusArray{ EventBusArgs{...} }
type EventBusArrayInput interface {
	pulumi.Input

	ToEventBusArrayOutput() EventBusArrayOutput
	ToEventBusArrayOutputWithContext(context.Context) EventBusArrayOutput
}

type EventBusArray []EventBusInput

func (EventBusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventBus)(nil)).Elem()
}

func (i EventBusArray) ToEventBusArrayOutput() EventBusArrayOutput {
	return i.ToEventBusArrayOutputWithContext(context.Background())
}

func (i EventBusArray) ToEventBusArrayOutputWithContext(ctx context.Context) EventBusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusArrayOutput)
}

// EventBusMapInput is an input type that accepts EventBusMap and EventBusMapOutput values.
// You can construct a concrete instance of `EventBusMapInput` via:
//
//	EventBusMap{ "key": EventBusArgs{...} }
type EventBusMapInput interface {
	pulumi.Input

	ToEventBusMapOutput() EventBusMapOutput
	ToEventBusMapOutputWithContext(context.Context) EventBusMapOutput
}

type EventBusMap map[string]EventBusInput

func (EventBusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventBus)(nil)).Elem()
}

func (i EventBusMap) ToEventBusMapOutput() EventBusMapOutput {
	return i.ToEventBusMapOutputWithContext(context.Background())
}

func (i EventBusMap) ToEventBusMapOutputWithContext(ctx context.Context) EventBusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusMapOutput)
}

type EventBusOutput struct{ *pulumi.OutputState }

func (EventBusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventBus)(nil)).Elem()
}

func (o EventBusOutput) ToEventBusOutput() EventBusOutput {
	return o
}

func (o EventBusOutput) ToEventBusOutputWithContext(ctx context.Context) EventBusOutput {
	return o
}

// Event set description, unlimited character type, description within 200 characters.
func (o EventBusOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventBus) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the EB storage is enabled.
func (o EventBusOutput) EnableStore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventBus) pulumi.BoolPtrOutput { return v.EnableStore }).(pulumi.BoolPtrOutput)
}

// Event set name, which can only contain letters, numbers, underscores, hyphens, starts with a letter and ends with a number or letter, 2~60 characters.
func (o EventBusOutput) EventBusName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventBus) pulumi.StringOutput { return v.EventBusName }).(pulumi.StringOutput)
}

// EB storage duration.
func (o EventBusOutput) SaveDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventBus) pulumi.IntPtrOutput { return v.SaveDays }).(pulumi.IntPtrOutput)
}

// Tag description list.
func (o EventBusOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *EventBus) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type EventBusArrayOutput struct{ *pulumi.OutputState }

func (EventBusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventBus)(nil)).Elem()
}

func (o EventBusArrayOutput) ToEventBusArrayOutput() EventBusArrayOutput {
	return o
}

func (o EventBusArrayOutput) ToEventBusArrayOutputWithContext(ctx context.Context) EventBusArrayOutput {
	return o
}

func (o EventBusArrayOutput) Index(i pulumi.IntInput) EventBusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventBus {
		return vs[0].([]*EventBus)[vs[1].(int)]
	}).(EventBusOutput)
}

type EventBusMapOutput struct{ *pulumi.OutputState }

func (EventBusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventBus)(nil)).Elem()
}

func (o EventBusMapOutput) ToEventBusMapOutput() EventBusMapOutput {
	return o
}

func (o EventBusMapOutput) ToEventBusMapOutputWithContext(ctx context.Context) EventBusMapOutput {
	return o
}

func (o EventBusMapOutput) MapIndex(k pulumi.StringInput) EventBusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventBus {
		return vs[0].(map[string]*EventBus)[vs[1].(string)]
	}).(EventBusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusInput)(nil)).Elem(), &EventBus{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusArrayInput)(nil)).Elem(), EventBusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusMapInput)(nil)).Elem(), EventBusMap{})
	pulumi.RegisterOutputType(EventBusOutput{})
	pulumi.RegisterOutputType(EventBusArrayOutput{})
	pulumi.RegisterOutputType(EventBusMapOutput{})
}
