// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dasb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dasb deviceGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dasb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dasb.NewDeviceGroup(ctx, "example", &Dasb.DeviceGroupArgs{
//				DepartmentId: pulumi.String("1.2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dasb device_group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dasb/deviceGroup:DeviceGroup example 36
//
// ```
type DeviceGroup struct {
	pulumi.CustomResourceState

	// The ID of the department to which the asset group belongs, such as: 1.2.3 name, with a maximum length of 32 characters.
	DepartmentId pulumi.StringPtrOutput `pulumi:"departmentId"`
	// Device group name, the maximum length is 32 characters.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDeviceGroup registers a new resource with the given unique name, arguments, and options.
func NewDeviceGroup(ctx *pulumi.Context,
	name string, args *DeviceGroupArgs, opts ...pulumi.ResourceOption) (*DeviceGroup, error) {
	if args == nil {
		args = &DeviceGroupArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource DeviceGroup
	err := ctx.RegisterResource("tencentcloud:Dasb/deviceGroup:DeviceGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceGroup gets an existing DeviceGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceGroupState, opts ...pulumi.ResourceOption) (*DeviceGroup, error) {
	var resource DeviceGroup
	err := ctx.ReadResource("tencentcloud:Dasb/deviceGroup:DeviceGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceGroup resources.
type deviceGroupState struct {
	// The ID of the department to which the asset group belongs, such as: 1.2.3 name, with a maximum length of 32 characters.
	DepartmentId *string `pulumi:"departmentId"`
	// Device group name, the maximum length is 32 characters.
	Name *string `pulumi:"name"`
}

type DeviceGroupState struct {
	// The ID of the department to which the asset group belongs, such as: 1.2.3 name, with a maximum length of 32 characters.
	DepartmentId pulumi.StringPtrInput
	// Device group name, the maximum length is 32 characters.
	Name pulumi.StringPtrInput
}

func (DeviceGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceGroupState)(nil)).Elem()
}

type deviceGroupArgs struct {
	// The ID of the department to which the asset group belongs, such as: 1.2.3 name, with a maximum length of 32 characters.
	DepartmentId *string `pulumi:"departmentId"`
	// Device group name, the maximum length is 32 characters.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DeviceGroup resource.
type DeviceGroupArgs struct {
	// The ID of the department to which the asset group belongs, such as: 1.2.3 name, with a maximum length of 32 characters.
	DepartmentId pulumi.StringPtrInput
	// Device group name, the maximum length is 32 characters.
	Name pulumi.StringPtrInput
}

func (DeviceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceGroupArgs)(nil)).Elem()
}

type DeviceGroupInput interface {
	pulumi.Input

	ToDeviceGroupOutput() DeviceGroupOutput
	ToDeviceGroupOutputWithContext(ctx context.Context) DeviceGroupOutput
}

func (*DeviceGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceGroup)(nil)).Elem()
}

func (i *DeviceGroup) ToDeviceGroupOutput() DeviceGroupOutput {
	return i.ToDeviceGroupOutputWithContext(context.Background())
}

func (i *DeviceGroup) ToDeviceGroupOutputWithContext(ctx context.Context) DeviceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGroupOutput)
}

// DeviceGroupArrayInput is an input type that accepts DeviceGroupArray and DeviceGroupArrayOutput values.
// You can construct a concrete instance of `DeviceGroupArrayInput` via:
//
//	DeviceGroupArray{ DeviceGroupArgs{...} }
type DeviceGroupArrayInput interface {
	pulumi.Input

	ToDeviceGroupArrayOutput() DeviceGroupArrayOutput
	ToDeviceGroupArrayOutputWithContext(context.Context) DeviceGroupArrayOutput
}

type DeviceGroupArray []DeviceGroupInput

func (DeviceGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceGroup)(nil)).Elem()
}

func (i DeviceGroupArray) ToDeviceGroupArrayOutput() DeviceGroupArrayOutput {
	return i.ToDeviceGroupArrayOutputWithContext(context.Background())
}

func (i DeviceGroupArray) ToDeviceGroupArrayOutputWithContext(ctx context.Context) DeviceGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGroupArrayOutput)
}

// DeviceGroupMapInput is an input type that accepts DeviceGroupMap and DeviceGroupMapOutput values.
// You can construct a concrete instance of `DeviceGroupMapInput` via:
//
//	DeviceGroupMap{ "key": DeviceGroupArgs{...} }
type DeviceGroupMapInput interface {
	pulumi.Input

	ToDeviceGroupMapOutput() DeviceGroupMapOutput
	ToDeviceGroupMapOutputWithContext(context.Context) DeviceGroupMapOutput
}

type DeviceGroupMap map[string]DeviceGroupInput

func (DeviceGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceGroup)(nil)).Elem()
}

func (i DeviceGroupMap) ToDeviceGroupMapOutput() DeviceGroupMapOutput {
	return i.ToDeviceGroupMapOutputWithContext(context.Background())
}

func (i DeviceGroupMap) ToDeviceGroupMapOutputWithContext(ctx context.Context) DeviceGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGroupMapOutput)
}

type DeviceGroupOutput struct{ *pulumi.OutputState }

func (DeviceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceGroup)(nil)).Elem()
}

func (o DeviceGroupOutput) ToDeviceGroupOutput() DeviceGroupOutput {
	return o
}

func (o DeviceGroupOutput) ToDeviceGroupOutputWithContext(ctx context.Context) DeviceGroupOutput {
	return o
}

// The ID of the department to which the asset group belongs, such as: 1.2.3 name, with a maximum length of 32 characters.
func (o DeviceGroupOutput) DepartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceGroup) pulumi.StringPtrOutput { return v.DepartmentId }).(pulumi.StringPtrOutput)
}

// Device group name, the maximum length is 32 characters.
func (o DeviceGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DeviceGroupArrayOutput struct{ *pulumi.OutputState }

func (DeviceGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceGroup)(nil)).Elem()
}

func (o DeviceGroupArrayOutput) ToDeviceGroupArrayOutput() DeviceGroupArrayOutput {
	return o
}

func (o DeviceGroupArrayOutput) ToDeviceGroupArrayOutputWithContext(ctx context.Context) DeviceGroupArrayOutput {
	return o
}

func (o DeviceGroupArrayOutput) Index(i pulumi.IntInput) DeviceGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceGroup {
		return vs[0].([]*DeviceGroup)[vs[1].(int)]
	}).(DeviceGroupOutput)
}

type DeviceGroupMapOutput struct{ *pulumi.OutputState }

func (DeviceGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceGroup)(nil)).Elem()
}

func (o DeviceGroupMapOutput) ToDeviceGroupMapOutput() DeviceGroupMapOutput {
	return o
}

func (o DeviceGroupMapOutput) ToDeviceGroupMapOutputWithContext(ctx context.Context) DeviceGroupMapOutput {
	return o
}

func (o DeviceGroupMapOutput) MapIndex(k pulumi.StringInput) DeviceGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceGroup {
		return vs[0].(map[string]*DeviceGroup)[vs[1].(string)]
	}).(DeviceGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceGroupInput)(nil)).Elem(), &DeviceGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceGroupArrayInput)(nil)).Elem(), DeviceGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceGroupMapInput)(nil)).Elem(), DeviceGroupMap{})
	pulumi.RegisterOutputType(DeviceGroupOutput{})
	pulumi.RegisterOutputType(DeviceGroupArrayOutput{})
	pulumi.RegisterOutputType(DeviceGroupMapOutput{})
}
