// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dasb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dasb resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dasb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dasb.NewResource(ctx, "example", &Dasb.ResourceArgs{
//				AutoRenewFlag:    pulumi.Int(1),
//				DeployRegion:     pulumi.String("ap-guangzhou"),
//				DeployZone:       pulumi.String("ap-guangzhou-6"),
//				PackageBandwidth: pulumi.Int(10),
//				PackageNode:      pulumi.Int(50),
//				ResourceEdition:  pulumi.String("standard"),
//				ResourceNode:     pulumi.Int(2),
//				SubnetId:         pulumi.String("subnet-7uhvm46o"),
//				TimeSpan:         pulumi.Int(1),
//				TimeUnit:         pulumi.String("m"),
//				VpcId:            pulumi.String("vpc-q1of50wz"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dasb resource can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dasb/resource:Resource example bh-saas-kk5rabk0
//
// ```
type Resource struct {
	pulumi.CustomResourceState

	// Automatic renewal. 1 is auto renew flag, 0 is not.
	AutoRenewFlag pulumi.IntOutput `pulumi:"autoRenewFlag"`
	// Deploy region.
	DeployRegion pulumi.StringOutput `pulumi:"deployRegion"`
	// Deploy zone.
	DeployZone pulumi.StringPtrOutput `pulumi:"deployZone"`
	// Number of bandwidth expansion packets (4M).
	PackageBandwidth pulumi.IntOutput `pulumi:"packageBandwidth"`
	// Number of authorized point extension packages (50 points).
	PackageNode pulumi.IntOutput `pulumi:"packageNode"`
	// Resource type.Value:standard/pro.
	ResourceEdition pulumi.StringOutput `pulumi:"resourceEdition"`
	// Number of resource nodes.
	ResourceNode pulumi.IntOutput `pulumi:"resourceNode"`
	// Deploy resource subnetId.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Billing time.
	TimeSpan pulumi.IntOutput `pulumi:"timeSpan"`
	// Billing cycle, only support m: month.
	TimeUnit pulumi.StringOutput `pulumi:"timeUnit"`
	// Deploy resource vpcId.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewResource registers a new resource with the given unique name, arguments, and options.
func NewResource(ctx *pulumi.Context,
	name string, args *ResourceArgs, opts ...pulumi.ResourceOption) (*Resource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoRenewFlag == nil {
		return nil, errors.New("invalid value for required argument 'AutoRenewFlag'")
	}
	if args.DeployRegion == nil {
		return nil, errors.New("invalid value for required argument 'DeployRegion'")
	}
	if args.ResourceEdition == nil {
		return nil, errors.New("invalid value for required argument 'ResourceEdition'")
	}
	if args.ResourceNode == nil {
		return nil, errors.New("invalid value for required argument 'ResourceNode'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.TimeSpan == nil {
		return nil, errors.New("invalid value for required argument 'TimeSpan'")
	}
	if args.TimeUnit == nil {
		return nil, errors.New("invalid value for required argument 'TimeUnit'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Resource
	err := ctx.RegisterResource("tencentcloud:Dasb/resource:Resource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResource gets an existing Resource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceState, opts ...pulumi.ResourceOption) (*Resource, error) {
	var resource Resource
	err := ctx.ReadResource("tencentcloud:Dasb/resource:Resource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resource resources.
type resourceState struct {
	// Automatic renewal. 1 is auto renew flag, 0 is not.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// Deploy region.
	DeployRegion *string `pulumi:"deployRegion"`
	// Deploy zone.
	DeployZone *string `pulumi:"deployZone"`
	// Number of bandwidth expansion packets (4M).
	PackageBandwidth *int `pulumi:"packageBandwidth"`
	// Number of authorized point extension packages (50 points).
	PackageNode *int `pulumi:"packageNode"`
	// Resource type.Value:standard/pro.
	ResourceEdition *string `pulumi:"resourceEdition"`
	// Number of resource nodes.
	ResourceNode *int `pulumi:"resourceNode"`
	// Deploy resource subnetId.
	SubnetId *string `pulumi:"subnetId"`
	// Billing time.
	TimeSpan *int `pulumi:"timeSpan"`
	// Billing cycle, only support m: month.
	TimeUnit *string `pulumi:"timeUnit"`
	// Deploy resource vpcId.
	VpcId *string `pulumi:"vpcId"`
}

type ResourceState struct {
	// Automatic renewal. 1 is auto renew flag, 0 is not.
	AutoRenewFlag pulumi.IntPtrInput
	// Deploy region.
	DeployRegion pulumi.StringPtrInput
	// Deploy zone.
	DeployZone pulumi.StringPtrInput
	// Number of bandwidth expansion packets (4M).
	PackageBandwidth pulumi.IntPtrInput
	// Number of authorized point extension packages (50 points).
	PackageNode pulumi.IntPtrInput
	// Resource type.Value:standard/pro.
	ResourceEdition pulumi.StringPtrInput
	// Number of resource nodes.
	ResourceNode pulumi.IntPtrInput
	// Deploy resource subnetId.
	SubnetId pulumi.StringPtrInput
	// Billing time.
	TimeSpan pulumi.IntPtrInput
	// Billing cycle, only support m: month.
	TimeUnit pulumi.StringPtrInput
	// Deploy resource vpcId.
	VpcId pulumi.StringPtrInput
}

func (ResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceState)(nil)).Elem()
}

type resourceArgs struct {
	// Automatic renewal. 1 is auto renew flag, 0 is not.
	AutoRenewFlag int `pulumi:"autoRenewFlag"`
	// Deploy region.
	DeployRegion string `pulumi:"deployRegion"`
	// Deploy zone.
	DeployZone *string `pulumi:"deployZone"`
	// Number of bandwidth expansion packets (4M).
	PackageBandwidth *int `pulumi:"packageBandwidth"`
	// Number of authorized point extension packages (50 points).
	PackageNode *int `pulumi:"packageNode"`
	// Resource type.Value:standard/pro.
	ResourceEdition string `pulumi:"resourceEdition"`
	// Number of resource nodes.
	ResourceNode int `pulumi:"resourceNode"`
	// Deploy resource subnetId.
	SubnetId string `pulumi:"subnetId"`
	// Billing time.
	TimeSpan int `pulumi:"timeSpan"`
	// Billing cycle, only support m: month.
	TimeUnit string `pulumi:"timeUnit"`
	// Deploy resource vpcId.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Resource resource.
type ResourceArgs struct {
	// Automatic renewal. 1 is auto renew flag, 0 is not.
	AutoRenewFlag pulumi.IntInput
	// Deploy region.
	DeployRegion pulumi.StringInput
	// Deploy zone.
	DeployZone pulumi.StringPtrInput
	// Number of bandwidth expansion packets (4M).
	PackageBandwidth pulumi.IntPtrInput
	// Number of authorized point extension packages (50 points).
	PackageNode pulumi.IntPtrInput
	// Resource type.Value:standard/pro.
	ResourceEdition pulumi.StringInput
	// Number of resource nodes.
	ResourceNode pulumi.IntInput
	// Deploy resource subnetId.
	SubnetId pulumi.StringInput
	// Billing time.
	TimeSpan pulumi.IntInput
	// Billing cycle, only support m: month.
	TimeUnit pulumi.StringInput
	// Deploy resource vpcId.
	VpcId pulumi.StringInput
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceArgs)(nil)).Elem()
}

type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(ctx context.Context) ResourceOutput
}

func (*Resource) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *Resource) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i *Resource) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

// ResourceArrayInput is an input type that accepts ResourceArray and ResourceArrayOutput values.
// You can construct a concrete instance of `ResourceArrayInput` via:
//
//	ResourceArray{ ResourceArgs{...} }
type ResourceArrayInput interface {
	pulumi.Input

	ToResourceArrayOutput() ResourceArrayOutput
	ToResourceArrayOutputWithContext(context.Context) ResourceArrayOutput
}

type ResourceArray []ResourceInput

func (ResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resource)(nil)).Elem()
}

func (i ResourceArray) ToResourceArrayOutput() ResourceArrayOutput {
	return i.ToResourceArrayOutputWithContext(context.Background())
}

func (i ResourceArray) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceArrayOutput)
}

// ResourceMapInput is an input type that accepts ResourceMap and ResourceMapOutput values.
// You can construct a concrete instance of `ResourceMapInput` via:
//
//	ResourceMap{ "key": ResourceArgs{...} }
type ResourceMapInput interface {
	pulumi.Input

	ToResourceMapOutput() ResourceMapOutput
	ToResourceMapOutputWithContext(context.Context) ResourceMapOutput
}

type ResourceMap map[string]ResourceInput

func (ResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resource)(nil)).Elem()
}

func (i ResourceMap) ToResourceMapOutput() ResourceMapOutput {
	return i.ToResourceMapOutputWithContext(context.Background())
}

func (i ResourceMap) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMapOutput)
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

// Automatic renewal. 1 is auto renew flag, 0 is not.
func (o ResourceOutput) AutoRenewFlag() pulumi.IntOutput {
	return o.ApplyT(func(v *Resource) pulumi.IntOutput { return v.AutoRenewFlag }).(pulumi.IntOutput)
}

// Deploy region.
func (o ResourceOutput) DeployRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.DeployRegion }).(pulumi.StringOutput)
}

// Deploy zone.
func (o ResourceOutput) DeployZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringPtrOutput { return v.DeployZone }).(pulumi.StringPtrOutput)
}

// Number of bandwidth expansion packets (4M).
func (o ResourceOutput) PackageBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Resource) pulumi.IntOutput { return v.PackageBandwidth }).(pulumi.IntOutput)
}

// Number of authorized point extension packages (50 points).
func (o ResourceOutput) PackageNode() pulumi.IntOutput {
	return o.ApplyT(func(v *Resource) pulumi.IntOutput { return v.PackageNode }).(pulumi.IntOutput)
}

// Resource type.Value:standard/pro.
func (o ResourceOutput) ResourceEdition() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.ResourceEdition }).(pulumi.StringOutput)
}

// Number of resource nodes.
func (o ResourceOutput) ResourceNode() pulumi.IntOutput {
	return o.ApplyT(func(v *Resource) pulumi.IntOutput { return v.ResourceNode }).(pulumi.IntOutput)
}

// Deploy resource subnetId.
func (o ResourceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Billing time.
func (o ResourceOutput) TimeSpan() pulumi.IntOutput {
	return o.ApplyT(func(v *Resource) pulumi.IntOutput { return v.TimeSpan }).(pulumi.IntOutput)
}

// Billing cycle, only support m: month.
func (o ResourceOutput) TimeUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.TimeUnit }).(pulumi.StringOutput)
}

// Deploy resource vpcId.
func (o ResourceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ResourceArrayOutput struct{ *pulumi.OutputState }

func (ResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resource)(nil)).Elem()
}

func (o ResourceArrayOutput) ToResourceArrayOutput() ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) Index(i pulumi.IntInput) ResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Resource {
		return vs[0].([]*Resource)[vs[1].(int)]
	}).(ResourceOutput)
}

type ResourceMapOutput struct{ *pulumi.OutputState }

func (ResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resource)(nil)).Elem()
}

func (o ResourceMapOutput) ToResourceMapOutput() ResourceMapOutput {
	return o
}

func (o ResourceMapOutput) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return o
}

func (o ResourceMapOutput) MapIndex(k pulumi.StringInput) ResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Resource {
		return vs[0].(map[string]*Resource)[vs[1].(string)]
	}).(ResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceInput)(nil)).Elem(), &Resource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceArrayInput)(nil)).Elem(), ResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMapInput)(nil)).Elem(), ResourceMap{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourceArrayOutput{})
	pulumi.RegisterOutputType(ResourceMapOutput{})
}
