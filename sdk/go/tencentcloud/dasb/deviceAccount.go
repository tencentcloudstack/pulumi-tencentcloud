// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dasb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dasb deviceAccount
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dasb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dasb.NewDeviceAccount(ctx, "example", &Dasb.DeviceAccountArgs{
//				Account:  pulumi.String("root"),
//				DeviceId: pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dasb device_account can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dasb/deviceAccount:DeviceAccount example 11
//
// ```
type DeviceAccount struct {
	pulumi.CustomResourceState

	// Device account.
	Account pulumi.StringOutput `pulumi:"account"`
	// Device ID.
	DeviceId pulumi.IntOutput `pulumi:"deviceId"`
}

// NewDeviceAccount registers a new resource with the given unique name, arguments, and options.
func NewDeviceAccount(ctx *pulumi.Context,
	name string, args *DeviceAccountArgs, opts ...pulumi.ResourceOption) (*DeviceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Account == nil {
		return nil, errors.New("invalid value for required argument 'Account'")
	}
	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DeviceAccount
	err := ctx.RegisterResource("tencentcloud:Dasb/deviceAccount:DeviceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceAccount gets an existing DeviceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceAccountState, opts ...pulumi.ResourceOption) (*DeviceAccount, error) {
	var resource DeviceAccount
	err := ctx.ReadResource("tencentcloud:Dasb/deviceAccount:DeviceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceAccount resources.
type deviceAccountState struct {
	// Device account.
	Account *string `pulumi:"account"`
	// Device ID.
	DeviceId *int `pulumi:"deviceId"`
}

type DeviceAccountState struct {
	// Device account.
	Account pulumi.StringPtrInput
	// Device ID.
	DeviceId pulumi.IntPtrInput
}

func (DeviceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceAccountState)(nil)).Elem()
}

type deviceAccountArgs struct {
	// Device account.
	Account string `pulumi:"account"`
	// Device ID.
	DeviceId int `pulumi:"deviceId"`
}

// The set of arguments for constructing a DeviceAccount resource.
type DeviceAccountArgs struct {
	// Device account.
	Account pulumi.StringInput
	// Device ID.
	DeviceId pulumi.IntInput
}

func (DeviceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceAccountArgs)(nil)).Elem()
}

type DeviceAccountInput interface {
	pulumi.Input

	ToDeviceAccountOutput() DeviceAccountOutput
	ToDeviceAccountOutputWithContext(ctx context.Context) DeviceAccountOutput
}

func (*DeviceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceAccount)(nil)).Elem()
}

func (i *DeviceAccount) ToDeviceAccountOutput() DeviceAccountOutput {
	return i.ToDeviceAccountOutputWithContext(context.Background())
}

func (i *DeviceAccount) ToDeviceAccountOutputWithContext(ctx context.Context) DeviceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceAccountOutput)
}

// DeviceAccountArrayInput is an input type that accepts DeviceAccountArray and DeviceAccountArrayOutput values.
// You can construct a concrete instance of `DeviceAccountArrayInput` via:
//
//	DeviceAccountArray{ DeviceAccountArgs{...} }
type DeviceAccountArrayInput interface {
	pulumi.Input

	ToDeviceAccountArrayOutput() DeviceAccountArrayOutput
	ToDeviceAccountArrayOutputWithContext(context.Context) DeviceAccountArrayOutput
}

type DeviceAccountArray []DeviceAccountInput

func (DeviceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceAccount)(nil)).Elem()
}

func (i DeviceAccountArray) ToDeviceAccountArrayOutput() DeviceAccountArrayOutput {
	return i.ToDeviceAccountArrayOutputWithContext(context.Background())
}

func (i DeviceAccountArray) ToDeviceAccountArrayOutputWithContext(ctx context.Context) DeviceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceAccountArrayOutput)
}

// DeviceAccountMapInput is an input type that accepts DeviceAccountMap and DeviceAccountMapOutput values.
// You can construct a concrete instance of `DeviceAccountMapInput` via:
//
//	DeviceAccountMap{ "key": DeviceAccountArgs{...} }
type DeviceAccountMapInput interface {
	pulumi.Input

	ToDeviceAccountMapOutput() DeviceAccountMapOutput
	ToDeviceAccountMapOutputWithContext(context.Context) DeviceAccountMapOutput
}

type DeviceAccountMap map[string]DeviceAccountInput

func (DeviceAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceAccount)(nil)).Elem()
}

func (i DeviceAccountMap) ToDeviceAccountMapOutput() DeviceAccountMapOutput {
	return i.ToDeviceAccountMapOutputWithContext(context.Background())
}

func (i DeviceAccountMap) ToDeviceAccountMapOutputWithContext(ctx context.Context) DeviceAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceAccountMapOutput)
}

type DeviceAccountOutput struct{ *pulumi.OutputState }

func (DeviceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceAccount)(nil)).Elem()
}

func (o DeviceAccountOutput) ToDeviceAccountOutput() DeviceAccountOutput {
	return o
}

func (o DeviceAccountOutput) ToDeviceAccountOutputWithContext(ctx context.Context) DeviceAccountOutput {
	return o
}

// Device account.
func (o DeviceAccountOutput) Account() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceAccount) pulumi.StringOutput { return v.Account }).(pulumi.StringOutput)
}

// Device ID.
func (o DeviceAccountOutput) DeviceId() pulumi.IntOutput {
	return o.ApplyT(func(v *DeviceAccount) pulumi.IntOutput { return v.DeviceId }).(pulumi.IntOutput)
}

type DeviceAccountArrayOutput struct{ *pulumi.OutputState }

func (DeviceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceAccount)(nil)).Elem()
}

func (o DeviceAccountArrayOutput) ToDeviceAccountArrayOutput() DeviceAccountArrayOutput {
	return o
}

func (o DeviceAccountArrayOutput) ToDeviceAccountArrayOutputWithContext(ctx context.Context) DeviceAccountArrayOutput {
	return o
}

func (o DeviceAccountArrayOutput) Index(i pulumi.IntInput) DeviceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceAccount {
		return vs[0].([]*DeviceAccount)[vs[1].(int)]
	}).(DeviceAccountOutput)
}

type DeviceAccountMapOutput struct{ *pulumi.OutputState }

func (DeviceAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceAccount)(nil)).Elem()
}

func (o DeviceAccountMapOutput) ToDeviceAccountMapOutput() DeviceAccountMapOutput {
	return o
}

func (o DeviceAccountMapOutput) ToDeviceAccountMapOutputWithContext(ctx context.Context) DeviceAccountMapOutput {
	return o
}

func (o DeviceAccountMapOutput) MapIndex(k pulumi.StringInput) DeviceAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceAccount {
		return vs[0].(map[string]*DeviceAccount)[vs[1].(string)]
	}).(DeviceAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceAccountInput)(nil)).Elem(), &DeviceAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceAccountArrayInput)(nil)).Elem(), DeviceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceAccountMapInput)(nil)).Elem(), DeviceAccountMap{})
	pulumi.RegisterOutputType(DeviceAccountOutput{})
	pulumi.RegisterOutputType(DeviceAccountArrayOutput{})
	pulumi.RegisterOutputType(DeviceAccountMapOutput{})
}
