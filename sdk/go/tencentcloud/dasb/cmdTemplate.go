// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dasb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dasb cmdTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dasb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dasb.NewCmdTemplate(ctx, "example", &Dasb.CmdTemplateArgs{
//				CmdList: pulumi.String("rm -rf*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dasb cmd_template can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dasb/cmdTemplate:CmdTemplate example 15
//
// ```
type CmdTemplate struct {
	pulumi.CustomResourceState

	// Command list, n separated, maximum length 32768 bytes.
	CmdList pulumi.StringOutput `pulumi:"cmdList"`
	// Template name, maximum length 32 characters, cannot contain blank characters.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCmdTemplate registers a new resource with the given unique name, arguments, and options.
func NewCmdTemplate(ctx *pulumi.Context,
	name string, args *CmdTemplateArgs, opts ...pulumi.ResourceOption) (*CmdTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CmdList == nil {
		return nil, errors.New("invalid value for required argument 'CmdList'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CmdTemplate
	err := ctx.RegisterResource("tencentcloud:Dasb/cmdTemplate:CmdTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCmdTemplate gets an existing CmdTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCmdTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CmdTemplateState, opts ...pulumi.ResourceOption) (*CmdTemplate, error) {
	var resource CmdTemplate
	err := ctx.ReadResource("tencentcloud:Dasb/cmdTemplate:CmdTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CmdTemplate resources.
type cmdTemplateState struct {
	// Command list, n separated, maximum length 32768 bytes.
	CmdList *string `pulumi:"cmdList"`
	// Template name, maximum length 32 characters, cannot contain blank characters.
	Name *string `pulumi:"name"`
}

type CmdTemplateState struct {
	// Command list, n separated, maximum length 32768 bytes.
	CmdList pulumi.StringPtrInput
	// Template name, maximum length 32 characters, cannot contain blank characters.
	Name pulumi.StringPtrInput
}

func (CmdTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cmdTemplateState)(nil)).Elem()
}

type cmdTemplateArgs struct {
	// Command list, n separated, maximum length 32768 bytes.
	CmdList string `pulumi:"cmdList"`
	// Template name, maximum length 32 characters, cannot contain blank characters.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CmdTemplate resource.
type CmdTemplateArgs struct {
	// Command list, n separated, maximum length 32768 bytes.
	CmdList pulumi.StringInput
	// Template name, maximum length 32 characters, cannot contain blank characters.
	Name pulumi.StringPtrInput
}

func (CmdTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cmdTemplateArgs)(nil)).Elem()
}

type CmdTemplateInput interface {
	pulumi.Input

	ToCmdTemplateOutput() CmdTemplateOutput
	ToCmdTemplateOutputWithContext(ctx context.Context) CmdTemplateOutput
}

func (*CmdTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CmdTemplate)(nil)).Elem()
}

func (i *CmdTemplate) ToCmdTemplateOutput() CmdTemplateOutput {
	return i.ToCmdTemplateOutputWithContext(context.Background())
}

func (i *CmdTemplate) ToCmdTemplateOutputWithContext(ctx context.Context) CmdTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmdTemplateOutput)
}

// CmdTemplateArrayInput is an input type that accepts CmdTemplateArray and CmdTemplateArrayOutput values.
// You can construct a concrete instance of `CmdTemplateArrayInput` via:
//
//	CmdTemplateArray{ CmdTemplateArgs{...} }
type CmdTemplateArrayInput interface {
	pulumi.Input

	ToCmdTemplateArrayOutput() CmdTemplateArrayOutput
	ToCmdTemplateArrayOutputWithContext(context.Context) CmdTemplateArrayOutput
}

type CmdTemplateArray []CmdTemplateInput

func (CmdTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CmdTemplate)(nil)).Elem()
}

func (i CmdTemplateArray) ToCmdTemplateArrayOutput() CmdTemplateArrayOutput {
	return i.ToCmdTemplateArrayOutputWithContext(context.Background())
}

func (i CmdTemplateArray) ToCmdTemplateArrayOutputWithContext(ctx context.Context) CmdTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmdTemplateArrayOutput)
}

// CmdTemplateMapInput is an input type that accepts CmdTemplateMap and CmdTemplateMapOutput values.
// You can construct a concrete instance of `CmdTemplateMapInput` via:
//
//	CmdTemplateMap{ "key": CmdTemplateArgs{...} }
type CmdTemplateMapInput interface {
	pulumi.Input

	ToCmdTemplateMapOutput() CmdTemplateMapOutput
	ToCmdTemplateMapOutputWithContext(context.Context) CmdTemplateMapOutput
}

type CmdTemplateMap map[string]CmdTemplateInput

func (CmdTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CmdTemplate)(nil)).Elem()
}

func (i CmdTemplateMap) ToCmdTemplateMapOutput() CmdTemplateMapOutput {
	return i.ToCmdTemplateMapOutputWithContext(context.Background())
}

func (i CmdTemplateMap) ToCmdTemplateMapOutputWithContext(ctx context.Context) CmdTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmdTemplateMapOutput)
}

type CmdTemplateOutput struct{ *pulumi.OutputState }

func (CmdTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CmdTemplate)(nil)).Elem()
}

func (o CmdTemplateOutput) ToCmdTemplateOutput() CmdTemplateOutput {
	return o
}

func (o CmdTemplateOutput) ToCmdTemplateOutputWithContext(ctx context.Context) CmdTemplateOutput {
	return o
}

// Command list, n separated, maximum length 32768 bytes.
func (o CmdTemplateOutput) CmdList() pulumi.StringOutput {
	return o.ApplyT(func(v *CmdTemplate) pulumi.StringOutput { return v.CmdList }).(pulumi.StringOutput)
}

// Template name, maximum length 32 characters, cannot contain blank characters.
func (o CmdTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CmdTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CmdTemplateArrayOutput struct{ *pulumi.OutputState }

func (CmdTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CmdTemplate)(nil)).Elem()
}

func (o CmdTemplateArrayOutput) ToCmdTemplateArrayOutput() CmdTemplateArrayOutput {
	return o
}

func (o CmdTemplateArrayOutput) ToCmdTemplateArrayOutputWithContext(ctx context.Context) CmdTemplateArrayOutput {
	return o
}

func (o CmdTemplateArrayOutput) Index(i pulumi.IntInput) CmdTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CmdTemplate {
		return vs[0].([]*CmdTemplate)[vs[1].(int)]
	}).(CmdTemplateOutput)
}

type CmdTemplateMapOutput struct{ *pulumi.OutputState }

func (CmdTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CmdTemplate)(nil)).Elem()
}

func (o CmdTemplateMapOutput) ToCmdTemplateMapOutput() CmdTemplateMapOutput {
	return o
}

func (o CmdTemplateMapOutput) ToCmdTemplateMapOutputWithContext(ctx context.Context) CmdTemplateMapOutput {
	return o
}

func (o CmdTemplateMapOutput) MapIndex(k pulumi.StringInput) CmdTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CmdTemplate {
		return vs[0].(map[string]*CmdTemplate)[vs[1].(string)]
	}).(CmdTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CmdTemplateInput)(nil)).Elem(), &CmdTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmdTemplateArrayInput)(nil)).Elem(), CmdTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CmdTemplateMapInput)(nil)).Elem(), CmdTemplateMap{})
	pulumi.RegisterOutputType(CmdTemplateOutput{})
	pulumi.RegisterOutputType(CmdTemplateArrayOutput{})
	pulumi.RegisterOutputType(CmdTemplateMapOutput{})
}
