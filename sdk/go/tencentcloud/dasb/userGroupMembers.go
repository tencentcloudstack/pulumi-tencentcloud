// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dasb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dasb userGroupMembers
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dasb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dasb.NewUserGroupMembers(ctx, "example", &Dasb.UserGroupMembersArgs{
//				MemberIdSets: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//				},
//				UserGroupId: pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dasb user_group_members can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dasb/userGroupMembers:UserGroupMembers example 3#1,2,3
//
// ```
type UserGroupMembers struct {
	pulumi.CustomResourceState

	// Collection of member user IDs.
	MemberIdSets pulumi.IntArrayOutput `pulumi:"memberIdSets"`
	// User Group ID.
	UserGroupId pulumi.IntOutput `pulumi:"userGroupId"`
}

// NewUserGroupMembers registers a new resource with the given unique name, arguments, and options.
func NewUserGroupMembers(ctx *pulumi.Context,
	name string, args *UserGroupMembersArgs, opts ...pulumi.ResourceOption) (*UserGroupMembers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MemberIdSets == nil {
		return nil, errors.New("invalid value for required argument 'MemberIdSets'")
	}
	if args.UserGroupId == nil {
		return nil, errors.New("invalid value for required argument 'UserGroupId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UserGroupMembers
	err := ctx.RegisterResource("tencentcloud:Dasb/userGroupMembers:UserGroupMembers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroupMembers gets an existing UserGroupMembers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroupMembers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupMembersState, opts ...pulumi.ResourceOption) (*UserGroupMembers, error) {
	var resource UserGroupMembers
	err := ctx.ReadResource("tencentcloud:Dasb/userGroupMembers:UserGroupMembers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroupMembers resources.
type userGroupMembersState struct {
	// Collection of member user IDs.
	MemberIdSets []int `pulumi:"memberIdSets"`
	// User Group ID.
	UserGroupId *int `pulumi:"userGroupId"`
}

type UserGroupMembersState struct {
	// Collection of member user IDs.
	MemberIdSets pulumi.IntArrayInput
	// User Group ID.
	UserGroupId pulumi.IntPtrInput
}

func (UserGroupMembersState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupMembersState)(nil)).Elem()
}

type userGroupMembersArgs struct {
	// Collection of member user IDs.
	MemberIdSets []int `pulumi:"memberIdSets"`
	// User Group ID.
	UserGroupId int `pulumi:"userGroupId"`
}

// The set of arguments for constructing a UserGroupMembers resource.
type UserGroupMembersArgs struct {
	// Collection of member user IDs.
	MemberIdSets pulumi.IntArrayInput
	// User Group ID.
	UserGroupId pulumi.IntInput
}

func (UserGroupMembersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupMembersArgs)(nil)).Elem()
}

type UserGroupMembersInput interface {
	pulumi.Input

	ToUserGroupMembersOutput() UserGroupMembersOutput
	ToUserGroupMembersOutputWithContext(ctx context.Context) UserGroupMembersOutput
}

func (*UserGroupMembers) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupMembers)(nil)).Elem()
}

func (i *UserGroupMembers) ToUserGroupMembersOutput() UserGroupMembersOutput {
	return i.ToUserGroupMembersOutputWithContext(context.Background())
}

func (i *UserGroupMembers) ToUserGroupMembersOutputWithContext(ctx context.Context) UserGroupMembersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMembersOutput)
}

// UserGroupMembersArrayInput is an input type that accepts UserGroupMembersArray and UserGroupMembersArrayOutput values.
// You can construct a concrete instance of `UserGroupMembersArrayInput` via:
//
//	UserGroupMembersArray{ UserGroupMembersArgs{...} }
type UserGroupMembersArrayInput interface {
	pulumi.Input

	ToUserGroupMembersArrayOutput() UserGroupMembersArrayOutput
	ToUserGroupMembersArrayOutputWithContext(context.Context) UserGroupMembersArrayOutput
}

type UserGroupMembersArray []UserGroupMembersInput

func (UserGroupMembersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupMembers)(nil)).Elem()
}

func (i UserGroupMembersArray) ToUserGroupMembersArrayOutput() UserGroupMembersArrayOutput {
	return i.ToUserGroupMembersArrayOutputWithContext(context.Background())
}

func (i UserGroupMembersArray) ToUserGroupMembersArrayOutputWithContext(ctx context.Context) UserGroupMembersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMembersArrayOutput)
}

// UserGroupMembersMapInput is an input type that accepts UserGroupMembersMap and UserGroupMembersMapOutput values.
// You can construct a concrete instance of `UserGroupMembersMapInput` via:
//
//	UserGroupMembersMap{ "key": UserGroupMembersArgs{...} }
type UserGroupMembersMapInput interface {
	pulumi.Input

	ToUserGroupMembersMapOutput() UserGroupMembersMapOutput
	ToUserGroupMembersMapOutputWithContext(context.Context) UserGroupMembersMapOutput
}

type UserGroupMembersMap map[string]UserGroupMembersInput

func (UserGroupMembersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupMembers)(nil)).Elem()
}

func (i UserGroupMembersMap) ToUserGroupMembersMapOutput() UserGroupMembersMapOutput {
	return i.ToUserGroupMembersMapOutputWithContext(context.Background())
}

func (i UserGroupMembersMap) ToUserGroupMembersMapOutputWithContext(ctx context.Context) UserGroupMembersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupMembersMapOutput)
}

type UserGroupMembersOutput struct{ *pulumi.OutputState }

func (UserGroupMembersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupMembers)(nil)).Elem()
}

func (o UserGroupMembersOutput) ToUserGroupMembersOutput() UserGroupMembersOutput {
	return o
}

func (o UserGroupMembersOutput) ToUserGroupMembersOutputWithContext(ctx context.Context) UserGroupMembersOutput {
	return o
}

// Collection of member user IDs.
func (o UserGroupMembersOutput) MemberIdSets() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *UserGroupMembers) pulumi.IntArrayOutput { return v.MemberIdSets }).(pulumi.IntArrayOutput)
}

// User Group ID.
func (o UserGroupMembersOutput) UserGroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *UserGroupMembers) pulumi.IntOutput { return v.UserGroupId }).(pulumi.IntOutput)
}

type UserGroupMembersArrayOutput struct{ *pulumi.OutputState }

func (UserGroupMembersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupMembers)(nil)).Elem()
}

func (o UserGroupMembersArrayOutput) ToUserGroupMembersArrayOutput() UserGroupMembersArrayOutput {
	return o
}

func (o UserGroupMembersArrayOutput) ToUserGroupMembersArrayOutputWithContext(ctx context.Context) UserGroupMembersArrayOutput {
	return o
}

func (o UserGroupMembersArrayOutput) Index(i pulumi.IntInput) UserGroupMembersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserGroupMembers {
		return vs[0].([]*UserGroupMembers)[vs[1].(int)]
	}).(UserGroupMembersOutput)
}

type UserGroupMembersMapOutput struct{ *pulumi.OutputState }

func (UserGroupMembersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupMembers)(nil)).Elem()
}

func (o UserGroupMembersMapOutput) ToUserGroupMembersMapOutput() UserGroupMembersMapOutput {
	return o
}

func (o UserGroupMembersMapOutput) ToUserGroupMembersMapOutputWithContext(ctx context.Context) UserGroupMembersMapOutput {
	return o
}

func (o UserGroupMembersMapOutput) MapIndex(k pulumi.StringInput) UserGroupMembersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserGroupMembers {
		return vs[0].(map[string]*UserGroupMembers)[vs[1].(string)]
	}).(UserGroupMembersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMembersInput)(nil)).Elem(), &UserGroupMembers{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMembersArrayInput)(nil)).Elem(), UserGroupMembersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupMembersMapInput)(nil)).Elem(), UserGroupMembersMap{})
	pulumi.RegisterOutputType(UserGroupMembersOutput{})
	pulumi.RegisterOutputType(UserGroupMembersArrayOutput{})
	pulumi.RegisterOutputType(UserGroupMembersMapOutput{})
}
