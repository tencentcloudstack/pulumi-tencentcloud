// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dasb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dasb device
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dasb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dasb.NewDevice(ctx, "example", &Dasb.DeviceArgs{
//				DepartmentId: pulumi.String("1.2.3"),
//				Ip:           pulumi.String("192.168.0.1"),
//				OsName:       pulumi.String("Linux"),
//				Port:         pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dasb device can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dasb/device:Device example 17
//
// ```
type Device struct {
	pulumi.CustomResourceState

	// The department ID to which the device belongs.
	DepartmentId pulumi.StringPtrOutput `pulumi:"departmentId"`
	// IP address.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Asset multi-node: fields ip and port.
	IpPortSets pulumi.StringArrayOutput `pulumi:"ipPortSets"`
	// Hostname, can be empty.
	Name pulumi.StringOutput `pulumi:"name"`
	// Operating system name, only Linux, Windows or MySQL.
	OsName pulumi.StringOutput `pulumi:"osName"`
	// Management port.
	Port pulumi.IntOutput `pulumi:"port"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.OsName == nil {
		return nil, errors.New("invalid value for required argument 'OsName'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Device
	err := ctx.RegisterResource("tencentcloud:Dasb/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("tencentcloud:Dasb/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	// The department ID to which the device belongs.
	DepartmentId *string `pulumi:"departmentId"`
	// IP address.
	Ip *string `pulumi:"ip"`
	// Asset multi-node: fields ip and port.
	IpPortSets []string `pulumi:"ipPortSets"`
	// Hostname, can be empty.
	Name *string `pulumi:"name"`
	// Operating system name, only Linux, Windows or MySQL.
	OsName *string `pulumi:"osName"`
	// Management port.
	Port *int `pulumi:"port"`
}

type DeviceState struct {
	// The department ID to which the device belongs.
	DepartmentId pulumi.StringPtrInput
	// IP address.
	Ip pulumi.StringPtrInput
	// Asset multi-node: fields ip and port.
	IpPortSets pulumi.StringArrayInput
	// Hostname, can be empty.
	Name pulumi.StringPtrInput
	// Operating system name, only Linux, Windows or MySQL.
	OsName pulumi.StringPtrInput
	// Management port.
	Port pulumi.IntPtrInput
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	// The department ID to which the device belongs.
	DepartmentId *string `pulumi:"departmentId"`
	// IP address.
	Ip string `pulumi:"ip"`
	// Asset multi-node: fields ip and port.
	IpPortSets []string `pulumi:"ipPortSets"`
	// Hostname, can be empty.
	Name *string `pulumi:"name"`
	// Operating system name, only Linux, Windows or MySQL.
	OsName string `pulumi:"osName"`
	// Management port.
	Port int `pulumi:"port"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// The department ID to which the device belongs.
	DepartmentId pulumi.StringPtrInput
	// IP address.
	Ip pulumi.StringInput
	// Asset multi-node: fields ip and port.
	IpPortSets pulumi.StringArrayInput
	// Hostname, can be empty.
	Name pulumi.StringPtrInput
	// Operating system name, only Linux, Windows or MySQL.
	OsName pulumi.StringInput
	// Management port.
	Port pulumi.IntInput
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceInput interface {
	pulumi.Input

	ToDeviceOutput() DeviceOutput
	ToDeviceOutputWithContext(ctx context.Context) DeviceOutput
}

func (*Device) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (i *Device) ToDeviceOutput() DeviceOutput {
	return i.ToDeviceOutputWithContext(context.Background())
}

func (i *Device) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceOutput)
}

// DeviceArrayInput is an input type that accepts DeviceArray and DeviceArrayOutput values.
// You can construct a concrete instance of `DeviceArrayInput` via:
//
//	DeviceArray{ DeviceArgs{...} }
type DeviceArrayInput interface {
	pulumi.Input

	ToDeviceArrayOutput() DeviceArrayOutput
	ToDeviceArrayOutputWithContext(context.Context) DeviceArrayOutput
}

type DeviceArray []DeviceInput

func (DeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (i DeviceArray) ToDeviceArrayOutput() DeviceArrayOutput {
	return i.ToDeviceArrayOutputWithContext(context.Background())
}

func (i DeviceArray) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceArrayOutput)
}

// DeviceMapInput is an input type that accepts DeviceMap and DeviceMapOutput values.
// You can construct a concrete instance of `DeviceMapInput` via:
//
//	DeviceMap{ "key": DeviceArgs{...} }
type DeviceMapInput interface {
	pulumi.Input

	ToDeviceMapOutput() DeviceMapOutput
	ToDeviceMapOutputWithContext(context.Context) DeviceMapOutput
}

type DeviceMap map[string]DeviceInput

func (DeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (i DeviceMap) ToDeviceMapOutput() DeviceMapOutput {
	return i.ToDeviceMapOutputWithContext(context.Background())
}

func (i DeviceMap) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMapOutput)
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

// The department ID to which the device belongs.
func (o DeviceOutput) DepartmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.DepartmentId }).(pulumi.StringPtrOutput)
}

// IP address.
func (o DeviceOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Asset multi-node: fields ip and port.
func (o DeviceOutput) IpPortSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Device) pulumi.StringArrayOutput { return v.IpPortSets }).(pulumi.StringArrayOutput)
}

// Hostname, can be empty.
func (o DeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Operating system name, only Linux, Windows or MySQL.
func (o DeviceOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.OsName }).(pulumi.StringOutput)
}

// Management port.
func (o DeviceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

type DeviceArrayOutput struct{ *pulumi.OutputState }

func (DeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (o DeviceArrayOutput) ToDeviceArrayOutput() DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) Index(i pulumi.IntInput) DeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Device {
		return vs[0].([]*Device)[vs[1].(int)]
	}).(DeviceOutput)
}

type DeviceMapOutput struct{ *pulumi.OutputState }

func (DeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (o DeviceMapOutput) ToDeviceMapOutput() DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) MapIndex(k pulumi.StringInput) DeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Device {
		return vs[0].(map[string]*Device)[vs[1].(string)]
	}).(DeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInput)(nil)).Elem(), &Device{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceArrayInput)(nil)).Elem(), DeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMapInput)(nil)).Elem(), DeviceMap{})
	pulumi.RegisterOutputType(DeviceOutput{})
	pulumi.RegisterOutputType(DeviceArrayOutput{})
	pulumi.RegisterOutputType(DeviceMapOutput{})
}
