// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dasb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dasb deviceGroupMembers
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dasb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dasb.NewDeviceGroupMembers(ctx, "example", &Dasb.DeviceGroupMembersArgs{
//				DeviceGroupId: pulumi.Int(3),
//				MemberIdSets: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dasb device_group_members can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dasb/deviceGroupMembers:DeviceGroupMembers example 3#1,2,3
//
// ```
type DeviceGroupMembers struct {
	pulumi.CustomResourceState

	// Device Group ID.
	DeviceGroupId pulumi.IntOutput `pulumi:"deviceGroupId"`
	// A collection of device IDs that need to be added to the device group.
	MemberIdSets pulumi.IntArrayOutput `pulumi:"memberIdSets"`
}

// NewDeviceGroupMembers registers a new resource with the given unique name, arguments, and options.
func NewDeviceGroupMembers(ctx *pulumi.Context,
	name string, args *DeviceGroupMembersArgs, opts ...pulumi.ResourceOption) (*DeviceGroupMembers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceGroupId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceGroupId'")
	}
	if args.MemberIdSets == nil {
		return nil, errors.New("invalid value for required argument 'MemberIdSets'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DeviceGroupMembers
	err := ctx.RegisterResource("tencentcloud:Dasb/deviceGroupMembers:DeviceGroupMembers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceGroupMembers gets an existing DeviceGroupMembers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceGroupMembers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceGroupMembersState, opts ...pulumi.ResourceOption) (*DeviceGroupMembers, error) {
	var resource DeviceGroupMembers
	err := ctx.ReadResource("tencentcloud:Dasb/deviceGroupMembers:DeviceGroupMembers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceGroupMembers resources.
type deviceGroupMembersState struct {
	// Device Group ID.
	DeviceGroupId *int `pulumi:"deviceGroupId"`
	// A collection of device IDs that need to be added to the device group.
	MemberIdSets []int `pulumi:"memberIdSets"`
}

type DeviceGroupMembersState struct {
	// Device Group ID.
	DeviceGroupId pulumi.IntPtrInput
	// A collection of device IDs that need to be added to the device group.
	MemberIdSets pulumi.IntArrayInput
}

func (DeviceGroupMembersState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceGroupMembersState)(nil)).Elem()
}

type deviceGroupMembersArgs struct {
	// Device Group ID.
	DeviceGroupId int `pulumi:"deviceGroupId"`
	// A collection of device IDs that need to be added to the device group.
	MemberIdSets []int `pulumi:"memberIdSets"`
}

// The set of arguments for constructing a DeviceGroupMembers resource.
type DeviceGroupMembersArgs struct {
	// Device Group ID.
	DeviceGroupId pulumi.IntInput
	// A collection of device IDs that need to be added to the device group.
	MemberIdSets pulumi.IntArrayInput
}

func (DeviceGroupMembersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceGroupMembersArgs)(nil)).Elem()
}

type DeviceGroupMembersInput interface {
	pulumi.Input

	ToDeviceGroupMembersOutput() DeviceGroupMembersOutput
	ToDeviceGroupMembersOutputWithContext(ctx context.Context) DeviceGroupMembersOutput
}

func (*DeviceGroupMembers) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceGroupMembers)(nil)).Elem()
}

func (i *DeviceGroupMembers) ToDeviceGroupMembersOutput() DeviceGroupMembersOutput {
	return i.ToDeviceGroupMembersOutputWithContext(context.Background())
}

func (i *DeviceGroupMembers) ToDeviceGroupMembersOutputWithContext(ctx context.Context) DeviceGroupMembersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGroupMembersOutput)
}

// DeviceGroupMembersArrayInput is an input type that accepts DeviceGroupMembersArray and DeviceGroupMembersArrayOutput values.
// You can construct a concrete instance of `DeviceGroupMembersArrayInput` via:
//
//	DeviceGroupMembersArray{ DeviceGroupMembersArgs{...} }
type DeviceGroupMembersArrayInput interface {
	pulumi.Input

	ToDeviceGroupMembersArrayOutput() DeviceGroupMembersArrayOutput
	ToDeviceGroupMembersArrayOutputWithContext(context.Context) DeviceGroupMembersArrayOutput
}

type DeviceGroupMembersArray []DeviceGroupMembersInput

func (DeviceGroupMembersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceGroupMembers)(nil)).Elem()
}

func (i DeviceGroupMembersArray) ToDeviceGroupMembersArrayOutput() DeviceGroupMembersArrayOutput {
	return i.ToDeviceGroupMembersArrayOutputWithContext(context.Background())
}

func (i DeviceGroupMembersArray) ToDeviceGroupMembersArrayOutputWithContext(ctx context.Context) DeviceGroupMembersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGroupMembersArrayOutput)
}

// DeviceGroupMembersMapInput is an input type that accepts DeviceGroupMembersMap and DeviceGroupMembersMapOutput values.
// You can construct a concrete instance of `DeviceGroupMembersMapInput` via:
//
//	DeviceGroupMembersMap{ "key": DeviceGroupMembersArgs{...} }
type DeviceGroupMembersMapInput interface {
	pulumi.Input

	ToDeviceGroupMembersMapOutput() DeviceGroupMembersMapOutput
	ToDeviceGroupMembersMapOutputWithContext(context.Context) DeviceGroupMembersMapOutput
}

type DeviceGroupMembersMap map[string]DeviceGroupMembersInput

func (DeviceGroupMembersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceGroupMembers)(nil)).Elem()
}

func (i DeviceGroupMembersMap) ToDeviceGroupMembersMapOutput() DeviceGroupMembersMapOutput {
	return i.ToDeviceGroupMembersMapOutputWithContext(context.Background())
}

func (i DeviceGroupMembersMap) ToDeviceGroupMembersMapOutputWithContext(ctx context.Context) DeviceGroupMembersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceGroupMembersMapOutput)
}

type DeviceGroupMembersOutput struct{ *pulumi.OutputState }

func (DeviceGroupMembersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceGroupMembers)(nil)).Elem()
}

func (o DeviceGroupMembersOutput) ToDeviceGroupMembersOutput() DeviceGroupMembersOutput {
	return o
}

func (o DeviceGroupMembersOutput) ToDeviceGroupMembersOutputWithContext(ctx context.Context) DeviceGroupMembersOutput {
	return o
}

// Device Group ID.
func (o DeviceGroupMembersOutput) DeviceGroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *DeviceGroupMembers) pulumi.IntOutput { return v.DeviceGroupId }).(pulumi.IntOutput)
}

// A collection of device IDs that need to be added to the device group.
func (o DeviceGroupMembersOutput) MemberIdSets() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DeviceGroupMembers) pulumi.IntArrayOutput { return v.MemberIdSets }).(pulumi.IntArrayOutput)
}

type DeviceGroupMembersArrayOutput struct{ *pulumi.OutputState }

func (DeviceGroupMembersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceGroupMembers)(nil)).Elem()
}

func (o DeviceGroupMembersArrayOutput) ToDeviceGroupMembersArrayOutput() DeviceGroupMembersArrayOutput {
	return o
}

func (o DeviceGroupMembersArrayOutput) ToDeviceGroupMembersArrayOutputWithContext(ctx context.Context) DeviceGroupMembersArrayOutput {
	return o
}

func (o DeviceGroupMembersArrayOutput) Index(i pulumi.IntInput) DeviceGroupMembersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceGroupMembers {
		return vs[0].([]*DeviceGroupMembers)[vs[1].(int)]
	}).(DeviceGroupMembersOutput)
}

type DeviceGroupMembersMapOutput struct{ *pulumi.OutputState }

func (DeviceGroupMembersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceGroupMembers)(nil)).Elem()
}

func (o DeviceGroupMembersMapOutput) ToDeviceGroupMembersMapOutput() DeviceGroupMembersMapOutput {
	return o
}

func (o DeviceGroupMembersMapOutput) ToDeviceGroupMembersMapOutputWithContext(ctx context.Context) DeviceGroupMembersMapOutput {
	return o
}

func (o DeviceGroupMembersMapOutput) MapIndex(k pulumi.StringInput) DeviceGroupMembersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceGroupMembers {
		return vs[0].(map[string]*DeviceGroupMembers)[vs[1].(string)]
	}).(DeviceGroupMembersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceGroupMembersInput)(nil)).Elem(), &DeviceGroupMembers{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceGroupMembersArrayInput)(nil)).Elem(), DeviceGroupMembersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceGroupMembersMapInput)(nil)).Elem(), DeviceGroupMembersMap{})
	pulumi.RegisterOutputType(DeviceGroupMembersOutput{})
	pulumi.RegisterOutputType(DeviceGroupMembersArrayOutput{})
	pulumi.RegisterOutputType(DeviceGroupMembersMapOutput{})
}
