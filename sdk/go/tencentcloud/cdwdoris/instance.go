// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdwdoris

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a cdwdoris instance
//
// ## Example Usage
//
// ### Create a POSTPAID instance
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cdwdoris"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-6"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(availabilityZone),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("172.16.0.0/24"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			exampleGroup, err := Security.NewGroup(ctx, "exampleGroup", &Security.GroupArgs{
//				Description: pulumi.String("security group desc."),
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("Terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create POSTPAID instance
//			_, err = Cdwdoris.NewInstance(ctx, "exampleInstance", &Cdwdoris.InstanceArgs{
//				Zone:                pulumi.String(availabilityZone),
//				UserVpcId:           vpc.ID(),
//				UserSubnetId:        subnet.ID(),
//				ProductVersion:      pulumi.String("2.1"),
//				InstanceName:        pulumi.String("tf-example"),
//				DorisUserPwd:        pulumi.String("Password@test"),
//				HaFlag:              pulumi.Bool(false),
//				CaseSensitive:       pulumi.Int(0),
//				EnableMultiZones:    pulumi.Bool(false),
//				WorkloadGroupStatus: pulumi.String("open"),
//				SecurityGroupIds: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				ChargeProperties: &cdwdoris.InstanceChargePropertiesArgs{
//					ChargeType: pulumi.String("POSTPAID_BY_HOUR"),
//				},
//				FeSpec: &cdwdoris.InstanceFeSpecArgs{
//					SpecName: pulumi.String("S_4_16_P"),
//					Count:    pulumi.Int(3),
//					DiskSize: pulumi.Int(200),
//				},
//				BeSpec: &cdwdoris.InstanceBeSpecArgs{
//					SpecName: pulumi.String("S_4_16_P"),
//					Count:    pulumi.Int(3),
//					DiskSize: pulumi.Int(200),
//				},
//				Tags: cdwdoris.InstanceTagArray{
//					&cdwdoris.InstanceTagArgs{
//						TagKey:   pulumi.String("createBy"),
//						TagValue: pulumi.String("Terraform"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create a POSTPAID instance
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cdwdoris"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-6"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(availabilityZone),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("172.16.0.0/24"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			exampleGroup, err := Security.NewGroup(ctx, "exampleGroup", &Security.GroupArgs{
//				Description: pulumi.String("security group desc."),
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("Terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create PREPAID instance
//			_, err = Cdwdoris.NewInstance(ctx, "exampleInstance", &Cdwdoris.InstanceArgs{
//				Zone:                pulumi.String(availabilityZone),
//				UserVpcId:           vpc.ID(),
//				UserSubnetId:        subnet.ID(),
//				ProductVersion:      pulumi.String("2.1"),
//				InstanceName:        pulumi.String("tf-example"),
//				DorisUserPwd:        pulumi.String("Password@test"),
//				HaFlag:              pulumi.Bool(false),
//				CaseSensitive:       pulumi.Int(0),
//				EnableMultiZones:    pulumi.Bool(false),
//				WorkloadGroupStatus: pulumi.String("close"),
//				SecurityGroupIds: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				ChargeProperties: &cdwdoris.InstanceChargePropertiesArgs{
//					ChargeType: pulumi.String("PREPAID"),
//					TimeSpan:   pulumi.Int(1),
//					TimeUnit:   pulumi.String("m"),
//				},
//				FeSpec: &cdwdoris.InstanceFeSpecArgs{
//					SpecName: pulumi.String("S_4_16_P"),
//					Count:    pulumi.Int(3),
//					DiskSize: pulumi.Int(200),
//				},
//				BeSpec: &cdwdoris.InstanceBeSpecArgs{
//					SpecName: pulumi.String("S_4_16_P"),
//					Count:    pulumi.Int(3),
//					DiskSize: pulumi.Int(200),
//				},
//				Tags: cdwdoris.InstanceTagArray{
//					&cdwdoris.InstanceTagArgs{
//						TagKey:   pulumi.String("createBy"),
//						TagValue: pulumi.String("Terraform"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type Instance struct {
	pulumi.CustomResourceState

	// BE specifications.
	BeSpec InstanceBeSpecOutput `pulumi:"beSpec"`
	// Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
	CaseSensitive pulumi.IntPtrOutput `pulumi:"caseSensitive"`
	// Payment type.
	ChargeProperties InstanceChargePropertiesOutput `pulumi:"chargeProperties"`
	// Database password.
	DorisUserPwd pulumi.StringOutput `pulumi:"dorisUserPwd"`
	// Whether to enable multi-availability zone.
	EnableMultiZones pulumi.BoolPtrOutput `pulumi:"enableMultiZones"`
	// FE specifications.
	FeSpec InstanceFeSpecOutput `pulumi:"feSpec"`
	// Whether it is highly available.
	HaFlag pulumi.BoolOutput `pulumi:"haFlag"`
	// High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
	HaType pulumi.IntPtrOutput `pulumi:"haType"`
	// Instance name.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Product version number.
	ProductVersion pulumi.StringOutput `pulumi:"productVersion"`
	// Security Group Id list.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Tag list.
	Tags InstanceTagArrayOutput `pulumi:"tags"`
	// After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
	UserMultiZoneInfos InstanceUserMultiZoneInfosPtrOutput `pulumi:"userMultiZoneInfos"`
	// User subnet ID.
	UserSubnetId pulumi.StringOutput `pulumi:"userSubnetId"`
	// User VPCID.
	UserVpcId pulumi.StringOutput `pulumi:"userVpcId"`
	// Whether to enable resource group. `open` - enable, `close` - disable.
	WorkloadGroupStatus pulumi.StringOutput `pulumi:"workloadGroupStatus"`
	// Availability zone.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BeSpec == nil {
		return nil, errors.New("invalid value for required argument 'BeSpec'")
	}
	if args.ChargeProperties == nil {
		return nil, errors.New("invalid value for required argument 'ChargeProperties'")
	}
	if args.DorisUserPwd == nil {
		return nil, errors.New("invalid value for required argument 'DorisUserPwd'")
	}
	if args.FeSpec == nil {
		return nil, errors.New("invalid value for required argument 'FeSpec'")
	}
	if args.HaFlag == nil {
		return nil, errors.New("invalid value for required argument 'HaFlag'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.ProductVersion == nil {
		return nil, errors.New("invalid value for required argument 'ProductVersion'")
	}
	if args.UserSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'UserSubnetId'")
	}
	if args.UserVpcId == nil {
		return nil, errors.New("invalid value for required argument 'UserVpcId'")
	}
	if args.WorkloadGroupStatus == nil {
		return nil, errors.New("invalid value for required argument 'WorkloadGroupStatus'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	if args.DorisUserPwd != nil {
		args.DorisUserPwd = pulumi.ToSecret(args.DorisUserPwd).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"dorisUserPwd",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("tencentcloud:Cdwdoris/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("tencentcloud:Cdwdoris/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// BE specifications.
	BeSpec *InstanceBeSpec `pulumi:"beSpec"`
	// Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
	CaseSensitive *int `pulumi:"caseSensitive"`
	// Payment type.
	ChargeProperties *InstanceChargeProperties `pulumi:"chargeProperties"`
	// Database password.
	DorisUserPwd *string `pulumi:"dorisUserPwd"`
	// Whether to enable multi-availability zone.
	EnableMultiZones *bool `pulumi:"enableMultiZones"`
	// FE specifications.
	FeSpec *InstanceFeSpec `pulumi:"feSpec"`
	// Whether it is highly available.
	HaFlag *bool `pulumi:"haFlag"`
	// High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
	HaType *int `pulumi:"haType"`
	// Instance name.
	InstanceName *string `pulumi:"instanceName"`
	// Product version number.
	ProductVersion *string `pulumi:"productVersion"`
	// Security Group Id list.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Tag list.
	Tags []InstanceTag `pulumi:"tags"`
	// After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
	UserMultiZoneInfos *InstanceUserMultiZoneInfos `pulumi:"userMultiZoneInfos"`
	// User subnet ID.
	UserSubnetId *string `pulumi:"userSubnetId"`
	// User VPCID.
	UserVpcId *string `pulumi:"userVpcId"`
	// Whether to enable resource group. `open` - enable, `close` - disable.
	WorkloadGroupStatus *string `pulumi:"workloadGroupStatus"`
	// Availability zone.
	Zone *string `pulumi:"zone"`
}

type InstanceState struct {
	// BE specifications.
	BeSpec InstanceBeSpecPtrInput
	// Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
	CaseSensitive pulumi.IntPtrInput
	// Payment type.
	ChargeProperties InstanceChargePropertiesPtrInput
	// Database password.
	DorisUserPwd pulumi.StringPtrInput
	// Whether to enable multi-availability zone.
	EnableMultiZones pulumi.BoolPtrInput
	// FE specifications.
	FeSpec InstanceFeSpecPtrInput
	// Whether it is highly available.
	HaFlag pulumi.BoolPtrInput
	// High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
	HaType pulumi.IntPtrInput
	// Instance name.
	InstanceName pulumi.StringPtrInput
	// Product version number.
	ProductVersion pulumi.StringPtrInput
	// Security Group Id list.
	SecurityGroupIds pulumi.StringArrayInput
	// Tag list.
	Tags InstanceTagArrayInput
	// After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
	UserMultiZoneInfos InstanceUserMultiZoneInfosPtrInput
	// User subnet ID.
	UserSubnetId pulumi.StringPtrInput
	// User VPCID.
	UserVpcId pulumi.StringPtrInput
	// Whether to enable resource group. `open` - enable, `close` - disable.
	WorkloadGroupStatus pulumi.StringPtrInput
	// Availability zone.
	Zone pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// BE specifications.
	BeSpec InstanceBeSpec `pulumi:"beSpec"`
	// Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
	CaseSensitive *int `pulumi:"caseSensitive"`
	// Payment type.
	ChargeProperties InstanceChargeProperties `pulumi:"chargeProperties"`
	// Database password.
	DorisUserPwd string `pulumi:"dorisUserPwd"`
	// Whether to enable multi-availability zone.
	EnableMultiZones *bool `pulumi:"enableMultiZones"`
	// FE specifications.
	FeSpec InstanceFeSpec `pulumi:"feSpec"`
	// Whether it is highly available.
	HaFlag bool `pulumi:"haFlag"`
	// High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
	HaType *int `pulumi:"haType"`
	// Instance name.
	InstanceName string `pulumi:"instanceName"`
	// Product version number.
	ProductVersion string `pulumi:"productVersion"`
	// Security Group Id list.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Tag list.
	Tags []InstanceTag `pulumi:"tags"`
	// After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
	UserMultiZoneInfos *InstanceUserMultiZoneInfos `pulumi:"userMultiZoneInfos"`
	// User subnet ID.
	UserSubnetId string `pulumi:"userSubnetId"`
	// User VPCID.
	UserVpcId string `pulumi:"userVpcId"`
	// Whether to enable resource group. `open` - enable, `close` - disable.
	WorkloadGroupStatus string `pulumi:"workloadGroupStatus"`
	// Availability zone.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// BE specifications.
	BeSpec InstanceBeSpecInput
	// Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
	CaseSensitive pulumi.IntPtrInput
	// Payment type.
	ChargeProperties InstanceChargePropertiesInput
	// Database password.
	DorisUserPwd pulumi.StringInput
	// Whether to enable multi-availability zone.
	EnableMultiZones pulumi.BoolPtrInput
	// FE specifications.
	FeSpec InstanceFeSpecInput
	// Whether it is highly available.
	HaFlag pulumi.BoolInput
	// High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
	HaType pulumi.IntPtrInput
	// Instance name.
	InstanceName pulumi.StringInput
	// Product version number.
	ProductVersion pulumi.StringInput
	// Security Group Id list.
	SecurityGroupIds pulumi.StringArrayInput
	// Tag list.
	Tags InstanceTagArrayInput
	// After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
	UserMultiZoneInfos InstanceUserMultiZoneInfosPtrInput
	// User subnet ID.
	UserSubnetId pulumi.StringInput
	// User VPCID.
	UserVpcId pulumi.StringInput
	// Whether to enable resource group. `open` - enable, `close` - disable.
	WorkloadGroupStatus pulumi.StringInput
	// Availability zone.
	Zone pulumi.StringInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// BE specifications.
func (o InstanceOutput) BeSpec() InstanceBeSpecOutput {
	return o.ApplyT(func(v *Instance) InstanceBeSpecOutput { return v.BeSpec }).(InstanceBeSpecOutput)
}

// Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
func (o InstanceOutput) CaseSensitive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.CaseSensitive }).(pulumi.IntPtrOutput)
}

// Payment type.
func (o InstanceOutput) ChargeProperties() InstanceChargePropertiesOutput {
	return o.ApplyT(func(v *Instance) InstanceChargePropertiesOutput { return v.ChargeProperties }).(InstanceChargePropertiesOutput)
}

// Database password.
func (o InstanceOutput) DorisUserPwd() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DorisUserPwd }).(pulumi.StringOutput)
}

// Whether to enable multi-availability zone.
func (o InstanceOutput) EnableMultiZones() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.EnableMultiZones }).(pulumi.BoolPtrOutput)
}

// FE specifications.
func (o InstanceOutput) FeSpec() InstanceFeSpecOutput {
	return o.ApplyT(func(v *Instance) InstanceFeSpecOutput { return v.FeSpec }).(InstanceFeSpecOutput)
}

// Whether it is highly available.
func (o InstanceOutput) HaFlag() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.HaFlag }).(pulumi.BoolOutput)
}

// High availability type: 0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1), 1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number), 2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
func (o InstanceOutput) HaType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.HaType }).(pulumi.IntPtrOutput)
}

// Instance name.
func (o InstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Product version number.
func (o InstanceOutput) ProductVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProductVersion }).(pulumi.StringOutput)
}

// Security Group Id list.
func (o InstanceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Tag list.
func (o InstanceOutput) Tags() InstanceTagArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceTagArrayOutput { return v.Tags }).(InstanceTagArrayOutput)
}

// After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
func (o InstanceOutput) UserMultiZoneInfos() InstanceUserMultiZoneInfosPtrOutput {
	return o.ApplyT(func(v *Instance) InstanceUserMultiZoneInfosPtrOutput { return v.UserMultiZoneInfos }).(InstanceUserMultiZoneInfosPtrOutput)
}

// User subnet ID.
func (o InstanceOutput) UserSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UserSubnetId }).(pulumi.StringOutput)
}

// User VPCID.
func (o InstanceOutput) UserVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UserVpcId }).(pulumi.StringOutput)
}

// Whether to enable resource group. `open` - enable, `close` - disable.
func (o InstanceOutput) WorkloadGroupStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.WorkloadGroupStatus }).(pulumi.StringOutput)
}

// Availability zone.
func (o InstanceOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
