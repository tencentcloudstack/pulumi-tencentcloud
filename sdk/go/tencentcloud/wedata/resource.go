// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wedata

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a wedata resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Wedata"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Wedata.NewResource(ctx, "example", &Wedata.ResourceArgs{
//				CosBucketName: pulumi.String("wedata-demo-1314991481"),
//				CosRegion:     pulumi.String("ap-guangzhou"),
//				FileName:      pulumi.String("tf_example"),
//				FilePath:      pulumi.String("/datastudio/resource/demo"),
//				FilesSize:     pulumi.String("8165"),
//				ProjectId:     pulumi.String("1612982498218618880"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// wedata resource can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Wedata/resource:Resource example 1612982498218618880#/datastudio/resource/demo#75431931-7d27-4034-b3de-3dc3348a220e
//
// ```
type Resource struct {
	pulumi.CustomResourceState

	// Cos bucket name.
	CosBucketName pulumi.StringOutput `pulumi:"cosBucketName"`
	// Cos bucket region.
	CosRegion pulumi.StringOutput `pulumi:"cosRegion"`
	// File name.
	FileName pulumi.StringOutput `pulumi:"fileName"`
	// For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
	FilePath pulumi.StringOutput `pulumi:"filePath"`
	// File size.
	FilesSize pulumi.StringOutput `pulumi:"filesSize"`
	// Project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Resource ID.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
}

// NewResource registers a new resource with the given unique name, arguments, and options.
func NewResource(ctx *pulumi.Context,
	name string, args *ResourceArgs, opts ...pulumi.ResourceOption) (*Resource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CosBucketName == nil {
		return nil, errors.New("invalid value for required argument 'CosBucketName'")
	}
	if args.CosRegion == nil {
		return nil, errors.New("invalid value for required argument 'CosRegion'")
	}
	if args.FileName == nil {
		return nil, errors.New("invalid value for required argument 'FileName'")
	}
	if args.FilePath == nil {
		return nil, errors.New("invalid value for required argument 'FilePath'")
	}
	if args.FilesSize == nil {
		return nil, errors.New("invalid value for required argument 'FilesSize'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Resource
	err := ctx.RegisterResource("tencentcloud:Wedata/resource:Resource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResource gets an existing Resource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceState, opts ...pulumi.ResourceOption) (*Resource, error) {
	var resource Resource
	err := ctx.ReadResource("tencentcloud:Wedata/resource:Resource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resource resources.
type resourceState struct {
	// Cos bucket name.
	CosBucketName *string `pulumi:"cosBucketName"`
	// Cos bucket region.
	CosRegion *string `pulumi:"cosRegion"`
	// File name.
	FileName *string `pulumi:"fileName"`
	// For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
	FilePath *string `pulumi:"filePath"`
	// File size.
	FilesSize *string `pulumi:"filesSize"`
	// Project ID.
	ProjectId *string `pulumi:"projectId"`
	// Resource ID.
	ResourceId *string `pulumi:"resourceId"`
}

type ResourceState struct {
	// Cos bucket name.
	CosBucketName pulumi.StringPtrInput
	// Cos bucket region.
	CosRegion pulumi.StringPtrInput
	// File name.
	FileName pulumi.StringPtrInput
	// For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
	FilePath pulumi.StringPtrInput
	// File size.
	FilesSize pulumi.StringPtrInput
	// Project ID.
	ProjectId pulumi.StringPtrInput
	// Resource ID.
	ResourceId pulumi.StringPtrInput
}

func (ResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceState)(nil)).Elem()
}

type resourceArgs struct {
	// Cos bucket name.
	CosBucketName string `pulumi:"cosBucketName"`
	// Cos bucket region.
	CosRegion string `pulumi:"cosRegion"`
	// File name.
	FileName string `pulumi:"fileName"`
	// For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
	FilePath string `pulumi:"filePath"`
	// File size.
	FilesSize string `pulumi:"filesSize"`
	// Project ID.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a Resource resource.
type ResourceArgs struct {
	// Cos bucket name.
	CosBucketName pulumi.StringInput
	// Cos bucket region.
	CosRegion pulumi.StringInput
	// File name.
	FileName pulumi.StringInput
	// For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
	FilePath pulumi.StringInput
	// File size.
	FilesSize pulumi.StringInput
	// Project ID.
	ProjectId pulumi.StringInput
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceArgs)(nil)).Elem()
}

type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(ctx context.Context) ResourceOutput
}

func (*Resource) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *Resource) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i *Resource) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

// ResourceArrayInput is an input type that accepts ResourceArray and ResourceArrayOutput values.
// You can construct a concrete instance of `ResourceArrayInput` via:
//
//	ResourceArray{ ResourceArgs{...} }
type ResourceArrayInput interface {
	pulumi.Input

	ToResourceArrayOutput() ResourceArrayOutput
	ToResourceArrayOutputWithContext(context.Context) ResourceArrayOutput
}

type ResourceArray []ResourceInput

func (ResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resource)(nil)).Elem()
}

func (i ResourceArray) ToResourceArrayOutput() ResourceArrayOutput {
	return i.ToResourceArrayOutputWithContext(context.Background())
}

func (i ResourceArray) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceArrayOutput)
}

// ResourceMapInput is an input type that accepts ResourceMap and ResourceMapOutput values.
// You can construct a concrete instance of `ResourceMapInput` via:
//
//	ResourceMap{ "key": ResourceArgs{...} }
type ResourceMapInput interface {
	pulumi.Input

	ToResourceMapOutput() ResourceMapOutput
	ToResourceMapOutputWithContext(context.Context) ResourceMapOutput
}

type ResourceMap map[string]ResourceInput

func (ResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resource)(nil)).Elem()
}

func (i ResourceMap) ToResourceMapOutput() ResourceMapOutput {
	return i.ToResourceMapOutputWithContext(context.Background())
}

func (i ResourceMap) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMapOutput)
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

// Cos bucket name.
func (o ResourceOutput) CosBucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.CosBucketName }).(pulumi.StringOutput)
}

// Cos bucket region.
func (o ResourceOutput) CosRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.CosRegion }).(pulumi.StringOutput)
}

// File name.
func (o ResourceOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.FileName }).(pulumi.StringOutput)
}

// For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
func (o ResourceOutput) FilePath() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.FilePath }).(pulumi.StringOutput)
}

// File size.
func (o ResourceOutput) FilesSize() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.FilesSize }).(pulumi.StringOutput)
}

// Project ID.
func (o ResourceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Resource ID.
func (o ResourceOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

type ResourceArrayOutput struct{ *pulumi.OutputState }

func (ResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resource)(nil)).Elem()
}

func (o ResourceArrayOutput) ToResourceArrayOutput() ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) Index(i pulumi.IntInput) ResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Resource {
		return vs[0].([]*Resource)[vs[1].(int)]
	}).(ResourceOutput)
}

type ResourceMapOutput struct{ *pulumi.OutputState }

func (ResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resource)(nil)).Elem()
}

func (o ResourceMapOutput) ToResourceMapOutput() ResourceMapOutput {
	return o
}

func (o ResourceMapOutput) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return o
}

func (o ResourceMapOutput) MapIndex(k pulumi.StringInput) ResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Resource {
		return vs[0].(map[string]*Resource)[vs[1].(string)]
	}).(ResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceInput)(nil)).Elem(), &Resource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceArrayInput)(nil)).Elem(), ResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMapInput)(nil)).Elem(), ResourceMap{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourceArrayOutput{})
	pulumi.RegisterOutputType(ResourceMapOutput{})
}
