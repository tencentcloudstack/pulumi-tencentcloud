// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wedata

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a wedata datasource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Wedata"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"connectType":   "public",
//				"authorityType": "true",
//				"deployType":    "CONNSTR_PUBLICDB",
//				"url":           "jdbc:mysql://1.1.1.1:8080/database",
//				"username":      "root",
//				"password":      "password",
//				"type":          "MYSQL",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err := Wedata.NewDatasource(ctx, "example", &Wedata.DatasourceArgs{
//				Category:          pulumi.String("DB"),
//				Type:              pulumi.String("MYSQL"),
//				OwnerProjectId:    pulumi.String("1612982498218618880"),
//				OwnerProjectName:  pulumi.String("project_demo"),
//				OwnerProjectIdent: pulumi.String("体验项目"),
//				Description:       pulumi.String("description."),
//				Display:           pulumi.String("tf_example_demo"),
//				Status:            pulumi.Int(1),
//				CosBucket:         pulumi.String("wedata-agent-sh-1257305158"),
//				CosRegion:         pulumi.String("ap-shanghai"),
//				Params:            pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Datasource struct {
	pulumi.CustomResourceState

	// BizParams.
	BizParams pulumi.StringPtrOutput `pulumi:"bizParams"`
	// DataSource Category.
	Category pulumi.StringOutput `pulumi:"category"`
	// ClusterId.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Collect.
	Collect pulumi.StringOutput `pulumi:"collect"`
	// COSBucket.
	CosBucket pulumi.StringPtrOutput `pulumi:"cosBucket"`
	// Cos region.
	CosRegion pulumi.StringPtrOutput `pulumi:"cosRegion"`
	// Dbname.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Display.
	Display pulumi.StringPtrOutput `pulumi:"display"`
	// Instance.
	Instance pulumi.StringPtrOutput `pulumi:"instance"`
	// DataSource Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Owner projectId.
	OwnerProjectId pulumi.StringOutput `pulumi:"ownerProjectId"`
	// Owner Project Ident.
	OwnerProjectIdent pulumi.StringOutput `pulumi:"ownerProjectIdent"`
	// Owner project name.
	OwnerProjectName pulumi.StringOutput `pulumi:"ownerProjectName"`
	// Params.
	Params pulumi.StringOutput `pulumi:"params"`
	// Params Out.
	ParamsOut pulumi.StringOutput `pulumi:"paramsOut"`
	// Status.
	Status pulumi.IntPtrOutput `pulumi:"status"`
	// DataSource Type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDatasource registers a new resource with the given unique name, arguments, and options.
func NewDatasource(ctx *pulumi.Context,
	name string, args *DatasourceArgs, opts ...pulumi.ResourceOption) (*Datasource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	if args.OwnerProjectId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerProjectId'")
	}
	if args.OwnerProjectIdent == nil {
		return nil, errors.New("invalid value for required argument 'OwnerProjectIdent'")
	}
	if args.OwnerProjectName == nil {
		return nil, errors.New("invalid value for required argument 'OwnerProjectName'")
	}
	if args.Params == nil {
		return nil, errors.New("invalid value for required argument 'Params'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Datasource
	err := ctx.RegisterResource("tencentcloud:Wedata/datasource:Datasource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasource gets an existing Datasource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasourceState, opts ...pulumi.ResourceOption) (*Datasource, error) {
	var resource Datasource
	err := ctx.ReadResource("tencentcloud:Wedata/datasource:Datasource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datasource resources.
type datasourceState struct {
	// BizParams.
	BizParams *string `pulumi:"bizParams"`
	// DataSource Category.
	Category *string `pulumi:"category"`
	// ClusterId.
	ClusterId *string `pulumi:"clusterId"`
	// Collect.
	Collect *string `pulumi:"collect"`
	// COSBucket.
	CosBucket *string `pulumi:"cosBucket"`
	// Cos region.
	CosRegion *string `pulumi:"cosRegion"`
	// Dbname.
	DatabaseName *string `pulumi:"databaseName"`
	// Description.
	Description *string `pulumi:"description"`
	// Display.
	Display *string `pulumi:"display"`
	// Instance.
	Instance *string `pulumi:"instance"`
	// DataSource Name.
	Name *string `pulumi:"name"`
	// Owner projectId.
	OwnerProjectId *string `pulumi:"ownerProjectId"`
	// Owner Project Ident.
	OwnerProjectIdent *string `pulumi:"ownerProjectIdent"`
	// Owner project name.
	OwnerProjectName *string `pulumi:"ownerProjectName"`
	// Params.
	Params *string `pulumi:"params"`
	// Params Out.
	ParamsOut *string `pulumi:"paramsOut"`
	// Status.
	Status *int `pulumi:"status"`
	// DataSource Type.
	Type *string `pulumi:"type"`
}

type DatasourceState struct {
	// BizParams.
	BizParams pulumi.StringPtrInput
	// DataSource Category.
	Category pulumi.StringPtrInput
	// ClusterId.
	ClusterId pulumi.StringPtrInput
	// Collect.
	Collect pulumi.StringPtrInput
	// COSBucket.
	CosBucket pulumi.StringPtrInput
	// Cos region.
	CosRegion pulumi.StringPtrInput
	// Dbname.
	DatabaseName pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Display.
	Display pulumi.StringPtrInput
	// Instance.
	Instance pulumi.StringPtrInput
	// DataSource Name.
	Name pulumi.StringPtrInput
	// Owner projectId.
	OwnerProjectId pulumi.StringPtrInput
	// Owner Project Ident.
	OwnerProjectIdent pulumi.StringPtrInput
	// Owner project name.
	OwnerProjectName pulumi.StringPtrInput
	// Params.
	Params pulumi.StringPtrInput
	// Params Out.
	ParamsOut pulumi.StringPtrInput
	// Status.
	Status pulumi.IntPtrInput
	// DataSource Type.
	Type pulumi.StringPtrInput
}

func (DatasourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasourceState)(nil)).Elem()
}

type datasourceArgs struct {
	// BizParams.
	BizParams *string `pulumi:"bizParams"`
	// DataSource Category.
	Category string `pulumi:"category"`
	// ClusterId.
	ClusterId *string `pulumi:"clusterId"`
	// Collect.
	Collect *string `pulumi:"collect"`
	// COSBucket.
	CosBucket *string `pulumi:"cosBucket"`
	// Cos region.
	CosRegion *string `pulumi:"cosRegion"`
	// Dbname.
	DatabaseName *string `pulumi:"databaseName"`
	// Description.
	Description *string `pulumi:"description"`
	// Display.
	Display *string `pulumi:"display"`
	// Instance.
	Instance *string `pulumi:"instance"`
	// DataSource Name.
	Name *string `pulumi:"name"`
	// Owner projectId.
	OwnerProjectId string `pulumi:"ownerProjectId"`
	// Owner Project Ident.
	OwnerProjectIdent string `pulumi:"ownerProjectIdent"`
	// Owner project name.
	OwnerProjectName string `pulumi:"ownerProjectName"`
	// Params.
	Params string `pulumi:"params"`
	// Status.
	Status *int `pulumi:"status"`
	// DataSource Type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Datasource resource.
type DatasourceArgs struct {
	// BizParams.
	BizParams pulumi.StringPtrInput
	// DataSource Category.
	Category pulumi.StringInput
	// ClusterId.
	ClusterId pulumi.StringPtrInput
	// Collect.
	Collect pulumi.StringPtrInput
	// COSBucket.
	CosBucket pulumi.StringPtrInput
	// Cos region.
	CosRegion pulumi.StringPtrInput
	// Dbname.
	DatabaseName pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Display.
	Display pulumi.StringPtrInput
	// Instance.
	Instance pulumi.StringPtrInput
	// DataSource Name.
	Name pulumi.StringPtrInput
	// Owner projectId.
	OwnerProjectId pulumi.StringInput
	// Owner Project Ident.
	OwnerProjectIdent pulumi.StringInput
	// Owner project name.
	OwnerProjectName pulumi.StringInput
	// Params.
	Params pulumi.StringInput
	// Status.
	Status pulumi.IntPtrInput
	// DataSource Type.
	Type pulumi.StringInput
}

func (DatasourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasourceArgs)(nil)).Elem()
}

type DatasourceInput interface {
	pulumi.Input

	ToDatasourceOutput() DatasourceOutput
	ToDatasourceOutputWithContext(ctx context.Context) DatasourceOutput
}

func (*Datasource) ElementType() reflect.Type {
	return reflect.TypeOf((**Datasource)(nil)).Elem()
}

func (i *Datasource) ToDatasourceOutput() DatasourceOutput {
	return i.ToDatasourceOutputWithContext(context.Background())
}

func (i *Datasource) ToDatasourceOutputWithContext(ctx context.Context) DatasourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasourceOutput)
}

// DatasourceArrayInput is an input type that accepts DatasourceArray and DatasourceArrayOutput values.
// You can construct a concrete instance of `DatasourceArrayInput` via:
//
//	DatasourceArray{ DatasourceArgs{...} }
type DatasourceArrayInput interface {
	pulumi.Input

	ToDatasourceArrayOutput() DatasourceArrayOutput
	ToDatasourceArrayOutputWithContext(context.Context) DatasourceArrayOutput
}

type DatasourceArray []DatasourceInput

func (DatasourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datasource)(nil)).Elem()
}

func (i DatasourceArray) ToDatasourceArrayOutput() DatasourceArrayOutput {
	return i.ToDatasourceArrayOutputWithContext(context.Background())
}

func (i DatasourceArray) ToDatasourceArrayOutputWithContext(ctx context.Context) DatasourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasourceArrayOutput)
}

// DatasourceMapInput is an input type that accepts DatasourceMap and DatasourceMapOutput values.
// You can construct a concrete instance of `DatasourceMapInput` via:
//
//	DatasourceMap{ "key": DatasourceArgs{...} }
type DatasourceMapInput interface {
	pulumi.Input

	ToDatasourceMapOutput() DatasourceMapOutput
	ToDatasourceMapOutputWithContext(context.Context) DatasourceMapOutput
}

type DatasourceMap map[string]DatasourceInput

func (DatasourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datasource)(nil)).Elem()
}

func (i DatasourceMap) ToDatasourceMapOutput() DatasourceMapOutput {
	return i.ToDatasourceMapOutputWithContext(context.Background())
}

func (i DatasourceMap) ToDatasourceMapOutputWithContext(ctx context.Context) DatasourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasourceMapOutput)
}

type DatasourceOutput struct{ *pulumi.OutputState }

func (DatasourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datasource)(nil)).Elem()
}

func (o DatasourceOutput) ToDatasourceOutput() DatasourceOutput {
	return o
}

func (o DatasourceOutput) ToDatasourceOutputWithContext(ctx context.Context) DatasourceOutput {
	return o
}

// BizParams.
func (o DatasourceOutput) BizParams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringPtrOutput { return v.BizParams }).(pulumi.StringPtrOutput)
}

// DataSource Category.
func (o DatasourceOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// ClusterId.
func (o DatasourceOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Collect.
func (o DatasourceOutput) Collect() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.Collect }).(pulumi.StringOutput)
}

// COSBucket.
func (o DatasourceOutput) CosBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringPtrOutput { return v.CosBucket }).(pulumi.StringPtrOutput)
}

// Cos region.
func (o DatasourceOutput) CosRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringPtrOutput { return v.CosRegion }).(pulumi.StringPtrOutput)
}

// Dbname.
func (o DatasourceOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Description.
func (o DatasourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Display.
func (o DatasourceOutput) Display() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringPtrOutput { return v.Display }).(pulumi.StringPtrOutput)
}

// Instance.
func (o DatasourceOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringPtrOutput { return v.Instance }).(pulumi.StringPtrOutput)
}

// DataSource Name.
func (o DatasourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Owner projectId.
func (o DatasourceOutput) OwnerProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.OwnerProjectId }).(pulumi.StringOutput)
}

// Owner Project Ident.
func (o DatasourceOutput) OwnerProjectIdent() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.OwnerProjectIdent }).(pulumi.StringOutput)
}

// Owner project name.
func (o DatasourceOutput) OwnerProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.OwnerProjectName }).(pulumi.StringOutput)
}

// Params.
func (o DatasourceOutput) Params() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.Params }).(pulumi.StringOutput)
}

// Params Out.
func (o DatasourceOutput) ParamsOut() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.ParamsOut }).(pulumi.StringOutput)
}

// Status.
func (o DatasourceOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Datasource) pulumi.IntPtrOutput { return v.Status }).(pulumi.IntPtrOutput)
}

// DataSource Type.
func (o DatasourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Datasource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DatasourceArrayOutput struct{ *pulumi.OutputState }

func (DatasourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datasource)(nil)).Elem()
}

func (o DatasourceArrayOutput) ToDatasourceArrayOutput() DatasourceArrayOutput {
	return o
}

func (o DatasourceArrayOutput) ToDatasourceArrayOutputWithContext(ctx context.Context) DatasourceArrayOutput {
	return o
}

func (o DatasourceArrayOutput) Index(i pulumi.IntInput) DatasourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Datasource {
		return vs[0].([]*Datasource)[vs[1].(int)]
	}).(DatasourceOutput)
}

type DatasourceMapOutput struct{ *pulumi.OutputState }

func (DatasourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datasource)(nil)).Elem()
}

func (o DatasourceMapOutput) ToDatasourceMapOutput() DatasourceMapOutput {
	return o
}

func (o DatasourceMapOutput) ToDatasourceMapOutputWithContext(ctx context.Context) DatasourceMapOutput {
	return o
}

func (o DatasourceMapOutput) MapIndex(k pulumi.StringInput) DatasourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Datasource {
		return vs[0].(map[string]*Datasource)[vs[1].(string)]
	}).(DatasourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasourceInput)(nil)).Elem(), &Datasource{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasourceArrayInput)(nil)).Elem(), DatasourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasourceMapInput)(nil)).Elem(), DatasourceMap{})
	pulumi.RegisterOutputType(DatasourceOutput{})
	pulumi.RegisterOutputType(DatasourceArrayOutput{})
	pulumi.RegisterOutputType(DatasourceMapOutput{})
}
