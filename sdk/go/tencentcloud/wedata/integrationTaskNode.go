// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wedata

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a wedata integrationTaskNode
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Wedata"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Wedata"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Wedata.NewIntegrationTaskNode(ctx, "example", &Wedata.IntegrationTaskNodeArgs{
//				DataSourceType: pulumi.String("MYSQL"),
//				NodeInfo: &wedata.IntegrationTaskNodeNodeInfoArgs{
//					Configs: wedata.IntegrationTaskNodeNodeInfoConfigArray{
//						&wedata.IntegrationTaskNodeNodeInfoConfigArgs{
//							Name:  pulumi.String("Type"),
//							Value: pulumi.String("MYSQL"),
//						},
//						&wedata.IntegrationTaskNodeNodeInfoConfigArgs{
//							Name:  pulumi.String("splitPk"),
//							Value: pulumi.String("id"),
//						},
//						&wedata.IntegrationTaskNodeNodeInfoConfigArgs{
//							Name:  pulumi.String("PrimaryKey"),
//							Value: pulumi.String("id"),
//						},
//						&wedata.IntegrationTaskNodeNodeInfoConfigArgs{
//							Name:  pulumi.String("isNew"),
//							Value: pulumi.String("true"),
//						},
//						&wedata.IntegrationTaskNodeNodeInfoConfigArgs{
//							Name:  pulumi.String("PrimaryKey_INPUT_SYMBOL"),
//							Value: pulumi.String("input"),
//						},
//						&wedata.IntegrationTaskNodeNodeInfoConfigArgs{
//							Name:  pulumi.String("splitPk_INPUT_SYMBOL"),
//							Value: pulumi.String("input"),
//						},
//						&wedata.IntegrationTaskNodeNodeInfoConfigArgs{
//							Name:  pulumi.String("Database"),
//							Value: pulumi.String("demo_mysql"),
//						},
//						&wedata.IntegrationTaskNodeNodeInfoConfigArgs{
//							Name:  pulumi.String("TableNames"),
//							Value: pulumi.String("users"),
//						},
//						&wedata.IntegrationTaskNodeNodeInfoConfigArgs{
//							Name:  pulumi.String("SiblingNodes"),
//							Value: pulumi.String("[]"),
//						},
//					},
//					DatasourceId: pulumi.String("5085"),
//					Schemas: wedata.IntegrationTaskNodeNodeInfoSchemaArray{
//						&wedata.IntegrationTaskNodeNodeInfoSchemaArgs{
//							Alias: pulumi.String("id"),
//							Id:    pulumi.String("471331072"),
//							Name:  pulumi.String("id"),
//							Type:  pulumi.String("INT"),
//						},
//						&wedata.IntegrationTaskNodeNodeInfoSchemaArgs{
//							Alias: pulumi.String("username"),
//							Id:    pulumi.String("422052352"),
//							Name:  pulumi.String("username"),
//							Type:  pulumi.String("VARCHAR(50)"),
//						},
//					},
//				},
//				NodeType:  pulumi.String("INPUT"),
//				ProjectId: pulumi.String("1612982498218618880"),
//				TaskId:    pulumi.String("20231022181114990"),
//				TaskMode:  pulumi.Int(2),
//				TaskType:  pulumi.Int(202),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IntegrationTaskNode struct {
	pulumi.CustomResourceState

	// Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
	DataSourceType pulumi.StringOutput `pulumi:"dataSourceType"`
	// Node Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Node ID.
	NodeId pulumi.StringOutput `pulumi:"nodeId"`
	// Node information.
	NodeInfo IntegrationTaskNodeNodeInfoOutput `pulumi:"nodeInfo"`
	// Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// Project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The task id to which the node belongs.
	TaskId pulumi.StringOutput `pulumi:"taskId"`
	// Task display mode, 0: canvas mode, 1: form mode.
	TaskMode pulumi.IntOutput `pulumi:"taskMode"`
	// Task type, 201: real-time task, 202: offline task.
	TaskType pulumi.IntOutput `pulumi:"taskType"`
}

// NewIntegrationTaskNode registers a new resource with the given unique name, arguments, and options.
func NewIntegrationTaskNode(ctx *pulumi.Context,
	name string, args *IntegrationTaskNodeArgs, opts ...pulumi.ResourceOption) (*IntegrationTaskNode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSourceType == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceType'")
	}
	if args.NodeInfo == nil {
		return nil, errors.New("invalid value for required argument 'NodeInfo'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TaskId == nil {
		return nil, errors.New("invalid value for required argument 'TaskId'")
	}
	if args.TaskMode == nil {
		return nil, errors.New("invalid value for required argument 'TaskMode'")
	}
	if args.TaskType == nil {
		return nil, errors.New("invalid value for required argument 'TaskType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IntegrationTaskNode
	err := ctx.RegisterResource("tencentcloud:Wedata/integrationTaskNode:IntegrationTaskNode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationTaskNode gets an existing IntegrationTaskNode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationTaskNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationTaskNodeState, opts ...pulumi.ResourceOption) (*IntegrationTaskNode, error) {
	var resource IntegrationTaskNode
	err := ctx.ReadResource("tencentcloud:Wedata/integrationTaskNode:IntegrationTaskNode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationTaskNode resources.
type integrationTaskNodeState struct {
	// Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
	DataSourceType *string `pulumi:"dataSourceType"`
	// Node Name.
	Name *string `pulumi:"name"`
	// Node ID.
	NodeId *string `pulumi:"nodeId"`
	// Node information.
	NodeInfo *IntegrationTaskNodeNodeInfo `pulumi:"nodeInfo"`
	// Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
	NodeType *string `pulumi:"nodeType"`
	// Project ID.
	ProjectId *string `pulumi:"projectId"`
	// The task id to which the node belongs.
	TaskId *string `pulumi:"taskId"`
	// Task display mode, 0: canvas mode, 1: form mode.
	TaskMode *int `pulumi:"taskMode"`
	// Task type, 201: real-time task, 202: offline task.
	TaskType *int `pulumi:"taskType"`
}

type IntegrationTaskNodeState struct {
	// Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
	DataSourceType pulumi.StringPtrInput
	// Node Name.
	Name pulumi.StringPtrInput
	// Node ID.
	NodeId pulumi.StringPtrInput
	// Node information.
	NodeInfo IntegrationTaskNodeNodeInfoPtrInput
	// Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
	NodeType pulumi.StringPtrInput
	// Project ID.
	ProjectId pulumi.StringPtrInput
	// The task id to which the node belongs.
	TaskId pulumi.StringPtrInput
	// Task display mode, 0: canvas mode, 1: form mode.
	TaskMode pulumi.IntPtrInput
	// Task type, 201: real-time task, 202: offline task.
	TaskType pulumi.IntPtrInput
}

func (IntegrationTaskNodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationTaskNodeState)(nil)).Elem()
}

type integrationTaskNodeArgs struct {
	// Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
	DataSourceType string `pulumi:"dataSourceType"`
	// Node Name.
	Name *string `pulumi:"name"`
	// Node information.
	NodeInfo IntegrationTaskNodeNodeInfo `pulumi:"nodeInfo"`
	// Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
	NodeType string `pulumi:"nodeType"`
	// Project ID.
	ProjectId string `pulumi:"projectId"`
	// The task id to which the node belongs.
	TaskId string `pulumi:"taskId"`
	// Task display mode, 0: canvas mode, 1: form mode.
	TaskMode int `pulumi:"taskMode"`
	// Task type, 201: real-time task, 202: offline task.
	TaskType int `pulumi:"taskType"`
}

// The set of arguments for constructing a IntegrationTaskNode resource.
type IntegrationTaskNodeArgs struct {
	// Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
	DataSourceType pulumi.StringInput
	// Node Name.
	Name pulumi.StringPtrInput
	// Node information.
	NodeInfo IntegrationTaskNodeNodeInfoInput
	// Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
	NodeType pulumi.StringInput
	// Project ID.
	ProjectId pulumi.StringInput
	// The task id to which the node belongs.
	TaskId pulumi.StringInput
	// Task display mode, 0: canvas mode, 1: form mode.
	TaskMode pulumi.IntInput
	// Task type, 201: real-time task, 202: offline task.
	TaskType pulumi.IntInput
}

func (IntegrationTaskNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationTaskNodeArgs)(nil)).Elem()
}

type IntegrationTaskNodeInput interface {
	pulumi.Input

	ToIntegrationTaskNodeOutput() IntegrationTaskNodeOutput
	ToIntegrationTaskNodeOutputWithContext(ctx context.Context) IntegrationTaskNodeOutput
}

func (*IntegrationTaskNode) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTaskNode)(nil)).Elem()
}

func (i *IntegrationTaskNode) ToIntegrationTaskNodeOutput() IntegrationTaskNodeOutput {
	return i.ToIntegrationTaskNodeOutputWithContext(context.Background())
}

func (i *IntegrationTaskNode) ToIntegrationTaskNodeOutputWithContext(ctx context.Context) IntegrationTaskNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTaskNodeOutput)
}

// IntegrationTaskNodeArrayInput is an input type that accepts IntegrationTaskNodeArray and IntegrationTaskNodeArrayOutput values.
// You can construct a concrete instance of `IntegrationTaskNodeArrayInput` via:
//
//	IntegrationTaskNodeArray{ IntegrationTaskNodeArgs{...} }
type IntegrationTaskNodeArrayInput interface {
	pulumi.Input

	ToIntegrationTaskNodeArrayOutput() IntegrationTaskNodeArrayOutput
	ToIntegrationTaskNodeArrayOutputWithContext(context.Context) IntegrationTaskNodeArrayOutput
}

type IntegrationTaskNodeArray []IntegrationTaskNodeInput

func (IntegrationTaskNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationTaskNode)(nil)).Elem()
}

func (i IntegrationTaskNodeArray) ToIntegrationTaskNodeArrayOutput() IntegrationTaskNodeArrayOutput {
	return i.ToIntegrationTaskNodeArrayOutputWithContext(context.Background())
}

func (i IntegrationTaskNodeArray) ToIntegrationTaskNodeArrayOutputWithContext(ctx context.Context) IntegrationTaskNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTaskNodeArrayOutput)
}

// IntegrationTaskNodeMapInput is an input type that accepts IntegrationTaskNodeMap and IntegrationTaskNodeMapOutput values.
// You can construct a concrete instance of `IntegrationTaskNodeMapInput` via:
//
//	IntegrationTaskNodeMap{ "key": IntegrationTaskNodeArgs{...} }
type IntegrationTaskNodeMapInput interface {
	pulumi.Input

	ToIntegrationTaskNodeMapOutput() IntegrationTaskNodeMapOutput
	ToIntegrationTaskNodeMapOutputWithContext(context.Context) IntegrationTaskNodeMapOutput
}

type IntegrationTaskNodeMap map[string]IntegrationTaskNodeInput

func (IntegrationTaskNodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationTaskNode)(nil)).Elem()
}

func (i IntegrationTaskNodeMap) ToIntegrationTaskNodeMapOutput() IntegrationTaskNodeMapOutput {
	return i.ToIntegrationTaskNodeMapOutputWithContext(context.Background())
}

func (i IntegrationTaskNodeMap) ToIntegrationTaskNodeMapOutputWithContext(ctx context.Context) IntegrationTaskNodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationTaskNodeMapOutput)
}

type IntegrationTaskNodeOutput struct{ *pulumi.OutputState }

func (IntegrationTaskNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationTaskNode)(nil)).Elem()
}

func (o IntegrationTaskNodeOutput) ToIntegrationTaskNodeOutput() IntegrationTaskNodeOutput {
	return o
}

func (o IntegrationTaskNodeOutput) ToIntegrationTaskNodeOutputWithContext(ctx context.Context) IntegrationTaskNodeOutput {
	return o
}

// Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
func (o IntegrationTaskNodeOutput) DataSourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTaskNode) pulumi.StringOutput { return v.DataSourceType }).(pulumi.StringOutput)
}

// Node Name.
func (o IntegrationTaskNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTaskNode) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Node ID.
func (o IntegrationTaskNodeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTaskNode) pulumi.StringOutput { return v.NodeId }).(pulumi.StringOutput)
}

// Node information.
func (o IntegrationTaskNodeOutput) NodeInfo() IntegrationTaskNodeNodeInfoOutput {
	return o.ApplyT(func(v *IntegrationTaskNode) IntegrationTaskNodeNodeInfoOutput { return v.NodeInfo }).(IntegrationTaskNodeNodeInfoOutput)
}

// Node type: INPUT, OUTPUT, JOIN, FILTER, TRANSFORM.
func (o IntegrationTaskNodeOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTaskNode) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// Project ID.
func (o IntegrationTaskNodeOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTaskNode) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The task id to which the node belongs.
func (o IntegrationTaskNodeOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationTaskNode) pulumi.StringOutput { return v.TaskId }).(pulumi.StringOutput)
}

// Task display mode, 0: canvas mode, 1: form mode.
func (o IntegrationTaskNodeOutput) TaskMode() pulumi.IntOutput {
	return o.ApplyT(func(v *IntegrationTaskNode) pulumi.IntOutput { return v.TaskMode }).(pulumi.IntOutput)
}

// Task type, 201: real-time task, 202: offline task.
func (o IntegrationTaskNodeOutput) TaskType() pulumi.IntOutput {
	return o.ApplyT(func(v *IntegrationTaskNode) pulumi.IntOutput { return v.TaskType }).(pulumi.IntOutput)
}

type IntegrationTaskNodeArrayOutput struct{ *pulumi.OutputState }

func (IntegrationTaskNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationTaskNode)(nil)).Elem()
}

func (o IntegrationTaskNodeArrayOutput) ToIntegrationTaskNodeArrayOutput() IntegrationTaskNodeArrayOutput {
	return o
}

func (o IntegrationTaskNodeArrayOutput) ToIntegrationTaskNodeArrayOutputWithContext(ctx context.Context) IntegrationTaskNodeArrayOutput {
	return o
}

func (o IntegrationTaskNodeArrayOutput) Index(i pulumi.IntInput) IntegrationTaskNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationTaskNode {
		return vs[0].([]*IntegrationTaskNode)[vs[1].(int)]
	}).(IntegrationTaskNodeOutput)
}

type IntegrationTaskNodeMapOutput struct{ *pulumi.OutputState }

func (IntegrationTaskNodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationTaskNode)(nil)).Elem()
}

func (o IntegrationTaskNodeMapOutput) ToIntegrationTaskNodeMapOutput() IntegrationTaskNodeMapOutput {
	return o
}

func (o IntegrationTaskNodeMapOutput) ToIntegrationTaskNodeMapOutputWithContext(ctx context.Context) IntegrationTaskNodeMapOutput {
	return o
}

func (o IntegrationTaskNodeMapOutput) MapIndex(k pulumi.StringInput) IntegrationTaskNodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationTaskNode {
		return vs[0].(map[string]*IntegrationTaskNode)[vs[1].(string)]
	}).(IntegrationTaskNodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTaskNodeInput)(nil)).Elem(), &IntegrationTaskNode{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTaskNodeArrayInput)(nil)).Elem(), IntegrationTaskNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationTaskNodeMapInput)(nil)).Elem(), IntegrationTaskNodeMap{})
	pulumi.RegisterOutputType(IntegrationTaskNodeOutput{})
	pulumi.RegisterOutputType(IntegrationTaskNodeArrayOutput{})
	pulumi.RegisterOutputType(IntegrationTaskNodeMapOutput{})
}
