// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wedata

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a wedata dqRule
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Wedata"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Wedata"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Wedata.NewDqRule(ctx, "example", &Wedata.DqRuleArgs{
//				AlarmLevel: pulumi.Int(1),
//				CompareRule: &wedata.DqRuleCompareRuleArgs{
//					Items: wedata.DqRuleCompareRuleItemArray{
//						&wedata.DqRuleCompareRuleItemArgs{
//							CompareType: pulumi.Int(1),
//							Operator:    pulumi.String("=="),
//							ValueList: []map[string]interface{}{
//								map[string]interface{}{
//									"value":     "100",
//									"valueType": 3,
//								},
//							},
//						},
//					},
//				},
//				ConditionType:            pulumi.Int(1),
//				Description:              pulumi.String("description."),
//				ProjectId:                pulumi.String("1948767646355341312"),
//				RuleGroupId:              pulumi.Int(312),
//				RuleTemplateId:           pulumi.Int(1),
//				SourceObjectDataTypeName: pulumi.String("table"),
//				SourceObjectValue:        pulumi.String("è¡¨"),
//				TableId:                  pulumi.String("N85hbsh5QQ2VLHL2iOUVeQ"),
//				Type:                     pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// wedata dq_rule can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Wedata/dqRule:DqRule example 1948767646355341312#894
//
// ```
type DqRule struct {
	pulumi.CustomResourceState

	// Alarm trigger levels 1. Low, 2. Medium, 3. High.
	AlarmLevel pulumi.IntOutput `pulumi:"alarmLevel"`
	// Alarm trigger condition.
	CompareRule DqRuleCompareRuleOutput `pulumi:"compareRule"`
	// Condition scans WHERE condition expressions.
	ConditionExpression pulumi.StringPtrOutput `pulumi:"conditionExpression"`
	// Detection scope 1. Full Table 2. Conditional scan.
	ConditionType pulumi.IntOutput `pulumi:"conditionType"`
	// Custom sql.
	CustomSql pulumi.StringPtrOutput `pulumi:"customSql"`
	// Rule description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Custom template sql expression field replacement parameters.
	FieldConfig DqRuleFieldConfigPtrOutput `pulumi:"fieldConfig"`
	// Rule name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Project id.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
	QualityDim pulumi.IntOutput `pulumi:"qualityDim"`
	// The source field and the target field are associated with a conditional on expression.
	RelConditionExpr pulumi.StringPtrOutput `pulumi:"relConditionExpr"`
	// Rule group id.
	RuleGroupId pulumi.IntPtrOutput `pulumi:"ruleGroupId"`
	// Rule ID.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// Rule template id.
	RuleTemplateId pulumi.IntOutput `pulumi:"ruleTemplateId"`
	// List of execution engines supported by this rule.
	SourceEngineTypes pulumi.IntArrayOutput `pulumi:"sourceEngineTypes"`
	// Source field type. int, string.
	SourceObjectDataTypeName pulumi.StringOutput `pulumi:"sourceObjectDataTypeName"`
	// Source field name.
	SourceObjectValue pulumi.StringOutput `pulumi:"sourceObjectValue"`
	// Table id.
	TableId pulumi.StringPtrOutput `pulumi:"tableId"`
	// Target filter condition expression.
	TargetConditionExpr pulumi.StringPtrOutput `pulumi:"targetConditionExpr"`
	// Target database id.
	TargetDatabaseId pulumi.StringPtrOutput `pulumi:"targetDatabaseId"`
	// Target field name  CITY.
	TargetObjectValue pulumi.StringPtrOutput `pulumi:"targetObjectValue"`
	// Target table id.
	TargetTableId pulumi.StringPtrOutput `pulumi:"targetTableId"`
	// Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
	Type pulumi.IntOutput `pulumi:"type"`
}

// NewDqRule registers a new resource with the given unique name, arguments, and options.
func NewDqRule(ctx *pulumi.Context,
	name string, args *DqRuleArgs, opts ...pulumi.ResourceOption) (*DqRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlarmLevel == nil {
		return nil, errors.New("invalid value for required argument 'AlarmLevel'")
	}
	if args.CompareRule == nil {
		return nil, errors.New("invalid value for required argument 'CompareRule'")
	}
	if args.ConditionType == nil {
		return nil, errors.New("invalid value for required argument 'ConditionType'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.RuleTemplateId == nil {
		return nil, errors.New("invalid value for required argument 'RuleTemplateId'")
	}
	if args.SourceObjectDataTypeName == nil {
		return nil, errors.New("invalid value for required argument 'SourceObjectDataTypeName'")
	}
	if args.SourceObjectValue == nil {
		return nil, errors.New("invalid value for required argument 'SourceObjectValue'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DqRule
	err := ctx.RegisterResource("tencentcloud:Wedata/dqRule:DqRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDqRule gets an existing DqRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDqRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DqRuleState, opts ...pulumi.ResourceOption) (*DqRule, error) {
	var resource DqRule
	err := ctx.ReadResource("tencentcloud:Wedata/dqRule:DqRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DqRule resources.
type dqRuleState struct {
	// Alarm trigger levels 1. Low, 2. Medium, 3. High.
	AlarmLevel *int `pulumi:"alarmLevel"`
	// Alarm trigger condition.
	CompareRule *DqRuleCompareRule `pulumi:"compareRule"`
	// Condition scans WHERE condition expressions.
	ConditionExpression *string `pulumi:"conditionExpression"`
	// Detection scope 1. Full Table 2. Conditional scan.
	ConditionType *int `pulumi:"conditionType"`
	// Custom sql.
	CustomSql *string `pulumi:"customSql"`
	// Rule description.
	Description *string `pulumi:"description"`
	// Custom template sql expression field replacement parameters.
	FieldConfig *DqRuleFieldConfig `pulumi:"fieldConfig"`
	// Rule name.
	Name *string `pulumi:"name"`
	// Project id.
	ProjectId *string `pulumi:"projectId"`
	// Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
	QualityDim *int `pulumi:"qualityDim"`
	// The source field and the target field are associated with a conditional on expression.
	RelConditionExpr *string `pulumi:"relConditionExpr"`
	// Rule group id.
	RuleGroupId *int `pulumi:"ruleGroupId"`
	// Rule ID.
	RuleId *string `pulumi:"ruleId"`
	// Rule template id.
	RuleTemplateId *int `pulumi:"ruleTemplateId"`
	// List of execution engines supported by this rule.
	SourceEngineTypes []int `pulumi:"sourceEngineTypes"`
	// Source field type. int, string.
	SourceObjectDataTypeName *string `pulumi:"sourceObjectDataTypeName"`
	// Source field name.
	SourceObjectValue *string `pulumi:"sourceObjectValue"`
	// Table id.
	TableId *string `pulumi:"tableId"`
	// Target filter condition expression.
	TargetConditionExpr *string `pulumi:"targetConditionExpr"`
	// Target database id.
	TargetDatabaseId *string `pulumi:"targetDatabaseId"`
	// Target field name  CITY.
	TargetObjectValue *string `pulumi:"targetObjectValue"`
	// Target table id.
	TargetTableId *string `pulumi:"targetTableId"`
	// Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
	Type *int `pulumi:"type"`
}

type DqRuleState struct {
	// Alarm trigger levels 1. Low, 2. Medium, 3. High.
	AlarmLevel pulumi.IntPtrInput
	// Alarm trigger condition.
	CompareRule DqRuleCompareRulePtrInput
	// Condition scans WHERE condition expressions.
	ConditionExpression pulumi.StringPtrInput
	// Detection scope 1. Full Table 2. Conditional scan.
	ConditionType pulumi.IntPtrInput
	// Custom sql.
	CustomSql pulumi.StringPtrInput
	// Rule description.
	Description pulumi.StringPtrInput
	// Custom template sql expression field replacement parameters.
	FieldConfig DqRuleFieldConfigPtrInput
	// Rule name.
	Name pulumi.StringPtrInput
	// Project id.
	ProjectId pulumi.StringPtrInput
	// Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
	QualityDim pulumi.IntPtrInput
	// The source field and the target field are associated with a conditional on expression.
	RelConditionExpr pulumi.StringPtrInput
	// Rule group id.
	RuleGroupId pulumi.IntPtrInput
	// Rule ID.
	RuleId pulumi.StringPtrInput
	// Rule template id.
	RuleTemplateId pulumi.IntPtrInput
	// List of execution engines supported by this rule.
	SourceEngineTypes pulumi.IntArrayInput
	// Source field type. int, string.
	SourceObjectDataTypeName pulumi.StringPtrInput
	// Source field name.
	SourceObjectValue pulumi.StringPtrInput
	// Table id.
	TableId pulumi.StringPtrInput
	// Target filter condition expression.
	TargetConditionExpr pulumi.StringPtrInput
	// Target database id.
	TargetDatabaseId pulumi.StringPtrInput
	// Target field name  CITY.
	TargetObjectValue pulumi.StringPtrInput
	// Target table id.
	TargetTableId pulumi.StringPtrInput
	// Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
	Type pulumi.IntPtrInput
}

func (DqRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*dqRuleState)(nil)).Elem()
}

type dqRuleArgs struct {
	// Alarm trigger levels 1. Low, 2. Medium, 3. High.
	AlarmLevel int `pulumi:"alarmLevel"`
	// Alarm trigger condition.
	CompareRule DqRuleCompareRule `pulumi:"compareRule"`
	// Condition scans WHERE condition expressions.
	ConditionExpression *string `pulumi:"conditionExpression"`
	// Detection scope 1. Full Table 2. Conditional scan.
	ConditionType int `pulumi:"conditionType"`
	// Custom sql.
	CustomSql *string `pulumi:"customSql"`
	// Rule description.
	Description *string `pulumi:"description"`
	// Custom template sql expression field replacement parameters.
	FieldConfig *DqRuleFieldConfig `pulumi:"fieldConfig"`
	// Rule name.
	Name *string `pulumi:"name"`
	// Project id.
	ProjectId string `pulumi:"projectId"`
	// Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
	QualityDim *int `pulumi:"qualityDim"`
	// The source field and the target field are associated with a conditional on expression.
	RelConditionExpr *string `pulumi:"relConditionExpr"`
	// Rule group id.
	RuleGroupId *int `pulumi:"ruleGroupId"`
	// Rule template id.
	RuleTemplateId int `pulumi:"ruleTemplateId"`
	// List of execution engines supported by this rule.
	SourceEngineTypes []int `pulumi:"sourceEngineTypes"`
	// Source field type. int, string.
	SourceObjectDataTypeName string `pulumi:"sourceObjectDataTypeName"`
	// Source field name.
	SourceObjectValue string `pulumi:"sourceObjectValue"`
	// Table id.
	TableId *string `pulumi:"tableId"`
	// Target filter condition expression.
	TargetConditionExpr *string `pulumi:"targetConditionExpr"`
	// Target database id.
	TargetDatabaseId *string `pulumi:"targetDatabaseId"`
	// Target field name  CITY.
	TargetObjectValue *string `pulumi:"targetObjectValue"`
	// Target table id.
	TargetTableId *string `pulumi:"targetTableId"`
	// Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
	Type int `pulumi:"type"`
}

// The set of arguments for constructing a DqRule resource.
type DqRuleArgs struct {
	// Alarm trigger levels 1. Low, 2. Medium, 3. High.
	AlarmLevel pulumi.IntInput
	// Alarm trigger condition.
	CompareRule DqRuleCompareRuleInput
	// Condition scans WHERE condition expressions.
	ConditionExpression pulumi.StringPtrInput
	// Detection scope 1. Full Table 2. Conditional scan.
	ConditionType pulumi.IntInput
	// Custom sql.
	CustomSql pulumi.StringPtrInput
	// Rule description.
	Description pulumi.StringPtrInput
	// Custom template sql expression field replacement parameters.
	FieldConfig DqRuleFieldConfigPtrInput
	// Rule name.
	Name pulumi.StringPtrInput
	// Project id.
	ProjectId pulumi.StringInput
	// Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
	QualityDim pulumi.IntPtrInput
	// The source field and the target field are associated with a conditional on expression.
	RelConditionExpr pulumi.StringPtrInput
	// Rule group id.
	RuleGroupId pulumi.IntPtrInput
	// Rule template id.
	RuleTemplateId pulumi.IntInput
	// List of execution engines supported by this rule.
	SourceEngineTypes pulumi.IntArrayInput
	// Source field type. int, string.
	SourceObjectDataTypeName pulumi.StringInput
	// Source field name.
	SourceObjectValue pulumi.StringInput
	// Table id.
	TableId pulumi.StringPtrInput
	// Target filter condition expression.
	TargetConditionExpr pulumi.StringPtrInput
	// Target database id.
	TargetDatabaseId pulumi.StringPtrInput
	// Target field name  CITY.
	TargetObjectValue pulumi.StringPtrInput
	// Target table id.
	TargetTableId pulumi.StringPtrInput
	// Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
	Type pulumi.IntInput
}

func (DqRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dqRuleArgs)(nil)).Elem()
}

type DqRuleInput interface {
	pulumi.Input

	ToDqRuleOutput() DqRuleOutput
	ToDqRuleOutputWithContext(ctx context.Context) DqRuleOutput
}

func (*DqRule) ElementType() reflect.Type {
	return reflect.TypeOf((**DqRule)(nil)).Elem()
}

func (i *DqRule) ToDqRuleOutput() DqRuleOutput {
	return i.ToDqRuleOutputWithContext(context.Background())
}

func (i *DqRule) ToDqRuleOutputWithContext(ctx context.Context) DqRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DqRuleOutput)
}

// DqRuleArrayInput is an input type that accepts DqRuleArray and DqRuleArrayOutput values.
// You can construct a concrete instance of `DqRuleArrayInput` via:
//
//	DqRuleArray{ DqRuleArgs{...} }
type DqRuleArrayInput interface {
	pulumi.Input

	ToDqRuleArrayOutput() DqRuleArrayOutput
	ToDqRuleArrayOutputWithContext(context.Context) DqRuleArrayOutput
}

type DqRuleArray []DqRuleInput

func (DqRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DqRule)(nil)).Elem()
}

func (i DqRuleArray) ToDqRuleArrayOutput() DqRuleArrayOutput {
	return i.ToDqRuleArrayOutputWithContext(context.Background())
}

func (i DqRuleArray) ToDqRuleArrayOutputWithContext(ctx context.Context) DqRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DqRuleArrayOutput)
}

// DqRuleMapInput is an input type that accepts DqRuleMap and DqRuleMapOutput values.
// You can construct a concrete instance of `DqRuleMapInput` via:
//
//	DqRuleMap{ "key": DqRuleArgs{...} }
type DqRuleMapInput interface {
	pulumi.Input

	ToDqRuleMapOutput() DqRuleMapOutput
	ToDqRuleMapOutputWithContext(context.Context) DqRuleMapOutput
}

type DqRuleMap map[string]DqRuleInput

func (DqRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DqRule)(nil)).Elem()
}

func (i DqRuleMap) ToDqRuleMapOutput() DqRuleMapOutput {
	return i.ToDqRuleMapOutputWithContext(context.Background())
}

func (i DqRuleMap) ToDqRuleMapOutputWithContext(ctx context.Context) DqRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DqRuleMapOutput)
}

type DqRuleOutput struct{ *pulumi.OutputState }

func (DqRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DqRule)(nil)).Elem()
}

func (o DqRuleOutput) ToDqRuleOutput() DqRuleOutput {
	return o
}

func (o DqRuleOutput) ToDqRuleOutputWithContext(ctx context.Context) DqRuleOutput {
	return o
}

// Alarm trigger levels 1. Low, 2. Medium, 3. High.
func (o DqRuleOutput) AlarmLevel() pulumi.IntOutput {
	return o.ApplyT(func(v *DqRule) pulumi.IntOutput { return v.AlarmLevel }).(pulumi.IntOutput)
}

// Alarm trigger condition.
func (o DqRuleOutput) CompareRule() DqRuleCompareRuleOutput {
	return o.ApplyT(func(v *DqRule) DqRuleCompareRuleOutput { return v.CompareRule }).(DqRuleCompareRuleOutput)
}

// Condition scans WHERE condition expressions.
func (o DqRuleOutput) ConditionExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringPtrOutput { return v.ConditionExpression }).(pulumi.StringPtrOutput)
}

// Detection scope 1. Full Table 2. Conditional scan.
func (o DqRuleOutput) ConditionType() pulumi.IntOutput {
	return o.ApplyT(func(v *DqRule) pulumi.IntOutput { return v.ConditionType }).(pulumi.IntOutput)
}

// Custom sql.
func (o DqRuleOutput) CustomSql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringPtrOutput { return v.CustomSql }).(pulumi.StringPtrOutput)
}

// Rule description.
func (o DqRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Custom template sql expression field replacement parameters.
func (o DqRuleOutput) FieldConfig() DqRuleFieldConfigPtrOutput {
	return o.ApplyT(func(v *DqRule) DqRuleFieldConfigPtrOutput { return v.FieldConfig }).(DqRuleFieldConfigPtrOutput)
}

// Rule name.
func (o DqRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Project id.
func (o DqRuleOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
func (o DqRuleOutput) QualityDim() pulumi.IntOutput {
	return o.ApplyT(func(v *DqRule) pulumi.IntOutput { return v.QualityDim }).(pulumi.IntOutput)
}

// The source field and the target field are associated with a conditional on expression.
func (o DqRuleOutput) RelConditionExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringPtrOutput { return v.RelConditionExpr }).(pulumi.StringPtrOutput)
}

// Rule group id.
func (o DqRuleOutput) RuleGroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DqRule) pulumi.IntPtrOutput { return v.RuleGroupId }).(pulumi.IntPtrOutput)
}

// Rule ID.
func (o DqRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

// Rule template id.
func (o DqRuleOutput) RuleTemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *DqRule) pulumi.IntOutput { return v.RuleTemplateId }).(pulumi.IntOutput)
}

// List of execution engines supported by this rule.
func (o DqRuleOutput) SourceEngineTypes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DqRule) pulumi.IntArrayOutput { return v.SourceEngineTypes }).(pulumi.IntArrayOutput)
}

// Source field type. int, string.
func (o DqRuleOutput) SourceObjectDataTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringOutput { return v.SourceObjectDataTypeName }).(pulumi.StringOutput)
}

// Source field name.
func (o DqRuleOutput) SourceObjectValue() pulumi.StringOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringOutput { return v.SourceObjectValue }).(pulumi.StringOutput)
}

// Table id.
func (o DqRuleOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringPtrOutput { return v.TableId }).(pulumi.StringPtrOutput)
}

// Target filter condition expression.
func (o DqRuleOutput) TargetConditionExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringPtrOutput { return v.TargetConditionExpr }).(pulumi.StringPtrOutput)
}

// Target database id.
func (o DqRuleOutput) TargetDatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringPtrOutput { return v.TargetDatabaseId }).(pulumi.StringPtrOutput)
}

// Target field name  CITY.
func (o DqRuleOutput) TargetObjectValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringPtrOutput { return v.TargetObjectValue }).(pulumi.StringPtrOutput)
}

// Target table id.
func (o DqRuleOutput) TargetTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DqRule) pulumi.StringPtrOutput { return v.TargetTableId }).(pulumi.StringPtrOutput)
}

// Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
func (o DqRuleOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v *DqRule) pulumi.IntOutput { return v.Type }).(pulumi.IntOutput)
}

type DqRuleArrayOutput struct{ *pulumi.OutputState }

func (DqRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DqRule)(nil)).Elem()
}

func (o DqRuleArrayOutput) ToDqRuleArrayOutput() DqRuleArrayOutput {
	return o
}

func (o DqRuleArrayOutput) ToDqRuleArrayOutputWithContext(ctx context.Context) DqRuleArrayOutput {
	return o
}

func (o DqRuleArrayOutput) Index(i pulumi.IntInput) DqRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DqRule {
		return vs[0].([]*DqRule)[vs[1].(int)]
	}).(DqRuleOutput)
}

type DqRuleMapOutput struct{ *pulumi.OutputState }

func (DqRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DqRule)(nil)).Elem()
}

func (o DqRuleMapOutput) ToDqRuleMapOutput() DqRuleMapOutput {
	return o
}

func (o DqRuleMapOutput) ToDqRuleMapOutputWithContext(ctx context.Context) DqRuleMapOutput {
	return o
}

func (o DqRuleMapOutput) MapIndex(k pulumi.StringInput) DqRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DqRule {
		return vs[0].(map[string]*DqRule)[vs[1].(string)]
	}).(DqRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DqRuleInput)(nil)).Elem(), &DqRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*DqRuleArrayInput)(nil)).Elem(), DqRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DqRuleMapInput)(nil)).Elem(), DqRuleMap{})
	pulumi.RegisterOutputType(DqRuleOutput{})
	pulumi.RegisterOutputType(DqRuleArrayOutput{})
	pulumi.RegisterOutputType(DqRuleMapOutput{})
}
