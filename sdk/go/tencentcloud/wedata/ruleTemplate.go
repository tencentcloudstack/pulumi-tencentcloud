// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wedata

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a wedata ruleTemplate
//
// ## Import
//
// wedata rule_template can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Wedata/ruleTemplate:RuleTemplate rule_template rule_template_id
//
// ```
type RuleTemplate struct {
	pulumi.CustomResourceState

	// Description of Template.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether to associate other library tables.
	MultiSourceFlag pulumi.BoolPtrOutput `pulumi:"multiSourceFlag"`
	// Template name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness, `6`: Effectiveness.
	QualityDim pulumi.IntPtrOutput `pulumi:"qualityDim"`
	// The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
	SourceEngineTypes pulumi.IntArrayOutput `pulumi:"sourceEngineTypes"`
	// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
	SourceObjectType pulumi.IntPtrOutput `pulumi:"sourceObjectType"`
	// SQL Expression.
	SqlExpression pulumi.StringPtrOutput `pulumi:"sqlExpression"`
	// Template type. `1` means System template, `2` means Custom template.
	Type pulumi.IntPtrOutput `pulumi:"type"`
	// If add where.
	WhereFlag pulumi.BoolPtrOutput `pulumi:"whereFlag"`
}

// NewRuleTemplate registers a new resource with the given unique name, arguments, and options.
func NewRuleTemplate(ctx *pulumi.Context,
	name string, args *RuleTemplateArgs, opts ...pulumi.ResourceOption) (*RuleTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RuleTemplate
	err := ctx.RegisterResource("tencentcloud:Wedata/ruleTemplate:RuleTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleTemplate gets an existing RuleTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleTemplateState, opts ...pulumi.ResourceOption) (*RuleTemplate, error) {
	var resource RuleTemplate
	err := ctx.ReadResource("tencentcloud:Wedata/ruleTemplate:RuleTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleTemplate resources.
type ruleTemplateState struct {
	// Description of Template.
	Description *string `pulumi:"description"`
	// Whether to associate other library tables.
	MultiSourceFlag *bool `pulumi:"multiSourceFlag"`
	// Template name.
	Name *string `pulumi:"name"`
	// Project ID.
	ProjectId *string `pulumi:"projectId"`
	// Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness, `6`: Effectiveness.
	QualityDim *int `pulumi:"qualityDim"`
	// The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
	SourceEngineTypes []int `pulumi:"sourceEngineTypes"`
	// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
	SourceObjectType *int `pulumi:"sourceObjectType"`
	// SQL Expression.
	SqlExpression *string `pulumi:"sqlExpression"`
	// Template type. `1` means System template, `2` means Custom template.
	Type *int `pulumi:"type"`
	// If add where.
	WhereFlag *bool `pulumi:"whereFlag"`
}

type RuleTemplateState struct {
	// Description of Template.
	Description pulumi.StringPtrInput
	// Whether to associate other library tables.
	MultiSourceFlag pulumi.BoolPtrInput
	// Template name.
	Name pulumi.StringPtrInput
	// Project ID.
	ProjectId pulumi.StringPtrInput
	// Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness, `6`: Effectiveness.
	QualityDim pulumi.IntPtrInput
	// The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
	SourceEngineTypes pulumi.IntArrayInput
	// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
	SourceObjectType pulumi.IntPtrInput
	// SQL Expression.
	SqlExpression pulumi.StringPtrInput
	// Template type. `1` means System template, `2` means Custom template.
	Type pulumi.IntPtrInput
	// If add where.
	WhereFlag pulumi.BoolPtrInput
}

func (RuleTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleTemplateState)(nil)).Elem()
}

type ruleTemplateArgs struct {
	// Description of Template.
	Description *string `pulumi:"description"`
	// Whether to associate other library tables.
	MultiSourceFlag *bool `pulumi:"multiSourceFlag"`
	// Template name.
	Name *string `pulumi:"name"`
	// Project ID.
	ProjectId string `pulumi:"projectId"`
	// Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness, `6`: Effectiveness.
	QualityDim *int `pulumi:"qualityDim"`
	// The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
	SourceEngineTypes []int `pulumi:"sourceEngineTypes"`
	// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
	SourceObjectType *int `pulumi:"sourceObjectType"`
	// SQL Expression.
	SqlExpression *string `pulumi:"sqlExpression"`
	// Template type. `1` means System template, `2` means Custom template.
	Type *int `pulumi:"type"`
	// If add where.
	WhereFlag *bool `pulumi:"whereFlag"`
}

// The set of arguments for constructing a RuleTemplate resource.
type RuleTemplateArgs struct {
	// Description of Template.
	Description pulumi.StringPtrInput
	// Whether to associate other library tables.
	MultiSourceFlag pulumi.BoolPtrInput
	// Template name.
	Name pulumi.StringPtrInput
	// Project ID.
	ProjectId pulumi.StringInput
	// Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness, `6`: Effectiveness.
	QualityDim pulumi.IntPtrInput
	// The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
	SourceEngineTypes pulumi.IntArrayInput
	// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
	SourceObjectType pulumi.IntPtrInput
	// SQL Expression.
	SqlExpression pulumi.StringPtrInput
	// Template type. `1` means System template, `2` means Custom template.
	Type pulumi.IntPtrInput
	// If add where.
	WhereFlag pulumi.BoolPtrInput
}

func (RuleTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleTemplateArgs)(nil)).Elem()
}

type RuleTemplateInput interface {
	pulumi.Input

	ToRuleTemplateOutput() RuleTemplateOutput
	ToRuleTemplateOutputWithContext(ctx context.Context) RuleTemplateOutput
}

func (*RuleTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleTemplate)(nil)).Elem()
}

func (i *RuleTemplate) ToRuleTemplateOutput() RuleTemplateOutput {
	return i.ToRuleTemplateOutputWithContext(context.Background())
}

func (i *RuleTemplate) ToRuleTemplateOutputWithContext(ctx context.Context) RuleTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTemplateOutput)
}

// RuleTemplateArrayInput is an input type that accepts RuleTemplateArray and RuleTemplateArrayOutput values.
// You can construct a concrete instance of `RuleTemplateArrayInput` via:
//
//	RuleTemplateArray{ RuleTemplateArgs{...} }
type RuleTemplateArrayInput interface {
	pulumi.Input

	ToRuleTemplateArrayOutput() RuleTemplateArrayOutput
	ToRuleTemplateArrayOutputWithContext(context.Context) RuleTemplateArrayOutput
}

type RuleTemplateArray []RuleTemplateInput

func (RuleTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleTemplate)(nil)).Elem()
}

func (i RuleTemplateArray) ToRuleTemplateArrayOutput() RuleTemplateArrayOutput {
	return i.ToRuleTemplateArrayOutputWithContext(context.Background())
}

func (i RuleTemplateArray) ToRuleTemplateArrayOutputWithContext(ctx context.Context) RuleTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTemplateArrayOutput)
}

// RuleTemplateMapInput is an input type that accepts RuleTemplateMap and RuleTemplateMapOutput values.
// You can construct a concrete instance of `RuleTemplateMapInput` via:
//
//	RuleTemplateMap{ "key": RuleTemplateArgs{...} }
type RuleTemplateMapInput interface {
	pulumi.Input

	ToRuleTemplateMapOutput() RuleTemplateMapOutput
	ToRuleTemplateMapOutputWithContext(context.Context) RuleTemplateMapOutput
}

type RuleTemplateMap map[string]RuleTemplateInput

func (RuleTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleTemplate)(nil)).Elem()
}

func (i RuleTemplateMap) ToRuleTemplateMapOutput() RuleTemplateMapOutput {
	return i.ToRuleTemplateMapOutputWithContext(context.Background())
}

func (i RuleTemplateMap) ToRuleTemplateMapOutputWithContext(ctx context.Context) RuleTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTemplateMapOutput)
}

type RuleTemplateOutput struct{ *pulumi.OutputState }

func (RuleTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleTemplate)(nil)).Elem()
}

func (o RuleTemplateOutput) ToRuleTemplateOutput() RuleTemplateOutput {
	return o
}

func (o RuleTemplateOutput) ToRuleTemplateOutputWithContext(ctx context.Context) RuleTemplateOutput {
	return o
}

// Description of Template.
func (o RuleTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to associate other library tables.
func (o RuleTemplateOutput) MultiSourceFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleTemplate) pulumi.BoolPtrOutput { return v.MultiSourceFlag }).(pulumi.BoolPtrOutput)
}

// Template name.
func (o RuleTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Project ID.
func (o RuleTemplateOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleTemplate) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness, `6`: Effectiveness.
func (o RuleTemplateOutput) QualityDim() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleTemplate) pulumi.IntPtrOutput { return v.QualityDim }).(pulumi.IntPtrOutput)
}

// The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
func (o RuleTemplateOutput) SourceEngineTypes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RuleTemplate) pulumi.IntArrayOutput { return v.SourceEngineTypes }).(pulumi.IntArrayOutput)
}

// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
func (o RuleTemplateOutput) SourceObjectType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleTemplate) pulumi.IntPtrOutput { return v.SourceObjectType }).(pulumi.IntPtrOutput)
}

// SQL Expression.
func (o RuleTemplateOutput) SqlExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleTemplate) pulumi.StringPtrOutput { return v.SqlExpression }).(pulumi.StringPtrOutput)
}

// Template type. `1` means System template, `2` means Custom template.
func (o RuleTemplateOutput) Type() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuleTemplate) pulumi.IntPtrOutput { return v.Type }).(pulumi.IntPtrOutput)
}

// If add where.
func (o RuleTemplateOutput) WhereFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleTemplate) pulumi.BoolPtrOutput { return v.WhereFlag }).(pulumi.BoolPtrOutput)
}

type RuleTemplateArrayOutput struct{ *pulumi.OutputState }

func (RuleTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleTemplate)(nil)).Elem()
}

func (o RuleTemplateArrayOutput) ToRuleTemplateArrayOutput() RuleTemplateArrayOutput {
	return o
}

func (o RuleTemplateArrayOutput) ToRuleTemplateArrayOutputWithContext(ctx context.Context) RuleTemplateArrayOutput {
	return o
}

func (o RuleTemplateArrayOutput) Index(i pulumi.IntInput) RuleTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleTemplate {
		return vs[0].([]*RuleTemplate)[vs[1].(int)]
	}).(RuleTemplateOutput)
}

type RuleTemplateMapOutput struct{ *pulumi.OutputState }

func (RuleTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleTemplate)(nil)).Elem()
}

func (o RuleTemplateMapOutput) ToRuleTemplateMapOutput() RuleTemplateMapOutput {
	return o
}

func (o RuleTemplateMapOutput) ToRuleTemplateMapOutputWithContext(ctx context.Context) RuleTemplateMapOutput {
	return o
}

func (o RuleTemplateMapOutput) MapIndex(k pulumi.StringInput) RuleTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleTemplate {
		return vs[0].(map[string]*RuleTemplate)[vs[1].(string)]
	}).(RuleTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTemplateInput)(nil)).Elem(), &RuleTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTemplateArrayInput)(nil)).Elem(), RuleTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTemplateMapInput)(nil)).Elem(), RuleTemplateMap{})
	pulumi.RegisterOutputType(RuleTemplateOutput{})
	pulumi.RegisterOutputType(RuleTemplateArrayOutput{})
	pulumi.RegisterOutputType(RuleTemplateMapOutput{})
}
