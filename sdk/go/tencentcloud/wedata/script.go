// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package wedata

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a wedata script
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Wedata"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Wedata.NewScript(ctx, "example", &Wedata.ScriptArgs{
//				BucketName:        pulumi.String("wedata-demo-1257305158"),
//				FileExtensionType: pulumi.String("sql"),
//				FilePath:          pulumi.String("/datastudio/project/tf_example.sql"),
//				ProjectId:         pulumi.String("1470575647377821696"),
//				Region:            pulumi.String("ap-guangzhou"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// wedata script can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Wedata/script:Script example 1470575647377821696#/datastudio/project/tf_example.sql#4147824b-7ba2-432b-8a8b-7e747594c926
//
// ```
type Script struct {
	pulumi.CustomResourceState

	// Cos bucket name.
	BucketName pulumi.StringPtrOutput `pulumi:"bucketName"`
	// File Extension Type:jar, sql, zip, py, sh, txt, di, dg, pyspark, kjb, ktr, csv.
	FileExtensionType pulumi.StringPtrOutput `pulumi:"fileExtensionType"`
	// Cos file path:/datastudio/project/projectId/.
	FilePath pulumi.StringPtrOutput `pulumi:"filePath"`
	// Project id.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Cos region.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Resource ID.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
}

// NewScript registers a new resource with the given unique name, arguments, and options.
func NewScript(ctx *pulumi.Context,
	name string, args *ScriptArgs, opts ...pulumi.ResourceOption) (*Script, error) {
	if args == nil {
		args = &ScriptArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Script
	err := ctx.RegisterResource("tencentcloud:Wedata/script:Script", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScript gets an existing Script resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScriptState, opts ...pulumi.ResourceOption) (*Script, error) {
	var resource Script
	err := ctx.ReadResource("tencentcloud:Wedata/script:Script", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Script resources.
type scriptState struct {
	// Cos bucket name.
	BucketName *string `pulumi:"bucketName"`
	// File Extension Type:jar, sql, zip, py, sh, txt, di, dg, pyspark, kjb, ktr, csv.
	FileExtensionType *string `pulumi:"fileExtensionType"`
	// Cos file path:/datastudio/project/projectId/.
	FilePath *string `pulumi:"filePath"`
	// Project id.
	ProjectId *string `pulumi:"projectId"`
	// Cos region.
	Region *string `pulumi:"region"`
	// Resource ID.
	ResourceId *string `pulumi:"resourceId"`
}

type ScriptState struct {
	// Cos bucket name.
	BucketName pulumi.StringPtrInput
	// File Extension Type:jar, sql, zip, py, sh, txt, di, dg, pyspark, kjb, ktr, csv.
	FileExtensionType pulumi.StringPtrInput
	// Cos file path:/datastudio/project/projectId/.
	FilePath pulumi.StringPtrInput
	// Project id.
	ProjectId pulumi.StringPtrInput
	// Cos region.
	Region pulumi.StringPtrInput
	// Resource ID.
	ResourceId pulumi.StringPtrInput
}

func (ScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*scriptState)(nil)).Elem()
}

type scriptArgs struct {
	// Cos bucket name.
	BucketName *string `pulumi:"bucketName"`
	// File Extension Type:jar, sql, zip, py, sh, txt, di, dg, pyspark, kjb, ktr, csv.
	FileExtensionType *string `pulumi:"fileExtensionType"`
	// Cos file path:/datastudio/project/projectId/.
	FilePath *string `pulumi:"filePath"`
	// Project id.
	ProjectId *string `pulumi:"projectId"`
	// Cos region.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Script resource.
type ScriptArgs struct {
	// Cos bucket name.
	BucketName pulumi.StringPtrInput
	// File Extension Type:jar, sql, zip, py, sh, txt, di, dg, pyspark, kjb, ktr, csv.
	FileExtensionType pulumi.StringPtrInput
	// Cos file path:/datastudio/project/projectId/.
	FilePath pulumi.StringPtrInput
	// Project id.
	ProjectId pulumi.StringPtrInput
	// Cos region.
	Region pulumi.StringPtrInput
}

func (ScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scriptArgs)(nil)).Elem()
}

type ScriptInput interface {
	pulumi.Input

	ToScriptOutput() ScriptOutput
	ToScriptOutputWithContext(ctx context.Context) ScriptOutput
}

func (*Script) ElementType() reflect.Type {
	return reflect.TypeOf((**Script)(nil)).Elem()
}

func (i *Script) ToScriptOutput() ScriptOutput {
	return i.ToScriptOutputWithContext(context.Background())
}

func (i *Script) ToScriptOutputWithContext(ctx context.Context) ScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptOutput)
}

// ScriptArrayInput is an input type that accepts ScriptArray and ScriptArrayOutput values.
// You can construct a concrete instance of `ScriptArrayInput` via:
//
//	ScriptArray{ ScriptArgs{...} }
type ScriptArrayInput interface {
	pulumi.Input

	ToScriptArrayOutput() ScriptArrayOutput
	ToScriptArrayOutputWithContext(context.Context) ScriptArrayOutput
}

type ScriptArray []ScriptInput

func (ScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Script)(nil)).Elem()
}

func (i ScriptArray) ToScriptArrayOutput() ScriptArrayOutput {
	return i.ToScriptArrayOutputWithContext(context.Background())
}

func (i ScriptArray) ToScriptArrayOutputWithContext(ctx context.Context) ScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptArrayOutput)
}

// ScriptMapInput is an input type that accepts ScriptMap and ScriptMapOutput values.
// You can construct a concrete instance of `ScriptMapInput` via:
//
//	ScriptMap{ "key": ScriptArgs{...} }
type ScriptMapInput interface {
	pulumi.Input

	ToScriptMapOutput() ScriptMapOutput
	ToScriptMapOutputWithContext(context.Context) ScriptMapOutput
}

type ScriptMap map[string]ScriptInput

func (ScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Script)(nil)).Elem()
}

func (i ScriptMap) ToScriptMapOutput() ScriptMapOutput {
	return i.ToScriptMapOutputWithContext(context.Background())
}

func (i ScriptMap) ToScriptMapOutputWithContext(ctx context.Context) ScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptMapOutput)
}

type ScriptOutput struct{ *pulumi.OutputState }

func (ScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Script)(nil)).Elem()
}

func (o ScriptOutput) ToScriptOutput() ScriptOutput {
	return o
}

func (o ScriptOutput) ToScriptOutputWithContext(ctx context.Context) ScriptOutput {
	return o
}

// Cos bucket name.
func (o ScriptOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Script) pulumi.StringPtrOutput { return v.BucketName }).(pulumi.StringPtrOutput)
}

// File Extension Type:jar, sql, zip, py, sh, txt, di, dg, pyspark, kjb, ktr, csv.
func (o ScriptOutput) FileExtensionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Script) pulumi.StringPtrOutput { return v.FileExtensionType }).(pulumi.StringPtrOutput)
}

// Cos file path:/datastudio/project/projectId/.
func (o ScriptOutput) FilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Script) pulumi.StringPtrOutput { return v.FilePath }).(pulumi.StringPtrOutput)
}

// Project id.
func (o ScriptOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Script) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Cos region.
func (o ScriptOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Script) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Resource ID.
func (o ScriptOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Script) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

type ScriptArrayOutput struct{ *pulumi.OutputState }

func (ScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Script)(nil)).Elem()
}

func (o ScriptArrayOutput) ToScriptArrayOutput() ScriptArrayOutput {
	return o
}

func (o ScriptArrayOutput) ToScriptArrayOutputWithContext(ctx context.Context) ScriptArrayOutput {
	return o
}

func (o ScriptArrayOutput) Index(i pulumi.IntInput) ScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Script {
		return vs[0].([]*Script)[vs[1].(int)]
	}).(ScriptOutput)
}

type ScriptMapOutput struct{ *pulumi.OutputState }

func (ScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Script)(nil)).Elem()
}

func (o ScriptMapOutput) ToScriptMapOutput() ScriptMapOutput {
	return o
}

func (o ScriptMapOutput) ToScriptMapOutputWithContext(ctx context.Context) ScriptMapOutput {
	return o
}

func (o ScriptMapOutput) MapIndex(k pulumi.StringInput) ScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Script {
		return vs[0].(map[string]*Script)[vs[1].(string)]
	}).(ScriptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptInput)(nil)).Elem(), &Script{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptArrayInput)(nil)).Elem(), ScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptMapInput)(nil)).Elem(), ScriptMap{})
	pulumi.RegisterOutputType(ScriptOutput{})
	pulumi.RegisterOutputType(ScriptArrayOutput{})
	pulumi.RegisterOutputType(ScriptMapOutput{})
}
