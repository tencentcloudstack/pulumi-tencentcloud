// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create an entry of a routing table.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Route"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create route table
//			exampleTable, err := Route.NewTable(ctx, "exampleTable", &Route.TableArgs{
//				VpcId: vpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			_, err = Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.12.0/24"),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				RouteTableId:     exampleTable.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// create route table entry
//			exampleTableEntry, err := Route.NewTableEntry(ctx, "exampleTableEntry", &Route.TableEntryArgs{
//				RouteTableId:         exampleTable.ID(),
//				DestinationCidrBlock: pulumi.String("10.4.4.0/24"),
//				NextType:             pulumi.String("EIP"),
//				NextHub:              pulumi.String("0"),
//				Description:          pulumi.String("describe"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("itemId", exampleTableEntry.RouteItemId)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Route table entry can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Route/tableEntry:TableEntry example 3065857.rtb-b050fg94
// ```
type TableEntry struct {
	pulumi.CustomResourceState

	// Description of the routing table entry.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Destination address block.
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`
	// Whether the entry is disabled, default is `false`.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// ID of next-hop gateway. Note: when `nextType` is EIP, `nextHub` should be `0`.
	NextHub pulumi.StringOutput `pulumi:"nextHub"`
	// Type of next-hop. Valid values: `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `HAVIP`, `NAT`, `NORMAL_CVM`, `EIP` and `LOCAL_GATEWAY`.
	NextType pulumi.StringOutput `pulumi:"nextType"`
	// ID of route table entry.
	RouteItemId pulumi.StringOutput `pulumi:"routeItemId"`
	// ID of routing table to which this entry belongs.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
}

// NewTableEntry registers a new resource with the given unique name, arguments, and options.
func NewTableEntry(ctx *pulumi.Context,
	name string, args *TableEntryArgs, opts ...pulumi.ResourceOption) (*TableEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.NextHub == nil {
		return nil, errors.New("invalid value for required argument 'NextHub'")
	}
	if args.NextType == nil {
		return nil, errors.New("invalid value for required argument 'NextType'")
	}
	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TableEntry
	err := ctx.RegisterResource("tencentcloud:Route/tableEntry:TableEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableEntry gets an existing TableEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableEntryState, opts ...pulumi.ResourceOption) (*TableEntry, error) {
	var resource TableEntry
	err := ctx.ReadResource("tencentcloud:Route/tableEntry:TableEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableEntry resources.
type tableEntryState struct {
	// Description of the routing table entry.
	Description *string `pulumi:"description"`
	// Destination address block.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// Whether the entry is disabled, default is `false`.
	Disabled *bool `pulumi:"disabled"`
	// ID of next-hop gateway. Note: when `nextType` is EIP, `nextHub` should be `0`.
	NextHub *string `pulumi:"nextHub"`
	// Type of next-hop. Valid values: `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `HAVIP`, `NAT`, `NORMAL_CVM`, `EIP` and `LOCAL_GATEWAY`.
	NextType *string `pulumi:"nextType"`
	// ID of route table entry.
	RouteItemId *string `pulumi:"routeItemId"`
	// ID of routing table to which this entry belongs.
	RouteTableId *string `pulumi:"routeTableId"`
}

type TableEntryState struct {
	// Description of the routing table entry.
	Description pulumi.StringPtrInput
	// Destination address block.
	DestinationCidrBlock pulumi.StringPtrInput
	// Whether the entry is disabled, default is `false`.
	Disabled pulumi.BoolPtrInput
	// ID of next-hop gateway. Note: when `nextType` is EIP, `nextHub` should be `0`.
	NextHub pulumi.StringPtrInput
	// Type of next-hop. Valid values: `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `HAVIP`, `NAT`, `NORMAL_CVM`, `EIP` and `LOCAL_GATEWAY`.
	NextType pulumi.StringPtrInput
	// ID of route table entry.
	RouteItemId pulumi.StringPtrInput
	// ID of routing table to which this entry belongs.
	RouteTableId pulumi.StringPtrInput
}

func (TableEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableEntryState)(nil)).Elem()
}

type tableEntryArgs struct {
	// Description of the routing table entry.
	Description *string `pulumi:"description"`
	// Destination address block.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// Whether the entry is disabled, default is `false`.
	Disabled *bool `pulumi:"disabled"`
	// ID of next-hop gateway. Note: when `nextType` is EIP, `nextHub` should be `0`.
	NextHub string `pulumi:"nextHub"`
	// Type of next-hop. Valid values: `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `HAVIP`, `NAT`, `NORMAL_CVM`, `EIP` and `LOCAL_GATEWAY`.
	NextType string `pulumi:"nextType"`
	// ID of routing table to which this entry belongs.
	RouteTableId string `pulumi:"routeTableId"`
}

// The set of arguments for constructing a TableEntry resource.
type TableEntryArgs struct {
	// Description of the routing table entry.
	Description pulumi.StringPtrInput
	// Destination address block.
	DestinationCidrBlock pulumi.StringInput
	// Whether the entry is disabled, default is `false`.
	Disabled pulumi.BoolPtrInput
	// ID of next-hop gateway. Note: when `nextType` is EIP, `nextHub` should be `0`.
	NextHub pulumi.StringInput
	// Type of next-hop. Valid values: `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `HAVIP`, `NAT`, `NORMAL_CVM`, `EIP` and `LOCAL_GATEWAY`.
	NextType pulumi.StringInput
	// ID of routing table to which this entry belongs.
	RouteTableId pulumi.StringInput
}

func (TableEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableEntryArgs)(nil)).Elem()
}

type TableEntryInput interface {
	pulumi.Input

	ToTableEntryOutput() TableEntryOutput
	ToTableEntryOutputWithContext(ctx context.Context) TableEntryOutput
}

func (*TableEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEntry)(nil)).Elem()
}

func (i *TableEntry) ToTableEntryOutput() TableEntryOutput {
	return i.ToTableEntryOutputWithContext(context.Background())
}

func (i *TableEntry) ToTableEntryOutputWithContext(ctx context.Context) TableEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEntryOutput)
}

// TableEntryArrayInput is an input type that accepts TableEntryArray and TableEntryArrayOutput values.
// You can construct a concrete instance of `TableEntryArrayInput` via:
//
//	TableEntryArray{ TableEntryArgs{...} }
type TableEntryArrayInput interface {
	pulumi.Input

	ToTableEntryArrayOutput() TableEntryArrayOutput
	ToTableEntryArrayOutputWithContext(context.Context) TableEntryArrayOutput
}

type TableEntryArray []TableEntryInput

func (TableEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableEntry)(nil)).Elem()
}

func (i TableEntryArray) ToTableEntryArrayOutput() TableEntryArrayOutput {
	return i.ToTableEntryArrayOutputWithContext(context.Background())
}

func (i TableEntryArray) ToTableEntryArrayOutputWithContext(ctx context.Context) TableEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEntryArrayOutput)
}

// TableEntryMapInput is an input type that accepts TableEntryMap and TableEntryMapOutput values.
// You can construct a concrete instance of `TableEntryMapInput` via:
//
//	TableEntryMap{ "key": TableEntryArgs{...} }
type TableEntryMapInput interface {
	pulumi.Input

	ToTableEntryMapOutput() TableEntryMapOutput
	ToTableEntryMapOutputWithContext(context.Context) TableEntryMapOutput
}

type TableEntryMap map[string]TableEntryInput

func (TableEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableEntry)(nil)).Elem()
}

func (i TableEntryMap) ToTableEntryMapOutput() TableEntryMapOutput {
	return i.ToTableEntryMapOutputWithContext(context.Background())
}

func (i TableEntryMap) ToTableEntryMapOutputWithContext(ctx context.Context) TableEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableEntryMapOutput)
}

type TableEntryOutput struct{ *pulumi.OutputState }

func (TableEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableEntry)(nil)).Elem()
}

func (o TableEntryOutput) ToTableEntryOutput() TableEntryOutput {
	return o
}

func (o TableEntryOutput) ToTableEntryOutputWithContext(ctx context.Context) TableEntryOutput {
	return o
}

// Description of the routing table entry.
func (o TableEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableEntry) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Destination address block.
func (o TableEntryOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *TableEntry) pulumi.StringOutput { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// Whether the entry is disabled, default is `false`.
func (o TableEntryOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableEntry) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// ID of next-hop gateway. Note: when `nextType` is EIP, `nextHub` should be `0`.
func (o TableEntryOutput) NextHub() pulumi.StringOutput {
	return o.ApplyT(func(v *TableEntry) pulumi.StringOutput { return v.NextHub }).(pulumi.StringOutput)
}

// Type of next-hop. Valid values: `CVM`, `VPN`, `DIRECTCONNECT`, `PEERCONNECTION`, `HAVIP`, `NAT`, `NORMAL_CVM`, `EIP` and `LOCAL_GATEWAY`.
func (o TableEntryOutput) NextType() pulumi.StringOutput {
	return o.ApplyT(func(v *TableEntry) pulumi.StringOutput { return v.NextType }).(pulumi.StringOutput)
}

// ID of route table entry.
func (o TableEntryOutput) RouteItemId() pulumi.StringOutput {
	return o.ApplyT(func(v *TableEntry) pulumi.StringOutput { return v.RouteItemId }).(pulumi.StringOutput)
}

// ID of routing table to which this entry belongs.
func (o TableEntryOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *TableEntry) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

type TableEntryArrayOutput struct{ *pulumi.OutputState }

func (TableEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableEntry)(nil)).Elem()
}

func (o TableEntryArrayOutput) ToTableEntryArrayOutput() TableEntryArrayOutput {
	return o
}

func (o TableEntryArrayOutput) ToTableEntryArrayOutputWithContext(ctx context.Context) TableEntryArrayOutput {
	return o
}

func (o TableEntryArrayOutput) Index(i pulumi.IntInput) TableEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TableEntry {
		return vs[0].([]*TableEntry)[vs[1].(int)]
	}).(TableEntryOutput)
}

type TableEntryMapOutput struct{ *pulumi.OutputState }

func (TableEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableEntry)(nil)).Elem()
}

func (o TableEntryMapOutput) ToTableEntryMapOutput() TableEntryMapOutput {
	return o
}

func (o TableEntryMapOutput) ToTableEntryMapOutputWithContext(ctx context.Context) TableEntryMapOutput {
	return o
}

func (o TableEntryMapOutput) MapIndex(k pulumi.StringInput) TableEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TableEntry {
		return vs[0].(map[string]*TableEntry)[vs[1].(string)]
	}).(TableEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableEntryInput)(nil)).Elem(), &TableEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableEntryArrayInput)(nil)).Elem(), TableEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableEntryMapInput)(nil)).Elem(), TableEntryMap{})
	pulumi.RegisterOutputType(TableEntryOutput{})
	pulumi.RegisterOutputType(TableEntryArrayOutput{})
	pulumi.RegisterOutputType(TableEntryMapOutput{})
}
