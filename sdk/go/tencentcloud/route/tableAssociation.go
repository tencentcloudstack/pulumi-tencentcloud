// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package route

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc routeTable
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Route"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Route.NewTableAssociation(ctx, "routeTableAssociation", &Route.TableAssociationArgs{
//				RouteTableId: pulumi.String("rtb-5toos5sy"),
//				SubnetId:     pulumi.String("subnet-2y2omd4k"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// vpc route_table can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Route/tableAssociation:TableAssociation route_table_association subnet_id
//
// ```
type TableAssociation struct {
	pulumi.CustomResourceState

	// The route table instance ID, such as `rtb-azd4dt1c`.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// Subnet instance ID, such as `subnet-3x5lf5q0`. This can be queried using the DescribeSubnets API.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewTableAssociation registers a new resource with the given unique name, arguments, and options.
func NewTableAssociation(ctx *pulumi.Context,
	name string, args *TableAssociationArgs, opts ...pulumi.ResourceOption) (*TableAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource TableAssociation
	err := ctx.RegisterResource("tencentcloud:Route/tableAssociation:TableAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTableAssociation gets an existing TableAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTableAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TableAssociationState, opts ...pulumi.ResourceOption) (*TableAssociation, error) {
	var resource TableAssociation
	err := ctx.ReadResource("tencentcloud:Route/tableAssociation:TableAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TableAssociation resources.
type tableAssociationState struct {
	// The route table instance ID, such as `rtb-azd4dt1c`.
	RouteTableId *string `pulumi:"routeTableId"`
	// Subnet instance ID, such as `subnet-3x5lf5q0`. This can be queried using the DescribeSubnets API.
	SubnetId *string `pulumi:"subnetId"`
}

type TableAssociationState struct {
	// The route table instance ID, such as `rtb-azd4dt1c`.
	RouteTableId pulumi.StringPtrInput
	// Subnet instance ID, such as `subnet-3x5lf5q0`. This can be queried using the DescribeSubnets API.
	SubnetId pulumi.StringPtrInput
}

func (TableAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*tableAssociationState)(nil)).Elem()
}

type tableAssociationArgs struct {
	// The route table instance ID, such as `rtb-azd4dt1c`.
	RouteTableId string `pulumi:"routeTableId"`
	// Subnet instance ID, such as `subnet-3x5lf5q0`. This can be queried using the DescribeSubnets API.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a TableAssociation resource.
type TableAssociationArgs struct {
	// The route table instance ID, such as `rtb-azd4dt1c`.
	RouteTableId pulumi.StringInput
	// Subnet instance ID, such as `subnet-3x5lf5q0`. This can be queried using the DescribeSubnets API.
	SubnetId pulumi.StringInput
}

func (TableAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tableAssociationArgs)(nil)).Elem()
}

type TableAssociationInput interface {
	pulumi.Input

	ToTableAssociationOutput() TableAssociationOutput
	ToTableAssociationOutputWithContext(ctx context.Context) TableAssociationOutput
}

func (*TableAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**TableAssociation)(nil)).Elem()
}

func (i *TableAssociation) ToTableAssociationOutput() TableAssociationOutput {
	return i.ToTableAssociationOutputWithContext(context.Background())
}

func (i *TableAssociation) ToTableAssociationOutputWithContext(ctx context.Context) TableAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAssociationOutput)
}

// TableAssociationArrayInput is an input type that accepts TableAssociationArray and TableAssociationArrayOutput values.
// You can construct a concrete instance of `TableAssociationArrayInput` via:
//
//	TableAssociationArray{ TableAssociationArgs{...} }
type TableAssociationArrayInput interface {
	pulumi.Input

	ToTableAssociationArrayOutput() TableAssociationArrayOutput
	ToTableAssociationArrayOutputWithContext(context.Context) TableAssociationArrayOutput
}

type TableAssociationArray []TableAssociationInput

func (TableAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableAssociation)(nil)).Elem()
}

func (i TableAssociationArray) ToTableAssociationArrayOutput() TableAssociationArrayOutput {
	return i.ToTableAssociationArrayOutputWithContext(context.Background())
}

func (i TableAssociationArray) ToTableAssociationArrayOutputWithContext(ctx context.Context) TableAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAssociationArrayOutput)
}

// TableAssociationMapInput is an input type that accepts TableAssociationMap and TableAssociationMapOutput values.
// You can construct a concrete instance of `TableAssociationMapInput` via:
//
//	TableAssociationMap{ "key": TableAssociationArgs{...} }
type TableAssociationMapInput interface {
	pulumi.Input

	ToTableAssociationMapOutput() TableAssociationMapOutput
	ToTableAssociationMapOutputWithContext(context.Context) TableAssociationMapOutput
}

type TableAssociationMap map[string]TableAssociationInput

func (TableAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableAssociation)(nil)).Elem()
}

func (i TableAssociationMap) ToTableAssociationMapOutput() TableAssociationMapOutput {
	return i.ToTableAssociationMapOutputWithContext(context.Background())
}

func (i TableAssociationMap) ToTableAssociationMapOutputWithContext(ctx context.Context) TableAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableAssociationMapOutput)
}

type TableAssociationOutput struct{ *pulumi.OutputState }

func (TableAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableAssociation)(nil)).Elem()
}

func (o TableAssociationOutput) ToTableAssociationOutput() TableAssociationOutput {
	return o
}

func (o TableAssociationOutput) ToTableAssociationOutputWithContext(ctx context.Context) TableAssociationOutput {
	return o
}

// The route table instance ID, such as `rtb-azd4dt1c`.
func (o TableAssociationOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *TableAssociation) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// Subnet instance ID, such as `subnet-3x5lf5q0`. This can be queried using the DescribeSubnets API.
func (o TableAssociationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *TableAssociation) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type TableAssociationArrayOutput struct{ *pulumi.OutputState }

func (TableAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TableAssociation)(nil)).Elem()
}

func (o TableAssociationArrayOutput) ToTableAssociationArrayOutput() TableAssociationArrayOutput {
	return o
}

func (o TableAssociationArrayOutput) ToTableAssociationArrayOutputWithContext(ctx context.Context) TableAssociationArrayOutput {
	return o
}

func (o TableAssociationArrayOutput) Index(i pulumi.IntInput) TableAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TableAssociation {
		return vs[0].([]*TableAssociation)[vs[1].(int)]
	}).(TableAssociationOutput)
}

type TableAssociationMapOutput struct{ *pulumi.OutputState }

func (TableAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TableAssociation)(nil)).Elem()
}

func (o TableAssociationMapOutput) ToTableAssociationMapOutput() TableAssociationMapOutput {
	return o
}

func (o TableAssociationMapOutput) ToTableAssociationMapOutputWithContext(ctx context.Context) TableAssociationMapOutput {
	return o
}

func (o TableAssociationMapOutput) MapIndex(k pulumi.StringInput) TableAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TableAssociation {
		return vs[0].(map[string]*TableAssociation)[vs[1].(string)]
	}).(TableAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TableAssociationInput)(nil)).Elem(), &TableAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableAssociationArrayInput)(nil)).Elem(), TableAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableAssociationMapInput)(nil)).Elem(), TableAssociationMap{})
	pulumi.RegisterOutputType(TableAssociationOutput{})
	pulumi.RegisterOutputType(TableAssociationArrayOutput{})
	pulumi.RegisterOutputType(TableAssociationMapOutput{})
}
