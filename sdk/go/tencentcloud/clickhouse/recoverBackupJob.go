// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to recover a clickhouse back up
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clickhouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Clickhouse.NewRecoverBackupJob(ctx, "recoverBackupJob", &Clickhouse.RecoverBackupJobArgs{
//				BackUpJobId: pulumi.Int(1234),
//				InstanceId:  pulumi.String("cdwch-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RecoverBackupJob struct {
	pulumi.CustomResourceState

	// Back up job id.
	BackUpJobId pulumi.IntOutput `pulumi:"backUpJobId"`
	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewRecoverBackupJob registers a new resource with the given unique name, arguments, and options.
func NewRecoverBackupJob(ctx *pulumi.Context,
	name string, args *RecoverBackupJobArgs, opts ...pulumi.ResourceOption) (*RecoverBackupJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackUpJobId == nil {
		return nil, errors.New("invalid value for required argument 'BackUpJobId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RecoverBackupJob
	err := ctx.RegisterResource("tencentcloud:Clickhouse/recoverBackupJob:RecoverBackupJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecoverBackupJob gets an existing RecoverBackupJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecoverBackupJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecoverBackupJobState, opts ...pulumi.ResourceOption) (*RecoverBackupJob, error) {
	var resource RecoverBackupJob
	err := ctx.ReadResource("tencentcloud:Clickhouse/recoverBackupJob:RecoverBackupJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecoverBackupJob resources.
type recoverBackupJobState struct {
	// Back up job id.
	BackUpJobId *int `pulumi:"backUpJobId"`
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
}

type RecoverBackupJobState struct {
	// Back up job id.
	BackUpJobId pulumi.IntPtrInput
	// Instance id.
	InstanceId pulumi.StringPtrInput
}

func (RecoverBackupJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*recoverBackupJobState)(nil)).Elem()
}

type recoverBackupJobArgs struct {
	// Back up job id.
	BackUpJobId int `pulumi:"backUpJobId"`
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a RecoverBackupJob resource.
type RecoverBackupJobArgs struct {
	// Back up job id.
	BackUpJobId pulumi.IntInput
	// Instance id.
	InstanceId pulumi.StringInput
}

func (RecoverBackupJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recoverBackupJobArgs)(nil)).Elem()
}

type RecoverBackupJobInput interface {
	pulumi.Input

	ToRecoverBackupJobOutput() RecoverBackupJobOutput
	ToRecoverBackupJobOutputWithContext(ctx context.Context) RecoverBackupJobOutput
}

func (*RecoverBackupJob) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoverBackupJob)(nil)).Elem()
}

func (i *RecoverBackupJob) ToRecoverBackupJobOutput() RecoverBackupJobOutput {
	return i.ToRecoverBackupJobOutputWithContext(context.Background())
}

func (i *RecoverBackupJob) ToRecoverBackupJobOutputWithContext(ctx context.Context) RecoverBackupJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoverBackupJobOutput)
}

// RecoverBackupJobArrayInput is an input type that accepts RecoverBackupJobArray and RecoverBackupJobArrayOutput values.
// You can construct a concrete instance of `RecoverBackupJobArrayInput` via:
//
//	RecoverBackupJobArray{ RecoverBackupJobArgs{...} }
type RecoverBackupJobArrayInput interface {
	pulumi.Input

	ToRecoverBackupJobArrayOutput() RecoverBackupJobArrayOutput
	ToRecoverBackupJobArrayOutputWithContext(context.Context) RecoverBackupJobArrayOutput
}

type RecoverBackupJobArray []RecoverBackupJobInput

func (RecoverBackupJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecoverBackupJob)(nil)).Elem()
}

func (i RecoverBackupJobArray) ToRecoverBackupJobArrayOutput() RecoverBackupJobArrayOutput {
	return i.ToRecoverBackupJobArrayOutputWithContext(context.Background())
}

func (i RecoverBackupJobArray) ToRecoverBackupJobArrayOutputWithContext(ctx context.Context) RecoverBackupJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoverBackupJobArrayOutput)
}

// RecoverBackupJobMapInput is an input type that accepts RecoverBackupJobMap and RecoverBackupJobMapOutput values.
// You can construct a concrete instance of `RecoverBackupJobMapInput` via:
//
//	RecoverBackupJobMap{ "key": RecoverBackupJobArgs{...} }
type RecoverBackupJobMapInput interface {
	pulumi.Input

	ToRecoverBackupJobMapOutput() RecoverBackupJobMapOutput
	ToRecoverBackupJobMapOutputWithContext(context.Context) RecoverBackupJobMapOutput
}

type RecoverBackupJobMap map[string]RecoverBackupJobInput

func (RecoverBackupJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecoverBackupJob)(nil)).Elem()
}

func (i RecoverBackupJobMap) ToRecoverBackupJobMapOutput() RecoverBackupJobMapOutput {
	return i.ToRecoverBackupJobMapOutputWithContext(context.Background())
}

func (i RecoverBackupJobMap) ToRecoverBackupJobMapOutputWithContext(ctx context.Context) RecoverBackupJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoverBackupJobMapOutput)
}

type RecoverBackupJobOutput struct{ *pulumi.OutputState }

func (RecoverBackupJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoverBackupJob)(nil)).Elem()
}

func (o RecoverBackupJobOutput) ToRecoverBackupJobOutput() RecoverBackupJobOutput {
	return o
}

func (o RecoverBackupJobOutput) ToRecoverBackupJobOutputWithContext(ctx context.Context) RecoverBackupJobOutput {
	return o
}

// Back up job id.
func (o RecoverBackupJobOutput) BackUpJobId() pulumi.IntOutput {
	return o.ApplyT(func(v *RecoverBackupJob) pulumi.IntOutput { return v.BackUpJobId }).(pulumi.IntOutput)
}

// Instance id.
func (o RecoverBackupJobOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoverBackupJob) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type RecoverBackupJobArrayOutput struct{ *pulumi.OutputState }

func (RecoverBackupJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecoverBackupJob)(nil)).Elem()
}

func (o RecoverBackupJobArrayOutput) ToRecoverBackupJobArrayOutput() RecoverBackupJobArrayOutput {
	return o
}

func (o RecoverBackupJobArrayOutput) ToRecoverBackupJobArrayOutputWithContext(ctx context.Context) RecoverBackupJobArrayOutput {
	return o
}

func (o RecoverBackupJobArrayOutput) Index(i pulumi.IntInput) RecoverBackupJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecoverBackupJob {
		return vs[0].([]*RecoverBackupJob)[vs[1].(int)]
	}).(RecoverBackupJobOutput)
}

type RecoverBackupJobMapOutput struct{ *pulumi.OutputState }

func (RecoverBackupJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecoverBackupJob)(nil)).Elem()
}

func (o RecoverBackupJobMapOutput) ToRecoverBackupJobMapOutput() RecoverBackupJobMapOutput {
	return o
}

func (o RecoverBackupJobMapOutput) ToRecoverBackupJobMapOutputWithContext(ctx context.Context) RecoverBackupJobMapOutput {
	return o
}

func (o RecoverBackupJobMapOutput) MapIndex(k pulumi.StringInput) RecoverBackupJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecoverBackupJob {
		return vs[0].(map[string]*RecoverBackupJob)[vs[1].(string)]
	}).(RecoverBackupJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecoverBackupJobInput)(nil)).Elem(), &RecoverBackupJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecoverBackupJobArrayInput)(nil)).Elem(), RecoverBackupJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecoverBackupJobMapInput)(nil)).Elem(), RecoverBackupJobMap{})
	pulumi.RegisterOutputType(RecoverBackupJobOutput{})
	pulumi.RegisterOutputType(RecoverBackupJobArrayOutput{})
	pulumi.RegisterOutputType(RecoverBackupJobMapOutput{})
}
