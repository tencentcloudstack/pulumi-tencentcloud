// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a clickhouse backup strategy
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Clickhouse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clickhouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Clickhouse.NewBackup(ctx, "backup", &Clickhouse.BackupArgs{
//				CosBucketName: pulumi.String("xxxxxx"),
//				InstanceId:    pulumi.String("cdwch-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Clickhouse.NewBackupStrategy(ctx, "backupStrategy", &Clickhouse.BackupStrategyArgs{
//				DataBackupStrategies: clickhouse.BackupStrategyDataBackupStrategyArray{
//					&clickhouse.BackupStrategyDataBackupStrategyArgs{
//						BackUpTables: clickhouse.BackupStrategyDataBackupStrategyBackUpTableArray{
//							&clickhouse.BackupStrategyDataBackupStrategyBackUpTableArgs{
//								Database:   pulumi.String("iac"),
//								Ips:        pulumi.String("10.0.0.35"),
//								Table:      pulumi.String("my_table"),
//								TotalBytes: pulumi.Int(0),
//								VCluster:   pulumi.String("default_cluster"),
//							},
//						},
//						ExecuteHour: pulumi.Int(1),
//						RetainDays:  pulumi.Int(2),
//						WeekDays:    pulumi.String("3"),
//					},
//				},
//				InstanceId: pulumi.String("cdwch-xxxxxx"),
//				MetaBackupStrategies: clickhouse.BackupStrategyMetaBackupStrategyArray{
//					&clickhouse.BackupStrategyMetaBackupStrategyArgs{
//						ExecuteHour: pulumi.Int(3),
//						RetainDays:  pulumi.Int(2),
//						WeekDays:    pulumi.String("1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// clickhouse backup_strategy can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Clickhouse/backupStrategy:BackupStrategy backup_strategy instance_id
//
// ```
type BackupStrategy struct {
	pulumi.CustomResourceState

	// Data backup strategy.
	DataBackupStrategies BackupStrategyDataBackupStrategyArrayOutput `pulumi:"dataBackupStrategies"`
	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Metadata backup strategy.
	MetaBackupStrategies BackupStrategyMetaBackupStrategyArrayOutput `pulumi:"metaBackupStrategies"`
}

// NewBackupStrategy registers a new resource with the given unique name, arguments, and options.
func NewBackupStrategy(ctx *pulumi.Context,
	name string, args *BackupStrategyArgs, opts ...pulumi.ResourceOption) (*BackupStrategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataBackupStrategies == nil {
		return nil, errors.New("invalid value for required argument 'DataBackupStrategies'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BackupStrategy
	err := ctx.RegisterResource("tencentcloud:Clickhouse/backupStrategy:BackupStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupStrategy gets an existing BackupStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupStrategyState, opts ...pulumi.ResourceOption) (*BackupStrategy, error) {
	var resource BackupStrategy
	err := ctx.ReadResource("tencentcloud:Clickhouse/backupStrategy:BackupStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupStrategy resources.
type backupStrategyState struct {
	// Data backup strategy.
	DataBackupStrategies []BackupStrategyDataBackupStrategy `pulumi:"dataBackupStrategies"`
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Metadata backup strategy.
	MetaBackupStrategies []BackupStrategyMetaBackupStrategy `pulumi:"metaBackupStrategies"`
}

type BackupStrategyState struct {
	// Data backup strategy.
	DataBackupStrategies BackupStrategyDataBackupStrategyArrayInput
	// Instance id.
	InstanceId pulumi.StringPtrInput
	// Metadata backup strategy.
	MetaBackupStrategies BackupStrategyMetaBackupStrategyArrayInput
}

func (BackupStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupStrategyState)(nil)).Elem()
}

type backupStrategyArgs struct {
	// Data backup strategy.
	DataBackupStrategies []BackupStrategyDataBackupStrategy `pulumi:"dataBackupStrategies"`
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
	// Metadata backup strategy.
	MetaBackupStrategies []BackupStrategyMetaBackupStrategy `pulumi:"metaBackupStrategies"`
}

// The set of arguments for constructing a BackupStrategy resource.
type BackupStrategyArgs struct {
	// Data backup strategy.
	DataBackupStrategies BackupStrategyDataBackupStrategyArrayInput
	// Instance id.
	InstanceId pulumi.StringInput
	// Metadata backup strategy.
	MetaBackupStrategies BackupStrategyMetaBackupStrategyArrayInput
}

func (BackupStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupStrategyArgs)(nil)).Elem()
}

type BackupStrategyInput interface {
	pulumi.Input

	ToBackupStrategyOutput() BackupStrategyOutput
	ToBackupStrategyOutputWithContext(ctx context.Context) BackupStrategyOutput
}

func (*BackupStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStrategy)(nil)).Elem()
}

func (i *BackupStrategy) ToBackupStrategyOutput() BackupStrategyOutput {
	return i.ToBackupStrategyOutputWithContext(context.Background())
}

func (i *BackupStrategy) ToBackupStrategyOutputWithContext(ctx context.Context) BackupStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStrategyOutput)
}

// BackupStrategyArrayInput is an input type that accepts BackupStrategyArray and BackupStrategyArrayOutput values.
// You can construct a concrete instance of `BackupStrategyArrayInput` via:
//
//	BackupStrategyArray{ BackupStrategyArgs{...} }
type BackupStrategyArrayInput interface {
	pulumi.Input

	ToBackupStrategyArrayOutput() BackupStrategyArrayOutput
	ToBackupStrategyArrayOutputWithContext(context.Context) BackupStrategyArrayOutput
}

type BackupStrategyArray []BackupStrategyInput

func (BackupStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupStrategy)(nil)).Elem()
}

func (i BackupStrategyArray) ToBackupStrategyArrayOutput() BackupStrategyArrayOutput {
	return i.ToBackupStrategyArrayOutputWithContext(context.Background())
}

func (i BackupStrategyArray) ToBackupStrategyArrayOutputWithContext(ctx context.Context) BackupStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStrategyArrayOutput)
}

// BackupStrategyMapInput is an input type that accepts BackupStrategyMap and BackupStrategyMapOutput values.
// You can construct a concrete instance of `BackupStrategyMapInput` via:
//
//	BackupStrategyMap{ "key": BackupStrategyArgs{...} }
type BackupStrategyMapInput interface {
	pulumi.Input

	ToBackupStrategyMapOutput() BackupStrategyMapOutput
	ToBackupStrategyMapOutputWithContext(context.Context) BackupStrategyMapOutput
}

type BackupStrategyMap map[string]BackupStrategyInput

func (BackupStrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupStrategy)(nil)).Elem()
}

func (i BackupStrategyMap) ToBackupStrategyMapOutput() BackupStrategyMapOutput {
	return i.ToBackupStrategyMapOutputWithContext(context.Background())
}

func (i BackupStrategyMap) ToBackupStrategyMapOutputWithContext(ctx context.Context) BackupStrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStrategyMapOutput)
}

type BackupStrategyOutput struct{ *pulumi.OutputState }

func (BackupStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStrategy)(nil)).Elem()
}

func (o BackupStrategyOutput) ToBackupStrategyOutput() BackupStrategyOutput {
	return o
}

func (o BackupStrategyOutput) ToBackupStrategyOutputWithContext(ctx context.Context) BackupStrategyOutput {
	return o
}

// Data backup strategy.
func (o BackupStrategyOutput) DataBackupStrategies() BackupStrategyDataBackupStrategyArrayOutput {
	return o.ApplyT(func(v *BackupStrategy) BackupStrategyDataBackupStrategyArrayOutput { return v.DataBackupStrategies }).(BackupStrategyDataBackupStrategyArrayOutput)
}

// Instance id.
func (o BackupStrategyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupStrategy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Metadata backup strategy.
func (o BackupStrategyOutput) MetaBackupStrategies() BackupStrategyMetaBackupStrategyArrayOutput {
	return o.ApplyT(func(v *BackupStrategy) BackupStrategyMetaBackupStrategyArrayOutput { return v.MetaBackupStrategies }).(BackupStrategyMetaBackupStrategyArrayOutput)
}

type BackupStrategyArrayOutput struct{ *pulumi.OutputState }

func (BackupStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupStrategy)(nil)).Elem()
}

func (o BackupStrategyArrayOutput) ToBackupStrategyArrayOutput() BackupStrategyArrayOutput {
	return o
}

func (o BackupStrategyArrayOutput) ToBackupStrategyArrayOutputWithContext(ctx context.Context) BackupStrategyArrayOutput {
	return o
}

func (o BackupStrategyArrayOutput) Index(i pulumi.IntInput) BackupStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupStrategy {
		return vs[0].([]*BackupStrategy)[vs[1].(int)]
	}).(BackupStrategyOutput)
}

type BackupStrategyMapOutput struct{ *pulumi.OutputState }

func (BackupStrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupStrategy)(nil)).Elem()
}

func (o BackupStrategyMapOutput) ToBackupStrategyMapOutput() BackupStrategyMapOutput {
	return o
}

func (o BackupStrategyMapOutput) ToBackupStrategyMapOutputWithContext(ctx context.Context) BackupStrategyMapOutput {
	return o
}

func (o BackupStrategyMapOutput) MapIndex(k pulumi.StringInput) BackupStrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupStrategy {
		return vs[0].(map[string]*BackupStrategy)[vs[1].(string)]
	}).(BackupStrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStrategyInput)(nil)).Elem(), &BackupStrategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStrategyArrayInput)(nil)).Elem(), BackupStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStrategyMapInput)(nil)).Elem(), BackupStrategyMap{})
	pulumi.RegisterOutputType(BackupStrategyOutput{})
	pulumi.RegisterOutputType(BackupStrategyArrayOutput{})
	pulumi.RegisterOutputType(BackupStrategyMapOutput{})
}
