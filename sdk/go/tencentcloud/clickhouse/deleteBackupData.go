// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to delete a clickhouse back up data
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clickhouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Clickhouse.NewDeleteBackupData(ctx, "deleteBackUpData", &Clickhouse.DeleteBackupDataArgs{
//				BackUpJobId: pulumi.Int(1234),
//				InstanceId:  pulumi.String("cdwch-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DeleteBackupData struct {
	pulumi.CustomResourceState

	// Back up job id.
	BackUpJobId pulumi.IntPtrOutput `pulumi:"backUpJobId"`
	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewDeleteBackupData registers a new resource with the given unique name, arguments, and options.
func NewDeleteBackupData(ctx *pulumi.Context,
	name string, args *DeleteBackupDataArgs, opts ...pulumi.ResourceOption) (*DeleteBackupData, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DeleteBackupData
	err := ctx.RegisterResource("tencentcloud:Clickhouse/deleteBackupData:DeleteBackupData", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeleteBackupData gets an existing DeleteBackupData resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeleteBackupData(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeleteBackupDataState, opts ...pulumi.ResourceOption) (*DeleteBackupData, error) {
	var resource DeleteBackupData
	err := ctx.ReadResource("tencentcloud:Clickhouse/deleteBackupData:DeleteBackupData", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeleteBackupData resources.
type deleteBackupDataState struct {
	// Back up job id.
	BackUpJobId *int `pulumi:"backUpJobId"`
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
}

type DeleteBackupDataState struct {
	// Back up job id.
	BackUpJobId pulumi.IntPtrInput
	// Instance id.
	InstanceId pulumi.StringPtrInput
}

func (DeleteBackupDataState) ElementType() reflect.Type {
	return reflect.TypeOf((*deleteBackupDataState)(nil)).Elem()
}

type deleteBackupDataArgs struct {
	// Back up job id.
	BackUpJobId *int `pulumi:"backUpJobId"`
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a DeleteBackupData resource.
type DeleteBackupDataArgs struct {
	// Back up job id.
	BackUpJobId pulumi.IntPtrInput
	// Instance id.
	InstanceId pulumi.StringInput
}

func (DeleteBackupDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deleteBackupDataArgs)(nil)).Elem()
}

type DeleteBackupDataInput interface {
	pulumi.Input

	ToDeleteBackupDataOutput() DeleteBackupDataOutput
	ToDeleteBackupDataOutputWithContext(ctx context.Context) DeleteBackupDataOutput
}

func (*DeleteBackupData) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteBackupData)(nil)).Elem()
}

func (i *DeleteBackupData) ToDeleteBackupDataOutput() DeleteBackupDataOutput {
	return i.ToDeleteBackupDataOutputWithContext(context.Background())
}

func (i *DeleteBackupData) ToDeleteBackupDataOutputWithContext(ctx context.Context) DeleteBackupDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupDataOutput)
}

// DeleteBackupDataArrayInput is an input type that accepts DeleteBackupDataArray and DeleteBackupDataArrayOutput values.
// You can construct a concrete instance of `DeleteBackupDataArrayInput` via:
//
//	DeleteBackupDataArray{ DeleteBackupDataArgs{...} }
type DeleteBackupDataArrayInput interface {
	pulumi.Input

	ToDeleteBackupDataArrayOutput() DeleteBackupDataArrayOutput
	ToDeleteBackupDataArrayOutputWithContext(context.Context) DeleteBackupDataArrayOutput
}

type DeleteBackupDataArray []DeleteBackupDataInput

func (DeleteBackupDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeleteBackupData)(nil)).Elem()
}

func (i DeleteBackupDataArray) ToDeleteBackupDataArrayOutput() DeleteBackupDataArrayOutput {
	return i.ToDeleteBackupDataArrayOutputWithContext(context.Background())
}

func (i DeleteBackupDataArray) ToDeleteBackupDataArrayOutputWithContext(ctx context.Context) DeleteBackupDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupDataArrayOutput)
}

// DeleteBackupDataMapInput is an input type that accepts DeleteBackupDataMap and DeleteBackupDataMapOutput values.
// You can construct a concrete instance of `DeleteBackupDataMapInput` via:
//
//	DeleteBackupDataMap{ "key": DeleteBackupDataArgs{...} }
type DeleteBackupDataMapInput interface {
	pulumi.Input

	ToDeleteBackupDataMapOutput() DeleteBackupDataMapOutput
	ToDeleteBackupDataMapOutputWithContext(context.Context) DeleteBackupDataMapOutput
}

type DeleteBackupDataMap map[string]DeleteBackupDataInput

func (DeleteBackupDataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeleteBackupData)(nil)).Elem()
}

func (i DeleteBackupDataMap) ToDeleteBackupDataMapOutput() DeleteBackupDataMapOutput {
	return i.ToDeleteBackupDataMapOutputWithContext(context.Background())
}

func (i DeleteBackupDataMap) ToDeleteBackupDataMapOutputWithContext(ctx context.Context) DeleteBackupDataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupDataMapOutput)
}

type DeleteBackupDataOutput struct{ *pulumi.OutputState }

func (DeleteBackupDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteBackupData)(nil)).Elem()
}

func (o DeleteBackupDataOutput) ToDeleteBackupDataOutput() DeleteBackupDataOutput {
	return o
}

func (o DeleteBackupDataOutput) ToDeleteBackupDataOutputWithContext(ctx context.Context) DeleteBackupDataOutput {
	return o
}

// Back up job id.
func (o DeleteBackupDataOutput) BackUpJobId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeleteBackupData) pulumi.IntPtrOutput { return v.BackUpJobId }).(pulumi.IntPtrOutput)
}

// Instance id.
func (o DeleteBackupDataOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeleteBackupData) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type DeleteBackupDataArrayOutput struct{ *pulumi.OutputState }

func (DeleteBackupDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeleteBackupData)(nil)).Elem()
}

func (o DeleteBackupDataArrayOutput) ToDeleteBackupDataArrayOutput() DeleteBackupDataArrayOutput {
	return o
}

func (o DeleteBackupDataArrayOutput) ToDeleteBackupDataArrayOutputWithContext(ctx context.Context) DeleteBackupDataArrayOutput {
	return o
}

func (o DeleteBackupDataArrayOutput) Index(i pulumi.IntInput) DeleteBackupDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeleteBackupData {
		return vs[0].([]*DeleteBackupData)[vs[1].(int)]
	}).(DeleteBackupDataOutput)
}

type DeleteBackupDataMapOutput struct{ *pulumi.OutputState }

func (DeleteBackupDataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeleteBackupData)(nil)).Elem()
}

func (o DeleteBackupDataMapOutput) ToDeleteBackupDataMapOutput() DeleteBackupDataMapOutput {
	return o
}

func (o DeleteBackupDataMapOutput) ToDeleteBackupDataMapOutputWithContext(ctx context.Context) DeleteBackupDataMapOutput {
	return o
}

func (o DeleteBackupDataMapOutput) MapIndex(k pulumi.StringInput) DeleteBackupDataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeleteBackupData {
		return vs[0].(map[string]*DeleteBackupData)[vs[1].(string)]
	}).(DeleteBackupDataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeleteBackupDataInput)(nil)).Elem(), &DeleteBackupData{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeleteBackupDataArrayInput)(nil)).Elem(), DeleteBackupDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeleteBackupDataMapInput)(nil)).Elem(), DeleteBackupDataMap{})
	pulumi.RegisterOutputType(DeleteBackupDataOutput{})
	pulumi.RegisterOutputType(DeleteBackupDataArrayOutput{})
	pulumi.RegisterOutputType(DeleteBackupDataMapOutput{})
}
