// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a clickhouse keyvalConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Clickhouse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clickhouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Clickhouse.NewKeyvalConfig(ctx, "keyvalConfig", &Clickhouse.KeyvalConfigArgs{
//				InstanceId: pulumi.String("cdwch-datuhk3z"),
//				Items: &clickhouse.KeyvalConfigItemsArgs{
//					ConfKey:   pulumi.String("max_open_files"),
//					ConfValue: pulumi.String("50000"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// clickhouse config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Clickhouse/keyvalConfig:KeyvalConfig config cdwch-datuhk3z#max_open_files#50000
//
// ```
type KeyvalConfig struct {
	pulumi.CustomResourceState

	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// configuration list.
	Items KeyvalConfigItemsOutput `pulumi:"items"`
}

// NewKeyvalConfig registers a new resource with the given unique name, arguments, and options.
func NewKeyvalConfig(ctx *pulumi.Context,
	name string, args *KeyvalConfigArgs, opts ...pulumi.ResourceOption) (*KeyvalConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource KeyvalConfig
	err := ctx.RegisterResource("tencentcloud:Clickhouse/keyvalConfig:KeyvalConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyvalConfig gets an existing KeyvalConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyvalConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyvalConfigState, opts ...pulumi.ResourceOption) (*KeyvalConfig, error) {
	var resource KeyvalConfig
	err := ctx.ReadResource("tencentcloud:Clickhouse/keyvalConfig:KeyvalConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyvalConfig resources.
type keyvalConfigState struct {
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// configuration list.
	Items *KeyvalConfigItems `pulumi:"items"`
}

type KeyvalConfigState struct {
	// Instance ID.
	InstanceId pulumi.StringPtrInput
	// configuration list.
	Items KeyvalConfigItemsPtrInput
}

func (KeyvalConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyvalConfigState)(nil)).Elem()
}

type keyvalConfigArgs struct {
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// configuration list.
	Items KeyvalConfigItems `pulumi:"items"`
}

// The set of arguments for constructing a KeyvalConfig resource.
type KeyvalConfigArgs struct {
	// Instance ID.
	InstanceId pulumi.StringInput
	// configuration list.
	Items KeyvalConfigItemsInput
}

func (KeyvalConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyvalConfigArgs)(nil)).Elem()
}

type KeyvalConfigInput interface {
	pulumi.Input

	ToKeyvalConfigOutput() KeyvalConfigOutput
	ToKeyvalConfigOutputWithContext(ctx context.Context) KeyvalConfigOutput
}

func (*KeyvalConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyvalConfig)(nil)).Elem()
}

func (i *KeyvalConfig) ToKeyvalConfigOutput() KeyvalConfigOutput {
	return i.ToKeyvalConfigOutputWithContext(context.Background())
}

func (i *KeyvalConfig) ToKeyvalConfigOutputWithContext(ctx context.Context) KeyvalConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyvalConfigOutput)
}

// KeyvalConfigArrayInput is an input type that accepts KeyvalConfigArray and KeyvalConfigArrayOutput values.
// You can construct a concrete instance of `KeyvalConfigArrayInput` via:
//
//	KeyvalConfigArray{ KeyvalConfigArgs{...} }
type KeyvalConfigArrayInput interface {
	pulumi.Input

	ToKeyvalConfigArrayOutput() KeyvalConfigArrayOutput
	ToKeyvalConfigArrayOutputWithContext(context.Context) KeyvalConfigArrayOutput
}

type KeyvalConfigArray []KeyvalConfigInput

func (KeyvalConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyvalConfig)(nil)).Elem()
}

func (i KeyvalConfigArray) ToKeyvalConfigArrayOutput() KeyvalConfigArrayOutput {
	return i.ToKeyvalConfigArrayOutputWithContext(context.Background())
}

func (i KeyvalConfigArray) ToKeyvalConfigArrayOutputWithContext(ctx context.Context) KeyvalConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyvalConfigArrayOutput)
}

// KeyvalConfigMapInput is an input type that accepts KeyvalConfigMap and KeyvalConfigMapOutput values.
// You can construct a concrete instance of `KeyvalConfigMapInput` via:
//
//	KeyvalConfigMap{ "key": KeyvalConfigArgs{...} }
type KeyvalConfigMapInput interface {
	pulumi.Input

	ToKeyvalConfigMapOutput() KeyvalConfigMapOutput
	ToKeyvalConfigMapOutputWithContext(context.Context) KeyvalConfigMapOutput
}

type KeyvalConfigMap map[string]KeyvalConfigInput

func (KeyvalConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyvalConfig)(nil)).Elem()
}

func (i KeyvalConfigMap) ToKeyvalConfigMapOutput() KeyvalConfigMapOutput {
	return i.ToKeyvalConfigMapOutputWithContext(context.Background())
}

func (i KeyvalConfigMap) ToKeyvalConfigMapOutputWithContext(ctx context.Context) KeyvalConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyvalConfigMapOutput)
}

type KeyvalConfigOutput struct{ *pulumi.OutputState }

func (KeyvalConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyvalConfig)(nil)).Elem()
}

func (o KeyvalConfigOutput) ToKeyvalConfigOutput() KeyvalConfigOutput {
	return o
}

func (o KeyvalConfigOutput) ToKeyvalConfigOutputWithContext(ctx context.Context) KeyvalConfigOutput {
	return o
}

// Instance ID.
func (o KeyvalConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyvalConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// configuration list.
func (o KeyvalConfigOutput) Items() KeyvalConfigItemsOutput {
	return o.ApplyT(func(v *KeyvalConfig) KeyvalConfigItemsOutput { return v.Items }).(KeyvalConfigItemsOutput)
}

type KeyvalConfigArrayOutput struct{ *pulumi.OutputState }

func (KeyvalConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyvalConfig)(nil)).Elem()
}

func (o KeyvalConfigArrayOutput) ToKeyvalConfigArrayOutput() KeyvalConfigArrayOutput {
	return o
}

func (o KeyvalConfigArrayOutput) ToKeyvalConfigArrayOutputWithContext(ctx context.Context) KeyvalConfigArrayOutput {
	return o
}

func (o KeyvalConfigArrayOutput) Index(i pulumi.IntInput) KeyvalConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyvalConfig {
		return vs[0].([]*KeyvalConfig)[vs[1].(int)]
	}).(KeyvalConfigOutput)
}

type KeyvalConfigMapOutput struct{ *pulumi.OutputState }

func (KeyvalConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyvalConfig)(nil)).Elem()
}

func (o KeyvalConfigMapOutput) ToKeyvalConfigMapOutput() KeyvalConfigMapOutput {
	return o
}

func (o KeyvalConfigMapOutput) ToKeyvalConfigMapOutputWithContext(ctx context.Context) KeyvalConfigMapOutput {
	return o
}

func (o KeyvalConfigMapOutput) MapIndex(k pulumi.StringInput) KeyvalConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyvalConfig {
		return vs[0].(map[string]*KeyvalConfig)[vs[1].(string)]
	}).(KeyvalConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyvalConfigInput)(nil)).Elem(), &KeyvalConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyvalConfigArrayInput)(nil)).Elem(), KeyvalConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyvalConfigMapInput)(nil)).Elem(), KeyvalConfigMap{})
	pulumi.RegisterOutputType(KeyvalConfigOutput{})
	pulumi.RegisterOutputType(KeyvalConfigArrayOutput{})
	pulumi.RegisterOutputType(KeyvalConfigMapOutput{})
}
