// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create postgresql instance.
//
// > **Note:** To update the charge type, please update the `chargeType` and specify the `period` for the charging period. It only supports updating from `POSTPAID_BY_HOUR` to `PREPAID`, and the `period` field only valid in that upgrading case.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-1"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(availabilityZone),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.20.0/28"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Postgresql.NewInstance(ctx, "foo", &Postgresql.InstanceArgs{
//				AvailabilityZone: pulumi.String(availabilityZone),
//				ChargeType:       pulumi.String("POSTPAID_BY_HOUR"),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				EngineVersion:    pulumi.String("10.4"),
//				RootUser:         pulumi.String("root123"),
//				RootPassword:     pulumi.String(fmt.Sprintf("%v%v", "Root123", "$")),
//				Charset:          pulumi.String("UTF8"),
//				ProjectId:        pulumi.Int(0),
//				Memory:           pulumi.Int(2),
//				Storage:          pulumi.Int(10),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("tf"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a multi available zone bucket
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-6"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			standbyAvailabilityZone := "ap-guangzhou-7"
//			if param := cfg.Get("standbyAvailabilityZone"); param != "" {
//				standbyAvailabilityZone = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(availabilityZone),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.20.0/28"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Postgresql.NewInstance(ctx, "foo", &Postgresql.InstanceArgs{
//				AvailabilityZone: pulumi.String(availabilityZone),
//				ChargeType:       pulumi.String("POSTPAID_BY_HOUR"),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				EngineVersion:    pulumi.String("10.4"),
//				RootUser:         pulumi.String("root123"),
//				RootPassword:     pulumi.String(fmt.Sprintf("%v%v", "Root123", "$")),
//				Charset:          pulumi.String("UTF8"),
//				ProjectId:        pulumi.Int(0),
//				Memory:           pulumi.Int(2),
//				Storage:          pulumi.Int(10),
//				DbNodeSets: postgresql.InstanceDbNodeSetArray{
//					&postgresql.InstanceDbNodeSetArgs{
//						Role: pulumi.String("Primary"),
//						Zone: pulumi.String(availabilityZone),
//					},
//					&postgresql.InstanceDbNodeSetArgs{
//						Zone: pulumi.String(standbyAvailabilityZone),
//					},
//				},
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("tf"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### create pgsql with kms key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Postgresql.NewInstance(ctx, "pg", &Postgresql.InstanceArgs{
//				AvailabilityZone: pulumi.String("ap-guangzhou-6"),
//				BackupPlan: &postgresql.InstanceBackupPlanArgs{
//					BackupPeriods: pulumi.StringArray{
//						pulumi.String("tuesday"),
//						pulumi.String("wednesday"),
//					},
//					BaseBackupRetentionPeriod: pulumi.Int(7),
//					MaxBackupStartTime:        pulumi.String("01:10:11"),
//					MinBackupStartTime:        pulumi.String("00:10:11"),
//				},
//				ChargeType:      pulumi.String("POSTPAID_BY_HOUR"),
//				Charset:         pulumi.String("LATIN1"),
//				DbKernelVersion: pulumi.String("v11.12_r1.3"),
//				EngineVersion:   pulumi.String("11.12"),
//				KmsKeyId:        pulumi.String("788c606a-c7b7-11ec-82d1-5254001e5c4e"),
//				KmsRegion:       pulumi.String("ap-guangzhou"),
//				Memory:          pulumi.Int(4),
//				NeedSupportTde:  pulumi.Int(1),
//				ProjectId:       pulumi.Int(0),
//				RootPassword:    pulumi.String("xxxxxxxxxx"),
//				Storage:         pulumi.Int(100),
//				SubnetId:        pulumi.String("subnet-enm92y0m"),
//				Tags: pulumi.AnyMap{
//					"tf": pulumi.Any("test"),
//				},
//				VpcId: pulumi.String("vpc-86v957zb"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### upgrade kernel version
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Postgresql.NewInstance(ctx, "test", &Postgresql.InstanceArgs{
//				AvailabilityZone:   pulumi.Any(data.Tencentcloud_availability_zones_by_product.Zone.Zones[5].Name),
//				ChargeType:         pulumi.String("POSTPAID_BY_HOUR"),
//				VpcId:              pulumi.Any(local.Vpc_id),
//				SubnetId:           pulumi.Any(local.Subnet_id),
//				EngineVersion:      pulumi.String("13.3"),
//				RootPassword:       pulumi.String("*"),
//				Charset:            pulumi.String("LATIN1"),
//				ProjectId:          pulumi.Int(0),
//				PublicAccessSwitch: pulumi.Bool(false),
//				SecurityGroups: pulumi.StringArray{
//					pulumi.Any(local.Sg_id),
//				},
//				Memory:  pulumi.Int(4),
//				Storage: pulumi.Int(250),
//				BackupPlan: &postgresql.InstanceBackupPlanArgs{
//					MinBackupStartTime:        pulumi.String("01:10:11"),
//					MaxBackupStartTime:        pulumi.String("02:10:11"),
//					BaseBackupRetentionPeriod: pulumi.Int(5),
//					BackupPeriods: pulumi.StringArray{
//						pulumi.String("monday"),
//						pulumi.String("thursday"),
//						pulumi.String("sunday"),
//					},
//				},
//				DbKernelVersion: pulumi.String("v13.3_r1.4"),
//				Tags: pulumi.AnyMap{
//					"tf": pulumi.Any("teest"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// postgresql instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Postgresql/instance:Instance foo postgres-cda1iex1
//
// ```
type Instance struct {
	pulumi.CustomResourceState

	// Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
	AutoRenewFlag pulumi.IntPtrOutput `pulumi:"autoRenewFlag"`
	// Whether to use voucher, `1` for enabled.
	AutoVoucher pulumi.IntPtrOutput `pulumi:"autoVoucher"`
	// Availability zone. NOTE: This field could not be modified, please use `dbNodeSet` instead of modification. The changes on this field will be suppressed when using the `dbNodeSet`.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Specify DB backup plan.
	BackupPlan InstanceBackupPlanPtrOutput `pulumi:"backupPlan"`
	// Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
	ChargeType pulumi.StringPtrOutput `pulumi:"chargeType"`
	// Charset of the root account. Valid values are `UTF8`,`LATIN1`.
	Charset pulumi.StringPtrOutput `pulumi:"charset"`
	// Create time of the postgresql instance.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
	DbKernelVersion pulumi.StringOutput `pulumi:"dbKernelVersion"`
	// PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	DbMajorVersion pulumi.StringOutput `pulumi:"dbMajorVersion"`
	// `dbMajorVesion` will be deprecated, use `dbMajorVersion` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	//
	// Deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.
	DbMajorVesion pulumi.StringOutput `pulumi:"dbMajorVesion"`
	// Specify instance node info for disaster migration.
	DbNodeSets InstanceDbNodeSetArrayOutput `pulumi:"dbNodeSets"`
	// Version of the postgresql database engine. Valid values: `10.4`, `11.8`, `12.4`.
	EngineVersion pulumi.StringPtrOutput `pulumi:"engineVersion"`
	// KeyId of the custom key.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// Region of the custom key.
	KmsRegion pulumi.StringOutput `pulumi:"kmsRegion"`
	// max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
	MaxStandbyArchiveDelay pulumi.IntOutput `pulumi:"maxStandbyArchiveDelay"`
	// max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
	MaxStandbyStreamingDelay pulumi.IntOutput `pulumi:"maxStandbyStreamingDelay"`
	// Memory size(in GB). Allowed value must be larger than `memory` that data source `Postgresql.getSpecinfos` provides.
	Memory pulumi.IntOutput `pulumi:"memory"`
	// Name of the postgresql instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether to support data transparent encryption, 1: yes, 0: no (default).
	NeedSupportTde pulumi.IntOutput `pulumi:"needSupportTde"`
	// Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// IP for private access.
	PrivateAccessIp pulumi.StringOutput `pulumi:"privateAccessIp"`
	// Port for private access.
	PrivateAccessPort pulumi.IntOutput `pulumi:"privateAccessPort"`
	// Project id, default value is `0`.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// Host for public access.
	PublicAccessHost pulumi.StringOutput `pulumi:"publicAccessHost"`
	// Port for public access.
	PublicAccessPort pulumi.IntOutput `pulumi:"publicAccessPort"`
	// Indicates whether to enable the access to an instance from public network or not.
	PublicAccessSwitch pulumi.BoolPtrOutput `pulumi:"publicAccessSwitch"`
	// Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
	RootPassword pulumi.StringOutput `pulumi:"rootPassword"`
	// Instance root account name. This parameter is optional, Default value is `root`.
	RootUser pulumi.StringPtrOutput `pulumi:"rootUser"`
	// ID of security group. If both vpcId and subnetId are not set, this argument should not be set either.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `Postgresql.getSpecinfos` provides.
	Storage pulumi.IntOutput `pulumi:"storage"`
	// ID of subnet.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The available tags within this postgresql.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// Uid of the postgresql instance.
	Uid pulumi.IntOutput `pulumi:"uid"`
	// Specify Voucher Ids if `autoVoucher` was `1`, only support using 1 vouchers for now.
	VoucherIds pulumi.StringArrayOutput `pulumi:"voucherIds"`
	// ID of VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.Memory == nil {
		return nil, errors.New("invalid value for required argument 'Memory'")
	}
	if args.RootPassword == nil {
		return nil, errors.New("invalid value for required argument 'RootPassword'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("tencentcloud:Postgresql/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("tencentcloud:Postgresql/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// Whether to use voucher, `1` for enabled.
	AutoVoucher *int `pulumi:"autoVoucher"`
	// Availability zone. NOTE: This field could not be modified, please use `dbNodeSet` instead of modification. The changes on this field will be suppressed when using the `dbNodeSet`.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specify DB backup plan.
	BackupPlan *InstanceBackupPlan `pulumi:"backupPlan"`
	// Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
	ChargeType *string `pulumi:"chargeType"`
	// Charset of the root account. Valid values are `UTF8`,`LATIN1`.
	Charset *string `pulumi:"charset"`
	// Create time of the postgresql instance.
	CreateTime *string `pulumi:"createTime"`
	// PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
	DbKernelVersion *string `pulumi:"dbKernelVersion"`
	// PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	DbMajorVersion *string `pulumi:"dbMajorVersion"`
	// `dbMajorVesion` will be deprecated, use `dbMajorVersion` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	//
	// Deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.
	DbMajorVesion *string `pulumi:"dbMajorVesion"`
	// Specify instance node info for disaster migration.
	DbNodeSets []InstanceDbNodeSet `pulumi:"dbNodeSets"`
	// Version of the postgresql database engine. Valid values: `10.4`, `11.8`, `12.4`.
	EngineVersion *string `pulumi:"engineVersion"`
	// KeyId of the custom key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Region of the custom key.
	KmsRegion *string `pulumi:"kmsRegion"`
	// max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
	MaxStandbyArchiveDelay *int `pulumi:"maxStandbyArchiveDelay"`
	// max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
	MaxStandbyStreamingDelay *int `pulumi:"maxStandbyStreamingDelay"`
	// Memory size(in GB). Allowed value must be larger than `memory` that data source `Postgresql.getSpecinfos` provides.
	Memory *int `pulumi:"memory"`
	// Name of the postgresql instance.
	Name *string `pulumi:"name"`
	// Whether to support data transparent encryption, 1: yes, 0: no (default).
	NeedSupportTde *int `pulumi:"needSupportTde"`
	// Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
	Period *int `pulumi:"period"`
	// IP for private access.
	PrivateAccessIp *string `pulumi:"privateAccessIp"`
	// Port for private access.
	PrivateAccessPort *int `pulumi:"privateAccessPort"`
	// Project id, default value is `0`.
	ProjectId *int `pulumi:"projectId"`
	// Host for public access.
	PublicAccessHost *string `pulumi:"publicAccessHost"`
	// Port for public access.
	PublicAccessPort *int `pulumi:"publicAccessPort"`
	// Indicates whether to enable the access to an instance from public network or not.
	PublicAccessSwitch *bool `pulumi:"publicAccessSwitch"`
	// Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
	RootPassword *string `pulumi:"rootPassword"`
	// Instance root account name. This parameter is optional, Default value is `root`.
	RootUser *string `pulumi:"rootUser"`
	// ID of security group. If both vpcId and subnetId are not set, this argument should not be set either.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `Postgresql.getSpecinfos` provides.
	Storage *int `pulumi:"storage"`
	// ID of subnet.
	SubnetId *string `pulumi:"subnetId"`
	// The available tags within this postgresql.
	Tags map[string]interface{} `pulumi:"tags"`
	// Uid of the postgresql instance.
	Uid *int `pulumi:"uid"`
	// Specify Voucher Ids if `autoVoucher` was `1`, only support using 1 vouchers for now.
	VoucherIds []string `pulumi:"voucherIds"`
	// ID of VPC.
	VpcId *string `pulumi:"vpcId"`
}

type InstanceState struct {
	// Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
	AutoRenewFlag pulumi.IntPtrInput
	// Whether to use voucher, `1` for enabled.
	AutoVoucher pulumi.IntPtrInput
	// Availability zone. NOTE: This field could not be modified, please use `dbNodeSet` instead of modification. The changes on this field will be suppressed when using the `dbNodeSet`.
	AvailabilityZone pulumi.StringPtrInput
	// Specify DB backup plan.
	BackupPlan InstanceBackupPlanPtrInput
	// Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
	ChargeType pulumi.StringPtrInput
	// Charset of the root account. Valid values are `UTF8`,`LATIN1`.
	Charset pulumi.StringPtrInput
	// Create time of the postgresql instance.
	CreateTime pulumi.StringPtrInput
	// PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
	DbKernelVersion pulumi.StringPtrInput
	// PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	DbMajorVersion pulumi.StringPtrInput
	// `dbMajorVesion` will be deprecated, use `dbMajorVersion` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	//
	// Deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.
	DbMajorVesion pulumi.StringPtrInput
	// Specify instance node info for disaster migration.
	DbNodeSets InstanceDbNodeSetArrayInput
	// Version of the postgresql database engine. Valid values: `10.4`, `11.8`, `12.4`.
	EngineVersion pulumi.StringPtrInput
	// KeyId of the custom key.
	KmsKeyId pulumi.StringPtrInput
	// Region of the custom key.
	KmsRegion pulumi.StringPtrInput
	// max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
	MaxStandbyArchiveDelay pulumi.IntPtrInput
	// max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
	MaxStandbyStreamingDelay pulumi.IntPtrInput
	// Memory size(in GB). Allowed value must be larger than `memory` that data source `Postgresql.getSpecinfos` provides.
	Memory pulumi.IntPtrInput
	// Name of the postgresql instance.
	Name pulumi.StringPtrInput
	// Whether to support data transparent encryption, 1: yes, 0: no (default).
	NeedSupportTde pulumi.IntPtrInput
	// Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
	Period pulumi.IntPtrInput
	// IP for private access.
	PrivateAccessIp pulumi.StringPtrInput
	// Port for private access.
	PrivateAccessPort pulumi.IntPtrInput
	// Project id, default value is `0`.
	ProjectId pulumi.IntPtrInput
	// Host for public access.
	PublicAccessHost pulumi.StringPtrInput
	// Port for public access.
	PublicAccessPort pulumi.IntPtrInput
	// Indicates whether to enable the access to an instance from public network or not.
	PublicAccessSwitch pulumi.BoolPtrInput
	// Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
	RootPassword pulumi.StringPtrInput
	// Instance root account name. This parameter is optional, Default value is `root`.
	RootUser pulumi.StringPtrInput
	// ID of security group. If both vpcId and subnetId are not set, this argument should not be set either.
	SecurityGroups pulumi.StringArrayInput
	// Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `Postgresql.getSpecinfos` provides.
	Storage pulumi.IntPtrInput
	// ID of subnet.
	SubnetId pulumi.StringPtrInput
	// The available tags within this postgresql.
	Tags pulumi.MapInput
	// Uid of the postgresql instance.
	Uid pulumi.IntPtrInput
	// Specify Voucher Ids if `autoVoucher` was `1`, only support using 1 vouchers for now.
	VoucherIds pulumi.StringArrayInput
	// ID of VPC.
	VpcId pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// Whether to use voucher, `1` for enabled.
	AutoVoucher *int `pulumi:"autoVoucher"`
	// Availability zone. NOTE: This field could not be modified, please use `dbNodeSet` instead of modification. The changes on this field will be suppressed when using the `dbNodeSet`.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Specify DB backup plan.
	BackupPlan *InstanceBackupPlan `pulumi:"backupPlan"`
	// Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
	ChargeType *string `pulumi:"chargeType"`
	// Charset of the root account. Valid values are `UTF8`,`LATIN1`.
	Charset *string `pulumi:"charset"`
	// PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
	DbKernelVersion *string `pulumi:"dbKernelVersion"`
	// PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	DbMajorVersion *string `pulumi:"dbMajorVersion"`
	// `dbMajorVesion` will be deprecated, use `dbMajorVersion` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	//
	// Deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.
	DbMajorVesion *string `pulumi:"dbMajorVesion"`
	// Specify instance node info for disaster migration.
	DbNodeSets []InstanceDbNodeSet `pulumi:"dbNodeSets"`
	// Version of the postgresql database engine. Valid values: `10.4`, `11.8`, `12.4`.
	EngineVersion *string `pulumi:"engineVersion"`
	// KeyId of the custom key.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Region of the custom key.
	KmsRegion *string `pulumi:"kmsRegion"`
	// max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
	MaxStandbyArchiveDelay *int `pulumi:"maxStandbyArchiveDelay"`
	// max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
	MaxStandbyStreamingDelay *int `pulumi:"maxStandbyStreamingDelay"`
	// Memory size(in GB). Allowed value must be larger than `memory` that data source `Postgresql.getSpecinfos` provides.
	Memory int `pulumi:"memory"`
	// Name of the postgresql instance.
	Name *string `pulumi:"name"`
	// Whether to support data transparent encryption, 1: yes, 0: no (default).
	NeedSupportTde *int `pulumi:"needSupportTde"`
	// Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
	Period *int `pulumi:"period"`
	// Project id, default value is `0`.
	ProjectId *int `pulumi:"projectId"`
	// Indicates whether to enable the access to an instance from public network or not.
	PublicAccessSwitch *bool `pulumi:"publicAccessSwitch"`
	// Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
	RootPassword string `pulumi:"rootPassword"`
	// Instance root account name. This parameter is optional, Default value is `root`.
	RootUser *string `pulumi:"rootUser"`
	// ID of security group. If both vpcId and subnetId are not set, this argument should not be set either.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `Postgresql.getSpecinfos` provides.
	Storage int `pulumi:"storage"`
	// ID of subnet.
	SubnetId string `pulumi:"subnetId"`
	// The available tags within this postgresql.
	Tags map[string]interface{} `pulumi:"tags"`
	// Specify Voucher Ids if `autoVoucher` was `1`, only support using 1 vouchers for now.
	VoucherIds []string `pulumi:"voucherIds"`
	// ID of VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
	AutoRenewFlag pulumi.IntPtrInput
	// Whether to use voucher, `1` for enabled.
	AutoVoucher pulumi.IntPtrInput
	// Availability zone. NOTE: This field could not be modified, please use `dbNodeSet` instead of modification. The changes on this field will be suppressed when using the `dbNodeSet`.
	AvailabilityZone pulumi.StringInput
	// Specify DB backup plan.
	BackupPlan InstanceBackupPlanPtrInput
	// Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
	ChargeType pulumi.StringPtrInput
	// Charset of the root account. Valid values are `UTF8`,`LATIN1`.
	Charset pulumi.StringPtrInput
	// PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
	DbKernelVersion pulumi.StringPtrInput
	// PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	DbMajorVersion pulumi.StringPtrInput
	// `dbMajorVesion` will be deprecated, use `dbMajorVersion` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
	//
	// Deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.
	DbMajorVesion pulumi.StringPtrInput
	// Specify instance node info for disaster migration.
	DbNodeSets InstanceDbNodeSetArrayInput
	// Version of the postgresql database engine. Valid values: `10.4`, `11.8`, `12.4`.
	EngineVersion pulumi.StringPtrInput
	// KeyId of the custom key.
	KmsKeyId pulumi.StringPtrInput
	// Region of the custom key.
	KmsRegion pulumi.StringPtrInput
	// max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
	MaxStandbyArchiveDelay pulumi.IntPtrInput
	// max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
	MaxStandbyStreamingDelay pulumi.IntPtrInput
	// Memory size(in GB). Allowed value must be larger than `memory` that data source `Postgresql.getSpecinfos` provides.
	Memory pulumi.IntInput
	// Name of the postgresql instance.
	Name pulumi.StringPtrInput
	// Whether to support data transparent encryption, 1: yes, 0: no (default).
	NeedSupportTde pulumi.IntPtrInput
	// Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
	Period pulumi.IntPtrInput
	// Project id, default value is `0`.
	ProjectId pulumi.IntPtrInput
	// Indicates whether to enable the access to an instance from public network or not.
	PublicAccessSwitch pulumi.BoolPtrInput
	// Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
	RootPassword pulumi.StringInput
	// Instance root account name. This parameter is optional, Default value is `root`.
	RootUser pulumi.StringPtrInput
	// ID of security group. If both vpcId and subnetId are not set, this argument should not be set either.
	SecurityGroups pulumi.StringArrayInput
	// Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `Postgresql.getSpecinfos` provides.
	Storage pulumi.IntInput
	// ID of subnet.
	SubnetId pulumi.StringInput
	// The available tags within this postgresql.
	Tags pulumi.MapInput
	// Specify Voucher Ids if `autoVoucher` was `1`, only support using 1 vouchers for now.
	VoucherIds pulumi.StringArrayInput
	// ID of VPC.
	VpcId pulumi.StringInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Auto renew flag, `1` for enabled. NOTES: Only support prepaid instance.
func (o InstanceOutput) AutoRenewFlag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.AutoRenewFlag }).(pulumi.IntPtrOutput)
}

// Whether to use voucher, `1` for enabled.
func (o InstanceOutput) AutoVoucher() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.AutoVoucher }).(pulumi.IntPtrOutput)
}

// Availability zone. NOTE: This field could not be modified, please use `dbNodeSet` instead of modification. The changes on this field will be suppressed when using the `dbNodeSet`.
func (o InstanceOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Specify DB backup plan.
func (o InstanceOutput) BackupPlan() InstanceBackupPlanPtrOutput {
	return o.ApplyT(func(v *Instance) InstanceBackupPlanPtrOutput { return v.BackupPlan }).(InstanceBackupPlanPtrOutput)
}

// Pay type of the postgresql instance. Values `POSTPAID_BY_HOUR` (Default), `PREPAID`. It only support to update the type from `POSTPAID_BY_HOUR` to `PREPAID`.
func (o InstanceOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// Charset of the root account. Valid values are `UTF8`,`LATIN1`.
func (o InstanceOutput) Charset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.Charset }).(pulumi.StringPtrOutput)
}

// Create time of the postgresql instance.
func (o InstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// PostgreSQL kernel version number. If it is specified, an instance running kernel DBKernelVersion will be created. It supports updating the minor kernel version immediately.
func (o InstanceOutput) DbKernelVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DbKernelVersion }).(pulumi.StringOutput)
}

// PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
func (o InstanceOutput) DbMajorVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DbMajorVersion }).(pulumi.StringOutput)
}

// `dbMajorVesion` will be deprecated, use `dbMajorVersion` instead. PostgreSQL major version number. Valid values: 10, 11, 12, 13. If it is specified, an instance running the latest kernel of PostgreSQL DBMajorVersion will be created.
//
// Deprecated: `db_major_vesion` will be deprecated, use `db_major_version` instead.
func (o InstanceOutput) DbMajorVesion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DbMajorVesion }).(pulumi.StringOutput)
}

// Specify instance node info for disaster migration.
func (o InstanceOutput) DbNodeSets() InstanceDbNodeSetArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceDbNodeSetArrayOutput { return v.DbNodeSets }).(InstanceDbNodeSetArrayOutput)
}

// Version of the postgresql database engine. Valid values: `10.4`, `11.8`, `12.4`.
func (o InstanceOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.EngineVersion }).(pulumi.StringPtrOutput)
}

// KeyId of the custom key.
func (o InstanceOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// Region of the custom key.
func (o InstanceOutput) KmsRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.KmsRegion }).(pulumi.StringOutput)
}

// max_standby_archive_delay applies when WAL data is being read from WAL archive (and is therefore not current). Units are milliseconds if not specified.
func (o InstanceOutput) MaxStandbyArchiveDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.MaxStandbyArchiveDelay }).(pulumi.IntOutput)
}

// max_standby_streaming_delay applies when WAL data is being received via streaming replication. Units are milliseconds if not specified.
func (o InstanceOutput) MaxStandbyStreamingDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.MaxStandbyStreamingDelay }).(pulumi.IntOutput)
}

// Memory size(in GB). Allowed value must be larger than `memory` that data source `Postgresql.getSpecinfos` provides.
func (o InstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

// Name of the postgresql instance.
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether to support data transparent encryption, 1: yes, 0: no (default).
func (o InstanceOutput) NeedSupportTde() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.NeedSupportTde }).(pulumi.IntOutput)
}

// Specify Prepaid period in month. Default `1`. Values: `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. This field is valid only when creating a `PREPAID` type instance, or updating the charge type from `POSTPAID_BY_HOUR` to `PREPAID`.
func (o InstanceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// IP for private access.
func (o InstanceOutput) PrivateAccessIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PrivateAccessIp }).(pulumi.StringOutput)
}

// Port for private access.
func (o InstanceOutput) PrivateAccessPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.PrivateAccessPort }).(pulumi.IntOutput)
}

// Project id, default value is `0`.
func (o InstanceOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// Host for public access.
func (o InstanceOutput) PublicAccessHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PublicAccessHost }).(pulumi.StringOutput)
}

// Port for public access.
func (o InstanceOutput) PublicAccessPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.PublicAccessPort }).(pulumi.IntOutput)
}

// Indicates whether to enable the access to an instance from public network or not.
func (o InstanceOutput) PublicAccessSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.PublicAccessSwitch }).(pulumi.BoolPtrOutput)
}

// Password of root account. This parameter can be specified when you purchase master instances, but it should be ignored when you purchase read-only instances or disaster recovery instances.
func (o InstanceOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.RootPassword }).(pulumi.StringOutput)
}

// Instance root account name. This parameter is optional, Default value is `root`.
func (o InstanceOutput) RootUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.RootUser }).(pulumi.StringPtrOutput)
}

// ID of security group. If both vpcId and subnetId are not set, this argument should not be set either.
func (o InstanceOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Volume size(in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `Postgresql.getSpecinfos` provides.
func (o InstanceOutput) Storage() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Storage }).(pulumi.IntOutput)
}

// ID of subnet.
func (o InstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The available tags within this postgresql.
func (o InstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Instance) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// Uid of the postgresql instance.
func (o InstanceOutput) Uid() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Uid }).(pulumi.IntOutput)
}

// Specify Voucher Ids if `autoVoucher` was `1`, only support using 1 vouchers for now.
func (o InstanceOutput) VoucherIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.VoucherIds }).(pulumi.StringArrayOutput)
}

// ID of VPC.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
