// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create postgresql readonly attachment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Postgresql.NewReadonlyAttachment(ctx, "attach", &Postgresql.ReadonlyAttachmentArgs{
//				DbInstanceId:    pulumi.Any(tencentcloud_postgresql_readonly_instance.Foo.Id),
//				ReadOnlyGroupId: pulumi.Any(tencentcloud_postgresql_readonly_group.Group.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ReadonlyAttachment struct {
	pulumi.CustomResourceState

	// Read only instance ID.
	DbInstanceId pulumi.StringOutput `pulumi:"dbInstanceId"`
	// Read only group ID.
	ReadOnlyGroupId pulumi.StringOutput `pulumi:"readOnlyGroupId"`
}

// NewReadonlyAttachment registers a new resource with the given unique name, arguments, and options.
func NewReadonlyAttachment(ctx *pulumi.Context,
	name string, args *ReadonlyAttachmentArgs, opts ...pulumi.ResourceOption) (*ReadonlyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceId'")
	}
	if args.ReadOnlyGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ReadOnlyGroupId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ReadonlyAttachment
	err := ctx.RegisterResource("tencentcloud:Postgresql/readonlyAttachment:ReadonlyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReadonlyAttachment gets an existing ReadonlyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReadonlyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReadonlyAttachmentState, opts ...pulumi.ResourceOption) (*ReadonlyAttachment, error) {
	var resource ReadonlyAttachment
	err := ctx.ReadResource("tencentcloud:Postgresql/readonlyAttachment:ReadonlyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReadonlyAttachment resources.
type readonlyAttachmentState struct {
	// Read only instance ID.
	DbInstanceId *string `pulumi:"dbInstanceId"`
	// Read only group ID.
	ReadOnlyGroupId *string `pulumi:"readOnlyGroupId"`
}

type ReadonlyAttachmentState struct {
	// Read only instance ID.
	DbInstanceId pulumi.StringPtrInput
	// Read only group ID.
	ReadOnlyGroupId pulumi.StringPtrInput
}

func (ReadonlyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*readonlyAttachmentState)(nil)).Elem()
}

type readonlyAttachmentArgs struct {
	// Read only instance ID.
	DbInstanceId string `pulumi:"dbInstanceId"`
	// Read only group ID.
	ReadOnlyGroupId string `pulumi:"readOnlyGroupId"`
}

// The set of arguments for constructing a ReadonlyAttachment resource.
type ReadonlyAttachmentArgs struct {
	// Read only instance ID.
	DbInstanceId pulumi.StringInput
	// Read only group ID.
	ReadOnlyGroupId pulumi.StringInput
}

func (ReadonlyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*readonlyAttachmentArgs)(nil)).Elem()
}

type ReadonlyAttachmentInput interface {
	pulumi.Input

	ToReadonlyAttachmentOutput() ReadonlyAttachmentOutput
	ToReadonlyAttachmentOutputWithContext(ctx context.Context) ReadonlyAttachmentOutput
}

func (*ReadonlyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadonlyAttachment)(nil)).Elem()
}

func (i *ReadonlyAttachment) ToReadonlyAttachmentOutput() ReadonlyAttachmentOutput {
	return i.ToReadonlyAttachmentOutputWithContext(context.Background())
}

func (i *ReadonlyAttachment) ToReadonlyAttachmentOutputWithContext(ctx context.Context) ReadonlyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyAttachmentOutput)
}

// ReadonlyAttachmentArrayInput is an input type that accepts ReadonlyAttachmentArray and ReadonlyAttachmentArrayOutput values.
// You can construct a concrete instance of `ReadonlyAttachmentArrayInput` via:
//
//	ReadonlyAttachmentArray{ ReadonlyAttachmentArgs{...} }
type ReadonlyAttachmentArrayInput interface {
	pulumi.Input

	ToReadonlyAttachmentArrayOutput() ReadonlyAttachmentArrayOutput
	ToReadonlyAttachmentArrayOutputWithContext(context.Context) ReadonlyAttachmentArrayOutput
}

type ReadonlyAttachmentArray []ReadonlyAttachmentInput

func (ReadonlyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReadonlyAttachment)(nil)).Elem()
}

func (i ReadonlyAttachmentArray) ToReadonlyAttachmentArrayOutput() ReadonlyAttachmentArrayOutput {
	return i.ToReadonlyAttachmentArrayOutputWithContext(context.Background())
}

func (i ReadonlyAttachmentArray) ToReadonlyAttachmentArrayOutputWithContext(ctx context.Context) ReadonlyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyAttachmentArrayOutput)
}

// ReadonlyAttachmentMapInput is an input type that accepts ReadonlyAttachmentMap and ReadonlyAttachmentMapOutput values.
// You can construct a concrete instance of `ReadonlyAttachmentMapInput` via:
//
//	ReadonlyAttachmentMap{ "key": ReadonlyAttachmentArgs{...} }
type ReadonlyAttachmentMapInput interface {
	pulumi.Input

	ToReadonlyAttachmentMapOutput() ReadonlyAttachmentMapOutput
	ToReadonlyAttachmentMapOutputWithContext(context.Context) ReadonlyAttachmentMapOutput
}

type ReadonlyAttachmentMap map[string]ReadonlyAttachmentInput

func (ReadonlyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReadonlyAttachment)(nil)).Elem()
}

func (i ReadonlyAttachmentMap) ToReadonlyAttachmentMapOutput() ReadonlyAttachmentMapOutput {
	return i.ToReadonlyAttachmentMapOutputWithContext(context.Background())
}

func (i ReadonlyAttachmentMap) ToReadonlyAttachmentMapOutputWithContext(ctx context.Context) ReadonlyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyAttachmentMapOutput)
}

type ReadonlyAttachmentOutput struct{ *pulumi.OutputState }

func (ReadonlyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadonlyAttachment)(nil)).Elem()
}

func (o ReadonlyAttachmentOutput) ToReadonlyAttachmentOutput() ReadonlyAttachmentOutput {
	return o
}

func (o ReadonlyAttachmentOutput) ToReadonlyAttachmentOutputWithContext(ctx context.Context) ReadonlyAttachmentOutput {
	return o
}

// Read only instance ID.
func (o ReadonlyAttachmentOutput) DbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadonlyAttachment) pulumi.StringOutput { return v.DbInstanceId }).(pulumi.StringOutput)
}

// Read only group ID.
func (o ReadonlyAttachmentOutput) ReadOnlyGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadonlyAttachment) pulumi.StringOutput { return v.ReadOnlyGroupId }).(pulumi.StringOutput)
}

type ReadonlyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ReadonlyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReadonlyAttachment)(nil)).Elem()
}

func (o ReadonlyAttachmentArrayOutput) ToReadonlyAttachmentArrayOutput() ReadonlyAttachmentArrayOutput {
	return o
}

func (o ReadonlyAttachmentArrayOutput) ToReadonlyAttachmentArrayOutputWithContext(ctx context.Context) ReadonlyAttachmentArrayOutput {
	return o
}

func (o ReadonlyAttachmentArrayOutput) Index(i pulumi.IntInput) ReadonlyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReadonlyAttachment {
		return vs[0].([]*ReadonlyAttachment)[vs[1].(int)]
	}).(ReadonlyAttachmentOutput)
}

type ReadonlyAttachmentMapOutput struct{ *pulumi.OutputState }

func (ReadonlyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReadonlyAttachment)(nil)).Elem()
}

func (o ReadonlyAttachmentMapOutput) ToReadonlyAttachmentMapOutput() ReadonlyAttachmentMapOutput {
	return o
}

func (o ReadonlyAttachmentMapOutput) ToReadonlyAttachmentMapOutputWithContext(ctx context.Context) ReadonlyAttachmentMapOutput {
	return o
}

func (o ReadonlyAttachmentMapOutput) MapIndex(k pulumi.StringInput) ReadonlyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReadonlyAttachment {
		return vs[0].(map[string]*ReadonlyAttachment)[vs[1].(string)]
	}).(ReadonlyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyAttachmentInput)(nil)).Elem(), &ReadonlyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyAttachmentArrayInput)(nil)).Elem(), ReadonlyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyAttachmentMapInput)(nil)).Elem(), ReadonlyAttachmentMap{})
	pulumi.RegisterOutputType(ReadonlyAttachmentOutput{})
	pulumi.RegisterOutputType(ReadonlyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ReadonlyAttachmentMapOutput{})
}
