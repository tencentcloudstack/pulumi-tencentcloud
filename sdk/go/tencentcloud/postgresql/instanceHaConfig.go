// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to set postgresql instance syncMode
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Postgresql.NewInstanceHaConfig(ctx, "example", &Postgresql.InstanceHaConfigArgs{
//				InstanceId:            pulumi.String("postgres-gzg9jb2n"),
//				MaxStandbyLag:         pulumi.Int(10),
//				MaxStandbyLatency:     pulumi.Int(10737418240),
//				MaxSyncStandbyLag:     pulumi.Int(5),
//				MaxSyncStandbyLatency: pulumi.Int(52428800),
//				SyncMode:              pulumi.String("Semi-sync"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Postgresql.NewInstanceHaConfig(ctx, "example", &Postgresql.InstanceHaConfigArgs{
//				InstanceId:        pulumi.String("postgres-gzg9jb2n"),
//				MaxStandbyLag:     pulumi.Int(10),
//				MaxStandbyLatency: pulumi.Int(10737418240),
//				SyncMode:          pulumi.String("Async"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InstanceHaConfig struct {
	pulumi.CustomResourceState

	// instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Maximum latency of highly available backup machines. When the delay time of the backup node is less than or equal to this value, and the amount of delay data of the backup node is less than or equal to MaxStandbyLatency, the primary node can be switched. Unit: s; Parameter range: [5, 10].
	MaxStandbyLag pulumi.IntOutput `pulumi:"maxStandbyLag"`
	// Maximum latency data volume for highly available backup machines. When the delay data amount of the backup node is less than or equal to this value, and the delay time of the backup node is less than or equal to MaxStandbyLag, it can switch to the main node. Unit: byte; Parameter range: [1073741824, 322122547200].
	MaxStandbyLatency pulumi.IntOutput `pulumi:"maxStandbyLatency"`
	// Maximum delay time for synchronous backup. When the delay time of the standby machine is less than or equal to this value, and the amount of delay data of the standby machine is less than or equal to MaxSyncStandbyLatency, then the standby machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
	MaxSyncStandbyLag pulumi.IntPtrOutput `pulumi:"maxSyncStandbyLag"`
	// Maximum latency data for synchronous backup. When the amount of data delayed by the backup machine is less than or equal to this value, and the delay time of the backup machine is less than or equal to MaxSyncStandbyLag, then the backup machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
	MaxSyncStandbyLatency pulumi.IntPtrOutput `pulumi:"maxSyncStandbyLatency"`
	// Master slave synchronization method, Semi-sync: Semi synchronous; Async: Asynchronous. Main instance default value: Semi-sync, Read-only instance default value: Async.
	SyncMode pulumi.StringOutput `pulumi:"syncMode"`
}

// NewInstanceHaConfig registers a new resource with the given unique name, arguments, and options.
func NewInstanceHaConfig(ctx *pulumi.Context,
	name string, args *InstanceHaConfigArgs, opts ...pulumi.ResourceOption) (*InstanceHaConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MaxStandbyLag == nil {
		return nil, errors.New("invalid value for required argument 'MaxStandbyLag'")
	}
	if args.MaxStandbyLatency == nil {
		return nil, errors.New("invalid value for required argument 'MaxStandbyLatency'")
	}
	if args.SyncMode == nil {
		return nil, errors.New("invalid value for required argument 'SyncMode'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InstanceHaConfig
	err := ctx.RegisterResource("tencentcloud:Postgresql/instanceHaConfig:InstanceHaConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceHaConfig gets an existing InstanceHaConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceHaConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceHaConfigState, opts ...pulumi.ResourceOption) (*InstanceHaConfig, error) {
	var resource InstanceHaConfig
	err := ctx.ReadResource("tencentcloud:Postgresql/instanceHaConfig:InstanceHaConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceHaConfig resources.
type instanceHaConfigState struct {
	// instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Maximum latency of highly available backup machines. When the delay time of the backup node is less than or equal to this value, and the amount of delay data of the backup node is less than or equal to MaxStandbyLatency, the primary node can be switched. Unit: s; Parameter range: [5, 10].
	MaxStandbyLag *int `pulumi:"maxStandbyLag"`
	// Maximum latency data volume for highly available backup machines. When the delay data amount of the backup node is less than or equal to this value, and the delay time of the backup node is less than or equal to MaxStandbyLag, it can switch to the main node. Unit: byte; Parameter range: [1073741824, 322122547200].
	MaxStandbyLatency *int `pulumi:"maxStandbyLatency"`
	// Maximum delay time for synchronous backup. When the delay time of the standby machine is less than or equal to this value, and the amount of delay data of the standby machine is less than or equal to MaxSyncStandbyLatency, then the standby machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
	MaxSyncStandbyLag *int `pulumi:"maxSyncStandbyLag"`
	// Maximum latency data for synchronous backup. When the amount of data delayed by the backup machine is less than or equal to this value, and the delay time of the backup machine is less than or equal to MaxSyncStandbyLag, then the backup machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
	MaxSyncStandbyLatency *int `pulumi:"maxSyncStandbyLatency"`
	// Master slave synchronization method, Semi-sync: Semi synchronous; Async: Asynchronous. Main instance default value: Semi-sync, Read-only instance default value: Async.
	SyncMode *string `pulumi:"syncMode"`
}

type InstanceHaConfigState struct {
	// instance id.
	InstanceId pulumi.StringPtrInput
	// Maximum latency of highly available backup machines. When the delay time of the backup node is less than or equal to this value, and the amount of delay data of the backup node is less than or equal to MaxStandbyLatency, the primary node can be switched. Unit: s; Parameter range: [5, 10].
	MaxStandbyLag pulumi.IntPtrInput
	// Maximum latency data volume for highly available backup machines. When the delay data amount of the backup node is less than or equal to this value, and the delay time of the backup node is less than or equal to MaxStandbyLag, it can switch to the main node. Unit: byte; Parameter range: [1073741824, 322122547200].
	MaxStandbyLatency pulumi.IntPtrInput
	// Maximum delay time for synchronous backup. When the delay time of the standby machine is less than or equal to this value, and the amount of delay data of the standby machine is less than or equal to MaxSyncStandbyLatency, then the standby machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
	MaxSyncStandbyLag pulumi.IntPtrInput
	// Maximum latency data for synchronous backup. When the amount of data delayed by the backup machine is less than or equal to this value, and the delay time of the backup machine is less than or equal to MaxSyncStandbyLag, then the backup machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
	MaxSyncStandbyLatency pulumi.IntPtrInput
	// Master slave synchronization method, Semi-sync: Semi synchronous; Async: Asynchronous. Main instance default value: Semi-sync, Read-only instance default value: Async.
	SyncMode pulumi.StringPtrInput
}

func (InstanceHaConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceHaConfigState)(nil)).Elem()
}

type instanceHaConfigArgs struct {
	// instance id.
	InstanceId string `pulumi:"instanceId"`
	// Maximum latency of highly available backup machines. When the delay time of the backup node is less than or equal to this value, and the amount of delay data of the backup node is less than or equal to MaxStandbyLatency, the primary node can be switched. Unit: s; Parameter range: [5, 10].
	MaxStandbyLag int `pulumi:"maxStandbyLag"`
	// Maximum latency data volume for highly available backup machines. When the delay data amount of the backup node is less than or equal to this value, and the delay time of the backup node is less than or equal to MaxStandbyLag, it can switch to the main node. Unit: byte; Parameter range: [1073741824, 322122547200].
	MaxStandbyLatency int `pulumi:"maxStandbyLatency"`
	// Maximum delay time for synchronous backup. When the delay time of the standby machine is less than or equal to this value, and the amount of delay data of the standby machine is less than or equal to MaxSyncStandbyLatency, then the standby machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
	MaxSyncStandbyLag *int `pulumi:"maxSyncStandbyLag"`
	// Maximum latency data for synchronous backup. When the amount of data delayed by the backup machine is less than or equal to this value, and the delay time of the backup machine is less than or equal to MaxSyncStandbyLag, then the backup machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
	MaxSyncStandbyLatency *int `pulumi:"maxSyncStandbyLatency"`
	// Master slave synchronization method, Semi-sync: Semi synchronous; Async: Asynchronous. Main instance default value: Semi-sync, Read-only instance default value: Async.
	SyncMode string `pulumi:"syncMode"`
}

// The set of arguments for constructing a InstanceHaConfig resource.
type InstanceHaConfigArgs struct {
	// instance id.
	InstanceId pulumi.StringInput
	// Maximum latency of highly available backup machines. When the delay time of the backup node is less than or equal to this value, and the amount of delay data of the backup node is less than or equal to MaxStandbyLatency, the primary node can be switched. Unit: s; Parameter range: [5, 10].
	MaxStandbyLag pulumi.IntInput
	// Maximum latency data volume for highly available backup machines. When the delay data amount of the backup node is less than or equal to this value, and the delay time of the backup node is less than or equal to MaxStandbyLag, it can switch to the main node. Unit: byte; Parameter range: [1073741824, 322122547200].
	MaxStandbyLatency pulumi.IntInput
	// Maximum delay time for synchronous backup. When the delay time of the standby machine is less than or equal to this value, and the amount of delay data of the standby machine is less than or equal to MaxSyncStandbyLatency, then the standby machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
	MaxSyncStandbyLag pulumi.IntPtrInput
	// Maximum latency data for synchronous backup. When the amount of data delayed by the backup machine is less than or equal to this value, and the delay time of the backup machine is less than or equal to MaxSyncStandbyLag, then the backup machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
	MaxSyncStandbyLatency pulumi.IntPtrInput
	// Master slave synchronization method, Semi-sync: Semi synchronous; Async: Asynchronous. Main instance default value: Semi-sync, Read-only instance default value: Async.
	SyncMode pulumi.StringInput
}

func (InstanceHaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceHaConfigArgs)(nil)).Elem()
}

type InstanceHaConfigInput interface {
	pulumi.Input

	ToInstanceHaConfigOutput() InstanceHaConfigOutput
	ToInstanceHaConfigOutputWithContext(ctx context.Context) InstanceHaConfigOutput
}

func (*InstanceHaConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceHaConfig)(nil)).Elem()
}

func (i *InstanceHaConfig) ToInstanceHaConfigOutput() InstanceHaConfigOutput {
	return i.ToInstanceHaConfigOutputWithContext(context.Background())
}

func (i *InstanceHaConfig) ToInstanceHaConfigOutputWithContext(ctx context.Context) InstanceHaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceHaConfigOutput)
}

// InstanceHaConfigArrayInput is an input type that accepts InstanceHaConfigArray and InstanceHaConfigArrayOutput values.
// You can construct a concrete instance of `InstanceHaConfigArrayInput` via:
//
//	InstanceHaConfigArray{ InstanceHaConfigArgs{...} }
type InstanceHaConfigArrayInput interface {
	pulumi.Input

	ToInstanceHaConfigArrayOutput() InstanceHaConfigArrayOutput
	ToInstanceHaConfigArrayOutputWithContext(context.Context) InstanceHaConfigArrayOutput
}

type InstanceHaConfigArray []InstanceHaConfigInput

func (InstanceHaConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceHaConfig)(nil)).Elem()
}

func (i InstanceHaConfigArray) ToInstanceHaConfigArrayOutput() InstanceHaConfigArrayOutput {
	return i.ToInstanceHaConfigArrayOutputWithContext(context.Background())
}

func (i InstanceHaConfigArray) ToInstanceHaConfigArrayOutputWithContext(ctx context.Context) InstanceHaConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceHaConfigArrayOutput)
}

// InstanceHaConfigMapInput is an input type that accepts InstanceHaConfigMap and InstanceHaConfigMapOutput values.
// You can construct a concrete instance of `InstanceHaConfigMapInput` via:
//
//	InstanceHaConfigMap{ "key": InstanceHaConfigArgs{...} }
type InstanceHaConfigMapInput interface {
	pulumi.Input

	ToInstanceHaConfigMapOutput() InstanceHaConfigMapOutput
	ToInstanceHaConfigMapOutputWithContext(context.Context) InstanceHaConfigMapOutput
}

type InstanceHaConfigMap map[string]InstanceHaConfigInput

func (InstanceHaConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceHaConfig)(nil)).Elem()
}

func (i InstanceHaConfigMap) ToInstanceHaConfigMapOutput() InstanceHaConfigMapOutput {
	return i.ToInstanceHaConfigMapOutputWithContext(context.Background())
}

func (i InstanceHaConfigMap) ToInstanceHaConfigMapOutputWithContext(ctx context.Context) InstanceHaConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceHaConfigMapOutput)
}

type InstanceHaConfigOutput struct{ *pulumi.OutputState }

func (InstanceHaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceHaConfig)(nil)).Elem()
}

func (o InstanceHaConfigOutput) ToInstanceHaConfigOutput() InstanceHaConfigOutput {
	return o
}

func (o InstanceHaConfigOutput) ToInstanceHaConfigOutputWithContext(ctx context.Context) InstanceHaConfigOutput {
	return o
}

// instance id.
func (o InstanceHaConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceHaConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Maximum latency of highly available backup machines. When the delay time of the backup node is less than or equal to this value, and the amount of delay data of the backup node is less than or equal to MaxStandbyLatency, the primary node can be switched. Unit: s; Parameter range: [5, 10].
func (o InstanceHaConfigOutput) MaxStandbyLag() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceHaConfig) pulumi.IntOutput { return v.MaxStandbyLag }).(pulumi.IntOutput)
}

// Maximum latency data volume for highly available backup machines. When the delay data amount of the backup node is less than or equal to this value, and the delay time of the backup node is less than or equal to MaxStandbyLag, it can switch to the main node. Unit: byte; Parameter range: [1073741824, 322122547200].
func (o InstanceHaConfigOutput) MaxStandbyLatency() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceHaConfig) pulumi.IntOutput { return v.MaxStandbyLatency }).(pulumi.IntOutput)
}

// Maximum delay time for synchronous backup. When the delay time of the standby machine is less than or equal to this value, and the amount of delay data of the standby machine is less than or equal to MaxSyncStandbyLatency, then the standby machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
func (o InstanceHaConfigOutput) MaxSyncStandbyLag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceHaConfig) pulumi.IntPtrOutput { return v.MaxSyncStandbyLag }).(pulumi.IntPtrOutput)
}

// Maximum latency data for synchronous backup. When the amount of data delayed by the backup machine is less than or equal to this value, and the delay time of the backup machine is less than or equal to MaxSyncStandbyLag, then the backup machine adopts synchronous replication; Otherwise, adopt asynchronous replication. This parameter value is valid for instances where SyncMode is set to Semi sync. When a semi synchronous instance prohibits degradation to asynchronous replication, MaxSyncStandbyLatency and MaxSyncStandbyLag are not set. When semi synchronous instances allow degenerate asynchronous replication, PostgreSQL version 9 instances must have MaxSyncStandbyLatency set and MaxSyncStandbyLag not set, while PostgreSQL version 10 and above instances must have MaxSyncStandbyLatency and MaxSyncStandbyLag set.
func (o InstanceHaConfigOutput) MaxSyncStandbyLatency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceHaConfig) pulumi.IntPtrOutput { return v.MaxSyncStandbyLatency }).(pulumi.IntPtrOutput)
}

// Master slave synchronization method, Semi-sync: Semi synchronous; Async: Asynchronous. Main instance default value: Semi-sync, Read-only instance default value: Async.
func (o InstanceHaConfigOutput) SyncMode() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceHaConfig) pulumi.StringOutput { return v.SyncMode }).(pulumi.StringOutput)
}

type InstanceHaConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceHaConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceHaConfig)(nil)).Elem()
}

func (o InstanceHaConfigArrayOutput) ToInstanceHaConfigArrayOutput() InstanceHaConfigArrayOutput {
	return o
}

func (o InstanceHaConfigArrayOutput) ToInstanceHaConfigArrayOutputWithContext(ctx context.Context) InstanceHaConfigArrayOutput {
	return o
}

func (o InstanceHaConfigArrayOutput) Index(i pulumi.IntInput) InstanceHaConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceHaConfig {
		return vs[0].([]*InstanceHaConfig)[vs[1].(int)]
	}).(InstanceHaConfigOutput)
}

type InstanceHaConfigMapOutput struct{ *pulumi.OutputState }

func (InstanceHaConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceHaConfig)(nil)).Elem()
}

func (o InstanceHaConfigMapOutput) ToInstanceHaConfigMapOutput() InstanceHaConfigMapOutput {
	return o
}

func (o InstanceHaConfigMapOutput) ToInstanceHaConfigMapOutputWithContext(ctx context.Context) InstanceHaConfigMapOutput {
	return o
}

func (o InstanceHaConfigMapOutput) MapIndex(k pulumi.StringInput) InstanceHaConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceHaConfig {
		return vs[0].(map[string]*InstanceHaConfig)[vs[1].(string)]
	}).(InstanceHaConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceHaConfigInput)(nil)).Elem(), &InstanceHaConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceHaConfigArrayInput)(nil)).Elem(), InstanceHaConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceHaConfigMapInput)(nil)).Elem(), InstanceHaConfigMap{})
	pulumi.RegisterOutputType(InstanceHaConfigOutput{})
	pulumi.RegisterOutputType(InstanceHaConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceHaConfigMapOutput{})
}
