// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a postgresql rebalanceReadonlyGroupOperation
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			groupRebalance, err := Postgresql.NewReadonlyGroup(ctx, "groupRebalance", &Postgresql.ReadonlyGroupArgs{
//				MasterDbInstanceId:       pulumi.Any(local.Pgsql_id),
//				ProjectId:                pulumi.Int(0),
//				VpcId:                    pulumi.String("vpc-86v957zb"),
//				SubnetId:                 pulumi.String("subnet-enm92y0m"),
//				ReplayLagEliminate:       pulumi.Int(1),
//				ReplayLatencyEliminate:   pulumi.Int(1),
//				MaxReplayLag:             pulumi.Int(100),
//				MaxReplayLatency:         pulumi.Int(512),
//				MinDelayEliminateReserve: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Postgresql.NewRebalanceReadonlyGroupOperation(ctx, "rebalanceReadonlyGroupOperation", &Postgresql.RebalanceReadonlyGroupOperationArgs{
//				ReadOnlyGroupId: groupRebalance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RebalanceReadonlyGroupOperation struct {
	pulumi.CustomResourceState

	// readonly Group ID.
	ReadOnlyGroupId pulumi.StringOutput `pulumi:"readOnlyGroupId"`
}

// NewRebalanceReadonlyGroupOperation registers a new resource with the given unique name, arguments, and options.
func NewRebalanceReadonlyGroupOperation(ctx *pulumi.Context,
	name string, args *RebalanceReadonlyGroupOperationArgs, opts ...pulumi.ResourceOption) (*RebalanceReadonlyGroupOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReadOnlyGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ReadOnlyGroupId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RebalanceReadonlyGroupOperation
	err := ctx.RegisterResource("tencentcloud:Postgresql/rebalanceReadonlyGroupOperation:RebalanceReadonlyGroupOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRebalanceReadonlyGroupOperation gets an existing RebalanceReadonlyGroupOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRebalanceReadonlyGroupOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RebalanceReadonlyGroupOperationState, opts ...pulumi.ResourceOption) (*RebalanceReadonlyGroupOperation, error) {
	var resource RebalanceReadonlyGroupOperation
	err := ctx.ReadResource("tencentcloud:Postgresql/rebalanceReadonlyGroupOperation:RebalanceReadonlyGroupOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RebalanceReadonlyGroupOperation resources.
type rebalanceReadonlyGroupOperationState struct {
	// readonly Group ID.
	ReadOnlyGroupId *string `pulumi:"readOnlyGroupId"`
}

type RebalanceReadonlyGroupOperationState struct {
	// readonly Group ID.
	ReadOnlyGroupId pulumi.StringPtrInput
}

func (RebalanceReadonlyGroupOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*rebalanceReadonlyGroupOperationState)(nil)).Elem()
}

type rebalanceReadonlyGroupOperationArgs struct {
	// readonly Group ID.
	ReadOnlyGroupId string `pulumi:"readOnlyGroupId"`
}

// The set of arguments for constructing a RebalanceReadonlyGroupOperation resource.
type RebalanceReadonlyGroupOperationArgs struct {
	// readonly Group ID.
	ReadOnlyGroupId pulumi.StringInput
}

func (RebalanceReadonlyGroupOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rebalanceReadonlyGroupOperationArgs)(nil)).Elem()
}

type RebalanceReadonlyGroupOperationInput interface {
	pulumi.Input

	ToRebalanceReadonlyGroupOperationOutput() RebalanceReadonlyGroupOperationOutput
	ToRebalanceReadonlyGroupOperationOutputWithContext(ctx context.Context) RebalanceReadonlyGroupOperationOutput
}

func (*RebalanceReadonlyGroupOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**RebalanceReadonlyGroupOperation)(nil)).Elem()
}

func (i *RebalanceReadonlyGroupOperation) ToRebalanceReadonlyGroupOperationOutput() RebalanceReadonlyGroupOperationOutput {
	return i.ToRebalanceReadonlyGroupOperationOutputWithContext(context.Background())
}

func (i *RebalanceReadonlyGroupOperation) ToRebalanceReadonlyGroupOperationOutputWithContext(ctx context.Context) RebalanceReadonlyGroupOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RebalanceReadonlyGroupOperationOutput)
}

// RebalanceReadonlyGroupOperationArrayInput is an input type that accepts RebalanceReadonlyGroupOperationArray and RebalanceReadonlyGroupOperationArrayOutput values.
// You can construct a concrete instance of `RebalanceReadonlyGroupOperationArrayInput` via:
//
//	RebalanceReadonlyGroupOperationArray{ RebalanceReadonlyGroupOperationArgs{...} }
type RebalanceReadonlyGroupOperationArrayInput interface {
	pulumi.Input

	ToRebalanceReadonlyGroupOperationArrayOutput() RebalanceReadonlyGroupOperationArrayOutput
	ToRebalanceReadonlyGroupOperationArrayOutputWithContext(context.Context) RebalanceReadonlyGroupOperationArrayOutput
}

type RebalanceReadonlyGroupOperationArray []RebalanceReadonlyGroupOperationInput

func (RebalanceReadonlyGroupOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RebalanceReadonlyGroupOperation)(nil)).Elem()
}

func (i RebalanceReadonlyGroupOperationArray) ToRebalanceReadonlyGroupOperationArrayOutput() RebalanceReadonlyGroupOperationArrayOutput {
	return i.ToRebalanceReadonlyGroupOperationArrayOutputWithContext(context.Background())
}

func (i RebalanceReadonlyGroupOperationArray) ToRebalanceReadonlyGroupOperationArrayOutputWithContext(ctx context.Context) RebalanceReadonlyGroupOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RebalanceReadonlyGroupOperationArrayOutput)
}

// RebalanceReadonlyGroupOperationMapInput is an input type that accepts RebalanceReadonlyGroupOperationMap and RebalanceReadonlyGroupOperationMapOutput values.
// You can construct a concrete instance of `RebalanceReadonlyGroupOperationMapInput` via:
//
//	RebalanceReadonlyGroupOperationMap{ "key": RebalanceReadonlyGroupOperationArgs{...} }
type RebalanceReadonlyGroupOperationMapInput interface {
	pulumi.Input

	ToRebalanceReadonlyGroupOperationMapOutput() RebalanceReadonlyGroupOperationMapOutput
	ToRebalanceReadonlyGroupOperationMapOutputWithContext(context.Context) RebalanceReadonlyGroupOperationMapOutput
}

type RebalanceReadonlyGroupOperationMap map[string]RebalanceReadonlyGroupOperationInput

func (RebalanceReadonlyGroupOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RebalanceReadonlyGroupOperation)(nil)).Elem()
}

func (i RebalanceReadonlyGroupOperationMap) ToRebalanceReadonlyGroupOperationMapOutput() RebalanceReadonlyGroupOperationMapOutput {
	return i.ToRebalanceReadonlyGroupOperationMapOutputWithContext(context.Background())
}

func (i RebalanceReadonlyGroupOperationMap) ToRebalanceReadonlyGroupOperationMapOutputWithContext(ctx context.Context) RebalanceReadonlyGroupOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RebalanceReadonlyGroupOperationMapOutput)
}

type RebalanceReadonlyGroupOperationOutput struct{ *pulumi.OutputState }

func (RebalanceReadonlyGroupOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RebalanceReadonlyGroupOperation)(nil)).Elem()
}

func (o RebalanceReadonlyGroupOperationOutput) ToRebalanceReadonlyGroupOperationOutput() RebalanceReadonlyGroupOperationOutput {
	return o
}

func (o RebalanceReadonlyGroupOperationOutput) ToRebalanceReadonlyGroupOperationOutputWithContext(ctx context.Context) RebalanceReadonlyGroupOperationOutput {
	return o
}

// readonly Group ID.
func (o RebalanceReadonlyGroupOperationOutput) ReadOnlyGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *RebalanceReadonlyGroupOperation) pulumi.StringOutput { return v.ReadOnlyGroupId }).(pulumi.StringOutput)
}

type RebalanceReadonlyGroupOperationArrayOutput struct{ *pulumi.OutputState }

func (RebalanceReadonlyGroupOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RebalanceReadonlyGroupOperation)(nil)).Elem()
}

func (o RebalanceReadonlyGroupOperationArrayOutput) ToRebalanceReadonlyGroupOperationArrayOutput() RebalanceReadonlyGroupOperationArrayOutput {
	return o
}

func (o RebalanceReadonlyGroupOperationArrayOutput) ToRebalanceReadonlyGroupOperationArrayOutputWithContext(ctx context.Context) RebalanceReadonlyGroupOperationArrayOutput {
	return o
}

func (o RebalanceReadonlyGroupOperationArrayOutput) Index(i pulumi.IntInput) RebalanceReadonlyGroupOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RebalanceReadonlyGroupOperation {
		return vs[0].([]*RebalanceReadonlyGroupOperation)[vs[1].(int)]
	}).(RebalanceReadonlyGroupOperationOutput)
}

type RebalanceReadonlyGroupOperationMapOutput struct{ *pulumi.OutputState }

func (RebalanceReadonlyGroupOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RebalanceReadonlyGroupOperation)(nil)).Elem()
}

func (o RebalanceReadonlyGroupOperationMapOutput) ToRebalanceReadonlyGroupOperationMapOutput() RebalanceReadonlyGroupOperationMapOutput {
	return o
}

func (o RebalanceReadonlyGroupOperationMapOutput) ToRebalanceReadonlyGroupOperationMapOutputWithContext(ctx context.Context) RebalanceReadonlyGroupOperationMapOutput {
	return o
}

func (o RebalanceReadonlyGroupOperationMapOutput) MapIndex(k pulumi.StringInput) RebalanceReadonlyGroupOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RebalanceReadonlyGroupOperation {
		return vs[0].(map[string]*RebalanceReadonlyGroupOperation)[vs[1].(string)]
	}).(RebalanceReadonlyGroupOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RebalanceReadonlyGroupOperationInput)(nil)).Elem(), &RebalanceReadonlyGroupOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RebalanceReadonlyGroupOperationArrayInput)(nil)).Elem(), RebalanceReadonlyGroupOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RebalanceReadonlyGroupOperationMapInput)(nil)).Elem(), RebalanceReadonlyGroupOperationMap{})
	pulumi.RegisterOutputType(RebalanceReadonlyGroupOperationOutput{})
	pulumi.RegisterOutputType(RebalanceReadonlyGroupOperationArrayOutput{})
	pulumi.RegisterOutputType(RebalanceReadonlyGroupOperationMapOutput{})
}
