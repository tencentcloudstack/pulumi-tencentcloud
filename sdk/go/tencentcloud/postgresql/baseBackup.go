// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a postgresql baseBackup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Postgresql.NewBaseBackup(ctx, "baseBackup", &Postgresql.BaseBackupArgs{
//				DbInstanceId: pulumi.Any(local.Pgsql_id),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type BaseBackup struct {
	pulumi.CustomResourceState

	// Base backup ID.
	BaseBackupId pulumi.StringOutput `pulumi:"baseBackupId"`
	// Instance ID.
	DbInstanceId pulumi.StringOutput `pulumi:"dbInstanceId"`
	// New expiration time.
	NewExpireTime pulumi.StringOutput `pulumi:"newExpireTime"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewBaseBackup registers a new resource with the given unique name, arguments, and options.
func NewBaseBackup(ctx *pulumi.Context,
	name string, args *BaseBackupArgs, opts ...pulumi.ResourceOption) (*BaseBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'DbInstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BaseBackup
	err := ctx.RegisterResource("tencentcloud:Postgresql/baseBackup:BaseBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBaseBackup gets an existing BaseBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBaseBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BaseBackupState, opts ...pulumi.ResourceOption) (*BaseBackup, error) {
	var resource BaseBackup
	err := ctx.ReadResource("tencentcloud:Postgresql/baseBackup:BaseBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BaseBackup resources.
type baseBackupState struct {
	// Base backup ID.
	BaseBackupId *string `pulumi:"baseBackupId"`
	// Instance ID.
	DbInstanceId *string `pulumi:"dbInstanceId"`
	// New expiration time.
	NewExpireTime *string `pulumi:"newExpireTime"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
}

type BaseBackupState struct {
	// Base backup ID.
	BaseBackupId pulumi.StringPtrInput
	// Instance ID.
	DbInstanceId pulumi.StringPtrInput
	// New expiration time.
	NewExpireTime pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
}

func (BaseBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*baseBackupState)(nil)).Elem()
}

type baseBackupArgs struct {
	// Instance ID.
	DbInstanceId string `pulumi:"dbInstanceId"`
	// New expiration time.
	NewExpireTime *string `pulumi:"newExpireTime"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a BaseBackup resource.
type BaseBackupArgs struct {
	// Instance ID.
	DbInstanceId pulumi.StringInput
	// New expiration time.
	NewExpireTime pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
}

func (BaseBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*baseBackupArgs)(nil)).Elem()
}

type BaseBackupInput interface {
	pulumi.Input

	ToBaseBackupOutput() BaseBackupOutput
	ToBaseBackupOutputWithContext(ctx context.Context) BaseBackupOutput
}

func (*BaseBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseBackup)(nil)).Elem()
}

func (i *BaseBackup) ToBaseBackupOutput() BaseBackupOutput {
	return i.ToBaseBackupOutputWithContext(context.Background())
}

func (i *BaseBackup) ToBaseBackupOutputWithContext(ctx context.Context) BaseBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseBackupOutput)
}

// BaseBackupArrayInput is an input type that accepts BaseBackupArray and BaseBackupArrayOutput values.
// You can construct a concrete instance of `BaseBackupArrayInput` via:
//
//	BaseBackupArray{ BaseBackupArgs{...} }
type BaseBackupArrayInput interface {
	pulumi.Input

	ToBaseBackupArrayOutput() BaseBackupArrayOutput
	ToBaseBackupArrayOutputWithContext(context.Context) BaseBackupArrayOutput
}

type BaseBackupArray []BaseBackupInput

func (BaseBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BaseBackup)(nil)).Elem()
}

func (i BaseBackupArray) ToBaseBackupArrayOutput() BaseBackupArrayOutput {
	return i.ToBaseBackupArrayOutputWithContext(context.Background())
}

func (i BaseBackupArray) ToBaseBackupArrayOutputWithContext(ctx context.Context) BaseBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseBackupArrayOutput)
}

// BaseBackupMapInput is an input type that accepts BaseBackupMap and BaseBackupMapOutput values.
// You can construct a concrete instance of `BaseBackupMapInput` via:
//
//	BaseBackupMap{ "key": BaseBackupArgs{...} }
type BaseBackupMapInput interface {
	pulumi.Input

	ToBaseBackupMapOutput() BaseBackupMapOutput
	ToBaseBackupMapOutputWithContext(context.Context) BaseBackupMapOutput
}

type BaseBackupMap map[string]BaseBackupInput

func (BaseBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BaseBackup)(nil)).Elem()
}

func (i BaseBackupMap) ToBaseBackupMapOutput() BaseBackupMapOutput {
	return i.ToBaseBackupMapOutputWithContext(context.Background())
}

func (i BaseBackupMap) ToBaseBackupMapOutputWithContext(ctx context.Context) BaseBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseBackupMapOutput)
}

type BaseBackupOutput struct{ *pulumi.OutputState }

func (BaseBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseBackup)(nil)).Elem()
}

func (o BaseBackupOutput) ToBaseBackupOutput() BaseBackupOutput {
	return o
}

func (o BaseBackupOutput) ToBaseBackupOutputWithContext(ctx context.Context) BaseBackupOutput {
	return o
}

// Base backup ID.
func (o BaseBackupOutput) BaseBackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *BaseBackup) pulumi.StringOutput { return v.BaseBackupId }).(pulumi.StringOutput)
}

// Instance ID.
func (o BaseBackupOutput) DbInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BaseBackup) pulumi.StringOutput { return v.DbInstanceId }).(pulumi.StringOutput)
}

// New expiration time.
func (o BaseBackupOutput) NewExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BaseBackup) pulumi.StringOutput { return v.NewExpireTime }).(pulumi.StringOutput)
}

// Tag description list.
func (o BaseBackupOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *BaseBackup) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type BaseBackupArrayOutput struct{ *pulumi.OutputState }

func (BaseBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BaseBackup)(nil)).Elem()
}

func (o BaseBackupArrayOutput) ToBaseBackupArrayOutput() BaseBackupArrayOutput {
	return o
}

func (o BaseBackupArrayOutput) ToBaseBackupArrayOutputWithContext(ctx context.Context) BaseBackupArrayOutput {
	return o
}

func (o BaseBackupArrayOutput) Index(i pulumi.IntInput) BaseBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BaseBackup {
		return vs[0].([]*BaseBackup)[vs[1].(int)]
	}).(BaseBackupOutput)
}

type BaseBackupMapOutput struct{ *pulumi.OutputState }

func (BaseBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BaseBackup)(nil)).Elem()
}

func (o BaseBackupMapOutput) ToBaseBackupMapOutput() BaseBackupMapOutput {
	return o
}

func (o BaseBackupMapOutput) ToBaseBackupMapOutputWithContext(ctx context.Context) BaseBackupMapOutput {
	return o
}

func (o BaseBackupMapOutput) MapIndex(k pulumi.StringInput) BaseBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BaseBackup {
		return vs[0].(map[string]*BaseBackup)[vs[1].(string)]
	}).(BaseBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BaseBackupInput)(nil)).Elem(), &BaseBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaseBackupArrayInput)(nil)).Elem(), BaseBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaseBackupMapInput)(nil)).Elem(), BaseBackupMap{})
	pulumi.RegisterOutputType(BaseBackupOutput{})
	pulumi.RegisterOutputType(BaseBackupArrayOutput{})
	pulumi.RegisterOutputType(BaseBackupMapOutput{})
}
