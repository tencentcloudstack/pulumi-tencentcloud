// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgresql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Use this data source to query detailed information of Postgresql dedicated clusters
//
// ## Example Usage
//
// ### Query all instances
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Postgresql.GetDedicatedClusters(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Query instances by filters
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Postgresql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Postgresql.GetDedicatedClusters(ctx, &postgresql.GetDedicatedClustersArgs{
//				Filters: []postgresql.GetDedicatedClustersFilter{
//					{
//						Name: pulumi.StringRef("dedicated-cluster-id"),
//						Values: []string{
//							"cluster-262n63e8",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetDedicatedClusters(ctx *pulumi.Context, args *GetDedicatedClustersArgs, opts ...pulumi.InvokeOption) (*GetDedicatedClustersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDedicatedClustersResult
	err := ctx.Invoke("tencentcloud:Postgresql/getDedicatedClusters:getDedicatedClusters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDedicatedClusters.
type GetDedicatedClustersArgs struct {
	// Querying based on one or more filtering criteria, the currently supported filtering criteria are: dedicated-cluster-id: filtering by dedicated cluster ID.
	Filters []GetDedicatedClustersFilter `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getDedicatedClusters.
type GetDedicatedClustersResult struct {
	// Dedicated cluster set info.
	DedicatedClusterSets []GetDedicatedClustersDedicatedClusterSet `pulumi:"dedicatedClusterSets"`
	Filters              []GetDedicatedClustersFilter              `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func GetDedicatedClustersOutput(ctx *pulumi.Context, args GetDedicatedClustersOutputArgs, opts ...pulumi.InvokeOption) GetDedicatedClustersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDedicatedClustersResult, error) {
			args := v.(GetDedicatedClustersArgs)
			r, err := GetDedicatedClusters(ctx, &args, opts...)
			var s GetDedicatedClustersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDedicatedClustersResultOutput)
}

// A collection of arguments for invoking getDedicatedClusters.
type GetDedicatedClustersOutputArgs struct {
	// Querying based on one or more filtering criteria, the currently supported filtering criteria are: dedicated-cluster-id: filtering by dedicated cluster ID.
	Filters GetDedicatedClustersFilterArrayInput `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetDedicatedClustersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDedicatedClustersArgs)(nil)).Elem()
}

// A collection of values returned by getDedicatedClusters.
type GetDedicatedClustersResultOutput struct{ *pulumi.OutputState }

func (GetDedicatedClustersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDedicatedClustersResult)(nil)).Elem()
}

func (o GetDedicatedClustersResultOutput) ToGetDedicatedClustersResultOutput() GetDedicatedClustersResultOutput {
	return o
}

func (o GetDedicatedClustersResultOutput) ToGetDedicatedClustersResultOutputWithContext(ctx context.Context) GetDedicatedClustersResultOutput {
	return o
}

// Dedicated cluster set info.
func (o GetDedicatedClustersResultOutput) DedicatedClusterSets() GetDedicatedClustersDedicatedClusterSetArrayOutput {
	return o.ApplyT(func(v GetDedicatedClustersResult) []GetDedicatedClustersDedicatedClusterSet {
		return v.DedicatedClusterSets
	}).(GetDedicatedClustersDedicatedClusterSetArrayOutput)
}

func (o GetDedicatedClustersResultOutput) Filters() GetDedicatedClustersFilterArrayOutput {
	return o.ApplyT(func(v GetDedicatedClustersResult) []GetDedicatedClustersFilter { return v.Filters }).(GetDedicatedClustersFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDedicatedClustersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDedicatedClustersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDedicatedClustersResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDedicatedClustersResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDedicatedClustersResultOutput{})
}
