// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ses receiver
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ses"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ses"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ses.NewReceiver(ctx, "receiver", &Ses.ReceiverArgs{
//				Datas: ses.ReceiverDataArray{
//					&ses.ReceiverDataArgs{
//						Email: pulumi.String("abc@abc.com"),
//					},
//					&ses.ReceiverDataArgs{
//						Email: pulumi.String("abcd@abcd.com"),
//					},
//				},
//				Desc:          pulumi.String("description"),
//				ReceiversName: pulumi.String("terraform_test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ses"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ses"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ses.NewReceiver(ctx, "receiver", &Ses.ReceiverArgs{
//				Datas: ses.ReceiverDataArray{
//					&ses.ReceiverDataArgs{
//						Email:        pulumi.String("abc@abc.com"),
//						TemplateData: pulumi.String("{\"name\":\"xxx\",\"age\":\"xx\"}"),
//					},
//					&ses.ReceiverDataArgs{
//						Email:        pulumi.String("abcd@abcd.com"),
//						TemplateData: pulumi.String("{\"name\":\"xxx\",\"age\":\"xx\"}"),
//					},
//				},
//				Desc:          pulumi.String("description"),
//				ReceiversName: pulumi.String("terraform_test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ses email_address can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ses/receiver:Receiver receiver receiverId
//
// ```
type Receiver struct {
	pulumi.CustomResourceState

	// Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `templateData`, then other objects are also required.
	Datas ReceiverDataArrayOutput `pulumi:"datas"`
	// Recipient group description.
	Desc pulumi.StringPtrOutput `pulumi:"desc"`
	// Recipient group name.
	ReceiversName pulumi.StringOutput `pulumi:"receiversName"`
}

// NewReceiver registers a new resource with the given unique name, arguments, and options.
func NewReceiver(ctx *pulumi.Context,
	name string, args *ReceiverArgs, opts ...pulumi.ResourceOption) (*Receiver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Datas == nil {
		return nil, errors.New("invalid value for required argument 'Datas'")
	}
	if args.ReceiversName == nil {
		return nil, errors.New("invalid value for required argument 'ReceiversName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Receiver
	err := ctx.RegisterResource("tencentcloud:Ses/receiver:Receiver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReceiver gets an existing Receiver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReceiver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReceiverState, opts ...pulumi.ResourceOption) (*Receiver, error) {
	var resource Receiver
	err := ctx.ReadResource("tencentcloud:Ses/receiver:Receiver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Receiver resources.
type receiverState struct {
	// Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `templateData`, then other objects are also required.
	Datas []ReceiverData `pulumi:"datas"`
	// Recipient group description.
	Desc *string `pulumi:"desc"`
	// Recipient group name.
	ReceiversName *string `pulumi:"receiversName"`
}

type ReceiverState struct {
	// Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `templateData`, then other objects are also required.
	Datas ReceiverDataArrayInput
	// Recipient group description.
	Desc pulumi.StringPtrInput
	// Recipient group name.
	ReceiversName pulumi.StringPtrInput
}

func (ReceiverState) ElementType() reflect.Type {
	return reflect.TypeOf((*receiverState)(nil)).Elem()
}

type receiverArgs struct {
	// Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `templateData`, then other objects are also required.
	Datas []ReceiverData `pulumi:"datas"`
	// Recipient group description.
	Desc *string `pulumi:"desc"`
	// Recipient group name.
	ReceiversName string `pulumi:"receiversName"`
}

// The set of arguments for constructing a Receiver resource.
type ReceiverArgs struct {
	// Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `templateData`, then other objects are also required.
	Datas ReceiverDataArrayInput
	// Recipient group description.
	Desc pulumi.StringPtrInput
	// Recipient group name.
	ReceiversName pulumi.StringInput
}

func (ReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*receiverArgs)(nil)).Elem()
}

type ReceiverInput interface {
	pulumi.Input

	ToReceiverOutput() ReceiverOutput
	ToReceiverOutputWithContext(ctx context.Context) ReceiverOutput
}

func (*Receiver) ElementType() reflect.Type {
	return reflect.TypeOf((**Receiver)(nil)).Elem()
}

func (i *Receiver) ToReceiverOutput() ReceiverOutput {
	return i.ToReceiverOutputWithContext(context.Background())
}

func (i *Receiver) ToReceiverOutputWithContext(ctx context.Context) ReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverOutput)
}

// ReceiverArrayInput is an input type that accepts ReceiverArray and ReceiverArrayOutput values.
// You can construct a concrete instance of `ReceiverArrayInput` via:
//
//	ReceiverArray{ ReceiverArgs{...} }
type ReceiverArrayInput interface {
	pulumi.Input

	ToReceiverArrayOutput() ReceiverArrayOutput
	ToReceiverArrayOutputWithContext(context.Context) ReceiverArrayOutput
}

type ReceiverArray []ReceiverInput

func (ReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Receiver)(nil)).Elem()
}

func (i ReceiverArray) ToReceiverArrayOutput() ReceiverArrayOutput {
	return i.ToReceiverArrayOutputWithContext(context.Background())
}

func (i ReceiverArray) ToReceiverArrayOutputWithContext(ctx context.Context) ReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverArrayOutput)
}

// ReceiverMapInput is an input type that accepts ReceiverMap and ReceiverMapOutput values.
// You can construct a concrete instance of `ReceiverMapInput` via:
//
//	ReceiverMap{ "key": ReceiverArgs{...} }
type ReceiverMapInput interface {
	pulumi.Input

	ToReceiverMapOutput() ReceiverMapOutput
	ToReceiverMapOutputWithContext(context.Context) ReceiverMapOutput
}

type ReceiverMap map[string]ReceiverInput

func (ReceiverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Receiver)(nil)).Elem()
}

func (i ReceiverMap) ToReceiverMapOutput() ReceiverMapOutput {
	return i.ToReceiverMapOutputWithContext(context.Background())
}

func (i ReceiverMap) ToReceiverMapOutputWithContext(ctx context.Context) ReceiverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverMapOutput)
}

type ReceiverOutput struct{ *pulumi.OutputState }

func (ReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Receiver)(nil)).Elem()
}

func (o ReceiverOutput) ToReceiverOutput() ReceiverOutput {
	return o
}

func (o ReceiverOutput) ToReceiverOutputWithContext(ctx context.Context) ReceiverOutput {
	return o
}

// Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `templateData`, then other objects are also required.
func (o ReceiverOutput) Datas() ReceiverDataArrayOutput {
	return o.ApplyT(func(v *Receiver) ReceiverDataArrayOutput { return v.Datas }).(ReceiverDataArrayOutput)
}

// Recipient group description.
func (o ReceiverOutput) Desc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Receiver) pulumi.StringPtrOutput { return v.Desc }).(pulumi.StringPtrOutput)
}

// Recipient group name.
func (o ReceiverOutput) ReceiversName() pulumi.StringOutput {
	return o.ApplyT(func(v *Receiver) pulumi.StringOutput { return v.ReceiversName }).(pulumi.StringOutput)
}

type ReceiverArrayOutput struct{ *pulumi.OutputState }

func (ReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Receiver)(nil)).Elem()
}

func (o ReceiverArrayOutput) ToReceiverArrayOutput() ReceiverArrayOutput {
	return o
}

func (o ReceiverArrayOutput) ToReceiverArrayOutputWithContext(ctx context.Context) ReceiverArrayOutput {
	return o
}

func (o ReceiverArrayOutput) Index(i pulumi.IntInput) ReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Receiver {
		return vs[0].([]*Receiver)[vs[1].(int)]
	}).(ReceiverOutput)
}

type ReceiverMapOutput struct{ *pulumi.OutputState }

func (ReceiverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Receiver)(nil)).Elem()
}

func (o ReceiverMapOutput) ToReceiverMapOutput() ReceiverMapOutput {
	return o
}

func (o ReceiverMapOutput) ToReceiverMapOutputWithContext(ctx context.Context) ReceiverMapOutput {
	return o
}

func (o ReceiverMapOutput) MapIndex(k pulumi.StringInput) ReceiverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Receiver {
		return vs[0].(map[string]*Receiver)[vs[1].(string)]
	}).(ReceiverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverInput)(nil)).Elem(), &Receiver{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverArrayInput)(nil)).Elem(), ReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverMapInput)(nil)).Elem(), ReceiverMap{})
	pulumi.RegisterOutputType(ReceiverOutput{})
	pulumi.RegisterOutputType(ReceiverArrayOutput{})
	pulumi.RegisterOutputType(ReceiverMapOutput{})
}
