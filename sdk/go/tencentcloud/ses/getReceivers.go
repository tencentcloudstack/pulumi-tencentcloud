// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of ses receivers
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ses"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ses"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ses.GetReceivers(ctx, &ses.GetReceiversArgs{
//				KeyWord: pulumi.StringRef("keep"),
//				Status:  pulumi.IntRef(3),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetReceivers(ctx *pulumi.Context, args *GetReceiversArgs, opts ...pulumi.InvokeOption) (*GetReceiversResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetReceiversResult
	err := ctx.Invoke("tencentcloud:Ses/getReceivers:getReceivers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReceivers.
type GetReceiversArgs struct {
	// Group name keyword for fuzzy query.
	KeyWord *string `pulumi:"keyWord"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Group status (`1`: to be uploaded; `2`: uploading; `3`: uploaded). To query groups in all states, do not pass in this parameter.
	Status *int `pulumi:"status"`
}

// A collection of values returned by getReceivers.
type GetReceiversResult struct {
	// Data record.
	Datas []GetReceiversData `pulumi:"datas"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	KeyWord          *string `pulumi:"keyWord"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	Status           *int    `pulumi:"status"`
}

func GetReceiversOutput(ctx *pulumi.Context, args GetReceiversOutputArgs, opts ...pulumi.InvokeOption) GetReceiversResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetReceiversResult, error) {
			args := v.(GetReceiversArgs)
			r, err := GetReceivers(ctx, &args, opts...)
			var s GetReceiversResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetReceiversResultOutput)
}

// A collection of arguments for invoking getReceivers.
type GetReceiversOutputArgs struct {
	// Group name keyword for fuzzy query.
	KeyWord pulumi.StringPtrInput `pulumi:"keyWord"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Group status (`1`: to be uploaded; `2`: uploading; `3`: uploaded). To query groups in all states, do not pass in this parameter.
	Status pulumi.IntPtrInput `pulumi:"status"`
}

func (GetReceiversOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceiversArgs)(nil)).Elem()
}

// A collection of values returned by getReceivers.
type GetReceiversResultOutput struct{ *pulumi.OutputState }

func (GetReceiversResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetReceiversResult)(nil)).Elem()
}

func (o GetReceiversResultOutput) ToGetReceiversResultOutput() GetReceiversResultOutput {
	return o
}

func (o GetReceiversResultOutput) ToGetReceiversResultOutputWithContext(ctx context.Context) GetReceiversResultOutput {
	return o
}

// Data record.
func (o GetReceiversResultOutput) Datas() GetReceiversDataArrayOutput {
	return o.ApplyT(func(v GetReceiversResult) []GetReceiversData { return v.Datas }).(GetReceiversDataArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetReceiversResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetReceiversResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetReceiversResultOutput) KeyWord() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReceiversResult) *string { return v.KeyWord }).(pulumi.StringPtrOutput)
}

func (o GetReceiversResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetReceiversResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetReceiversResultOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetReceiversResult) *int { return v.Status }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetReceiversResultOutput{})
}
