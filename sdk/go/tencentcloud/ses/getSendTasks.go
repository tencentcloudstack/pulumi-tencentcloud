// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of ses sendTasks
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ses"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ses"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ses.GetSendTasks(ctx, &ses.GetSendTasksArgs{
//				ReceiverId: pulumi.IntRef(1063742),
//				Status:     pulumi.IntRef(10),
//				TaskType:   pulumi.IntRef(1),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSendTasks(ctx *pulumi.Context, args *GetSendTasksArgs, opts ...pulumi.InvokeOption) (*GetSendTasksResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetSendTasksResult
	err := ctx.Invoke("tencentcloud:Ses/getSendTasks:getSendTasks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSendTasks.
type GetSendTasksArgs struct {
	// Recipient group ID.
	ReceiverId *int `pulumi:"receiverId"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Task status. `1`: to start; `5`: sending; `6`: sending suspended today; `7`: sending error; `10`: sent. To query tasks in all states, do not pass in this parameter.
	Status *int `pulumi:"status"`
	// Task type. `1`: immediate; `2`: scheduled; `3`: recurring. To query tasks of all types, do not pass in this parameter.
	TaskType *int `pulumi:"taskType"`
}

// A collection of values returned by getSendTasks.
type GetSendTasksResult struct {
	// Data record.
	Datas []GetSendTasksData `pulumi:"datas"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Recipient group ID.
	ReceiverId       *int    `pulumi:"receiverId"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	Status           *int    `pulumi:"status"`
	// Task type. `1`: immediate; `2`: scheduled; `3`: recurring.
	TaskType *int `pulumi:"taskType"`
}

func GetSendTasksOutput(ctx *pulumi.Context, args GetSendTasksOutputArgs, opts ...pulumi.InvokeOption) GetSendTasksResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSendTasksResult, error) {
			args := v.(GetSendTasksArgs)
			r, err := GetSendTasks(ctx, &args, opts...)
			var s GetSendTasksResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSendTasksResultOutput)
}

// A collection of arguments for invoking getSendTasks.
type GetSendTasksOutputArgs struct {
	// Recipient group ID.
	ReceiverId pulumi.IntPtrInput `pulumi:"receiverId"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Task status. `1`: to start; `5`: sending; `6`: sending suspended today; `7`: sending error; `10`: sent. To query tasks in all states, do not pass in this parameter.
	Status pulumi.IntPtrInput `pulumi:"status"`
	// Task type. `1`: immediate; `2`: scheduled; `3`: recurring. To query tasks of all types, do not pass in this parameter.
	TaskType pulumi.IntPtrInput `pulumi:"taskType"`
}

func (GetSendTasksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSendTasksArgs)(nil)).Elem()
}

// A collection of values returned by getSendTasks.
type GetSendTasksResultOutput struct{ *pulumi.OutputState }

func (GetSendTasksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSendTasksResult)(nil)).Elem()
}

func (o GetSendTasksResultOutput) ToGetSendTasksResultOutput() GetSendTasksResultOutput {
	return o
}

func (o GetSendTasksResultOutput) ToGetSendTasksResultOutputWithContext(ctx context.Context) GetSendTasksResultOutput {
	return o
}

// Data record.
func (o GetSendTasksResultOutput) Datas() GetSendTasksDataArrayOutput {
	return o.ApplyT(func(v GetSendTasksResult) []GetSendTasksData { return v.Datas }).(GetSendTasksDataArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSendTasksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSendTasksResult) string { return v.Id }).(pulumi.StringOutput)
}

// Recipient group ID.
func (o GetSendTasksResultOutput) ReceiverId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSendTasksResult) *int { return v.ReceiverId }).(pulumi.IntPtrOutput)
}

func (o GetSendTasksResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSendTasksResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetSendTasksResultOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSendTasksResult) *int { return v.Status }).(pulumi.IntPtrOutput)
}

// Task type. `1`: immediate; `2`: scheduled; `3`: recurring.
func (o GetSendTasksResultOutput) TaskType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSendTasksResult) *int { return v.TaskType }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSendTasksResultOutput{})
}
