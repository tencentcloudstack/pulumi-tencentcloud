// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ses verifyDomain
//
// > **NOTE:** Please add the `attributes` information returned by `Ses.Domain` to the domain name resolution record through `Dnspod.Record`, and then verify it.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ses"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ses.NewVerifyDomain(ctx, "verifyDomain", &Ses.VerifyDomainArgs{
//				EmailIdentity: pulumi.String("example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VerifyDomain struct {
	pulumi.CustomResourceState

	// Domain name requested for verification.
	EmailIdentity pulumi.StringOutput `pulumi:"emailIdentity"`
}

// NewVerifyDomain registers a new resource with the given unique name, arguments, and options.
func NewVerifyDomain(ctx *pulumi.Context,
	name string, args *VerifyDomainArgs, opts ...pulumi.ResourceOption) (*VerifyDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EmailIdentity == nil {
		return nil, errors.New("invalid value for required argument 'EmailIdentity'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VerifyDomain
	err := ctx.RegisterResource("tencentcloud:Ses/verifyDomain:VerifyDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVerifyDomain gets an existing VerifyDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVerifyDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VerifyDomainState, opts ...pulumi.ResourceOption) (*VerifyDomain, error) {
	var resource VerifyDomain
	err := ctx.ReadResource("tencentcloud:Ses/verifyDomain:VerifyDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VerifyDomain resources.
type verifyDomainState struct {
	// Domain name requested for verification.
	EmailIdentity *string `pulumi:"emailIdentity"`
}

type VerifyDomainState struct {
	// Domain name requested for verification.
	EmailIdentity pulumi.StringPtrInput
}

func (VerifyDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*verifyDomainState)(nil)).Elem()
}

type verifyDomainArgs struct {
	// Domain name requested for verification.
	EmailIdentity string `pulumi:"emailIdentity"`
}

// The set of arguments for constructing a VerifyDomain resource.
type VerifyDomainArgs struct {
	// Domain name requested for verification.
	EmailIdentity pulumi.StringInput
}

func (VerifyDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*verifyDomainArgs)(nil)).Elem()
}

type VerifyDomainInput interface {
	pulumi.Input

	ToVerifyDomainOutput() VerifyDomainOutput
	ToVerifyDomainOutputWithContext(ctx context.Context) VerifyDomainOutput
}

func (*VerifyDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**VerifyDomain)(nil)).Elem()
}

func (i *VerifyDomain) ToVerifyDomainOutput() VerifyDomainOutput {
	return i.ToVerifyDomainOutputWithContext(context.Background())
}

func (i *VerifyDomain) ToVerifyDomainOutputWithContext(ctx context.Context) VerifyDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerifyDomainOutput)
}

// VerifyDomainArrayInput is an input type that accepts VerifyDomainArray and VerifyDomainArrayOutput values.
// You can construct a concrete instance of `VerifyDomainArrayInput` via:
//
//	VerifyDomainArray{ VerifyDomainArgs{...} }
type VerifyDomainArrayInput interface {
	pulumi.Input

	ToVerifyDomainArrayOutput() VerifyDomainArrayOutput
	ToVerifyDomainArrayOutputWithContext(context.Context) VerifyDomainArrayOutput
}

type VerifyDomainArray []VerifyDomainInput

func (VerifyDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VerifyDomain)(nil)).Elem()
}

func (i VerifyDomainArray) ToVerifyDomainArrayOutput() VerifyDomainArrayOutput {
	return i.ToVerifyDomainArrayOutputWithContext(context.Background())
}

func (i VerifyDomainArray) ToVerifyDomainArrayOutputWithContext(ctx context.Context) VerifyDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerifyDomainArrayOutput)
}

// VerifyDomainMapInput is an input type that accepts VerifyDomainMap and VerifyDomainMapOutput values.
// You can construct a concrete instance of `VerifyDomainMapInput` via:
//
//	VerifyDomainMap{ "key": VerifyDomainArgs{...} }
type VerifyDomainMapInput interface {
	pulumi.Input

	ToVerifyDomainMapOutput() VerifyDomainMapOutput
	ToVerifyDomainMapOutputWithContext(context.Context) VerifyDomainMapOutput
}

type VerifyDomainMap map[string]VerifyDomainInput

func (VerifyDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VerifyDomain)(nil)).Elem()
}

func (i VerifyDomainMap) ToVerifyDomainMapOutput() VerifyDomainMapOutput {
	return i.ToVerifyDomainMapOutputWithContext(context.Background())
}

func (i VerifyDomainMap) ToVerifyDomainMapOutputWithContext(ctx context.Context) VerifyDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerifyDomainMapOutput)
}

type VerifyDomainOutput struct{ *pulumi.OutputState }

func (VerifyDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VerifyDomain)(nil)).Elem()
}

func (o VerifyDomainOutput) ToVerifyDomainOutput() VerifyDomainOutput {
	return o
}

func (o VerifyDomainOutput) ToVerifyDomainOutputWithContext(ctx context.Context) VerifyDomainOutput {
	return o
}

// Domain name requested for verification.
func (o VerifyDomainOutput) EmailIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v *VerifyDomain) pulumi.StringOutput { return v.EmailIdentity }).(pulumi.StringOutput)
}

type VerifyDomainArrayOutput struct{ *pulumi.OutputState }

func (VerifyDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VerifyDomain)(nil)).Elem()
}

func (o VerifyDomainArrayOutput) ToVerifyDomainArrayOutput() VerifyDomainArrayOutput {
	return o
}

func (o VerifyDomainArrayOutput) ToVerifyDomainArrayOutputWithContext(ctx context.Context) VerifyDomainArrayOutput {
	return o
}

func (o VerifyDomainArrayOutput) Index(i pulumi.IntInput) VerifyDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VerifyDomain {
		return vs[0].([]*VerifyDomain)[vs[1].(int)]
	}).(VerifyDomainOutput)
}

type VerifyDomainMapOutput struct{ *pulumi.OutputState }

func (VerifyDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VerifyDomain)(nil)).Elem()
}

func (o VerifyDomainMapOutput) ToVerifyDomainMapOutput() VerifyDomainMapOutput {
	return o
}

func (o VerifyDomainMapOutput) ToVerifyDomainMapOutputWithContext(ctx context.Context) VerifyDomainMapOutput {
	return o
}

func (o VerifyDomainMapOutput) MapIndex(k pulumi.StringInput) VerifyDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VerifyDomain {
		return vs[0].(map[string]*VerifyDomain)[vs[1].(string)]
	}).(VerifyDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VerifyDomainInput)(nil)).Elem(), &VerifyDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*VerifyDomainArrayInput)(nil)).Elem(), VerifyDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VerifyDomainMapInput)(nil)).Elem(), VerifyDomainMap{})
	pulumi.RegisterOutputType(VerifyDomainOutput{})
	pulumi.RegisterOutputType(VerifyDomainArrayOutput{})
	pulumi.RegisterOutputType(VerifyDomainMapOutput{})
}
