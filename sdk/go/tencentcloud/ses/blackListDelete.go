// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ses blackList
//
// > **NOTE:** Used to remove email addresses from blacklists.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ses"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ses.NewBlackListDelete(ctx, "blackList", &Ses.BlackListDeleteArgs{
//				EmailAddress: pulumi.String("terraform-tf@gmail.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type BlackListDelete struct {
	pulumi.CustomResourceState

	// Email addresses to be unblocklisted.
	EmailAddress pulumi.StringOutput `pulumi:"emailAddress"`
}

// NewBlackListDelete registers a new resource with the given unique name, arguments, and options.
func NewBlackListDelete(ctx *pulumi.Context,
	name string, args *BlackListDeleteArgs, opts ...pulumi.ResourceOption) (*BlackListDelete, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EmailAddress == nil {
		return nil, errors.New("invalid value for required argument 'EmailAddress'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BlackListDelete
	err := ctx.RegisterResource("tencentcloud:Ses/blackListDelete:BlackListDelete", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlackListDelete gets an existing BlackListDelete resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlackListDelete(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlackListDeleteState, opts ...pulumi.ResourceOption) (*BlackListDelete, error) {
	var resource BlackListDelete
	err := ctx.ReadResource("tencentcloud:Ses/blackListDelete:BlackListDelete", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlackListDelete resources.
type blackListDeleteState struct {
	// Email addresses to be unblocklisted.
	EmailAddress *string `pulumi:"emailAddress"`
}

type BlackListDeleteState struct {
	// Email addresses to be unblocklisted.
	EmailAddress pulumi.StringPtrInput
}

func (BlackListDeleteState) ElementType() reflect.Type {
	return reflect.TypeOf((*blackListDeleteState)(nil)).Elem()
}

type blackListDeleteArgs struct {
	// Email addresses to be unblocklisted.
	EmailAddress string `pulumi:"emailAddress"`
}

// The set of arguments for constructing a BlackListDelete resource.
type BlackListDeleteArgs struct {
	// Email addresses to be unblocklisted.
	EmailAddress pulumi.StringInput
}

func (BlackListDeleteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blackListDeleteArgs)(nil)).Elem()
}

type BlackListDeleteInput interface {
	pulumi.Input

	ToBlackListDeleteOutput() BlackListDeleteOutput
	ToBlackListDeleteOutputWithContext(ctx context.Context) BlackListDeleteOutput
}

func (*BlackListDelete) ElementType() reflect.Type {
	return reflect.TypeOf((**BlackListDelete)(nil)).Elem()
}

func (i *BlackListDelete) ToBlackListDeleteOutput() BlackListDeleteOutput {
	return i.ToBlackListDeleteOutputWithContext(context.Background())
}

func (i *BlackListDelete) ToBlackListDeleteOutputWithContext(ctx context.Context) BlackListDeleteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlackListDeleteOutput)
}

// BlackListDeleteArrayInput is an input type that accepts BlackListDeleteArray and BlackListDeleteArrayOutput values.
// You can construct a concrete instance of `BlackListDeleteArrayInput` via:
//
//	BlackListDeleteArray{ BlackListDeleteArgs{...} }
type BlackListDeleteArrayInput interface {
	pulumi.Input

	ToBlackListDeleteArrayOutput() BlackListDeleteArrayOutput
	ToBlackListDeleteArrayOutputWithContext(context.Context) BlackListDeleteArrayOutput
}

type BlackListDeleteArray []BlackListDeleteInput

func (BlackListDeleteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlackListDelete)(nil)).Elem()
}

func (i BlackListDeleteArray) ToBlackListDeleteArrayOutput() BlackListDeleteArrayOutput {
	return i.ToBlackListDeleteArrayOutputWithContext(context.Background())
}

func (i BlackListDeleteArray) ToBlackListDeleteArrayOutputWithContext(ctx context.Context) BlackListDeleteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlackListDeleteArrayOutput)
}

// BlackListDeleteMapInput is an input type that accepts BlackListDeleteMap and BlackListDeleteMapOutput values.
// You can construct a concrete instance of `BlackListDeleteMapInput` via:
//
//	BlackListDeleteMap{ "key": BlackListDeleteArgs{...} }
type BlackListDeleteMapInput interface {
	pulumi.Input

	ToBlackListDeleteMapOutput() BlackListDeleteMapOutput
	ToBlackListDeleteMapOutputWithContext(context.Context) BlackListDeleteMapOutput
}

type BlackListDeleteMap map[string]BlackListDeleteInput

func (BlackListDeleteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlackListDelete)(nil)).Elem()
}

func (i BlackListDeleteMap) ToBlackListDeleteMapOutput() BlackListDeleteMapOutput {
	return i.ToBlackListDeleteMapOutputWithContext(context.Background())
}

func (i BlackListDeleteMap) ToBlackListDeleteMapOutputWithContext(ctx context.Context) BlackListDeleteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlackListDeleteMapOutput)
}

type BlackListDeleteOutput struct{ *pulumi.OutputState }

func (BlackListDeleteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlackListDelete)(nil)).Elem()
}

func (o BlackListDeleteOutput) ToBlackListDeleteOutput() BlackListDeleteOutput {
	return o
}

func (o BlackListDeleteOutput) ToBlackListDeleteOutputWithContext(ctx context.Context) BlackListDeleteOutput {
	return o
}

// Email addresses to be unblocklisted.
func (o BlackListDeleteOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *BlackListDelete) pulumi.StringOutput { return v.EmailAddress }).(pulumi.StringOutput)
}

type BlackListDeleteArrayOutput struct{ *pulumi.OutputState }

func (BlackListDeleteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlackListDelete)(nil)).Elem()
}

func (o BlackListDeleteArrayOutput) ToBlackListDeleteArrayOutput() BlackListDeleteArrayOutput {
	return o
}

func (o BlackListDeleteArrayOutput) ToBlackListDeleteArrayOutputWithContext(ctx context.Context) BlackListDeleteArrayOutput {
	return o
}

func (o BlackListDeleteArrayOutput) Index(i pulumi.IntInput) BlackListDeleteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlackListDelete {
		return vs[0].([]*BlackListDelete)[vs[1].(int)]
	}).(BlackListDeleteOutput)
}

type BlackListDeleteMapOutput struct{ *pulumi.OutputState }

func (BlackListDeleteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlackListDelete)(nil)).Elem()
}

func (o BlackListDeleteMapOutput) ToBlackListDeleteMapOutput() BlackListDeleteMapOutput {
	return o
}

func (o BlackListDeleteMapOutput) ToBlackListDeleteMapOutputWithContext(ctx context.Context) BlackListDeleteMapOutput {
	return o
}

func (o BlackListDeleteMapOutput) MapIndex(k pulumi.StringInput) BlackListDeleteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlackListDelete {
		return vs[0].(map[string]*BlackListDelete)[vs[1].(string)]
	}).(BlackListDeleteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlackListDeleteInput)(nil)).Elem(), &BlackListDelete{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlackListDeleteArrayInput)(nil)).Elem(), BlackListDeleteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlackListDeleteMapInput)(nil)).Elem(), BlackListDeleteMap{})
	pulumi.RegisterOutputType(BlackListDeleteOutput{})
	pulumi.RegisterOutputType(BlackListDeleteArrayOutput{})
	pulumi.RegisterOutputType(BlackListDeleteMapOutput{})
}
