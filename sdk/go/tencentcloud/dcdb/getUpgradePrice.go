// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of dcdb upgradePrice
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dcdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dcdb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dcdb.GetUpgradePrice(ctx, &dcdb.GetUpgradePriceArgs{
//				InstanceId:  local.Dcdb_id,
//				UpgradeType: "ADD",
//				AddShardConfig: dcdb.GetUpgradePriceAddShardConfig{
//					ShardCount:   2,
//					ShardMemory:  2,
//					ShardStorage: 100,
//				},
//				AmountUnit: pulumi.StringRef("pent"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Dcdb.GetUpgradePrice(ctx, &dcdb.GetUpgradePriceArgs{
//				InstanceId:  local.Dcdb_id,
//				UpgradeType: "EXPAND",
//				ExpandShardConfig: dcdb.GetUpgradePriceExpandShardConfig{
//					ShardInstanceIds: []string{
//						"shard-1b5r04az",
//					},
//					ShardMemory:    2,
//					ShardStorage:   40,
//					ShardNodeCount: pulumi.IntRef(2),
//				},
//				AmountUnit: pulumi.StringRef("pent"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Dcdb.GetUpgradePrice(ctx, &dcdb.GetUpgradePriceArgs{
//				InstanceId:  local.Dcdb_id,
//				UpgradeType: "SPLIT",
//				SplitShardConfig: dcdb.GetUpgradePriceSplitShardConfig{
//					ShardInstanceIds: []string{
//						"shard-1b5r04az",
//					},
//					SplitRate:    50,
//					ShardMemory:  2,
//					ShardStorage: 100,
//				},
//				AmountUnit: pulumi.StringRef("pent"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetUpgradePrice(ctx *pulumi.Context, args *GetUpgradePriceArgs, opts ...pulumi.InvokeOption) (*GetUpgradePriceResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetUpgradePriceResult
	err := ctx.Invoke("tencentcloud:Dcdb/getUpgradePrice:getUpgradePrice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUpgradePrice.
type GetUpgradePriceArgs struct {
	// Config for adding new shard.
	AddShardConfig *GetUpgradePriceAddShardConfig `pulumi:"addShardConfig"`
	// Price unit. Valid values: `pent` (cent), `microPent` (microcent).
	AmountUnit *string `pulumi:"amountUnit"`
	// Config for expanding existing shard.
	ExpandShardConfig *GetUpgradePriceExpandShardConfig `pulumi:"expandShardConfig"`
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Config for splitting existing shard.
	SplitShardConfig *GetUpgradePriceSplitShardConfig `pulumi:"splitShardConfig"`
	// Upgrade type, ADD: add new shard, EXPAND: upgrade the existing shard, SPLIT: split existing shard.
	UpgradeType string `pulumi:"upgradeType"`
}

// A collection of values returned by getUpgradePrice.
type GetUpgradePriceResult struct {
	AddShardConfig    *GetUpgradePriceAddShardConfig    `pulumi:"addShardConfig"`
	AmountUnit        *string                           `pulumi:"amountUnit"`
	ExpandShardConfig *GetUpgradePriceExpandShardConfig `pulumi:"expandShardConfig"`
	// Price calculation formula.
	Formula string `pulumi:"formula"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// Original price. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
	OriginalPrice int `pulumi:"originalPrice"`
	// The actual price may be different from the original price due to discounts. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
	Price            int                              `pulumi:"price"`
	ResultOutputFile *string                          `pulumi:"resultOutputFile"`
	SplitShardConfig *GetUpgradePriceSplitShardConfig `pulumi:"splitShardConfig"`
	UpgradeType      string                           `pulumi:"upgradeType"`
}

func GetUpgradePriceOutput(ctx *pulumi.Context, args GetUpgradePriceOutputArgs, opts ...pulumi.InvokeOption) GetUpgradePriceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUpgradePriceResult, error) {
			args := v.(GetUpgradePriceArgs)
			r, err := GetUpgradePrice(ctx, &args, opts...)
			var s GetUpgradePriceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUpgradePriceResultOutput)
}

// A collection of arguments for invoking getUpgradePrice.
type GetUpgradePriceOutputArgs struct {
	// Config for adding new shard.
	AddShardConfig GetUpgradePriceAddShardConfigPtrInput `pulumi:"addShardConfig"`
	// Price unit. Valid values: `pent` (cent), `microPent` (microcent).
	AmountUnit pulumi.StringPtrInput `pulumi:"amountUnit"`
	// Config for expanding existing shard.
	ExpandShardConfig GetUpgradePriceExpandShardConfigPtrInput `pulumi:"expandShardConfig"`
	// Instance ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Config for splitting existing shard.
	SplitShardConfig GetUpgradePriceSplitShardConfigPtrInput `pulumi:"splitShardConfig"`
	// Upgrade type, ADD: add new shard, EXPAND: upgrade the existing shard, SPLIT: split existing shard.
	UpgradeType pulumi.StringInput `pulumi:"upgradeType"`
}

func (GetUpgradePriceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUpgradePriceArgs)(nil)).Elem()
}

// A collection of values returned by getUpgradePrice.
type GetUpgradePriceResultOutput struct{ *pulumi.OutputState }

func (GetUpgradePriceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUpgradePriceResult)(nil)).Elem()
}

func (o GetUpgradePriceResultOutput) ToGetUpgradePriceResultOutput() GetUpgradePriceResultOutput {
	return o
}

func (o GetUpgradePriceResultOutput) ToGetUpgradePriceResultOutputWithContext(ctx context.Context) GetUpgradePriceResultOutput {
	return o
}

func (o GetUpgradePriceResultOutput) AddShardConfig() GetUpgradePriceAddShardConfigPtrOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) *GetUpgradePriceAddShardConfig { return v.AddShardConfig }).(GetUpgradePriceAddShardConfigPtrOutput)
}

func (o GetUpgradePriceResultOutput) AmountUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) *string { return v.AmountUnit }).(pulumi.StringPtrOutput)
}

func (o GetUpgradePriceResultOutput) ExpandShardConfig() GetUpgradePriceExpandShardConfigPtrOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) *GetUpgradePriceExpandShardConfig { return v.ExpandShardConfig }).(GetUpgradePriceExpandShardConfigPtrOutput)
}

// Price calculation formula.
func (o GetUpgradePriceResultOutput) Formula() pulumi.StringOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) string { return v.Formula }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUpgradePriceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUpgradePriceResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Original price. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
func (o GetUpgradePriceResultOutput) OriginalPrice() pulumi.IntOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) int { return v.OriginalPrice }).(pulumi.IntOutput)
}

// The actual price may be different from the original price due to discounts. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
func (o GetUpgradePriceResultOutput) Price() pulumi.IntOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) int { return v.Price }).(pulumi.IntOutput)
}

func (o GetUpgradePriceResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetUpgradePriceResultOutput) SplitShardConfig() GetUpgradePriceSplitShardConfigPtrOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) *GetUpgradePriceSplitShardConfig { return v.SplitShardConfig }).(GetUpgradePriceSplitShardConfigPtrOutput)
}

func (o GetUpgradePriceResultOutput) UpgradeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUpgradePriceResult) string { return v.UpgradeType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUpgradePriceResultOutput{})
}
