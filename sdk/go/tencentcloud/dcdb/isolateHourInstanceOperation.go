// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dcdb isolateHourInstanceOperation
type IsolateHourInstanceOperation struct {
	pulumi.CustomResourceState

	// Instance ID list.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewIsolateHourInstanceOperation registers a new resource with the given unique name, arguments, and options.
func NewIsolateHourInstanceOperation(ctx *pulumi.Context,
	name string, args *IsolateHourInstanceOperationArgs, opts ...pulumi.ResourceOption) (*IsolateHourInstanceOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IsolateHourInstanceOperation
	err := ctx.RegisterResource("tencentcloud:Dcdb/isolateHourInstanceOperation:IsolateHourInstanceOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIsolateHourInstanceOperation gets an existing IsolateHourInstanceOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIsolateHourInstanceOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IsolateHourInstanceOperationState, opts ...pulumi.ResourceOption) (*IsolateHourInstanceOperation, error) {
	var resource IsolateHourInstanceOperation
	err := ctx.ReadResource("tencentcloud:Dcdb/isolateHourInstanceOperation:IsolateHourInstanceOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IsolateHourInstanceOperation resources.
type isolateHourInstanceOperationState struct {
	// Instance ID list.
	InstanceId *string `pulumi:"instanceId"`
}

type IsolateHourInstanceOperationState struct {
	// Instance ID list.
	InstanceId pulumi.StringPtrInput
}

func (IsolateHourInstanceOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*isolateHourInstanceOperationState)(nil)).Elem()
}

type isolateHourInstanceOperationArgs struct {
	// Instance ID list.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a IsolateHourInstanceOperation resource.
type IsolateHourInstanceOperationArgs struct {
	// Instance ID list.
	InstanceId pulumi.StringInput
}

func (IsolateHourInstanceOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*isolateHourInstanceOperationArgs)(nil)).Elem()
}

type IsolateHourInstanceOperationInput interface {
	pulumi.Input

	ToIsolateHourInstanceOperationOutput() IsolateHourInstanceOperationOutput
	ToIsolateHourInstanceOperationOutputWithContext(ctx context.Context) IsolateHourInstanceOperationOutput
}

func (*IsolateHourInstanceOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**IsolateHourInstanceOperation)(nil)).Elem()
}

func (i *IsolateHourInstanceOperation) ToIsolateHourInstanceOperationOutput() IsolateHourInstanceOperationOutput {
	return i.ToIsolateHourInstanceOperationOutputWithContext(context.Background())
}

func (i *IsolateHourInstanceOperation) ToIsolateHourInstanceOperationOutputWithContext(ctx context.Context) IsolateHourInstanceOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolateHourInstanceOperationOutput)
}

// IsolateHourInstanceOperationArrayInput is an input type that accepts IsolateHourInstanceOperationArray and IsolateHourInstanceOperationArrayOutput values.
// You can construct a concrete instance of `IsolateHourInstanceOperationArrayInput` via:
//
//	IsolateHourInstanceOperationArray{ IsolateHourInstanceOperationArgs{...} }
type IsolateHourInstanceOperationArrayInput interface {
	pulumi.Input

	ToIsolateHourInstanceOperationArrayOutput() IsolateHourInstanceOperationArrayOutput
	ToIsolateHourInstanceOperationArrayOutputWithContext(context.Context) IsolateHourInstanceOperationArrayOutput
}

type IsolateHourInstanceOperationArray []IsolateHourInstanceOperationInput

func (IsolateHourInstanceOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IsolateHourInstanceOperation)(nil)).Elem()
}

func (i IsolateHourInstanceOperationArray) ToIsolateHourInstanceOperationArrayOutput() IsolateHourInstanceOperationArrayOutput {
	return i.ToIsolateHourInstanceOperationArrayOutputWithContext(context.Background())
}

func (i IsolateHourInstanceOperationArray) ToIsolateHourInstanceOperationArrayOutputWithContext(ctx context.Context) IsolateHourInstanceOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolateHourInstanceOperationArrayOutput)
}

// IsolateHourInstanceOperationMapInput is an input type that accepts IsolateHourInstanceOperationMap and IsolateHourInstanceOperationMapOutput values.
// You can construct a concrete instance of `IsolateHourInstanceOperationMapInput` via:
//
//	IsolateHourInstanceOperationMap{ "key": IsolateHourInstanceOperationArgs{...} }
type IsolateHourInstanceOperationMapInput interface {
	pulumi.Input

	ToIsolateHourInstanceOperationMapOutput() IsolateHourInstanceOperationMapOutput
	ToIsolateHourInstanceOperationMapOutputWithContext(context.Context) IsolateHourInstanceOperationMapOutput
}

type IsolateHourInstanceOperationMap map[string]IsolateHourInstanceOperationInput

func (IsolateHourInstanceOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IsolateHourInstanceOperation)(nil)).Elem()
}

func (i IsolateHourInstanceOperationMap) ToIsolateHourInstanceOperationMapOutput() IsolateHourInstanceOperationMapOutput {
	return i.ToIsolateHourInstanceOperationMapOutputWithContext(context.Background())
}

func (i IsolateHourInstanceOperationMap) ToIsolateHourInstanceOperationMapOutputWithContext(ctx context.Context) IsolateHourInstanceOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsolateHourInstanceOperationMapOutput)
}

type IsolateHourInstanceOperationOutput struct{ *pulumi.OutputState }

func (IsolateHourInstanceOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IsolateHourInstanceOperation)(nil)).Elem()
}

func (o IsolateHourInstanceOperationOutput) ToIsolateHourInstanceOperationOutput() IsolateHourInstanceOperationOutput {
	return o
}

func (o IsolateHourInstanceOperationOutput) ToIsolateHourInstanceOperationOutputWithContext(ctx context.Context) IsolateHourInstanceOperationOutput {
	return o
}

// Instance ID list.
func (o IsolateHourInstanceOperationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *IsolateHourInstanceOperation) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type IsolateHourInstanceOperationArrayOutput struct{ *pulumi.OutputState }

func (IsolateHourInstanceOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IsolateHourInstanceOperation)(nil)).Elem()
}

func (o IsolateHourInstanceOperationArrayOutput) ToIsolateHourInstanceOperationArrayOutput() IsolateHourInstanceOperationArrayOutput {
	return o
}

func (o IsolateHourInstanceOperationArrayOutput) ToIsolateHourInstanceOperationArrayOutputWithContext(ctx context.Context) IsolateHourInstanceOperationArrayOutput {
	return o
}

func (o IsolateHourInstanceOperationArrayOutput) Index(i pulumi.IntInput) IsolateHourInstanceOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IsolateHourInstanceOperation {
		return vs[0].([]*IsolateHourInstanceOperation)[vs[1].(int)]
	}).(IsolateHourInstanceOperationOutput)
}

type IsolateHourInstanceOperationMapOutput struct{ *pulumi.OutputState }

func (IsolateHourInstanceOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IsolateHourInstanceOperation)(nil)).Elem()
}

func (o IsolateHourInstanceOperationMapOutput) ToIsolateHourInstanceOperationMapOutput() IsolateHourInstanceOperationMapOutput {
	return o
}

func (o IsolateHourInstanceOperationMapOutput) ToIsolateHourInstanceOperationMapOutputWithContext(ctx context.Context) IsolateHourInstanceOperationMapOutput {
	return o
}

func (o IsolateHourInstanceOperationMapOutput) MapIndex(k pulumi.StringInput) IsolateHourInstanceOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IsolateHourInstanceOperation {
		return vs[0].(map[string]*IsolateHourInstanceOperation)[vs[1].(string)]
	}).(IsolateHourInstanceOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IsolateHourInstanceOperationInput)(nil)).Elem(), &IsolateHourInstanceOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*IsolateHourInstanceOperationArrayInput)(nil)).Elem(), IsolateHourInstanceOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IsolateHourInstanceOperationMapInput)(nil)).Elem(), IsolateHourInstanceOperationMap{})
	pulumi.RegisterOutputType(IsolateHourInstanceOperationOutput{})
	pulumi.RegisterOutputType(IsolateHourInstanceOperationArrayOutput{})
	pulumi.RegisterOutputType(IsolateHourInstanceOperationMapOutput{})
}
