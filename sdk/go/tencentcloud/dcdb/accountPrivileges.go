// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dcdb accountPrivileges
//
// ## Import
//
// dcdb account_privileges can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dcdb/accountPrivileges:AccountPrivileges account_privileges instanceId#userName#host#dbName#tabName#viewName#colName
//
// ```
type AccountPrivileges struct {
	pulumi.CustomResourceState

	// The account of the database, including username and host.
	Account AccountPrivilegesAccountOutput `pulumi:"account"`
	// Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	ColumnPrivileges AccountPrivilegesColumnPrivilegesPtrOutput `pulumi:"columnPrivileges"`
	// Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	DatabasePrivileges AccountPrivilegesDatabasePrivilegesPtrOutput `pulumi:"databasePrivileges"`
	// Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
	GlobalPrivileges pulumi.StringArrayOutput `pulumi:"globalPrivileges"`
	// The ID of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	TablePrivileges AccountPrivilegesTablePrivilegesPtrOutput `pulumi:"tablePrivileges"`
	// Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	ViewPrivileges AccountPrivilegesViewPrivilegesPtrOutput `pulumi:"viewPrivileges"`
}

// NewAccountPrivileges registers a new resource with the given unique name, arguments, and options.
func NewAccountPrivileges(ctx *pulumi.Context,
	name string, args *AccountPrivilegesArgs, opts ...pulumi.ResourceOption) (*AccountPrivileges, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Account == nil {
		return nil, errors.New("invalid value for required argument 'Account'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AccountPrivileges
	err := ctx.RegisterResource("tencentcloud:Dcdb/accountPrivileges:AccountPrivileges", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountPrivileges gets an existing AccountPrivileges resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPrivileges(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountPrivilegesState, opts ...pulumi.ResourceOption) (*AccountPrivileges, error) {
	var resource AccountPrivileges
	err := ctx.ReadResource("tencentcloud:Dcdb/accountPrivileges:AccountPrivileges", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountPrivileges resources.
type accountPrivilegesState struct {
	// The account of the database, including username and host.
	Account *AccountPrivilegesAccount `pulumi:"account"`
	// Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	ColumnPrivileges *AccountPrivilegesColumnPrivileges `pulumi:"columnPrivileges"`
	// Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	DatabasePrivileges *AccountPrivilegesDatabasePrivileges `pulumi:"databasePrivileges"`
	// Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
	GlobalPrivileges []string `pulumi:"globalPrivileges"`
	// The ID of instance.
	InstanceId *string `pulumi:"instanceId"`
	// Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	TablePrivileges *AccountPrivilegesTablePrivileges `pulumi:"tablePrivileges"`
	// Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	ViewPrivileges *AccountPrivilegesViewPrivileges `pulumi:"viewPrivileges"`
}

type AccountPrivilegesState struct {
	// The account of the database, including username and host.
	Account AccountPrivilegesAccountPtrInput
	// Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	ColumnPrivileges AccountPrivilegesColumnPrivilegesPtrInput
	// Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	DatabasePrivileges AccountPrivilegesDatabasePrivilegesPtrInput
	// Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
	GlobalPrivileges pulumi.StringArrayInput
	// The ID of instance.
	InstanceId pulumi.StringPtrInput
	// Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	TablePrivileges AccountPrivilegesTablePrivilegesPtrInput
	// Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	ViewPrivileges AccountPrivilegesViewPrivilegesPtrInput
}

func (AccountPrivilegesState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPrivilegesState)(nil)).Elem()
}

type accountPrivilegesArgs struct {
	// The account of the database, including username and host.
	Account AccountPrivilegesAccount `pulumi:"account"`
	// Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	ColumnPrivileges *AccountPrivilegesColumnPrivileges `pulumi:"columnPrivileges"`
	// Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	DatabasePrivileges *AccountPrivilegesDatabasePrivileges `pulumi:"databasePrivileges"`
	// Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
	GlobalPrivileges []string `pulumi:"globalPrivileges"`
	// The ID of instance.
	InstanceId string `pulumi:"instanceId"`
	// Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	TablePrivileges *AccountPrivilegesTablePrivileges `pulumi:"tablePrivileges"`
	// Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	ViewPrivileges *AccountPrivilegesViewPrivileges `pulumi:"viewPrivileges"`
}

// The set of arguments for constructing a AccountPrivileges resource.
type AccountPrivilegesArgs struct {
	// The account of the database, including username and host.
	Account AccountPrivilegesAccountInput
	// Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	ColumnPrivileges AccountPrivilegesColumnPrivilegesPtrInput
	// Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	DatabasePrivileges AccountPrivilegesDatabasePrivilegesPtrInput
	// Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
	GlobalPrivileges pulumi.StringArrayInput
	// The ID of instance.
	InstanceId pulumi.StringInput
	// Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	TablePrivileges AccountPrivilegesTablePrivilegesPtrInput
	// Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
	ViewPrivileges AccountPrivilegesViewPrivilegesPtrInput
}

func (AccountPrivilegesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPrivilegesArgs)(nil)).Elem()
}

type AccountPrivilegesInput interface {
	pulumi.Input

	ToAccountPrivilegesOutput() AccountPrivilegesOutput
	ToAccountPrivilegesOutputWithContext(ctx context.Context) AccountPrivilegesOutput
}

func (*AccountPrivileges) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPrivileges)(nil)).Elem()
}

func (i *AccountPrivileges) ToAccountPrivilegesOutput() AccountPrivilegesOutput {
	return i.ToAccountPrivilegesOutputWithContext(context.Background())
}

func (i *AccountPrivileges) ToAccountPrivilegesOutputWithContext(ctx context.Context) AccountPrivilegesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPrivilegesOutput)
}

// AccountPrivilegesArrayInput is an input type that accepts AccountPrivilegesArray and AccountPrivilegesArrayOutput values.
// You can construct a concrete instance of `AccountPrivilegesArrayInput` via:
//
//	AccountPrivilegesArray{ AccountPrivilegesArgs{...} }
type AccountPrivilegesArrayInput interface {
	pulumi.Input

	ToAccountPrivilegesArrayOutput() AccountPrivilegesArrayOutput
	ToAccountPrivilegesArrayOutputWithContext(context.Context) AccountPrivilegesArrayOutput
}

type AccountPrivilegesArray []AccountPrivilegesInput

func (AccountPrivilegesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountPrivileges)(nil)).Elem()
}

func (i AccountPrivilegesArray) ToAccountPrivilegesArrayOutput() AccountPrivilegesArrayOutput {
	return i.ToAccountPrivilegesArrayOutputWithContext(context.Background())
}

func (i AccountPrivilegesArray) ToAccountPrivilegesArrayOutputWithContext(ctx context.Context) AccountPrivilegesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPrivilegesArrayOutput)
}

// AccountPrivilegesMapInput is an input type that accepts AccountPrivilegesMap and AccountPrivilegesMapOutput values.
// You can construct a concrete instance of `AccountPrivilegesMapInput` via:
//
//	AccountPrivilegesMap{ "key": AccountPrivilegesArgs{...} }
type AccountPrivilegesMapInput interface {
	pulumi.Input

	ToAccountPrivilegesMapOutput() AccountPrivilegesMapOutput
	ToAccountPrivilegesMapOutputWithContext(context.Context) AccountPrivilegesMapOutput
}

type AccountPrivilegesMap map[string]AccountPrivilegesInput

func (AccountPrivilegesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountPrivileges)(nil)).Elem()
}

func (i AccountPrivilegesMap) ToAccountPrivilegesMapOutput() AccountPrivilegesMapOutput {
	return i.ToAccountPrivilegesMapOutputWithContext(context.Background())
}

func (i AccountPrivilegesMap) ToAccountPrivilegesMapOutputWithContext(ctx context.Context) AccountPrivilegesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPrivilegesMapOutput)
}

type AccountPrivilegesOutput struct{ *pulumi.OutputState }

func (AccountPrivilegesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPrivileges)(nil)).Elem()
}

func (o AccountPrivilegesOutput) ToAccountPrivilegesOutput() AccountPrivilegesOutput {
	return o
}

func (o AccountPrivilegesOutput) ToAccountPrivilegesOutputWithContext(ctx context.Context) AccountPrivilegesOutput {
	return o
}

// The account of the database, including username and host.
func (o AccountPrivilegesOutput) Account() AccountPrivilegesAccountOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesAccountOutput { return v.Account }).(AccountPrivilegesAccountOutput)
}

// Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
func (o AccountPrivilegesOutput) ColumnPrivileges() AccountPrivilegesColumnPrivilegesPtrOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesColumnPrivilegesPtrOutput { return v.ColumnPrivileges }).(AccountPrivilegesColumnPrivilegesPtrOutput)
}

// Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
func (o AccountPrivilegesOutput) DatabasePrivileges() AccountPrivilegesDatabasePrivilegesPtrOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesDatabasePrivilegesPtrOutput { return v.DatabasePrivileges }).(AccountPrivilegesDatabasePrivilegesPtrOutput)
}

// Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
func (o AccountPrivilegesOutput) GlobalPrivileges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccountPrivileges) pulumi.StringArrayOutput { return v.GlobalPrivileges }).(pulumi.StringArrayOutput)
}

// The ID of instance.
func (o AccountPrivilegesOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountPrivileges) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
func (o AccountPrivilegesOutput) TablePrivileges() AccountPrivilegesTablePrivilegesPtrOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesTablePrivilegesPtrOutput { return v.TablePrivileges }).(AccountPrivilegesTablePrivilegesPtrOutput)
}

// Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
func (o AccountPrivilegesOutput) ViewPrivileges() AccountPrivilegesViewPrivilegesPtrOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesViewPrivilegesPtrOutput { return v.ViewPrivileges }).(AccountPrivilegesViewPrivilegesPtrOutput)
}

type AccountPrivilegesArrayOutput struct{ *pulumi.OutputState }

func (AccountPrivilegesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountPrivileges)(nil)).Elem()
}

func (o AccountPrivilegesArrayOutput) ToAccountPrivilegesArrayOutput() AccountPrivilegesArrayOutput {
	return o
}

func (o AccountPrivilegesArrayOutput) ToAccountPrivilegesArrayOutputWithContext(ctx context.Context) AccountPrivilegesArrayOutput {
	return o
}

func (o AccountPrivilegesArrayOutput) Index(i pulumi.IntInput) AccountPrivilegesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountPrivileges {
		return vs[0].([]*AccountPrivileges)[vs[1].(int)]
	}).(AccountPrivilegesOutput)
}

type AccountPrivilegesMapOutput struct{ *pulumi.OutputState }

func (AccountPrivilegesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountPrivileges)(nil)).Elem()
}

func (o AccountPrivilegesMapOutput) ToAccountPrivilegesMapOutput() AccountPrivilegesMapOutput {
	return o
}

func (o AccountPrivilegesMapOutput) ToAccountPrivilegesMapOutputWithContext(ctx context.Context) AccountPrivilegesMapOutput {
	return o
}

func (o AccountPrivilegesMapOutput) MapIndex(k pulumi.StringInput) AccountPrivilegesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountPrivileges {
		return vs[0].(map[string]*AccountPrivileges)[vs[1].(string)]
	}).(AccountPrivilegesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPrivilegesInput)(nil)).Elem(), &AccountPrivileges{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPrivilegesArrayInput)(nil)).Elem(), AccountPrivilegesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPrivilegesMapInput)(nil)).Elem(), AccountPrivilegesMap{})
	pulumi.RegisterOutputType(AccountPrivilegesOutput{})
	pulumi.RegisterOutputType(AccountPrivilegesArrayOutput{})
	pulumi.RegisterOutputType(AccountPrivilegesMapOutput{})
}
