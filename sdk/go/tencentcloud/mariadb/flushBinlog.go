// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mariadb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mariadb flushBinlog
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mariadb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mariadb.NewFlushBinlog(ctx, "flushBinlog", &Mariadb.FlushBinlogArgs{
//				InstanceId: pulumi.String("tdsql-9vqvls95"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FlushBinlog struct {
	pulumi.CustomResourceState

	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewFlushBinlog registers a new resource with the given unique name, arguments, and options.
func NewFlushBinlog(ctx *pulumi.Context,
	name string, args *FlushBinlogArgs, opts ...pulumi.ResourceOption) (*FlushBinlog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FlushBinlog
	err := ctx.RegisterResource("tencentcloud:Mariadb/flushBinlog:FlushBinlog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlushBinlog gets an existing FlushBinlog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlushBinlog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlushBinlogState, opts ...pulumi.ResourceOption) (*FlushBinlog, error) {
	var resource FlushBinlog
	err := ctx.ReadResource("tencentcloud:Mariadb/flushBinlog:FlushBinlog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlushBinlog resources.
type flushBinlogState struct {
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type FlushBinlogState struct {
	// Instance ID.
	InstanceId pulumi.StringPtrInput
}

func (FlushBinlogState) ElementType() reflect.Type {
	return reflect.TypeOf((*flushBinlogState)(nil)).Elem()
}

type flushBinlogArgs struct {
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a FlushBinlog resource.
type FlushBinlogArgs struct {
	// Instance ID.
	InstanceId pulumi.StringInput
}

func (FlushBinlogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flushBinlogArgs)(nil)).Elem()
}

type FlushBinlogInput interface {
	pulumi.Input

	ToFlushBinlogOutput() FlushBinlogOutput
	ToFlushBinlogOutputWithContext(ctx context.Context) FlushBinlogOutput
}

func (*FlushBinlog) ElementType() reflect.Type {
	return reflect.TypeOf((**FlushBinlog)(nil)).Elem()
}

func (i *FlushBinlog) ToFlushBinlogOutput() FlushBinlogOutput {
	return i.ToFlushBinlogOutputWithContext(context.Background())
}

func (i *FlushBinlog) ToFlushBinlogOutputWithContext(ctx context.Context) FlushBinlogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlushBinlogOutput)
}

// FlushBinlogArrayInput is an input type that accepts FlushBinlogArray and FlushBinlogArrayOutput values.
// You can construct a concrete instance of `FlushBinlogArrayInput` via:
//
//	FlushBinlogArray{ FlushBinlogArgs{...} }
type FlushBinlogArrayInput interface {
	pulumi.Input

	ToFlushBinlogArrayOutput() FlushBinlogArrayOutput
	ToFlushBinlogArrayOutputWithContext(context.Context) FlushBinlogArrayOutput
}

type FlushBinlogArray []FlushBinlogInput

func (FlushBinlogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlushBinlog)(nil)).Elem()
}

func (i FlushBinlogArray) ToFlushBinlogArrayOutput() FlushBinlogArrayOutput {
	return i.ToFlushBinlogArrayOutputWithContext(context.Background())
}

func (i FlushBinlogArray) ToFlushBinlogArrayOutputWithContext(ctx context.Context) FlushBinlogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlushBinlogArrayOutput)
}

// FlushBinlogMapInput is an input type that accepts FlushBinlogMap and FlushBinlogMapOutput values.
// You can construct a concrete instance of `FlushBinlogMapInput` via:
//
//	FlushBinlogMap{ "key": FlushBinlogArgs{...} }
type FlushBinlogMapInput interface {
	pulumi.Input

	ToFlushBinlogMapOutput() FlushBinlogMapOutput
	ToFlushBinlogMapOutputWithContext(context.Context) FlushBinlogMapOutput
}

type FlushBinlogMap map[string]FlushBinlogInput

func (FlushBinlogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlushBinlog)(nil)).Elem()
}

func (i FlushBinlogMap) ToFlushBinlogMapOutput() FlushBinlogMapOutput {
	return i.ToFlushBinlogMapOutputWithContext(context.Background())
}

func (i FlushBinlogMap) ToFlushBinlogMapOutputWithContext(ctx context.Context) FlushBinlogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlushBinlogMapOutput)
}

type FlushBinlogOutput struct{ *pulumi.OutputState }

func (FlushBinlogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlushBinlog)(nil)).Elem()
}

func (o FlushBinlogOutput) ToFlushBinlogOutput() FlushBinlogOutput {
	return o
}

func (o FlushBinlogOutput) ToFlushBinlogOutputWithContext(ctx context.Context) FlushBinlogOutput {
	return o
}

// Instance ID.
func (o FlushBinlogOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlushBinlog) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type FlushBinlogArrayOutput struct{ *pulumi.OutputState }

func (FlushBinlogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlushBinlog)(nil)).Elem()
}

func (o FlushBinlogArrayOutput) ToFlushBinlogArrayOutput() FlushBinlogArrayOutput {
	return o
}

func (o FlushBinlogArrayOutput) ToFlushBinlogArrayOutputWithContext(ctx context.Context) FlushBinlogArrayOutput {
	return o
}

func (o FlushBinlogArrayOutput) Index(i pulumi.IntInput) FlushBinlogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlushBinlog {
		return vs[0].([]*FlushBinlog)[vs[1].(int)]
	}).(FlushBinlogOutput)
}

type FlushBinlogMapOutput struct{ *pulumi.OutputState }

func (FlushBinlogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlushBinlog)(nil)).Elem()
}

func (o FlushBinlogMapOutput) ToFlushBinlogMapOutput() FlushBinlogMapOutput {
	return o
}

func (o FlushBinlogMapOutput) ToFlushBinlogMapOutputWithContext(ctx context.Context) FlushBinlogMapOutput {
	return o
}

func (o FlushBinlogMapOutput) MapIndex(k pulumi.StringInput) FlushBinlogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlushBinlog {
		return vs[0].(map[string]*FlushBinlog)[vs[1].(string)]
	}).(FlushBinlogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlushBinlogInput)(nil)).Elem(), &FlushBinlog{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlushBinlogArrayInput)(nil)).Elem(), FlushBinlogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlushBinlogMapInput)(nil)).Elem(), FlushBinlogMap{})
	pulumi.RegisterOutputType(FlushBinlogOutput{})
	pulumi.RegisterOutputType(FlushBinlogArrayOutput{})
	pulumi.RegisterOutputType(FlushBinlogMapOutput{})
}
