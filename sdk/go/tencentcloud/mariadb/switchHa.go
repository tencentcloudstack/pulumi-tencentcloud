// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mariadb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mariadb switchHA
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mariadb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mariadb.NewSwitchHa(ctx, "switchHa", &Mariadb.SwitchHaArgs{
//				InstanceId: pulumi.String("tdsql-9vqvls95"),
//				Zone:       pulumi.String("ap-guangzhou-2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SwitchHa struct {
	pulumi.CustomResourceState

	// Instance ID in the format of tdsql-ow728lmc.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Target AZ. The node with the lowest delay in the target AZ will be automatically promoted to primary node.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewSwitchHa registers a new resource with the given unique name, arguments, and options.
func NewSwitchHa(ctx *pulumi.Context,
	name string, args *SwitchHaArgs, opts ...pulumi.ResourceOption) (*SwitchHa, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchHa
	err := ctx.RegisterResource("tencentcloud:Mariadb/switchHa:SwitchHa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchHa gets an existing SwitchHa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchHa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchHaState, opts ...pulumi.ResourceOption) (*SwitchHa, error) {
	var resource SwitchHa
	err := ctx.ReadResource("tencentcloud:Mariadb/switchHa:SwitchHa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchHa resources.
type switchHaState struct {
	// Instance ID in the format of tdsql-ow728lmc.
	InstanceId *string `pulumi:"instanceId"`
	// Target AZ. The node with the lowest delay in the target AZ will be automatically promoted to primary node.
	Zone *string `pulumi:"zone"`
}

type SwitchHaState struct {
	// Instance ID in the format of tdsql-ow728lmc.
	InstanceId pulumi.StringPtrInput
	// Target AZ. The node with the lowest delay in the target AZ will be automatically promoted to primary node.
	Zone pulumi.StringPtrInput
}

func (SwitchHaState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchHaState)(nil)).Elem()
}

type switchHaArgs struct {
	// Instance ID in the format of tdsql-ow728lmc.
	InstanceId string `pulumi:"instanceId"`
	// Target AZ. The node with the lowest delay in the target AZ will be automatically promoted to primary node.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a SwitchHa resource.
type SwitchHaArgs struct {
	// Instance ID in the format of tdsql-ow728lmc.
	InstanceId pulumi.StringInput
	// Target AZ. The node with the lowest delay in the target AZ will be automatically promoted to primary node.
	Zone pulumi.StringInput
}

func (SwitchHaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchHaArgs)(nil)).Elem()
}

type SwitchHaInput interface {
	pulumi.Input

	ToSwitchHaOutput() SwitchHaOutput
	ToSwitchHaOutputWithContext(ctx context.Context) SwitchHaOutput
}

func (*SwitchHa) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchHa)(nil)).Elem()
}

func (i *SwitchHa) ToSwitchHaOutput() SwitchHaOutput {
	return i.ToSwitchHaOutputWithContext(context.Background())
}

func (i *SwitchHa) ToSwitchHaOutputWithContext(ctx context.Context) SwitchHaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchHaOutput)
}

// SwitchHaArrayInput is an input type that accepts SwitchHaArray and SwitchHaArrayOutput values.
// You can construct a concrete instance of `SwitchHaArrayInput` via:
//
//	SwitchHaArray{ SwitchHaArgs{...} }
type SwitchHaArrayInput interface {
	pulumi.Input

	ToSwitchHaArrayOutput() SwitchHaArrayOutput
	ToSwitchHaArrayOutputWithContext(context.Context) SwitchHaArrayOutput
}

type SwitchHaArray []SwitchHaInput

func (SwitchHaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchHa)(nil)).Elem()
}

func (i SwitchHaArray) ToSwitchHaArrayOutput() SwitchHaArrayOutput {
	return i.ToSwitchHaArrayOutputWithContext(context.Background())
}

func (i SwitchHaArray) ToSwitchHaArrayOutputWithContext(ctx context.Context) SwitchHaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchHaArrayOutput)
}

// SwitchHaMapInput is an input type that accepts SwitchHaMap and SwitchHaMapOutput values.
// You can construct a concrete instance of `SwitchHaMapInput` via:
//
//	SwitchHaMap{ "key": SwitchHaArgs{...} }
type SwitchHaMapInput interface {
	pulumi.Input

	ToSwitchHaMapOutput() SwitchHaMapOutput
	ToSwitchHaMapOutputWithContext(context.Context) SwitchHaMapOutput
}

type SwitchHaMap map[string]SwitchHaInput

func (SwitchHaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchHa)(nil)).Elem()
}

func (i SwitchHaMap) ToSwitchHaMapOutput() SwitchHaMapOutput {
	return i.ToSwitchHaMapOutputWithContext(context.Background())
}

func (i SwitchHaMap) ToSwitchHaMapOutputWithContext(ctx context.Context) SwitchHaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchHaMapOutput)
}

type SwitchHaOutput struct{ *pulumi.OutputState }

func (SwitchHaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchHa)(nil)).Elem()
}

func (o SwitchHaOutput) ToSwitchHaOutput() SwitchHaOutput {
	return o
}

func (o SwitchHaOutput) ToSwitchHaOutputWithContext(ctx context.Context) SwitchHaOutput {
	return o
}

// Instance ID in the format of tdsql-ow728lmc.
func (o SwitchHaOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchHa) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Target AZ. The node with the lowest delay in the target AZ will be automatically promoted to primary node.
func (o SwitchHaOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchHa) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type SwitchHaArrayOutput struct{ *pulumi.OutputState }

func (SwitchHaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchHa)(nil)).Elem()
}

func (o SwitchHaArrayOutput) ToSwitchHaArrayOutput() SwitchHaArrayOutput {
	return o
}

func (o SwitchHaArrayOutput) ToSwitchHaArrayOutputWithContext(ctx context.Context) SwitchHaArrayOutput {
	return o
}

func (o SwitchHaArrayOutput) Index(i pulumi.IntInput) SwitchHaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchHa {
		return vs[0].([]*SwitchHa)[vs[1].(int)]
	}).(SwitchHaOutput)
}

type SwitchHaMapOutput struct{ *pulumi.OutputState }

func (SwitchHaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchHa)(nil)).Elem()
}

func (o SwitchHaMapOutput) ToSwitchHaMapOutput() SwitchHaMapOutput {
	return o
}

func (o SwitchHaMapOutput) ToSwitchHaMapOutputWithContext(ctx context.Context) SwitchHaMapOutput {
	return o
}

func (o SwitchHaMapOutput) MapIndex(k pulumi.StringInput) SwitchHaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchHa {
		return vs[0].(map[string]*SwitchHa)[vs[1].(string)]
	}).(SwitchHaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchHaInput)(nil)).Elem(), &SwitchHa{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchHaArrayInput)(nil)).Elem(), SwitchHaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchHaMapInput)(nil)).Elem(), SwitchHaMap{})
	pulumi.RegisterOutputType(SwitchHaOutput{})
	pulumi.RegisterOutputType(SwitchHaArrayOutput{})
	pulumi.RegisterOutputType(SwitchHaMapOutput{})
}
