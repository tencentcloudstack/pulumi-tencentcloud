// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mariadb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mariadb instance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mariadb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mariadb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mariadb.NewInstance(ctx, "instance", &Mariadb.InstanceArgs{
//				AutoRenewFlag: pulumi.Int(1),
//				DbVersionId:   pulumi.String("8.0"),
//				DcnInstanceId: pulumi.String(""),
//				DcnRegion:     pulumi.String(""),
//				InitParams: mariadb.InstanceInitParamArray{
//					&mariadb.InstanceInitParamArgs{
//						Param: pulumi.String("character_set_server"),
//						Value: pulumi.String("utf8mb4"),
//					},
//					&mariadb.InstanceInitParamArgs{
//						Param: pulumi.String("lower_case_table_names"),
//						Value: pulumi.String("0"),
//					},
//					&mariadb.InstanceInitParamArgs{
//						Param: pulumi.String("innodb_page_size"),
//						Value: pulumi.String("16384"),
//					},
//					&mariadb.InstanceInitParamArgs{
//						Param: pulumi.String("sync_mode"),
//						Value: pulumi.String("1"),
//					},
//				},
//				InstanceName: pulumi.String("terraform-test"),
//				Ipv6Flag:     pulumi.Int(0),
//				Memory:       pulumi.Int(8),
//				NodeCount:    pulumi.Int(2),
//				Period:       pulumi.Int(1),
//				Storage:      pulumi.Int(10),
//				SubnetId:     pulumi.String("subnet-3ku415by"),
//				Tags: pulumi.AnyMap{
//					"createby": pulumi.Any("terrafrom-2"),
//				},
//				VpcId: pulumi.String("vpc-ii1jfbhl"),
//				Zones: pulumi.StringArray{
//					pulumi.String("ap-guangzhou-3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mariadb tencentcloud_mariadb_instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mariadb/instance:Instance instance tdsql-4pzs5b67
//
// ```
type Instance struct {
	pulumi.CustomResourceState

	// ID of the application to which the instance belongs.
	AppId pulumi.IntOutput `pulumi:"appId"`
	// Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
	AutoRenewFlag pulumi.IntOutput `pulumi:"autoRenewFlag"`
	// Whether to automatically use the voucher for payment, the default is not used.
	AutoVoucher pulumi.BoolPtrOutput `pulumi:"autoVoucher"`
	// Number of CPU cores of the instance.
	Cpu pulumi.IntOutput `pulumi:"cpu"`
	// Instance creation time, the format is 2006-01-02 15:04:05.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Database Engine.
	DbEngine pulumi.StringOutput `pulumi:"dbEngine"`
	// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
	DbVersionId pulumi.StringOutput `pulumi:"dbVersionId"`
	// Number of DCN disaster recovery instances.
	DcnDstNum pulumi.IntOutput `pulumi:"dcnDstNum"`
	// DCN flag, 0-none, 1-primary instance, 2-disaster backup instance.
	DcnFlag pulumi.IntOutput `pulumi:"dcnFlag"`
	// DCN source instance ID.
	DcnInstanceId pulumi.StringPtrOutput `pulumi:"dcnInstanceId"`
	// DCN source region.
	DcnRegion pulumi.StringPtrOutput `pulumi:"dcnRegion"`
	// DCN status, 0-none, 1-creating, 2-synchronizing, 3-disconnected.
	DcnStatus pulumi.IntOutput `pulumi:"dcnStatus"`
	// Exclusive cluster ID, if it is empty, it means a normal instance.
	ExclusterId pulumi.StringOutput `pulumi:"exclusterId"`
	// Parameter list. The optional values of this interface are: characterSetServer (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lowerCaseTableNames (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodbPageSize (innodb data page, Default 16K), syncMode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
	InitParams InstanceInitParamArrayOutput `pulumi:"initParams"`
	// Instance ID, uniquely identifies a TDSQL instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name, you can set the name of the instance independently through this field.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// 1: primary instance (exclusive), 2: primary instance, 3: disaster recovery instance, 4: disaster recovery instance (exclusive type).
	InstanceType pulumi.IntOutput `pulumi:"instanceType"`
	// Whether IPv6 is supported.
	Ipv6Flag pulumi.IntOutput `pulumi:"ipv6Flag"`
	// Whether the instance supports auditing. 1-supported; 0-not supported.
	IsAuditSupported pulumi.IntOutput `pulumi:"isAuditSupported"`
	// Whether data encryption is supported. 1-supported; 0-not supported.
	IsEncryptSupported pulumi.IntOutput `pulumi:"isEncryptSupported"`
	// Whether it is a temporary instance, 0 means no, non-zero means yes.
	IsTmp pulumi.IntOutput `pulumi:"isTmp"`
	// Asynchronous task process ID when the instance is in an asynchronous task.
	Locker pulumi.IntOutput `pulumi:"locker"`
	// Machine Model.
	Machine pulumi.StringOutput `pulumi:"machine"`
	// Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
	Memory pulumi.IntOutput `pulumi:"memory"`
	// Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// Payment Mode.
	Paymode pulumi.StringOutput `pulumi:"paymode"`
	// The duration of the purchase, unit: month.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Instance expiration time, the format is 2006-01-02 15:04:05.
	PeriodEndTime pulumi.StringOutput `pulumi:"periodEndTime"`
	// Product Type ID.
	Pid pulumi.IntOutput `pulumi:"pid"`
	// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Maximum Qps value.
	Qps pulumi.IntOutput `pulumi:"qps"`
	// The name of the region where the instance is located, such as ap-shanghai.
	Region pulumi.StringOutput `pulumi:"region"`
	// Security group ID list.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Instance status: 0 creating, 1 process processing, 2 running, 3 instance not initialized, -1 instance isolated, 4 instance initializing, 5 instance deleting, 6 instance restarting, 7 data migration.
	Status pulumi.IntOutput `pulumi:"status"`
	// Description of the current running state of the instance.
	StatusDesc pulumi.StringOutput `pulumi:"statusDesc"`
	// Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
	Storage pulumi.IntOutput `pulumi:"storage"`
	// Virtual private network subnet ID, required when VpcId is not empty.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// tag list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// TDSQL version information.
	TdsqlVersion pulumi.StringOutput `pulumi:"tdsqlVersion"`
	// The account to which the instance belongs.
	Uin pulumi.StringOutput `pulumi:"uin"`
	// The last update time of the instance in the format of 2006-01-02 15:04:05.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Intranet IP address.
	Vip pulumi.StringOutput `pulumi:"vip"`
	// Intranet IPv6.
	Vipv6 pulumi.StringOutput `pulumi:"vipv6"`
	// A list of voucher IDs. Currently, only one voucher can be specified.
	VoucherIds pulumi.StringArrayOutput `pulumi:"voucherIds"`
	// Virtual private network ID, if not passed, it means that it is created as a basic network.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Intranet port.
	Vport pulumi.IntOutput `pulumi:"vport"`
	// The domain name accessed from the external network, which can be resolved by the public network.
	WanDomain pulumi.StringOutput `pulumi:"wanDomain"`
	// Internet port.
	WanPort pulumi.IntOutput `pulumi:"wanPort"`
	// Internet IPv6 port.
	WanPortIpv6 pulumi.IntOutput `pulumi:"wanPortIpv6"`
	// External network status, 0-unopened; 1-opened; 2-closed; 3-opening.
	WanStatus pulumi.IntOutput `pulumi:"wanStatus"`
	// Internet IPv6 status.
	WanStatusIpv6 pulumi.IntOutput `pulumi:"wanStatusIpv6"`
	// Extranet IP address, accessible from the public network.
	WanVip pulumi.StringOutput `pulumi:"wanVip"`
	// Internet IPv6.
	WanVipv6 pulumi.StringOutput `pulumi:"wanVipv6"`
	// Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Memory == nil {
		return nil, errors.New("invalid value for required argument 'Memory'")
	}
	if args.NodeCount == nil {
		return nil, errors.New("invalid value for required argument 'NodeCount'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	if args.Zones == nil {
		return nil, errors.New("invalid value for required argument 'Zones'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("tencentcloud:Mariadb/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("tencentcloud:Mariadb/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// ID of the application to which the instance belongs.
	AppId *int `pulumi:"appId"`
	// Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// Whether to automatically use the voucher for payment, the default is not used.
	AutoVoucher *bool `pulumi:"autoVoucher"`
	// Number of CPU cores of the instance.
	Cpu *int `pulumi:"cpu"`
	// Instance creation time, the format is 2006-01-02 15:04:05.
	CreateTime *string `pulumi:"createTime"`
	// Database Engine.
	DbEngine *string `pulumi:"dbEngine"`
	// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
	DbVersionId *string `pulumi:"dbVersionId"`
	// Number of DCN disaster recovery instances.
	DcnDstNum *int `pulumi:"dcnDstNum"`
	// DCN flag, 0-none, 1-primary instance, 2-disaster backup instance.
	DcnFlag *int `pulumi:"dcnFlag"`
	// DCN source instance ID.
	DcnInstanceId *string `pulumi:"dcnInstanceId"`
	// DCN source region.
	DcnRegion *string `pulumi:"dcnRegion"`
	// DCN status, 0-none, 1-creating, 2-synchronizing, 3-disconnected.
	DcnStatus *int `pulumi:"dcnStatus"`
	// Exclusive cluster ID, if it is empty, it means a normal instance.
	ExclusterId *string `pulumi:"exclusterId"`
	// Parameter list. The optional values of this interface are: characterSetServer (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lowerCaseTableNames (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodbPageSize (innodb data page, Default 16K), syncMode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
	InitParams []InstanceInitParam `pulumi:"initParams"`
	// Instance ID, uniquely identifies a TDSQL instance.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name, you can set the name of the instance independently through this field.
	InstanceName *string `pulumi:"instanceName"`
	// 1: primary instance (exclusive), 2: primary instance, 3: disaster recovery instance, 4: disaster recovery instance (exclusive type).
	InstanceType *int `pulumi:"instanceType"`
	// Whether IPv6 is supported.
	Ipv6Flag *int `pulumi:"ipv6Flag"`
	// Whether the instance supports auditing. 1-supported; 0-not supported.
	IsAuditSupported *int `pulumi:"isAuditSupported"`
	// Whether data encryption is supported. 1-supported; 0-not supported.
	IsEncryptSupported *int `pulumi:"isEncryptSupported"`
	// Whether it is a temporary instance, 0 means no, non-zero means yes.
	IsTmp *int `pulumi:"isTmp"`
	// Asynchronous task process ID when the instance is in an asynchronous task.
	Locker *int `pulumi:"locker"`
	// Machine Model.
	Machine *string `pulumi:"machine"`
	// Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
	Memory *int `pulumi:"memory"`
	// Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
	NodeCount *int `pulumi:"nodeCount"`
	// Payment Mode.
	Paymode *string `pulumi:"paymode"`
	// The duration of the purchase, unit: month.
	Period *int `pulumi:"period"`
	// Instance expiration time, the format is 2006-01-02 15:04:05.
	PeriodEndTime *string `pulumi:"periodEndTime"`
	// Product Type ID.
	Pid *int `pulumi:"pid"`
	// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
	ProjectId *int `pulumi:"projectId"`
	// Maximum Qps value.
	Qps *int `pulumi:"qps"`
	// The name of the region where the instance is located, such as ap-shanghai.
	Region *string `pulumi:"region"`
	// Security group ID list.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Instance status: 0 creating, 1 process processing, 2 running, 3 instance not initialized, -1 instance isolated, 4 instance initializing, 5 instance deleting, 6 instance restarting, 7 data migration.
	Status *int `pulumi:"status"`
	// Description of the current running state of the instance.
	StatusDesc *string `pulumi:"statusDesc"`
	// Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
	Storage *int `pulumi:"storage"`
	// Virtual private network subnet ID, required when VpcId is not empty.
	SubnetId *string `pulumi:"subnetId"`
	// tag list.
	Tags map[string]interface{} `pulumi:"tags"`
	// TDSQL version information.
	TdsqlVersion *string `pulumi:"tdsqlVersion"`
	// The account to which the instance belongs.
	Uin *string `pulumi:"uin"`
	// The last update time of the instance in the format of 2006-01-02 15:04:05.
	UpdateTime *string `pulumi:"updateTime"`
	// Intranet IP address.
	Vip *string `pulumi:"vip"`
	// Intranet IPv6.
	Vipv6 *string `pulumi:"vipv6"`
	// A list of voucher IDs. Currently, only one voucher can be specified.
	VoucherIds []string `pulumi:"voucherIds"`
	// Virtual private network ID, if not passed, it means that it is created as a basic network.
	VpcId *string `pulumi:"vpcId"`
	// Intranet port.
	Vport *int `pulumi:"vport"`
	// The domain name accessed from the external network, which can be resolved by the public network.
	WanDomain *string `pulumi:"wanDomain"`
	// Internet port.
	WanPort *int `pulumi:"wanPort"`
	// Internet IPv6 port.
	WanPortIpv6 *int `pulumi:"wanPortIpv6"`
	// External network status, 0-unopened; 1-opened; 2-closed; 3-opening.
	WanStatus *int `pulumi:"wanStatus"`
	// Internet IPv6 status.
	WanStatusIpv6 *int `pulumi:"wanStatusIpv6"`
	// Extranet IP address, accessible from the public network.
	WanVip *string `pulumi:"wanVip"`
	// Internet IPv6.
	WanVipv6 *string `pulumi:"wanVipv6"`
	// Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
	Zones []string `pulumi:"zones"`
}

type InstanceState struct {
	// ID of the application to which the instance belongs.
	AppId pulumi.IntPtrInput
	// Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
	AutoRenewFlag pulumi.IntPtrInput
	// Whether to automatically use the voucher for payment, the default is not used.
	AutoVoucher pulumi.BoolPtrInput
	// Number of CPU cores of the instance.
	Cpu pulumi.IntPtrInput
	// Instance creation time, the format is 2006-01-02 15:04:05.
	CreateTime pulumi.StringPtrInput
	// Database Engine.
	DbEngine pulumi.StringPtrInput
	// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
	DbVersionId pulumi.StringPtrInput
	// Number of DCN disaster recovery instances.
	DcnDstNum pulumi.IntPtrInput
	// DCN flag, 0-none, 1-primary instance, 2-disaster backup instance.
	DcnFlag pulumi.IntPtrInput
	// DCN source instance ID.
	DcnInstanceId pulumi.StringPtrInput
	// DCN source region.
	DcnRegion pulumi.StringPtrInput
	// DCN status, 0-none, 1-creating, 2-synchronizing, 3-disconnected.
	DcnStatus pulumi.IntPtrInput
	// Exclusive cluster ID, if it is empty, it means a normal instance.
	ExclusterId pulumi.StringPtrInput
	// Parameter list. The optional values of this interface are: characterSetServer (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lowerCaseTableNames (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodbPageSize (innodb data page, Default 16K), syncMode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
	InitParams InstanceInitParamArrayInput
	// Instance ID, uniquely identifies a TDSQL instance.
	InstanceId pulumi.StringPtrInput
	// Instance name, you can set the name of the instance independently through this field.
	InstanceName pulumi.StringPtrInput
	// 1: primary instance (exclusive), 2: primary instance, 3: disaster recovery instance, 4: disaster recovery instance (exclusive type).
	InstanceType pulumi.IntPtrInput
	// Whether IPv6 is supported.
	Ipv6Flag pulumi.IntPtrInput
	// Whether the instance supports auditing. 1-supported; 0-not supported.
	IsAuditSupported pulumi.IntPtrInput
	// Whether data encryption is supported. 1-supported; 0-not supported.
	IsEncryptSupported pulumi.IntPtrInput
	// Whether it is a temporary instance, 0 means no, non-zero means yes.
	IsTmp pulumi.IntPtrInput
	// Asynchronous task process ID when the instance is in an asynchronous task.
	Locker pulumi.IntPtrInput
	// Machine Model.
	Machine pulumi.StringPtrInput
	// Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
	Memory pulumi.IntPtrInput
	// Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
	NodeCount pulumi.IntPtrInput
	// Payment Mode.
	Paymode pulumi.StringPtrInput
	// The duration of the purchase, unit: month.
	Period pulumi.IntPtrInput
	// Instance expiration time, the format is 2006-01-02 15:04:05.
	PeriodEndTime pulumi.StringPtrInput
	// Product Type ID.
	Pid pulumi.IntPtrInput
	// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
	ProjectId pulumi.IntPtrInput
	// Maximum Qps value.
	Qps pulumi.IntPtrInput
	// The name of the region where the instance is located, such as ap-shanghai.
	Region pulumi.StringPtrInput
	// Security group ID list.
	SecurityGroupIds pulumi.StringArrayInput
	// Instance status: 0 creating, 1 process processing, 2 running, 3 instance not initialized, -1 instance isolated, 4 instance initializing, 5 instance deleting, 6 instance restarting, 7 data migration.
	Status pulumi.IntPtrInput
	// Description of the current running state of the instance.
	StatusDesc pulumi.StringPtrInput
	// Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
	Storage pulumi.IntPtrInput
	// Virtual private network subnet ID, required when VpcId is not empty.
	SubnetId pulumi.StringPtrInput
	// tag list.
	Tags pulumi.MapInput
	// TDSQL version information.
	TdsqlVersion pulumi.StringPtrInput
	// The account to which the instance belongs.
	Uin pulumi.StringPtrInput
	// The last update time of the instance in the format of 2006-01-02 15:04:05.
	UpdateTime pulumi.StringPtrInput
	// Intranet IP address.
	Vip pulumi.StringPtrInput
	// Intranet IPv6.
	Vipv6 pulumi.StringPtrInput
	// A list of voucher IDs. Currently, only one voucher can be specified.
	VoucherIds pulumi.StringArrayInput
	// Virtual private network ID, if not passed, it means that it is created as a basic network.
	VpcId pulumi.StringPtrInput
	// Intranet port.
	Vport pulumi.IntPtrInput
	// The domain name accessed from the external network, which can be resolved by the public network.
	WanDomain pulumi.StringPtrInput
	// Internet port.
	WanPort pulumi.IntPtrInput
	// Internet IPv6 port.
	WanPortIpv6 pulumi.IntPtrInput
	// External network status, 0-unopened; 1-opened; 2-closed; 3-opening.
	WanStatus pulumi.IntPtrInput
	// Internet IPv6 status.
	WanStatusIpv6 pulumi.IntPtrInput
	// Extranet IP address, accessible from the public network.
	WanVip pulumi.StringPtrInput
	// Internet IPv6.
	WanVipv6 pulumi.StringPtrInput
	// Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
	Zones pulumi.StringArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// Whether to automatically use the voucher for payment, the default is not used.
	AutoVoucher *bool `pulumi:"autoVoucher"`
	// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
	DbVersionId *string `pulumi:"dbVersionId"`
	// DCN source instance ID.
	DcnInstanceId *string `pulumi:"dcnInstanceId"`
	// DCN source region.
	DcnRegion *string `pulumi:"dcnRegion"`
	// Parameter list. The optional values of this interface are: characterSetServer (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lowerCaseTableNames (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodbPageSize (innodb data page, Default 16K), syncMode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
	InitParams []InstanceInitParam `pulumi:"initParams"`
	// Instance name, you can set the name of the instance independently through this field.
	InstanceName *string `pulumi:"instanceName"`
	// Whether IPv6 is supported.
	Ipv6Flag *int `pulumi:"ipv6Flag"`
	// Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
	Memory int `pulumi:"memory"`
	// Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
	NodeCount int `pulumi:"nodeCount"`
	// The duration of the purchase, unit: month.
	Period *int `pulumi:"period"`
	// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
	ProjectId *int `pulumi:"projectId"`
	// Security group ID list.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
	Storage int `pulumi:"storage"`
	// Virtual private network subnet ID, required when VpcId is not empty.
	SubnetId *string `pulumi:"subnetId"`
	// tag list.
	Tags map[string]interface{} `pulumi:"tags"`
	// Intranet IP address.
	Vip *string `pulumi:"vip"`
	// A list of voucher IDs. Currently, only one voucher can be specified.
	VoucherIds []string `pulumi:"voucherIds"`
	// Virtual private network ID, if not passed, it means that it is created as a basic network.
	VpcId *string `pulumi:"vpcId"`
	// Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
	AutoRenewFlag pulumi.IntPtrInput
	// Whether to automatically use the voucher for payment, the default is not used.
	AutoVoucher pulumi.BoolPtrInput
	// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
	DbVersionId pulumi.StringPtrInput
	// DCN source instance ID.
	DcnInstanceId pulumi.StringPtrInput
	// DCN source region.
	DcnRegion pulumi.StringPtrInput
	// Parameter list. The optional values of this interface are: characterSetServer (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lowerCaseTableNames (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodbPageSize (innodb data page, Default 16K), syncMode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
	InitParams InstanceInitParamArrayInput
	// Instance name, you can set the name of the instance independently through this field.
	InstanceName pulumi.StringPtrInput
	// Whether IPv6 is supported.
	Ipv6Flag pulumi.IntPtrInput
	// Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
	Memory pulumi.IntInput
	// Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
	NodeCount pulumi.IntInput
	// The duration of the purchase, unit: month.
	Period pulumi.IntPtrInput
	// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
	ProjectId pulumi.IntPtrInput
	// Security group ID list.
	SecurityGroupIds pulumi.StringArrayInput
	// Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
	Storage pulumi.IntInput
	// Virtual private network subnet ID, required when VpcId is not empty.
	SubnetId pulumi.StringPtrInput
	// tag list.
	Tags pulumi.MapInput
	// Intranet IP address.
	Vip pulumi.StringPtrInput
	// A list of voucher IDs. Currently, only one voucher can be specified.
	VoucherIds pulumi.StringArrayInput
	// Virtual private network ID, if not passed, it means that it is created as a basic network.
	VpcId pulumi.StringPtrInput
	// Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
	Zones pulumi.StringArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// ID of the application to which the instance belongs.
func (o InstanceOutput) AppId() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.AppId }).(pulumi.IntOutput)
}

// Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
func (o InstanceOutput) AutoRenewFlag() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.AutoRenewFlag }).(pulumi.IntOutput)
}

// Whether to automatically use the voucher for payment, the default is not used.
func (o InstanceOutput) AutoVoucher() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.AutoVoucher }).(pulumi.BoolPtrOutput)
}

// Number of CPU cores of the instance.
func (o InstanceOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Cpu }).(pulumi.IntOutput)
}

// Instance creation time, the format is 2006-01-02 15:04:05.
func (o InstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Database Engine.
func (o InstanceOutput) DbEngine() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DbEngine }).(pulumi.StringOutput)
}

// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
func (o InstanceOutput) DbVersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DbVersionId }).(pulumi.StringOutput)
}

// Number of DCN disaster recovery instances.
func (o InstanceOutput) DcnDstNum() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.DcnDstNum }).(pulumi.IntOutput)
}

// DCN flag, 0-none, 1-primary instance, 2-disaster backup instance.
func (o InstanceOutput) DcnFlag() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.DcnFlag }).(pulumi.IntOutput)
}

// DCN source instance ID.
func (o InstanceOutput) DcnInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.DcnInstanceId }).(pulumi.StringPtrOutput)
}

// DCN source region.
func (o InstanceOutput) DcnRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.DcnRegion }).(pulumi.StringPtrOutput)
}

// DCN status, 0-none, 1-creating, 2-synchronizing, 3-disconnected.
func (o InstanceOutput) DcnStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.DcnStatus }).(pulumi.IntOutput)
}

// Exclusive cluster ID, if it is empty, it means a normal instance.
func (o InstanceOutput) ExclusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ExclusterId }).(pulumi.StringOutput)
}

// Parameter list. The optional values of this interface are: characterSetServer (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lowerCaseTableNames (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodbPageSize (innodb data page, Default 16K), syncMode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
func (o InstanceOutput) InitParams() InstanceInitParamArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceInitParamArrayOutput { return v.InitParams }).(InstanceInitParamArrayOutput)
}

// Instance ID, uniquely identifies a TDSQL instance.
func (o InstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name, you can set the name of the instance independently through this field.
func (o InstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// 1: primary instance (exclusive), 2: primary instance, 3: disaster recovery instance, 4: disaster recovery instance (exclusive type).
func (o InstanceOutput) InstanceType() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.InstanceType }).(pulumi.IntOutput)
}

// Whether IPv6 is supported.
func (o InstanceOutput) Ipv6Flag() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Ipv6Flag }).(pulumi.IntOutput)
}

// Whether the instance supports auditing. 1-supported; 0-not supported.
func (o InstanceOutput) IsAuditSupported() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.IsAuditSupported }).(pulumi.IntOutput)
}

// Whether data encryption is supported. 1-supported; 0-not supported.
func (o InstanceOutput) IsEncryptSupported() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.IsEncryptSupported }).(pulumi.IntOutput)
}

// Whether it is a temporary instance, 0 means no, non-zero means yes.
func (o InstanceOutput) IsTmp() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.IsTmp }).(pulumi.IntOutput)
}

// Asynchronous task process ID when the instance is in an asynchronous task.
func (o InstanceOutput) Locker() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Locker }).(pulumi.IntOutput)
}

// Machine Model.
func (o InstanceOutput) Machine() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Machine }).(pulumi.StringOutput)
}

// Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
func (o InstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

// Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
func (o InstanceOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.NodeCount }).(pulumi.IntOutput)
}

// Payment Mode.
func (o InstanceOutput) Paymode() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Paymode }).(pulumi.StringOutput)
}

// The duration of the purchase, unit: month.
func (o InstanceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Instance expiration time, the format is 2006-01-02 15:04:05.
func (o InstanceOutput) PeriodEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PeriodEndTime }).(pulumi.StringOutput)
}

// Product Type ID.
func (o InstanceOutput) Pid() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Pid }).(pulumi.IntOutput)
}

// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
func (o InstanceOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Maximum Qps value.
func (o InstanceOutput) Qps() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Qps }).(pulumi.IntOutput)
}

// The name of the region where the instance is located, such as ap-shanghai.
func (o InstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Security group ID list.
func (o InstanceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Instance status: 0 creating, 1 process processing, 2 running, 3 instance not initialized, -1 instance isolated, 4 instance initializing, 5 instance deleting, 6 instance restarting, 7 data migration.
func (o InstanceOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Description of the current running state of the instance.
func (o InstanceOutput) StatusDesc() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.StatusDesc }).(pulumi.StringOutput)
}

// Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
func (o InstanceOutput) Storage() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Storage }).(pulumi.IntOutput)
}

// Virtual private network subnet ID, required when VpcId is not empty.
func (o InstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// tag list.
func (o InstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Instance) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// TDSQL version information.
func (o InstanceOutput) TdsqlVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.TdsqlVersion }).(pulumi.StringOutput)
}

// The account to which the instance belongs.
func (o InstanceOutput) Uin() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Uin }).(pulumi.StringOutput)
}

// The last update time of the instance in the format of 2006-01-02 15:04:05.
func (o InstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Intranet IP address.
func (o InstanceOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Vip }).(pulumi.StringOutput)
}

// Intranet IPv6.
func (o InstanceOutput) Vipv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Vipv6 }).(pulumi.StringOutput)
}

// A list of voucher IDs. Currently, only one voucher can be specified.
func (o InstanceOutput) VoucherIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.VoucherIds }).(pulumi.StringArrayOutput)
}

// Virtual private network ID, if not passed, it means that it is created as a basic network.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Intranet port.
func (o InstanceOutput) Vport() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Vport }).(pulumi.IntOutput)
}

// The domain name accessed from the external network, which can be resolved by the public network.
func (o InstanceOutput) WanDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.WanDomain }).(pulumi.StringOutput)
}

// Internet port.
func (o InstanceOutput) WanPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.WanPort }).(pulumi.IntOutput)
}

// Internet IPv6 port.
func (o InstanceOutput) WanPortIpv6() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.WanPortIpv6 }).(pulumi.IntOutput)
}

// External network status, 0-unopened; 1-opened; 2-closed; 3-opening.
func (o InstanceOutput) WanStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.WanStatus }).(pulumi.IntOutput)
}

// Internet IPv6 status.
func (o InstanceOutput) WanStatusIpv6() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.WanStatusIpv6 }).(pulumi.IntOutput)
}

// Extranet IP address, accessible from the public network.
func (o InstanceOutput) WanVip() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.WanVip }).(pulumi.StringOutput)
}

// Internet IPv6.
func (o InstanceOutput) WanVipv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.WanVipv6 }).(pulumi.StringOutput)
}

// Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
func (o InstanceOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
