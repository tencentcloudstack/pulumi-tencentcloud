// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mariadb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mariadb activateHourDbInstance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mariadb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mariadb.NewOperateHourDbInstance(ctx, "activateHourDbInstance", &Mariadb.OperateHourDbInstanceArgs{
//				InstanceId: pulumi.String("tdsql-9vqvls95"),
//				Operate:    pulumi.String("activate"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type OperateHourDbInstance struct {
	pulumi.CustomResourceState

	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Operation, `activate`- activate the hour db instance, `isolate`- isolate the hour db instance.
	Operate pulumi.StringOutput `pulumi:"operate"`
}

// NewOperateHourDbInstance registers a new resource with the given unique name, arguments, and options.
func NewOperateHourDbInstance(ctx *pulumi.Context,
	name string, args *OperateHourDbInstanceArgs, opts ...pulumi.ResourceOption) (*OperateHourDbInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Operate == nil {
		return nil, errors.New("invalid value for required argument 'Operate'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource OperateHourDbInstance
	err := ctx.RegisterResource("tencentcloud:Mariadb/operateHourDbInstance:OperateHourDbInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOperateHourDbInstance gets an existing OperateHourDbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOperateHourDbInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OperateHourDbInstanceState, opts ...pulumi.ResourceOption) (*OperateHourDbInstance, error) {
	var resource OperateHourDbInstance
	err := ctx.ReadResource("tencentcloud:Mariadb/operateHourDbInstance:OperateHourDbInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OperateHourDbInstance resources.
type operateHourDbInstanceState struct {
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Operation, `activate`- activate the hour db instance, `isolate`- isolate the hour db instance.
	Operate *string `pulumi:"operate"`
}

type OperateHourDbInstanceState struct {
	// Instance ID.
	InstanceId pulumi.StringPtrInput
	// Operation, `activate`- activate the hour db instance, `isolate`- isolate the hour db instance.
	Operate pulumi.StringPtrInput
}

func (OperateHourDbInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*operateHourDbInstanceState)(nil)).Elem()
}

type operateHourDbInstanceArgs struct {
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Operation, `activate`- activate the hour db instance, `isolate`- isolate the hour db instance.
	Operate string `pulumi:"operate"`
}

// The set of arguments for constructing a OperateHourDbInstance resource.
type OperateHourDbInstanceArgs struct {
	// Instance ID.
	InstanceId pulumi.StringInput
	// Operation, `activate`- activate the hour db instance, `isolate`- isolate the hour db instance.
	Operate pulumi.StringInput
}

func (OperateHourDbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*operateHourDbInstanceArgs)(nil)).Elem()
}

type OperateHourDbInstanceInput interface {
	pulumi.Input

	ToOperateHourDbInstanceOutput() OperateHourDbInstanceOutput
	ToOperateHourDbInstanceOutputWithContext(ctx context.Context) OperateHourDbInstanceOutput
}

func (*OperateHourDbInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**OperateHourDbInstance)(nil)).Elem()
}

func (i *OperateHourDbInstance) ToOperateHourDbInstanceOutput() OperateHourDbInstanceOutput {
	return i.ToOperateHourDbInstanceOutputWithContext(context.Background())
}

func (i *OperateHourDbInstance) ToOperateHourDbInstanceOutputWithContext(ctx context.Context) OperateHourDbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperateHourDbInstanceOutput)
}

// OperateHourDbInstanceArrayInput is an input type that accepts OperateHourDbInstanceArray and OperateHourDbInstanceArrayOutput values.
// You can construct a concrete instance of `OperateHourDbInstanceArrayInput` via:
//
//	OperateHourDbInstanceArray{ OperateHourDbInstanceArgs{...} }
type OperateHourDbInstanceArrayInput interface {
	pulumi.Input

	ToOperateHourDbInstanceArrayOutput() OperateHourDbInstanceArrayOutput
	ToOperateHourDbInstanceArrayOutputWithContext(context.Context) OperateHourDbInstanceArrayOutput
}

type OperateHourDbInstanceArray []OperateHourDbInstanceInput

func (OperateHourDbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperateHourDbInstance)(nil)).Elem()
}

func (i OperateHourDbInstanceArray) ToOperateHourDbInstanceArrayOutput() OperateHourDbInstanceArrayOutput {
	return i.ToOperateHourDbInstanceArrayOutputWithContext(context.Background())
}

func (i OperateHourDbInstanceArray) ToOperateHourDbInstanceArrayOutputWithContext(ctx context.Context) OperateHourDbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperateHourDbInstanceArrayOutput)
}

// OperateHourDbInstanceMapInput is an input type that accepts OperateHourDbInstanceMap and OperateHourDbInstanceMapOutput values.
// You can construct a concrete instance of `OperateHourDbInstanceMapInput` via:
//
//	OperateHourDbInstanceMap{ "key": OperateHourDbInstanceArgs{...} }
type OperateHourDbInstanceMapInput interface {
	pulumi.Input

	ToOperateHourDbInstanceMapOutput() OperateHourDbInstanceMapOutput
	ToOperateHourDbInstanceMapOutputWithContext(context.Context) OperateHourDbInstanceMapOutput
}

type OperateHourDbInstanceMap map[string]OperateHourDbInstanceInput

func (OperateHourDbInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperateHourDbInstance)(nil)).Elem()
}

func (i OperateHourDbInstanceMap) ToOperateHourDbInstanceMapOutput() OperateHourDbInstanceMapOutput {
	return i.ToOperateHourDbInstanceMapOutputWithContext(context.Background())
}

func (i OperateHourDbInstanceMap) ToOperateHourDbInstanceMapOutputWithContext(ctx context.Context) OperateHourDbInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperateHourDbInstanceMapOutput)
}

type OperateHourDbInstanceOutput struct{ *pulumi.OutputState }

func (OperateHourDbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperateHourDbInstance)(nil)).Elem()
}

func (o OperateHourDbInstanceOutput) ToOperateHourDbInstanceOutput() OperateHourDbInstanceOutput {
	return o
}

func (o OperateHourDbInstanceOutput) ToOperateHourDbInstanceOutputWithContext(ctx context.Context) OperateHourDbInstanceOutput {
	return o
}

// Instance ID.
func (o OperateHourDbInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *OperateHourDbInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Operation, `activate`- activate the hour db instance, `isolate`- isolate the hour db instance.
func (o OperateHourDbInstanceOutput) Operate() pulumi.StringOutput {
	return o.ApplyT(func(v *OperateHourDbInstance) pulumi.StringOutput { return v.Operate }).(pulumi.StringOutput)
}

type OperateHourDbInstanceArrayOutput struct{ *pulumi.OutputState }

func (OperateHourDbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperateHourDbInstance)(nil)).Elem()
}

func (o OperateHourDbInstanceArrayOutput) ToOperateHourDbInstanceArrayOutput() OperateHourDbInstanceArrayOutput {
	return o
}

func (o OperateHourDbInstanceArrayOutput) ToOperateHourDbInstanceArrayOutputWithContext(ctx context.Context) OperateHourDbInstanceArrayOutput {
	return o
}

func (o OperateHourDbInstanceArrayOutput) Index(i pulumi.IntInput) OperateHourDbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OperateHourDbInstance {
		return vs[0].([]*OperateHourDbInstance)[vs[1].(int)]
	}).(OperateHourDbInstanceOutput)
}

type OperateHourDbInstanceMapOutput struct{ *pulumi.OutputState }

func (OperateHourDbInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperateHourDbInstance)(nil)).Elem()
}

func (o OperateHourDbInstanceMapOutput) ToOperateHourDbInstanceMapOutput() OperateHourDbInstanceMapOutput {
	return o
}

func (o OperateHourDbInstanceMapOutput) ToOperateHourDbInstanceMapOutputWithContext(ctx context.Context) OperateHourDbInstanceMapOutput {
	return o
}

func (o OperateHourDbInstanceMapOutput) MapIndex(k pulumi.StringInput) OperateHourDbInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OperateHourDbInstance {
		return vs[0].(map[string]*OperateHourDbInstance)[vs[1].(string)]
	}).(OperateHourDbInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OperateHourDbInstanceInput)(nil)).Elem(), &OperateHourDbInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperateHourDbInstanceArrayInput)(nil)).Elem(), OperateHourDbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperateHourDbInstanceMapInput)(nil)).Elem(), OperateHourDbInstanceMap{})
	pulumi.RegisterOutputType(OperateHourDbInstanceOutput{})
	pulumi.RegisterOutputType(OperateHourDbInstanceArrayOutput{})
	pulumi.RegisterOutputType(OperateHourDbInstanceMapOutput{})
}
