// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mariadb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mariadb accountPrivileges
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mariadb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mariadb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mariadb.NewAccountPrivileges(ctx, "accountPrivileges", &Mariadb.AccountPrivilegesArgs{
//				Accounts: &mariadb.AccountPrivilegesAccountsArgs{
//					Host: pulumi.String("127.0.0.1"),
//					User: pulumi.String("keep-modify-privileges"),
//				},
//				GlobalPrivileges: pulumi.StringArray{
//					pulumi.String("ALTER"),
//					pulumi.String("CREATE"),
//					pulumi.String("DELETE"),
//					pulumi.String("SELECT"),
//					pulumi.String("UPDATE"),
//					pulumi.String("DROP"),
//				},
//				InstanceId: pulumi.String("tdsql-9vqvls95"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mariadb account_privileges can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mariadb/accountPrivileges:AccountPrivileges account_privileges account_privileges_id
//
// ```
type AccountPrivileges struct {
	pulumi.CustomResourceState

	// account information.
	Accounts AccountPrivilegesAccountsOutput `pulumi:"accounts"`
	// Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
	ColumnPrivileges AccountPrivilegesColumnPrivilegeArrayOutput `pulumi:"columnPrivileges"`
	// Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
	DatabasePrivileges AccountPrivilegesDatabasePrivilegeArrayOutput `pulumi:"databasePrivileges"`
	// Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
	FunctionPrivileges AccountPrivilegesFunctionPrivilegeArrayOutput `pulumi:"functionPrivileges"`
	// Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
	GlobalPrivileges pulumi.StringArrayOutput `pulumi:"globalPrivileges"`
	// instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
	ProcedurePrivileges AccountPrivilegesProcedurePrivilegeArrayOutput `pulumi:"procedurePrivileges"`
	// `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
	TablePrivileges AccountPrivilegesTablePrivilegeArrayOutput `pulumi:"tablePrivileges"`
	// Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
	ViewPrivileges AccountPrivilegesViewPrivilegeArrayOutput `pulumi:"viewPrivileges"`
}

// NewAccountPrivileges registers a new resource with the given unique name, arguments, and options.
func NewAccountPrivileges(ctx *pulumi.Context,
	name string, args *AccountPrivilegesArgs, opts ...pulumi.ResourceOption) (*AccountPrivileges, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Accounts == nil {
		return nil, errors.New("invalid value for required argument 'Accounts'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AccountPrivileges
	err := ctx.RegisterResource("tencentcloud:Mariadb/accountPrivileges:AccountPrivileges", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountPrivileges gets an existing AccountPrivileges resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPrivileges(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountPrivilegesState, opts ...pulumi.ResourceOption) (*AccountPrivileges, error) {
	var resource AccountPrivileges
	err := ctx.ReadResource("tencentcloud:Mariadb/accountPrivileges:AccountPrivileges", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountPrivileges resources.
type accountPrivilegesState struct {
	// account information.
	Accounts *AccountPrivilegesAccounts `pulumi:"accounts"`
	// Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
	ColumnPrivileges []AccountPrivilegesColumnPrivilege `pulumi:"columnPrivileges"`
	// Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
	DatabasePrivileges []AccountPrivilegesDatabasePrivilege `pulumi:"databasePrivileges"`
	// Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
	FunctionPrivileges []AccountPrivilegesFunctionPrivilege `pulumi:"functionPrivileges"`
	// Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
	GlobalPrivileges []string `pulumi:"globalPrivileges"`
	// instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
	ProcedurePrivileges []AccountPrivilegesProcedurePrivilege `pulumi:"procedurePrivileges"`
	// `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
	TablePrivileges []AccountPrivilegesTablePrivilege `pulumi:"tablePrivileges"`
	// Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
	ViewPrivileges []AccountPrivilegesViewPrivilege `pulumi:"viewPrivileges"`
}

type AccountPrivilegesState struct {
	// account information.
	Accounts AccountPrivilegesAccountsPtrInput
	// Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
	ColumnPrivileges AccountPrivilegesColumnPrivilegeArrayInput
	// Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
	DatabasePrivileges AccountPrivilegesDatabasePrivilegeArrayInput
	// Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
	FunctionPrivileges AccountPrivilegesFunctionPrivilegeArrayInput
	// Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
	GlobalPrivileges pulumi.StringArrayInput
	// instance id.
	InstanceId pulumi.StringPtrInput
	// Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
	ProcedurePrivileges AccountPrivilegesProcedurePrivilegeArrayInput
	// `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
	TablePrivileges AccountPrivilegesTablePrivilegeArrayInput
	// Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
	ViewPrivileges AccountPrivilegesViewPrivilegeArrayInput
}

func (AccountPrivilegesState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPrivilegesState)(nil)).Elem()
}

type accountPrivilegesArgs struct {
	// account information.
	Accounts AccountPrivilegesAccounts `pulumi:"accounts"`
	// Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
	ColumnPrivileges []AccountPrivilegesColumnPrivilege `pulumi:"columnPrivileges"`
	// Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
	DatabasePrivileges []AccountPrivilegesDatabasePrivilege `pulumi:"databasePrivileges"`
	// Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
	FunctionPrivileges []AccountPrivilegesFunctionPrivilege `pulumi:"functionPrivileges"`
	// Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
	GlobalPrivileges []string `pulumi:"globalPrivileges"`
	// instance id.
	InstanceId string `pulumi:"instanceId"`
	// Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
	ProcedurePrivileges []AccountPrivilegesProcedurePrivilege `pulumi:"procedurePrivileges"`
	// `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
	TablePrivileges []AccountPrivilegesTablePrivilege `pulumi:"tablePrivileges"`
	// Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
	ViewPrivileges []AccountPrivilegesViewPrivilege `pulumi:"viewPrivileges"`
}

// The set of arguments for constructing a AccountPrivileges resource.
type AccountPrivilegesArgs struct {
	// account information.
	Accounts AccountPrivilegesAccountsInput
	// Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
	ColumnPrivileges AccountPrivilegesColumnPrivilegeArrayInput
	// Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
	DatabasePrivileges AccountPrivilegesDatabasePrivilegeArrayInput
	// Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
	FunctionPrivileges AccountPrivilegesFunctionPrivilegeArrayInput
	// Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
	GlobalPrivileges pulumi.StringArrayInput
	// instance id.
	InstanceId pulumi.StringInput
	// Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
	ProcedurePrivileges AccountPrivilegesProcedurePrivilegeArrayInput
	// `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
	TablePrivileges AccountPrivilegesTablePrivilegeArrayInput
	// Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
	ViewPrivileges AccountPrivilegesViewPrivilegeArrayInput
}

func (AccountPrivilegesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPrivilegesArgs)(nil)).Elem()
}

type AccountPrivilegesInput interface {
	pulumi.Input

	ToAccountPrivilegesOutput() AccountPrivilegesOutput
	ToAccountPrivilegesOutputWithContext(ctx context.Context) AccountPrivilegesOutput
}

func (*AccountPrivileges) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPrivileges)(nil)).Elem()
}

func (i *AccountPrivileges) ToAccountPrivilegesOutput() AccountPrivilegesOutput {
	return i.ToAccountPrivilegesOutputWithContext(context.Background())
}

func (i *AccountPrivileges) ToAccountPrivilegesOutputWithContext(ctx context.Context) AccountPrivilegesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPrivilegesOutput)
}

// AccountPrivilegesArrayInput is an input type that accepts AccountPrivilegesArray and AccountPrivilegesArrayOutput values.
// You can construct a concrete instance of `AccountPrivilegesArrayInput` via:
//
//	AccountPrivilegesArray{ AccountPrivilegesArgs{...} }
type AccountPrivilegesArrayInput interface {
	pulumi.Input

	ToAccountPrivilegesArrayOutput() AccountPrivilegesArrayOutput
	ToAccountPrivilegesArrayOutputWithContext(context.Context) AccountPrivilegesArrayOutput
}

type AccountPrivilegesArray []AccountPrivilegesInput

func (AccountPrivilegesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountPrivileges)(nil)).Elem()
}

func (i AccountPrivilegesArray) ToAccountPrivilegesArrayOutput() AccountPrivilegesArrayOutput {
	return i.ToAccountPrivilegesArrayOutputWithContext(context.Background())
}

func (i AccountPrivilegesArray) ToAccountPrivilegesArrayOutputWithContext(ctx context.Context) AccountPrivilegesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPrivilegesArrayOutput)
}

// AccountPrivilegesMapInput is an input type that accepts AccountPrivilegesMap and AccountPrivilegesMapOutput values.
// You can construct a concrete instance of `AccountPrivilegesMapInput` via:
//
//	AccountPrivilegesMap{ "key": AccountPrivilegesArgs{...} }
type AccountPrivilegesMapInput interface {
	pulumi.Input

	ToAccountPrivilegesMapOutput() AccountPrivilegesMapOutput
	ToAccountPrivilegesMapOutputWithContext(context.Context) AccountPrivilegesMapOutput
}

type AccountPrivilegesMap map[string]AccountPrivilegesInput

func (AccountPrivilegesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountPrivileges)(nil)).Elem()
}

func (i AccountPrivilegesMap) ToAccountPrivilegesMapOutput() AccountPrivilegesMapOutput {
	return i.ToAccountPrivilegesMapOutputWithContext(context.Background())
}

func (i AccountPrivilegesMap) ToAccountPrivilegesMapOutputWithContext(ctx context.Context) AccountPrivilegesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPrivilegesMapOutput)
}

type AccountPrivilegesOutput struct{ *pulumi.OutputState }

func (AccountPrivilegesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPrivileges)(nil)).Elem()
}

func (o AccountPrivilegesOutput) ToAccountPrivilegesOutput() AccountPrivilegesOutput {
	return o
}

func (o AccountPrivilegesOutput) ToAccountPrivilegesOutputWithContext(ctx context.Context) AccountPrivilegesOutput {
	return o
}

// account information.
func (o AccountPrivilegesOutput) Accounts() AccountPrivilegesAccountsOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesAccountsOutput { return v.Accounts }).(AccountPrivilegesAccountsOutput)
}

// Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
func (o AccountPrivilegesOutput) ColumnPrivileges() AccountPrivilegesColumnPrivilegeArrayOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesColumnPrivilegeArrayOutput { return v.ColumnPrivileges }).(AccountPrivilegesColumnPrivilegeArrayOutput)
}

// Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
func (o AccountPrivilegesOutput) DatabasePrivileges() AccountPrivilegesDatabasePrivilegeArrayOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesDatabasePrivilegeArrayOutput { return v.DatabasePrivileges }).(AccountPrivilegesDatabasePrivilegeArrayOutput)
}

// Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
func (o AccountPrivilegesOutput) FunctionPrivileges() AccountPrivilegesFunctionPrivilegeArrayOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesFunctionPrivilegeArrayOutput { return v.FunctionPrivileges }).(AccountPrivilegesFunctionPrivilegeArrayOutput)
}

// Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
func (o AccountPrivilegesOutput) GlobalPrivileges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccountPrivileges) pulumi.StringArrayOutput { return v.GlobalPrivileges }).(pulumi.StringArrayOutput)
}

// instance id.
func (o AccountPrivilegesOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountPrivileges) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
func (o AccountPrivilegesOutput) ProcedurePrivileges() AccountPrivilegesProcedurePrivilegeArrayOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesProcedurePrivilegeArrayOutput {
		return v.ProcedurePrivileges
	}).(AccountPrivilegesProcedurePrivilegeArrayOutput)
}

// `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
func (o AccountPrivilegesOutput) TablePrivileges() AccountPrivilegesTablePrivilegeArrayOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesTablePrivilegeArrayOutput { return v.TablePrivileges }).(AccountPrivilegesTablePrivilegeArrayOutput)
}

// Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
func (o AccountPrivilegesOutput) ViewPrivileges() AccountPrivilegesViewPrivilegeArrayOutput {
	return o.ApplyT(func(v *AccountPrivileges) AccountPrivilegesViewPrivilegeArrayOutput { return v.ViewPrivileges }).(AccountPrivilegesViewPrivilegeArrayOutput)
}

type AccountPrivilegesArrayOutput struct{ *pulumi.OutputState }

func (AccountPrivilegesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountPrivileges)(nil)).Elem()
}

func (o AccountPrivilegesArrayOutput) ToAccountPrivilegesArrayOutput() AccountPrivilegesArrayOutput {
	return o
}

func (o AccountPrivilegesArrayOutput) ToAccountPrivilegesArrayOutputWithContext(ctx context.Context) AccountPrivilegesArrayOutput {
	return o
}

func (o AccountPrivilegesArrayOutput) Index(i pulumi.IntInput) AccountPrivilegesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountPrivileges {
		return vs[0].([]*AccountPrivileges)[vs[1].(int)]
	}).(AccountPrivilegesOutput)
}

type AccountPrivilegesMapOutput struct{ *pulumi.OutputState }

func (AccountPrivilegesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountPrivileges)(nil)).Elem()
}

func (o AccountPrivilegesMapOutput) ToAccountPrivilegesMapOutput() AccountPrivilegesMapOutput {
	return o
}

func (o AccountPrivilegesMapOutput) ToAccountPrivilegesMapOutputWithContext(ctx context.Context) AccountPrivilegesMapOutput {
	return o
}

func (o AccountPrivilegesMapOutput) MapIndex(k pulumi.StringInput) AccountPrivilegesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountPrivileges {
		return vs[0].(map[string]*AccountPrivileges)[vs[1].(string)]
	}).(AccountPrivilegesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPrivilegesInput)(nil)).Elem(), &AccountPrivileges{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPrivilegesArrayInput)(nil)).Elem(), AccountPrivilegesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPrivilegesMapInput)(nil)).Elem(), AccountPrivilegesMap{})
	pulumi.RegisterOutputType(AccountPrivilegesOutput{})
	pulumi.RegisterOutputType(AccountPrivilegesArrayOutput{})
	pulumi.RegisterOutputType(AccountPrivilegesMapOutput{})
}
