// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query Publish Subscribe resources for the specific SQL Server instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "sqlserver",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[4].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			examplePubGeneralCloudInstance, err := Sqlserver.NewGeneralCloudInstance(ctx, "examplePubGeneralCloudInstance", &Sqlserver.GeneralCloudInstanceArgs{
//				Zone:               pulumi.String(zones.Zones[4].Name),
//				Memory:             pulumi.Int(4),
//				Storage:            pulumi.Int(100),
//				Cpu:                pulumi.Int(2),
//				MachineType:        pulumi.String("CLOUD_HSSD"),
//				InstanceChargeType: pulumi.String("POSTPAID"),
//				ProjectId:          pulumi.Int(0),
//				SubnetId:           subnet.ID(),
//				VpcId:              vpc.ID(),
//				DbVersion:          pulumi.String("2008R2"),
//				SecurityGroupLists: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Weeklies: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//					pulumi.Int(5),
//					pulumi.Int(6),
//					pulumi.Int(7),
//				},
//				StartTime: pulumi.String("00:00"),
//				Span:      pulumi.Int(6),
//				ResourceTags: sqlserver.GeneralCloudInstanceResourceTagArray{
//					&sqlserver.GeneralCloudInstanceResourceTagArgs{
//						TagKey:   pulumi.String("test"),
//						TagValue: pulumi.String("test"),
//					},
//				},
//				Collation: pulumi.String("Chinese_PRC_CI_AS"),
//				TimeZone:  pulumi.String("China Standard Time"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubGeneralCloudInstance, err := Sqlserver.NewGeneralCloudInstance(ctx, "exampleSubGeneralCloudInstance", &Sqlserver.GeneralCloudInstanceArgs{
//				Zone:               pulumi.String(zones.Zones[4].Name),
//				Memory:             pulumi.Int(4),
//				Storage:            pulumi.Int(100),
//				Cpu:                pulumi.Int(2),
//				MachineType:        pulumi.String("CLOUD_HSSD"),
//				InstanceChargeType: pulumi.String("POSTPAID"),
//				ProjectId:          pulumi.Int(0),
//				SubnetId:           subnet.ID(),
//				VpcId:              vpc.ID(),
//				DbVersion:          pulumi.String("2008R2"),
//				SecurityGroupLists: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Weeklies: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//					pulumi.Int(5),
//					pulumi.Int(6),
//					pulumi.Int(7),
//				},
//				StartTime: pulumi.String("00:00"),
//				Span:      pulumi.Int(6),
//				ResourceTags: sqlserver.GeneralCloudInstanceResourceTagArray{
//					&sqlserver.GeneralCloudInstanceResourceTagArgs{
//						TagKey:   pulumi.String("test"),
//						TagValue: pulumi.String("test"),
//					},
//				},
//				Collation: pulumi.String("Chinese_PRC_CI_AS"),
//				TimeZone:  pulumi.String("China Standard Time"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePubDb, err := Sqlserver.NewDb(ctx, "examplePubDb", &Sqlserver.DbArgs{
//				InstanceId: examplePubGeneralCloudInstance.ID(),
//				Charset:    pulumi.String("Chinese_PRC_BIN"),
//				Remark:     pulumi.String("test-remark"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubDb, err := Sqlserver.NewDb(ctx, "exampleSubDb", &Sqlserver.DbArgs{
//				InstanceId: exampleSubGeneralCloudInstance.ID(),
//				Charset:    pulumi.String("Chinese_PRC_BIN"),
//				Remark:     pulumi.String("test-remark"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePublishSubscribe, err := Sqlserver.NewPublishSubscribe(ctx, "examplePublishSubscribe", &Sqlserver.PublishSubscribeArgs{
//				PublishInstanceId:    examplePubGeneralCloudInstance.ID(),
//				SubscribeInstanceId:  exampleSubGeneralCloudInstance.ID(),
//				PublishSubscribeName: pulumi.String("example"),
//				DeleteSubscribeDb:    pulumi.Bool(false),
//				DatabaseTuples: sqlserver.PublishSubscribeDatabaseTupleArray{
//					&sqlserver.PublishSubscribeDatabaseTupleArgs{
//						PublishDatabase:   examplePubDb.Name,
//						SubscribeDatabase: exampleSubDb.Name,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = Sqlserver.GetPublishSubscribesOutput(ctx, sqlserver.GetPublishSubscribesOutputArgs{
//				InstanceId: examplePublishSubscribe.PublishInstanceId,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetPublishSubscribes(ctx *pulumi.Context, args *GetPublishSubscribesArgs, opts ...pulumi.InvokeOption) (*GetPublishSubscribesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetPublishSubscribesResult
	err := ctx.Invoke("tencentcloud:Sqlserver/getPublishSubscribes:getPublishSubscribes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPublishSubscribes.
type GetPublishSubscribesArgs struct {
	// ID of the SQL Server instance.
	InstanceId string `pulumi:"instanceId"`
	// The subscribe/publish instance ID. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the subscribe instance ID; when `instanceId` is a subscribe instance, this field is filtering according to the publish instance ID.
	PubOrSubInstanceId *string `pulumi:"pubOrSubInstanceId"`
	// The intranet IP of the subscribe/publish instance. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the intranet IP of the subscribe instance; when `instanceId` is a subscribe instance, this field is based on the publish instance intranet IP filter.
	PubOrSubInstanceIp *string `pulumi:"pubOrSubInstanceIp"`
	// Name of publish database.
	PublishDatabase *string `pulumi:"publishDatabase"`
	// The id of the Publish and Subscribe.
	PublishSubscribeId *int `pulumi:"publishSubscribeId"`
	// The name of the Publish and Subscribe.
	PublishSubscribeName *string `pulumi:"publishSubscribeName"`
	// Used to store results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Name of subscribe database.
	SubscribeDatabase *string `pulumi:"subscribeDatabase"`
}

// A collection of values returned by getPublishSubscribes.
type GetPublishSubscribesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                 string  `pulumi:"id"`
	InstanceId         string  `pulumi:"instanceId"`
	PubOrSubInstanceId *string `pulumi:"pubOrSubInstanceId"`
	PubOrSubInstanceIp *string `pulumi:"pubOrSubInstanceIp"`
	// Name of the publish SQL Server instance.
	PublishDatabase *string `pulumi:"publishDatabase"`
	// The id of the Publish and Subscribe.
	PublishSubscribeId *int `pulumi:"publishSubscribeId"`
	// Publish and subscribe list. Each element contains the following attributes.
	PublishSubscribeLists []GetPublishSubscribesPublishSubscribeList `pulumi:"publishSubscribeLists"`
	// The name of the Publish and Subscribe.
	PublishSubscribeName *string `pulumi:"publishSubscribeName"`
	ResultOutputFile     *string `pulumi:"resultOutputFile"`
	// Name of the subscribe SQL Server instance.
	SubscribeDatabase *string `pulumi:"subscribeDatabase"`
}

func GetPublishSubscribesOutput(ctx *pulumi.Context, args GetPublishSubscribesOutputArgs, opts ...pulumi.InvokeOption) GetPublishSubscribesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPublishSubscribesResult, error) {
			args := v.(GetPublishSubscribesArgs)
			r, err := GetPublishSubscribes(ctx, &args, opts...)
			var s GetPublishSubscribesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPublishSubscribesResultOutput)
}

// A collection of arguments for invoking getPublishSubscribes.
type GetPublishSubscribesOutputArgs struct {
	// ID of the SQL Server instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The subscribe/publish instance ID. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the subscribe instance ID; when `instanceId` is a subscribe instance, this field is filtering according to the publish instance ID.
	PubOrSubInstanceId pulumi.StringPtrInput `pulumi:"pubOrSubInstanceId"`
	// The intranet IP of the subscribe/publish instance. It is related to whether the `instanceId` is a publish instance or a subscribe instance. when `instanceId` is a publish instance, this field is filtered according to the intranet IP of the subscribe instance; when `instanceId` is a subscribe instance, this field is based on the publish instance intranet IP filter.
	PubOrSubInstanceIp pulumi.StringPtrInput `pulumi:"pubOrSubInstanceIp"`
	// Name of publish database.
	PublishDatabase pulumi.StringPtrInput `pulumi:"publishDatabase"`
	// The id of the Publish and Subscribe.
	PublishSubscribeId pulumi.IntPtrInput `pulumi:"publishSubscribeId"`
	// The name of the Publish and Subscribe.
	PublishSubscribeName pulumi.StringPtrInput `pulumi:"publishSubscribeName"`
	// Used to store results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Name of subscribe database.
	SubscribeDatabase pulumi.StringPtrInput `pulumi:"subscribeDatabase"`
}

func (GetPublishSubscribesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublishSubscribesArgs)(nil)).Elem()
}

// A collection of values returned by getPublishSubscribes.
type GetPublishSubscribesResultOutput struct{ *pulumi.OutputState }

func (GetPublishSubscribesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPublishSubscribesResult)(nil)).Elem()
}

func (o GetPublishSubscribesResultOutput) ToGetPublishSubscribesResultOutput() GetPublishSubscribesResultOutput {
	return o
}

func (o GetPublishSubscribesResultOutput) ToGetPublishSubscribesResultOutputWithContext(ctx context.Context) GetPublishSubscribesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetPublishSubscribesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublishSubscribesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPublishSubscribesResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPublishSubscribesResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetPublishSubscribesResultOutput) PubOrSubInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPublishSubscribesResult) *string { return v.PubOrSubInstanceId }).(pulumi.StringPtrOutput)
}

func (o GetPublishSubscribesResultOutput) PubOrSubInstanceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPublishSubscribesResult) *string { return v.PubOrSubInstanceIp }).(pulumi.StringPtrOutput)
}

// Name of the publish SQL Server instance.
func (o GetPublishSubscribesResultOutput) PublishDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPublishSubscribesResult) *string { return v.PublishDatabase }).(pulumi.StringPtrOutput)
}

// The id of the Publish and Subscribe.
func (o GetPublishSubscribesResultOutput) PublishSubscribeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetPublishSubscribesResult) *int { return v.PublishSubscribeId }).(pulumi.IntPtrOutput)
}

// Publish and subscribe list. Each element contains the following attributes.
func (o GetPublishSubscribesResultOutput) PublishSubscribeLists() GetPublishSubscribesPublishSubscribeListArrayOutput {
	return o.ApplyT(func(v GetPublishSubscribesResult) []GetPublishSubscribesPublishSubscribeList {
		return v.PublishSubscribeLists
	}).(GetPublishSubscribesPublishSubscribeListArrayOutput)
}

// The name of the Publish and Subscribe.
func (o GetPublishSubscribesResultOutput) PublishSubscribeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPublishSubscribesResult) *string { return v.PublishSubscribeName }).(pulumi.StringPtrOutput)
}

func (o GetPublishSubscribesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPublishSubscribesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Name of the subscribe SQL Server instance.
func (o GetPublishSubscribesResultOutput) SubscribeDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPublishSubscribesResult) *string { return v.SubscribeDatabase }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPublishSubscribesResultOutput{})
}
