// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a sqlserver startXevent
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "sqlserver",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[4].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBasicInstance, err := Sqlserver.NewBasicInstance(ctx, "exampleBasicInstance", &Sqlserver.BasicInstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[4].Name),
//				ChargeType:       pulumi.String("POSTPAID_BY_HOUR"),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				ProjectId:        pulumi.Int(0),
//				Memory:           pulumi.Int(4),
//				Storage:          pulumi.Int(100),
//				Cpu:              pulumi.Int(2),
//				MachineType:      pulumi.String("CLOUD_PREMIUM"),
//				MaintenanceWeekSets: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//				},
//				MaintenanceStartTime: pulumi.String("09:00"),
//				MaintenanceTimeSpan:  pulumi.Int(3),
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Sqlserver.NewStartXevent(ctx, "exampleStartXevent", &Sqlserver.StartXeventArgs{
//				InstanceId: exampleBasicInstance.ID(),
//				EventConfigs: sqlserver.StartXeventEventConfigArray{
//					&sqlserver.StartXeventEventConfigArgs{
//						EventType: pulumi.String("slow"),
//						Threshold: pulumi.Int(0),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StartXevent struct {
	pulumi.CustomResourceState

	// Whether to start or stop an extended event.
	EventConfigs StartXeventEventConfigArrayOutput `pulumi:"eventConfigs"`
	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewStartXevent registers a new resource with the given unique name, arguments, and options.
func NewStartXevent(ctx *pulumi.Context,
	name string, args *StartXeventArgs, opts ...pulumi.ResourceOption) (*StartXevent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventConfigs == nil {
		return nil, errors.New("invalid value for required argument 'EventConfigs'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StartXevent
	err := ctx.RegisterResource("tencentcloud:Sqlserver/startXevent:StartXevent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStartXevent gets an existing StartXevent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStartXevent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StartXeventState, opts ...pulumi.ResourceOption) (*StartXevent, error) {
	var resource StartXevent
	err := ctx.ReadResource("tencentcloud:Sqlserver/startXevent:StartXevent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StartXevent resources.
type startXeventState struct {
	// Whether to start or stop an extended event.
	EventConfigs []StartXeventEventConfig `pulumi:"eventConfigs"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type StartXeventState struct {
	// Whether to start or stop an extended event.
	EventConfigs StartXeventEventConfigArrayInput
	// Instance ID.
	InstanceId pulumi.StringPtrInput
}

func (StartXeventState) ElementType() reflect.Type {
	return reflect.TypeOf((*startXeventState)(nil)).Elem()
}

type startXeventArgs struct {
	// Whether to start or stop an extended event.
	EventConfigs []StartXeventEventConfig `pulumi:"eventConfigs"`
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a StartXevent resource.
type StartXeventArgs struct {
	// Whether to start or stop an extended event.
	EventConfigs StartXeventEventConfigArrayInput
	// Instance ID.
	InstanceId pulumi.StringInput
}

func (StartXeventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*startXeventArgs)(nil)).Elem()
}

type StartXeventInput interface {
	pulumi.Input

	ToStartXeventOutput() StartXeventOutput
	ToStartXeventOutputWithContext(ctx context.Context) StartXeventOutput
}

func (*StartXevent) ElementType() reflect.Type {
	return reflect.TypeOf((**StartXevent)(nil)).Elem()
}

func (i *StartXevent) ToStartXeventOutput() StartXeventOutput {
	return i.ToStartXeventOutputWithContext(context.Background())
}

func (i *StartXevent) ToStartXeventOutputWithContext(ctx context.Context) StartXeventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartXeventOutput)
}

// StartXeventArrayInput is an input type that accepts StartXeventArray and StartXeventArrayOutput values.
// You can construct a concrete instance of `StartXeventArrayInput` via:
//
//	StartXeventArray{ StartXeventArgs{...} }
type StartXeventArrayInput interface {
	pulumi.Input

	ToStartXeventArrayOutput() StartXeventArrayOutput
	ToStartXeventArrayOutputWithContext(context.Context) StartXeventArrayOutput
}

type StartXeventArray []StartXeventInput

func (StartXeventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartXevent)(nil)).Elem()
}

func (i StartXeventArray) ToStartXeventArrayOutput() StartXeventArrayOutput {
	return i.ToStartXeventArrayOutputWithContext(context.Background())
}

func (i StartXeventArray) ToStartXeventArrayOutputWithContext(ctx context.Context) StartXeventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartXeventArrayOutput)
}

// StartXeventMapInput is an input type that accepts StartXeventMap and StartXeventMapOutput values.
// You can construct a concrete instance of `StartXeventMapInput` via:
//
//	StartXeventMap{ "key": StartXeventArgs{...} }
type StartXeventMapInput interface {
	pulumi.Input

	ToStartXeventMapOutput() StartXeventMapOutput
	ToStartXeventMapOutputWithContext(context.Context) StartXeventMapOutput
}

type StartXeventMap map[string]StartXeventInput

func (StartXeventMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartXevent)(nil)).Elem()
}

func (i StartXeventMap) ToStartXeventMapOutput() StartXeventMapOutput {
	return i.ToStartXeventMapOutputWithContext(context.Background())
}

func (i StartXeventMap) ToStartXeventMapOutputWithContext(ctx context.Context) StartXeventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartXeventMapOutput)
}

type StartXeventOutput struct{ *pulumi.OutputState }

func (StartXeventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StartXevent)(nil)).Elem()
}

func (o StartXeventOutput) ToStartXeventOutput() StartXeventOutput {
	return o
}

func (o StartXeventOutput) ToStartXeventOutputWithContext(ctx context.Context) StartXeventOutput {
	return o
}

// Whether to start or stop an extended event.
func (o StartXeventOutput) EventConfigs() StartXeventEventConfigArrayOutput {
	return o.ApplyT(func(v *StartXevent) StartXeventEventConfigArrayOutput { return v.EventConfigs }).(StartXeventEventConfigArrayOutput)
}

// Instance ID.
func (o StartXeventOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *StartXevent) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type StartXeventArrayOutput struct{ *pulumi.OutputState }

func (StartXeventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartXevent)(nil)).Elem()
}

func (o StartXeventArrayOutput) ToStartXeventArrayOutput() StartXeventArrayOutput {
	return o
}

func (o StartXeventArrayOutput) ToStartXeventArrayOutputWithContext(ctx context.Context) StartXeventArrayOutput {
	return o
}

func (o StartXeventArrayOutput) Index(i pulumi.IntInput) StartXeventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StartXevent {
		return vs[0].([]*StartXevent)[vs[1].(int)]
	}).(StartXeventOutput)
}

type StartXeventMapOutput struct{ *pulumi.OutputState }

func (StartXeventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartXevent)(nil)).Elem()
}

func (o StartXeventMapOutput) ToStartXeventMapOutput() StartXeventMapOutput {
	return o
}

func (o StartXeventMapOutput) ToStartXeventMapOutputWithContext(ctx context.Context) StartXeventMapOutput {
	return o
}

func (o StartXeventMapOutput) MapIndex(k pulumi.StringInput) StartXeventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StartXevent {
		return vs[0].(map[string]*StartXevent)[vs[1].(string)]
	}).(StartXeventOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StartXeventInput)(nil)).Elem(), &StartXevent{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartXeventArrayInput)(nil)).Elem(), StartXeventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartXeventMapInput)(nil)).Elem(), StartXeventMap{})
	pulumi.RegisterOutputType(StartXeventOutput{})
	pulumi.RegisterOutputType(StartXeventArrayOutput{})
	pulumi.RegisterOutputType(StartXeventMapOutput{})
}
