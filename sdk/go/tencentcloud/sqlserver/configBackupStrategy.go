// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a sqlserver configBackupStrategy
//
// ## Example Usage
// ### Daily backup
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "sqlserver",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[4].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBasicInstance, err := Sqlserver.NewBasicInstance(ctx, "exampleBasicInstance", &Sqlserver.BasicInstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[4].Name),
//				ChargeType:       pulumi.String("POSTPAID_BY_HOUR"),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				ProjectId:        pulumi.Int(0),
//				Memory:           pulumi.Int(4),
//				Storage:          pulumi.Int(100),
//				Cpu:              pulumi.Int(2),
//				MachineType:      pulumi.String("CLOUD_PREMIUM"),
//				MaintenanceWeekSets: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//				},
//				MaintenanceStartTime: pulumi.String("09:00"),
//				MaintenanceTimeSpan:  pulumi.Int(3),
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Sqlserver.NewConfigBackupStrategy(ctx, "exampleConfigBackupStrategy", &Sqlserver.ConfigBackupStrategyArgs{
//				InstanceId:  exampleBasicInstance.ID(),
//				BackupType:  pulumi.String("daily"),
//				BackupTime:  pulumi.Int(0),
//				BackupDay:   pulumi.Int(1),
//				BackupModel: pulumi.String("master_no_pkg"),
//				BackupCycles: pulumi.IntArray{
//					pulumi.Int(1),
//				},
//				BackupSaveDays:        pulumi.Int(7),
//				RegularBackupEnable:   pulumi.String("disable"),
//				RegularBackupSaveDays: pulumi.Int(90),
//				RegularBackupStrategy: pulumi.String("months"),
//				RegularBackupCounts:   pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Weekly backup
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Sqlserver.NewConfigBackupStrategy(ctx, "example", &Sqlserver.ConfigBackupStrategyArgs{
//				InstanceId:  pulumi.Any(tencentcloud_sqlserver_basic_instance.Example.Id),
//				BackupType:  pulumi.String("weekly"),
//				BackupTime:  pulumi.Int(0),
//				BackupModel: pulumi.String("master_no_pkg"),
//				BackupCycles: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(3),
//					pulumi.Int(5),
//				},
//				BackupSaveDays:        pulumi.Int(7),
//				RegularBackupEnable:   pulumi.String("disable"),
//				RegularBackupSaveDays: pulumi.Int(90),
//				RegularBackupStrategy: pulumi.String("months"),
//				RegularBackupCounts:   pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Regular backup
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Sqlserver.NewConfigBackupStrategy(ctx, "example", &Sqlserver.ConfigBackupStrategyArgs{
//				InstanceId:  pulumi.Any(tencentcloud_sqlserver_basic_instance.Example.Id),
//				BackupTime:  pulumi.Int(0),
//				BackupModel: pulumi.String("master_no_pkg"),
//				BackupCycles: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(3),
//				},
//				BackupSaveDays:         pulumi.Int(7),
//				RegularBackupEnable:    pulumi.String("enable"),
//				RegularBackupSaveDays:  pulumi.Int(120),
//				RegularBackupStrategy:  pulumi.String("months"),
//				RegularBackupCounts:    pulumi.Int(1),
//				RegularBackupStartTime: pulumi.String(fmt.Sprintf("%v%v", "%", "s")),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// sqlserver config_backup_strategy can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Sqlserver/configBackupStrategy:ConfigBackupStrategy example mssql-si2823jyl
//
// ```
type ConfigBackupStrategy struct {
	pulumi.CustomResourceState

	// The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
	BackupCycles pulumi.IntArrayOutput `pulumi:"backupCycles"`
	// Backup interval in days when the BackupType is daily. The current value can only be 1.
	BackupDay pulumi.IntPtrOutput `pulumi:"backupDay"`
	// Backup mode. Valid values: masterPkg (archive the backup files of the primary node), masterNoPkg (do not archive the backup files of the primary node), slavePkg (archive the backup files of the replica node), slaveNoPkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
	BackupModel pulumi.StringPtrOutput `pulumi:"backupModel"`
	// Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
	BackupSaveDays pulumi.IntPtrOutput `pulumi:"backupSaveDays"`
	// Backup time. Value range: an integer from 0 to 23.
	BackupTime pulumi.IntPtrOutput `pulumi:"backupTime"`
	// Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
	BackupType pulumi.StringPtrOutput `pulumi:"backupType"`
	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The number of retained archive backups. Default value: 1.
	RegularBackupCounts pulumi.IntPtrOutput `pulumi:"regularBackupCounts"`
	// Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
	RegularBackupEnable pulumi.StringPtrOutput `pulumi:"regularBackupEnable"`
	// Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
	RegularBackupSaveDays pulumi.IntPtrOutput `pulumi:"regularBackupSaveDays"`
	// Archive backup start date in YYYY-MM-DD format, which is the current time by default.
	RegularBackupStartTime pulumi.StringPtrOutput `pulumi:"regularBackupStartTime"`
	// Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
	RegularBackupStrategy pulumi.StringPtrOutput `pulumi:"regularBackupStrategy"`
}

// NewConfigBackupStrategy registers a new resource with the given unique name, arguments, and options.
func NewConfigBackupStrategy(ctx *pulumi.Context,
	name string, args *ConfigBackupStrategyArgs, opts ...pulumi.ResourceOption) (*ConfigBackupStrategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConfigBackupStrategy
	err := ctx.RegisterResource("tencentcloud:Sqlserver/configBackupStrategy:ConfigBackupStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigBackupStrategy gets an existing ConfigBackupStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigBackupStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigBackupStrategyState, opts ...pulumi.ResourceOption) (*ConfigBackupStrategy, error) {
	var resource ConfigBackupStrategy
	err := ctx.ReadResource("tencentcloud:Sqlserver/configBackupStrategy:ConfigBackupStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigBackupStrategy resources.
type configBackupStrategyState struct {
	// The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
	BackupCycles []int `pulumi:"backupCycles"`
	// Backup interval in days when the BackupType is daily. The current value can only be 1.
	BackupDay *int `pulumi:"backupDay"`
	// Backup mode. Valid values: masterPkg (archive the backup files of the primary node), masterNoPkg (do not archive the backup files of the primary node), slavePkg (archive the backup files of the replica node), slaveNoPkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
	BackupModel *string `pulumi:"backupModel"`
	// Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
	BackupSaveDays *int `pulumi:"backupSaveDays"`
	// Backup time. Value range: an integer from 0 to 23.
	BackupTime *int `pulumi:"backupTime"`
	// Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
	BackupType *string `pulumi:"backupType"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// The number of retained archive backups. Default value: 1.
	RegularBackupCounts *int `pulumi:"regularBackupCounts"`
	// Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
	RegularBackupEnable *string `pulumi:"regularBackupEnable"`
	// Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
	RegularBackupSaveDays *int `pulumi:"regularBackupSaveDays"`
	// Archive backup start date in YYYY-MM-DD format, which is the current time by default.
	RegularBackupStartTime *string `pulumi:"regularBackupStartTime"`
	// Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
	RegularBackupStrategy *string `pulumi:"regularBackupStrategy"`
}

type ConfigBackupStrategyState struct {
	// The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
	BackupCycles pulumi.IntArrayInput
	// Backup interval in days when the BackupType is daily. The current value can only be 1.
	BackupDay pulumi.IntPtrInput
	// Backup mode. Valid values: masterPkg (archive the backup files of the primary node), masterNoPkg (do not archive the backup files of the primary node), slavePkg (archive the backup files of the replica node), slaveNoPkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
	BackupModel pulumi.StringPtrInput
	// Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
	BackupSaveDays pulumi.IntPtrInput
	// Backup time. Value range: an integer from 0 to 23.
	BackupTime pulumi.IntPtrInput
	// Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
	BackupType pulumi.StringPtrInput
	// Instance ID.
	InstanceId pulumi.StringPtrInput
	// The number of retained archive backups. Default value: 1.
	RegularBackupCounts pulumi.IntPtrInput
	// Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
	RegularBackupEnable pulumi.StringPtrInput
	// Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
	RegularBackupSaveDays pulumi.IntPtrInput
	// Archive backup start date in YYYY-MM-DD format, which is the current time by default.
	RegularBackupStartTime pulumi.StringPtrInput
	// Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
	RegularBackupStrategy pulumi.StringPtrInput
}

func (ConfigBackupStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*configBackupStrategyState)(nil)).Elem()
}

type configBackupStrategyArgs struct {
	// The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
	BackupCycles []int `pulumi:"backupCycles"`
	// Backup interval in days when the BackupType is daily. The current value can only be 1.
	BackupDay *int `pulumi:"backupDay"`
	// Backup mode. Valid values: masterPkg (archive the backup files of the primary node), masterNoPkg (do not archive the backup files of the primary node), slavePkg (archive the backup files of the replica node), slaveNoPkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
	BackupModel *string `pulumi:"backupModel"`
	// Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
	BackupSaveDays *int `pulumi:"backupSaveDays"`
	// Backup time. Value range: an integer from 0 to 23.
	BackupTime *int `pulumi:"backupTime"`
	// Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
	BackupType *string `pulumi:"backupType"`
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// The number of retained archive backups. Default value: 1.
	RegularBackupCounts *int `pulumi:"regularBackupCounts"`
	// Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
	RegularBackupEnable *string `pulumi:"regularBackupEnable"`
	// Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
	RegularBackupSaveDays *int `pulumi:"regularBackupSaveDays"`
	// Archive backup start date in YYYY-MM-DD format, which is the current time by default.
	RegularBackupStartTime *string `pulumi:"regularBackupStartTime"`
	// Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
	RegularBackupStrategy *string `pulumi:"regularBackupStrategy"`
}

// The set of arguments for constructing a ConfigBackupStrategy resource.
type ConfigBackupStrategyArgs struct {
	// The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
	BackupCycles pulumi.IntArrayInput
	// Backup interval in days when the BackupType is daily. The current value can only be 1.
	BackupDay pulumi.IntPtrInput
	// Backup mode. Valid values: masterPkg (archive the backup files of the primary node), masterNoPkg (do not archive the backup files of the primary node), slavePkg (archive the backup files of the replica node), slaveNoPkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
	BackupModel pulumi.StringPtrInput
	// Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
	BackupSaveDays pulumi.IntPtrInput
	// Backup time. Value range: an integer from 0 to 23.
	BackupTime pulumi.IntPtrInput
	// Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
	BackupType pulumi.StringPtrInput
	// Instance ID.
	InstanceId pulumi.StringInput
	// The number of retained archive backups. Default value: 1.
	RegularBackupCounts pulumi.IntPtrInput
	// Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
	RegularBackupEnable pulumi.StringPtrInput
	// Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
	RegularBackupSaveDays pulumi.IntPtrInput
	// Archive backup start date in YYYY-MM-DD format, which is the current time by default.
	RegularBackupStartTime pulumi.StringPtrInput
	// Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
	RegularBackupStrategy pulumi.StringPtrInput
}

func (ConfigBackupStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configBackupStrategyArgs)(nil)).Elem()
}

type ConfigBackupStrategyInput interface {
	pulumi.Input

	ToConfigBackupStrategyOutput() ConfigBackupStrategyOutput
	ToConfigBackupStrategyOutputWithContext(ctx context.Context) ConfigBackupStrategyOutput
}

func (*ConfigBackupStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigBackupStrategy)(nil)).Elem()
}

func (i *ConfigBackupStrategy) ToConfigBackupStrategyOutput() ConfigBackupStrategyOutput {
	return i.ToConfigBackupStrategyOutputWithContext(context.Background())
}

func (i *ConfigBackupStrategy) ToConfigBackupStrategyOutputWithContext(ctx context.Context) ConfigBackupStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBackupStrategyOutput)
}

// ConfigBackupStrategyArrayInput is an input type that accepts ConfigBackupStrategyArray and ConfigBackupStrategyArrayOutput values.
// You can construct a concrete instance of `ConfigBackupStrategyArrayInput` via:
//
//	ConfigBackupStrategyArray{ ConfigBackupStrategyArgs{...} }
type ConfigBackupStrategyArrayInput interface {
	pulumi.Input

	ToConfigBackupStrategyArrayOutput() ConfigBackupStrategyArrayOutput
	ToConfigBackupStrategyArrayOutputWithContext(context.Context) ConfigBackupStrategyArrayOutput
}

type ConfigBackupStrategyArray []ConfigBackupStrategyInput

func (ConfigBackupStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigBackupStrategy)(nil)).Elem()
}

func (i ConfigBackupStrategyArray) ToConfigBackupStrategyArrayOutput() ConfigBackupStrategyArrayOutput {
	return i.ToConfigBackupStrategyArrayOutputWithContext(context.Background())
}

func (i ConfigBackupStrategyArray) ToConfigBackupStrategyArrayOutputWithContext(ctx context.Context) ConfigBackupStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBackupStrategyArrayOutput)
}

// ConfigBackupStrategyMapInput is an input type that accepts ConfigBackupStrategyMap and ConfigBackupStrategyMapOutput values.
// You can construct a concrete instance of `ConfigBackupStrategyMapInput` via:
//
//	ConfigBackupStrategyMap{ "key": ConfigBackupStrategyArgs{...} }
type ConfigBackupStrategyMapInput interface {
	pulumi.Input

	ToConfigBackupStrategyMapOutput() ConfigBackupStrategyMapOutput
	ToConfigBackupStrategyMapOutputWithContext(context.Context) ConfigBackupStrategyMapOutput
}

type ConfigBackupStrategyMap map[string]ConfigBackupStrategyInput

func (ConfigBackupStrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigBackupStrategy)(nil)).Elem()
}

func (i ConfigBackupStrategyMap) ToConfigBackupStrategyMapOutput() ConfigBackupStrategyMapOutput {
	return i.ToConfigBackupStrategyMapOutputWithContext(context.Background())
}

func (i ConfigBackupStrategyMap) ToConfigBackupStrategyMapOutputWithContext(ctx context.Context) ConfigBackupStrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigBackupStrategyMapOutput)
}

type ConfigBackupStrategyOutput struct{ *pulumi.OutputState }

func (ConfigBackupStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigBackupStrategy)(nil)).Elem()
}

func (o ConfigBackupStrategyOutput) ToConfigBackupStrategyOutput() ConfigBackupStrategyOutput {
	return o
}

func (o ConfigBackupStrategyOutput) ToConfigBackupStrategyOutputWithContext(ctx context.Context) ConfigBackupStrategyOutput {
	return o
}

// The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
func (o ConfigBackupStrategyOutput) BackupCycles() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.IntArrayOutput { return v.BackupCycles }).(pulumi.IntArrayOutput)
}

// Backup interval in days when the BackupType is daily. The current value can only be 1.
func (o ConfigBackupStrategyOutput) BackupDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.IntPtrOutput { return v.BackupDay }).(pulumi.IntPtrOutput)
}

// Backup mode. Valid values: masterPkg (archive the backup files of the primary node), masterNoPkg (do not archive the backup files of the primary node), slavePkg (archive the backup files of the replica node), slaveNoPkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
func (o ConfigBackupStrategyOutput) BackupModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.StringPtrOutput { return v.BackupModel }).(pulumi.StringPtrOutput)
}

// Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
func (o ConfigBackupStrategyOutput) BackupSaveDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.IntPtrOutput { return v.BackupSaveDays }).(pulumi.IntPtrOutput)
}

// Backup time. Value range: an integer from 0 to 23.
func (o ConfigBackupStrategyOutput) BackupTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.IntPtrOutput { return v.BackupTime }).(pulumi.IntPtrOutput)
}

// Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
func (o ConfigBackupStrategyOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.StringPtrOutput { return v.BackupType }).(pulumi.StringPtrOutput)
}

// Instance ID.
func (o ConfigBackupStrategyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The number of retained archive backups. Default value: 1.
func (o ConfigBackupStrategyOutput) RegularBackupCounts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.IntPtrOutput { return v.RegularBackupCounts }).(pulumi.IntPtrOutput)
}

// Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
func (o ConfigBackupStrategyOutput) RegularBackupEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.StringPtrOutput { return v.RegularBackupEnable }).(pulumi.StringPtrOutput)
}

// Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
func (o ConfigBackupStrategyOutput) RegularBackupSaveDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.IntPtrOutput { return v.RegularBackupSaveDays }).(pulumi.IntPtrOutput)
}

// Archive backup start date in YYYY-MM-DD format, which is the current time by default.
func (o ConfigBackupStrategyOutput) RegularBackupStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.StringPtrOutput { return v.RegularBackupStartTime }).(pulumi.StringPtrOutput)
}

// Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
func (o ConfigBackupStrategyOutput) RegularBackupStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigBackupStrategy) pulumi.StringPtrOutput { return v.RegularBackupStrategy }).(pulumi.StringPtrOutput)
}

type ConfigBackupStrategyArrayOutput struct{ *pulumi.OutputState }

func (ConfigBackupStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigBackupStrategy)(nil)).Elem()
}

func (o ConfigBackupStrategyArrayOutput) ToConfigBackupStrategyArrayOutput() ConfigBackupStrategyArrayOutput {
	return o
}

func (o ConfigBackupStrategyArrayOutput) ToConfigBackupStrategyArrayOutputWithContext(ctx context.Context) ConfigBackupStrategyArrayOutput {
	return o
}

func (o ConfigBackupStrategyArrayOutput) Index(i pulumi.IntInput) ConfigBackupStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigBackupStrategy {
		return vs[0].([]*ConfigBackupStrategy)[vs[1].(int)]
	}).(ConfigBackupStrategyOutput)
}

type ConfigBackupStrategyMapOutput struct{ *pulumi.OutputState }

func (ConfigBackupStrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigBackupStrategy)(nil)).Elem()
}

func (o ConfigBackupStrategyMapOutput) ToConfigBackupStrategyMapOutput() ConfigBackupStrategyMapOutput {
	return o
}

func (o ConfigBackupStrategyMapOutput) ToConfigBackupStrategyMapOutputWithContext(ctx context.Context) ConfigBackupStrategyMapOutput {
	return o
}

func (o ConfigBackupStrategyMapOutput) MapIndex(k pulumi.StringInput) ConfigBackupStrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigBackupStrategy {
		return vs[0].(map[string]*ConfigBackupStrategy)[vs[1].(string)]
	}).(ConfigBackupStrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBackupStrategyInput)(nil)).Elem(), &ConfigBackupStrategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBackupStrategyArrayInput)(nil)).Elem(), ConfigBackupStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigBackupStrategyMapInput)(nil)).Elem(), ConfigBackupStrategyMap{})
	pulumi.RegisterOutputType(ConfigBackupStrategyOutput{})
	pulumi.RegisterOutputType(ConfigBackupStrategyArrayOutput{})
	pulumi.RegisterOutputType(ConfigBackupStrategyMapOutput{})
}
