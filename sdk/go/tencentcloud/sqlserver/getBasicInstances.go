// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query SQL Server basic instances
//
// ## Example Usage
// ### Filter instance by Id
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Sqlserver.GetBasicInstances(ctx, &sqlserver.GetBasicInstancesArgs{
//				Id: pulumi.StringRef("mssql-3l3fgqn7"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Filter instance by project Id
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Sqlserver.GetBasicInstances(ctx, &sqlserver.GetBasicInstancesArgs{
//				ProjectId: pulumi.IntRef(0),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Filter instance by VPC/Subnet
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Sqlserver.GetBasicInstances(ctx, &sqlserver.GetBasicInstancesArgs{
//				SubnetId: pulumi.StringRef("subnet-nf9n81ps"),
//				VpcId:    pulumi.StringRef("vpc-409mvdvv"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetBasicInstances(ctx *pulumi.Context, args *GetBasicInstancesArgs, opts ...pulumi.InvokeOption) (*GetBasicInstancesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetBasicInstancesResult
	err := ctx.Invoke("tencentcloud:Sqlserver/getBasicInstances:getBasicInstances", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBasicInstances.
type GetBasicInstancesArgs struct {
	// ID of the SQL Server basic instance to be query.
	Id *string `pulumi:"id"`
	// Name of the SQL Server basic instance to be query.
	Name *string `pulumi:"name"`
	// Project ID of the SQL Server basic instance to be query.
	ProjectId *int `pulumi:"projectId"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Subnet ID of the SQL Server basic instance to be query.
	SubnetId *string `pulumi:"subnetId"`
	// Vpc ID of the SQL Server basic instance to be query.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getBasicInstances.
type GetBasicInstancesResult struct {
	// ID of the SQL Server basic instance.
	Id *string `pulumi:"id"`
	// A list of SQL Server basic instances. Each element contains the following attributes.
	InstanceLists []GetBasicInstancesInstanceList `pulumi:"instanceLists"`
	// Name of the SQL Server basic instance.
	Name *string `pulumi:"name"`
	// Project ID, default value is `0`.
	ProjectId        *int    `pulumi:"projectId"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of subnet.
	SubnetId *string `pulumi:"subnetId"`
	// ID of VPC.
	VpcId *string `pulumi:"vpcId"`
}

func GetBasicInstancesOutput(ctx *pulumi.Context, args GetBasicInstancesOutputArgs, opts ...pulumi.InvokeOption) GetBasicInstancesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBasicInstancesResult, error) {
			args := v.(GetBasicInstancesArgs)
			r, err := GetBasicInstances(ctx, &args, opts...)
			var s GetBasicInstancesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBasicInstancesResultOutput)
}

// A collection of arguments for invoking getBasicInstances.
type GetBasicInstancesOutputArgs struct {
	// ID of the SQL Server basic instance to be query.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the SQL Server basic instance to be query.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Project ID of the SQL Server basic instance to be query.
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Subnet ID of the SQL Server basic instance to be query.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// Vpc ID of the SQL Server basic instance to be query.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (GetBasicInstancesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBasicInstancesArgs)(nil)).Elem()
}

// A collection of values returned by getBasicInstances.
type GetBasicInstancesResultOutput struct{ *pulumi.OutputState }

func (GetBasicInstancesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBasicInstancesResult)(nil)).Elem()
}

func (o GetBasicInstancesResultOutput) ToGetBasicInstancesResultOutput() GetBasicInstancesResultOutput {
	return o
}

func (o GetBasicInstancesResultOutput) ToGetBasicInstancesResultOutputWithContext(ctx context.Context) GetBasicInstancesResultOutput {
	return o
}

// ID of the SQL Server basic instance.
func (o GetBasicInstancesResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBasicInstancesResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A list of SQL Server basic instances. Each element contains the following attributes.
func (o GetBasicInstancesResultOutput) InstanceLists() GetBasicInstancesInstanceListArrayOutput {
	return o.ApplyT(func(v GetBasicInstancesResult) []GetBasicInstancesInstanceList { return v.InstanceLists }).(GetBasicInstancesInstanceListArrayOutput)
}

// Name of the SQL Server basic instance.
func (o GetBasicInstancesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBasicInstancesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Project ID, default value is `0`.
func (o GetBasicInstancesResultOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetBasicInstancesResult) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

func (o GetBasicInstancesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBasicInstancesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// ID of subnet.
func (o GetBasicInstancesResultOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBasicInstancesResult) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// ID of VPC.
func (o GetBasicInstancesResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBasicInstancesResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBasicInstancesResultOutput{})
}
