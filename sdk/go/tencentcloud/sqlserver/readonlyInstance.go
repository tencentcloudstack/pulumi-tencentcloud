// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a SQL Server instance resource to create read-only database instances.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "sqlserver",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[4].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBasicInstance, err := Sqlserver.NewBasicInstance(ctx, "exampleBasicInstance", &Sqlserver.BasicInstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[4].Name),
//				ChargeType:       pulumi.String("POSTPAID_BY_HOUR"),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				ProjectId:        pulumi.Int(0),
//				Memory:           pulumi.Int(4),
//				Storage:          pulumi.Int(100),
//				Cpu:              pulumi.Int(2),
//				MachineType:      pulumi.String("CLOUD_PREMIUM"),
//				MaintenanceWeekSets: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//				},
//				MaintenanceStartTime: pulumi.String("09:00"),
//				MaintenanceTimeSpan:  pulumi.Int(3),
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Sqlserver.NewReadonlyInstance(ctx, "exampleReadonlyInstance", &Sqlserver.ReadonlyInstanceArgs{
//				AvailabilityZone:  pulumi.String(zones.Zones[4].Name),
//				ChargeType:        pulumi.String("POSTPAID_BY_HOUR"),
//				VpcId:             vpc.ID(),
//				SubnetId:          subnet.ID(),
//				Memory:            pulumi.Int(4),
//				Storage:           pulumi.Int(20),
//				MasterInstanceId:  exampleBasicInstance.ID(),
//				ReadonlyGroupType: pulumi.Int(1),
//				ForceUpgrade:      pulumi.Bool(true),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SQL Server readonly instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Sqlserver/readonlyInstance:ReadonlyInstance example mssqlro-3cdq7kx5
//
// ```
type ReadonlyInstance struct {
	pulumi.CustomResourceState

	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	AutoVoucher pulumi.IntPtrOutput `pulumi:"autoVoucher"`
	// Availability zone.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrOutput `pulumi:"chargeType"`
	// Create time of the SQL Server instance.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Indicate that the master instance upgrade or not. `true` for upgrading the master SQL Server instance to cluster type by force. Default is false. Note: this is not supported with `DUAL`(ha_type), `2017`(engine_version) master SQL Server instance, for it will cause haType of the master SQL Server instance change.
	ForceUpgrade pulumi.BoolPtrOutput `pulumi:"forceUpgrade"`
	// Indicates the master instance ID of recovery instances.
	MasterInstanceId pulumi.StringOutput `pulumi:"masterInstanceId"`
	// Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloudSqlserverSpecinfos` provides.
	Memory pulumi.IntOutput `pulumi:"memory"`
	// Name of the SQL Server instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Purchase instance period in month. The value does not exceed 48.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// ID of the readonly group that this instance belongs to. When `readonlyGroupType` set value `3`, it must be set with valid value.
	ReadonlyGroupId pulumi.StringOutput `pulumi:"readonlyGroupId"`
	// Required when `readonlyGroupType`=2, the name of the newly created read-only group.
	ReadonlyGroupName pulumi.StringOutput `pulumi:"readonlyGroupName"`
	// Type of readonly group. Valid values: `1`, `3`. `1` for one auto-assigned readonly instance per one readonly group, `2` for creating new readonly group, `3` for all exist readonly instances stay in the exist readonly group. For now, only `1` and `3` are supported.
	ReadonlyGroupType pulumi.IntOutput `pulumi:"readonlyGroupType"`
	// Required when `readonlyGroupType`=2, whether the newly created read-only group has delay elimination enabled, 1-enabled, 0-disabled. When the delay between the read-only copy and the primary instance exceeds the threshold, it is automatically removed.
	ReadonlyGroupsIsOfflineDelay pulumi.IntOutput `pulumi:"readonlyGroupsIsOfflineDelay"`
	// Required when `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, the threshold for delayed elimination of newly created read-only groups.
	ReadonlyGroupsMaxDelayTime pulumi.IntOutput `pulumi:"readonlyGroupsMaxDelayTime"`
	// When `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, it is required. After the newly created read-only group is delayed and removed, at least the number of read-only copies should be retained.
	ReadonlyGroupsMinInGroup pulumi.IntOutput `pulumi:"readonlyGroupsMinInGroup"`
	// Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
	RoFlag pulumi.StringOutput `pulumi:"roFlag"`
	// Security group bound to the instance.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
	Status pulumi.IntOutput `pulumi:"status"`
	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `tencentcloudSqlserverSpecinfos` provides.
	Storage pulumi.IntOutput `pulumi:"storage"`
	// ID of subnet.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// The tags of the SQL Server.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// IP for private access.
	Vip pulumi.StringOutput `pulumi:"vip"`
	// An array of voucher IDs, currently only one can be used for a single order.
	VoucherIds pulumi.StringArrayOutput `pulumi:"voucherIds"`
	// ID of VPC.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// Port for private access.
	Vport pulumi.IntOutput `pulumi:"vport"`
	// It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	//
	// Deprecated: It has been deprecated from version 1.81.2.
	WaitSwitch pulumi.IntPtrOutput `pulumi:"waitSwitch"`
}

// NewReadonlyInstance registers a new resource with the given unique name, arguments, and options.
func NewReadonlyInstance(ctx *pulumi.Context,
	name string, args *ReadonlyInstanceArgs, opts ...pulumi.ResourceOption) (*ReadonlyInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MasterInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'MasterInstanceId'")
	}
	if args.Memory == nil {
		return nil, errors.New("invalid value for required argument 'Memory'")
	}
	if args.ReadonlyGroupType == nil {
		return nil, errors.New("invalid value for required argument 'ReadonlyGroupType'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ReadonlyInstance
	err := ctx.RegisterResource("tencentcloud:Sqlserver/readonlyInstance:ReadonlyInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReadonlyInstance gets an existing ReadonlyInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReadonlyInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReadonlyInstanceState, opts ...pulumi.ResourceOption) (*ReadonlyInstance, error) {
	var resource ReadonlyInstance
	err := ctx.ReadResource("tencentcloud:Sqlserver/readonlyInstance:ReadonlyInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReadonlyInstance resources.
type readonlyInstanceState struct {
	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	AutoVoucher *int `pulumi:"autoVoucher"`
	// Availability zone.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
	ChargeType *string `pulumi:"chargeType"`
	// Create time of the SQL Server instance.
	CreateTime *string `pulumi:"createTime"`
	// Indicate that the master instance upgrade or not. `true` for upgrading the master SQL Server instance to cluster type by force. Default is false. Note: this is not supported with `DUAL`(ha_type), `2017`(engine_version) master SQL Server instance, for it will cause haType of the master SQL Server instance change.
	ForceUpgrade *bool `pulumi:"forceUpgrade"`
	// Indicates the master instance ID of recovery instances.
	MasterInstanceId *string `pulumi:"masterInstanceId"`
	// Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloudSqlserverSpecinfos` provides.
	Memory *int `pulumi:"memory"`
	// Name of the SQL Server instance.
	Name *string `pulumi:"name"`
	// Purchase instance period in month. The value does not exceed 48.
	Period *int `pulumi:"period"`
	// ID of the readonly group that this instance belongs to. When `readonlyGroupType` set value `3`, it must be set with valid value.
	ReadonlyGroupId *string `pulumi:"readonlyGroupId"`
	// Required when `readonlyGroupType`=2, the name of the newly created read-only group.
	ReadonlyGroupName *string `pulumi:"readonlyGroupName"`
	// Type of readonly group. Valid values: `1`, `3`. `1` for one auto-assigned readonly instance per one readonly group, `2` for creating new readonly group, `3` for all exist readonly instances stay in the exist readonly group. For now, only `1` and `3` are supported.
	ReadonlyGroupType *int `pulumi:"readonlyGroupType"`
	// Required when `readonlyGroupType`=2, whether the newly created read-only group has delay elimination enabled, 1-enabled, 0-disabled. When the delay between the read-only copy and the primary instance exceeds the threshold, it is automatically removed.
	ReadonlyGroupsIsOfflineDelay *int `pulumi:"readonlyGroupsIsOfflineDelay"`
	// Required when `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, the threshold for delayed elimination of newly created read-only groups.
	ReadonlyGroupsMaxDelayTime *int `pulumi:"readonlyGroupsMaxDelayTime"`
	// When `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, it is required. After the newly created read-only group is delayed and removed, at least the number of read-only copies should be retained.
	ReadonlyGroupsMinInGroup *int `pulumi:"readonlyGroupsMinInGroup"`
	// Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
	RoFlag *string `pulumi:"roFlag"`
	// Security group bound to the instance.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
	Status *int `pulumi:"status"`
	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `tencentcloudSqlserverSpecinfos` provides.
	Storage *int `pulumi:"storage"`
	// ID of subnet.
	SubnetId *string `pulumi:"subnetId"`
	// The tags of the SQL Server.
	Tags map[string]interface{} `pulumi:"tags"`
	// IP for private access.
	Vip *string `pulumi:"vip"`
	// An array of voucher IDs, currently only one can be used for a single order.
	VoucherIds []string `pulumi:"voucherIds"`
	// ID of VPC.
	VpcId *string `pulumi:"vpcId"`
	// Port for private access.
	Vport *int `pulumi:"vport"`
	// It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	//
	// Deprecated: It has been deprecated from version 1.81.2.
	WaitSwitch *int `pulumi:"waitSwitch"`
}

type ReadonlyInstanceState struct {
	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	AutoVoucher pulumi.IntPtrInput
	// Availability zone.
	AvailabilityZone pulumi.StringPtrInput
	// Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrInput
	// Create time of the SQL Server instance.
	CreateTime pulumi.StringPtrInput
	// Indicate that the master instance upgrade or not. `true` for upgrading the master SQL Server instance to cluster type by force. Default is false. Note: this is not supported with `DUAL`(ha_type), `2017`(engine_version) master SQL Server instance, for it will cause haType of the master SQL Server instance change.
	ForceUpgrade pulumi.BoolPtrInput
	// Indicates the master instance ID of recovery instances.
	MasterInstanceId pulumi.StringPtrInput
	// Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloudSqlserverSpecinfos` provides.
	Memory pulumi.IntPtrInput
	// Name of the SQL Server instance.
	Name pulumi.StringPtrInput
	// Purchase instance period in month. The value does not exceed 48.
	Period pulumi.IntPtrInput
	// ID of the readonly group that this instance belongs to. When `readonlyGroupType` set value `3`, it must be set with valid value.
	ReadonlyGroupId pulumi.StringPtrInput
	// Required when `readonlyGroupType`=2, the name of the newly created read-only group.
	ReadonlyGroupName pulumi.StringPtrInput
	// Type of readonly group. Valid values: `1`, `3`. `1` for one auto-assigned readonly instance per one readonly group, `2` for creating new readonly group, `3` for all exist readonly instances stay in the exist readonly group. For now, only `1` and `3` are supported.
	ReadonlyGroupType pulumi.IntPtrInput
	// Required when `readonlyGroupType`=2, whether the newly created read-only group has delay elimination enabled, 1-enabled, 0-disabled. When the delay between the read-only copy and the primary instance exceeds the threshold, it is automatically removed.
	ReadonlyGroupsIsOfflineDelay pulumi.IntPtrInput
	// Required when `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, the threshold for delayed elimination of newly created read-only groups.
	ReadonlyGroupsMaxDelayTime pulumi.IntPtrInput
	// When `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, it is required. After the newly created read-only group is delayed and removed, at least the number of read-only copies should be retained.
	ReadonlyGroupsMinInGroup pulumi.IntPtrInput
	// Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
	RoFlag pulumi.StringPtrInput
	// Security group bound to the instance.
	SecurityGroups pulumi.StringArrayInput
	// Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
	Status pulumi.IntPtrInput
	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `tencentcloudSqlserverSpecinfos` provides.
	Storage pulumi.IntPtrInput
	// ID of subnet.
	SubnetId pulumi.StringPtrInput
	// The tags of the SQL Server.
	Tags pulumi.MapInput
	// IP for private access.
	Vip pulumi.StringPtrInput
	// An array of voucher IDs, currently only one can be used for a single order.
	VoucherIds pulumi.StringArrayInput
	// ID of VPC.
	VpcId pulumi.StringPtrInput
	// Port for private access.
	Vport pulumi.IntPtrInput
	// It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	//
	// Deprecated: It has been deprecated from version 1.81.2.
	WaitSwitch pulumi.IntPtrInput
}

func (ReadonlyInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*readonlyInstanceState)(nil)).Elem()
}

type readonlyInstanceArgs struct {
	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	AutoVoucher *int `pulumi:"autoVoucher"`
	// Availability zone.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
	ChargeType *string `pulumi:"chargeType"`
	// Indicate that the master instance upgrade or not. `true` for upgrading the master SQL Server instance to cluster type by force. Default is false. Note: this is not supported with `DUAL`(ha_type), `2017`(engine_version) master SQL Server instance, for it will cause haType of the master SQL Server instance change.
	ForceUpgrade *bool `pulumi:"forceUpgrade"`
	// Indicates the master instance ID of recovery instances.
	MasterInstanceId string `pulumi:"masterInstanceId"`
	// Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloudSqlserverSpecinfos` provides.
	Memory int `pulumi:"memory"`
	// Name of the SQL Server instance.
	Name *string `pulumi:"name"`
	// Purchase instance period in month. The value does not exceed 48.
	Period *int `pulumi:"period"`
	// ID of the readonly group that this instance belongs to. When `readonlyGroupType` set value `3`, it must be set with valid value.
	ReadonlyGroupId *string `pulumi:"readonlyGroupId"`
	// Required when `readonlyGroupType`=2, the name of the newly created read-only group.
	ReadonlyGroupName *string `pulumi:"readonlyGroupName"`
	// Type of readonly group. Valid values: `1`, `3`. `1` for one auto-assigned readonly instance per one readonly group, `2` for creating new readonly group, `3` for all exist readonly instances stay in the exist readonly group. For now, only `1` and `3` are supported.
	ReadonlyGroupType int `pulumi:"readonlyGroupType"`
	// Required when `readonlyGroupType`=2, whether the newly created read-only group has delay elimination enabled, 1-enabled, 0-disabled. When the delay between the read-only copy and the primary instance exceeds the threshold, it is automatically removed.
	ReadonlyGroupsIsOfflineDelay *int `pulumi:"readonlyGroupsIsOfflineDelay"`
	// Required when `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, the threshold for delayed elimination of newly created read-only groups.
	ReadonlyGroupsMaxDelayTime *int `pulumi:"readonlyGroupsMaxDelayTime"`
	// When `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, it is required. After the newly created read-only group is delayed and removed, at least the number of read-only copies should be retained.
	ReadonlyGroupsMinInGroup *int `pulumi:"readonlyGroupsMinInGroup"`
	// Security group bound to the instance.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `tencentcloudSqlserverSpecinfos` provides.
	Storage int `pulumi:"storage"`
	// ID of subnet.
	SubnetId *string `pulumi:"subnetId"`
	// The tags of the SQL Server.
	Tags map[string]interface{} `pulumi:"tags"`
	// An array of voucher IDs, currently only one can be used for a single order.
	VoucherIds []string `pulumi:"voucherIds"`
	// ID of VPC.
	VpcId *string `pulumi:"vpcId"`
	// It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	//
	// Deprecated: It has been deprecated from version 1.81.2.
	WaitSwitch *int `pulumi:"waitSwitch"`
}

// The set of arguments for constructing a ReadonlyInstance resource.
type ReadonlyInstanceArgs struct {
	// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
	AutoVoucher pulumi.IntPtrInput
	// Availability zone.
	AvailabilityZone pulumi.StringPtrInput
	// Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrInput
	// Indicate that the master instance upgrade or not. `true` for upgrading the master SQL Server instance to cluster type by force. Default is false. Note: this is not supported with `DUAL`(ha_type), `2017`(engine_version) master SQL Server instance, for it will cause haType of the master SQL Server instance change.
	ForceUpgrade pulumi.BoolPtrInput
	// Indicates the master instance ID of recovery instances.
	MasterInstanceId pulumi.StringInput
	// Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloudSqlserverSpecinfos` provides.
	Memory pulumi.IntInput
	// Name of the SQL Server instance.
	Name pulumi.StringPtrInput
	// Purchase instance period in month. The value does not exceed 48.
	Period pulumi.IntPtrInput
	// ID of the readonly group that this instance belongs to. When `readonlyGroupType` set value `3`, it must be set with valid value.
	ReadonlyGroupId pulumi.StringPtrInput
	// Required when `readonlyGroupType`=2, the name of the newly created read-only group.
	ReadonlyGroupName pulumi.StringPtrInput
	// Type of readonly group. Valid values: `1`, `3`. `1` for one auto-assigned readonly instance per one readonly group, `2` for creating new readonly group, `3` for all exist readonly instances stay in the exist readonly group. For now, only `1` and `3` are supported.
	ReadonlyGroupType pulumi.IntInput
	// Required when `readonlyGroupType`=2, whether the newly created read-only group has delay elimination enabled, 1-enabled, 0-disabled. When the delay between the read-only copy and the primary instance exceeds the threshold, it is automatically removed.
	ReadonlyGroupsIsOfflineDelay pulumi.IntPtrInput
	// Required when `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, the threshold for delayed elimination of newly created read-only groups.
	ReadonlyGroupsMaxDelayTime pulumi.IntPtrInput
	// When `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, it is required. After the newly created read-only group is delayed and removed, at least the number of read-only copies should be retained.
	ReadonlyGroupsMinInGroup pulumi.IntPtrInput
	// Security group bound to the instance.
	SecurityGroups pulumi.StringArrayInput
	// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `tencentcloudSqlserverSpecinfos` provides.
	Storage pulumi.IntInput
	// ID of subnet.
	SubnetId pulumi.StringPtrInput
	// The tags of the SQL Server.
	Tags pulumi.MapInput
	// An array of voucher IDs, currently only one can be used for a single order.
	VoucherIds pulumi.StringArrayInput
	// ID of VPC.
	VpcId pulumi.StringPtrInput
	// It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
	//
	// Deprecated: It has been deprecated from version 1.81.2.
	WaitSwitch pulumi.IntPtrInput
}

func (ReadonlyInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*readonlyInstanceArgs)(nil)).Elem()
}

type ReadonlyInstanceInput interface {
	pulumi.Input

	ToReadonlyInstanceOutput() ReadonlyInstanceOutput
	ToReadonlyInstanceOutputWithContext(ctx context.Context) ReadonlyInstanceOutput
}

func (*ReadonlyInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadonlyInstance)(nil)).Elem()
}

func (i *ReadonlyInstance) ToReadonlyInstanceOutput() ReadonlyInstanceOutput {
	return i.ToReadonlyInstanceOutputWithContext(context.Background())
}

func (i *ReadonlyInstance) ToReadonlyInstanceOutputWithContext(ctx context.Context) ReadonlyInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyInstanceOutput)
}

// ReadonlyInstanceArrayInput is an input type that accepts ReadonlyInstanceArray and ReadonlyInstanceArrayOutput values.
// You can construct a concrete instance of `ReadonlyInstanceArrayInput` via:
//
//	ReadonlyInstanceArray{ ReadonlyInstanceArgs{...} }
type ReadonlyInstanceArrayInput interface {
	pulumi.Input

	ToReadonlyInstanceArrayOutput() ReadonlyInstanceArrayOutput
	ToReadonlyInstanceArrayOutputWithContext(context.Context) ReadonlyInstanceArrayOutput
}

type ReadonlyInstanceArray []ReadonlyInstanceInput

func (ReadonlyInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReadonlyInstance)(nil)).Elem()
}

func (i ReadonlyInstanceArray) ToReadonlyInstanceArrayOutput() ReadonlyInstanceArrayOutput {
	return i.ToReadonlyInstanceArrayOutputWithContext(context.Background())
}

func (i ReadonlyInstanceArray) ToReadonlyInstanceArrayOutputWithContext(ctx context.Context) ReadonlyInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyInstanceArrayOutput)
}

// ReadonlyInstanceMapInput is an input type that accepts ReadonlyInstanceMap and ReadonlyInstanceMapOutput values.
// You can construct a concrete instance of `ReadonlyInstanceMapInput` via:
//
//	ReadonlyInstanceMap{ "key": ReadonlyInstanceArgs{...} }
type ReadonlyInstanceMapInput interface {
	pulumi.Input

	ToReadonlyInstanceMapOutput() ReadonlyInstanceMapOutput
	ToReadonlyInstanceMapOutputWithContext(context.Context) ReadonlyInstanceMapOutput
}

type ReadonlyInstanceMap map[string]ReadonlyInstanceInput

func (ReadonlyInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReadonlyInstance)(nil)).Elem()
}

func (i ReadonlyInstanceMap) ToReadonlyInstanceMapOutput() ReadonlyInstanceMapOutput {
	return i.ToReadonlyInstanceMapOutputWithContext(context.Background())
}

func (i ReadonlyInstanceMap) ToReadonlyInstanceMapOutputWithContext(ctx context.Context) ReadonlyInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadonlyInstanceMapOutput)
}

type ReadonlyInstanceOutput struct{ *pulumi.OutputState }

func (ReadonlyInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadonlyInstance)(nil)).Elem()
}

func (o ReadonlyInstanceOutput) ToReadonlyInstanceOutput() ReadonlyInstanceOutput {
	return o
}

func (o ReadonlyInstanceOutput) ToReadonlyInstanceOutputWithContext(ctx context.Context) ReadonlyInstanceOutput {
	return o
}

// Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
func (o ReadonlyInstanceOutput) AutoVoucher() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntPtrOutput { return v.AutoVoucher }).(pulumi.IntPtrOutput)
}

// Availability zone.
func (o ReadonlyInstanceOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
func (o ReadonlyInstanceOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringPtrOutput { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// Create time of the SQL Server instance.
func (o ReadonlyInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Indicate that the master instance upgrade or not. `true` for upgrading the master SQL Server instance to cluster type by force. Default is false. Note: this is not supported with `DUAL`(ha_type), `2017`(engine_version) master SQL Server instance, for it will cause haType of the master SQL Server instance change.
func (o ReadonlyInstanceOutput) ForceUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.BoolPtrOutput { return v.ForceUpgrade }).(pulumi.BoolPtrOutput)
}

// Indicates the master instance ID of recovery instances.
func (o ReadonlyInstanceOutput) MasterInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringOutput { return v.MasterInstanceId }).(pulumi.StringOutput)
}

// Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloudSqlserverSpecinfos` provides.
func (o ReadonlyInstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

// Name of the SQL Server instance.
func (o ReadonlyInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Purchase instance period in month. The value does not exceed 48.
func (o ReadonlyInstanceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// ID of the readonly group that this instance belongs to. When `readonlyGroupType` set value `3`, it must be set with valid value.
func (o ReadonlyInstanceOutput) ReadonlyGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringOutput { return v.ReadonlyGroupId }).(pulumi.StringOutput)
}

// Required when `readonlyGroupType`=2, the name of the newly created read-only group.
func (o ReadonlyInstanceOutput) ReadonlyGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringOutput { return v.ReadonlyGroupName }).(pulumi.StringOutput)
}

// Type of readonly group. Valid values: `1`, `3`. `1` for one auto-assigned readonly instance per one readonly group, `2` for creating new readonly group, `3` for all exist readonly instances stay in the exist readonly group. For now, only `1` and `3` are supported.
func (o ReadonlyInstanceOutput) ReadonlyGroupType() pulumi.IntOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntOutput { return v.ReadonlyGroupType }).(pulumi.IntOutput)
}

// Required when `readonlyGroupType`=2, whether the newly created read-only group has delay elimination enabled, 1-enabled, 0-disabled. When the delay between the read-only copy and the primary instance exceeds the threshold, it is automatically removed.
func (o ReadonlyInstanceOutput) ReadonlyGroupsIsOfflineDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntOutput { return v.ReadonlyGroupsIsOfflineDelay }).(pulumi.IntOutput)
}

// Required when `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, the threshold for delayed elimination of newly created read-only groups.
func (o ReadonlyInstanceOutput) ReadonlyGroupsMaxDelayTime() pulumi.IntOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntOutput { return v.ReadonlyGroupsMaxDelayTime }).(pulumi.IntOutput)
}

// When `readonlyGroupType`=2 and `readonlyGroupsIsOfflineDelay`=1, it is required. After the newly created read-only group is delayed and removed, at least the number of read-only copies should be retained.
func (o ReadonlyInstanceOutput) ReadonlyGroupsMinInGroup() pulumi.IntOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntOutput { return v.ReadonlyGroupsMinInGroup }).(pulumi.IntOutput)
}

// Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it refers to an instance which is not read-only and has no RO group.
func (o ReadonlyInstanceOutput) RoFlag() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringOutput { return v.RoFlag }).(pulumi.StringOutput)
}

// Security group bound to the instance.
func (o ReadonlyInstanceOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly, 12 for rebooting.
func (o ReadonlyInstanceOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storageMin` and `storageMax` which data source `tencentcloudSqlserverSpecinfos` provides.
func (o ReadonlyInstanceOutput) Storage() pulumi.IntOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntOutput { return v.Storage }).(pulumi.IntOutput)
}

// ID of subnet.
func (o ReadonlyInstanceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The tags of the SQL Server.
func (o ReadonlyInstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// IP for private access.
func (o ReadonlyInstanceOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringOutput { return v.Vip }).(pulumi.StringOutput)
}

// An array of voucher IDs, currently only one can be used for a single order.
func (o ReadonlyInstanceOutput) VoucherIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringArrayOutput { return v.VoucherIds }).(pulumi.StringArrayOutput)
}

// ID of VPC.
func (o ReadonlyInstanceOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// Port for private access.
func (o ReadonlyInstanceOutput) Vport() pulumi.IntOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntOutput { return v.Vport }).(pulumi.IntOutput)
}

// It has been deprecated from version 1.81.2. The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
//
// Deprecated: It has been deprecated from version 1.81.2.
func (o ReadonlyInstanceOutput) WaitSwitch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReadonlyInstance) pulumi.IntPtrOutput { return v.WaitSwitch }).(pulumi.IntPtrOutput)
}

type ReadonlyInstanceArrayOutput struct{ *pulumi.OutputState }

func (ReadonlyInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReadonlyInstance)(nil)).Elem()
}

func (o ReadonlyInstanceArrayOutput) ToReadonlyInstanceArrayOutput() ReadonlyInstanceArrayOutput {
	return o
}

func (o ReadonlyInstanceArrayOutput) ToReadonlyInstanceArrayOutputWithContext(ctx context.Context) ReadonlyInstanceArrayOutput {
	return o
}

func (o ReadonlyInstanceArrayOutput) Index(i pulumi.IntInput) ReadonlyInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReadonlyInstance {
		return vs[0].([]*ReadonlyInstance)[vs[1].(int)]
	}).(ReadonlyInstanceOutput)
}

type ReadonlyInstanceMapOutput struct{ *pulumi.OutputState }

func (ReadonlyInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReadonlyInstance)(nil)).Elem()
}

func (o ReadonlyInstanceMapOutput) ToReadonlyInstanceMapOutput() ReadonlyInstanceMapOutput {
	return o
}

func (o ReadonlyInstanceMapOutput) ToReadonlyInstanceMapOutputWithContext(ctx context.Context) ReadonlyInstanceMapOutput {
	return o
}

func (o ReadonlyInstanceMapOutput) MapIndex(k pulumi.StringInput) ReadonlyInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReadonlyInstance {
		return vs[0].(map[string]*ReadonlyInstance)[vs[1].(string)]
	}).(ReadonlyInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyInstanceInput)(nil)).Elem(), &ReadonlyInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyInstanceArrayInput)(nil)).Elem(), ReadonlyInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadonlyInstanceMapInput)(nil)).Elem(), ReadonlyInstanceMap{})
	pulumi.RegisterOutputType(ReadonlyInstanceOutput{})
	pulumi.RegisterOutputType(ReadonlyInstanceArrayOutput{})
	pulumi.RegisterOutputType(ReadonlyInstanceMapOutput{})
}
