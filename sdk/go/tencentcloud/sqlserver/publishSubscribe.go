// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a SQL Server PublishSubscribe resource belongs to SQL Server instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "sqlserver",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[4].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			examplePubGeneralCloudInstance, err := Sqlserver.NewGeneralCloudInstance(ctx, "examplePubGeneralCloudInstance", &Sqlserver.GeneralCloudInstanceArgs{
//				Zone:               pulumi.String(zones.Zones[4].Name),
//				Memory:             pulumi.Int(4),
//				Storage:            pulumi.Int(100),
//				Cpu:                pulumi.Int(2),
//				MachineType:        pulumi.String("CLOUD_HSSD"),
//				InstanceChargeType: pulumi.String("POSTPAID"),
//				ProjectId:          pulumi.Int(0),
//				SubnetId:           subnet.ID(),
//				VpcId:              vpc.ID(),
//				DbVersion:          pulumi.String("2008R2"),
//				SecurityGroupLists: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Weeklies: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//					pulumi.Int(5),
//					pulumi.Int(6),
//					pulumi.Int(7),
//				},
//				StartTime: pulumi.String("00:00"),
//				Span:      pulumi.Int(6),
//				ResourceTags: sqlserver.GeneralCloudInstanceResourceTagArray{
//					&sqlserver.GeneralCloudInstanceResourceTagArgs{
//						TagKey:   pulumi.String("test"),
//						TagValue: pulumi.String("test"),
//					},
//				},
//				Collation: pulumi.String("Chinese_PRC_CI_AS"),
//				TimeZone:  pulumi.String("China Standard Time"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubGeneralCloudInstance, err := Sqlserver.NewGeneralCloudInstance(ctx, "exampleSubGeneralCloudInstance", &Sqlserver.GeneralCloudInstanceArgs{
//				Zone:               pulumi.String(zones.Zones[4].Name),
//				Memory:             pulumi.Int(4),
//				Storage:            pulumi.Int(100),
//				Cpu:                pulumi.Int(2),
//				MachineType:        pulumi.String("CLOUD_HSSD"),
//				InstanceChargeType: pulumi.String("POSTPAID"),
//				ProjectId:          pulumi.Int(0),
//				SubnetId:           subnet.ID(),
//				VpcId:              vpc.ID(),
//				DbVersion:          pulumi.String("2008R2"),
//				SecurityGroupLists: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Weeklies: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(2),
//					pulumi.Int(3),
//					pulumi.Int(5),
//					pulumi.Int(6),
//					pulumi.Int(7),
//				},
//				StartTime: pulumi.String("00:00"),
//				Span:      pulumi.Int(6),
//				ResourceTags: sqlserver.GeneralCloudInstanceResourceTagArray{
//					&sqlserver.GeneralCloudInstanceResourceTagArgs{
//						TagKey:   pulumi.String("test"),
//						TagValue: pulumi.String("test"),
//					},
//				},
//				Collation: pulumi.String("Chinese_PRC_CI_AS"),
//				TimeZone:  pulumi.String("China Standard Time"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePubDb, err := Sqlserver.NewDb(ctx, "examplePubDb", &Sqlserver.DbArgs{
//				InstanceId: examplePubGeneralCloudInstance.ID(),
//				Charset:    pulumi.String("Chinese_PRC_BIN"),
//				Remark:     pulumi.String("test-remark"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubDb, err := Sqlserver.NewDb(ctx, "exampleSubDb", &Sqlserver.DbArgs{
//				InstanceId: exampleSubGeneralCloudInstance.ID(),
//				Charset:    pulumi.String("Chinese_PRC_BIN"),
//				Remark:     pulumi.String("test-remark"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Sqlserver.NewPublishSubscribe(ctx, "example", &Sqlserver.PublishSubscribeArgs{
//				PublishInstanceId:    examplePubGeneralCloudInstance.ID(),
//				SubscribeInstanceId:  exampleSubGeneralCloudInstance.ID(),
//				PublishSubscribeName: pulumi.String("example"),
//				DeleteSubscribeDb:    pulumi.Bool(false),
//				DatabaseTuples: sqlserver.PublishSubscribeDatabaseTupleArray{
//					&sqlserver.PublishSubscribeDatabaseTupleArgs{
//						PublishDatabase:   examplePubDb.Name,
//						SubscribeDatabase: exampleSubDb.Name,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SQL Server PublishSubscribe can be imported using the publish_sqlserver_id#subscribe_sqlserver_id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Sqlserver/publishSubscribe:PublishSubscribe example publish_sqlserver_id#subscribe_sqlserver_id
//
// ```
type PublishSubscribe struct {
	pulumi.CustomResourceState

	// Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
	DatabaseTuples PublishSubscribeDatabaseTupleArrayOutput `pulumi:"databaseTuples"`
	// Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
	DeleteSubscribeDb pulumi.BoolPtrOutput `pulumi:"deleteSubscribeDb"`
	// ID of the SQL Server instance which publish.
	PublishInstanceId pulumi.StringOutput `pulumi:"publishInstanceId"`
	// The name of the Publish and Subscribe. Default is `defaultName`.
	PublishSubscribeName pulumi.StringPtrOutput `pulumi:"publishSubscribeName"`
	// ID of the SQL Server instance which subscribe.
	SubscribeInstanceId pulumi.StringOutput `pulumi:"subscribeInstanceId"`
}

// NewPublishSubscribe registers a new resource with the given unique name, arguments, and options.
func NewPublishSubscribe(ctx *pulumi.Context,
	name string, args *PublishSubscribeArgs, opts ...pulumi.ResourceOption) (*PublishSubscribe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseTuples == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseTuples'")
	}
	if args.PublishInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'PublishInstanceId'")
	}
	if args.SubscribeInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'SubscribeInstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PublishSubscribe
	err := ctx.RegisterResource("tencentcloud:Sqlserver/publishSubscribe:PublishSubscribe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublishSubscribe gets an existing PublishSubscribe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublishSubscribe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublishSubscribeState, opts ...pulumi.ResourceOption) (*PublishSubscribe, error) {
	var resource PublishSubscribe
	err := ctx.ReadResource("tencentcloud:Sqlserver/publishSubscribe:PublishSubscribe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublishSubscribe resources.
type publishSubscribeState struct {
	// Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
	DatabaseTuples []PublishSubscribeDatabaseTuple `pulumi:"databaseTuples"`
	// Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
	DeleteSubscribeDb *bool `pulumi:"deleteSubscribeDb"`
	// ID of the SQL Server instance which publish.
	PublishInstanceId *string `pulumi:"publishInstanceId"`
	// The name of the Publish and Subscribe. Default is `defaultName`.
	PublishSubscribeName *string `pulumi:"publishSubscribeName"`
	// ID of the SQL Server instance which subscribe.
	SubscribeInstanceId *string `pulumi:"subscribeInstanceId"`
}

type PublishSubscribeState struct {
	// Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
	DatabaseTuples PublishSubscribeDatabaseTupleArrayInput
	// Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
	DeleteSubscribeDb pulumi.BoolPtrInput
	// ID of the SQL Server instance which publish.
	PublishInstanceId pulumi.StringPtrInput
	// The name of the Publish and Subscribe. Default is `defaultName`.
	PublishSubscribeName pulumi.StringPtrInput
	// ID of the SQL Server instance which subscribe.
	SubscribeInstanceId pulumi.StringPtrInput
}

func (PublishSubscribeState) ElementType() reflect.Type {
	return reflect.TypeOf((*publishSubscribeState)(nil)).Elem()
}

type publishSubscribeArgs struct {
	// Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
	DatabaseTuples []PublishSubscribeDatabaseTuple `pulumi:"databaseTuples"`
	// Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
	DeleteSubscribeDb *bool `pulumi:"deleteSubscribeDb"`
	// ID of the SQL Server instance which publish.
	PublishInstanceId string `pulumi:"publishInstanceId"`
	// The name of the Publish and Subscribe. Default is `defaultName`.
	PublishSubscribeName *string `pulumi:"publishSubscribeName"`
	// ID of the SQL Server instance which subscribe.
	SubscribeInstanceId string `pulumi:"subscribeInstanceId"`
}

// The set of arguments for constructing a PublishSubscribe resource.
type PublishSubscribeArgs struct {
	// Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
	DatabaseTuples PublishSubscribeDatabaseTupleArrayInput
	// Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
	DeleteSubscribeDb pulumi.BoolPtrInput
	// ID of the SQL Server instance which publish.
	PublishInstanceId pulumi.StringInput
	// The name of the Publish and Subscribe. Default is `defaultName`.
	PublishSubscribeName pulumi.StringPtrInput
	// ID of the SQL Server instance which subscribe.
	SubscribeInstanceId pulumi.StringInput
}

func (PublishSubscribeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publishSubscribeArgs)(nil)).Elem()
}

type PublishSubscribeInput interface {
	pulumi.Input

	ToPublishSubscribeOutput() PublishSubscribeOutput
	ToPublishSubscribeOutputWithContext(ctx context.Context) PublishSubscribeOutput
}

func (*PublishSubscribe) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishSubscribe)(nil)).Elem()
}

func (i *PublishSubscribe) ToPublishSubscribeOutput() PublishSubscribeOutput {
	return i.ToPublishSubscribeOutputWithContext(context.Background())
}

func (i *PublishSubscribe) ToPublishSubscribeOutputWithContext(ctx context.Context) PublishSubscribeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishSubscribeOutput)
}

// PublishSubscribeArrayInput is an input type that accepts PublishSubscribeArray and PublishSubscribeArrayOutput values.
// You can construct a concrete instance of `PublishSubscribeArrayInput` via:
//
//	PublishSubscribeArray{ PublishSubscribeArgs{...} }
type PublishSubscribeArrayInput interface {
	pulumi.Input

	ToPublishSubscribeArrayOutput() PublishSubscribeArrayOutput
	ToPublishSubscribeArrayOutputWithContext(context.Context) PublishSubscribeArrayOutput
}

type PublishSubscribeArray []PublishSubscribeInput

func (PublishSubscribeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublishSubscribe)(nil)).Elem()
}

func (i PublishSubscribeArray) ToPublishSubscribeArrayOutput() PublishSubscribeArrayOutput {
	return i.ToPublishSubscribeArrayOutputWithContext(context.Background())
}

func (i PublishSubscribeArray) ToPublishSubscribeArrayOutputWithContext(ctx context.Context) PublishSubscribeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishSubscribeArrayOutput)
}

// PublishSubscribeMapInput is an input type that accepts PublishSubscribeMap and PublishSubscribeMapOutput values.
// You can construct a concrete instance of `PublishSubscribeMapInput` via:
//
//	PublishSubscribeMap{ "key": PublishSubscribeArgs{...} }
type PublishSubscribeMapInput interface {
	pulumi.Input

	ToPublishSubscribeMapOutput() PublishSubscribeMapOutput
	ToPublishSubscribeMapOutputWithContext(context.Context) PublishSubscribeMapOutput
}

type PublishSubscribeMap map[string]PublishSubscribeInput

func (PublishSubscribeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublishSubscribe)(nil)).Elem()
}

func (i PublishSubscribeMap) ToPublishSubscribeMapOutput() PublishSubscribeMapOutput {
	return i.ToPublishSubscribeMapOutputWithContext(context.Background())
}

func (i PublishSubscribeMap) ToPublishSubscribeMapOutputWithContext(ctx context.Context) PublishSubscribeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishSubscribeMapOutput)
}

type PublishSubscribeOutput struct{ *pulumi.OutputState }

func (PublishSubscribeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishSubscribe)(nil)).Elem()
}

func (o PublishSubscribeOutput) ToPublishSubscribeOutput() PublishSubscribeOutput {
	return o
}

func (o PublishSubscribeOutput) ToPublishSubscribeOutputWithContext(ctx context.Context) PublishSubscribeOutput {
	return o
}

// Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
func (o PublishSubscribeOutput) DatabaseTuples() PublishSubscribeDatabaseTupleArrayOutput {
	return o.ApplyT(func(v *PublishSubscribe) PublishSubscribeDatabaseTupleArrayOutput { return v.DatabaseTuples }).(PublishSubscribeDatabaseTupleArrayOutput)
}

// Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
func (o PublishSubscribeOutput) DeleteSubscribeDb() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PublishSubscribe) pulumi.BoolPtrOutput { return v.DeleteSubscribeDb }).(pulumi.BoolPtrOutput)
}

// ID of the SQL Server instance which publish.
func (o PublishSubscribeOutput) PublishInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublishSubscribe) pulumi.StringOutput { return v.PublishInstanceId }).(pulumi.StringOutput)
}

// The name of the Publish and Subscribe. Default is `defaultName`.
func (o PublishSubscribeOutput) PublishSubscribeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublishSubscribe) pulumi.StringPtrOutput { return v.PublishSubscribeName }).(pulumi.StringPtrOutput)
}

// ID of the SQL Server instance which subscribe.
func (o PublishSubscribeOutput) SubscribeInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublishSubscribe) pulumi.StringOutput { return v.SubscribeInstanceId }).(pulumi.StringOutput)
}

type PublishSubscribeArrayOutput struct{ *pulumi.OutputState }

func (PublishSubscribeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublishSubscribe)(nil)).Elem()
}

func (o PublishSubscribeArrayOutput) ToPublishSubscribeArrayOutput() PublishSubscribeArrayOutput {
	return o
}

func (o PublishSubscribeArrayOutput) ToPublishSubscribeArrayOutputWithContext(ctx context.Context) PublishSubscribeArrayOutput {
	return o
}

func (o PublishSubscribeArrayOutput) Index(i pulumi.IntInput) PublishSubscribeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublishSubscribe {
		return vs[0].([]*PublishSubscribe)[vs[1].(int)]
	}).(PublishSubscribeOutput)
}

type PublishSubscribeMapOutput struct{ *pulumi.OutputState }

func (PublishSubscribeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublishSubscribe)(nil)).Elem()
}

func (o PublishSubscribeMapOutput) ToPublishSubscribeMapOutput() PublishSubscribeMapOutput {
	return o
}

func (o PublishSubscribeMapOutput) ToPublishSubscribeMapOutputWithContext(ctx context.Context) PublishSubscribeMapOutput {
	return o
}

func (o PublishSubscribeMapOutput) MapIndex(k pulumi.StringInput) PublishSubscribeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublishSubscribe {
		return vs[0].(map[string]*PublishSubscribe)[vs[1].(string)]
	}).(PublishSubscribeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublishSubscribeInput)(nil)).Elem(), &PublishSubscribe{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishSubscribeArrayInput)(nil)).Elem(), PublishSubscribeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublishSubscribeMapInput)(nil)).Elem(), PublishSubscribeMap{})
	pulumi.RegisterOutputType(PublishSubscribeOutput{})
	pulumi.RegisterOutputType(PublishSubscribeArrayOutput{})
	pulumi.RegisterOutputType(PublishSubscribeMapOutput{})
}
