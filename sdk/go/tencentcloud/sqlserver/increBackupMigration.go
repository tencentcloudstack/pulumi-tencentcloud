// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a sqlserver increBackupMigration
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Sqlserver"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Sqlserver.NewIncreBackupMigration(ctx, "example", &Sqlserver.IncreBackupMigrationArgs{
//				BackupFiles:       pulumi.StringArray{},
//				BackupMigrationId: pulumi.String("mssql-backup-migration-9tj0sxnz"),
//				InstanceId:        pulumi.String("mssql-4gmc5805"),
//				IsRecovery:        pulumi.String("YES"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// sqlserver incre_backup_migration can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Sqlserver/increBackupMigration:IncreBackupMigration incre_backup_migration incre_backup_migration_id
//
// ```
type IncreBackupMigration struct {
	pulumi.CustomResourceState

	// Incremental backup file. If the UploadType of a full backup file is COS_URL, fill in URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file here. Only 1 backup file is supported, but a backup file can involve multiple databases.
	BackupFiles pulumi.StringArrayOutput `pulumi:"backupFiles"`
	// Backup import task ID, which is returned through the API CreateBackupMigration.
	BackupMigrationId pulumi.StringOutput `pulumi:"backupMigrationId"`
	// Incremental import task ID.
	IncrementalMigrationId pulumi.StringOutput `pulumi:"incrementalMigrationId"`
	// ID of imported target instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Whether restoration is required. No: not required. Yes: required. Not required by default.
	IsRecovery pulumi.StringPtrOutput `pulumi:"isRecovery"`
}

// NewIncreBackupMigration registers a new resource with the given unique name, arguments, and options.
func NewIncreBackupMigration(ctx *pulumi.Context,
	name string, args *IncreBackupMigrationArgs, opts ...pulumi.ResourceOption) (*IncreBackupMigration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupMigrationId == nil {
		return nil, errors.New("invalid value for required argument 'BackupMigrationId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IncreBackupMigration
	err := ctx.RegisterResource("tencentcloud:Sqlserver/increBackupMigration:IncreBackupMigration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIncreBackupMigration gets an existing IncreBackupMigration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIncreBackupMigration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IncreBackupMigrationState, opts ...pulumi.ResourceOption) (*IncreBackupMigration, error) {
	var resource IncreBackupMigration
	err := ctx.ReadResource("tencentcloud:Sqlserver/increBackupMigration:IncreBackupMigration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IncreBackupMigration resources.
type increBackupMigrationState struct {
	// Incremental backup file. If the UploadType of a full backup file is COS_URL, fill in URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file here. Only 1 backup file is supported, but a backup file can involve multiple databases.
	BackupFiles []string `pulumi:"backupFiles"`
	// Backup import task ID, which is returned through the API CreateBackupMigration.
	BackupMigrationId *string `pulumi:"backupMigrationId"`
	// Incremental import task ID.
	IncrementalMigrationId *string `pulumi:"incrementalMigrationId"`
	// ID of imported target instance.
	InstanceId *string `pulumi:"instanceId"`
	// Whether restoration is required. No: not required. Yes: required. Not required by default.
	IsRecovery *string `pulumi:"isRecovery"`
}

type IncreBackupMigrationState struct {
	// Incremental backup file. If the UploadType of a full backup file is COS_URL, fill in URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file here. Only 1 backup file is supported, but a backup file can involve multiple databases.
	BackupFiles pulumi.StringArrayInput
	// Backup import task ID, which is returned through the API CreateBackupMigration.
	BackupMigrationId pulumi.StringPtrInput
	// Incremental import task ID.
	IncrementalMigrationId pulumi.StringPtrInput
	// ID of imported target instance.
	InstanceId pulumi.StringPtrInput
	// Whether restoration is required. No: not required. Yes: required. Not required by default.
	IsRecovery pulumi.StringPtrInput
}

func (IncreBackupMigrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*increBackupMigrationState)(nil)).Elem()
}

type increBackupMigrationArgs struct {
	// Incremental backup file. If the UploadType of a full backup file is COS_URL, fill in URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file here. Only 1 backup file is supported, but a backup file can involve multiple databases.
	BackupFiles []string `pulumi:"backupFiles"`
	// Backup import task ID, which is returned through the API CreateBackupMigration.
	BackupMigrationId string `pulumi:"backupMigrationId"`
	// ID of imported target instance.
	InstanceId string `pulumi:"instanceId"`
	// Whether restoration is required. No: not required. Yes: required. Not required by default.
	IsRecovery *string `pulumi:"isRecovery"`
}

// The set of arguments for constructing a IncreBackupMigration resource.
type IncreBackupMigrationArgs struct {
	// Incremental backup file. If the UploadType of a full backup file is COS_URL, fill in URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file here. Only 1 backup file is supported, but a backup file can involve multiple databases.
	BackupFiles pulumi.StringArrayInput
	// Backup import task ID, which is returned through the API CreateBackupMigration.
	BackupMigrationId pulumi.StringInput
	// ID of imported target instance.
	InstanceId pulumi.StringInput
	// Whether restoration is required. No: not required. Yes: required. Not required by default.
	IsRecovery pulumi.StringPtrInput
}

func (IncreBackupMigrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*increBackupMigrationArgs)(nil)).Elem()
}

type IncreBackupMigrationInput interface {
	pulumi.Input

	ToIncreBackupMigrationOutput() IncreBackupMigrationOutput
	ToIncreBackupMigrationOutputWithContext(ctx context.Context) IncreBackupMigrationOutput
}

func (*IncreBackupMigration) ElementType() reflect.Type {
	return reflect.TypeOf((**IncreBackupMigration)(nil)).Elem()
}

func (i *IncreBackupMigration) ToIncreBackupMigrationOutput() IncreBackupMigrationOutput {
	return i.ToIncreBackupMigrationOutputWithContext(context.Background())
}

func (i *IncreBackupMigration) ToIncreBackupMigrationOutputWithContext(ctx context.Context) IncreBackupMigrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncreBackupMigrationOutput)
}

// IncreBackupMigrationArrayInput is an input type that accepts IncreBackupMigrationArray and IncreBackupMigrationArrayOutput values.
// You can construct a concrete instance of `IncreBackupMigrationArrayInput` via:
//
//	IncreBackupMigrationArray{ IncreBackupMigrationArgs{...} }
type IncreBackupMigrationArrayInput interface {
	pulumi.Input

	ToIncreBackupMigrationArrayOutput() IncreBackupMigrationArrayOutput
	ToIncreBackupMigrationArrayOutputWithContext(context.Context) IncreBackupMigrationArrayOutput
}

type IncreBackupMigrationArray []IncreBackupMigrationInput

func (IncreBackupMigrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncreBackupMigration)(nil)).Elem()
}

func (i IncreBackupMigrationArray) ToIncreBackupMigrationArrayOutput() IncreBackupMigrationArrayOutput {
	return i.ToIncreBackupMigrationArrayOutputWithContext(context.Background())
}

func (i IncreBackupMigrationArray) ToIncreBackupMigrationArrayOutputWithContext(ctx context.Context) IncreBackupMigrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncreBackupMigrationArrayOutput)
}

// IncreBackupMigrationMapInput is an input type that accepts IncreBackupMigrationMap and IncreBackupMigrationMapOutput values.
// You can construct a concrete instance of `IncreBackupMigrationMapInput` via:
//
//	IncreBackupMigrationMap{ "key": IncreBackupMigrationArgs{...} }
type IncreBackupMigrationMapInput interface {
	pulumi.Input

	ToIncreBackupMigrationMapOutput() IncreBackupMigrationMapOutput
	ToIncreBackupMigrationMapOutputWithContext(context.Context) IncreBackupMigrationMapOutput
}

type IncreBackupMigrationMap map[string]IncreBackupMigrationInput

func (IncreBackupMigrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncreBackupMigration)(nil)).Elem()
}

func (i IncreBackupMigrationMap) ToIncreBackupMigrationMapOutput() IncreBackupMigrationMapOutput {
	return i.ToIncreBackupMigrationMapOutputWithContext(context.Background())
}

func (i IncreBackupMigrationMap) ToIncreBackupMigrationMapOutputWithContext(ctx context.Context) IncreBackupMigrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncreBackupMigrationMapOutput)
}

type IncreBackupMigrationOutput struct{ *pulumi.OutputState }

func (IncreBackupMigrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncreBackupMigration)(nil)).Elem()
}

func (o IncreBackupMigrationOutput) ToIncreBackupMigrationOutput() IncreBackupMigrationOutput {
	return o
}

func (o IncreBackupMigrationOutput) ToIncreBackupMigrationOutputWithContext(ctx context.Context) IncreBackupMigrationOutput {
	return o
}

// Incremental backup file. If the UploadType of a full backup file is COS_URL, fill in URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file here. Only 1 backup file is supported, but a backup file can involve multiple databases.
func (o IncreBackupMigrationOutput) BackupFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IncreBackupMigration) pulumi.StringArrayOutput { return v.BackupFiles }).(pulumi.StringArrayOutput)
}

// Backup import task ID, which is returned through the API CreateBackupMigration.
func (o IncreBackupMigrationOutput) BackupMigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IncreBackupMigration) pulumi.StringOutput { return v.BackupMigrationId }).(pulumi.StringOutput)
}

// Incremental import task ID.
func (o IncreBackupMigrationOutput) IncrementalMigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *IncreBackupMigration) pulumi.StringOutput { return v.IncrementalMigrationId }).(pulumi.StringOutput)
}

// ID of imported target instance.
func (o IncreBackupMigrationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *IncreBackupMigration) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Whether restoration is required. No: not required. Yes: required. Not required by default.
func (o IncreBackupMigrationOutput) IsRecovery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncreBackupMigration) pulumi.StringPtrOutput { return v.IsRecovery }).(pulumi.StringPtrOutput)
}

type IncreBackupMigrationArrayOutput struct{ *pulumi.OutputState }

func (IncreBackupMigrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncreBackupMigration)(nil)).Elem()
}

func (o IncreBackupMigrationArrayOutput) ToIncreBackupMigrationArrayOutput() IncreBackupMigrationArrayOutput {
	return o
}

func (o IncreBackupMigrationArrayOutput) ToIncreBackupMigrationArrayOutputWithContext(ctx context.Context) IncreBackupMigrationArrayOutput {
	return o
}

func (o IncreBackupMigrationArrayOutput) Index(i pulumi.IntInput) IncreBackupMigrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IncreBackupMigration {
		return vs[0].([]*IncreBackupMigration)[vs[1].(int)]
	}).(IncreBackupMigrationOutput)
}

type IncreBackupMigrationMapOutput struct{ *pulumi.OutputState }

func (IncreBackupMigrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncreBackupMigration)(nil)).Elem()
}

func (o IncreBackupMigrationMapOutput) ToIncreBackupMigrationMapOutput() IncreBackupMigrationMapOutput {
	return o
}

func (o IncreBackupMigrationMapOutput) ToIncreBackupMigrationMapOutputWithContext(ctx context.Context) IncreBackupMigrationMapOutput {
	return o
}

func (o IncreBackupMigrationMapOutput) MapIndex(k pulumi.StringInput) IncreBackupMigrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IncreBackupMigration {
		return vs[0].(map[string]*IncreBackupMigration)[vs[1].(string)]
	}).(IncreBackupMigrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IncreBackupMigrationInput)(nil)).Elem(), &IncreBackupMigration{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncreBackupMigrationArrayInput)(nil)).Elem(), IncreBackupMigrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncreBackupMigrationMapInput)(nil)).Elem(), IncreBackupMigrationMap{})
	pulumi.RegisterOutputType(IncreBackupMigrationOutput{})
	pulumi.RegisterOutputType(IncreBackupMigrationArrayOutput{})
	pulumi.RegisterOutputType(IncreBackupMigrationMapOutput{})
}
