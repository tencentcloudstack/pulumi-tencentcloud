// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organization

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a organization service assign
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Organization"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Organization.NewServiceAssign(ctx, "example", &Organization.ServiceAssignArgs{
//				ManagementScope: pulumi.Int(1),
//				MemberUins: pulumi.IntArray{
//					pulumi.Int(100037235241),
//					pulumi.Int(100033738111),
//				},
//				ServiceId: pulumi.Int(15),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Organization"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Organization.NewServiceAssign(ctx, "example", &Organization.ServiceAssignArgs{
//				ManagementScope: pulumi.Int(2),
//				ManagementScopeNodeIds: pulumi.IntArray{
//					pulumi.Int(2024256),
//					pulumi.Int(2024259),
//				},
//				ManagementScopeUins: pulumi.IntArray{
//					pulumi.Int(100019287759),
//					pulumi.Int(100020537485),
//				},
//				MemberUins: pulumi.IntArray{
//					pulumi.Int(100013415241),
//					pulumi.Int(100078908111),
//				},
//				ServiceId: pulumi.Int(15),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// organization service assign can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Organization/serviceAssign:ServiceAssign example 15
// ```
type ServiceAssign struct {
	pulumi.CustomResourceState

	// Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
	ManagementScope pulumi.IntOutput `pulumi:"managementScope"`
	// ID list of the managed departments. This parameter is valid when `managementScope` is `2`.
	ManagementScopeNodeIds pulumi.IntArrayOutput `pulumi:"managementScopeNodeIds"`
	// Uin list of the managed members. This parameter is valid when `managementScope` is `2`.
	ManagementScopeUins pulumi.IntArrayOutput `pulumi:"managementScopeUins"`
	// Uin list of the delegated admins, Including up to 20 items.
	MemberUins pulumi.IntArrayOutput `pulumi:"memberUins"`
	// Organization service ID.
	ServiceId pulumi.IntOutput `pulumi:"serviceId"`
}

// NewServiceAssign registers a new resource with the given unique name, arguments, and options.
func NewServiceAssign(ctx *pulumi.Context,
	name string, args *ServiceAssignArgs, opts ...pulumi.ResourceOption) (*ServiceAssign, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MemberUins == nil {
		return nil, errors.New("invalid value for required argument 'MemberUins'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAssign
	err := ctx.RegisterResource("tencentcloud:Organization/serviceAssign:ServiceAssign", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAssign gets an existing ServiceAssign resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAssign(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAssignState, opts ...pulumi.ResourceOption) (*ServiceAssign, error) {
	var resource ServiceAssign
	err := ctx.ReadResource("tencentcloud:Organization/serviceAssign:ServiceAssign", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAssign resources.
type serviceAssignState struct {
	// Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
	ManagementScope *int `pulumi:"managementScope"`
	// ID list of the managed departments. This parameter is valid when `managementScope` is `2`.
	ManagementScopeNodeIds []int `pulumi:"managementScopeNodeIds"`
	// Uin list of the managed members. This parameter is valid when `managementScope` is `2`.
	ManagementScopeUins []int `pulumi:"managementScopeUins"`
	// Uin list of the delegated admins, Including up to 20 items.
	MemberUins []int `pulumi:"memberUins"`
	// Organization service ID.
	ServiceId *int `pulumi:"serviceId"`
}

type ServiceAssignState struct {
	// Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
	ManagementScope pulumi.IntPtrInput
	// ID list of the managed departments. This parameter is valid when `managementScope` is `2`.
	ManagementScopeNodeIds pulumi.IntArrayInput
	// Uin list of the managed members. This parameter is valid when `managementScope` is `2`.
	ManagementScopeUins pulumi.IntArrayInput
	// Uin list of the delegated admins, Including up to 20 items.
	MemberUins pulumi.IntArrayInput
	// Organization service ID.
	ServiceId pulumi.IntPtrInput
}

func (ServiceAssignState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAssignState)(nil)).Elem()
}

type serviceAssignArgs struct {
	// Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
	ManagementScope *int `pulumi:"managementScope"`
	// ID list of the managed departments. This parameter is valid when `managementScope` is `2`.
	ManagementScopeNodeIds []int `pulumi:"managementScopeNodeIds"`
	// Uin list of the managed members. This parameter is valid when `managementScope` is `2`.
	ManagementScopeUins []int `pulumi:"managementScopeUins"`
	// Uin list of the delegated admins, Including up to 20 items.
	MemberUins []int `pulumi:"memberUins"`
	// Organization service ID.
	ServiceId int `pulumi:"serviceId"`
}

// The set of arguments for constructing a ServiceAssign resource.
type ServiceAssignArgs struct {
	// Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
	ManagementScope pulumi.IntPtrInput
	// ID list of the managed departments. This parameter is valid when `managementScope` is `2`.
	ManagementScopeNodeIds pulumi.IntArrayInput
	// Uin list of the managed members. This parameter is valid when `managementScope` is `2`.
	ManagementScopeUins pulumi.IntArrayInput
	// Uin list of the delegated admins, Including up to 20 items.
	MemberUins pulumi.IntArrayInput
	// Organization service ID.
	ServiceId pulumi.IntInput
}

func (ServiceAssignArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAssignArgs)(nil)).Elem()
}

type ServiceAssignInput interface {
	pulumi.Input

	ToServiceAssignOutput() ServiceAssignOutput
	ToServiceAssignOutputWithContext(ctx context.Context) ServiceAssignOutput
}

func (*ServiceAssign) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAssign)(nil)).Elem()
}

func (i *ServiceAssign) ToServiceAssignOutput() ServiceAssignOutput {
	return i.ToServiceAssignOutputWithContext(context.Background())
}

func (i *ServiceAssign) ToServiceAssignOutputWithContext(ctx context.Context) ServiceAssignOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAssignOutput)
}

// ServiceAssignArrayInput is an input type that accepts ServiceAssignArray and ServiceAssignArrayOutput values.
// You can construct a concrete instance of `ServiceAssignArrayInput` via:
//
//	ServiceAssignArray{ ServiceAssignArgs{...} }
type ServiceAssignArrayInput interface {
	pulumi.Input

	ToServiceAssignArrayOutput() ServiceAssignArrayOutput
	ToServiceAssignArrayOutputWithContext(context.Context) ServiceAssignArrayOutput
}

type ServiceAssignArray []ServiceAssignInput

func (ServiceAssignArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAssign)(nil)).Elem()
}

func (i ServiceAssignArray) ToServiceAssignArrayOutput() ServiceAssignArrayOutput {
	return i.ToServiceAssignArrayOutputWithContext(context.Background())
}

func (i ServiceAssignArray) ToServiceAssignArrayOutputWithContext(ctx context.Context) ServiceAssignArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAssignArrayOutput)
}

// ServiceAssignMapInput is an input type that accepts ServiceAssignMap and ServiceAssignMapOutput values.
// You can construct a concrete instance of `ServiceAssignMapInput` via:
//
//	ServiceAssignMap{ "key": ServiceAssignArgs{...} }
type ServiceAssignMapInput interface {
	pulumi.Input

	ToServiceAssignMapOutput() ServiceAssignMapOutput
	ToServiceAssignMapOutputWithContext(context.Context) ServiceAssignMapOutput
}

type ServiceAssignMap map[string]ServiceAssignInput

func (ServiceAssignMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAssign)(nil)).Elem()
}

func (i ServiceAssignMap) ToServiceAssignMapOutput() ServiceAssignMapOutput {
	return i.ToServiceAssignMapOutputWithContext(context.Background())
}

func (i ServiceAssignMap) ToServiceAssignMapOutputWithContext(ctx context.Context) ServiceAssignMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAssignMapOutput)
}

type ServiceAssignOutput struct{ *pulumi.OutputState }

func (ServiceAssignOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAssign)(nil)).Elem()
}

func (o ServiceAssignOutput) ToServiceAssignOutput() ServiceAssignOutput {
	return o
}

func (o ServiceAssignOutput) ToServiceAssignOutputWithContext(ctx context.Context) ServiceAssignOutput {
	return o
}

// Management scope of the delegated admin. Valid values: 1 (all members), 2 (partial members). Default value: `1`.
func (o ServiceAssignOutput) ManagementScope() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceAssign) pulumi.IntOutput { return v.ManagementScope }).(pulumi.IntOutput)
}

// ID list of the managed departments. This parameter is valid when `managementScope` is `2`.
func (o ServiceAssignOutput) ManagementScopeNodeIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ServiceAssign) pulumi.IntArrayOutput { return v.ManagementScopeNodeIds }).(pulumi.IntArrayOutput)
}

// Uin list of the managed members. This parameter is valid when `managementScope` is `2`.
func (o ServiceAssignOutput) ManagementScopeUins() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ServiceAssign) pulumi.IntArrayOutput { return v.ManagementScopeUins }).(pulumi.IntArrayOutput)
}

// Uin list of the delegated admins, Including up to 20 items.
func (o ServiceAssignOutput) MemberUins() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ServiceAssign) pulumi.IntArrayOutput { return v.MemberUins }).(pulumi.IntArrayOutput)
}

// Organization service ID.
func (o ServiceAssignOutput) ServiceId() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceAssign) pulumi.IntOutput { return v.ServiceId }).(pulumi.IntOutput)
}

type ServiceAssignArrayOutput struct{ *pulumi.OutputState }

func (ServiceAssignArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAssign)(nil)).Elem()
}

func (o ServiceAssignArrayOutput) ToServiceAssignArrayOutput() ServiceAssignArrayOutput {
	return o
}

func (o ServiceAssignArrayOutput) ToServiceAssignArrayOutputWithContext(ctx context.Context) ServiceAssignArrayOutput {
	return o
}

func (o ServiceAssignArrayOutput) Index(i pulumi.IntInput) ServiceAssignOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceAssign {
		return vs[0].([]*ServiceAssign)[vs[1].(int)]
	}).(ServiceAssignOutput)
}

type ServiceAssignMapOutput struct{ *pulumi.OutputState }

func (ServiceAssignMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAssign)(nil)).Elem()
}

func (o ServiceAssignMapOutput) ToServiceAssignMapOutput() ServiceAssignMapOutput {
	return o
}

func (o ServiceAssignMapOutput) ToServiceAssignMapOutputWithContext(ctx context.Context) ServiceAssignMapOutput {
	return o
}

func (o ServiceAssignMapOutput) MapIndex(k pulumi.StringInput) ServiceAssignOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceAssign {
		return vs[0].(map[string]*ServiceAssign)[vs[1].(string)]
	}).(ServiceAssignOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAssignInput)(nil)).Elem(), &ServiceAssign{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAssignArrayInput)(nil)).Elem(), ServiceAssignArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAssignMapInput)(nil)).Elem(), ServiceAssignMap{})
	pulumi.RegisterOutputType(ServiceAssignOutput{})
	pulumi.RegisterOutputType(ServiceAssignArrayOutput{})
	pulumi.RegisterOutputType(ServiceAssignMapOutput{})
}
