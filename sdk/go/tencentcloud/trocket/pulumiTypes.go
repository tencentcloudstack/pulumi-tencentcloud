// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trocket

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RocketmqInstanceIpRule struct {
	// Whether to allow release or not.
	Allow bool `pulumi:"allow"`
	// IP.
	Ip string `pulumi:"ip"`
	// Remark.
	Remark string `pulumi:"remark"`
}

// RocketmqInstanceIpRuleInput is an input type that accepts RocketmqInstanceIpRuleArgs and RocketmqInstanceIpRuleOutput values.
// You can construct a concrete instance of `RocketmqInstanceIpRuleInput` via:
//
//	RocketmqInstanceIpRuleArgs{...}
type RocketmqInstanceIpRuleInput interface {
	pulumi.Input

	ToRocketmqInstanceIpRuleOutput() RocketmqInstanceIpRuleOutput
	ToRocketmqInstanceIpRuleOutputWithContext(context.Context) RocketmqInstanceIpRuleOutput
}

type RocketmqInstanceIpRuleArgs struct {
	// Whether to allow release or not.
	Allow pulumi.BoolInput `pulumi:"allow"`
	// IP.
	Ip pulumi.StringInput `pulumi:"ip"`
	// Remark.
	Remark pulumi.StringInput `pulumi:"remark"`
}

func (RocketmqInstanceIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketmqInstanceIpRule)(nil)).Elem()
}

func (i RocketmqInstanceIpRuleArgs) ToRocketmqInstanceIpRuleOutput() RocketmqInstanceIpRuleOutput {
	return i.ToRocketmqInstanceIpRuleOutputWithContext(context.Background())
}

func (i RocketmqInstanceIpRuleArgs) ToRocketmqInstanceIpRuleOutputWithContext(ctx context.Context) RocketmqInstanceIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqInstanceIpRuleOutput)
}

// RocketmqInstanceIpRuleArrayInput is an input type that accepts RocketmqInstanceIpRuleArray and RocketmqInstanceIpRuleArrayOutput values.
// You can construct a concrete instance of `RocketmqInstanceIpRuleArrayInput` via:
//
//	RocketmqInstanceIpRuleArray{ RocketmqInstanceIpRuleArgs{...} }
type RocketmqInstanceIpRuleArrayInput interface {
	pulumi.Input

	ToRocketmqInstanceIpRuleArrayOutput() RocketmqInstanceIpRuleArrayOutput
	ToRocketmqInstanceIpRuleArrayOutputWithContext(context.Context) RocketmqInstanceIpRuleArrayOutput
}

type RocketmqInstanceIpRuleArray []RocketmqInstanceIpRuleInput

func (RocketmqInstanceIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketmqInstanceIpRule)(nil)).Elem()
}

func (i RocketmqInstanceIpRuleArray) ToRocketmqInstanceIpRuleArrayOutput() RocketmqInstanceIpRuleArrayOutput {
	return i.ToRocketmqInstanceIpRuleArrayOutputWithContext(context.Background())
}

func (i RocketmqInstanceIpRuleArray) ToRocketmqInstanceIpRuleArrayOutputWithContext(ctx context.Context) RocketmqInstanceIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqInstanceIpRuleArrayOutput)
}

type RocketmqInstanceIpRuleOutput struct{ *pulumi.OutputState }

func (RocketmqInstanceIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketmqInstanceIpRule)(nil)).Elem()
}

func (o RocketmqInstanceIpRuleOutput) ToRocketmqInstanceIpRuleOutput() RocketmqInstanceIpRuleOutput {
	return o
}

func (o RocketmqInstanceIpRuleOutput) ToRocketmqInstanceIpRuleOutputWithContext(ctx context.Context) RocketmqInstanceIpRuleOutput {
	return o
}

// Whether to allow release or not.
func (o RocketmqInstanceIpRuleOutput) Allow() pulumi.BoolOutput {
	return o.ApplyT(func(v RocketmqInstanceIpRule) bool { return v.Allow }).(pulumi.BoolOutput)
}

// IP.
func (o RocketmqInstanceIpRuleOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v RocketmqInstanceIpRule) string { return v.Ip }).(pulumi.StringOutput)
}

// Remark.
func (o RocketmqInstanceIpRuleOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v RocketmqInstanceIpRule) string { return v.Remark }).(pulumi.StringOutput)
}

type RocketmqInstanceIpRuleArrayOutput struct{ *pulumi.OutputState }

func (RocketmqInstanceIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketmqInstanceIpRule)(nil)).Elem()
}

func (o RocketmqInstanceIpRuleArrayOutput) ToRocketmqInstanceIpRuleArrayOutput() RocketmqInstanceIpRuleArrayOutput {
	return o
}

func (o RocketmqInstanceIpRuleArrayOutput) ToRocketmqInstanceIpRuleArrayOutputWithContext(ctx context.Context) RocketmqInstanceIpRuleArrayOutput {
	return o
}

func (o RocketmqInstanceIpRuleArrayOutput) Index(i pulumi.IntInput) RocketmqInstanceIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocketmqInstanceIpRule {
		return vs[0].([]RocketmqInstanceIpRule)[vs[1].(int)]
	}).(RocketmqInstanceIpRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqInstanceIpRuleInput)(nil)).Elem(), RocketmqInstanceIpRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqInstanceIpRuleArrayInput)(nil)).Elem(), RocketmqInstanceIpRuleArray{})
	pulumi.RegisterOutputType(RocketmqInstanceIpRuleOutput{})
	pulumi.RegisterOutputType(RocketmqInstanceIpRuleArrayOutput{})
}
