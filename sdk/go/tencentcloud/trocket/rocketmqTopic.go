// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trocket

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a trocket rocketmqTopic
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Trocket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			rocketmqInstance, err := Trocket.NewRocketmqInstance(ctx, "rocketmqInstance", &Trocket.RocketmqInstanceArgs{
//				InstanceType: pulumi.String("EXPERIMENT"),
//				SkuCode:      pulumi.String("experiment_500"),
//				Remark:       pulumi.String("test"),
//				VpcId:        pulumi.String("vpc-xxxxx"),
//				SubnetId:     pulumi.String("subnet-xxxxx"),
//				Tags: pulumi.AnyMap{
//					"tag_key":   pulumi.Any("rocketmq"),
//					"tag_value": pulumi.Any("5.x"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Trocket.NewRocketmqTopic(ctx, "rocketmqTopic", &Trocket.RocketmqTopicArgs{
//				InstanceId: rocketmqInstance.ID(),
//				Topic:      pulumi.String("test_topic"),
//				TopicType:  pulumi.String("NORMAL"),
//				QueueNum:   pulumi.Int(4),
//				Remark:     pulumi.String("test for terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// trocket rocketmq_topic can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Trocket/rocketmqTopic:RocketmqTopic rocketmq_topic instanceId#topic
//
// ```
type RocketmqTopic struct {
	pulumi.CustomResourceState

	// Instance Id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Number of queue. Must be greater than or equal to 3.
	QueueNum pulumi.IntOutput `pulumi:"queueNum"`
	// remark.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// topic.
	Topic pulumi.StringOutput `pulumi:"topic"`
	// Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
	TopicType pulumi.StringOutput `pulumi:"topicType"`
}

// NewRocketmqTopic registers a new resource with the given unique name, arguments, and options.
func NewRocketmqTopic(ctx *pulumi.Context,
	name string, args *RocketmqTopicArgs, opts ...pulumi.ResourceOption) (*RocketmqTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.QueueNum == nil {
		return nil, errors.New("invalid value for required argument 'QueueNum'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	if args.TopicType == nil {
		return nil, errors.New("invalid value for required argument 'TopicType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocketmqTopic
	err := ctx.RegisterResource("tencentcloud:Trocket/rocketmqTopic:RocketmqTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketmqTopic gets an existing RocketmqTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketmqTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketmqTopicState, opts ...pulumi.ResourceOption) (*RocketmqTopic, error) {
	var resource RocketmqTopic
	err := ctx.ReadResource("tencentcloud:Trocket/rocketmqTopic:RocketmqTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketmqTopic resources.
type rocketmqTopicState struct {
	// Instance Id.
	InstanceId *string `pulumi:"instanceId"`
	// Number of queue. Must be greater than or equal to 3.
	QueueNum *int `pulumi:"queueNum"`
	// remark.
	Remark *string `pulumi:"remark"`
	// topic.
	Topic *string `pulumi:"topic"`
	// Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
	TopicType *string `pulumi:"topicType"`
}

type RocketmqTopicState struct {
	// Instance Id.
	InstanceId pulumi.StringPtrInput
	// Number of queue. Must be greater than or equal to 3.
	QueueNum pulumi.IntPtrInput
	// remark.
	Remark pulumi.StringPtrInput
	// topic.
	Topic pulumi.StringPtrInput
	// Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
	TopicType pulumi.StringPtrInput
}

func (RocketmqTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketmqTopicState)(nil)).Elem()
}

type rocketmqTopicArgs struct {
	// Instance Id.
	InstanceId string `pulumi:"instanceId"`
	// Number of queue. Must be greater than or equal to 3.
	QueueNum int `pulumi:"queueNum"`
	// remark.
	Remark *string `pulumi:"remark"`
	// topic.
	Topic string `pulumi:"topic"`
	// Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
	TopicType string `pulumi:"topicType"`
}

// The set of arguments for constructing a RocketmqTopic resource.
type RocketmqTopicArgs struct {
	// Instance Id.
	InstanceId pulumi.StringInput
	// Number of queue. Must be greater than or equal to 3.
	QueueNum pulumi.IntInput
	// remark.
	Remark pulumi.StringPtrInput
	// topic.
	Topic pulumi.StringInput
	// Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
	TopicType pulumi.StringInput
}

func (RocketmqTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketmqTopicArgs)(nil)).Elem()
}

type RocketmqTopicInput interface {
	pulumi.Input

	ToRocketmqTopicOutput() RocketmqTopicOutput
	ToRocketmqTopicOutputWithContext(ctx context.Context) RocketmqTopicOutput
}

func (*RocketmqTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketmqTopic)(nil)).Elem()
}

func (i *RocketmqTopic) ToRocketmqTopicOutput() RocketmqTopicOutput {
	return i.ToRocketmqTopicOutputWithContext(context.Background())
}

func (i *RocketmqTopic) ToRocketmqTopicOutputWithContext(ctx context.Context) RocketmqTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqTopicOutput)
}

// RocketmqTopicArrayInput is an input type that accepts RocketmqTopicArray and RocketmqTopicArrayOutput values.
// You can construct a concrete instance of `RocketmqTopicArrayInput` via:
//
//	RocketmqTopicArray{ RocketmqTopicArgs{...} }
type RocketmqTopicArrayInput interface {
	pulumi.Input

	ToRocketmqTopicArrayOutput() RocketmqTopicArrayOutput
	ToRocketmqTopicArrayOutputWithContext(context.Context) RocketmqTopicArrayOutput
}

type RocketmqTopicArray []RocketmqTopicInput

func (RocketmqTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketmqTopic)(nil)).Elem()
}

func (i RocketmqTopicArray) ToRocketmqTopicArrayOutput() RocketmqTopicArrayOutput {
	return i.ToRocketmqTopicArrayOutputWithContext(context.Background())
}

func (i RocketmqTopicArray) ToRocketmqTopicArrayOutputWithContext(ctx context.Context) RocketmqTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqTopicArrayOutput)
}

// RocketmqTopicMapInput is an input type that accepts RocketmqTopicMap and RocketmqTopicMapOutput values.
// You can construct a concrete instance of `RocketmqTopicMapInput` via:
//
//	RocketmqTopicMap{ "key": RocketmqTopicArgs{...} }
type RocketmqTopicMapInput interface {
	pulumi.Input

	ToRocketmqTopicMapOutput() RocketmqTopicMapOutput
	ToRocketmqTopicMapOutputWithContext(context.Context) RocketmqTopicMapOutput
}

type RocketmqTopicMap map[string]RocketmqTopicInput

func (RocketmqTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketmqTopic)(nil)).Elem()
}

func (i RocketmqTopicMap) ToRocketmqTopicMapOutput() RocketmqTopicMapOutput {
	return i.ToRocketmqTopicMapOutputWithContext(context.Background())
}

func (i RocketmqTopicMap) ToRocketmqTopicMapOutputWithContext(ctx context.Context) RocketmqTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqTopicMapOutput)
}

type RocketmqTopicOutput struct{ *pulumi.OutputState }

func (RocketmqTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketmqTopic)(nil)).Elem()
}

func (o RocketmqTopicOutput) ToRocketmqTopicOutput() RocketmqTopicOutput {
	return o
}

func (o RocketmqTopicOutput) ToRocketmqTopicOutputWithContext(ctx context.Context) RocketmqTopicOutput {
	return o
}

// Instance Id.
func (o RocketmqTopicOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Number of queue. Must be greater than or equal to 3.
func (o RocketmqTopicOutput) QueueNum() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.IntOutput { return v.QueueNum }).(pulumi.IntOutput)
}

// remark.
func (o RocketmqTopicOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// topic.
func (o RocketmqTopicOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

// Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
func (o RocketmqTopicOutput) TopicType() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.StringOutput { return v.TopicType }).(pulumi.StringOutput)
}

type RocketmqTopicArrayOutput struct{ *pulumi.OutputState }

func (RocketmqTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketmqTopic)(nil)).Elem()
}

func (o RocketmqTopicArrayOutput) ToRocketmqTopicArrayOutput() RocketmqTopicArrayOutput {
	return o
}

func (o RocketmqTopicArrayOutput) ToRocketmqTopicArrayOutputWithContext(ctx context.Context) RocketmqTopicArrayOutput {
	return o
}

func (o RocketmqTopicArrayOutput) Index(i pulumi.IntInput) RocketmqTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketmqTopic {
		return vs[0].([]*RocketmqTopic)[vs[1].(int)]
	}).(RocketmqTopicOutput)
}

type RocketmqTopicMapOutput struct{ *pulumi.OutputState }

func (RocketmqTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketmqTopic)(nil)).Elem()
}

func (o RocketmqTopicMapOutput) ToRocketmqTopicMapOutput() RocketmqTopicMapOutput {
	return o
}

func (o RocketmqTopicMapOutput) ToRocketmqTopicMapOutputWithContext(ctx context.Context) RocketmqTopicMapOutput {
	return o
}

func (o RocketmqTopicMapOutput) MapIndex(k pulumi.StringInput) RocketmqTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketmqTopic {
		return vs[0].(map[string]*RocketmqTopic)[vs[1].(string)]
	}).(RocketmqTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqTopicInput)(nil)).Elem(), &RocketmqTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqTopicArrayInput)(nil)).Elem(), RocketmqTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqTopicMapInput)(nil)).Elem(), RocketmqTopicMap{})
	pulumi.RegisterOutputType(RocketmqTopicOutput{})
	pulumi.RegisterOutputType(RocketmqTopicArrayOutput{})
	pulumi.RegisterOutputType(RocketmqTopicMapOutput{})
}
