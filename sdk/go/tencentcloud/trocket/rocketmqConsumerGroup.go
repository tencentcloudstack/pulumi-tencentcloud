// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trocket

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a trocket rocketmqConsumerGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Trocket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			rocketmqInstance, err := Trocket.NewRocketmqInstance(ctx, "rocketmqInstance", &Trocket.RocketmqInstanceArgs{
//				InstanceType: pulumi.String("EXPERIMENT"),
//				SkuCode:      pulumi.String("experiment_500"),
//				Remark:       pulumi.String("test"),
//				VpcId:        pulumi.String("vpc-xxxxxx"),
//				SubnetId:     pulumi.String("subnet-xxxxx"),
//				Tags: pulumi.AnyMap{
//					"tag_key":   pulumi.Any("rocketmq"),
//					"tag_value": pulumi.Any("5.x"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Trocket.NewRocketmqConsumerGroup(ctx, "rocketmqConsumerGroup", &Trocket.RocketmqConsumerGroupArgs{
//				InstanceId:            rocketmqInstance.ID(),
//				ConsumerGroup:         pulumi.String("test_consumer_group"),
//				MaxRetryTimes:         pulumi.Int(20),
//				ConsumeEnable:         pulumi.Bool(false),
//				ConsumeMessageOrderly: pulumi.Bool(true),
//				Remark:                pulumi.String("test for terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// trocket rocketmq_consumer_group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Trocket/rocketmqConsumerGroup:RocketmqConsumerGroup rocketmq_consumer_group instanceId#consumerGroup
//
// ```
type RocketmqConsumerGroup struct {
	pulumi.CustomResourceState

	// Whether to enable consumption.
	ConsumeEnable pulumi.BoolOutput `pulumi:"consumeEnable"`
	// `true`: Sequential delivery, `false`: Concurrent delivery.
	ConsumeMessageOrderly pulumi.BoolOutput `pulumi:"consumeMessageOrderly"`
	// Name of consumer group.
	ConsumerGroup pulumi.StringOutput `pulumi:"consumerGroup"`
	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Max retry times.
	MaxRetryTimes pulumi.IntOutput `pulumi:"maxRetryTimes"`
	// remark.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
}

// NewRocketmqConsumerGroup registers a new resource with the given unique name, arguments, and options.
func NewRocketmqConsumerGroup(ctx *pulumi.Context,
	name string, args *RocketmqConsumerGroupArgs, opts ...pulumi.ResourceOption) (*RocketmqConsumerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumeEnable == nil {
		return nil, errors.New("invalid value for required argument 'ConsumeEnable'")
	}
	if args.ConsumeMessageOrderly == nil {
		return nil, errors.New("invalid value for required argument 'ConsumeMessageOrderly'")
	}
	if args.ConsumerGroup == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerGroup'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MaxRetryTimes == nil {
		return nil, errors.New("invalid value for required argument 'MaxRetryTimes'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocketmqConsumerGroup
	err := ctx.RegisterResource("tencentcloud:Trocket/rocketmqConsumerGroup:RocketmqConsumerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketmqConsumerGroup gets an existing RocketmqConsumerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketmqConsumerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketmqConsumerGroupState, opts ...pulumi.ResourceOption) (*RocketmqConsumerGroup, error) {
	var resource RocketmqConsumerGroup
	err := ctx.ReadResource("tencentcloud:Trocket/rocketmqConsumerGroup:RocketmqConsumerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketmqConsumerGroup resources.
type rocketmqConsumerGroupState struct {
	// Whether to enable consumption.
	ConsumeEnable *bool `pulumi:"consumeEnable"`
	// `true`: Sequential delivery, `false`: Concurrent delivery.
	ConsumeMessageOrderly *bool `pulumi:"consumeMessageOrderly"`
	// Name of consumer group.
	ConsumerGroup *string `pulumi:"consumerGroup"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Max retry times.
	MaxRetryTimes *int `pulumi:"maxRetryTimes"`
	// remark.
	Remark *string `pulumi:"remark"`
}

type RocketmqConsumerGroupState struct {
	// Whether to enable consumption.
	ConsumeEnable pulumi.BoolPtrInput
	// `true`: Sequential delivery, `false`: Concurrent delivery.
	ConsumeMessageOrderly pulumi.BoolPtrInput
	// Name of consumer group.
	ConsumerGroup pulumi.StringPtrInput
	// Instance ID.
	InstanceId pulumi.StringPtrInput
	// Max retry times.
	MaxRetryTimes pulumi.IntPtrInput
	// remark.
	Remark pulumi.StringPtrInput
}

func (RocketmqConsumerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketmqConsumerGroupState)(nil)).Elem()
}

type rocketmqConsumerGroupArgs struct {
	// Whether to enable consumption.
	ConsumeEnable bool `pulumi:"consumeEnable"`
	// `true`: Sequential delivery, `false`: Concurrent delivery.
	ConsumeMessageOrderly bool `pulumi:"consumeMessageOrderly"`
	// Name of consumer group.
	ConsumerGroup string `pulumi:"consumerGroup"`
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Max retry times.
	MaxRetryTimes int `pulumi:"maxRetryTimes"`
	// remark.
	Remark *string `pulumi:"remark"`
}

// The set of arguments for constructing a RocketmqConsumerGroup resource.
type RocketmqConsumerGroupArgs struct {
	// Whether to enable consumption.
	ConsumeEnable pulumi.BoolInput
	// `true`: Sequential delivery, `false`: Concurrent delivery.
	ConsumeMessageOrderly pulumi.BoolInput
	// Name of consumer group.
	ConsumerGroup pulumi.StringInput
	// Instance ID.
	InstanceId pulumi.StringInput
	// Max retry times.
	MaxRetryTimes pulumi.IntInput
	// remark.
	Remark pulumi.StringPtrInput
}

func (RocketmqConsumerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketmqConsumerGroupArgs)(nil)).Elem()
}

type RocketmqConsumerGroupInput interface {
	pulumi.Input

	ToRocketmqConsumerGroupOutput() RocketmqConsumerGroupOutput
	ToRocketmqConsumerGroupOutputWithContext(ctx context.Context) RocketmqConsumerGroupOutput
}

func (*RocketmqConsumerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketmqConsumerGroup)(nil)).Elem()
}

func (i *RocketmqConsumerGroup) ToRocketmqConsumerGroupOutput() RocketmqConsumerGroupOutput {
	return i.ToRocketmqConsumerGroupOutputWithContext(context.Background())
}

func (i *RocketmqConsumerGroup) ToRocketmqConsumerGroupOutputWithContext(ctx context.Context) RocketmqConsumerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqConsumerGroupOutput)
}

// RocketmqConsumerGroupArrayInput is an input type that accepts RocketmqConsumerGroupArray and RocketmqConsumerGroupArrayOutput values.
// You can construct a concrete instance of `RocketmqConsumerGroupArrayInput` via:
//
//	RocketmqConsumerGroupArray{ RocketmqConsumerGroupArgs{...} }
type RocketmqConsumerGroupArrayInput interface {
	pulumi.Input

	ToRocketmqConsumerGroupArrayOutput() RocketmqConsumerGroupArrayOutput
	ToRocketmqConsumerGroupArrayOutputWithContext(context.Context) RocketmqConsumerGroupArrayOutput
}

type RocketmqConsumerGroupArray []RocketmqConsumerGroupInput

func (RocketmqConsumerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketmqConsumerGroup)(nil)).Elem()
}

func (i RocketmqConsumerGroupArray) ToRocketmqConsumerGroupArrayOutput() RocketmqConsumerGroupArrayOutput {
	return i.ToRocketmqConsumerGroupArrayOutputWithContext(context.Background())
}

func (i RocketmqConsumerGroupArray) ToRocketmqConsumerGroupArrayOutputWithContext(ctx context.Context) RocketmqConsumerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqConsumerGroupArrayOutput)
}

// RocketmqConsumerGroupMapInput is an input type that accepts RocketmqConsumerGroupMap and RocketmqConsumerGroupMapOutput values.
// You can construct a concrete instance of `RocketmqConsumerGroupMapInput` via:
//
//	RocketmqConsumerGroupMap{ "key": RocketmqConsumerGroupArgs{...} }
type RocketmqConsumerGroupMapInput interface {
	pulumi.Input

	ToRocketmqConsumerGroupMapOutput() RocketmqConsumerGroupMapOutput
	ToRocketmqConsumerGroupMapOutputWithContext(context.Context) RocketmqConsumerGroupMapOutput
}

type RocketmqConsumerGroupMap map[string]RocketmqConsumerGroupInput

func (RocketmqConsumerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketmqConsumerGroup)(nil)).Elem()
}

func (i RocketmqConsumerGroupMap) ToRocketmqConsumerGroupMapOutput() RocketmqConsumerGroupMapOutput {
	return i.ToRocketmqConsumerGroupMapOutputWithContext(context.Background())
}

func (i RocketmqConsumerGroupMap) ToRocketmqConsumerGroupMapOutputWithContext(ctx context.Context) RocketmqConsumerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqConsumerGroupMapOutput)
}

type RocketmqConsumerGroupOutput struct{ *pulumi.OutputState }

func (RocketmqConsumerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketmqConsumerGroup)(nil)).Elem()
}

func (o RocketmqConsumerGroupOutput) ToRocketmqConsumerGroupOutput() RocketmqConsumerGroupOutput {
	return o
}

func (o RocketmqConsumerGroupOutput) ToRocketmqConsumerGroupOutputWithContext(ctx context.Context) RocketmqConsumerGroupOutput {
	return o
}

// Whether to enable consumption.
func (o RocketmqConsumerGroupOutput) ConsumeEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v *RocketmqConsumerGroup) pulumi.BoolOutput { return v.ConsumeEnable }).(pulumi.BoolOutput)
}

// `true`: Sequential delivery, `false`: Concurrent delivery.
func (o RocketmqConsumerGroupOutput) ConsumeMessageOrderly() pulumi.BoolOutput {
	return o.ApplyT(func(v *RocketmqConsumerGroup) pulumi.BoolOutput { return v.ConsumeMessageOrderly }).(pulumi.BoolOutput)
}

// Name of consumer group.
func (o RocketmqConsumerGroupOutput) ConsumerGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqConsumerGroup) pulumi.StringOutput { return v.ConsumerGroup }).(pulumi.StringOutput)
}

// Instance ID.
func (o RocketmqConsumerGroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqConsumerGroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Max retry times.
func (o RocketmqConsumerGroupOutput) MaxRetryTimes() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketmqConsumerGroup) pulumi.IntOutput { return v.MaxRetryTimes }).(pulumi.IntOutput)
}

// remark.
func (o RocketmqConsumerGroupOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketmqConsumerGroup) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

type RocketmqConsumerGroupArrayOutput struct{ *pulumi.OutputState }

func (RocketmqConsumerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketmqConsumerGroup)(nil)).Elem()
}

func (o RocketmqConsumerGroupArrayOutput) ToRocketmqConsumerGroupArrayOutput() RocketmqConsumerGroupArrayOutput {
	return o
}

func (o RocketmqConsumerGroupArrayOutput) ToRocketmqConsumerGroupArrayOutputWithContext(ctx context.Context) RocketmqConsumerGroupArrayOutput {
	return o
}

func (o RocketmqConsumerGroupArrayOutput) Index(i pulumi.IntInput) RocketmqConsumerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketmqConsumerGroup {
		return vs[0].([]*RocketmqConsumerGroup)[vs[1].(int)]
	}).(RocketmqConsumerGroupOutput)
}

type RocketmqConsumerGroupMapOutput struct{ *pulumi.OutputState }

func (RocketmqConsumerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketmqConsumerGroup)(nil)).Elem()
}

func (o RocketmqConsumerGroupMapOutput) ToRocketmqConsumerGroupMapOutput() RocketmqConsumerGroupMapOutput {
	return o
}

func (o RocketmqConsumerGroupMapOutput) ToRocketmqConsumerGroupMapOutputWithContext(ctx context.Context) RocketmqConsumerGroupMapOutput {
	return o
}

func (o RocketmqConsumerGroupMapOutput) MapIndex(k pulumi.StringInput) RocketmqConsumerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketmqConsumerGroup {
		return vs[0].(map[string]*RocketmqConsumerGroup)[vs[1].(string)]
	}).(RocketmqConsumerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqConsumerGroupInput)(nil)).Elem(), &RocketmqConsumerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqConsumerGroupArrayInput)(nil)).Elem(), RocketmqConsumerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqConsumerGroupMapInput)(nil)).Elem(), RocketmqConsumerGroupMap{})
	pulumi.RegisterOutputType(RocketmqConsumerGroupOutput{})
	pulumi.RegisterOutputType(RocketmqConsumerGroupArrayOutput{})
	pulumi.RegisterOutputType(RocketmqConsumerGroupMapOutput{})
}
