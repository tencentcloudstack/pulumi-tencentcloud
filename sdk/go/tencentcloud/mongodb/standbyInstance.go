// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to create a Mongodb standby instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mongodb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/providers"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := providers.Newtencentcloud(ctx, "shanghai", &providers.tencentcloudArgs{
//				Region: "ap-shanghai",
//			})
//			if err != nil {
//				return err
//			}
//			mongodbInstance, err := Mongodb.NewInstance(ctx, "mongodbInstance", &Mongodb.InstanceArgs{
//				InstanceName:  pulumi.String("tf-mongodb-test"),
//				Memory:        pulumi.Int(4),
//				Volume:        pulumi.Int(100),
//				EngineVersion: pulumi.String("MONGO_40_WT"),
//				MachineType:   pulumi.String("HIO10G"),
//				AvailableZone: pulumi.Any(_var.Availability_zone),
//				ProjectId:     pulumi.Int(0),
//				Password:      pulumi.String("test1234"),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Mongodb.NewStandbyInstance(ctx, "mongodbStandbyInstance", &Mongodb.StandbyInstanceArgs{
//				InstanceName:         pulumi.String("tf-mongodb-standby-test"),
//				Memory:               pulumi.Int(4),
//				Volume:               pulumi.Int(100),
//				AvailableZone:        pulumi.String("ap-shanghai-2"),
//				ProjectId:            pulumi.Int(0),
//				FatherInstanceId:     mongodbInstance.ID(),
//				FatherInstanceRegion: pulumi.String("ap-guangzhou"),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//			}, pulumi.Provider(tencentcloud.Shanghai))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Mongodb instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mongodb/standbyInstance:StandbyInstance mongodb cmgo-41s6jwy4
//
// ```
type StandbyInstance struct {
	pulumi.CustomResourceState

	// Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
	AutoRenewFlag pulumi.IntPtrOutput `pulumi:"autoRenewFlag"`
	// The available zone of the Mongodb standby instance. NOTE: must not be same with father instance's.
	AvailableZone pulumi.StringOutput `pulumi:"availableZone"`
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
	ChargeType pulumi.StringPtrOutput `pulumi:"chargeType"`
	// Creation time of the Mongodb instance.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Version of the standby Mongodb instance and must be same as the version of main instance.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// Indicates the main instance ID of standby instances.
	FatherInstanceId pulumi.StringOutput `pulumi:"fatherInstanceId"`
	// Indicates the region of main instance.
	FatherInstanceRegion pulumi.StringOutput `pulumi:"fatherInstanceRegion"`
	// Name of the Mongodb instance.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Type of standby Mongodb instance and must be same as the type of main instance.
	MachineType pulumi.StringOutput `pulumi:"machineType"`
	// Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	Memory pulumi.IntOutput `pulumi:"memory"`
	// The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidPeriod pulumi.IntPtrOutput `pulumi:"prepaidPeriod"`
	// ID of the project which the instance belongs.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// ID of the security group.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// Status of the Mongodb instance, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
	Status pulumi.IntOutput `pulumi:"status"`
	// ID of the subnet within this VPC. The value is required if `vpcId` is set.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// The tags of the Mongodb. Key name `project` is system reserved and can't be used.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// IP of the Mongodb instance.
	Vip pulumi.StringOutput `pulumi:"vip"`
	// Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	Volume pulumi.IntOutput `pulumi:"volume"`
	// ID of the VPC.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// IP port of the Mongodb instance.
	Vport pulumi.IntOutput `pulumi:"vport"`
}

// NewStandbyInstance registers a new resource with the given unique name, arguments, and options.
func NewStandbyInstance(ctx *pulumi.Context,
	name string, args *StandbyInstanceArgs, opts ...pulumi.ResourceOption) (*StandbyInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailableZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailableZone'")
	}
	if args.FatherInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'FatherInstanceId'")
	}
	if args.FatherInstanceRegion == nil {
		return nil, errors.New("invalid value for required argument 'FatherInstanceRegion'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.Memory == nil {
		return nil, errors.New("invalid value for required argument 'Memory'")
	}
	if args.Volume == nil {
		return nil, errors.New("invalid value for required argument 'Volume'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StandbyInstance
	err := ctx.RegisterResource("tencentcloud:Mongodb/standbyInstance:StandbyInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStandbyInstance gets an existing StandbyInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStandbyInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StandbyInstanceState, opts ...pulumi.ResourceOption) (*StandbyInstance, error) {
	var resource StandbyInstance
	err := ctx.ReadResource("tencentcloud:Mongodb/standbyInstance:StandbyInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StandbyInstance resources.
type standbyInstanceState struct {
	// Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// The available zone of the Mongodb standby instance. NOTE: must not be same with father instance's.
	AvailableZone *string `pulumi:"availableZone"`
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
	ChargeType *string `pulumi:"chargeType"`
	// Creation time of the Mongodb instance.
	CreateTime *string `pulumi:"createTime"`
	// Version of the standby Mongodb instance and must be same as the version of main instance.
	EngineVersion *string `pulumi:"engineVersion"`
	// Indicates the main instance ID of standby instances.
	FatherInstanceId *string `pulumi:"fatherInstanceId"`
	// Indicates the region of main instance.
	FatherInstanceRegion *string `pulumi:"fatherInstanceRegion"`
	// Name of the Mongodb instance.
	InstanceName *string `pulumi:"instanceName"`
	// Type of standby Mongodb instance and must be same as the type of main instance.
	MachineType *string `pulumi:"machineType"`
	// Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	Memory *int `pulumi:"memory"`
	// The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidPeriod *int `pulumi:"prepaidPeriod"`
	// ID of the project which the instance belongs.
	ProjectId *int `pulumi:"projectId"`
	// ID of the security group.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Status of the Mongodb instance, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
	Status *int `pulumi:"status"`
	// ID of the subnet within this VPC. The value is required if `vpcId` is set.
	SubnetId *string `pulumi:"subnetId"`
	// The tags of the Mongodb. Key name `project` is system reserved and can't be used.
	Tags map[string]interface{} `pulumi:"tags"`
	// IP of the Mongodb instance.
	Vip *string `pulumi:"vip"`
	// Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	Volume *int `pulumi:"volume"`
	// ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
	// IP port of the Mongodb instance.
	Vport *int `pulumi:"vport"`
}

type StandbyInstanceState struct {
	// Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
	AutoRenewFlag pulumi.IntPtrInput
	// The available zone of the Mongodb standby instance. NOTE: must not be same with father instance's.
	AvailableZone pulumi.StringPtrInput
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
	ChargeType pulumi.StringPtrInput
	// Creation time of the Mongodb instance.
	CreateTime pulumi.StringPtrInput
	// Version of the standby Mongodb instance and must be same as the version of main instance.
	EngineVersion pulumi.StringPtrInput
	// Indicates the main instance ID of standby instances.
	FatherInstanceId pulumi.StringPtrInput
	// Indicates the region of main instance.
	FatherInstanceRegion pulumi.StringPtrInput
	// Name of the Mongodb instance.
	InstanceName pulumi.StringPtrInput
	// Type of standby Mongodb instance and must be same as the type of main instance.
	MachineType pulumi.StringPtrInput
	// Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	Memory pulumi.IntPtrInput
	// The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidPeriod pulumi.IntPtrInput
	// ID of the project which the instance belongs.
	ProjectId pulumi.IntPtrInput
	// ID of the security group.
	SecurityGroups pulumi.StringArrayInput
	// Status of the Mongodb instance, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
	Status pulumi.IntPtrInput
	// ID of the subnet within this VPC. The value is required if `vpcId` is set.
	SubnetId pulumi.StringPtrInput
	// The tags of the Mongodb. Key name `project` is system reserved and can't be used.
	Tags pulumi.MapInput
	// IP of the Mongodb instance.
	Vip pulumi.StringPtrInput
	// Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	Volume pulumi.IntPtrInput
	// ID of the VPC.
	VpcId pulumi.StringPtrInput
	// IP port of the Mongodb instance.
	Vport pulumi.IntPtrInput
}

func (StandbyInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*standbyInstanceState)(nil)).Elem()
}

type standbyInstanceArgs struct {
	// Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// The available zone of the Mongodb standby instance. NOTE: must not be same with father instance's.
	AvailableZone string `pulumi:"availableZone"`
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
	ChargeType *string `pulumi:"chargeType"`
	// Indicates the main instance ID of standby instances.
	FatherInstanceId string `pulumi:"fatherInstanceId"`
	// Indicates the region of main instance.
	FatherInstanceRegion string `pulumi:"fatherInstanceRegion"`
	// Name of the Mongodb instance.
	InstanceName string `pulumi:"instanceName"`
	// Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	Memory int `pulumi:"memory"`
	// The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidPeriod *int `pulumi:"prepaidPeriod"`
	// ID of the project which the instance belongs.
	ProjectId *int `pulumi:"projectId"`
	// ID of the security group.
	SecurityGroups []string `pulumi:"securityGroups"`
	// ID of the subnet within this VPC. The value is required if `vpcId` is set.
	SubnetId *string `pulumi:"subnetId"`
	// The tags of the Mongodb. Key name `project` is system reserved and can't be used.
	Tags map[string]interface{} `pulumi:"tags"`
	// Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	Volume int `pulumi:"volume"`
	// ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a StandbyInstance resource.
type StandbyInstanceArgs struct {
	// Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
	AutoRenewFlag pulumi.IntPtrInput
	// The available zone of the Mongodb standby instance. NOTE: must not be same with father instance's.
	AvailableZone pulumi.StringInput
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
	ChargeType pulumi.StringPtrInput
	// Indicates the main instance ID of standby instances.
	FatherInstanceId pulumi.StringInput
	// Indicates the region of main instance.
	FatherInstanceRegion pulumi.StringInput
	// Name of the Mongodb instance.
	InstanceName pulumi.StringInput
	// Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	Memory pulumi.IntInput
	// The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidPeriod pulumi.IntPtrInput
	// ID of the project which the instance belongs.
	ProjectId pulumi.IntPtrInput
	// ID of the security group.
	SecurityGroups pulumi.StringArrayInput
	// ID of the subnet within this VPC. The value is required if `vpcId` is set.
	SubnetId pulumi.StringPtrInput
	// The tags of the Mongodb. Key name `project` is system reserved and can't be used.
	Tags pulumi.MapInput
	// Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
	Volume pulumi.IntInput
	// ID of the VPC.
	VpcId pulumi.StringPtrInput
}

func (StandbyInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*standbyInstanceArgs)(nil)).Elem()
}

type StandbyInstanceInput interface {
	pulumi.Input

	ToStandbyInstanceOutput() StandbyInstanceOutput
	ToStandbyInstanceOutputWithContext(ctx context.Context) StandbyInstanceOutput
}

func (*StandbyInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**StandbyInstance)(nil)).Elem()
}

func (i *StandbyInstance) ToStandbyInstanceOutput() StandbyInstanceOutput {
	return i.ToStandbyInstanceOutputWithContext(context.Background())
}

func (i *StandbyInstance) ToStandbyInstanceOutputWithContext(ctx context.Context) StandbyInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandbyInstanceOutput)
}

// StandbyInstanceArrayInput is an input type that accepts StandbyInstanceArray and StandbyInstanceArrayOutput values.
// You can construct a concrete instance of `StandbyInstanceArrayInput` via:
//
//	StandbyInstanceArray{ StandbyInstanceArgs{...} }
type StandbyInstanceArrayInput interface {
	pulumi.Input

	ToStandbyInstanceArrayOutput() StandbyInstanceArrayOutput
	ToStandbyInstanceArrayOutputWithContext(context.Context) StandbyInstanceArrayOutput
}

type StandbyInstanceArray []StandbyInstanceInput

func (StandbyInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandbyInstance)(nil)).Elem()
}

func (i StandbyInstanceArray) ToStandbyInstanceArrayOutput() StandbyInstanceArrayOutput {
	return i.ToStandbyInstanceArrayOutputWithContext(context.Background())
}

func (i StandbyInstanceArray) ToStandbyInstanceArrayOutputWithContext(ctx context.Context) StandbyInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandbyInstanceArrayOutput)
}

// StandbyInstanceMapInput is an input type that accepts StandbyInstanceMap and StandbyInstanceMapOutput values.
// You can construct a concrete instance of `StandbyInstanceMapInput` via:
//
//	StandbyInstanceMap{ "key": StandbyInstanceArgs{...} }
type StandbyInstanceMapInput interface {
	pulumi.Input

	ToStandbyInstanceMapOutput() StandbyInstanceMapOutput
	ToStandbyInstanceMapOutputWithContext(context.Context) StandbyInstanceMapOutput
}

type StandbyInstanceMap map[string]StandbyInstanceInput

func (StandbyInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandbyInstance)(nil)).Elem()
}

func (i StandbyInstanceMap) ToStandbyInstanceMapOutput() StandbyInstanceMapOutput {
	return i.ToStandbyInstanceMapOutputWithContext(context.Background())
}

func (i StandbyInstanceMap) ToStandbyInstanceMapOutputWithContext(ctx context.Context) StandbyInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandbyInstanceMapOutput)
}

type StandbyInstanceOutput struct{ *pulumi.OutputState }

func (StandbyInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandbyInstance)(nil)).Elem()
}

func (o StandbyInstanceOutput) ToStandbyInstanceOutput() StandbyInstanceOutput {
	return o
}

func (o StandbyInstanceOutput) ToStandbyInstanceOutputWithContext(ctx context.Context) StandbyInstanceOutput {
	return o
}

// Auto renew flag. Valid values are `0`(NOTIFY_AND_MANUAL_RENEW), `1`(NOTIFY_AND_AUTO_RENEW) and `2`(DISABLE_NOTIFY_AND_MANUAL_RENEW). Default value is `0`. Note: only works for PREPAID instance. Only supports`0` and `1` for creation.
func (o StandbyInstanceOutput) AutoRenewFlag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.IntPtrOutput { return v.AutoRenewFlag }).(pulumi.IntPtrOutput)
}

// The available zone of the Mongodb standby instance. NOTE: must not be same with father instance's.
func (o StandbyInstanceOutput) AvailableZone() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringOutput { return v.AvailableZone }).(pulumi.StringOutput)
}

// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`. Note: TencentCloud International only supports `POSTPAID_BY_HOUR`. Caution that update operation on this field will delete old instances and create new one with new charge type.
func (o StandbyInstanceOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringPtrOutput { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// Creation time of the Mongodb instance.
func (o StandbyInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Version of the standby Mongodb instance and must be same as the version of main instance.
func (o StandbyInstanceOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// Indicates the main instance ID of standby instances.
func (o StandbyInstanceOutput) FatherInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringOutput { return v.FatherInstanceId }).(pulumi.StringOutput)
}

// Indicates the region of main instance.
func (o StandbyInstanceOutput) FatherInstanceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringOutput { return v.FatherInstanceRegion }).(pulumi.StringOutput)
}

// Name of the Mongodb instance.
func (o StandbyInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Type of standby Mongodb instance and must be same as the type of main instance.
func (o StandbyInstanceOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

// Memory size. The minimum value is 2, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
func (o StandbyInstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

// The tenancy (time unit is month) of the prepaid instance. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36. NOTE: it only works when chargeType is set to `PREPAID`.
func (o StandbyInstanceOutput) PrepaidPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.IntPtrOutput { return v.PrepaidPeriod }).(pulumi.IntPtrOutput)
}

// ID of the project which the instance belongs.
func (o StandbyInstanceOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// ID of the security group.
func (o StandbyInstanceOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Status of the Mongodb instance, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
func (o StandbyInstanceOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// ID of the subnet within this VPC. The value is required if `vpcId` is set.
func (o StandbyInstanceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The tags of the Mongodb. Key name `project` is system reserved and can't be used.
func (o StandbyInstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// IP of the Mongodb instance.
func (o StandbyInstanceOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringOutput { return v.Vip }).(pulumi.StringOutput)
}

// Disk size. The minimum value is 25, and unit is GB. Memory and volume must be upgraded or degraded simultaneously.
func (o StandbyInstanceOutput) Volume() pulumi.IntOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.IntOutput { return v.Volume }).(pulumi.IntOutput)
}

// ID of the VPC.
func (o StandbyInstanceOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// IP port of the Mongodb instance.
func (o StandbyInstanceOutput) Vport() pulumi.IntOutput {
	return o.ApplyT(func(v *StandbyInstance) pulumi.IntOutput { return v.Vport }).(pulumi.IntOutput)
}

type StandbyInstanceArrayOutput struct{ *pulumi.OutputState }

func (StandbyInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandbyInstance)(nil)).Elem()
}

func (o StandbyInstanceArrayOutput) ToStandbyInstanceArrayOutput() StandbyInstanceArrayOutput {
	return o
}

func (o StandbyInstanceArrayOutput) ToStandbyInstanceArrayOutputWithContext(ctx context.Context) StandbyInstanceArrayOutput {
	return o
}

func (o StandbyInstanceArrayOutput) Index(i pulumi.IntInput) StandbyInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StandbyInstance {
		return vs[0].([]*StandbyInstance)[vs[1].(int)]
	}).(StandbyInstanceOutput)
}

type StandbyInstanceMapOutput struct{ *pulumi.OutputState }

func (StandbyInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandbyInstance)(nil)).Elem()
}

func (o StandbyInstanceMapOutput) ToStandbyInstanceMapOutput() StandbyInstanceMapOutput {
	return o
}

func (o StandbyInstanceMapOutput) ToStandbyInstanceMapOutputWithContext(ctx context.Context) StandbyInstanceMapOutput {
	return o
}

func (o StandbyInstanceMapOutput) MapIndex(k pulumi.StringInput) StandbyInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StandbyInstance {
		return vs[0].(map[string]*StandbyInstance)[vs[1].(string)]
	}).(StandbyInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StandbyInstanceInput)(nil)).Elem(), &StandbyInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandbyInstanceArrayInput)(nil)).Elem(), StandbyInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandbyInstanceMapInput)(nil)).Elem(), StandbyInstanceMap{})
	pulumi.RegisterOutputType(StandbyInstanceOutput{})
	pulumi.RegisterOutputType(StandbyInstanceArrayOutput{})
	pulumi.RegisterOutputType(StandbyInstanceMapOutput{})
}
