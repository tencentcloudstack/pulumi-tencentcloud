// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mongodb instanceAccount
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mongodb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mongodb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mongodb.NewInstanceAccount(ctx, "instanceAccount", &Mongodb.InstanceAccountArgs{
//				AuthRoles: mongodb.InstanceAccountAuthRoleArray{
//					&mongodb.InstanceAccountAuthRoleArgs{
//						Mask:      pulumi.Int(0),
//						Namespace: pulumi.String("*"),
//					},
//				},
//				InstanceId:        pulumi.String("cmgo-lxaz2c9b"),
//				MongoUserPassword: pulumi.String("xxxxxxxxx"),
//				Password:          pulumi.String("xxxxxxxx"),
//				UserDesc:          pulumi.String("test account"),
//				UserName:          pulumi.String("test_account"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InstanceAccount struct {
	pulumi.CustomResourceState

	// The read and write permission information of the account.
	AuthRoles InstanceAccountAuthRoleArrayOutput `pulumi:"authRoles"`
	// Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The password corresponding to the mongouser account. mongouser is the system default account, which is the password set when creating an instance.
	MongoUserPassword pulumi.StringOutput `pulumi:"mongoUserPassword"`
	// New account password. Password complexity requirements are as follows: character length range [8,32]. Contains at least letters, numbers and special characters (exclamation point!, at@, pound sign #, percent sign %, caret ^, asterisk *, parentheses (), underscore _).
	Password pulumi.StringOutput `pulumi:"password"`
	// Account remarks.
	UserDesc pulumi.StringPtrOutput `pulumi:"userDesc"`
	// The new account name. Its format requirements are as follows: character range [1,32]. Characters in the range of [A,Z], [a,z], [1,9] as well as underscore _ and dash - can be input.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewInstanceAccount registers a new resource with the given unique name, arguments, and options.
func NewInstanceAccount(ctx *pulumi.Context,
	name string, args *InstanceAccountArgs, opts ...pulumi.ResourceOption) (*InstanceAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MongoUserPassword == nil {
		return nil, errors.New("invalid value for required argument 'MongoUserPassword'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InstanceAccount
	err := ctx.RegisterResource("tencentcloud:Mongodb/instanceAccount:InstanceAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceAccount gets an existing InstanceAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceAccountState, opts ...pulumi.ResourceOption) (*InstanceAccount, error) {
	var resource InstanceAccount
	err := ctx.ReadResource("tencentcloud:Mongodb/instanceAccount:InstanceAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceAccount resources.
type instanceAccountState struct {
	// The read and write permission information of the account.
	AuthRoles []InstanceAccountAuthRole `pulumi:"authRoles"`
	// Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
	InstanceId *string `pulumi:"instanceId"`
	// The password corresponding to the mongouser account. mongouser is the system default account, which is the password set when creating an instance.
	MongoUserPassword *string `pulumi:"mongoUserPassword"`
	// New account password. Password complexity requirements are as follows: character length range [8,32]. Contains at least letters, numbers and special characters (exclamation point!, at@, pound sign #, percent sign %, caret ^, asterisk *, parentheses (), underscore _).
	Password *string `pulumi:"password"`
	// Account remarks.
	UserDesc *string `pulumi:"userDesc"`
	// The new account name. Its format requirements are as follows: character range [1,32]. Characters in the range of [A,Z], [a,z], [1,9] as well as underscore _ and dash - can be input.
	UserName *string `pulumi:"userName"`
}

type InstanceAccountState struct {
	// The read and write permission information of the account.
	AuthRoles InstanceAccountAuthRoleArrayInput
	// Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
	InstanceId pulumi.StringPtrInput
	// The password corresponding to the mongouser account. mongouser is the system default account, which is the password set when creating an instance.
	MongoUserPassword pulumi.StringPtrInput
	// New account password. Password complexity requirements are as follows: character length range [8,32]. Contains at least letters, numbers and special characters (exclamation point!, at@, pound sign #, percent sign %, caret ^, asterisk *, parentheses (), underscore _).
	Password pulumi.StringPtrInput
	// Account remarks.
	UserDesc pulumi.StringPtrInput
	// The new account name. Its format requirements are as follows: character range [1,32]. Characters in the range of [A,Z], [a,z], [1,9] as well as underscore _ and dash - can be input.
	UserName pulumi.StringPtrInput
}

func (InstanceAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceAccountState)(nil)).Elem()
}

type instanceAccountArgs struct {
	// The read and write permission information of the account.
	AuthRoles []InstanceAccountAuthRole `pulumi:"authRoles"`
	// Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
	InstanceId string `pulumi:"instanceId"`
	// The password corresponding to the mongouser account. mongouser is the system default account, which is the password set when creating an instance.
	MongoUserPassword string `pulumi:"mongoUserPassword"`
	// New account password. Password complexity requirements are as follows: character length range [8,32]. Contains at least letters, numbers and special characters (exclamation point!, at@, pound sign #, percent sign %, caret ^, asterisk *, parentheses (), underscore _).
	Password string `pulumi:"password"`
	// Account remarks.
	UserDesc *string `pulumi:"userDesc"`
	// The new account name. Its format requirements are as follows: character range [1,32]. Characters in the range of [A,Z], [a,z], [1,9] as well as underscore _ and dash - can be input.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a InstanceAccount resource.
type InstanceAccountArgs struct {
	// The read and write permission information of the account.
	AuthRoles InstanceAccountAuthRoleArrayInput
	// Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
	InstanceId pulumi.StringInput
	// The password corresponding to the mongouser account. mongouser is the system default account, which is the password set when creating an instance.
	MongoUserPassword pulumi.StringInput
	// New account password. Password complexity requirements are as follows: character length range [8,32]. Contains at least letters, numbers and special characters (exclamation point!, at@, pound sign #, percent sign %, caret ^, asterisk *, parentheses (), underscore _).
	Password pulumi.StringInput
	// Account remarks.
	UserDesc pulumi.StringPtrInput
	// The new account name. Its format requirements are as follows: character range [1,32]. Characters in the range of [A,Z], [a,z], [1,9] as well as underscore _ and dash - can be input.
	UserName pulumi.StringInput
}

func (InstanceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceAccountArgs)(nil)).Elem()
}

type InstanceAccountInput interface {
	pulumi.Input

	ToInstanceAccountOutput() InstanceAccountOutput
	ToInstanceAccountOutputWithContext(ctx context.Context) InstanceAccountOutput
}

func (*InstanceAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAccount)(nil)).Elem()
}

func (i *InstanceAccount) ToInstanceAccountOutput() InstanceAccountOutput {
	return i.ToInstanceAccountOutputWithContext(context.Background())
}

func (i *InstanceAccount) ToInstanceAccountOutputWithContext(ctx context.Context) InstanceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAccountOutput)
}

// InstanceAccountArrayInput is an input type that accepts InstanceAccountArray and InstanceAccountArrayOutput values.
// You can construct a concrete instance of `InstanceAccountArrayInput` via:
//
//	InstanceAccountArray{ InstanceAccountArgs{...} }
type InstanceAccountArrayInput interface {
	pulumi.Input

	ToInstanceAccountArrayOutput() InstanceAccountArrayOutput
	ToInstanceAccountArrayOutputWithContext(context.Context) InstanceAccountArrayOutput
}

type InstanceAccountArray []InstanceAccountInput

func (InstanceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceAccount)(nil)).Elem()
}

func (i InstanceAccountArray) ToInstanceAccountArrayOutput() InstanceAccountArrayOutput {
	return i.ToInstanceAccountArrayOutputWithContext(context.Background())
}

func (i InstanceAccountArray) ToInstanceAccountArrayOutputWithContext(ctx context.Context) InstanceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAccountArrayOutput)
}

// InstanceAccountMapInput is an input type that accepts InstanceAccountMap and InstanceAccountMapOutput values.
// You can construct a concrete instance of `InstanceAccountMapInput` via:
//
//	InstanceAccountMap{ "key": InstanceAccountArgs{...} }
type InstanceAccountMapInput interface {
	pulumi.Input

	ToInstanceAccountMapOutput() InstanceAccountMapOutput
	ToInstanceAccountMapOutputWithContext(context.Context) InstanceAccountMapOutput
}

type InstanceAccountMap map[string]InstanceAccountInput

func (InstanceAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceAccount)(nil)).Elem()
}

func (i InstanceAccountMap) ToInstanceAccountMapOutput() InstanceAccountMapOutput {
	return i.ToInstanceAccountMapOutputWithContext(context.Background())
}

func (i InstanceAccountMap) ToInstanceAccountMapOutputWithContext(ctx context.Context) InstanceAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAccountMapOutput)
}

type InstanceAccountOutput struct{ *pulumi.OutputState }

func (InstanceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAccount)(nil)).Elem()
}

func (o InstanceAccountOutput) ToInstanceAccountOutput() InstanceAccountOutput {
	return o
}

func (o InstanceAccountOutput) ToInstanceAccountOutputWithContext(ctx context.Context) InstanceAccountOutput {
	return o
}

// The read and write permission information of the account.
func (o InstanceAccountOutput) AuthRoles() InstanceAccountAuthRoleArrayOutput {
	return o.ApplyT(func(v *InstanceAccount) InstanceAccountAuthRoleArrayOutput { return v.AuthRoles }).(InstanceAccountAuthRoleArrayOutput)
}

// Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
func (o InstanceAccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAccount) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The password corresponding to the mongouser account. mongouser is the system default account, which is the password set when creating an instance.
func (o InstanceAccountOutput) MongoUserPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAccount) pulumi.StringOutput { return v.MongoUserPassword }).(pulumi.StringOutput)
}

// New account password. Password complexity requirements are as follows: character length range [8,32]. Contains at least letters, numbers and special characters (exclamation point!, at@, pound sign #, percent sign %, caret ^, asterisk *, parentheses (), underscore _).
func (o InstanceAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAccount) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Account remarks.
func (o InstanceAccountOutput) UserDesc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceAccount) pulumi.StringPtrOutput { return v.UserDesc }).(pulumi.StringPtrOutput)
}

// The new account name. Its format requirements are as follows: character range [1,32]. Characters in the range of [A,Z], [a,z], [1,9] as well as underscore _ and dash - can be input.
func (o InstanceAccountOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceAccount) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type InstanceAccountArrayOutput struct{ *pulumi.OutputState }

func (InstanceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceAccount)(nil)).Elem()
}

func (o InstanceAccountArrayOutput) ToInstanceAccountArrayOutput() InstanceAccountArrayOutput {
	return o
}

func (o InstanceAccountArrayOutput) ToInstanceAccountArrayOutputWithContext(ctx context.Context) InstanceAccountArrayOutput {
	return o
}

func (o InstanceAccountArrayOutput) Index(i pulumi.IntInput) InstanceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceAccount {
		return vs[0].([]*InstanceAccount)[vs[1].(int)]
	}).(InstanceAccountOutput)
}

type InstanceAccountMapOutput struct{ *pulumi.OutputState }

func (InstanceAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceAccount)(nil)).Elem()
}

func (o InstanceAccountMapOutput) ToInstanceAccountMapOutput() InstanceAccountMapOutput {
	return o
}

func (o InstanceAccountMapOutput) ToInstanceAccountMapOutputWithContext(ctx context.Context) InstanceAccountMapOutput {
	return o
}

func (o InstanceAccountMapOutput) MapIndex(k pulumi.StringInput) InstanceAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceAccount {
		return vs[0].(map[string]*InstanceAccount)[vs[1].(string)]
	}).(InstanceAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAccountInput)(nil)).Elem(), &InstanceAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAccountArrayInput)(nil)).Elem(), InstanceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceAccountMapInput)(nil)).Elem(), InstanceAccountMap{})
	pulumi.RegisterOutputType(InstanceAccountOutput{})
	pulumi.RegisterOutputType(InstanceAccountArrayOutput{})
	pulumi.RegisterOutputType(InstanceAccountMapOutput{})
}
