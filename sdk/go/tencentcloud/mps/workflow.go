// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mps workflow
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mps.NewWorkflow(ctx, "workflow", &Mps.WorkflowArgs{
//				AiAnalysisTask: &mps.WorkflowAiAnalysisTaskArgs{
//					Definition: pulumi.Int(20),
//				},
//				AiContentReviewTask: &mps.WorkflowAiContentReviewTaskArgs{
//					Definition: pulumi.Int(20),
//				},
//				AiRecognitionTask: &mps.WorkflowAiRecognitionTaskArgs{
//					Definition: pulumi.Int(20),
//				},
//				MediaProcessTask: &mps.WorkflowMediaProcessTaskArgs{
//					AdaptiveDynamicStreamingTaskSets: mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArray{
//						&mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs{
//							Definition:       pulumi.Int(12),
//							OutputObjectPath: pulumi.String("/out"),
//							OutputStorage: &mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs{
//								CosOutputStorage: &mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs{
//									Bucket: pulumi.String("cos-lock-1308919341"),
//									Region: pulumi.String("ap-guangzhou"),
//								},
//								Type: pulumi.String("COS"),
//							},
//							SegmentObjectName:   pulumi.String("/out"),
//							SubStreamObjectName: pulumi.String("/out/out/"),
//						},
//					},
//					AnimatedGraphicTaskSets: mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetArray{
//						&mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs{
//							Definition:       pulumi.Int(20000),
//							EndTimeOffset:    pulumi.Float64(0),
//							OutputObjectPath: pulumi.String("/test/"),
//							OutputStorage: &mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs{
//								CosOutputStorage: &mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs{
//									Bucket: pulumi.String("cos-lock-1308919341"),
//									Region: pulumi.String("ap-guangzhou"),
//								},
//								Type: pulumi.String("COS"),
//							},
//							StartTimeOffset: pulumi.Float64(0),
//						},
//					},
//					SnapshotByTimeOffsetTaskSets: mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArray{
//						&mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs{
//							Definition: pulumi.Int(10),
//							ExtTimeOffsetSet: []string{
//								"1s",
//							},
//							OutputObjectPath: pulumi.String("/snapshot/"),
//							OutputStorage: &mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs{
//								CosOutputStorage: &mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs{
//									Bucket: pulumi.String("cos-lock-1308919341"),
//									Region: pulumi.String("ap-guangzhou"),
//								},
//								Type: pulumi.String("COS"),
//							},
//							TimeOffsetSet: []interface{}{},
//						},
//					},
//				},
//				OutputDir: pulumi.String("/"),
//				OutputStorage: &mps.WorkflowOutputStorageArgs{
//					CosOutputStorage: &mps.WorkflowOutputStorageCosOutputStorageArgs{
//						Bucket: pulumi.String("cos-lock-1308919341"),
//						Region: pulumi.String("ap-guangzhou"),
//					},
//					Type: pulumi.String("COS"),
//				},
//				TaskPriority: pulumi.Int(0),
//				Trigger: &mps.WorkflowTriggerArgs{
//					CosFileUploadTrigger: &mps.WorkflowTriggerCosFileUploadTriggerArgs{
//						Bucket: pulumi.String("cos-lock-1308919341"),
//						Dir:    pulumi.String("/"),
//						Region: pulumi.String("ap-guangzhou"),
//					},
//					Type: pulumi.String("CosFileUpload"),
//				},
//				WorkflowName: pulumi.String("tf-workflow"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mps workflow can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mps/workflow:Workflow workflow workflow_id
//
// ```
type Workflow struct {
	pulumi.CustomResourceState

	// Video Content Analysis Type Task Parameters.
	AiAnalysisTask WorkflowAiAnalysisTaskPtrOutput `pulumi:"aiAnalysisTask"`
	// Video Content Moderation Type Task Parameters.
	AiContentReviewTask WorkflowAiContentReviewTaskPtrOutput `pulumi:"aiContentReviewTask"`
	// Video content recognition type task parameters.
	AiRecognitionTask WorkflowAiRecognitionTaskPtrOutput `pulumi:"aiRecognitionTask"`
	// Media Processing Type Task Parameters.
	MediaProcessTask WorkflowMediaProcessTaskPtrOutput `pulumi:"mediaProcessTask"`
	// The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
	OutputDir pulumi.StringPtrOutput `pulumi:"outputDir"`
	// File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
	OutputStorage WorkflowOutputStoragePtrOutput `pulumi:"outputStorage"`
	// The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
	TaskNotifyConfig WorkflowTaskNotifyConfigPtrOutput `pulumi:"taskNotifyConfig"`
	// The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
	TaskPriority pulumi.IntPtrOutput `pulumi:"taskPriority"`
	// The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
	Trigger WorkflowTriggerOutput `pulumi:"trigger"`
	// Workflow name, up to 128 characters. The name is unique for the same user.
	WorkflowName pulumi.StringOutput `pulumi:"workflowName"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Trigger == nil {
		return nil, errors.New("invalid value for required argument 'Trigger'")
	}
	if args.WorkflowName == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Workflow
	err := ctx.RegisterResource("tencentcloud:Mps/workflow:Workflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	var resource Workflow
	err := ctx.ReadResource("tencentcloud:Mps/workflow:Workflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type workflowState struct {
	// Video Content Analysis Type Task Parameters.
	AiAnalysisTask *WorkflowAiAnalysisTask `pulumi:"aiAnalysisTask"`
	// Video Content Moderation Type Task Parameters.
	AiContentReviewTask *WorkflowAiContentReviewTask `pulumi:"aiContentReviewTask"`
	// Video content recognition type task parameters.
	AiRecognitionTask *WorkflowAiRecognitionTask `pulumi:"aiRecognitionTask"`
	// Media Processing Type Task Parameters.
	MediaProcessTask *WorkflowMediaProcessTask `pulumi:"mediaProcessTask"`
	// The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
	OutputDir *string `pulumi:"outputDir"`
	// File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
	OutputStorage *WorkflowOutputStorage `pulumi:"outputStorage"`
	// The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
	TaskNotifyConfig *WorkflowTaskNotifyConfig `pulumi:"taskNotifyConfig"`
	// The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
	TaskPriority *int `pulumi:"taskPriority"`
	// The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
	Trigger *WorkflowTrigger `pulumi:"trigger"`
	// Workflow name, up to 128 characters. The name is unique for the same user.
	WorkflowName *string `pulumi:"workflowName"`
}

type WorkflowState struct {
	// Video Content Analysis Type Task Parameters.
	AiAnalysisTask WorkflowAiAnalysisTaskPtrInput
	// Video Content Moderation Type Task Parameters.
	AiContentReviewTask WorkflowAiContentReviewTaskPtrInput
	// Video content recognition type task parameters.
	AiRecognitionTask WorkflowAiRecognitionTaskPtrInput
	// Media Processing Type Task Parameters.
	MediaProcessTask WorkflowMediaProcessTaskPtrInput
	// The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
	OutputDir pulumi.StringPtrInput
	// File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
	OutputStorage WorkflowOutputStoragePtrInput
	// The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
	TaskNotifyConfig WorkflowTaskNotifyConfigPtrInput
	// The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
	TaskPriority pulumi.IntPtrInput
	// The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
	Trigger WorkflowTriggerPtrInput
	// Workflow name, up to 128 characters. The name is unique for the same user.
	WorkflowName pulumi.StringPtrInput
}

func (WorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowState)(nil)).Elem()
}

type workflowArgs struct {
	// Video Content Analysis Type Task Parameters.
	AiAnalysisTask *WorkflowAiAnalysisTask `pulumi:"aiAnalysisTask"`
	// Video Content Moderation Type Task Parameters.
	AiContentReviewTask *WorkflowAiContentReviewTask `pulumi:"aiContentReviewTask"`
	// Video content recognition type task parameters.
	AiRecognitionTask *WorkflowAiRecognitionTask `pulumi:"aiRecognitionTask"`
	// Media Processing Type Task Parameters.
	MediaProcessTask *WorkflowMediaProcessTask `pulumi:"mediaProcessTask"`
	// The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
	OutputDir *string `pulumi:"outputDir"`
	// File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
	OutputStorage *WorkflowOutputStorage `pulumi:"outputStorage"`
	// The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
	TaskNotifyConfig *WorkflowTaskNotifyConfig `pulumi:"taskNotifyConfig"`
	// The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
	TaskPriority *int `pulumi:"taskPriority"`
	// The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
	Trigger WorkflowTrigger `pulumi:"trigger"`
	// Workflow name, up to 128 characters. The name is unique for the same user.
	WorkflowName string `pulumi:"workflowName"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	// Video Content Analysis Type Task Parameters.
	AiAnalysisTask WorkflowAiAnalysisTaskPtrInput
	// Video Content Moderation Type Task Parameters.
	AiContentReviewTask WorkflowAiContentReviewTaskPtrInput
	// Video content recognition type task parameters.
	AiRecognitionTask WorkflowAiRecognitionTaskPtrInput
	// Media Processing Type Task Parameters.
	MediaProcessTask WorkflowMediaProcessTaskPtrInput
	// The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
	OutputDir pulumi.StringPtrInput
	// File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
	OutputStorage WorkflowOutputStoragePtrInput
	// The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
	TaskNotifyConfig WorkflowTaskNotifyConfigPtrInput
	// The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
	TaskPriority pulumi.IntPtrInput
	// The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
	Trigger WorkflowTriggerInput
	// Workflow name, up to 128 characters. The name is unique for the same user.
	WorkflowName pulumi.StringInput
}

func (WorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowArgs)(nil)).Elem()
}

type WorkflowInput interface {
	pulumi.Input

	ToWorkflowOutput() WorkflowOutput
	ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput
}

func (*Workflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (i *Workflow) ToWorkflowOutput() WorkflowOutput {
	return i.ToWorkflowOutputWithContext(context.Background())
}

func (i *Workflow) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOutput)
}

// WorkflowArrayInput is an input type that accepts WorkflowArray and WorkflowArrayOutput values.
// You can construct a concrete instance of `WorkflowArrayInput` via:
//
//	WorkflowArray{ WorkflowArgs{...} }
type WorkflowArrayInput interface {
	pulumi.Input

	ToWorkflowArrayOutput() WorkflowArrayOutput
	ToWorkflowArrayOutputWithContext(context.Context) WorkflowArrayOutput
}

type WorkflowArray []WorkflowInput

func (WorkflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workflow)(nil)).Elem()
}

func (i WorkflowArray) ToWorkflowArrayOutput() WorkflowArrayOutput {
	return i.ToWorkflowArrayOutputWithContext(context.Background())
}

func (i WorkflowArray) ToWorkflowArrayOutputWithContext(ctx context.Context) WorkflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowArrayOutput)
}

// WorkflowMapInput is an input type that accepts WorkflowMap and WorkflowMapOutput values.
// You can construct a concrete instance of `WorkflowMapInput` via:
//
//	WorkflowMap{ "key": WorkflowArgs{...} }
type WorkflowMapInput interface {
	pulumi.Input

	ToWorkflowMapOutput() WorkflowMapOutput
	ToWorkflowMapOutputWithContext(context.Context) WorkflowMapOutput
}

type WorkflowMap map[string]WorkflowInput

func (WorkflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workflow)(nil)).Elem()
}

func (i WorkflowMap) ToWorkflowMapOutput() WorkflowMapOutput {
	return i.ToWorkflowMapOutputWithContext(context.Background())
}

func (i WorkflowMap) ToWorkflowMapOutputWithContext(ctx context.Context) WorkflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowMapOutput)
}

type WorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (o WorkflowOutput) ToWorkflowOutput() WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return o
}

// Video Content Analysis Type Task Parameters.
func (o WorkflowOutput) AiAnalysisTask() WorkflowAiAnalysisTaskPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowAiAnalysisTaskPtrOutput { return v.AiAnalysisTask }).(WorkflowAiAnalysisTaskPtrOutput)
}

// Video Content Moderation Type Task Parameters.
func (o WorkflowOutput) AiContentReviewTask() WorkflowAiContentReviewTaskPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowAiContentReviewTaskPtrOutput { return v.AiContentReviewTask }).(WorkflowAiContentReviewTaskPtrOutput)
}

// Video content recognition type task parameters.
func (o WorkflowOutput) AiRecognitionTask() WorkflowAiRecognitionTaskPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowAiRecognitionTaskPtrOutput { return v.AiRecognitionTask }).(WorkflowAiRecognitionTaskPtrOutput)
}

// Media Processing Type Task Parameters.
func (o WorkflowOutput) MediaProcessTask() WorkflowMediaProcessTaskPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowMediaProcessTaskPtrOutput { return v.MediaProcessTask }).(WorkflowMediaProcessTaskPtrOutput)
}

// The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
func (o WorkflowOutput) OutputDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.OutputDir }).(pulumi.StringPtrOutput)
}

// File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
func (o WorkflowOutput) OutputStorage() WorkflowOutputStoragePtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowOutputStoragePtrOutput { return v.OutputStorage }).(WorkflowOutputStoragePtrOutput)
}

// The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
func (o WorkflowOutput) TaskNotifyConfig() WorkflowTaskNotifyConfigPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowTaskNotifyConfigPtrOutput { return v.TaskNotifyConfig }).(WorkflowTaskNotifyConfigPtrOutput)
}

// The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
func (o WorkflowOutput) TaskPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.IntPtrOutput { return v.TaskPriority }).(pulumi.IntPtrOutput)
}

// The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
func (o WorkflowOutput) Trigger() WorkflowTriggerOutput {
	return o.ApplyT(func(v *Workflow) WorkflowTriggerOutput { return v.Trigger }).(WorkflowTriggerOutput)
}

// Workflow name, up to 128 characters. The name is unique for the same user.
func (o WorkflowOutput) WorkflowName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.WorkflowName }).(pulumi.StringOutput)
}

type WorkflowArrayOutput struct{ *pulumi.OutputState }

func (WorkflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workflow)(nil)).Elem()
}

func (o WorkflowArrayOutput) ToWorkflowArrayOutput() WorkflowArrayOutput {
	return o
}

func (o WorkflowArrayOutput) ToWorkflowArrayOutputWithContext(ctx context.Context) WorkflowArrayOutput {
	return o
}

func (o WorkflowArrayOutput) Index(i pulumi.IntInput) WorkflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workflow {
		return vs[0].([]*Workflow)[vs[1].(int)]
	}).(WorkflowOutput)
}

type WorkflowMapOutput struct{ *pulumi.OutputState }

func (WorkflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workflow)(nil)).Elem()
}

func (o WorkflowMapOutput) ToWorkflowMapOutput() WorkflowMapOutput {
	return o
}

func (o WorkflowMapOutput) ToWorkflowMapOutputWithContext(ctx context.Context) WorkflowMapOutput {
	return o
}

func (o WorkflowMapOutput) MapIndex(k pulumi.StringInput) WorkflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workflow {
		return vs[0].(map[string]*Workflow)[vs[1].(string)]
	}).(WorkflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowInput)(nil)).Elem(), &Workflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowArrayInput)(nil)).Elem(), WorkflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowMapInput)(nil)).Elem(), WorkflowMap{})
	pulumi.RegisterOutputType(WorkflowOutput{})
	pulumi.RegisterOutputType(WorkflowArrayOutput{})
	pulumi.RegisterOutputType(WorkflowMapOutput{})
}
