// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mps manageTaskOperation
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mps.NewManageTaskOperation(ctx, "operation", &Mps.ManageTaskOperationArgs{
//				OperationType: pulumi.String("Abort"),
//				TaskId:        pulumi.String("2600010949-LiveScheduleTask-xxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ManageTaskOperation struct {
	pulumi.CustomResourceState

	// Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
	OperationType pulumi.StringOutput `pulumi:"operationType"`
	// Video processing task ID.
	TaskId pulumi.StringOutput `pulumi:"taskId"`
}

// NewManageTaskOperation registers a new resource with the given unique name, arguments, and options.
func NewManageTaskOperation(ctx *pulumi.Context,
	name string, args *ManageTaskOperationArgs, opts ...pulumi.ResourceOption) (*ManageTaskOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OperationType == nil {
		return nil, errors.New("invalid value for required argument 'OperationType'")
	}
	if args.TaskId == nil {
		return nil, errors.New("invalid value for required argument 'TaskId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ManageTaskOperation
	err := ctx.RegisterResource("tencentcloud:Mps/manageTaskOperation:ManageTaskOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManageTaskOperation gets an existing ManageTaskOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManageTaskOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManageTaskOperationState, opts ...pulumi.ResourceOption) (*ManageTaskOperation, error) {
	var resource ManageTaskOperation
	err := ctx.ReadResource("tencentcloud:Mps/manageTaskOperation:ManageTaskOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManageTaskOperation resources.
type manageTaskOperationState struct {
	// Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
	OperationType *string `pulumi:"operationType"`
	// Video processing task ID.
	TaskId *string `pulumi:"taskId"`
}

type ManageTaskOperationState struct {
	// Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
	OperationType pulumi.StringPtrInput
	// Video processing task ID.
	TaskId pulumi.StringPtrInput
}

func (ManageTaskOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*manageTaskOperationState)(nil)).Elem()
}

type manageTaskOperationArgs struct {
	// Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
	OperationType string `pulumi:"operationType"`
	// Video processing task ID.
	TaskId string `pulumi:"taskId"`
}

// The set of arguments for constructing a ManageTaskOperation resource.
type ManageTaskOperationArgs struct {
	// Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
	OperationType pulumi.StringInput
	// Video processing task ID.
	TaskId pulumi.StringInput
}

func (ManageTaskOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*manageTaskOperationArgs)(nil)).Elem()
}

type ManageTaskOperationInput interface {
	pulumi.Input

	ToManageTaskOperationOutput() ManageTaskOperationOutput
	ToManageTaskOperationOutputWithContext(ctx context.Context) ManageTaskOperationOutput
}

func (*ManageTaskOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**ManageTaskOperation)(nil)).Elem()
}

func (i *ManageTaskOperation) ToManageTaskOperationOutput() ManageTaskOperationOutput {
	return i.ToManageTaskOperationOutputWithContext(context.Background())
}

func (i *ManageTaskOperation) ToManageTaskOperationOutputWithContext(ctx context.Context) ManageTaskOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManageTaskOperationOutput)
}

// ManageTaskOperationArrayInput is an input type that accepts ManageTaskOperationArray and ManageTaskOperationArrayOutput values.
// You can construct a concrete instance of `ManageTaskOperationArrayInput` via:
//
//	ManageTaskOperationArray{ ManageTaskOperationArgs{...} }
type ManageTaskOperationArrayInput interface {
	pulumi.Input

	ToManageTaskOperationArrayOutput() ManageTaskOperationArrayOutput
	ToManageTaskOperationArrayOutputWithContext(context.Context) ManageTaskOperationArrayOutput
}

type ManageTaskOperationArray []ManageTaskOperationInput

func (ManageTaskOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManageTaskOperation)(nil)).Elem()
}

func (i ManageTaskOperationArray) ToManageTaskOperationArrayOutput() ManageTaskOperationArrayOutput {
	return i.ToManageTaskOperationArrayOutputWithContext(context.Background())
}

func (i ManageTaskOperationArray) ToManageTaskOperationArrayOutputWithContext(ctx context.Context) ManageTaskOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManageTaskOperationArrayOutput)
}

// ManageTaskOperationMapInput is an input type that accepts ManageTaskOperationMap and ManageTaskOperationMapOutput values.
// You can construct a concrete instance of `ManageTaskOperationMapInput` via:
//
//	ManageTaskOperationMap{ "key": ManageTaskOperationArgs{...} }
type ManageTaskOperationMapInput interface {
	pulumi.Input

	ToManageTaskOperationMapOutput() ManageTaskOperationMapOutput
	ToManageTaskOperationMapOutputWithContext(context.Context) ManageTaskOperationMapOutput
}

type ManageTaskOperationMap map[string]ManageTaskOperationInput

func (ManageTaskOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManageTaskOperation)(nil)).Elem()
}

func (i ManageTaskOperationMap) ToManageTaskOperationMapOutput() ManageTaskOperationMapOutput {
	return i.ToManageTaskOperationMapOutputWithContext(context.Background())
}

func (i ManageTaskOperationMap) ToManageTaskOperationMapOutputWithContext(ctx context.Context) ManageTaskOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManageTaskOperationMapOutput)
}

type ManageTaskOperationOutput struct{ *pulumi.OutputState }

func (ManageTaskOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManageTaskOperation)(nil)).Elem()
}

func (o ManageTaskOperationOutput) ToManageTaskOperationOutput() ManageTaskOperationOutput {
	return o
}

func (o ManageTaskOperationOutput) ToManageTaskOperationOutputWithContext(ctx context.Context) ManageTaskOperationOutput {
	return o
}

// Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
func (o ManageTaskOperationOutput) OperationType() pulumi.StringOutput {
	return o.ApplyT(func(v *ManageTaskOperation) pulumi.StringOutput { return v.OperationType }).(pulumi.StringOutput)
}

// Video processing task ID.
func (o ManageTaskOperationOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManageTaskOperation) pulumi.StringOutput { return v.TaskId }).(pulumi.StringOutput)
}

type ManageTaskOperationArrayOutput struct{ *pulumi.OutputState }

func (ManageTaskOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManageTaskOperation)(nil)).Elem()
}

func (o ManageTaskOperationArrayOutput) ToManageTaskOperationArrayOutput() ManageTaskOperationArrayOutput {
	return o
}

func (o ManageTaskOperationArrayOutput) ToManageTaskOperationArrayOutputWithContext(ctx context.Context) ManageTaskOperationArrayOutput {
	return o
}

func (o ManageTaskOperationArrayOutput) Index(i pulumi.IntInput) ManageTaskOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManageTaskOperation {
		return vs[0].([]*ManageTaskOperation)[vs[1].(int)]
	}).(ManageTaskOperationOutput)
}

type ManageTaskOperationMapOutput struct{ *pulumi.OutputState }

func (ManageTaskOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManageTaskOperation)(nil)).Elem()
}

func (o ManageTaskOperationMapOutput) ToManageTaskOperationMapOutput() ManageTaskOperationMapOutput {
	return o
}

func (o ManageTaskOperationMapOutput) ToManageTaskOperationMapOutputWithContext(ctx context.Context) ManageTaskOperationMapOutput {
	return o
}

func (o ManageTaskOperationMapOutput) MapIndex(k pulumi.StringInput) ManageTaskOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManageTaskOperation {
		return vs[0].(map[string]*ManageTaskOperation)[vs[1].(string)]
	}).(ManageTaskOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManageTaskOperationInput)(nil)).Elem(), &ManageTaskOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManageTaskOperationArrayInput)(nil)).Elem(), ManageTaskOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManageTaskOperationMapInput)(nil)).Elem(), ManageTaskOperationMap{})
	pulumi.RegisterOutputType(ManageTaskOperationOutput{})
	pulumi.RegisterOutputType(ManageTaskOperationArrayOutput{})
	pulumi.RegisterOutputType(ManageTaskOperationMapOutput{})
}
