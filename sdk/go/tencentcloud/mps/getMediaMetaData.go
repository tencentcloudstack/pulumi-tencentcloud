// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of mps mediaMetaData
//
// ## Example Usage
// ### Query the mps media meta data through COS
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			object, err := Cos.GetBucketObject(ctx, &cos.GetBucketObjectArgs{
//				Bucket: fmt.Sprintf("%v%v", "keep-bucket-", local.App_id),
//				Key:    "/mps-test/test.mov",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Mps.GetMediaMetaData(ctx, &mps.GetMediaMetaDataArgs{
//				InputInfo: mps.GetMediaMetaDataInputInfo{
//					Type: "COS",
//					CosInputInfo: mps.GetMediaMetaDataInputInfoCosInputInfo{
//						Bucket: object.Bucket,
//						Region: fmt.Sprintf("%v%v", "%", "s"),
//						Object: object.Key,
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetMediaMetaData(ctx *pulumi.Context, args *GetMediaMetaDataArgs, opts ...pulumi.InvokeOption) (*GetMediaMetaDataResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetMediaMetaDataResult
	err := ctx.Invoke("tencentcloud:Mps/getMediaMetaData:getMediaMetaData", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMediaMetaData.
type GetMediaMetaDataArgs struct {
	// Input information of file for metadata getting.
	InputInfo GetMediaMetaDataInputInfo `pulumi:"inputInfo"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getMediaMetaData.
type GetMediaMetaDataResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string                    `pulumi:"id"`
	InputInfo GetMediaMetaDataInputInfo `pulumi:"inputInfo"`
	// Media metadata.
	MetaDatas        []GetMediaMetaDataMetaData `pulumi:"metaDatas"`
	ResultOutputFile *string                    `pulumi:"resultOutputFile"`
}

func GetMediaMetaDataOutput(ctx *pulumi.Context, args GetMediaMetaDataOutputArgs, opts ...pulumi.InvokeOption) GetMediaMetaDataResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMediaMetaDataResult, error) {
			args := v.(GetMediaMetaDataArgs)
			r, err := GetMediaMetaData(ctx, &args, opts...)
			var s GetMediaMetaDataResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMediaMetaDataResultOutput)
}

// A collection of arguments for invoking getMediaMetaData.
type GetMediaMetaDataOutputArgs struct {
	// Input information of file for metadata getting.
	InputInfo GetMediaMetaDataInputInfoInput `pulumi:"inputInfo"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetMediaMetaDataOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMediaMetaDataArgs)(nil)).Elem()
}

// A collection of values returned by getMediaMetaData.
type GetMediaMetaDataResultOutput struct{ *pulumi.OutputState }

func (GetMediaMetaDataResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMediaMetaDataResult)(nil)).Elem()
}

func (o GetMediaMetaDataResultOutput) ToGetMediaMetaDataResultOutput() GetMediaMetaDataResultOutput {
	return o
}

func (o GetMediaMetaDataResultOutput) ToGetMediaMetaDataResultOutputWithContext(ctx context.Context) GetMediaMetaDataResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetMediaMetaDataResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMediaMetaDataResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetMediaMetaDataResultOutput) InputInfo() GetMediaMetaDataInputInfoOutput {
	return o.ApplyT(func(v GetMediaMetaDataResult) GetMediaMetaDataInputInfo { return v.InputInfo }).(GetMediaMetaDataInputInfoOutput)
}

// Media metadata.
func (o GetMediaMetaDataResultOutput) MetaDatas() GetMediaMetaDataMetaDataArrayOutput {
	return o.ApplyT(func(v GetMediaMetaDataResult) []GetMediaMetaDataMetaData { return v.MetaDatas }).(GetMediaMetaDataMetaDataArrayOutput)
}

func (o GetMediaMetaDataResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMediaMetaDataResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMediaMetaDataResultOutput{})
}
