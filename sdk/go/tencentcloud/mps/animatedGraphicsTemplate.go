// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mps animatedGraphicsTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mps.NewAnimatedGraphicsTemplate(ctx, "animatedGraphicsTemplate", &Mps.AnimatedGraphicsTemplateArgs{
//				Format:             pulumi.String("gif"),
//				Fps:                pulumi.Int(20),
//				Height:             pulumi.Int(130),
//				Quality:            pulumi.Float64(75),
//				ResolutionAdaptive: pulumi.String("open"),
//				Width:              pulumi.Int(140),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mps animated_graphics_template can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mps/animatedGraphicsTemplate:AnimatedGraphicsTemplate animated_graphics_template animated_graphics_template_id
//
// ```
type AnimatedGraphicsTemplate struct {
	pulumi.CustomResourceState

	// Template description information, length limit: 256 characters.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Animation format, the values are gif and webp. Default is gif.
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// Frame rate, value range: [1, 30], unit: Hz.
	Fps pulumi.IntOutput `pulumi:"fps"`
	// The maximum value of the animation height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
	Height pulumi.IntPtrOutput `pulumi:"height"`
	// Rotation diagram template name, length limit: 64 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Image quality, value range: [1, 100], default value is 75.
	Quality pulumi.Float64PtrOutput `pulumi:"quality"`
	// Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
	ResolutionAdaptive pulumi.StringPtrOutput `pulumi:"resolutionAdaptive"`
	// The maximum value of the animation width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
	Width pulumi.IntPtrOutput `pulumi:"width"`
}

// NewAnimatedGraphicsTemplate registers a new resource with the given unique name, arguments, and options.
func NewAnimatedGraphicsTemplate(ctx *pulumi.Context,
	name string, args *AnimatedGraphicsTemplateArgs, opts ...pulumi.ResourceOption) (*AnimatedGraphicsTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fps == nil {
		return nil, errors.New("invalid value for required argument 'Fps'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AnimatedGraphicsTemplate
	err := ctx.RegisterResource("tencentcloud:Mps/animatedGraphicsTemplate:AnimatedGraphicsTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnimatedGraphicsTemplate gets an existing AnimatedGraphicsTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnimatedGraphicsTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnimatedGraphicsTemplateState, opts ...pulumi.ResourceOption) (*AnimatedGraphicsTemplate, error) {
	var resource AnimatedGraphicsTemplate
	err := ctx.ReadResource("tencentcloud:Mps/animatedGraphicsTemplate:AnimatedGraphicsTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnimatedGraphicsTemplate resources.
type animatedGraphicsTemplateState struct {
	// Template description information, length limit: 256 characters.
	Comment *string `pulumi:"comment"`
	// Animation format, the values are gif and webp. Default is gif.
	Format *string `pulumi:"format"`
	// Frame rate, value range: [1, 30], unit: Hz.
	Fps *int `pulumi:"fps"`
	// The maximum value of the animation height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
	Height *int `pulumi:"height"`
	// Rotation diagram template name, length limit: 64 characters.
	Name *string `pulumi:"name"`
	// Image quality, value range: [1, 100], default value is 75.
	Quality *float64 `pulumi:"quality"`
	// Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
	ResolutionAdaptive *string `pulumi:"resolutionAdaptive"`
	// The maximum value of the animation width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
	Width *int `pulumi:"width"`
}

type AnimatedGraphicsTemplateState struct {
	// Template description information, length limit: 256 characters.
	Comment pulumi.StringPtrInput
	// Animation format, the values are gif and webp. Default is gif.
	Format pulumi.StringPtrInput
	// Frame rate, value range: [1, 30], unit: Hz.
	Fps pulumi.IntPtrInput
	// The maximum value of the animation height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
	Height pulumi.IntPtrInput
	// Rotation diagram template name, length limit: 64 characters.
	Name pulumi.StringPtrInput
	// Image quality, value range: [1, 100], default value is 75.
	Quality pulumi.Float64PtrInput
	// Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
	ResolutionAdaptive pulumi.StringPtrInput
	// The maximum value of the animation width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
	Width pulumi.IntPtrInput
}

func (AnimatedGraphicsTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*animatedGraphicsTemplateState)(nil)).Elem()
}

type animatedGraphicsTemplateArgs struct {
	// Template description information, length limit: 256 characters.
	Comment *string `pulumi:"comment"`
	// Animation format, the values are gif and webp. Default is gif.
	Format *string `pulumi:"format"`
	// Frame rate, value range: [1, 30], unit: Hz.
	Fps int `pulumi:"fps"`
	// The maximum value of the animation height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
	Height *int `pulumi:"height"`
	// Rotation diagram template name, length limit: 64 characters.
	Name *string `pulumi:"name"`
	// Image quality, value range: [1, 100], default value is 75.
	Quality *float64 `pulumi:"quality"`
	// Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
	ResolutionAdaptive *string `pulumi:"resolutionAdaptive"`
	// The maximum value of the animation width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
	Width *int `pulumi:"width"`
}

// The set of arguments for constructing a AnimatedGraphicsTemplate resource.
type AnimatedGraphicsTemplateArgs struct {
	// Template description information, length limit: 256 characters.
	Comment pulumi.StringPtrInput
	// Animation format, the values are gif and webp. Default is gif.
	Format pulumi.StringPtrInput
	// Frame rate, value range: [1, 30], unit: Hz.
	Fps pulumi.IntInput
	// The maximum value of the animation height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
	Height pulumi.IntPtrInput
	// Rotation diagram template name, length limit: 64 characters.
	Name pulumi.StringPtrInput
	// Image quality, value range: [1, 100], default value is 75.
	Quality pulumi.Float64PtrInput
	// Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
	ResolutionAdaptive pulumi.StringPtrInput
	// The maximum value of the animation width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
	Width pulumi.IntPtrInput
}

func (AnimatedGraphicsTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*animatedGraphicsTemplateArgs)(nil)).Elem()
}

type AnimatedGraphicsTemplateInput interface {
	pulumi.Input

	ToAnimatedGraphicsTemplateOutput() AnimatedGraphicsTemplateOutput
	ToAnimatedGraphicsTemplateOutputWithContext(ctx context.Context) AnimatedGraphicsTemplateOutput
}

func (*AnimatedGraphicsTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimatedGraphicsTemplate)(nil)).Elem()
}

func (i *AnimatedGraphicsTemplate) ToAnimatedGraphicsTemplateOutput() AnimatedGraphicsTemplateOutput {
	return i.ToAnimatedGraphicsTemplateOutputWithContext(context.Background())
}

func (i *AnimatedGraphicsTemplate) ToAnimatedGraphicsTemplateOutputWithContext(ctx context.Context) AnimatedGraphicsTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimatedGraphicsTemplateOutput)
}

// AnimatedGraphicsTemplateArrayInput is an input type that accepts AnimatedGraphicsTemplateArray and AnimatedGraphicsTemplateArrayOutput values.
// You can construct a concrete instance of `AnimatedGraphicsTemplateArrayInput` via:
//
//	AnimatedGraphicsTemplateArray{ AnimatedGraphicsTemplateArgs{...} }
type AnimatedGraphicsTemplateArrayInput interface {
	pulumi.Input

	ToAnimatedGraphicsTemplateArrayOutput() AnimatedGraphicsTemplateArrayOutput
	ToAnimatedGraphicsTemplateArrayOutputWithContext(context.Context) AnimatedGraphicsTemplateArrayOutput
}

type AnimatedGraphicsTemplateArray []AnimatedGraphicsTemplateInput

func (AnimatedGraphicsTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnimatedGraphicsTemplate)(nil)).Elem()
}

func (i AnimatedGraphicsTemplateArray) ToAnimatedGraphicsTemplateArrayOutput() AnimatedGraphicsTemplateArrayOutput {
	return i.ToAnimatedGraphicsTemplateArrayOutputWithContext(context.Background())
}

func (i AnimatedGraphicsTemplateArray) ToAnimatedGraphicsTemplateArrayOutputWithContext(ctx context.Context) AnimatedGraphicsTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimatedGraphicsTemplateArrayOutput)
}

// AnimatedGraphicsTemplateMapInput is an input type that accepts AnimatedGraphicsTemplateMap and AnimatedGraphicsTemplateMapOutput values.
// You can construct a concrete instance of `AnimatedGraphicsTemplateMapInput` via:
//
//	AnimatedGraphicsTemplateMap{ "key": AnimatedGraphicsTemplateArgs{...} }
type AnimatedGraphicsTemplateMapInput interface {
	pulumi.Input

	ToAnimatedGraphicsTemplateMapOutput() AnimatedGraphicsTemplateMapOutput
	ToAnimatedGraphicsTemplateMapOutputWithContext(context.Context) AnimatedGraphicsTemplateMapOutput
}

type AnimatedGraphicsTemplateMap map[string]AnimatedGraphicsTemplateInput

func (AnimatedGraphicsTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnimatedGraphicsTemplate)(nil)).Elem()
}

func (i AnimatedGraphicsTemplateMap) ToAnimatedGraphicsTemplateMapOutput() AnimatedGraphicsTemplateMapOutput {
	return i.ToAnimatedGraphicsTemplateMapOutputWithContext(context.Background())
}

func (i AnimatedGraphicsTemplateMap) ToAnimatedGraphicsTemplateMapOutputWithContext(ctx context.Context) AnimatedGraphicsTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimatedGraphicsTemplateMapOutput)
}

type AnimatedGraphicsTemplateOutput struct{ *pulumi.OutputState }

func (AnimatedGraphicsTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimatedGraphicsTemplate)(nil)).Elem()
}

func (o AnimatedGraphicsTemplateOutput) ToAnimatedGraphicsTemplateOutput() AnimatedGraphicsTemplateOutput {
	return o
}

func (o AnimatedGraphicsTemplateOutput) ToAnimatedGraphicsTemplateOutputWithContext(ctx context.Context) AnimatedGraphicsTemplateOutput {
	return o
}

// Template description information, length limit: 256 characters.
func (o AnimatedGraphicsTemplateOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimatedGraphicsTemplate) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Animation format, the values are gif and webp. Default is gif.
func (o AnimatedGraphicsTemplateOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimatedGraphicsTemplate) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// Frame rate, value range: [1, 30], unit: Hz.
func (o AnimatedGraphicsTemplateOutput) Fps() pulumi.IntOutput {
	return o.ApplyT(func(v *AnimatedGraphicsTemplate) pulumi.IntOutput { return v.Fps }).(pulumi.IntOutput)
}

// The maximum value of the animation height (or short side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
func (o AnimatedGraphicsTemplateOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AnimatedGraphicsTemplate) pulumi.IntPtrOutput { return v.Height }).(pulumi.IntPtrOutput)
}

// Rotation diagram template name, length limit: 64 characters.
func (o AnimatedGraphicsTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AnimatedGraphicsTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Image quality, value range: [1, 100], default value is 75.
func (o AnimatedGraphicsTemplateOutput) Quality() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AnimatedGraphicsTemplate) pulumi.Float64PtrOutput { return v.Quality }).(pulumi.Float64PtrOutput)
}

// Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
func (o AnimatedGraphicsTemplateOutput) ResolutionAdaptive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimatedGraphicsTemplate) pulumi.StringPtrOutput { return v.ResolutionAdaptive }).(pulumi.StringPtrOutput)
}

// The maximum value of the animation width (or long side), value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
func (o AnimatedGraphicsTemplateOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AnimatedGraphicsTemplate) pulumi.IntPtrOutput { return v.Width }).(pulumi.IntPtrOutput)
}

type AnimatedGraphicsTemplateArrayOutput struct{ *pulumi.OutputState }

func (AnimatedGraphicsTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnimatedGraphicsTemplate)(nil)).Elem()
}

func (o AnimatedGraphicsTemplateArrayOutput) ToAnimatedGraphicsTemplateArrayOutput() AnimatedGraphicsTemplateArrayOutput {
	return o
}

func (o AnimatedGraphicsTemplateArrayOutput) ToAnimatedGraphicsTemplateArrayOutputWithContext(ctx context.Context) AnimatedGraphicsTemplateArrayOutput {
	return o
}

func (o AnimatedGraphicsTemplateArrayOutput) Index(i pulumi.IntInput) AnimatedGraphicsTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnimatedGraphicsTemplate {
		return vs[0].([]*AnimatedGraphicsTemplate)[vs[1].(int)]
	}).(AnimatedGraphicsTemplateOutput)
}

type AnimatedGraphicsTemplateMapOutput struct{ *pulumi.OutputState }

func (AnimatedGraphicsTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnimatedGraphicsTemplate)(nil)).Elem()
}

func (o AnimatedGraphicsTemplateMapOutput) ToAnimatedGraphicsTemplateMapOutput() AnimatedGraphicsTemplateMapOutput {
	return o
}

func (o AnimatedGraphicsTemplateMapOutput) ToAnimatedGraphicsTemplateMapOutputWithContext(ctx context.Context) AnimatedGraphicsTemplateMapOutput {
	return o
}

func (o AnimatedGraphicsTemplateMapOutput) MapIndex(k pulumi.StringInput) AnimatedGraphicsTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnimatedGraphicsTemplate {
		return vs[0].(map[string]*AnimatedGraphicsTemplate)[vs[1].(string)]
	}).(AnimatedGraphicsTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnimatedGraphicsTemplateInput)(nil)).Elem(), &AnimatedGraphicsTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnimatedGraphicsTemplateArrayInput)(nil)).Elem(), AnimatedGraphicsTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnimatedGraphicsTemplateMapInput)(nil)).Elem(), AnimatedGraphicsTemplateMap{})
	pulumi.RegisterOutputType(AnimatedGraphicsTemplateOutput{})
	pulumi.RegisterOutputType(AnimatedGraphicsTemplateArrayOutput{})
	pulumi.RegisterOutputType(AnimatedGraphicsTemplateMapOutput{})
}
