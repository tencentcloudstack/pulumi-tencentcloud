// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mps event
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mps.NewEvent(ctx, "event", &Mps.EventArgs{
//				Description: pulumi.String("event description"),
//				EventName:   pulumi.String("you-event-name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mps event can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mps/event:Event event event_id
//
// ```
type Event struct {
	pulumi.CustomResourceState

	// Event description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Event name.
	EventName pulumi.StringOutput `pulumi:"eventName"`
}

// NewEvent registers a new resource with the given unique name, arguments, and options.
func NewEvent(ctx *pulumi.Context,
	name string, args *EventArgs, opts ...pulumi.ResourceOption) (*Event, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventName == nil {
		return nil, errors.New("invalid value for required argument 'EventName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Event
	err := ctx.RegisterResource("tencentcloud:Mps/event:Event", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvent gets an existing Event resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventState, opts ...pulumi.ResourceOption) (*Event, error) {
	var resource Event
	err := ctx.ReadResource("tencentcloud:Mps/event:Event", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Event resources.
type eventState struct {
	// Event description.
	Description *string `pulumi:"description"`
	// Event name.
	EventName *string `pulumi:"eventName"`
}

type EventState struct {
	// Event description.
	Description pulumi.StringPtrInput
	// Event name.
	EventName pulumi.StringPtrInput
}

func (EventState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventState)(nil)).Elem()
}

type eventArgs struct {
	// Event description.
	Description *string `pulumi:"description"`
	// Event name.
	EventName string `pulumi:"eventName"`
}

// The set of arguments for constructing a Event resource.
type EventArgs struct {
	// Event description.
	Description pulumi.StringPtrInput
	// Event name.
	EventName pulumi.StringInput
}

func (EventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventArgs)(nil)).Elem()
}

type EventInput interface {
	pulumi.Input

	ToEventOutput() EventOutput
	ToEventOutputWithContext(ctx context.Context) EventOutput
}

func (*Event) ElementType() reflect.Type {
	return reflect.TypeOf((**Event)(nil)).Elem()
}

func (i *Event) ToEventOutput() EventOutput {
	return i.ToEventOutputWithContext(context.Background())
}

func (i *Event) ToEventOutputWithContext(ctx context.Context) EventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOutput)
}

// EventArrayInput is an input type that accepts EventArray and EventArrayOutput values.
// You can construct a concrete instance of `EventArrayInput` via:
//
//	EventArray{ EventArgs{...} }
type EventArrayInput interface {
	pulumi.Input

	ToEventArrayOutput() EventArrayOutput
	ToEventArrayOutputWithContext(context.Context) EventArrayOutput
}

type EventArray []EventInput

func (EventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Event)(nil)).Elem()
}

func (i EventArray) ToEventArrayOutput() EventArrayOutput {
	return i.ToEventArrayOutputWithContext(context.Background())
}

func (i EventArray) ToEventArrayOutputWithContext(ctx context.Context) EventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventArrayOutput)
}

// EventMapInput is an input type that accepts EventMap and EventMapOutput values.
// You can construct a concrete instance of `EventMapInput` via:
//
//	EventMap{ "key": EventArgs{...} }
type EventMapInput interface {
	pulumi.Input

	ToEventMapOutput() EventMapOutput
	ToEventMapOutputWithContext(context.Context) EventMapOutput
}

type EventMap map[string]EventInput

func (EventMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Event)(nil)).Elem()
}

func (i EventMap) ToEventMapOutput() EventMapOutput {
	return i.ToEventMapOutputWithContext(context.Background())
}

func (i EventMap) ToEventMapOutputWithContext(ctx context.Context) EventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventMapOutput)
}

type EventOutput struct{ *pulumi.OutputState }

func (EventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Event)(nil)).Elem()
}

func (o EventOutput) ToEventOutput() EventOutput {
	return o
}

func (o EventOutput) ToEventOutputWithContext(ctx context.Context) EventOutput {
	return o
}

// Event description.
func (o EventOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Event) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Event name.
func (o EventOutput) EventName() pulumi.StringOutput {
	return o.ApplyT(func(v *Event) pulumi.StringOutput { return v.EventName }).(pulumi.StringOutput)
}

type EventArrayOutput struct{ *pulumi.OutputState }

func (EventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Event)(nil)).Elem()
}

func (o EventArrayOutput) ToEventArrayOutput() EventArrayOutput {
	return o
}

func (o EventArrayOutput) ToEventArrayOutputWithContext(ctx context.Context) EventArrayOutput {
	return o
}

func (o EventArrayOutput) Index(i pulumi.IntInput) EventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Event {
		return vs[0].([]*Event)[vs[1].(int)]
	}).(EventOutput)
}

type EventMapOutput struct{ *pulumi.OutputState }

func (EventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Event)(nil)).Elem()
}

func (o EventMapOutput) ToEventMapOutput() EventMapOutput {
	return o
}

func (o EventMapOutput) ToEventMapOutputWithContext(ctx context.Context) EventMapOutput {
	return o
}

func (o EventMapOutput) MapIndex(k pulumi.StringInput) EventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Event {
		return vs[0].(map[string]*Event)[vs[1].(string)]
	}).(EventOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventInput)(nil)).Elem(), &Event{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventArrayInput)(nil)).Elem(), EventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventMapInput)(nil)).Elem(), EventMap{})
	pulumi.RegisterOutputType(EventOutput{})
	pulumi.RegisterOutputType(EventArrayOutput{})
	pulumi.RegisterOutputType(EventMapOutput{})
}
