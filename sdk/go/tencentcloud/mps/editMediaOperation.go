// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mps editMediaOperation
//
// ## Example Usage
// ### Operation through COS
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			output, err := Cos.NewBucket(ctx, "output", &Cos.BucketArgs{
//				Bucket: pulumi.String(fmt.Sprintf("%v%v", "tf-bucket-mps-output-", local.App_id)),
//			})
//			if err != nil {
//				return err
//			}
//			object, err := Cos.GetBucketObject(ctx, &cos.GetBucketObjectArgs{
//				Bucket: fmt.Sprintf("%v%v", "keep-bucket-", local.App_id),
//				Key:    "/mps-test/test.mov",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Mps.NewEditMediaOperation(ctx, "operation", &Mps.EditMediaOperationArgs{
//				FileInfos: mps.EditMediaOperationFileInfoArray{
//					&mps.EditMediaOperationFileInfoArgs{
//						InputInfo: &mps.EditMediaOperationFileInfoInputInfoArgs{
//							Type: pulumi.String("COS"),
//							CosInputInfo: &mps.EditMediaOperationFileInfoInputInfoCosInputInfoArgs{
//								Bucket: pulumi.String(object.Bucket),
//								Region: pulumi.String(fmt.Sprintf("%v%v", "%", "s")),
//								Object: pulumi.String(object.Key),
//							},
//						},
//						StartTimeOffset: pulumi.Float64(60),
//						EndTimeOffset:   pulumi.Float64(120),
//					},
//				},
//				OutputStorage: &mps.EditMediaOperationOutputStorageArgs{
//					Type: pulumi.String("COS"),
//					CosOutputStorage: &mps.EditMediaOperationOutputStorageCosOutputStorageArgs{
//						Bucket: output.Bucket,
//						Region: pulumi.String(fmt.Sprintf("%v%v", "%", "s")),
//					},
//				},
//				OutputObjectPath: pulumi.String("/output"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type EditMediaOperation struct {
	pulumi.CustomResourceState

	// Information of input video file.
	FileInfos EditMediaOperationFileInfoArrayOutput `pulumi:"fileInfos"`
	// Configuration for output files of video editing.
	OutputConfig EditMediaOperationOutputConfigPtrOutput `pulumi:"outputConfig"`
	// The path to save the media processing output file.
	OutputObjectPath pulumi.StringOutput `pulumi:"outputObjectPath"`
	// The storage location of the media processing output file.
	OutputStorage EditMediaOperationOutputStorageOutput `pulumi:"outputStorage"`
	// The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
	SessionContext pulumi.StringPtrOutput `pulumi:"sessionContext"`
	// The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
	SessionId pulumi.StringPtrOutput `pulumi:"sessionId"`
	// Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
	TaskNotifyConfig EditMediaOperationTaskNotifyConfigPtrOutput `pulumi:"taskNotifyConfig"`
	// Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
	TasksPriority pulumi.IntPtrOutput `pulumi:"tasksPriority"`
}

// NewEditMediaOperation registers a new resource with the given unique name, arguments, and options.
func NewEditMediaOperation(ctx *pulumi.Context,
	name string, args *EditMediaOperationArgs, opts ...pulumi.ResourceOption) (*EditMediaOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileInfos == nil {
		return nil, errors.New("invalid value for required argument 'FileInfos'")
	}
	if args.OutputObjectPath == nil {
		return nil, errors.New("invalid value for required argument 'OutputObjectPath'")
	}
	if args.OutputStorage == nil {
		return nil, errors.New("invalid value for required argument 'OutputStorage'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource EditMediaOperation
	err := ctx.RegisterResource("tencentcloud:Mps/editMediaOperation:EditMediaOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEditMediaOperation gets an existing EditMediaOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEditMediaOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EditMediaOperationState, opts ...pulumi.ResourceOption) (*EditMediaOperation, error) {
	var resource EditMediaOperation
	err := ctx.ReadResource("tencentcloud:Mps/editMediaOperation:EditMediaOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EditMediaOperation resources.
type editMediaOperationState struct {
	// Information of input video file.
	FileInfos []EditMediaOperationFileInfo `pulumi:"fileInfos"`
	// Configuration for output files of video editing.
	OutputConfig *EditMediaOperationOutputConfig `pulumi:"outputConfig"`
	// The path to save the media processing output file.
	OutputObjectPath *string `pulumi:"outputObjectPath"`
	// The storage location of the media processing output file.
	OutputStorage *EditMediaOperationOutputStorage `pulumi:"outputStorage"`
	// The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
	SessionContext *string `pulumi:"sessionContext"`
	// The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
	SessionId *string `pulumi:"sessionId"`
	// Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
	TaskNotifyConfig *EditMediaOperationTaskNotifyConfig `pulumi:"taskNotifyConfig"`
	// Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
	TasksPriority *int `pulumi:"tasksPriority"`
}

type EditMediaOperationState struct {
	// Information of input video file.
	FileInfos EditMediaOperationFileInfoArrayInput
	// Configuration for output files of video editing.
	OutputConfig EditMediaOperationOutputConfigPtrInput
	// The path to save the media processing output file.
	OutputObjectPath pulumi.StringPtrInput
	// The storage location of the media processing output file.
	OutputStorage EditMediaOperationOutputStoragePtrInput
	// The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
	SessionContext pulumi.StringPtrInput
	// The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
	SessionId pulumi.StringPtrInput
	// Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
	TaskNotifyConfig EditMediaOperationTaskNotifyConfigPtrInput
	// Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
	TasksPriority pulumi.IntPtrInput
}

func (EditMediaOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*editMediaOperationState)(nil)).Elem()
}

type editMediaOperationArgs struct {
	// Information of input video file.
	FileInfos []EditMediaOperationFileInfo `pulumi:"fileInfos"`
	// Configuration for output files of video editing.
	OutputConfig *EditMediaOperationOutputConfig `pulumi:"outputConfig"`
	// The path to save the media processing output file.
	OutputObjectPath string `pulumi:"outputObjectPath"`
	// The storage location of the media processing output file.
	OutputStorage EditMediaOperationOutputStorage `pulumi:"outputStorage"`
	// The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
	SessionContext *string `pulumi:"sessionContext"`
	// The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
	SessionId *string `pulumi:"sessionId"`
	// Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
	TaskNotifyConfig *EditMediaOperationTaskNotifyConfig `pulumi:"taskNotifyConfig"`
	// Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
	TasksPriority *int `pulumi:"tasksPriority"`
}

// The set of arguments for constructing a EditMediaOperation resource.
type EditMediaOperationArgs struct {
	// Information of input video file.
	FileInfos EditMediaOperationFileInfoArrayInput
	// Configuration for output files of video editing.
	OutputConfig EditMediaOperationOutputConfigPtrInput
	// The path to save the media processing output file.
	OutputObjectPath pulumi.StringInput
	// The storage location of the media processing output file.
	OutputStorage EditMediaOperationOutputStorageInput
	// The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
	SessionContext pulumi.StringPtrInput
	// The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
	SessionId pulumi.StringPtrInput
	// Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
	TaskNotifyConfig EditMediaOperationTaskNotifyConfigPtrInput
	// Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
	TasksPriority pulumi.IntPtrInput
}

func (EditMediaOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*editMediaOperationArgs)(nil)).Elem()
}

type EditMediaOperationInput interface {
	pulumi.Input

	ToEditMediaOperationOutput() EditMediaOperationOutput
	ToEditMediaOperationOutputWithContext(ctx context.Context) EditMediaOperationOutput
}

func (*EditMediaOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**EditMediaOperation)(nil)).Elem()
}

func (i *EditMediaOperation) ToEditMediaOperationOutput() EditMediaOperationOutput {
	return i.ToEditMediaOperationOutputWithContext(context.Background())
}

func (i *EditMediaOperation) ToEditMediaOperationOutputWithContext(ctx context.Context) EditMediaOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EditMediaOperationOutput)
}

// EditMediaOperationArrayInput is an input type that accepts EditMediaOperationArray and EditMediaOperationArrayOutput values.
// You can construct a concrete instance of `EditMediaOperationArrayInput` via:
//
//	EditMediaOperationArray{ EditMediaOperationArgs{...} }
type EditMediaOperationArrayInput interface {
	pulumi.Input

	ToEditMediaOperationArrayOutput() EditMediaOperationArrayOutput
	ToEditMediaOperationArrayOutputWithContext(context.Context) EditMediaOperationArrayOutput
}

type EditMediaOperationArray []EditMediaOperationInput

func (EditMediaOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EditMediaOperation)(nil)).Elem()
}

func (i EditMediaOperationArray) ToEditMediaOperationArrayOutput() EditMediaOperationArrayOutput {
	return i.ToEditMediaOperationArrayOutputWithContext(context.Background())
}

func (i EditMediaOperationArray) ToEditMediaOperationArrayOutputWithContext(ctx context.Context) EditMediaOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EditMediaOperationArrayOutput)
}

// EditMediaOperationMapInput is an input type that accepts EditMediaOperationMap and EditMediaOperationMapOutput values.
// You can construct a concrete instance of `EditMediaOperationMapInput` via:
//
//	EditMediaOperationMap{ "key": EditMediaOperationArgs{...} }
type EditMediaOperationMapInput interface {
	pulumi.Input

	ToEditMediaOperationMapOutput() EditMediaOperationMapOutput
	ToEditMediaOperationMapOutputWithContext(context.Context) EditMediaOperationMapOutput
}

type EditMediaOperationMap map[string]EditMediaOperationInput

func (EditMediaOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EditMediaOperation)(nil)).Elem()
}

func (i EditMediaOperationMap) ToEditMediaOperationMapOutput() EditMediaOperationMapOutput {
	return i.ToEditMediaOperationMapOutputWithContext(context.Background())
}

func (i EditMediaOperationMap) ToEditMediaOperationMapOutputWithContext(ctx context.Context) EditMediaOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EditMediaOperationMapOutput)
}

type EditMediaOperationOutput struct{ *pulumi.OutputState }

func (EditMediaOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EditMediaOperation)(nil)).Elem()
}

func (o EditMediaOperationOutput) ToEditMediaOperationOutput() EditMediaOperationOutput {
	return o
}

func (o EditMediaOperationOutput) ToEditMediaOperationOutputWithContext(ctx context.Context) EditMediaOperationOutput {
	return o
}

// Information of input video file.
func (o EditMediaOperationOutput) FileInfos() EditMediaOperationFileInfoArrayOutput {
	return o.ApplyT(func(v *EditMediaOperation) EditMediaOperationFileInfoArrayOutput { return v.FileInfos }).(EditMediaOperationFileInfoArrayOutput)
}

// Configuration for output files of video editing.
func (o EditMediaOperationOutput) OutputConfig() EditMediaOperationOutputConfigPtrOutput {
	return o.ApplyT(func(v *EditMediaOperation) EditMediaOperationOutputConfigPtrOutput { return v.OutputConfig }).(EditMediaOperationOutputConfigPtrOutput)
}

// The path to save the media processing output file.
func (o EditMediaOperationOutput) OutputObjectPath() pulumi.StringOutput {
	return o.ApplyT(func(v *EditMediaOperation) pulumi.StringOutput { return v.OutputObjectPath }).(pulumi.StringOutput)
}

// The storage location of the media processing output file.
func (o EditMediaOperationOutput) OutputStorage() EditMediaOperationOutputStorageOutput {
	return o.ApplyT(func(v *EditMediaOperation) EditMediaOperationOutputStorageOutput { return v.OutputStorage }).(EditMediaOperationOutputStorageOutput)
}

// The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
func (o EditMediaOperationOutput) SessionContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EditMediaOperation) pulumi.StringPtrOutput { return v.SessionContext }).(pulumi.StringPtrOutput)
}

// The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
func (o EditMediaOperationOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EditMediaOperation) pulumi.StringPtrOutput { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
func (o EditMediaOperationOutput) TaskNotifyConfig() EditMediaOperationTaskNotifyConfigPtrOutput {
	return o.ApplyT(func(v *EditMediaOperation) EditMediaOperationTaskNotifyConfigPtrOutput { return v.TaskNotifyConfig }).(EditMediaOperationTaskNotifyConfigPtrOutput)
}

// Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
func (o EditMediaOperationOutput) TasksPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EditMediaOperation) pulumi.IntPtrOutput { return v.TasksPriority }).(pulumi.IntPtrOutput)
}

type EditMediaOperationArrayOutput struct{ *pulumi.OutputState }

func (EditMediaOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EditMediaOperation)(nil)).Elem()
}

func (o EditMediaOperationArrayOutput) ToEditMediaOperationArrayOutput() EditMediaOperationArrayOutput {
	return o
}

func (o EditMediaOperationArrayOutput) ToEditMediaOperationArrayOutputWithContext(ctx context.Context) EditMediaOperationArrayOutput {
	return o
}

func (o EditMediaOperationArrayOutput) Index(i pulumi.IntInput) EditMediaOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EditMediaOperation {
		return vs[0].([]*EditMediaOperation)[vs[1].(int)]
	}).(EditMediaOperationOutput)
}

type EditMediaOperationMapOutput struct{ *pulumi.OutputState }

func (EditMediaOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EditMediaOperation)(nil)).Elem()
}

func (o EditMediaOperationMapOutput) ToEditMediaOperationMapOutput() EditMediaOperationMapOutput {
	return o
}

func (o EditMediaOperationMapOutput) ToEditMediaOperationMapOutputWithContext(ctx context.Context) EditMediaOperationMapOutput {
	return o
}

func (o EditMediaOperationMapOutput) MapIndex(k pulumi.StringInput) EditMediaOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EditMediaOperation {
		return vs[0].(map[string]*EditMediaOperation)[vs[1].(string)]
	}).(EditMediaOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EditMediaOperationInput)(nil)).Elem(), &EditMediaOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*EditMediaOperationArrayInput)(nil)).Elem(), EditMediaOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EditMediaOperationMapInput)(nil)).Elem(), EditMediaOperationMap{})
	pulumi.RegisterOutputType(EditMediaOperationOutput{})
	pulumi.RegisterOutputType(EditMediaOperationArrayOutput{})
	pulumi.RegisterOutputType(EditMediaOperationMapOutput{})
}
