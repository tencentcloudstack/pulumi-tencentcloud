// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mps personSample
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"io/ioutil"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//
// )
//
//	func filebase64OrPanic(path string) pulumi.StringPtrInput {
//		if fileData, err := ioutil.ReadFile(path); err == nil {
//			return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mps.NewPersonSample(ctx, "personSample", &Mps.PersonSampleArgs{
//				Usages: pulumi.StringArray{
//					pulumi.String("Review.Face"),
//				},
//				Description: pulumi.String("test"),
//				FaceContents: pulumi.StringArray{
//					filebase64OrPanic("./person.png"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mps person_sample can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mps/personSample:PersonSample person_sample person_sample_id
//
// ```
type PersonSample struct {
	pulumi.CustomResourceState

	// Material description, length limit: 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
	FaceContents pulumi.StringArrayOutput `pulumi:"faceContents"`
	// Material name, length limit: 20 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
	Usages pulumi.StringArrayOutput `pulumi:"usages"`
}

// NewPersonSample registers a new resource with the given unique name, arguments, and options.
func NewPersonSample(ctx *pulumi.Context,
	name string, args *PersonSampleArgs, opts ...pulumi.ResourceOption) (*PersonSample, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Usages == nil {
		return nil, errors.New("invalid value for required argument 'Usages'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PersonSample
	err := ctx.RegisterResource("tencentcloud:Mps/personSample:PersonSample", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPersonSample gets an existing PersonSample resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPersonSample(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PersonSampleState, opts ...pulumi.ResourceOption) (*PersonSample, error) {
	var resource PersonSample
	err := ctx.ReadResource("tencentcloud:Mps/personSample:PersonSample", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PersonSample resources.
type personSampleState struct {
	// Material description, length limit: 1024 characters.
	Description *string `pulumi:"description"`
	// Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
	FaceContents []string `pulumi:"faceContents"`
	// Material name, length limit: 20 characters.
	Name *string `pulumi:"name"`
	// Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
	Usages []string `pulumi:"usages"`
}

type PersonSampleState struct {
	// Material description, length limit: 1024 characters.
	Description pulumi.StringPtrInput
	// Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
	FaceContents pulumi.StringArrayInput
	// Material name, length limit: 20 characters.
	Name pulumi.StringPtrInput
	// Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
	Usages pulumi.StringArrayInput
}

func (PersonSampleState) ElementType() reflect.Type {
	return reflect.TypeOf((*personSampleState)(nil)).Elem()
}

type personSampleArgs struct {
	// Material description, length limit: 1024 characters.
	Description *string `pulumi:"description"`
	// Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
	FaceContents []string `pulumi:"faceContents"`
	// Material name, length limit: 20 characters.
	Name *string `pulumi:"name"`
	// Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
	Usages []string `pulumi:"usages"`
}

// The set of arguments for constructing a PersonSample resource.
type PersonSampleArgs struct {
	// Material description, length limit: 1024 characters.
	Description pulumi.StringPtrInput
	// Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
	FaceContents pulumi.StringArrayInput
	// Material name, length limit: 20 characters.
	Name pulumi.StringPtrInput
	// Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
	Usages pulumi.StringArrayInput
}

func (PersonSampleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*personSampleArgs)(nil)).Elem()
}

type PersonSampleInput interface {
	pulumi.Input

	ToPersonSampleOutput() PersonSampleOutput
	ToPersonSampleOutputWithContext(ctx context.Context) PersonSampleOutput
}

func (*PersonSample) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonSample)(nil)).Elem()
}

func (i *PersonSample) ToPersonSampleOutput() PersonSampleOutput {
	return i.ToPersonSampleOutputWithContext(context.Background())
}

func (i *PersonSample) ToPersonSampleOutputWithContext(ctx context.Context) PersonSampleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonSampleOutput)
}

// PersonSampleArrayInput is an input type that accepts PersonSampleArray and PersonSampleArrayOutput values.
// You can construct a concrete instance of `PersonSampleArrayInput` via:
//
//	PersonSampleArray{ PersonSampleArgs{...} }
type PersonSampleArrayInput interface {
	pulumi.Input

	ToPersonSampleArrayOutput() PersonSampleArrayOutput
	ToPersonSampleArrayOutputWithContext(context.Context) PersonSampleArrayOutput
}

type PersonSampleArray []PersonSampleInput

func (PersonSampleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PersonSample)(nil)).Elem()
}

func (i PersonSampleArray) ToPersonSampleArrayOutput() PersonSampleArrayOutput {
	return i.ToPersonSampleArrayOutputWithContext(context.Background())
}

func (i PersonSampleArray) ToPersonSampleArrayOutputWithContext(ctx context.Context) PersonSampleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonSampleArrayOutput)
}

// PersonSampleMapInput is an input type that accepts PersonSampleMap and PersonSampleMapOutput values.
// You can construct a concrete instance of `PersonSampleMapInput` via:
//
//	PersonSampleMap{ "key": PersonSampleArgs{...} }
type PersonSampleMapInput interface {
	pulumi.Input

	ToPersonSampleMapOutput() PersonSampleMapOutput
	ToPersonSampleMapOutputWithContext(context.Context) PersonSampleMapOutput
}

type PersonSampleMap map[string]PersonSampleInput

func (PersonSampleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PersonSample)(nil)).Elem()
}

func (i PersonSampleMap) ToPersonSampleMapOutput() PersonSampleMapOutput {
	return i.ToPersonSampleMapOutputWithContext(context.Background())
}

func (i PersonSampleMap) ToPersonSampleMapOutputWithContext(ctx context.Context) PersonSampleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonSampleMapOutput)
}

type PersonSampleOutput struct{ *pulumi.OutputState }

func (PersonSampleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonSample)(nil)).Elem()
}

func (o PersonSampleOutput) ToPersonSampleOutput() PersonSampleOutput {
	return o
}

func (o PersonSampleOutput) ToPersonSampleOutputWithContext(ctx context.Context) PersonSampleOutput {
	return o
}

// Material description, length limit: 1024 characters.
func (o PersonSampleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersonSample) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
func (o PersonSampleOutput) FaceContents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersonSample) pulumi.StringArrayOutput { return v.FaceContents }).(pulumi.StringArrayOutput)
}

// Material name, length limit: 20 characters.
func (o PersonSampleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PersonSample) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
func (o PersonSampleOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PersonSample) pulumi.StringArrayOutput { return v.Usages }).(pulumi.StringArrayOutput)
}

type PersonSampleArrayOutput struct{ *pulumi.OutputState }

func (PersonSampleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PersonSample)(nil)).Elem()
}

func (o PersonSampleArrayOutput) ToPersonSampleArrayOutput() PersonSampleArrayOutput {
	return o
}

func (o PersonSampleArrayOutput) ToPersonSampleArrayOutputWithContext(ctx context.Context) PersonSampleArrayOutput {
	return o
}

func (o PersonSampleArrayOutput) Index(i pulumi.IntInput) PersonSampleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PersonSample {
		return vs[0].([]*PersonSample)[vs[1].(int)]
	}).(PersonSampleOutput)
}

type PersonSampleMapOutput struct{ *pulumi.OutputState }

func (PersonSampleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PersonSample)(nil)).Elem()
}

func (o PersonSampleMapOutput) ToPersonSampleMapOutput() PersonSampleMapOutput {
	return o
}

func (o PersonSampleMapOutput) ToPersonSampleMapOutputWithContext(ctx context.Context) PersonSampleMapOutput {
	return o
}

func (o PersonSampleMapOutput) MapIndex(k pulumi.StringInput) PersonSampleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PersonSample {
		return vs[0].(map[string]*PersonSample)[vs[1].(string)]
	}).(PersonSampleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PersonSampleInput)(nil)).Elem(), &PersonSample{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersonSampleArrayInput)(nil)).Elem(), PersonSampleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersonSampleMapInput)(nil)).Elem(), PersonSampleMap{})
	pulumi.RegisterOutputType(PersonSampleOutput{})
	pulumi.RegisterOutputType(PersonSampleArrayOutput{})
	pulumi.RegisterOutputType(PersonSampleMapOutput{})
}
