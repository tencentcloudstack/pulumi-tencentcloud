// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mps wordSample
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mps.NewWordSample(ctx, "wordSample", &Mps.WordSampleArgs{
//				Keyword: pulumi.String("tf_test_kw_1"),
//				Tags: pulumi.StringArray{
//					pulumi.String("tags_1"),
//					pulumi.String("tags_2"),
//				},
//				Usages: pulumi.StringArray{
//					pulumi.String("Recognition.Ocr"),
//					pulumi.String("Review.Ocr"),
//					pulumi.String("Review.Asr"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mps word_sample can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mps/wordSample:WordSample word_sample keyword
//
// ```
type WordSample struct {
	pulumi.CustomResourceState

	// Keyword. Length limit: 20 characters.
	Keyword pulumi.StringOutput `pulumi:"keyword"`
	// Keyword tag. Array length limit: 20 tags. Each tag length limit: 128 characters.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Keyword usage. Valid values: 1.`Recognition.Ocr`: OCR-based content recognition. 2.`Recognition.Asr`: ASR-based content recognition. 3.`Review.Ocr`: OCR-based inappropriate information recognition. 4.`Review.Asr`: ASR-based inappropriate information recognition.
	Usages pulumi.StringArrayOutput `pulumi:"usages"`
}

// NewWordSample registers a new resource with the given unique name, arguments, and options.
func NewWordSample(ctx *pulumi.Context,
	name string, args *WordSampleArgs, opts ...pulumi.ResourceOption) (*WordSample, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Keyword == nil {
		return nil, errors.New("invalid value for required argument 'Keyword'")
	}
	if args.Usages == nil {
		return nil, errors.New("invalid value for required argument 'Usages'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WordSample
	err := ctx.RegisterResource("tencentcloud:Mps/wordSample:WordSample", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWordSample gets an existing WordSample resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWordSample(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WordSampleState, opts ...pulumi.ResourceOption) (*WordSample, error) {
	var resource WordSample
	err := ctx.ReadResource("tencentcloud:Mps/wordSample:WordSample", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WordSample resources.
type wordSampleState struct {
	// Keyword. Length limit: 20 characters.
	Keyword *string `pulumi:"keyword"`
	// Keyword tag. Array length limit: 20 tags. Each tag length limit: 128 characters.
	Tags []string `pulumi:"tags"`
	// Keyword usage. Valid values: 1.`Recognition.Ocr`: OCR-based content recognition. 2.`Recognition.Asr`: ASR-based content recognition. 3.`Review.Ocr`: OCR-based inappropriate information recognition. 4.`Review.Asr`: ASR-based inappropriate information recognition.
	Usages []string `pulumi:"usages"`
}

type WordSampleState struct {
	// Keyword. Length limit: 20 characters.
	Keyword pulumi.StringPtrInput
	// Keyword tag. Array length limit: 20 tags. Each tag length limit: 128 characters.
	Tags pulumi.StringArrayInput
	// Keyword usage. Valid values: 1.`Recognition.Ocr`: OCR-based content recognition. 2.`Recognition.Asr`: ASR-based content recognition. 3.`Review.Ocr`: OCR-based inappropriate information recognition. 4.`Review.Asr`: ASR-based inappropriate information recognition.
	Usages pulumi.StringArrayInput
}

func (WordSampleState) ElementType() reflect.Type {
	return reflect.TypeOf((*wordSampleState)(nil)).Elem()
}

type wordSampleArgs struct {
	// Keyword. Length limit: 20 characters.
	Keyword string `pulumi:"keyword"`
	// Keyword tag. Array length limit: 20 tags. Each tag length limit: 128 characters.
	Tags []string `pulumi:"tags"`
	// Keyword usage. Valid values: 1.`Recognition.Ocr`: OCR-based content recognition. 2.`Recognition.Asr`: ASR-based content recognition. 3.`Review.Ocr`: OCR-based inappropriate information recognition. 4.`Review.Asr`: ASR-based inappropriate information recognition.
	Usages []string `pulumi:"usages"`
}

// The set of arguments for constructing a WordSample resource.
type WordSampleArgs struct {
	// Keyword. Length limit: 20 characters.
	Keyword pulumi.StringInput
	// Keyword tag. Array length limit: 20 tags. Each tag length limit: 128 characters.
	Tags pulumi.StringArrayInput
	// Keyword usage. Valid values: 1.`Recognition.Ocr`: OCR-based content recognition. 2.`Recognition.Asr`: ASR-based content recognition. 3.`Review.Ocr`: OCR-based inappropriate information recognition. 4.`Review.Asr`: ASR-based inappropriate information recognition.
	Usages pulumi.StringArrayInput
}

func (WordSampleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wordSampleArgs)(nil)).Elem()
}

type WordSampleInput interface {
	pulumi.Input

	ToWordSampleOutput() WordSampleOutput
	ToWordSampleOutputWithContext(ctx context.Context) WordSampleOutput
}

func (*WordSample) ElementType() reflect.Type {
	return reflect.TypeOf((**WordSample)(nil)).Elem()
}

func (i *WordSample) ToWordSampleOutput() WordSampleOutput {
	return i.ToWordSampleOutputWithContext(context.Background())
}

func (i *WordSample) ToWordSampleOutputWithContext(ctx context.Context) WordSampleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WordSampleOutput)
}

// WordSampleArrayInput is an input type that accepts WordSampleArray and WordSampleArrayOutput values.
// You can construct a concrete instance of `WordSampleArrayInput` via:
//
//	WordSampleArray{ WordSampleArgs{...} }
type WordSampleArrayInput interface {
	pulumi.Input

	ToWordSampleArrayOutput() WordSampleArrayOutput
	ToWordSampleArrayOutputWithContext(context.Context) WordSampleArrayOutput
}

type WordSampleArray []WordSampleInput

func (WordSampleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WordSample)(nil)).Elem()
}

func (i WordSampleArray) ToWordSampleArrayOutput() WordSampleArrayOutput {
	return i.ToWordSampleArrayOutputWithContext(context.Background())
}

func (i WordSampleArray) ToWordSampleArrayOutputWithContext(ctx context.Context) WordSampleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WordSampleArrayOutput)
}

// WordSampleMapInput is an input type that accepts WordSampleMap and WordSampleMapOutput values.
// You can construct a concrete instance of `WordSampleMapInput` via:
//
//	WordSampleMap{ "key": WordSampleArgs{...} }
type WordSampleMapInput interface {
	pulumi.Input

	ToWordSampleMapOutput() WordSampleMapOutput
	ToWordSampleMapOutputWithContext(context.Context) WordSampleMapOutput
}

type WordSampleMap map[string]WordSampleInput

func (WordSampleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WordSample)(nil)).Elem()
}

func (i WordSampleMap) ToWordSampleMapOutput() WordSampleMapOutput {
	return i.ToWordSampleMapOutputWithContext(context.Background())
}

func (i WordSampleMap) ToWordSampleMapOutputWithContext(ctx context.Context) WordSampleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WordSampleMapOutput)
}

type WordSampleOutput struct{ *pulumi.OutputState }

func (WordSampleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WordSample)(nil)).Elem()
}

func (o WordSampleOutput) ToWordSampleOutput() WordSampleOutput {
	return o
}

func (o WordSampleOutput) ToWordSampleOutputWithContext(ctx context.Context) WordSampleOutput {
	return o
}

// Keyword. Length limit: 20 characters.
func (o WordSampleOutput) Keyword() pulumi.StringOutput {
	return o.ApplyT(func(v *WordSample) pulumi.StringOutput { return v.Keyword }).(pulumi.StringOutput)
}

// Keyword tag. Array length limit: 20 tags. Each tag length limit: 128 characters.
func (o WordSampleOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WordSample) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Keyword usage. Valid values: 1.`Recognition.Ocr`: OCR-based content recognition. 2.`Recognition.Asr`: ASR-based content recognition. 3.`Review.Ocr`: OCR-based inappropriate information recognition. 4.`Review.Asr`: ASR-based inappropriate information recognition.
func (o WordSampleOutput) Usages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WordSample) pulumi.StringArrayOutput { return v.Usages }).(pulumi.StringArrayOutput)
}

type WordSampleArrayOutput struct{ *pulumi.OutputState }

func (WordSampleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WordSample)(nil)).Elem()
}

func (o WordSampleArrayOutput) ToWordSampleArrayOutput() WordSampleArrayOutput {
	return o
}

func (o WordSampleArrayOutput) ToWordSampleArrayOutputWithContext(ctx context.Context) WordSampleArrayOutput {
	return o
}

func (o WordSampleArrayOutput) Index(i pulumi.IntInput) WordSampleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WordSample {
		return vs[0].([]*WordSample)[vs[1].(int)]
	}).(WordSampleOutput)
}

type WordSampleMapOutput struct{ *pulumi.OutputState }

func (WordSampleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WordSample)(nil)).Elem()
}

func (o WordSampleMapOutput) ToWordSampleMapOutput() WordSampleMapOutput {
	return o
}

func (o WordSampleMapOutput) ToWordSampleMapOutputWithContext(ctx context.Context) WordSampleMapOutput {
	return o
}

func (o WordSampleMapOutput) MapIndex(k pulumi.StringInput) WordSampleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WordSample {
		return vs[0].(map[string]*WordSample)[vs[1].(string)]
	}).(WordSampleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WordSampleInput)(nil)).Elem(), &WordSample{})
	pulumi.RegisterInputType(reflect.TypeOf((*WordSampleArrayInput)(nil)).Elem(), WordSampleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WordSampleMapInput)(nil)).Elem(), WordSampleMap{})
	pulumi.RegisterOutputType(WordSampleOutput{})
	pulumi.RegisterOutputType(WordSampleArrayOutput{})
	pulumi.RegisterOutputType(WordSampleMapOutput{})
}
