// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of mps parseNotification
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mps.GetParseNotification(ctx, &mps.GetParseNotificationArgs{
//				Content: "your_content",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetParseNotification(ctx *pulumi.Context, args *GetParseNotificationArgs, opts ...pulumi.InvokeOption) (*GetParseNotificationResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetParseNotificationResult
	err := ctx.Invoke("tencentcloud:Mps/getParseNotification:getParseNotification", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getParseNotification.
type GetParseNotificationArgs struct {
	// Event notification obtained from CMQ.
	Content string `pulumi:"content"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getParseNotification.
type GetParseNotificationResult struct {
	Content string `pulumi:"content"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func GetParseNotificationOutput(ctx *pulumi.Context, args GetParseNotificationOutputArgs, opts ...pulumi.InvokeOption) GetParseNotificationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetParseNotificationResult, error) {
			args := v.(GetParseNotificationArgs)
			r, err := GetParseNotification(ctx, &args, opts...)
			var s GetParseNotificationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetParseNotificationResultOutput)
}

// A collection of arguments for invoking getParseNotification.
type GetParseNotificationOutputArgs struct {
	// Event notification obtained from CMQ.
	Content pulumi.StringInput `pulumi:"content"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetParseNotificationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParseNotificationArgs)(nil)).Elem()
}

// A collection of values returned by getParseNotification.
type GetParseNotificationResultOutput struct{ *pulumi.OutputState }

func (GetParseNotificationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParseNotificationResult)(nil)).Elem()
}

func (o GetParseNotificationResultOutput) ToGetParseNotificationResultOutput() GetParseNotificationResultOutput {
	return o
}

func (o GetParseNotificationResultOutput) ToGetParseNotificationResultOutputWithContext(ctx context.Context) GetParseNotificationResultOutput {
	return o
}

func (o GetParseNotificationResultOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GetParseNotificationResult) string { return v.Content }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetParseNotificationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetParseNotificationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetParseNotificationResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetParseNotificationResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetParseNotificationResultOutput{})
}
