// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mps

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mps executeFunctionOperation
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mps"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mps.NewExecuteFunctionOperation(ctx, "operation", &Mps.ExecuteFunctionOperationArgs{
//				FunctionArg:  pulumi.String("arg1"),
//				FunctionName: pulumi.String("ExampleFunc"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ExecuteFunctionOperation struct {
	pulumi.CustomResourceState

	// API parameter. Parameter format will depend on the actual function definition.
	FunctionArg pulumi.StringOutput `pulumi:"functionArg"`
	// Name of called backend API.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
}

// NewExecuteFunctionOperation registers a new resource with the given unique name, arguments, and options.
func NewExecuteFunctionOperation(ctx *pulumi.Context,
	name string, args *ExecuteFunctionOperationArgs, opts ...pulumi.ResourceOption) (*ExecuteFunctionOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionArg == nil {
		return nil, errors.New("invalid value for required argument 'FunctionArg'")
	}
	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ExecuteFunctionOperation
	err := ctx.RegisterResource("tencentcloud:Mps/executeFunctionOperation:ExecuteFunctionOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExecuteFunctionOperation gets an existing ExecuteFunctionOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExecuteFunctionOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExecuteFunctionOperationState, opts ...pulumi.ResourceOption) (*ExecuteFunctionOperation, error) {
	var resource ExecuteFunctionOperation
	err := ctx.ReadResource("tencentcloud:Mps/executeFunctionOperation:ExecuteFunctionOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExecuteFunctionOperation resources.
type executeFunctionOperationState struct {
	// API parameter. Parameter format will depend on the actual function definition.
	FunctionArg *string `pulumi:"functionArg"`
	// Name of called backend API.
	FunctionName *string `pulumi:"functionName"`
}

type ExecuteFunctionOperationState struct {
	// API parameter. Parameter format will depend on the actual function definition.
	FunctionArg pulumi.StringPtrInput
	// Name of called backend API.
	FunctionName pulumi.StringPtrInput
}

func (ExecuteFunctionOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*executeFunctionOperationState)(nil)).Elem()
}

type executeFunctionOperationArgs struct {
	// API parameter. Parameter format will depend on the actual function definition.
	FunctionArg string `pulumi:"functionArg"`
	// Name of called backend API.
	FunctionName string `pulumi:"functionName"`
}

// The set of arguments for constructing a ExecuteFunctionOperation resource.
type ExecuteFunctionOperationArgs struct {
	// API parameter. Parameter format will depend on the actual function definition.
	FunctionArg pulumi.StringInput
	// Name of called backend API.
	FunctionName pulumi.StringInput
}

func (ExecuteFunctionOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*executeFunctionOperationArgs)(nil)).Elem()
}

type ExecuteFunctionOperationInput interface {
	pulumi.Input

	ToExecuteFunctionOperationOutput() ExecuteFunctionOperationOutput
	ToExecuteFunctionOperationOutputWithContext(ctx context.Context) ExecuteFunctionOperationOutput
}

func (*ExecuteFunctionOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecuteFunctionOperation)(nil)).Elem()
}

func (i *ExecuteFunctionOperation) ToExecuteFunctionOperationOutput() ExecuteFunctionOperationOutput {
	return i.ToExecuteFunctionOperationOutputWithContext(context.Background())
}

func (i *ExecuteFunctionOperation) ToExecuteFunctionOperationOutputWithContext(ctx context.Context) ExecuteFunctionOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecuteFunctionOperationOutput)
}

// ExecuteFunctionOperationArrayInput is an input type that accepts ExecuteFunctionOperationArray and ExecuteFunctionOperationArrayOutput values.
// You can construct a concrete instance of `ExecuteFunctionOperationArrayInput` via:
//
//	ExecuteFunctionOperationArray{ ExecuteFunctionOperationArgs{...} }
type ExecuteFunctionOperationArrayInput interface {
	pulumi.Input

	ToExecuteFunctionOperationArrayOutput() ExecuteFunctionOperationArrayOutput
	ToExecuteFunctionOperationArrayOutputWithContext(context.Context) ExecuteFunctionOperationArrayOutput
}

type ExecuteFunctionOperationArray []ExecuteFunctionOperationInput

func (ExecuteFunctionOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExecuteFunctionOperation)(nil)).Elem()
}

func (i ExecuteFunctionOperationArray) ToExecuteFunctionOperationArrayOutput() ExecuteFunctionOperationArrayOutput {
	return i.ToExecuteFunctionOperationArrayOutputWithContext(context.Background())
}

func (i ExecuteFunctionOperationArray) ToExecuteFunctionOperationArrayOutputWithContext(ctx context.Context) ExecuteFunctionOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecuteFunctionOperationArrayOutput)
}

// ExecuteFunctionOperationMapInput is an input type that accepts ExecuteFunctionOperationMap and ExecuteFunctionOperationMapOutput values.
// You can construct a concrete instance of `ExecuteFunctionOperationMapInput` via:
//
//	ExecuteFunctionOperationMap{ "key": ExecuteFunctionOperationArgs{...} }
type ExecuteFunctionOperationMapInput interface {
	pulumi.Input

	ToExecuteFunctionOperationMapOutput() ExecuteFunctionOperationMapOutput
	ToExecuteFunctionOperationMapOutputWithContext(context.Context) ExecuteFunctionOperationMapOutput
}

type ExecuteFunctionOperationMap map[string]ExecuteFunctionOperationInput

func (ExecuteFunctionOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExecuteFunctionOperation)(nil)).Elem()
}

func (i ExecuteFunctionOperationMap) ToExecuteFunctionOperationMapOutput() ExecuteFunctionOperationMapOutput {
	return i.ToExecuteFunctionOperationMapOutputWithContext(context.Background())
}

func (i ExecuteFunctionOperationMap) ToExecuteFunctionOperationMapOutputWithContext(ctx context.Context) ExecuteFunctionOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecuteFunctionOperationMapOutput)
}

type ExecuteFunctionOperationOutput struct{ *pulumi.OutputState }

func (ExecuteFunctionOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecuteFunctionOperation)(nil)).Elem()
}

func (o ExecuteFunctionOperationOutput) ToExecuteFunctionOperationOutput() ExecuteFunctionOperationOutput {
	return o
}

func (o ExecuteFunctionOperationOutput) ToExecuteFunctionOperationOutputWithContext(ctx context.Context) ExecuteFunctionOperationOutput {
	return o
}

// API parameter. Parameter format will depend on the actual function definition.
func (o ExecuteFunctionOperationOutput) FunctionArg() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecuteFunctionOperation) pulumi.StringOutput { return v.FunctionArg }).(pulumi.StringOutput)
}

// Name of called backend API.
func (o ExecuteFunctionOperationOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExecuteFunctionOperation) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

type ExecuteFunctionOperationArrayOutput struct{ *pulumi.OutputState }

func (ExecuteFunctionOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExecuteFunctionOperation)(nil)).Elem()
}

func (o ExecuteFunctionOperationArrayOutput) ToExecuteFunctionOperationArrayOutput() ExecuteFunctionOperationArrayOutput {
	return o
}

func (o ExecuteFunctionOperationArrayOutput) ToExecuteFunctionOperationArrayOutputWithContext(ctx context.Context) ExecuteFunctionOperationArrayOutput {
	return o
}

func (o ExecuteFunctionOperationArrayOutput) Index(i pulumi.IntInput) ExecuteFunctionOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExecuteFunctionOperation {
		return vs[0].([]*ExecuteFunctionOperation)[vs[1].(int)]
	}).(ExecuteFunctionOperationOutput)
}

type ExecuteFunctionOperationMapOutput struct{ *pulumi.OutputState }

func (ExecuteFunctionOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExecuteFunctionOperation)(nil)).Elem()
}

func (o ExecuteFunctionOperationMapOutput) ToExecuteFunctionOperationMapOutput() ExecuteFunctionOperationMapOutput {
	return o
}

func (o ExecuteFunctionOperationMapOutput) ToExecuteFunctionOperationMapOutputWithContext(ctx context.Context) ExecuteFunctionOperationMapOutput {
	return o
}

func (o ExecuteFunctionOperationMapOutput) MapIndex(k pulumi.StringInput) ExecuteFunctionOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExecuteFunctionOperation {
		return vs[0].(map[string]*ExecuteFunctionOperation)[vs[1].(string)]
	}).(ExecuteFunctionOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExecuteFunctionOperationInput)(nil)).Elem(), &ExecuteFunctionOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecuteFunctionOperationArrayInput)(nil)).Elem(), ExecuteFunctionOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecuteFunctionOperationMapInput)(nil)).Elem(), ExecuteFunctionOperationMap{})
	pulumi.RegisterOutputType(ExecuteFunctionOperationOutput{})
	pulumi.RegisterOutputType(ExecuteFunctionOperationArrayOutput{})
	pulumi.RegisterOutputType(ExecuteFunctionOperationMapOutput{})
}
