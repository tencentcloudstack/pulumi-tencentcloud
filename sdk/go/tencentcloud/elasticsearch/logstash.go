// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a elasticsearch logstash
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Elasticsearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Elasticsearch"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Elasticsearch.NewLogstash(ctx, "logstash", &Elasticsearch.LogstashArgs{
//				ChargeType:      pulumi.String("POSTPAID_BY_HOUR"),
//				DiskSize:        pulumi.Int(20),
//				DiskType:        pulumi.String("CLOUD_SSD"),
//				InstanceName:    pulumi.String("logstash-test"),
//				LicenseType:     pulumi.String("xpack"),
//				LogstashVersion: pulumi.String("7.14.2"),
//				NodeNum:         pulumi.Int(1),
//				NodeType:        pulumi.String("LOGSTASH.SA2.MEDIUM4"),
//				OperationDuration: &elasticsearch.LogstashOperationDurationArgs{
//					Periods: pulumi.IntArray{
//						pulumi.Int(1),
//						pulumi.Int(2),
//						pulumi.Int(3),
//						pulumi.Int(4),
//						pulumi.Int(5),
//						pulumi.Int(6),
//						pulumi.Int(0),
//					},
//					TimeEnd:   pulumi.String("06:00"),
//					TimeStart: pulumi.String("02:00"),
//					TimeZone:  pulumi.String("UTC+8"),
//				},
//				SubnetId: pulumi.String("subnet-4o0zd840"),
//				Tags: pulumi.AnyMap{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//				VpcId: pulumi.String("vpc-4owdpnwr"),
//				Zone:  pulumi.String("ap-guangzhou-6"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// elasticsearch logstash can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Elasticsearch/logstash:Logstash logstash logstash_id
//
// ```
type Logstash struct {
	pulumi.CustomResourceState

	// whether to use voucher auto, 1 when use, else 0.
	AutoVoucher pulumi.IntPtrOutput `pulumi:"autoVoucher"`
	// Period when charged by months or years(unit depends on TimeUnit).
	ChargePeriod pulumi.IntPtrOutput `pulumi:"chargePeriod"`
	// Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
	ChargeType pulumi.StringPtrOutput `pulumi:"chargeType"`
	// node disk size (unit GB).
	DiskSize pulumi.IntPtrOutput `pulumi:"diskSize"`
	// Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
	DiskType pulumi.StringPtrOutput `pulumi:"diskType"`
	// Instance name (compose of 1-50 letter, number, - or _).
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// License type. oss: open source version; xpack:xpack version; default: xpack.
	LicenseType pulumi.StringPtrOutput `pulumi:"licenseType"`
	// Instance version(6.8.13, 7.10.1).
	LogstashVersion pulumi.StringOutput `pulumi:"logstashVersion"`
	// Node num(range 2-50).
	NodeNum pulumi.IntPtrOutput `pulumi:"nodeNum"`
	// Node type. Valid values:
	// - LOGSTASH.S1.SMALL2: 1 core 2G;
	// - LOGSTASH.S1.MEDIUM4:2 core 4G;
	// - LOGSTASH.S1.MEDIUM8:2 core 8G;
	// - LOGSTASH.S1.LARGE16:4 core 16G;
	// - LOGSTASH.S1.2XLARGE32:8 core 32G;
	// - LOGSTASH.S1.4XLARGE32:16 core 32G;
	// - LOGSTASH.S1.4XLARGE64:16 core 64G.
	NodeType pulumi.StringPtrOutput `pulumi:"nodeType"`
	// operation time by tencent clound.
	OperationDuration LogstashOperationDurationPtrOutput `pulumi:"operationDuration"`
	// Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
	RenewFlag pulumi.StringPtrOutput `pulumi:"renewFlag"`
	// Subnet id.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// charge time unit(set when ChargeType is PREPAID, default value: ms).
	TimeUnit pulumi.StringPtrOutput `pulumi:"timeUnit"`
	// Voucher list(only can use one voucher by now).
	VoucherIds pulumi.StringArrayOutput `pulumi:"voucherIds"`
	// VPC id.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Available zone.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewLogstash registers a new resource with the given unique name, arguments, and options.
func NewLogstash(ctx *pulumi.Context,
	name string, args *LogstashArgs, opts ...pulumi.ResourceOption) (*Logstash, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.LogstashVersion == nil {
		return nil, errors.New("invalid value for required argument 'LogstashVersion'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Logstash
	err := ctx.RegisterResource("tencentcloud:Elasticsearch/logstash:Logstash", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogstash gets an existing Logstash resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogstash(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogstashState, opts ...pulumi.ResourceOption) (*Logstash, error) {
	var resource Logstash
	err := ctx.ReadResource("tencentcloud:Elasticsearch/logstash:Logstash", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logstash resources.
type logstashState struct {
	// whether to use voucher auto, 1 when use, else 0.
	AutoVoucher *int `pulumi:"autoVoucher"`
	// Period when charged by months or years(unit depends on TimeUnit).
	ChargePeriod *int `pulumi:"chargePeriod"`
	// Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
	ChargeType *string `pulumi:"chargeType"`
	// node disk size (unit GB).
	DiskSize *int `pulumi:"diskSize"`
	// Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
	DiskType *string `pulumi:"diskType"`
	// Instance name (compose of 1-50 letter, number, - or _).
	InstanceName *string `pulumi:"instanceName"`
	// License type. oss: open source version; xpack:xpack version; default: xpack.
	LicenseType *string `pulumi:"licenseType"`
	// Instance version(6.8.13, 7.10.1).
	LogstashVersion *string `pulumi:"logstashVersion"`
	// Node num(range 2-50).
	NodeNum *int `pulumi:"nodeNum"`
	// Node type. Valid values:
	// - LOGSTASH.S1.SMALL2: 1 core 2G;
	// - LOGSTASH.S1.MEDIUM4:2 core 4G;
	// - LOGSTASH.S1.MEDIUM8:2 core 8G;
	// - LOGSTASH.S1.LARGE16:4 core 16G;
	// - LOGSTASH.S1.2XLARGE32:8 core 32G;
	// - LOGSTASH.S1.4XLARGE32:16 core 32G;
	// - LOGSTASH.S1.4XLARGE64:16 core 64G.
	NodeType *string `pulumi:"nodeType"`
	// operation time by tencent clound.
	OperationDuration *LogstashOperationDuration `pulumi:"operationDuration"`
	// Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
	RenewFlag *string `pulumi:"renewFlag"`
	// Subnet id.
	SubnetId *string `pulumi:"subnetId"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// charge time unit(set when ChargeType is PREPAID, default value: ms).
	TimeUnit *string `pulumi:"timeUnit"`
	// Voucher list(only can use one voucher by now).
	VoucherIds []string `pulumi:"voucherIds"`
	// VPC id.
	VpcId *string `pulumi:"vpcId"`
	// Available zone.
	Zone *string `pulumi:"zone"`
}

type LogstashState struct {
	// whether to use voucher auto, 1 when use, else 0.
	AutoVoucher pulumi.IntPtrInput
	// Period when charged by months or years(unit depends on TimeUnit).
	ChargePeriod pulumi.IntPtrInput
	// Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
	ChargeType pulumi.StringPtrInput
	// node disk size (unit GB).
	DiskSize pulumi.IntPtrInput
	// Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
	DiskType pulumi.StringPtrInput
	// Instance name (compose of 1-50 letter, number, - or _).
	InstanceName pulumi.StringPtrInput
	// License type. oss: open source version; xpack:xpack version; default: xpack.
	LicenseType pulumi.StringPtrInput
	// Instance version(6.8.13, 7.10.1).
	LogstashVersion pulumi.StringPtrInput
	// Node num(range 2-50).
	NodeNum pulumi.IntPtrInput
	// Node type. Valid values:
	// - LOGSTASH.S1.SMALL2: 1 core 2G;
	// - LOGSTASH.S1.MEDIUM4:2 core 4G;
	// - LOGSTASH.S1.MEDIUM8:2 core 8G;
	// - LOGSTASH.S1.LARGE16:4 core 16G;
	// - LOGSTASH.S1.2XLARGE32:8 core 32G;
	// - LOGSTASH.S1.4XLARGE32:16 core 32G;
	// - LOGSTASH.S1.4XLARGE64:16 core 64G.
	NodeType pulumi.StringPtrInput
	// operation time by tencent clound.
	OperationDuration LogstashOperationDurationPtrInput
	// Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
	RenewFlag pulumi.StringPtrInput
	// Subnet id.
	SubnetId pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// charge time unit(set when ChargeType is PREPAID, default value: ms).
	TimeUnit pulumi.StringPtrInput
	// Voucher list(only can use one voucher by now).
	VoucherIds pulumi.StringArrayInput
	// VPC id.
	VpcId pulumi.StringPtrInput
	// Available zone.
	Zone pulumi.StringPtrInput
}

func (LogstashState) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashState)(nil)).Elem()
}

type logstashArgs struct {
	// whether to use voucher auto, 1 when use, else 0.
	AutoVoucher *int `pulumi:"autoVoucher"`
	// Period when charged by months or years(unit depends on TimeUnit).
	ChargePeriod *int `pulumi:"chargePeriod"`
	// Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
	ChargeType *string `pulumi:"chargeType"`
	// node disk size (unit GB).
	DiskSize *int `pulumi:"diskSize"`
	// Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
	DiskType *string `pulumi:"diskType"`
	// Instance name (compose of 1-50 letter, number, - or _).
	InstanceName string `pulumi:"instanceName"`
	// License type. oss: open source version; xpack:xpack version; default: xpack.
	LicenseType *string `pulumi:"licenseType"`
	// Instance version(6.8.13, 7.10.1).
	LogstashVersion string `pulumi:"logstashVersion"`
	// Node num(range 2-50).
	NodeNum *int `pulumi:"nodeNum"`
	// Node type. Valid values:
	// - LOGSTASH.S1.SMALL2: 1 core 2G;
	// - LOGSTASH.S1.MEDIUM4:2 core 4G;
	// - LOGSTASH.S1.MEDIUM8:2 core 8G;
	// - LOGSTASH.S1.LARGE16:4 core 16G;
	// - LOGSTASH.S1.2XLARGE32:8 core 32G;
	// - LOGSTASH.S1.4XLARGE32:16 core 32G;
	// - LOGSTASH.S1.4XLARGE64:16 core 64G.
	NodeType *string `pulumi:"nodeType"`
	// operation time by tencent clound.
	OperationDuration *LogstashOperationDuration `pulumi:"operationDuration"`
	// Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
	RenewFlag *string `pulumi:"renewFlag"`
	// Subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// charge time unit(set when ChargeType is PREPAID, default value: ms).
	TimeUnit *string `pulumi:"timeUnit"`
	// Voucher list(only can use one voucher by now).
	VoucherIds []string `pulumi:"voucherIds"`
	// VPC id.
	VpcId string `pulumi:"vpcId"`
	// Available zone.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Logstash resource.
type LogstashArgs struct {
	// whether to use voucher auto, 1 when use, else 0.
	AutoVoucher pulumi.IntPtrInput
	// Period when charged by months or years(unit depends on TimeUnit).
	ChargePeriod pulumi.IntPtrInput
	// Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
	ChargeType pulumi.StringPtrInput
	// node disk size (unit GB).
	DiskSize pulumi.IntPtrInput
	// Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
	DiskType pulumi.StringPtrInput
	// Instance name (compose of 1-50 letter, number, - or _).
	InstanceName pulumi.StringInput
	// License type. oss: open source version; xpack:xpack version; default: xpack.
	LicenseType pulumi.StringPtrInput
	// Instance version(6.8.13, 7.10.1).
	LogstashVersion pulumi.StringInput
	// Node num(range 2-50).
	NodeNum pulumi.IntPtrInput
	// Node type. Valid values:
	// - LOGSTASH.S1.SMALL2: 1 core 2G;
	// - LOGSTASH.S1.MEDIUM4:2 core 4G;
	// - LOGSTASH.S1.MEDIUM8:2 core 8G;
	// - LOGSTASH.S1.LARGE16:4 core 16G;
	// - LOGSTASH.S1.2XLARGE32:8 core 32G;
	// - LOGSTASH.S1.4XLARGE32:16 core 32G;
	// - LOGSTASH.S1.4XLARGE64:16 core 64G.
	NodeType pulumi.StringPtrInput
	// operation time by tencent clound.
	OperationDuration LogstashOperationDurationPtrInput
	// Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
	RenewFlag pulumi.StringPtrInput
	// Subnet id.
	SubnetId pulumi.StringInput
	// Tag description list.
	Tags pulumi.MapInput
	// charge time unit(set when ChargeType is PREPAID, default value: ms).
	TimeUnit pulumi.StringPtrInput
	// Voucher list(only can use one voucher by now).
	VoucherIds pulumi.StringArrayInput
	// VPC id.
	VpcId pulumi.StringInput
	// Available zone.
	Zone pulumi.StringInput
}

func (LogstashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashArgs)(nil)).Elem()
}

type LogstashInput interface {
	pulumi.Input

	ToLogstashOutput() LogstashOutput
	ToLogstashOutputWithContext(ctx context.Context) LogstashOutput
}

func (*Logstash) ElementType() reflect.Type {
	return reflect.TypeOf((**Logstash)(nil)).Elem()
}

func (i *Logstash) ToLogstashOutput() LogstashOutput {
	return i.ToLogstashOutputWithContext(context.Background())
}

func (i *Logstash) ToLogstashOutputWithContext(ctx context.Context) LogstashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashOutput)
}

// LogstashArrayInput is an input type that accepts LogstashArray and LogstashArrayOutput values.
// You can construct a concrete instance of `LogstashArrayInput` via:
//
//	LogstashArray{ LogstashArgs{...} }
type LogstashArrayInput interface {
	pulumi.Input

	ToLogstashArrayOutput() LogstashArrayOutput
	ToLogstashArrayOutputWithContext(context.Context) LogstashArrayOutput
}

type LogstashArray []LogstashInput

func (LogstashArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logstash)(nil)).Elem()
}

func (i LogstashArray) ToLogstashArrayOutput() LogstashArrayOutput {
	return i.ToLogstashArrayOutputWithContext(context.Background())
}

func (i LogstashArray) ToLogstashArrayOutputWithContext(ctx context.Context) LogstashArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashArrayOutput)
}

// LogstashMapInput is an input type that accepts LogstashMap and LogstashMapOutput values.
// You can construct a concrete instance of `LogstashMapInput` via:
//
//	LogstashMap{ "key": LogstashArgs{...} }
type LogstashMapInput interface {
	pulumi.Input

	ToLogstashMapOutput() LogstashMapOutput
	ToLogstashMapOutputWithContext(context.Context) LogstashMapOutput
}

type LogstashMap map[string]LogstashInput

func (LogstashMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logstash)(nil)).Elem()
}

func (i LogstashMap) ToLogstashMapOutput() LogstashMapOutput {
	return i.ToLogstashMapOutputWithContext(context.Background())
}

func (i LogstashMap) ToLogstashMapOutputWithContext(ctx context.Context) LogstashMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashMapOutput)
}

type LogstashOutput struct{ *pulumi.OutputState }

func (LogstashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logstash)(nil)).Elem()
}

func (o LogstashOutput) ToLogstashOutput() LogstashOutput {
	return o
}

func (o LogstashOutput) ToLogstashOutputWithContext(ctx context.Context) LogstashOutput {
	return o
}

// whether to use voucher auto, 1 when use, else 0.
func (o LogstashOutput) AutoVoucher() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.IntPtrOutput { return v.AutoVoucher }).(pulumi.IntPtrOutput)
}

// Period when charged by months or years(unit depends on TimeUnit).
func (o LogstashOutput) ChargePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.IntPtrOutput { return v.ChargePeriod }).(pulumi.IntPtrOutput)
}

// Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
func (o LogstashOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringPtrOutput { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// node disk size (unit GB).
func (o LogstashOutput) DiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.IntPtrOutput { return v.DiskSize }).(pulumi.IntPtrOutput)
}

// Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
func (o LogstashOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringPtrOutput { return v.DiskType }).(pulumi.StringPtrOutput)
}

// Instance name (compose of 1-50 letter, number, - or _).
func (o LogstashOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// License type. oss: open source version; xpack:xpack version; default: xpack.
func (o LogstashOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringPtrOutput { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// Instance version(6.8.13, 7.10.1).
func (o LogstashOutput) LogstashVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringOutput { return v.LogstashVersion }).(pulumi.StringOutput)
}

// Node num(range 2-50).
func (o LogstashOutput) NodeNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.IntPtrOutput { return v.NodeNum }).(pulumi.IntPtrOutput)
}

// Node type. Valid values:
// - LOGSTASH.S1.SMALL2: 1 core 2G;
// - LOGSTASH.S1.MEDIUM4:2 core 4G;
// - LOGSTASH.S1.MEDIUM8:2 core 8G;
// - LOGSTASH.S1.LARGE16:4 core 16G;
// - LOGSTASH.S1.2XLARGE32:8 core 32G;
// - LOGSTASH.S1.4XLARGE32:16 core 32G;
// - LOGSTASH.S1.4XLARGE64:16 core 64G.
func (o LogstashOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringPtrOutput { return v.NodeType }).(pulumi.StringPtrOutput)
}

// operation time by tencent clound.
func (o LogstashOutput) OperationDuration() LogstashOperationDurationPtrOutput {
	return o.ApplyT(func(v *Logstash) LogstashOperationDurationPtrOutput { return v.OperationDuration }).(LogstashOperationDurationPtrOutput)
}

// Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
func (o LogstashOutput) RenewFlag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringPtrOutput { return v.RenewFlag }).(pulumi.StringPtrOutput)
}

// Subnet id.
func (o LogstashOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Tag description list.
func (o LogstashOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Logstash) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// charge time unit(set when ChargeType is PREPAID, default value: ms).
func (o LogstashOutput) TimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringPtrOutput { return v.TimeUnit }).(pulumi.StringPtrOutput)
}

// Voucher list(only can use one voucher by now).
func (o LogstashOutput) VoucherIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringArrayOutput { return v.VoucherIds }).(pulumi.StringArrayOutput)
}

// VPC id.
func (o LogstashOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Available zone.
func (o LogstashOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type LogstashArrayOutput struct{ *pulumi.OutputState }

func (LogstashArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logstash)(nil)).Elem()
}

func (o LogstashArrayOutput) ToLogstashArrayOutput() LogstashArrayOutput {
	return o
}

func (o LogstashArrayOutput) ToLogstashArrayOutputWithContext(ctx context.Context) LogstashArrayOutput {
	return o
}

func (o LogstashArrayOutput) Index(i pulumi.IntInput) LogstashOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logstash {
		return vs[0].([]*Logstash)[vs[1].(int)]
	}).(LogstashOutput)
}

type LogstashMapOutput struct{ *pulumi.OutputState }

func (LogstashMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logstash)(nil)).Elem()
}

func (o LogstashMapOutput) ToLogstashMapOutput() LogstashMapOutput {
	return o
}

func (o LogstashMapOutput) ToLogstashMapOutputWithContext(ctx context.Context) LogstashMapOutput {
	return o
}

func (o LogstashMapOutput) MapIndex(k pulumi.StringInput) LogstashOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logstash {
		return vs[0].(map[string]*Logstash)[vs[1].(string)]
	}).(LogstashOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashInput)(nil)).Elem(), &Logstash{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashArrayInput)(nil)).Elem(), LogstashArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashMapInput)(nil)).Elem(), LogstashMap{})
	pulumi.RegisterOutputType(LogstashOutput{})
	pulumi.RegisterOutputType(LogstashArrayOutput{})
	pulumi.RegisterOutputType(LogstashMapOutput{})
}
