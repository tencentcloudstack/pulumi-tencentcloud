// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of elasticsearch diagnose
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Elasticsearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Elasticsearch"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Elasticsearch.GetDiagnose(ctx, &elasticsearch.GetDiagnoseArgs{
//				Date:       pulumi.StringRef("20231030"),
//				InstanceId: "es-xxxxxx",
//				Limit:      pulumi.IntRef(1),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDiagnose(ctx *pulumi.Context, args *LookupDiagnoseArgs, opts ...pulumi.InvokeOption) (*LookupDiagnoseResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupDiagnoseResult
	err := ctx.Invoke("tencentcloud:Elasticsearch/getDiagnose:getDiagnose", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDiagnose.
type LookupDiagnoseArgs struct {
	// Report date, format 20210301.
	Date *string `pulumi:"date"`
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
	// Number of copies returned in the report. Default value 1.
	Limit *int `pulumi:"limit"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getDiagnose.
type LookupDiagnoseResult struct {
	Date *string `pulumi:"date"`
	// List of diagnostic reports.
	DiagnoseResults []GetDiagnoseDiagnoseResult `pulumi:"diagnoseResults"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Instance id.
	InstanceId       string  `pulumi:"instanceId"`
	Limit            *int    `pulumi:"limit"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func LookupDiagnoseOutput(ctx *pulumi.Context, args LookupDiagnoseOutputArgs, opts ...pulumi.InvokeOption) LookupDiagnoseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDiagnoseResult, error) {
			args := v.(LookupDiagnoseArgs)
			r, err := LookupDiagnose(ctx, &args, opts...)
			var s LookupDiagnoseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDiagnoseResultOutput)
}

// A collection of arguments for invoking getDiagnose.
type LookupDiagnoseOutputArgs struct {
	// Report date, format 20210301.
	Date pulumi.StringPtrInput `pulumi:"date"`
	// Instance id.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Number of copies returned in the report. Default value 1.
	Limit pulumi.IntPtrInput `pulumi:"limit"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (LookupDiagnoseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDiagnoseArgs)(nil)).Elem()
}

// A collection of values returned by getDiagnose.
type LookupDiagnoseResultOutput struct{ *pulumi.OutputState }

func (LookupDiagnoseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDiagnoseResult)(nil)).Elem()
}

func (o LookupDiagnoseResultOutput) ToLookupDiagnoseResultOutput() LookupDiagnoseResultOutput {
	return o
}

func (o LookupDiagnoseResultOutput) ToLookupDiagnoseResultOutputWithContext(ctx context.Context) LookupDiagnoseResultOutput {
	return o
}

func (o LookupDiagnoseResultOutput) Date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiagnoseResult) *string { return v.Date }).(pulumi.StringPtrOutput)
}

// List of diagnostic reports.
func (o LookupDiagnoseResultOutput) DiagnoseResults() GetDiagnoseDiagnoseResultArrayOutput {
	return o.ApplyT(func(v LookupDiagnoseResult) []GetDiagnoseDiagnoseResult { return v.DiagnoseResults }).(GetDiagnoseDiagnoseResultArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDiagnoseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiagnoseResult) string { return v.Id }).(pulumi.StringOutput)
}

// Instance id.
func (o LookupDiagnoseResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiagnoseResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupDiagnoseResultOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDiagnoseResult) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o LookupDiagnoseResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDiagnoseResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDiagnoseResultOutput{})
}
