// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to restart elasticsearch nodes
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Elasticsearch"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Elasticsearch.NewRestartNodesOperation(ctx, "restartNodesOperation", &Elasticsearch.RestartNodesOperationArgs{
//				InstanceId: pulumi.String("es-xxxxxx"),
//				NodeNames: pulumi.StringArray{
//					pulumi.String("1648026612002990732"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RestartNodesOperation struct {
	pulumi.CustomResourceState

	// Whether to force a restart.
	ForceRestart pulumi.BoolPtrOutput `pulumi:"forceRestart"`
	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Node status, used in blue-green mode; off-line node blue-green is risky.
	IsOffline pulumi.BoolPtrOutput `pulumi:"isOffline"`
	// List of node names.
	NodeNames pulumi.StringArrayOutput `pulumi:"nodeNames"`
	// Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
	RestartMode pulumi.StringPtrOutput `pulumi:"restartMode"`
}

// NewRestartNodesOperation registers a new resource with the given unique name, arguments, and options.
func NewRestartNodesOperation(ctx *pulumi.Context,
	name string, args *RestartNodesOperationArgs, opts ...pulumi.ResourceOption) (*RestartNodesOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.NodeNames == nil {
		return nil, errors.New("invalid value for required argument 'NodeNames'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RestartNodesOperation
	err := ctx.RegisterResource("tencentcloud:Elasticsearch/restartNodesOperation:RestartNodesOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestartNodesOperation gets an existing RestartNodesOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestartNodesOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestartNodesOperationState, opts ...pulumi.ResourceOption) (*RestartNodesOperation, error) {
	var resource RestartNodesOperation
	err := ctx.ReadResource("tencentcloud:Elasticsearch/restartNodesOperation:RestartNodesOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestartNodesOperation resources.
type restartNodesOperationState struct {
	// Whether to force a restart.
	ForceRestart *bool `pulumi:"forceRestart"`
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Node status, used in blue-green mode; off-line node blue-green is risky.
	IsOffline *bool `pulumi:"isOffline"`
	// List of node names.
	NodeNames []string `pulumi:"nodeNames"`
	// Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
	RestartMode *string `pulumi:"restartMode"`
}

type RestartNodesOperationState struct {
	// Whether to force a restart.
	ForceRestart pulumi.BoolPtrInput
	// Instance id.
	InstanceId pulumi.StringPtrInput
	// Node status, used in blue-green mode; off-line node blue-green is risky.
	IsOffline pulumi.BoolPtrInput
	// List of node names.
	NodeNames pulumi.StringArrayInput
	// Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
	RestartMode pulumi.StringPtrInput
}

func (RestartNodesOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*restartNodesOperationState)(nil)).Elem()
}

type restartNodesOperationArgs struct {
	// Whether to force a restart.
	ForceRestart *bool `pulumi:"forceRestart"`
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
	// Node status, used in blue-green mode; off-line node blue-green is risky.
	IsOffline *bool `pulumi:"isOffline"`
	// List of node names.
	NodeNames []string `pulumi:"nodeNames"`
	// Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
	RestartMode *string `pulumi:"restartMode"`
}

// The set of arguments for constructing a RestartNodesOperation resource.
type RestartNodesOperationArgs struct {
	// Whether to force a restart.
	ForceRestart pulumi.BoolPtrInput
	// Instance id.
	InstanceId pulumi.StringInput
	// Node status, used in blue-green mode; off-line node blue-green is risky.
	IsOffline pulumi.BoolPtrInput
	// List of node names.
	NodeNames pulumi.StringArrayInput
	// Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
	RestartMode pulumi.StringPtrInput
}

func (RestartNodesOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restartNodesOperationArgs)(nil)).Elem()
}

type RestartNodesOperationInput interface {
	pulumi.Input

	ToRestartNodesOperationOutput() RestartNodesOperationOutput
	ToRestartNodesOperationOutputWithContext(ctx context.Context) RestartNodesOperationOutput
}

func (*RestartNodesOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartNodesOperation)(nil)).Elem()
}

func (i *RestartNodesOperation) ToRestartNodesOperationOutput() RestartNodesOperationOutput {
	return i.ToRestartNodesOperationOutputWithContext(context.Background())
}

func (i *RestartNodesOperation) ToRestartNodesOperationOutputWithContext(ctx context.Context) RestartNodesOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartNodesOperationOutput)
}

// RestartNodesOperationArrayInput is an input type that accepts RestartNodesOperationArray and RestartNodesOperationArrayOutput values.
// You can construct a concrete instance of `RestartNodesOperationArrayInput` via:
//
//	RestartNodesOperationArray{ RestartNodesOperationArgs{...} }
type RestartNodesOperationArrayInput interface {
	pulumi.Input

	ToRestartNodesOperationArrayOutput() RestartNodesOperationArrayOutput
	ToRestartNodesOperationArrayOutputWithContext(context.Context) RestartNodesOperationArrayOutput
}

type RestartNodesOperationArray []RestartNodesOperationInput

func (RestartNodesOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartNodesOperation)(nil)).Elem()
}

func (i RestartNodesOperationArray) ToRestartNodesOperationArrayOutput() RestartNodesOperationArrayOutput {
	return i.ToRestartNodesOperationArrayOutputWithContext(context.Background())
}

func (i RestartNodesOperationArray) ToRestartNodesOperationArrayOutputWithContext(ctx context.Context) RestartNodesOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartNodesOperationArrayOutput)
}

// RestartNodesOperationMapInput is an input type that accepts RestartNodesOperationMap and RestartNodesOperationMapOutput values.
// You can construct a concrete instance of `RestartNodesOperationMapInput` via:
//
//	RestartNodesOperationMap{ "key": RestartNodesOperationArgs{...} }
type RestartNodesOperationMapInput interface {
	pulumi.Input

	ToRestartNodesOperationMapOutput() RestartNodesOperationMapOutput
	ToRestartNodesOperationMapOutputWithContext(context.Context) RestartNodesOperationMapOutput
}

type RestartNodesOperationMap map[string]RestartNodesOperationInput

func (RestartNodesOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartNodesOperation)(nil)).Elem()
}

func (i RestartNodesOperationMap) ToRestartNodesOperationMapOutput() RestartNodesOperationMapOutput {
	return i.ToRestartNodesOperationMapOutputWithContext(context.Background())
}

func (i RestartNodesOperationMap) ToRestartNodesOperationMapOutputWithContext(ctx context.Context) RestartNodesOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartNodesOperationMapOutput)
}

type RestartNodesOperationOutput struct{ *pulumi.OutputState }

func (RestartNodesOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartNodesOperation)(nil)).Elem()
}

func (o RestartNodesOperationOutput) ToRestartNodesOperationOutput() RestartNodesOperationOutput {
	return o
}

func (o RestartNodesOperationOutput) ToRestartNodesOperationOutputWithContext(ctx context.Context) RestartNodesOperationOutput {
	return o
}

// Whether to force a restart.
func (o RestartNodesOperationOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RestartNodesOperation) pulumi.BoolPtrOutput { return v.ForceRestart }).(pulumi.BoolPtrOutput)
}

// Instance id.
func (o RestartNodesOperationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RestartNodesOperation) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Node status, used in blue-green mode; off-line node blue-green is risky.
func (o RestartNodesOperationOutput) IsOffline() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RestartNodesOperation) pulumi.BoolPtrOutput { return v.IsOffline }).(pulumi.BoolPtrOutput)
}

// List of node names.
func (o RestartNodesOperationOutput) NodeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RestartNodesOperation) pulumi.StringArrayOutput { return v.NodeNames }).(pulumi.StringArrayOutput)
}

// Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
func (o RestartNodesOperationOutput) RestartMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestartNodesOperation) pulumi.StringPtrOutput { return v.RestartMode }).(pulumi.StringPtrOutput)
}

type RestartNodesOperationArrayOutput struct{ *pulumi.OutputState }

func (RestartNodesOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartNodesOperation)(nil)).Elem()
}

func (o RestartNodesOperationArrayOutput) ToRestartNodesOperationArrayOutput() RestartNodesOperationArrayOutput {
	return o
}

func (o RestartNodesOperationArrayOutput) ToRestartNodesOperationArrayOutputWithContext(ctx context.Context) RestartNodesOperationArrayOutput {
	return o
}

func (o RestartNodesOperationArrayOutput) Index(i pulumi.IntInput) RestartNodesOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RestartNodesOperation {
		return vs[0].([]*RestartNodesOperation)[vs[1].(int)]
	}).(RestartNodesOperationOutput)
}

type RestartNodesOperationMapOutput struct{ *pulumi.OutputState }

func (RestartNodesOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartNodesOperation)(nil)).Elem()
}

func (o RestartNodesOperationMapOutput) ToRestartNodesOperationMapOutput() RestartNodesOperationMapOutput {
	return o
}

func (o RestartNodesOperationMapOutput) ToRestartNodesOperationMapOutputWithContext(ctx context.Context) RestartNodesOperationMapOutput {
	return o
}

func (o RestartNodesOperationMapOutput) MapIndex(k pulumi.StringInput) RestartNodesOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RestartNodesOperation {
		return vs[0].(map[string]*RestartNodesOperation)[vs[1].(string)]
	}).(RestartNodesOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestartNodesOperationInput)(nil)).Elem(), &RestartNodesOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartNodesOperationArrayInput)(nil)).Elem(), RestartNodesOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartNodesOperationMapInput)(nil)).Elem(), RestartNodesOperationMap{})
	pulumi.RegisterOutputType(RestartNodesOperationOutput{})
	pulumi.RegisterOutputType(RestartNodesOperationArrayOutput{})
	pulumi.RegisterOutputType(RestartNodesOperationMapOutput{})
}
