// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to restart a elasticsearch instance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Elasticsearch"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Elasticsearch.NewRestartInstanceOperation(ctx, "restartInstanceOperation", &Elasticsearch.RestartInstanceOperationArgs{
//				InstanceId: pulumi.String("es-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RestartInstanceOperation struct {
	pulumi.CustomResourceState

	// Force restart. Valid values:
	// - true: Forced restart;
	// - false: No forced restart;
	//   default false.
	ForceRestart pulumi.BoolPtrOutput `pulumi:"forceRestart"`
	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Restart mode: 0 roll restart; 1 full restart.
	RestartMode pulumi.IntPtrOutput `pulumi:"restartMode"`
}

// NewRestartInstanceOperation registers a new resource with the given unique name, arguments, and options.
func NewRestartInstanceOperation(ctx *pulumi.Context,
	name string, args *RestartInstanceOperationArgs, opts ...pulumi.ResourceOption) (*RestartInstanceOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RestartInstanceOperation
	err := ctx.RegisterResource("tencentcloud:Elasticsearch/restartInstanceOperation:RestartInstanceOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestartInstanceOperation gets an existing RestartInstanceOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestartInstanceOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestartInstanceOperationState, opts ...pulumi.ResourceOption) (*RestartInstanceOperation, error) {
	var resource RestartInstanceOperation
	err := ctx.ReadResource("tencentcloud:Elasticsearch/restartInstanceOperation:RestartInstanceOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestartInstanceOperation resources.
type restartInstanceOperationState struct {
	// Force restart. Valid values:
	// - true: Forced restart;
	// - false: No forced restart;
	//   default false.
	ForceRestart *bool `pulumi:"forceRestart"`
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Restart mode: 0 roll restart; 1 full restart.
	RestartMode *int `pulumi:"restartMode"`
}

type RestartInstanceOperationState struct {
	// Force restart. Valid values:
	// - true: Forced restart;
	// - false: No forced restart;
	//   default false.
	ForceRestart pulumi.BoolPtrInput
	// Instance id.
	InstanceId pulumi.StringPtrInput
	// Restart mode: 0 roll restart; 1 full restart.
	RestartMode pulumi.IntPtrInput
}

func (RestartInstanceOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*restartInstanceOperationState)(nil)).Elem()
}

type restartInstanceOperationArgs struct {
	// Force restart. Valid values:
	// - true: Forced restart;
	// - false: No forced restart;
	//   default false.
	ForceRestart *bool `pulumi:"forceRestart"`
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
	// Restart mode: 0 roll restart; 1 full restart.
	RestartMode *int `pulumi:"restartMode"`
}

// The set of arguments for constructing a RestartInstanceOperation resource.
type RestartInstanceOperationArgs struct {
	// Force restart. Valid values:
	// - true: Forced restart;
	// - false: No forced restart;
	//   default false.
	ForceRestart pulumi.BoolPtrInput
	// Instance id.
	InstanceId pulumi.StringInput
	// Restart mode: 0 roll restart; 1 full restart.
	RestartMode pulumi.IntPtrInput
}

func (RestartInstanceOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restartInstanceOperationArgs)(nil)).Elem()
}

type RestartInstanceOperationInput interface {
	pulumi.Input

	ToRestartInstanceOperationOutput() RestartInstanceOperationOutput
	ToRestartInstanceOperationOutputWithContext(ctx context.Context) RestartInstanceOperationOutput
}

func (*RestartInstanceOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartInstanceOperation)(nil)).Elem()
}

func (i *RestartInstanceOperation) ToRestartInstanceOperationOutput() RestartInstanceOperationOutput {
	return i.ToRestartInstanceOperationOutputWithContext(context.Background())
}

func (i *RestartInstanceOperation) ToRestartInstanceOperationOutputWithContext(ctx context.Context) RestartInstanceOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartInstanceOperationOutput)
}

// RestartInstanceOperationArrayInput is an input type that accepts RestartInstanceOperationArray and RestartInstanceOperationArrayOutput values.
// You can construct a concrete instance of `RestartInstanceOperationArrayInput` via:
//
//	RestartInstanceOperationArray{ RestartInstanceOperationArgs{...} }
type RestartInstanceOperationArrayInput interface {
	pulumi.Input

	ToRestartInstanceOperationArrayOutput() RestartInstanceOperationArrayOutput
	ToRestartInstanceOperationArrayOutputWithContext(context.Context) RestartInstanceOperationArrayOutput
}

type RestartInstanceOperationArray []RestartInstanceOperationInput

func (RestartInstanceOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartInstanceOperation)(nil)).Elem()
}

func (i RestartInstanceOperationArray) ToRestartInstanceOperationArrayOutput() RestartInstanceOperationArrayOutput {
	return i.ToRestartInstanceOperationArrayOutputWithContext(context.Background())
}

func (i RestartInstanceOperationArray) ToRestartInstanceOperationArrayOutputWithContext(ctx context.Context) RestartInstanceOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartInstanceOperationArrayOutput)
}

// RestartInstanceOperationMapInput is an input type that accepts RestartInstanceOperationMap and RestartInstanceOperationMapOutput values.
// You can construct a concrete instance of `RestartInstanceOperationMapInput` via:
//
//	RestartInstanceOperationMap{ "key": RestartInstanceOperationArgs{...} }
type RestartInstanceOperationMapInput interface {
	pulumi.Input

	ToRestartInstanceOperationMapOutput() RestartInstanceOperationMapOutput
	ToRestartInstanceOperationMapOutputWithContext(context.Context) RestartInstanceOperationMapOutput
}

type RestartInstanceOperationMap map[string]RestartInstanceOperationInput

func (RestartInstanceOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartInstanceOperation)(nil)).Elem()
}

func (i RestartInstanceOperationMap) ToRestartInstanceOperationMapOutput() RestartInstanceOperationMapOutput {
	return i.ToRestartInstanceOperationMapOutputWithContext(context.Background())
}

func (i RestartInstanceOperationMap) ToRestartInstanceOperationMapOutputWithContext(ctx context.Context) RestartInstanceOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartInstanceOperationMapOutput)
}

type RestartInstanceOperationOutput struct{ *pulumi.OutputState }

func (RestartInstanceOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartInstanceOperation)(nil)).Elem()
}

func (o RestartInstanceOperationOutput) ToRestartInstanceOperationOutput() RestartInstanceOperationOutput {
	return o
}

func (o RestartInstanceOperationOutput) ToRestartInstanceOperationOutputWithContext(ctx context.Context) RestartInstanceOperationOutput {
	return o
}

// Force restart. Valid values:
//   - true: Forced restart;
//   - false: No forced restart;
//     default false.
func (o RestartInstanceOperationOutput) ForceRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RestartInstanceOperation) pulumi.BoolPtrOutput { return v.ForceRestart }).(pulumi.BoolPtrOutput)
}

// Instance id.
func (o RestartInstanceOperationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RestartInstanceOperation) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Restart mode: 0 roll restart; 1 full restart.
func (o RestartInstanceOperationOutput) RestartMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RestartInstanceOperation) pulumi.IntPtrOutput { return v.RestartMode }).(pulumi.IntPtrOutput)
}

type RestartInstanceOperationArrayOutput struct{ *pulumi.OutputState }

func (RestartInstanceOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartInstanceOperation)(nil)).Elem()
}

func (o RestartInstanceOperationArrayOutput) ToRestartInstanceOperationArrayOutput() RestartInstanceOperationArrayOutput {
	return o
}

func (o RestartInstanceOperationArrayOutput) ToRestartInstanceOperationArrayOutputWithContext(ctx context.Context) RestartInstanceOperationArrayOutput {
	return o
}

func (o RestartInstanceOperationArrayOutput) Index(i pulumi.IntInput) RestartInstanceOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RestartInstanceOperation {
		return vs[0].([]*RestartInstanceOperation)[vs[1].(int)]
	}).(RestartInstanceOperationOutput)
}

type RestartInstanceOperationMapOutput struct{ *pulumi.OutputState }

func (RestartInstanceOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartInstanceOperation)(nil)).Elem()
}

func (o RestartInstanceOperationMapOutput) ToRestartInstanceOperationMapOutput() RestartInstanceOperationMapOutput {
	return o
}

func (o RestartInstanceOperationMapOutput) ToRestartInstanceOperationMapOutputWithContext(ctx context.Context) RestartInstanceOperationMapOutput {
	return o
}

func (o RestartInstanceOperationMapOutput) MapIndex(k pulumi.StringInput) RestartInstanceOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RestartInstanceOperation {
		return vs[0].(map[string]*RestartInstanceOperation)[vs[1].(string)]
	}).(RestartInstanceOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestartInstanceOperationInput)(nil)).Elem(), &RestartInstanceOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartInstanceOperationArrayInput)(nil)).Elem(), RestartInstanceOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartInstanceOperationMapInput)(nil)).Elem(), RestartInstanceOperationMap{})
	pulumi.RegisterOutputType(RestartInstanceOperationOutput{})
	pulumi.RegisterOutputType(RestartInstanceOperationArrayOutput{})
	pulumi.RegisterOutputType(RestartInstanceOperationMapOutput{})
}
