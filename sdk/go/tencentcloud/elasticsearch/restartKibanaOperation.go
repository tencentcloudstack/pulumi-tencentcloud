// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to restart a elasticsearch kibana
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Elasticsearch"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Elasticsearch.NewRestartKibanaOperation(ctx, "restartKibanaOperation", &Elasticsearch.RestartKibanaOperationArgs{
//				InstanceId: pulumi.String("es-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RestartKibanaOperation struct {
	pulumi.CustomResourceState

	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewRestartKibanaOperation registers a new resource with the given unique name, arguments, and options.
func NewRestartKibanaOperation(ctx *pulumi.Context,
	name string, args *RestartKibanaOperationArgs, opts ...pulumi.ResourceOption) (*RestartKibanaOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RestartKibanaOperation
	err := ctx.RegisterResource("tencentcloud:Elasticsearch/restartKibanaOperation:RestartKibanaOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestartKibanaOperation gets an existing RestartKibanaOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestartKibanaOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestartKibanaOperationState, opts ...pulumi.ResourceOption) (*RestartKibanaOperation, error) {
	var resource RestartKibanaOperation
	err := ctx.ReadResource("tencentcloud:Elasticsearch/restartKibanaOperation:RestartKibanaOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestartKibanaOperation resources.
type restartKibanaOperationState struct {
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
}

type RestartKibanaOperationState struct {
	// Instance id.
	InstanceId pulumi.StringPtrInput
}

func (RestartKibanaOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*restartKibanaOperationState)(nil)).Elem()
}

type restartKibanaOperationArgs struct {
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a RestartKibanaOperation resource.
type RestartKibanaOperationArgs struct {
	// Instance id.
	InstanceId pulumi.StringInput
}

func (RestartKibanaOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restartKibanaOperationArgs)(nil)).Elem()
}

type RestartKibanaOperationInput interface {
	pulumi.Input

	ToRestartKibanaOperationOutput() RestartKibanaOperationOutput
	ToRestartKibanaOperationOutputWithContext(ctx context.Context) RestartKibanaOperationOutput
}

func (*RestartKibanaOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartKibanaOperation)(nil)).Elem()
}

func (i *RestartKibanaOperation) ToRestartKibanaOperationOutput() RestartKibanaOperationOutput {
	return i.ToRestartKibanaOperationOutputWithContext(context.Background())
}

func (i *RestartKibanaOperation) ToRestartKibanaOperationOutputWithContext(ctx context.Context) RestartKibanaOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartKibanaOperationOutput)
}

// RestartKibanaOperationArrayInput is an input type that accepts RestartKibanaOperationArray and RestartKibanaOperationArrayOutput values.
// You can construct a concrete instance of `RestartKibanaOperationArrayInput` via:
//
//	RestartKibanaOperationArray{ RestartKibanaOperationArgs{...} }
type RestartKibanaOperationArrayInput interface {
	pulumi.Input

	ToRestartKibanaOperationArrayOutput() RestartKibanaOperationArrayOutput
	ToRestartKibanaOperationArrayOutputWithContext(context.Context) RestartKibanaOperationArrayOutput
}

type RestartKibanaOperationArray []RestartKibanaOperationInput

func (RestartKibanaOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartKibanaOperation)(nil)).Elem()
}

func (i RestartKibanaOperationArray) ToRestartKibanaOperationArrayOutput() RestartKibanaOperationArrayOutput {
	return i.ToRestartKibanaOperationArrayOutputWithContext(context.Background())
}

func (i RestartKibanaOperationArray) ToRestartKibanaOperationArrayOutputWithContext(ctx context.Context) RestartKibanaOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartKibanaOperationArrayOutput)
}

// RestartKibanaOperationMapInput is an input type that accepts RestartKibanaOperationMap and RestartKibanaOperationMapOutput values.
// You can construct a concrete instance of `RestartKibanaOperationMapInput` via:
//
//	RestartKibanaOperationMap{ "key": RestartKibanaOperationArgs{...} }
type RestartKibanaOperationMapInput interface {
	pulumi.Input

	ToRestartKibanaOperationMapOutput() RestartKibanaOperationMapOutput
	ToRestartKibanaOperationMapOutputWithContext(context.Context) RestartKibanaOperationMapOutput
}

type RestartKibanaOperationMap map[string]RestartKibanaOperationInput

func (RestartKibanaOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartKibanaOperation)(nil)).Elem()
}

func (i RestartKibanaOperationMap) ToRestartKibanaOperationMapOutput() RestartKibanaOperationMapOutput {
	return i.ToRestartKibanaOperationMapOutputWithContext(context.Background())
}

func (i RestartKibanaOperationMap) ToRestartKibanaOperationMapOutputWithContext(ctx context.Context) RestartKibanaOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartKibanaOperationMapOutput)
}

type RestartKibanaOperationOutput struct{ *pulumi.OutputState }

func (RestartKibanaOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartKibanaOperation)(nil)).Elem()
}

func (o RestartKibanaOperationOutput) ToRestartKibanaOperationOutput() RestartKibanaOperationOutput {
	return o
}

func (o RestartKibanaOperationOutput) ToRestartKibanaOperationOutputWithContext(ctx context.Context) RestartKibanaOperationOutput {
	return o
}

// Instance id.
func (o RestartKibanaOperationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RestartKibanaOperation) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type RestartKibanaOperationArrayOutput struct{ *pulumi.OutputState }

func (RestartKibanaOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartKibanaOperation)(nil)).Elem()
}

func (o RestartKibanaOperationArrayOutput) ToRestartKibanaOperationArrayOutput() RestartKibanaOperationArrayOutput {
	return o
}

func (o RestartKibanaOperationArrayOutput) ToRestartKibanaOperationArrayOutputWithContext(ctx context.Context) RestartKibanaOperationArrayOutput {
	return o
}

func (o RestartKibanaOperationArrayOutput) Index(i pulumi.IntInput) RestartKibanaOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RestartKibanaOperation {
		return vs[0].([]*RestartKibanaOperation)[vs[1].(int)]
	}).(RestartKibanaOperationOutput)
}

type RestartKibanaOperationMapOutput struct{ *pulumi.OutputState }

func (RestartKibanaOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartKibanaOperation)(nil)).Elem()
}

func (o RestartKibanaOperationMapOutput) ToRestartKibanaOperationMapOutput() RestartKibanaOperationMapOutput {
	return o
}

func (o RestartKibanaOperationMapOutput) ToRestartKibanaOperationMapOutputWithContext(ctx context.Context) RestartKibanaOperationMapOutput {
	return o
}

func (o RestartKibanaOperationMapOutput) MapIndex(k pulumi.StringInput) RestartKibanaOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RestartKibanaOperation {
		return vs[0].(map[string]*RestartKibanaOperation)[vs[1].(string)]
	}).(RestartKibanaOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestartKibanaOperationInput)(nil)).Elem(), &RestartKibanaOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartKibanaOperationArrayInput)(nil)).Elem(), RestartKibanaOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartKibanaOperationMapInput)(nil)).Elem(), RestartKibanaOperationMap{})
	pulumi.RegisterOutputType(RestartKibanaOperationOutput{})
	pulumi.RegisterOutputType(RestartKibanaOperationArrayOutput{})
	pulumi.RegisterOutputType(RestartKibanaOperationMapOutput{})
}
