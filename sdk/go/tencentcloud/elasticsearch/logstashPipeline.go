// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a elasticsearch logstash pipeline
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Elasticsearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Elasticsearch"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Elasticsearch.NewLogstashPipeline(ctx, "logstashPipeline", &Elasticsearch.LogstashPipelineArgs{
//				InstanceId: pulumi.String("ls-xxxxxx"),
//				OpType:     pulumi.Int(2),
//				Pipeline: &elasticsearch.LogstashPipelinePipelineArgs{
//					BatchDelay:            pulumi.Int(50),
//					BatchSize:             pulumi.Int(125),
//					Config:                pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v", "input{\n", "\n", "}\n", "filter{\n", "\n", "}\n", "output{\n", "\n", "}\n", "\n")),
//					PipelineDesc:          pulumi.String(""),
//					PipelineId:            pulumi.String("logstash-pipeline-test"),
//					QueueCheckPointWrites: pulumi.Int(0),
//					QueueMaxBytes:         pulumi.String(""),
//					QueueType:             pulumi.String("memory"),
//					Workers:               pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// elasticsearch logstash_pipeline can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Elasticsearch/logstashPipeline:LogstashPipeline logstash_pipeline ${instance_id}#${pipeline_id}
//
// ```
type LogstashPipeline struct {
	pulumi.CustomResourceState

	// Logstash instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Operation type. 1: save only; 2: save and deploy.
	OpType pulumi.IntOutput `pulumi:"opType"`
	// Pipeline information.
	Pipeline LogstashPipelinePipelineOutput `pulumi:"pipeline"`
}

// NewLogstashPipeline registers a new resource with the given unique name, arguments, and options.
func NewLogstashPipeline(ctx *pulumi.Context,
	name string, args *LogstashPipelineArgs, opts ...pulumi.ResourceOption) (*LogstashPipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.OpType == nil {
		return nil, errors.New("invalid value for required argument 'OpType'")
	}
	if args.Pipeline == nil {
		return nil, errors.New("invalid value for required argument 'Pipeline'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LogstashPipeline
	err := ctx.RegisterResource("tencentcloud:Elasticsearch/logstashPipeline:LogstashPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogstashPipeline gets an existing LogstashPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogstashPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogstashPipelineState, opts ...pulumi.ResourceOption) (*LogstashPipeline, error) {
	var resource LogstashPipeline
	err := ctx.ReadResource("tencentcloud:Elasticsearch/logstashPipeline:LogstashPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogstashPipeline resources.
type logstashPipelineState struct {
	// Logstash instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Operation type. 1: save only; 2: save and deploy.
	OpType *int `pulumi:"opType"`
	// Pipeline information.
	Pipeline *LogstashPipelinePipeline `pulumi:"pipeline"`
}

type LogstashPipelineState struct {
	// Logstash instance id.
	InstanceId pulumi.StringPtrInput
	// Operation type. 1: save only; 2: save and deploy.
	OpType pulumi.IntPtrInput
	// Pipeline information.
	Pipeline LogstashPipelinePipelinePtrInput
}

func (LogstashPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashPipelineState)(nil)).Elem()
}

type logstashPipelineArgs struct {
	// Logstash instance id.
	InstanceId string `pulumi:"instanceId"`
	// Operation type. 1: save only; 2: save and deploy.
	OpType int `pulumi:"opType"`
	// Pipeline information.
	Pipeline LogstashPipelinePipeline `pulumi:"pipeline"`
}

// The set of arguments for constructing a LogstashPipeline resource.
type LogstashPipelineArgs struct {
	// Logstash instance id.
	InstanceId pulumi.StringInput
	// Operation type. 1: save only; 2: save and deploy.
	OpType pulumi.IntInput
	// Pipeline information.
	Pipeline LogstashPipelinePipelineInput
}

func (LogstashPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashPipelineArgs)(nil)).Elem()
}

type LogstashPipelineInput interface {
	pulumi.Input

	ToLogstashPipelineOutput() LogstashPipelineOutput
	ToLogstashPipelineOutputWithContext(ctx context.Context) LogstashPipelineOutput
}

func (*LogstashPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**LogstashPipeline)(nil)).Elem()
}

func (i *LogstashPipeline) ToLogstashPipelineOutput() LogstashPipelineOutput {
	return i.ToLogstashPipelineOutputWithContext(context.Background())
}

func (i *LogstashPipeline) ToLogstashPipelineOutputWithContext(ctx context.Context) LogstashPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashPipelineOutput)
}

// LogstashPipelineArrayInput is an input type that accepts LogstashPipelineArray and LogstashPipelineArrayOutput values.
// You can construct a concrete instance of `LogstashPipelineArrayInput` via:
//
//	LogstashPipelineArray{ LogstashPipelineArgs{...} }
type LogstashPipelineArrayInput interface {
	pulumi.Input

	ToLogstashPipelineArrayOutput() LogstashPipelineArrayOutput
	ToLogstashPipelineArrayOutputWithContext(context.Context) LogstashPipelineArrayOutput
}

type LogstashPipelineArray []LogstashPipelineInput

func (LogstashPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogstashPipeline)(nil)).Elem()
}

func (i LogstashPipelineArray) ToLogstashPipelineArrayOutput() LogstashPipelineArrayOutput {
	return i.ToLogstashPipelineArrayOutputWithContext(context.Background())
}

func (i LogstashPipelineArray) ToLogstashPipelineArrayOutputWithContext(ctx context.Context) LogstashPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashPipelineArrayOutput)
}

// LogstashPipelineMapInput is an input type that accepts LogstashPipelineMap and LogstashPipelineMapOutput values.
// You can construct a concrete instance of `LogstashPipelineMapInput` via:
//
//	LogstashPipelineMap{ "key": LogstashPipelineArgs{...} }
type LogstashPipelineMapInput interface {
	pulumi.Input

	ToLogstashPipelineMapOutput() LogstashPipelineMapOutput
	ToLogstashPipelineMapOutputWithContext(context.Context) LogstashPipelineMapOutput
}

type LogstashPipelineMap map[string]LogstashPipelineInput

func (LogstashPipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogstashPipeline)(nil)).Elem()
}

func (i LogstashPipelineMap) ToLogstashPipelineMapOutput() LogstashPipelineMapOutput {
	return i.ToLogstashPipelineMapOutputWithContext(context.Background())
}

func (i LogstashPipelineMap) ToLogstashPipelineMapOutputWithContext(ctx context.Context) LogstashPipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashPipelineMapOutput)
}

type LogstashPipelineOutput struct{ *pulumi.OutputState }

func (LogstashPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogstashPipeline)(nil)).Elem()
}

func (o LogstashPipelineOutput) ToLogstashPipelineOutput() LogstashPipelineOutput {
	return o
}

func (o LogstashPipelineOutput) ToLogstashPipelineOutputWithContext(ctx context.Context) LogstashPipelineOutput {
	return o
}

// Logstash instance id.
func (o LogstashPipelineOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogstashPipeline) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Operation type. 1: save only; 2: save and deploy.
func (o LogstashPipelineOutput) OpType() pulumi.IntOutput {
	return o.ApplyT(func(v *LogstashPipeline) pulumi.IntOutput { return v.OpType }).(pulumi.IntOutput)
}

// Pipeline information.
func (o LogstashPipelineOutput) Pipeline() LogstashPipelinePipelineOutput {
	return o.ApplyT(func(v *LogstashPipeline) LogstashPipelinePipelineOutput { return v.Pipeline }).(LogstashPipelinePipelineOutput)
}

type LogstashPipelineArrayOutput struct{ *pulumi.OutputState }

func (LogstashPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogstashPipeline)(nil)).Elem()
}

func (o LogstashPipelineArrayOutput) ToLogstashPipelineArrayOutput() LogstashPipelineArrayOutput {
	return o
}

func (o LogstashPipelineArrayOutput) ToLogstashPipelineArrayOutputWithContext(ctx context.Context) LogstashPipelineArrayOutput {
	return o
}

func (o LogstashPipelineArrayOutput) Index(i pulumi.IntInput) LogstashPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogstashPipeline {
		return vs[0].([]*LogstashPipeline)[vs[1].(int)]
	}).(LogstashPipelineOutput)
}

type LogstashPipelineMapOutput struct{ *pulumi.OutputState }

func (LogstashPipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogstashPipeline)(nil)).Elem()
}

func (o LogstashPipelineMapOutput) ToLogstashPipelineMapOutput() LogstashPipelineMapOutput {
	return o
}

func (o LogstashPipelineMapOutput) ToLogstashPipelineMapOutputWithContext(ctx context.Context) LogstashPipelineMapOutput {
	return o
}

func (o LogstashPipelineMapOutput) MapIndex(k pulumi.StringInput) LogstashPipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogstashPipeline {
		return vs[0].(map[string]*LogstashPipeline)[vs[1].(string)]
	}).(LogstashPipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashPipelineInput)(nil)).Elem(), &LogstashPipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashPipelineArrayInput)(nil)).Elem(), LogstashPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashPipelineMapInput)(nil)).Elem(), LogstashPipelineMap{})
	pulumi.RegisterOutputType(LogstashPipelineOutput{})
	pulumi.RegisterOutputType(LogstashPipelineArrayOutput{})
	pulumi.RegisterOutputType(LogstashPipelineMapOutput{})
}
