// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticsearch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to restart a elasticsearch logstash instance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Elasticsearch"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Elasticsearch.NewRestartLogstashInstanceOperation(ctx, "restartLogstashInstanceOperation", &Elasticsearch.RestartLogstashInstanceOperationArgs{
//				InstanceId: pulumi.String("ls-xxxxxx"),
//				Type:       pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RestartLogstashInstanceOperation struct {
	pulumi.CustomResourceState

	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Restart type, 0 full restart, 1 rolling restart.
	Type pulumi.IntOutput `pulumi:"type"`
}

// NewRestartLogstashInstanceOperation registers a new resource with the given unique name, arguments, and options.
func NewRestartLogstashInstanceOperation(ctx *pulumi.Context,
	name string, args *RestartLogstashInstanceOperationArgs, opts ...pulumi.ResourceOption) (*RestartLogstashInstanceOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RestartLogstashInstanceOperation
	err := ctx.RegisterResource("tencentcloud:Elasticsearch/restartLogstashInstanceOperation:RestartLogstashInstanceOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestartLogstashInstanceOperation gets an existing RestartLogstashInstanceOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestartLogstashInstanceOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestartLogstashInstanceOperationState, opts ...pulumi.ResourceOption) (*RestartLogstashInstanceOperation, error) {
	var resource RestartLogstashInstanceOperation
	err := ctx.ReadResource("tencentcloud:Elasticsearch/restartLogstashInstanceOperation:RestartLogstashInstanceOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestartLogstashInstanceOperation resources.
type restartLogstashInstanceOperationState struct {
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Restart type, 0 full restart, 1 rolling restart.
	Type *int `pulumi:"type"`
}

type RestartLogstashInstanceOperationState struct {
	// Instance id.
	InstanceId pulumi.StringPtrInput
	// Restart type, 0 full restart, 1 rolling restart.
	Type pulumi.IntPtrInput
}

func (RestartLogstashInstanceOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*restartLogstashInstanceOperationState)(nil)).Elem()
}

type restartLogstashInstanceOperationArgs struct {
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
	// Restart type, 0 full restart, 1 rolling restart.
	Type int `pulumi:"type"`
}

// The set of arguments for constructing a RestartLogstashInstanceOperation resource.
type RestartLogstashInstanceOperationArgs struct {
	// Instance id.
	InstanceId pulumi.StringInput
	// Restart type, 0 full restart, 1 rolling restart.
	Type pulumi.IntInput
}

func (RestartLogstashInstanceOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restartLogstashInstanceOperationArgs)(nil)).Elem()
}

type RestartLogstashInstanceOperationInput interface {
	pulumi.Input

	ToRestartLogstashInstanceOperationOutput() RestartLogstashInstanceOperationOutput
	ToRestartLogstashInstanceOperationOutputWithContext(ctx context.Context) RestartLogstashInstanceOperationOutput
}

func (*RestartLogstashInstanceOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartLogstashInstanceOperation)(nil)).Elem()
}

func (i *RestartLogstashInstanceOperation) ToRestartLogstashInstanceOperationOutput() RestartLogstashInstanceOperationOutput {
	return i.ToRestartLogstashInstanceOperationOutputWithContext(context.Background())
}

func (i *RestartLogstashInstanceOperation) ToRestartLogstashInstanceOperationOutputWithContext(ctx context.Context) RestartLogstashInstanceOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartLogstashInstanceOperationOutput)
}

// RestartLogstashInstanceOperationArrayInput is an input type that accepts RestartLogstashInstanceOperationArray and RestartLogstashInstanceOperationArrayOutput values.
// You can construct a concrete instance of `RestartLogstashInstanceOperationArrayInput` via:
//
//	RestartLogstashInstanceOperationArray{ RestartLogstashInstanceOperationArgs{...} }
type RestartLogstashInstanceOperationArrayInput interface {
	pulumi.Input

	ToRestartLogstashInstanceOperationArrayOutput() RestartLogstashInstanceOperationArrayOutput
	ToRestartLogstashInstanceOperationArrayOutputWithContext(context.Context) RestartLogstashInstanceOperationArrayOutput
}

type RestartLogstashInstanceOperationArray []RestartLogstashInstanceOperationInput

func (RestartLogstashInstanceOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartLogstashInstanceOperation)(nil)).Elem()
}

func (i RestartLogstashInstanceOperationArray) ToRestartLogstashInstanceOperationArrayOutput() RestartLogstashInstanceOperationArrayOutput {
	return i.ToRestartLogstashInstanceOperationArrayOutputWithContext(context.Background())
}

func (i RestartLogstashInstanceOperationArray) ToRestartLogstashInstanceOperationArrayOutputWithContext(ctx context.Context) RestartLogstashInstanceOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartLogstashInstanceOperationArrayOutput)
}

// RestartLogstashInstanceOperationMapInput is an input type that accepts RestartLogstashInstanceOperationMap and RestartLogstashInstanceOperationMapOutput values.
// You can construct a concrete instance of `RestartLogstashInstanceOperationMapInput` via:
//
//	RestartLogstashInstanceOperationMap{ "key": RestartLogstashInstanceOperationArgs{...} }
type RestartLogstashInstanceOperationMapInput interface {
	pulumi.Input

	ToRestartLogstashInstanceOperationMapOutput() RestartLogstashInstanceOperationMapOutput
	ToRestartLogstashInstanceOperationMapOutputWithContext(context.Context) RestartLogstashInstanceOperationMapOutput
}

type RestartLogstashInstanceOperationMap map[string]RestartLogstashInstanceOperationInput

func (RestartLogstashInstanceOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartLogstashInstanceOperation)(nil)).Elem()
}

func (i RestartLogstashInstanceOperationMap) ToRestartLogstashInstanceOperationMapOutput() RestartLogstashInstanceOperationMapOutput {
	return i.ToRestartLogstashInstanceOperationMapOutputWithContext(context.Background())
}

func (i RestartLogstashInstanceOperationMap) ToRestartLogstashInstanceOperationMapOutputWithContext(ctx context.Context) RestartLogstashInstanceOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartLogstashInstanceOperationMapOutput)
}

type RestartLogstashInstanceOperationOutput struct{ *pulumi.OutputState }

func (RestartLogstashInstanceOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartLogstashInstanceOperation)(nil)).Elem()
}

func (o RestartLogstashInstanceOperationOutput) ToRestartLogstashInstanceOperationOutput() RestartLogstashInstanceOperationOutput {
	return o
}

func (o RestartLogstashInstanceOperationOutput) ToRestartLogstashInstanceOperationOutputWithContext(ctx context.Context) RestartLogstashInstanceOperationOutput {
	return o
}

// Instance id.
func (o RestartLogstashInstanceOperationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RestartLogstashInstanceOperation) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Restart type, 0 full restart, 1 rolling restart.
func (o RestartLogstashInstanceOperationOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v *RestartLogstashInstanceOperation) pulumi.IntOutput { return v.Type }).(pulumi.IntOutput)
}

type RestartLogstashInstanceOperationArrayOutput struct{ *pulumi.OutputState }

func (RestartLogstashInstanceOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartLogstashInstanceOperation)(nil)).Elem()
}

func (o RestartLogstashInstanceOperationArrayOutput) ToRestartLogstashInstanceOperationArrayOutput() RestartLogstashInstanceOperationArrayOutput {
	return o
}

func (o RestartLogstashInstanceOperationArrayOutput) ToRestartLogstashInstanceOperationArrayOutputWithContext(ctx context.Context) RestartLogstashInstanceOperationArrayOutput {
	return o
}

func (o RestartLogstashInstanceOperationArrayOutput) Index(i pulumi.IntInput) RestartLogstashInstanceOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RestartLogstashInstanceOperation {
		return vs[0].([]*RestartLogstashInstanceOperation)[vs[1].(int)]
	}).(RestartLogstashInstanceOperationOutput)
}

type RestartLogstashInstanceOperationMapOutput struct{ *pulumi.OutputState }

func (RestartLogstashInstanceOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartLogstashInstanceOperation)(nil)).Elem()
}

func (o RestartLogstashInstanceOperationMapOutput) ToRestartLogstashInstanceOperationMapOutput() RestartLogstashInstanceOperationMapOutput {
	return o
}

func (o RestartLogstashInstanceOperationMapOutput) ToRestartLogstashInstanceOperationMapOutputWithContext(ctx context.Context) RestartLogstashInstanceOperationMapOutput {
	return o
}

func (o RestartLogstashInstanceOperationMapOutput) MapIndex(k pulumi.StringInput) RestartLogstashInstanceOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RestartLogstashInstanceOperation {
		return vs[0].(map[string]*RestartLogstashInstanceOperation)[vs[1].(string)]
	}).(RestartLogstashInstanceOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestartLogstashInstanceOperationInput)(nil)).Elem(), &RestartLogstashInstanceOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartLogstashInstanceOperationArrayInput)(nil)).Elem(), RestartLogstashInstanceOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartLogstashInstanceOperationMapInput)(nil)).Elem(), RestartLogstashInstanceOperationMap{})
	pulumi.RegisterOutputType(RestartLogstashInstanceOperationOutput{})
	pulumi.RegisterOutputType(RestartLogstashInstanceOperationArrayOutput{})
	pulumi.RegisterOutputType(RestartLogstashInstanceOperationMapOutput{})
}
