// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oceanus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a oceanus workSpace
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Oceanus"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Oceanus.NewWorkSpace(ctx, "example", &Oceanus.WorkSpaceArgs{
//				Description:   pulumi.String("example description."),
//				WorkSpaceName: pulumi.String("tf_example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// oceanus work_space can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Oceanus/workSpace:WorkSpace example space-0dan3yux#tf_example
//
// ```
type WorkSpace struct {
	pulumi.CustomResourceState

	// User APPID.
	AppId pulumi.IntOutput `pulumi:"appId"`
	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Creator UIN.
	CreatorUin pulumi.StringOutput `pulumi:"creatorUin"`
	// Workspace description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Number of Jobs.
	JobsCount pulumi.IntOutput `pulumi:"jobsCount"`
	// Owner UIN.
	OwnerUin pulumi.StringOutput `pulumi:"ownerUin"`
	// Number of workspace members.
	RoleAuthCount pulumi.IntOutput `pulumi:"roleAuthCount"`
	// Serial ID.
	SerialId pulumi.StringOutput `pulumi:"serialId"`
	// Workspace status.
	Status pulumi.IntOutput `pulumi:"status"`
	// Update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Workspace ID.
	WorkSpaceId pulumi.StringOutput `pulumi:"workSpaceId"`
	// Workspace name.
	WorkSpaceName pulumi.StringOutput `pulumi:"workSpaceName"`
}

// NewWorkSpace registers a new resource with the given unique name, arguments, and options.
func NewWorkSpace(ctx *pulumi.Context,
	name string, args *WorkSpaceArgs, opts ...pulumi.ResourceOption) (*WorkSpace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkSpaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkSpaceName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WorkSpace
	err := ctx.RegisterResource("tencentcloud:Oceanus/workSpace:WorkSpace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkSpace gets an existing WorkSpace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkSpace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkSpaceState, opts ...pulumi.ResourceOption) (*WorkSpace, error) {
	var resource WorkSpace
	err := ctx.ReadResource("tencentcloud:Oceanus/workSpace:WorkSpace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkSpace resources.
type workSpaceState struct {
	// User APPID.
	AppId *int `pulumi:"appId"`
	// Create time.
	CreateTime *string `pulumi:"createTime"`
	// Creator UIN.
	CreatorUin *string `pulumi:"creatorUin"`
	// Workspace description.
	Description *string `pulumi:"description"`
	// Number of Jobs.
	JobsCount *int `pulumi:"jobsCount"`
	// Owner UIN.
	OwnerUin *string `pulumi:"ownerUin"`
	// Number of workspace members.
	RoleAuthCount *int `pulumi:"roleAuthCount"`
	// Serial ID.
	SerialId *string `pulumi:"serialId"`
	// Workspace status.
	Status *int `pulumi:"status"`
	// Update time.
	UpdateTime *string `pulumi:"updateTime"`
	// Workspace ID.
	WorkSpaceId *string `pulumi:"workSpaceId"`
	// Workspace name.
	WorkSpaceName *string `pulumi:"workSpaceName"`
}

type WorkSpaceState struct {
	// User APPID.
	AppId pulumi.IntPtrInput
	// Create time.
	CreateTime pulumi.StringPtrInput
	// Creator UIN.
	CreatorUin pulumi.StringPtrInput
	// Workspace description.
	Description pulumi.StringPtrInput
	// Number of Jobs.
	JobsCount pulumi.IntPtrInput
	// Owner UIN.
	OwnerUin pulumi.StringPtrInput
	// Number of workspace members.
	RoleAuthCount pulumi.IntPtrInput
	// Serial ID.
	SerialId pulumi.StringPtrInput
	// Workspace status.
	Status pulumi.IntPtrInput
	// Update time.
	UpdateTime pulumi.StringPtrInput
	// Workspace ID.
	WorkSpaceId pulumi.StringPtrInput
	// Workspace name.
	WorkSpaceName pulumi.StringPtrInput
}

func (WorkSpaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workSpaceState)(nil)).Elem()
}

type workSpaceArgs struct {
	// Workspace description.
	Description *string `pulumi:"description"`
	// Workspace name.
	WorkSpaceName string `pulumi:"workSpaceName"`
}

// The set of arguments for constructing a WorkSpace resource.
type WorkSpaceArgs struct {
	// Workspace description.
	Description pulumi.StringPtrInput
	// Workspace name.
	WorkSpaceName pulumi.StringInput
}

func (WorkSpaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workSpaceArgs)(nil)).Elem()
}

type WorkSpaceInput interface {
	pulumi.Input

	ToWorkSpaceOutput() WorkSpaceOutput
	ToWorkSpaceOutputWithContext(ctx context.Context) WorkSpaceOutput
}

func (*WorkSpace) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkSpace)(nil)).Elem()
}

func (i *WorkSpace) ToWorkSpaceOutput() WorkSpaceOutput {
	return i.ToWorkSpaceOutputWithContext(context.Background())
}

func (i *WorkSpace) ToWorkSpaceOutputWithContext(ctx context.Context) WorkSpaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkSpaceOutput)
}

// WorkSpaceArrayInput is an input type that accepts WorkSpaceArray and WorkSpaceArrayOutput values.
// You can construct a concrete instance of `WorkSpaceArrayInput` via:
//
//	WorkSpaceArray{ WorkSpaceArgs{...} }
type WorkSpaceArrayInput interface {
	pulumi.Input

	ToWorkSpaceArrayOutput() WorkSpaceArrayOutput
	ToWorkSpaceArrayOutputWithContext(context.Context) WorkSpaceArrayOutput
}

type WorkSpaceArray []WorkSpaceInput

func (WorkSpaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkSpace)(nil)).Elem()
}

func (i WorkSpaceArray) ToWorkSpaceArrayOutput() WorkSpaceArrayOutput {
	return i.ToWorkSpaceArrayOutputWithContext(context.Background())
}

func (i WorkSpaceArray) ToWorkSpaceArrayOutputWithContext(ctx context.Context) WorkSpaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkSpaceArrayOutput)
}

// WorkSpaceMapInput is an input type that accepts WorkSpaceMap and WorkSpaceMapOutput values.
// You can construct a concrete instance of `WorkSpaceMapInput` via:
//
//	WorkSpaceMap{ "key": WorkSpaceArgs{...} }
type WorkSpaceMapInput interface {
	pulumi.Input

	ToWorkSpaceMapOutput() WorkSpaceMapOutput
	ToWorkSpaceMapOutputWithContext(context.Context) WorkSpaceMapOutput
}

type WorkSpaceMap map[string]WorkSpaceInput

func (WorkSpaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkSpace)(nil)).Elem()
}

func (i WorkSpaceMap) ToWorkSpaceMapOutput() WorkSpaceMapOutput {
	return i.ToWorkSpaceMapOutputWithContext(context.Background())
}

func (i WorkSpaceMap) ToWorkSpaceMapOutputWithContext(ctx context.Context) WorkSpaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkSpaceMapOutput)
}

type WorkSpaceOutput struct{ *pulumi.OutputState }

func (WorkSpaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkSpace)(nil)).Elem()
}

func (o WorkSpaceOutput) ToWorkSpaceOutput() WorkSpaceOutput {
	return o
}

func (o WorkSpaceOutput) ToWorkSpaceOutputWithContext(ctx context.Context) WorkSpaceOutput {
	return o
}

// User APPID.
func (o WorkSpaceOutput) AppId() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.IntOutput { return v.AppId }).(pulumi.IntOutput)
}

// Create time.
func (o WorkSpaceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Creator UIN.
func (o WorkSpaceOutput) CreatorUin() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.StringOutput { return v.CreatorUin }).(pulumi.StringOutput)
}

// Workspace description.
func (o WorkSpaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Number of Jobs.
func (o WorkSpaceOutput) JobsCount() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.IntOutput { return v.JobsCount }).(pulumi.IntOutput)
}

// Owner UIN.
func (o WorkSpaceOutput) OwnerUin() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.StringOutput { return v.OwnerUin }).(pulumi.StringOutput)
}

// Number of workspace members.
func (o WorkSpaceOutput) RoleAuthCount() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.IntOutput { return v.RoleAuthCount }).(pulumi.IntOutput)
}

// Serial ID.
func (o WorkSpaceOutput) SerialId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.StringOutput { return v.SerialId }).(pulumi.StringOutput)
}

// Workspace status.
func (o WorkSpaceOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Update time.
func (o WorkSpaceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Workspace ID.
func (o WorkSpaceOutput) WorkSpaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.StringOutput { return v.WorkSpaceId }).(pulumi.StringOutput)
}

// Workspace name.
func (o WorkSpaceOutput) WorkSpaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkSpace) pulumi.StringOutput { return v.WorkSpaceName }).(pulumi.StringOutput)
}

type WorkSpaceArrayOutput struct{ *pulumi.OutputState }

func (WorkSpaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkSpace)(nil)).Elem()
}

func (o WorkSpaceArrayOutput) ToWorkSpaceArrayOutput() WorkSpaceArrayOutput {
	return o
}

func (o WorkSpaceArrayOutput) ToWorkSpaceArrayOutputWithContext(ctx context.Context) WorkSpaceArrayOutput {
	return o
}

func (o WorkSpaceArrayOutput) Index(i pulumi.IntInput) WorkSpaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkSpace {
		return vs[0].([]*WorkSpace)[vs[1].(int)]
	}).(WorkSpaceOutput)
}

type WorkSpaceMapOutput struct{ *pulumi.OutputState }

func (WorkSpaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkSpace)(nil)).Elem()
}

func (o WorkSpaceMapOutput) ToWorkSpaceMapOutput() WorkSpaceMapOutput {
	return o
}

func (o WorkSpaceMapOutput) ToWorkSpaceMapOutputWithContext(ctx context.Context) WorkSpaceMapOutput {
	return o
}

func (o WorkSpaceMapOutput) MapIndex(k pulumi.StringInput) WorkSpaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkSpace {
		return vs[0].(map[string]*WorkSpace)[vs[1].(string)]
	}).(WorkSpaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkSpaceInput)(nil)).Elem(), &WorkSpace{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkSpaceArrayInput)(nil)).Elem(), WorkSpaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkSpaceMapInput)(nil)).Elem(), WorkSpaceMap{})
	pulumi.RegisterOutputType(WorkSpaceOutput{})
	pulumi.RegisterOutputType(WorkSpaceArrayOutput{})
	pulumi.RegisterOutputType(WorkSpaceMapOutput{})
}
