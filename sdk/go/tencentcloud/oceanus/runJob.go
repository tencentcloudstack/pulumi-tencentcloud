// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oceanus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a oceanus runJob
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Oceanus"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Oceanus"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Oceanus.NewRunJob(ctx, "example", &Oceanus.RunJobArgs{
//				RunJobDescriptions: oceanus.RunJobRunJobDescriptionArray{
//					&oceanus.RunJobRunJobDescriptionArgs{
//						JobConfigVersion:      pulumi.Int(10),
//						JobId:                 pulumi.String("cql-4xwincyn"),
//						RunType:               pulumi.Int(1),
//						StartMode:             pulumi.String("LATEST"),
//						UseOldSystemConnector: pulumi.Bool(false),
//					},
//				},
//				WorkSpaceId: pulumi.String("space-2idq8wbr"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RunJob struct {
	pulumi.CustomResourceState

	// The description information for batch job startup.
	RunJobDescriptions RunJobRunJobDescriptionArrayOutput `pulumi:"runJobDescriptions"`
	// Workspace SerialId.
	WorkSpaceId pulumi.StringPtrOutput `pulumi:"workSpaceId"`
}

// NewRunJob registers a new resource with the given unique name, arguments, and options.
func NewRunJob(ctx *pulumi.Context,
	name string, args *RunJobArgs, opts ...pulumi.ResourceOption) (*RunJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RunJobDescriptions == nil {
		return nil, errors.New("invalid value for required argument 'RunJobDescriptions'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RunJob
	err := ctx.RegisterResource("tencentcloud:Oceanus/runJob:RunJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRunJob gets an existing RunJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRunJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RunJobState, opts ...pulumi.ResourceOption) (*RunJob, error) {
	var resource RunJob
	err := ctx.ReadResource("tencentcloud:Oceanus/runJob:RunJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RunJob resources.
type runJobState struct {
	// The description information for batch job startup.
	RunJobDescriptions []RunJobRunJobDescription `pulumi:"runJobDescriptions"`
	// Workspace SerialId.
	WorkSpaceId *string `pulumi:"workSpaceId"`
}

type RunJobState struct {
	// The description information for batch job startup.
	RunJobDescriptions RunJobRunJobDescriptionArrayInput
	// Workspace SerialId.
	WorkSpaceId pulumi.StringPtrInput
}

func (RunJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*runJobState)(nil)).Elem()
}

type runJobArgs struct {
	// The description information for batch job startup.
	RunJobDescriptions []RunJobRunJobDescription `pulumi:"runJobDescriptions"`
	// Workspace SerialId.
	WorkSpaceId *string `pulumi:"workSpaceId"`
}

// The set of arguments for constructing a RunJob resource.
type RunJobArgs struct {
	// The description information for batch job startup.
	RunJobDescriptions RunJobRunJobDescriptionArrayInput
	// Workspace SerialId.
	WorkSpaceId pulumi.StringPtrInput
}

func (RunJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runJobArgs)(nil)).Elem()
}

type RunJobInput interface {
	pulumi.Input

	ToRunJobOutput() RunJobOutput
	ToRunJobOutputWithContext(ctx context.Context) RunJobOutput
}

func (*RunJob) ElementType() reflect.Type {
	return reflect.TypeOf((**RunJob)(nil)).Elem()
}

func (i *RunJob) ToRunJobOutput() RunJobOutput {
	return i.ToRunJobOutputWithContext(context.Background())
}

func (i *RunJob) ToRunJobOutputWithContext(ctx context.Context) RunJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunJobOutput)
}

// RunJobArrayInput is an input type that accepts RunJobArray and RunJobArrayOutput values.
// You can construct a concrete instance of `RunJobArrayInput` via:
//
//	RunJobArray{ RunJobArgs{...} }
type RunJobArrayInput interface {
	pulumi.Input

	ToRunJobArrayOutput() RunJobArrayOutput
	ToRunJobArrayOutputWithContext(context.Context) RunJobArrayOutput
}

type RunJobArray []RunJobInput

func (RunJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RunJob)(nil)).Elem()
}

func (i RunJobArray) ToRunJobArrayOutput() RunJobArrayOutput {
	return i.ToRunJobArrayOutputWithContext(context.Background())
}

func (i RunJobArray) ToRunJobArrayOutputWithContext(ctx context.Context) RunJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunJobArrayOutput)
}

// RunJobMapInput is an input type that accepts RunJobMap and RunJobMapOutput values.
// You can construct a concrete instance of `RunJobMapInput` via:
//
//	RunJobMap{ "key": RunJobArgs{...} }
type RunJobMapInput interface {
	pulumi.Input

	ToRunJobMapOutput() RunJobMapOutput
	ToRunJobMapOutputWithContext(context.Context) RunJobMapOutput
}

type RunJobMap map[string]RunJobInput

func (RunJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RunJob)(nil)).Elem()
}

func (i RunJobMap) ToRunJobMapOutput() RunJobMapOutput {
	return i.ToRunJobMapOutputWithContext(context.Background())
}

func (i RunJobMap) ToRunJobMapOutputWithContext(ctx context.Context) RunJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunJobMapOutput)
}

type RunJobOutput struct{ *pulumi.OutputState }

func (RunJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunJob)(nil)).Elem()
}

func (o RunJobOutput) ToRunJobOutput() RunJobOutput {
	return o
}

func (o RunJobOutput) ToRunJobOutputWithContext(ctx context.Context) RunJobOutput {
	return o
}

// The description information for batch job startup.
func (o RunJobOutput) RunJobDescriptions() RunJobRunJobDescriptionArrayOutput {
	return o.ApplyT(func(v *RunJob) RunJobRunJobDescriptionArrayOutput { return v.RunJobDescriptions }).(RunJobRunJobDescriptionArrayOutput)
}

// Workspace SerialId.
func (o RunJobOutput) WorkSpaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunJob) pulumi.StringPtrOutput { return v.WorkSpaceId }).(pulumi.StringPtrOutput)
}

type RunJobArrayOutput struct{ *pulumi.OutputState }

func (RunJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RunJob)(nil)).Elem()
}

func (o RunJobArrayOutput) ToRunJobArrayOutput() RunJobArrayOutput {
	return o
}

func (o RunJobArrayOutput) ToRunJobArrayOutputWithContext(ctx context.Context) RunJobArrayOutput {
	return o
}

func (o RunJobArrayOutput) Index(i pulumi.IntInput) RunJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RunJob {
		return vs[0].([]*RunJob)[vs[1].(int)]
	}).(RunJobOutput)
}

type RunJobMapOutput struct{ *pulumi.OutputState }

func (RunJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RunJob)(nil)).Elem()
}

func (o RunJobMapOutput) ToRunJobMapOutput() RunJobMapOutput {
	return o
}

func (o RunJobMapOutput) ToRunJobMapOutputWithContext(ctx context.Context) RunJobMapOutput {
	return o
}

func (o RunJobMapOutput) MapIndex(k pulumi.StringInput) RunJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RunJob {
		return vs[0].(map[string]*RunJob)[vs[1].(string)]
	}).(RunJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RunJobInput)(nil)).Elem(), &RunJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunJobArrayInput)(nil)).Elem(), RunJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunJobMapInput)(nil)).Elem(), RunJobMap{})
	pulumi.RegisterOutputType(RunJobOutput{})
	pulumi.RegisterOutputType(RunJobArrayOutput{})
	pulumi.RegisterOutputType(RunJobMapOutput{})
}
