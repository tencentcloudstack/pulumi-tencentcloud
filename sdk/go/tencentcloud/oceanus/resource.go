// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oceanus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a oceanus resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Oceanus"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Oceanus"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Oceanus.NewResource(ctx, "example", &Oceanus.ResourceArgs{
//				FolderId:             pulumi.String("folder-7ctl246z"),
//				Remark:               pulumi.String("remark."),
//				ResourceConfigRemark: pulumi.String("config remark."),
//				ResourceLoc: &oceanus.ResourceResourceLocArgs{
//					Param: &oceanus.ResourceResourceLocParamArgs{
//						Bucket: pulumi.String("keep-terraform-1257058945"),
//						Path:   pulumi.String("OceanusResource/junit-4.13.2.jar"),
//						Region: pulumi.String("ap-guangzhou"),
//					},
//					StorageType: pulumi.Int(1),
//				},
//				ResourceType: pulumi.Int(1),
//				WorkSpaceId:  pulumi.String("space-2idq8wbr"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Resource struct {
	pulumi.CustomResourceState

	// Folder id.
	FolderId pulumi.StringPtrOutput `pulumi:"folderId"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource description.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Resource version description.
	ResourceConfigRemark pulumi.StringPtrOutput `pulumi:"resourceConfigRemark"`
	// Resource ID.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Resource location.
	ResourceLoc ResourceResourceLocOutput `pulumi:"resourceLoc"`
	// Resource type, only support JAR now, value is 1.
	ResourceType pulumi.IntOutput `pulumi:"resourceType"`
	// Resource Version.
	Version pulumi.IntOutput `pulumi:"version"`
	// Workspace serialId.
	WorkSpaceId pulumi.StringPtrOutput `pulumi:"workSpaceId"`
}

// NewResource registers a new resource with the given unique name, arguments, and options.
func NewResource(ctx *pulumi.Context,
	name string, args *ResourceArgs, opts ...pulumi.ResourceOption) (*Resource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceLoc == nil {
		return nil, errors.New("invalid value for required argument 'ResourceLoc'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Resource
	err := ctx.RegisterResource("tencentcloud:Oceanus/resource:Resource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResource gets an existing Resource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceState, opts ...pulumi.ResourceOption) (*Resource, error) {
	var resource Resource
	err := ctx.ReadResource("tencentcloud:Oceanus/resource:Resource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resource resources.
type resourceState struct {
	// Folder id.
	FolderId *string `pulumi:"folderId"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Resource description.
	Remark *string `pulumi:"remark"`
	// Resource version description.
	ResourceConfigRemark *string `pulumi:"resourceConfigRemark"`
	// Resource ID.
	ResourceId *string `pulumi:"resourceId"`
	// Resource location.
	ResourceLoc *ResourceResourceLoc `pulumi:"resourceLoc"`
	// Resource type, only support JAR now, value is 1.
	ResourceType *int `pulumi:"resourceType"`
	// Resource Version.
	Version *int `pulumi:"version"`
	// Workspace serialId.
	WorkSpaceId *string `pulumi:"workSpaceId"`
}

type ResourceState struct {
	// Folder id.
	FolderId pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// Resource description.
	Remark pulumi.StringPtrInput
	// Resource version description.
	ResourceConfigRemark pulumi.StringPtrInput
	// Resource ID.
	ResourceId pulumi.StringPtrInput
	// Resource location.
	ResourceLoc ResourceResourceLocPtrInput
	// Resource type, only support JAR now, value is 1.
	ResourceType pulumi.IntPtrInput
	// Resource Version.
	Version pulumi.IntPtrInput
	// Workspace serialId.
	WorkSpaceId pulumi.StringPtrInput
}

func (ResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceState)(nil)).Elem()
}

type resourceArgs struct {
	// Folder id.
	FolderId *string `pulumi:"folderId"`
	// Resource name.
	Name *string `pulumi:"name"`
	// Resource description.
	Remark *string `pulumi:"remark"`
	// Resource version description.
	ResourceConfigRemark *string `pulumi:"resourceConfigRemark"`
	// Resource location.
	ResourceLoc ResourceResourceLoc `pulumi:"resourceLoc"`
	// Resource type, only support JAR now, value is 1.
	ResourceType int `pulumi:"resourceType"`
	// Workspace serialId.
	WorkSpaceId *string `pulumi:"workSpaceId"`
}

// The set of arguments for constructing a Resource resource.
type ResourceArgs struct {
	// Folder id.
	FolderId pulumi.StringPtrInput
	// Resource name.
	Name pulumi.StringPtrInput
	// Resource description.
	Remark pulumi.StringPtrInput
	// Resource version description.
	ResourceConfigRemark pulumi.StringPtrInput
	// Resource location.
	ResourceLoc ResourceResourceLocInput
	// Resource type, only support JAR now, value is 1.
	ResourceType pulumi.IntInput
	// Workspace serialId.
	WorkSpaceId pulumi.StringPtrInput
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceArgs)(nil)).Elem()
}

type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(ctx context.Context) ResourceOutput
}

func (*Resource) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *Resource) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i *Resource) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

// ResourceArrayInput is an input type that accepts ResourceArray and ResourceArrayOutput values.
// You can construct a concrete instance of `ResourceArrayInput` via:
//
//	ResourceArray{ ResourceArgs{...} }
type ResourceArrayInput interface {
	pulumi.Input

	ToResourceArrayOutput() ResourceArrayOutput
	ToResourceArrayOutputWithContext(context.Context) ResourceArrayOutput
}

type ResourceArray []ResourceInput

func (ResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resource)(nil)).Elem()
}

func (i ResourceArray) ToResourceArrayOutput() ResourceArrayOutput {
	return i.ToResourceArrayOutputWithContext(context.Background())
}

func (i ResourceArray) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceArrayOutput)
}

// ResourceMapInput is an input type that accepts ResourceMap and ResourceMapOutput values.
// You can construct a concrete instance of `ResourceMapInput` via:
//
//	ResourceMap{ "key": ResourceArgs{...} }
type ResourceMapInput interface {
	pulumi.Input

	ToResourceMapOutput() ResourceMapOutput
	ToResourceMapOutputWithContext(context.Context) ResourceMapOutput
}

type ResourceMap map[string]ResourceInput

func (ResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resource)(nil)).Elem()
}

func (i ResourceMap) ToResourceMapOutput() ResourceMapOutput {
	return i.ToResourceMapOutputWithContext(context.Background())
}

func (i ResourceMap) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMapOutput)
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

// Folder id.
func (o ResourceOutput) FolderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringPtrOutput { return v.FolderId }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o ResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource description.
func (o ResourceOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Resource version description.
func (o ResourceOutput) ResourceConfigRemark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringPtrOutput { return v.ResourceConfigRemark }).(pulumi.StringPtrOutput)
}

// Resource ID.
func (o ResourceOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Resource location.
func (o ResourceOutput) ResourceLoc() ResourceResourceLocOutput {
	return o.ApplyT(func(v *Resource) ResourceResourceLocOutput { return v.ResourceLoc }).(ResourceResourceLocOutput)
}

// Resource type, only support JAR now, value is 1.
func (o ResourceOutput) ResourceType() pulumi.IntOutput {
	return o.ApplyT(func(v *Resource) pulumi.IntOutput { return v.ResourceType }).(pulumi.IntOutput)
}

// Resource Version.
func (o ResourceOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *Resource) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// Workspace serialId.
func (o ResourceOutput) WorkSpaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringPtrOutput { return v.WorkSpaceId }).(pulumi.StringPtrOutput)
}

type ResourceArrayOutput struct{ *pulumi.OutputState }

func (ResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resource)(nil)).Elem()
}

func (o ResourceArrayOutput) ToResourceArrayOutput() ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) Index(i pulumi.IntInput) ResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Resource {
		return vs[0].([]*Resource)[vs[1].(int)]
	}).(ResourceOutput)
}

type ResourceMapOutput struct{ *pulumi.OutputState }

func (ResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resource)(nil)).Elem()
}

func (o ResourceMapOutput) ToResourceMapOutput() ResourceMapOutput {
	return o
}

func (o ResourceMapOutput) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return o
}

func (o ResourceMapOutput) MapIndex(k pulumi.StringInput) ResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Resource {
		return vs[0].(map[string]*Resource)[vs[1].(string)]
	}).(ResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceInput)(nil)).Elem(), &Resource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceArrayInput)(nil)).Elem(), ResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMapInput)(nil)).Elem(), ResourceMap{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourceArrayOutput{})
	pulumi.RegisterOutputType(ResourceMapOutput{})
}
