// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oceanus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a oceanus jobCopy
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Oceanus"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Oceanus.NewJobCopy(ctx, "example", &Oceanus.JobCopyArgs{
//				JobType:         pulumi.Int(2),
//				SourceId:        pulumi.String("cql-0nob2hx8"),
//				SourceName:      pulumi.String("keep_jar"),
//				TargetClusterId: pulumi.String("cluster-1kcd524h"),
//				TargetFolderId:  pulumi.String("folder-7ctl246z"),
//				TargetName:      pulumi.String("tf_copy_example"),
//				WorkSpaceId:     pulumi.String("space-2idq8wbr"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type JobCopy struct {
	pulumi.CustomResourceState

	// Copy Job ID.
	JobId pulumi.StringOutput `pulumi:"jobId"`
	// The type of the source job.
	JobType pulumi.IntPtrOutput `pulumi:"jobType"`
	// The serial ID of the job to be copied.
	SourceId pulumi.StringOutput `pulumi:"sourceId"`
	// The name of the job to be copied.
	SourceName pulumi.StringPtrOutput `pulumi:"sourceName"`
	// The cluster serial ID of the target cluster.
	TargetClusterId pulumi.StringOutput `pulumi:"targetClusterId"`
	// The directory ID of the new job.
	TargetFolderId pulumi.StringPtrOutput `pulumi:"targetFolderId"`
	// The name of the new job.
	TargetName pulumi.StringPtrOutput `pulumi:"targetName"`
	// Workspace SerialId.
	WorkSpaceId pulumi.StringPtrOutput `pulumi:"workSpaceId"`
}

// NewJobCopy registers a new resource with the given unique name, arguments, and options.
func NewJobCopy(ctx *pulumi.Context,
	name string, args *JobCopyArgs, opts ...pulumi.ResourceOption) (*JobCopy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceId'")
	}
	if args.TargetClusterId == nil {
		return nil, errors.New("invalid value for required argument 'TargetClusterId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource JobCopy
	err := ctx.RegisterResource("tencentcloud:Oceanus/jobCopy:JobCopy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobCopy gets an existing JobCopy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobCopy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobCopyState, opts ...pulumi.ResourceOption) (*JobCopy, error) {
	var resource JobCopy
	err := ctx.ReadResource("tencentcloud:Oceanus/jobCopy:JobCopy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobCopy resources.
type jobCopyState struct {
	// Copy Job ID.
	JobId *string `pulumi:"jobId"`
	// The type of the source job.
	JobType *int `pulumi:"jobType"`
	// The serial ID of the job to be copied.
	SourceId *string `pulumi:"sourceId"`
	// The name of the job to be copied.
	SourceName *string `pulumi:"sourceName"`
	// The cluster serial ID of the target cluster.
	TargetClusterId *string `pulumi:"targetClusterId"`
	// The directory ID of the new job.
	TargetFolderId *string `pulumi:"targetFolderId"`
	// The name of the new job.
	TargetName *string `pulumi:"targetName"`
	// Workspace SerialId.
	WorkSpaceId *string `pulumi:"workSpaceId"`
}

type JobCopyState struct {
	// Copy Job ID.
	JobId pulumi.StringPtrInput
	// The type of the source job.
	JobType pulumi.IntPtrInput
	// The serial ID of the job to be copied.
	SourceId pulumi.StringPtrInput
	// The name of the job to be copied.
	SourceName pulumi.StringPtrInput
	// The cluster serial ID of the target cluster.
	TargetClusterId pulumi.StringPtrInput
	// The directory ID of the new job.
	TargetFolderId pulumi.StringPtrInput
	// The name of the new job.
	TargetName pulumi.StringPtrInput
	// Workspace SerialId.
	WorkSpaceId pulumi.StringPtrInput
}

func (JobCopyState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobCopyState)(nil)).Elem()
}

type jobCopyArgs struct {
	// The type of the source job.
	JobType *int `pulumi:"jobType"`
	// The serial ID of the job to be copied.
	SourceId string `pulumi:"sourceId"`
	// The name of the job to be copied.
	SourceName *string `pulumi:"sourceName"`
	// The cluster serial ID of the target cluster.
	TargetClusterId string `pulumi:"targetClusterId"`
	// The directory ID of the new job.
	TargetFolderId *string `pulumi:"targetFolderId"`
	// The name of the new job.
	TargetName *string `pulumi:"targetName"`
	// Workspace SerialId.
	WorkSpaceId *string `pulumi:"workSpaceId"`
}

// The set of arguments for constructing a JobCopy resource.
type JobCopyArgs struct {
	// The type of the source job.
	JobType pulumi.IntPtrInput
	// The serial ID of the job to be copied.
	SourceId pulumi.StringInput
	// The name of the job to be copied.
	SourceName pulumi.StringPtrInput
	// The cluster serial ID of the target cluster.
	TargetClusterId pulumi.StringInput
	// The directory ID of the new job.
	TargetFolderId pulumi.StringPtrInput
	// The name of the new job.
	TargetName pulumi.StringPtrInput
	// Workspace SerialId.
	WorkSpaceId pulumi.StringPtrInput
}

func (JobCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobCopyArgs)(nil)).Elem()
}

type JobCopyInput interface {
	pulumi.Input

	ToJobCopyOutput() JobCopyOutput
	ToJobCopyOutputWithContext(ctx context.Context) JobCopyOutput
}

func (*JobCopy) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCopy)(nil)).Elem()
}

func (i *JobCopy) ToJobCopyOutput() JobCopyOutput {
	return i.ToJobCopyOutputWithContext(context.Background())
}

func (i *JobCopy) ToJobCopyOutputWithContext(ctx context.Context) JobCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyOutput)
}

// JobCopyArrayInput is an input type that accepts JobCopyArray and JobCopyArrayOutput values.
// You can construct a concrete instance of `JobCopyArrayInput` via:
//
//	JobCopyArray{ JobCopyArgs{...} }
type JobCopyArrayInput interface {
	pulumi.Input

	ToJobCopyArrayOutput() JobCopyArrayOutput
	ToJobCopyArrayOutputWithContext(context.Context) JobCopyArrayOutput
}

type JobCopyArray []JobCopyInput

func (JobCopyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobCopy)(nil)).Elem()
}

func (i JobCopyArray) ToJobCopyArrayOutput() JobCopyArrayOutput {
	return i.ToJobCopyArrayOutputWithContext(context.Background())
}

func (i JobCopyArray) ToJobCopyArrayOutputWithContext(ctx context.Context) JobCopyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyArrayOutput)
}

// JobCopyMapInput is an input type that accepts JobCopyMap and JobCopyMapOutput values.
// You can construct a concrete instance of `JobCopyMapInput` via:
//
//	JobCopyMap{ "key": JobCopyArgs{...} }
type JobCopyMapInput interface {
	pulumi.Input

	ToJobCopyMapOutput() JobCopyMapOutput
	ToJobCopyMapOutputWithContext(context.Context) JobCopyMapOutput
}

type JobCopyMap map[string]JobCopyInput

func (JobCopyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobCopy)(nil)).Elem()
}

func (i JobCopyMap) ToJobCopyMapOutput() JobCopyMapOutput {
	return i.ToJobCopyMapOutputWithContext(context.Background())
}

func (i JobCopyMap) ToJobCopyMapOutputWithContext(ctx context.Context) JobCopyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCopyMapOutput)
}

type JobCopyOutput struct{ *pulumi.OutputState }

func (JobCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCopy)(nil)).Elem()
}

func (o JobCopyOutput) ToJobCopyOutput() JobCopyOutput {
	return o
}

func (o JobCopyOutput) ToJobCopyOutputWithContext(ctx context.Context) JobCopyOutput {
	return o
}

// Copy Job ID.
func (o JobCopyOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobCopy) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

// The type of the source job.
func (o JobCopyOutput) JobType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobCopy) pulumi.IntPtrOutput { return v.JobType }).(pulumi.IntPtrOutput)
}

// The serial ID of the job to be copied.
func (o JobCopyOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobCopy) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

// The name of the job to be copied.
func (o JobCopyOutput) SourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopy) pulumi.StringPtrOutput { return v.SourceName }).(pulumi.StringPtrOutput)
}

// The cluster serial ID of the target cluster.
func (o JobCopyOutput) TargetClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobCopy) pulumi.StringOutput { return v.TargetClusterId }).(pulumi.StringOutput)
}

// The directory ID of the new job.
func (o JobCopyOutput) TargetFolderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopy) pulumi.StringPtrOutput { return v.TargetFolderId }).(pulumi.StringPtrOutput)
}

// The name of the new job.
func (o JobCopyOutput) TargetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopy) pulumi.StringPtrOutput { return v.TargetName }).(pulumi.StringPtrOutput)
}

// Workspace SerialId.
func (o JobCopyOutput) WorkSpaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobCopy) pulumi.StringPtrOutput { return v.WorkSpaceId }).(pulumi.StringPtrOutput)
}

type JobCopyArrayOutput struct{ *pulumi.OutputState }

func (JobCopyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobCopy)(nil)).Elem()
}

func (o JobCopyArrayOutput) ToJobCopyArrayOutput() JobCopyArrayOutput {
	return o
}

func (o JobCopyArrayOutput) ToJobCopyArrayOutputWithContext(ctx context.Context) JobCopyArrayOutput {
	return o
}

func (o JobCopyArrayOutput) Index(i pulumi.IntInput) JobCopyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobCopy {
		return vs[0].([]*JobCopy)[vs[1].(int)]
	}).(JobCopyOutput)
}

type JobCopyMapOutput struct{ *pulumi.OutputState }

func (JobCopyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobCopy)(nil)).Elem()
}

func (o JobCopyMapOutput) ToJobCopyMapOutput() JobCopyMapOutput {
	return o
}

func (o JobCopyMapOutput) ToJobCopyMapOutputWithContext(ctx context.Context) JobCopyMapOutput {
	return o
}

func (o JobCopyMapOutput) MapIndex(k pulumi.StringInput) JobCopyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobCopy {
		return vs[0].(map[string]*JobCopy)[vs[1].(string)]
	}).(JobCopyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopyInput)(nil)).Elem(), &JobCopy{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopyArrayInput)(nil)).Elem(), JobCopyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCopyMapInput)(nil)).Elem(), JobCopyMap{})
	pulumi.RegisterOutputType(JobCopyOutput{})
	pulumi.RegisterOutputType(JobCopyArrayOutput{})
	pulumi.RegisterOutputType(JobCopyMapOutput{})
}
