// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tdmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tdmq rocketmqVipInstance
//
// > **NOTE:** The instance cannot be downgraded, Include parameters `nodeCount`, `spec`, `storageSize`.
type RocketmqVipInstance struct {
	pulumi.CustomResourceState

	// Instance name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of nodes, minimum 2, maximum 20.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// Instance specification: Basic type: `rocket-vip-basic-1`, Standard type: `rocket-vip-basic-2`, Advanced Type I: `rocket-vip-basic-3`, Advanced Type II: `rocket-vip-basic-4`.
	Spec pulumi.StringOutput `pulumi:"spec"`
	// Single node storage space, in GB, minimum 200GB.
	StorageSize pulumi.IntOutput `pulumi:"storageSize"`
	// Purchase period, in months.
	TimeSpan pulumi.IntOutput `pulumi:"timeSpan"`
	// VPC information.
	VpcInfo RocketmqVipInstanceVpcInfoOutput `pulumi:"vpcInfo"`
	// The Zone ID list for node deployment, such as Guangzhou Zone 1, is 100001. For details, please refer to the official website of Tencent Cloud.
	ZoneIds pulumi.StringArrayOutput `pulumi:"zoneIds"`
}

// NewRocketmqVipInstance registers a new resource with the given unique name, arguments, and options.
func NewRocketmqVipInstance(ctx *pulumi.Context,
	name string, args *RocketmqVipInstanceArgs, opts ...pulumi.ResourceOption) (*RocketmqVipInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeCount == nil {
		return nil, errors.New("invalid value for required argument 'NodeCount'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	if args.StorageSize == nil {
		return nil, errors.New("invalid value for required argument 'StorageSize'")
	}
	if args.TimeSpan == nil {
		return nil, errors.New("invalid value for required argument 'TimeSpan'")
	}
	if args.VpcInfo == nil {
		return nil, errors.New("invalid value for required argument 'VpcInfo'")
	}
	if args.ZoneIds == nil {
		return nil, errors.New("invalid value for required argument 'ZoneIds'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocketmqVipInstance
	err := ctx.RegisterResource("tencentcloud:Tdmq/rocketmqVipInstance:RocketmqVipInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketmqVipInstance gets an existing RocketmqVipInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketmqVipInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketmqVipInstanceState, opts ...pulumi.ResourceOption) (*RocketmqVipInstance, error) {
	var resource RocketmqVipInstance
	err := ctx.ReadResource("tencentcloud:Tdmq/rocketmqVipInstance:RocketmqVipInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketmqVipInstance resources.
type rocketmqVipInstanceState struct {
	// Instance name.
	Name *string `pulumi:"name"`
	// Number of nodes, minimum 2, maximum 20.
	NodeCount *int `pulumi:"nodeCount"`
	// Instance specification: Basic type: `rocket-vip-basic-1`, Standard type: `rocket-vip-basic-2`, Advanced Type I: `rocket-vip-basic-3`, Advanced Type II: `rocket-vip-basic-4`.
	Spec *string `pulumi:"spec"`
	// Single node storage space, in GB, minimum 200GB.
	StorageSize *int `pulumi:"storageSize"`
	// Purchase period, in months.
	TimeSpan *int `pulumi:"timeSpan"`
	// VPC information.
	VpcInfo *RocketmqVipInstanceVpcInfo `pulumi:"vpcInfo"`
	// The Zone ID list for node deployment, such as Guangzhou Zone 1, is 100001. For details, please refer to the official website of Tencent Cloud.
	ZoneIds []string `pulumi:"zoneIds"`
}

type RocketmqVipInstanceState struct {
	// Instance name.
	Name pulumi.StringPtrInput
	// Number of nodes, minimum 2, maximum 20.
	NodeCount pulumi.IntPtrInput
	// Instance specification: Basic type: `rocket-vip-basic-1`, Standard type: `rocket-vip-basic-2`, Advanced Type I: `rocket-vip-basic-3`, Advanced Type II: `rocket-vip-basic-4`.
	Spec pulumi.StringPtrInput
	// Single node storage space, in GB, minimum 200GB.
	StorageSize pulumi.IntPtrInput
	// Purchase period, in months.
	TimeSpan pulumi.IntPtrInput
	// VPC information.
	VpcInfo RocketmqVipInstanceVpcInfoPtrInput
	// The Zone ID list for node deployment, such as Guangzhou Zone 1, is 100001. For details, please refer to the official website of Tencent Cloud.
	ZoneIds pulumi.StringArrayInput
}

func (RocketmqVipInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketmqVipInstanceState)(nil)).Elem()
}

type rocketmqVipInstanceArgs struct {
	// Instance name.
	Name *string `pulumi:"name"`
	// Number of nodes, minimum 2, maximum 20.
	NodeCount int `pulumi:"nodeCount"`
	// Instance specification: Basic type: `rocket-vip-basic-1`, Standard type: `rocket-vip-basic-2`, Advanced Type I: `rocket-vip-basic-3`, Advanced Type II: `rocket-vip-basic-4`.
	Spec string `pulumi:"spec"`
	// Single node storage space, in GB, minimum 200GB.
	StorageSize int `pulumi:"storageSize"`
	// Purchase period, in months.
	TimeSpan int `pulumi:"timeSpan"`
	// VPC information.
	VpcInfo RocketmqVipInstanceVpcInfo `pulumi:"vpcInfo"`
	// The Zone ID list for node deployment, such as Guangzhou Zone 1, is 100001. For details, please refer to the official website of Tencent Cloud.
	ZoneIds []string `pulumi:"zoneIds"`
}

// The set of arguments for constructing a RocketmqVipInstance resource.
type RocketmqVipInstanceArgs struct {
	// Instance name.
	Name pulumi.StringPtrInput
	// Number of nodes, minimum 2, maximum 20.
	NodeCount pulumi.IntInput
	// Instance specification: Basic type: `rocket-vip-basic-1`, Standard type: `rocket-vip-basic-2`, Advanced Type I: `rocket-vip-basic-3`, Advanced Type II: `rocket-vip-basic-4`.
	Spec pulumi.StringInput
	// Single node storage space, in GB, minimum 200GB.
	StorageSize pulumi.IntInput
	// Purchase period, in months.
	TimeSpan pulumi.IntInput
	// VPC information.
	VpcInfo RocketmqVipInstanceVpcInfoInput
	// The Zone ID list for node deployment, such as Guangzhou Zone 1, is 100001. For details, please refer to the official website of Tencent Cloud.
	ZoneIds pulumi.StringArrayInput
}

func (RocketmqVipInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketmqVipInstanceArgs)(nil)).Elem()
}

type RocketmqVipInstanceInput interface {
	pulumi.Input

	ToRocketmqVipInstanceOutput() RocketmqVipInstanceOutput
	ToRocketmqVipInstanceOutputWithContext(ctx context.Context) RocketmqVipInstanceOutput
}

func (*RocketmqVipInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketmqVipInstance)(nil)).Elem()
}

func (i *RocketmqVipInstance) ToRocketmqVipInstanceOutput() RocketmqVipInstanceOutput {
	return i.ToRocketmqVipInstanceOutputWithContext(context.Background())
}

func (i *RocketmqVipInstance) ToRocketmqVipInstanceOutputWithContext(ctx context.Context) RocketmqVipInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqVipInstanceOutput)
}

// RocketmqVipInstanceArrayInput is an input type that accepts RocketmqVipInstanceArray and RocketmqVipInstanceArrayOutput values.
// You can construct a concrete instance of `RocketmqVipInstanceArrayInput` via:
//
//	RocketmqVipInstanceArray{ RocketmqVipInstanceArgs{...} }
type RocketmqVipInstanceArrayInput interface {
	pulumi.Input

	ToRocketmqVipInstanceArrayOutput() RocketmqVipInstanceArrayOutput
	ToRocketmqVipInstanceArrayOutputWithContext(context.Context) RocketmqVipInstanceArrayOutput
}

type RocketmqVipInstanceArray []RocketmqVipInstanceInput

func (RocketmqVipInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketmqVipInstance)(nil)).Elem()
}

func (i RocketmqVipInstanceArray) ToRocketmqVipInstanceArrayOutput() RocketmqVipInstanceArrayOutput {
	return i.ToRocketmqVipInstanceArrayOutputWithContext(context.Background())
}

func (i RocketmqVipInstanceArray) ToRocketmqVipInstanceArrayOutputWithContext(ctx context.Context) RocketmqVipInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqVipInstanceArrayOutput)
}

// RocketmqVipInstanceMapInput is an input type that accepts RocketmqVipInstanceMap and RocketmqVipInstanceMapOutput values.
// You can construct a concrete instance of `RocketmqVipInstanceMapInput` via:
//
//	RocketmqVipInstanceMap{ "key": RocketmqVipInstanceArgs{...} }
type RocketmqVipInstanceMapInput interface {
	pulumi.Input

	ToRocketmqVipInstanceMapOutput() RocketmqVipInstanceMapOutput
	ToRocketmqVipInstanceMapOutputWithContext(context.Context) RocketmqVipInstanceMapOutput
}

type RocketmqVipInstanceMap map[string]RocketmqVipInstanceInput

func (RocketmqVipInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketmqVipInstance)(nil)).Elem()
}

func (i RocketmqVipInstanceMap) ToRocketmqVipInstanceMapOutput() RocketmqVipInstanceMapOutput {
	return i.ToRocketmqVipInstanceMapOutputWithContext(context.Background())
}

func (i RocketmqVipInstanceMap) ToRocketmqVipInstanceMapOutputWithContext(ctx context.Context) RocketmqVipInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqVipInstanceMapOutput)
}

type RocketmqVipInstanceOutput struct{ *pulumi.OutputState }

func (RocketmqVipInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketmqVipInstance)(nil)).Elem()
}

func (o RocketmqVipInstanceOutput) ToRocketmqVipInstanceOutput() RocketmqVipInstanceOutput {
	return o
}

func (o RocketmqVipInstanceOutput) ToRocketmqVipInstanceOutputWithContext(ctx context.Context) RocketmqVipInstanceOutput {
	return o
}

// Instance name.
func (o RocketmqVipInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqVipInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of nodes, minimum 2, maximum 20.
func (o RocketmqVipInstanceOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketmqVipInstance) pulumi.IntOutput { return v.NodeCount }).(pulumi.IntOutput)
}

// Instance specification: Basic type: `rocket-vip-basic-1`, Standard type: `rocket-vip-basic-2`, Advanced Type I: `rocket-vip-basic-3`, Advanced Type II: `rocket-vip-basic-4`.
func (o RocketmqVipInstanceOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqVipInstance) pulumi.StringOutput { return v.Spec }).(pulumi.StringOutput)
}

// Single node storage space, in GB, minimum 200GB.
func (o RocketmqVipInstanceOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketmqVipInstance) pulumi.IntOutput { return v.StorageSize }).(pulumi.IntOutput)
}

// Purchase period, in months.
func (o RocketmqVipInstanceOutput) TimeSpan() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketmqVipInstance) pulumi.IntOutput { return v.TimeSpan }).(pulumi.IntOutput)
}

// VPC information.
func (o RocketmqVipInstanceOutput) VpcInfo() RocketmqVipInstanceVpcInfoOutput {
	return o.ApplyT(func(v *RocketmqVipInstance) RocketmqVipInstanceVpcInfoOutput { return v.VpcInfo }).(RocketmqVipInstanceVpcInfoOutput)
}

// The Zone ID list for node deployment, such as Guangzhou Zone 1, is 100001. For details, please refer to the official website of Tencent Cloud.
func (o RocketmqVipInstanceOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RocketmqVipInstance) pulumi.StringArrayOutput { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

type RocketmqVipInstanceArrayOutput struct{ *pulumi.OutputState }

func (RocketmqVipInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketmqVipInstance)(nil)).Elem()
}

func (o RocketmqVipInstanceArrayOutput) ToRocketmqVipInstanceArrayOutput() RocketmqVipInstanceArrayOutput {
	return o
}

func (o RocketmqVipInstanceArrayOutput) ToRocketmqVipInstanceArrayOutputWithContext(ctx context.Context) RocketmqVipInstanceArrayOutput {
	return o
}

func (o RocketmqVipInstanceArrayOutput) Index(i pulumi.IntInput) RocketmqVipInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketmqVipInstance {
		return vs[0].([]*RocketmqVipInstance)[vs[1].(int)]
	}).(RocketmqVipInstanceOutput)
}

type RocketmqVipInstanceMapOutput struct{ *pulumi.OutputState }

func (RocketmqVipInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketmqVipInstance)(nil)).Elem()
}

func (o RocketmqVipInstanceMapOutput) ToRocketmqVipInstanceMapOutput() RocketmqVipInstanceMapOutput {
	return o
}

func (o RocketmqVipInstanceMapOutput) ToRocketmqVipInstanceMapOutputWithContext(ctx context.Context) RocketmqVipInstanceMapOutput {
	return o
}

func (o RocketmqVipInstanceMapOutput) MapIndex(k pulumi.StringInput) RocketmqVipInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketmqVipInstance {
		return vs[0].(map[string]*RocketmqVipInstance)[vs[1].(string)]
	}).(RocketmqVipInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqVipInstanceInput)(nil)).Elem(), &RocketmqVipInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqVipInstanceArrayInput)(nil)).Elem(), RocketmqVipInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqVipInstanceMapInput)(nil)).Elem(), RocketmqVipInstanceMap{})
	pulumi.RegisterOutputType(RocketmqVipInstanceOutput{})
	pulumi.RegisterOutputType(RocketmqVipInstanceArrayOutput{})
	pulumi.RegisterOutputType(RocketmqVipInstanceMapOutput{})
}
