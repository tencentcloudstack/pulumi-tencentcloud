// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tdmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tdmqRocketmq topic
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tdmq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleRocketmqCluster, err := Tdmq.NewRocketmqCluster(ctx, "exampleRocketmqCluster", &Tdmq.RocketmqClusterArgs{
//				ClusterName: pulumi.String("tf_example"),
//				Remark:      pulumi.String("remark."),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRocketmqNamespace, err := Tdmq.NewRocketmqNamespace(ctx, "exampleRocketmqNamespace", &Tdmq.RocketmqNamespaceArgs{
//				ClusterId:     exampleRocketmqCluster.ClusterId,
//				NamespaceName: pulumi.String("tf_example_namespace"),
//				Remark:        pulumi.String("remark."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tdmq.NewRocketmqTopic(ctx, "exampleRocketmqTopic", &Tdmq.RocketmqTopicArgs{
//				TopicName:     pulumi.String("tf_example"),
//				NamespaceName: exampleRocketmqNamespace.NamespaceName,
//				ClusterId:     exampleRocketmqCluster.ClusterId,
//				Type:          pulumi.String("Normal"),
//				Remark:        pulumi.String("remark."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tdmqRocketmq topic can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tdmq/rocketmqTopic:RocketmqTopic topic topic_id
//
// ```
type RocketmqTopic struct {
	pulumi.CustomResourceState

	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Creation time in milliseconds.
	CreateTime pulumi.IntOutput `pulumi:"createTime"`
	// Topic namespace. Currently, you can create topics only in one single namespace.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// Number of partitions.
	PartitionNum pulumi.IntPtrOutput `pulumi:"partitionNum"`
	// Topic remarks (up to 128 characters).
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Topic name, which can contain 3-64 letters, digits, hyphens, and underscores.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
	// Topic type. Valid values: Normal, GlobalOrder, PartitionedOrder.
	Type pulumi.StringOutput `pulumi:"type"`
	// Update time in milliseconds.
	UpdateTime pulumi.IntOutput `pulumi:"updateTime"`
}

// NewRocketmqTopic registers a new resource with the given unique name, arguments, and options.
func NewRocketmqTopic(ctx *pulumi.Context,
	name string, args *RocketmqTopicArgs, opts ...pulumi.ResourceOption) (*RocketmqTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocketmqTopic
	err := ctx.RegisterResource("tencentcloud:Tdmq/rocketmqTopic:RocketmqTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketmqTopic gets an existing RocketmqTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketmqTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketmqTopicState, opts ...pulumi.ResourceOption) (*RocketmqTopic, error) {
	var resource RocketmqTopic
	err := ctx.ReadResource("tencentcloud:Tdmq/rocketmqTopic:RocketmqTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketmqTopic resources.
type rocketmqTopicState struct {
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Creation time in milliseconds.
	CreateTime *int `pulumi:"createTime"`
	// Topic namespace. Currently, you can create topics only in one single namespace.
	NamespaceName *string `pulumi:"namespaceName"`
	// Number of partitions.
	PartitionNum *int `pulumi:"partitionNum"`
	// Topic remarks (up to 128 characters).
	Remark *string `pulumi:"remark"`
	// Topic name, which can contain 3-64 letters, digits, hyphens, and underscores.
	TopicName *string `pulumi:"topicName"`
	// Topic type. Valid values: Normal, GlobalOrder, PartitionedOrder.
	Type *string `pulumi:"type"`
	// Update time in milliseconds.
	UpdateTime *int `pulumi:"updateTime"`
}

type RocketmqTopicState struct {
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// Creation time in milliseconds.
	CreateTime pulumi.IntPtrInput
	// Topic namespace. Currently, you can create topics only in one single namespace.
	NamespaceName pulumi.StringPtrInput
	// Number of partitions.
	PartitionNum pulumi.IntPtrInput
	// Topic remarks (up to 128 characters).
	Remark pulumi.StringPtrInput
	// Topic name, which can contain 3-64 letters, digits, hyphens, and underscores.
	TopicName pulumi.StringPtrInput
	// Topic type. Valid values: Normal, GlobalOrder, PartitionedOrder.
	Type pulumi.StringPtrInput
	// Update time in milliseconds.
	UpdateTime pulumi.IntPtrInput
}

func (RocketmqTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketmqTopicState)(nil)).Elem()
}

type rocketmqTopicArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// Topic namespace. Currently, you can create topics only in one single namespace.
	NamespaceName string `pulumi:"namespaceName"`
	// Number of partitions.
	PartitionNum *int `pulumi:"partitionNum"`
	// Topic remarks (up to 128 characters).
	Remark *string `pulumi:"remark"`
	// Topic name, which can contain 3-64 letters, digits, hyphens, and underscores.
	TopicName string `pulumi:"topicName"`
	// Topic type. Valid values: Normal, GlobalOrder, PartitionedOrder.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a RocketmqTopic resource.
type RocketmqTopicArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput
	// Topic namespace. Currently, you can create topics only in one single namespace.
	NamespaceName pulumi.StringInput
	// Number of partitions.
	PartitionNum pulumi.IntPtrInput
	// Topic remarks (up to 128 characters).
	Remark pulumi.StringPtrInput
	// Topic name, which can contain 3-64 letters, digits, hyphens, and underscores.
	TopicName pulumi.StringInput
	// Topic type. Valid values: Normal, GlobalOrder, PartitionedOrder.
	Type pulumi.StringInput
}

func (RocketmqTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketmqTopicArgs)(nil)).Elem()
}

type RocketmqTopicInput interface {
	pulumi.Input

	ToRocketmqTopicOutput() RocketmqTopicOutput
	ToRocketmqTopicOutputWithContext(ctx context.Context) RocketmqTopicOutput
}

func (*RocketmqTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketmqTopic)(nil)).Elem()
}

func (i *RocketmqTopic) ToRocketmqTopicOutput() RocketmqTopicOutput {
	return i.ToRocketmqTopicOutputWithContext(context.Background())
}

func (i *RocketmqTopic) ToRocketmqTopicOutputWithContext(ctx context.Context) RocketmqTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqTopicOutput)
}

// RocketmqTopicArrayInput is an input type that accepts RocketmqTopicArray and RocketmqTopicArrayOutput values.
// You can construct a concrete instance of `RocketmqTopicArrayInput` via:
//
//	RocketmqTopicArray{ RocketmqTopicArgs{...} }
type RocketmqTopicArrayInput interface {
	pulumi.Input

	ToRocketmqTopicArrayOutput() RocketmqTopicArrayOutput
	ToRocketmqTopicArrayOutputWithContext(context.Context) RocketmqTopicArrayOutput
}

type RocketmqTopicArray []RocketmqTopicInput

func (RocketmqTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketmqTopic)(nil)).Elem()
}

func (i RocketmqTopicArray) ToRocketmqTopicArrayOutput() RocketmqTopicArrayOutput {
	return i.ToRocketmqTopicArrayOutputWithContext(context.Background())
}

func (i RocketmqTopicArray) ToRocketmqTopicArrayOutputWithContext(ctx context.Context) RocketmqTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqTopicArrayOutput)
}

// RocketmqTopicMapInput is an input type that accepts RocketmqTopicMap and RocketmqTopicMapOutput values.
// You can construct a concrete instance of `RocketmqTopicMapInput` via:
//
//	RocketmqTopicMap{ "key": RocketmqTopicArgs{...} }
type RocketmqTopicMapInput interface {
	pulumi.Input

	ToRocketmqTopicMapOutput() RocketmqTopicMapOutput
	ToRocketmqTopicMapOutputWithContext(context.Context) RocketmqTopicMapOutput
}

type RocketmqTopicMap map[string]RocketmqTopicInput

func (RocketmqTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketmqTopic)(nil)).Elem()
}

func (i RocketmqTopicMap) ToRocketmqTopicMapOutput() RocketmqTopicMapOutput {
	return i.ToRocketmqTopicMapOutputWithContext(context.Background())
}

func (i RocketmqTopicMap) ToRocketmqTopicMapOutputWithContext(ctx context.Context) RocketmqTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqTopicMapOutput)
}

type RocketmqTopicOutput struct{ *pulumi.OutputState }

func (RocketmqTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketmqTopic)(nil)).Elem()
}

func (o RocketmqTopicOutput) ToRocketmqTopicOutput() RocketmqTopicOutput {
	return o
}

func (o RocketmqTopicOutput) ToRocketmqTopicOutputWithContext(ctx context.Context) RocketmqTopicOutput {
	return o
}

// Cluster ID.
func (o RocketmqTopicOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Creation time in milliseconds.
func (o RocketmqTopicOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

// Topic namespace. Currently, you can create topics only in one single namespace.
func (o RocketmqTopicOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// Number of partitions.
func (o RocketmqTopicOutput) PartitionNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.IntPtrOutput { return v.PartitionNum }).(pulumi.IntPtrOutput)
}

// Topic remarks (up to 128 characters).
func (o RocketmqTopicOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Topic name, which can contain 3-64 letters, digits, hyphens, and underscores.
func (o RocketmqTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

// Topic type. Valid values: Normal, GlobalOrder, PartitionedOrder.
func (o RocketmqTopicOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Update time in milliseconds.
func (o RocketmqTopicOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketmqTopic) pulumi.IntOutput { return v.UpdateTime }).(pulumi.IntOutput)
}

type RocketmqTopicArrayOutput struct{ *pulumi.OutputState }

func (RocketmqTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketmqTopic)(nil)).Elem()
}

func (o RocketmqTopicArrayOutput) ToRocketmqTopicArrayOutput() RocketmqTopicArrayOutput {
	return o
}

func (o RocketmqTopicArrayOutput) ToRocketmqTopicArrayOutputWithContext(ctx context.Context) RocketmqTopicArrayOutput {
	return o
}

func (o RocketmqTopicArrayOutput) Index(i pulumi.IntInput) RocketmqTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketmqTopic {
		return vs[0].([]*RocketmqTopic)[vs[1].(int)]
	}).(RocketmqTopicOutput)
}

type RocketmqTopicMapOutput struct{ *pulumi.OutputState }

func (RocketmqTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketmqTopic)(nil)).Elem()
}

func (o RocketmqTopicMapOutput) ToRocketmqTopicMapOutput() RocketmqTopicMapOutput {
	return o
}

func (o RocketmqTopicMapOutput) ToRocketmqTopicMapOutputWithContext(ctx context.Context) RocketmqTopicMapOutput {
	return o
}

func (o RocketmqTopicMapOutput) MapIndex(k pulumi.StringInput) RocketmqTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketmqTopic {
		return vs[0].(map[string]*RocketmqTopic)[vs[1].(string)]
	}).(RocketmqTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqTopicInput)(nil)).Elem(), &RocketmqTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqTopicArrayInput)(nil)).Elem(), RocketmqTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqTopicMapInput)(nil)).Elem(), RocketmqTopicMap{})
	pulumi.RegisterOutputType(RocketmqTopicOutput{})
	pulumi.RegisterOutputType(RocketmqTopicArrayOutput{})
	pulumi.RegisterOutputType(RocketmqTopicMapOutput{})
}
