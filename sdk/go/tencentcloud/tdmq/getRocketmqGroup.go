// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tdmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of tdmqRocketmq group
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tdmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tdmq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleRocketmqCluster, err := Tdmq.NewRocketmqCluster(ctx, "exampleRocketmqCluster", &Tdmq.RocketmqClusterArgs{
//				ClusterName: pulumi.String("tf_example"),
//				Remark:      pulumi.String("remark."),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRocketmqNamespace, err := Tdmq.NewRocketmqNamespace(ctx, "exampleRocketmqNamespace", &Tdmq.RocketmqNamespaceArgs{
//				ClusterId:     exampleRocketmqCluster.ClusterId,
//				NamespaceName: pulumi.String("tf_example"),
//				Remark:        pulumi.String("remark."),
//			})
//			if err != nil {
//				return err
//			}
//			_ = Tdmq.GetRocketmqGroupOutput(ctx, tdmq.GetRocketmqGroupOutputArgs{
//				ClusterId:   exampleRocketmqCluster.ClusterId,
//				NamespaceId: exampleRocketmqNamespace.NamespaceName,
//				FilterGroup: exampleTdmq / rocketmqGroupRocketmqGroup.GroupName,
//			}, nil)
//			_, err = Tdmq.NewRocketmqGroup(ctx, "exampleTdmq/rocketmqGroupRocketmqGroup", &Tdmq.RocketmqGroupArgs{
//				GroupName:       pulumi.String("tf_example"),
//				Namespace:       exampleRocketmqNamespace.NamespaceName,
//				ReadEnable:      pulumi.Bool(true),
//				BroadcastEnable: pulumi.Bool(true),
//				ClusterId:       exampleRocketmqCluster.ClusterId,
//				Remark:          pulumi.String("remark."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRocketmqGroup(ctx *pulumi.Context, args *LookupRocketmqGroupArgs, opts ...pulumi.InvokeOption) (*LookupRocketmqGroupResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupRocketmqGroupResult
	err := ctx.Invoke("tencentcloud:Tdmq/getRocketmqGroup:getRocketmqGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRocketmqGroup.
type LookupRocketmqGroupArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// Consumer group query by consumer group name. Fuzzy query is supported.
	FilterGroup *string `pulumi:"filterGroup"`
	// Subscription group name. After it is specified, the information of only this subscription group will be returned.
	FilterOneGroup *string `pulumi:"filterOneGroup"`
	// Topic name, which can be used to query all subscription groups under the topic.
	FilterTopic *string `pulumi:"filterTopic"`
	// Namespace.
	NamespaceId string `pulumi:"namespaceId"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getRocketmqGroup.
type LookupRocketmqGroupResult struct {
	ClusterId      string  `pulumi:"clusterId"`
	FilterGroup    *string `pulumi:"filterGroup"`
	FilterOneGroup *string `pulumi:"filterOneGroup"`
	FilterTopic    *string `pulumi:"filterTopic"`
	// List of subscription groups.
	Groups []GetRocketmqGroupGroup `pulumi:"groups"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	NamespaceId      string  `pulumi:"namespaceId"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func LookupRocketmqGroupOutput(ctx *pulumi.Context, args LookupRocketmqGroupOutputArgs, opts ...pulumi.InvokeOption) LookupRocketmqGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRocketmqGroupResult, error) {
			args := v.(LookupRocketmqGroupArgs)
			r, err := LookupRocketmqGroup(ctx, &args, opts...)
			var s LookupRocketmqGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRocketmqGroupResultOutput)
}

// A collection of arguments for invoking getRocketmqGroup.
type LookupRocketmqGroupOutputArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// Consumer group query by consumer group name. Fuzzy query is supported.
	FilterGroup pulumi.StringPtrInput `pulumi:"filterGroup"`
	// Subscription group name. After it is specified, the information of only this subscription group will be returned.
	FilterOneGroup pulumi.StringPtrInput `pulumi:"filterOneGroup"`
	// Topic name, which can be used to query all subscription groups under the topic.
	FilterTopic pulumi.StringPtrInput `pulumi:"filterTopic"`
	// Namespace.
	NamespaceId pulumi.StringInput `pulumi:"namespaceId"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (LookupRocketmqGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRocketmqGroupArgs)(nil)).Elem()
}

// A collection of values returned by getRocketmqGroup.
type LookupRocketmqGroupResultOutput struct{ *pulumi.OutputState }

func (LookupRocketmqGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRocketmqGroupResult)(nil)).Elem()
}

func (o LookupRocketmqGroupResultOutput) ToLookupRocketmqGroupResultOutput() LookupRocketmqGroupResultOutput {
	return o
}

func (o LookupRocketmqGroupResultOutput) ToLookupRocketmqGroupResultOutputWithContext(ctx context.Context) LookupRocketmqGroupResultOutput {
	return o
}

func (o LookupRocketmqGroupResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRocketmqGroupResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o LookupRocketmqGroupResultOutput) FilterGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRocketmqGroupResult) *string { return v.FilterGroup }).(pulumi.StringPtrOutput)
}

func (o LookupRocketmqGroupResultOutput) FilterOneGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRocketmqGroupResult) *string { return v.FilterOneGroup }).(pulumi.StringPtrOutput)
}

func (o LookupRocketmqGroupResultOutput) FilterTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRocketmqGroupResult) *string { return v.FilterTopic }).(pulumi.StringPtrOutput)
}

// List of subscription groups.
func (o LookupRocketmqGroupResultOutput) Groups() GetRocketmqGroupGroupArrayOutput {
	return o.ApplyT(func(v LookupRocketmqGroupResult) []GetRocketmqGroupGroup { return v.Groups }).(GetRocketmqGroupGroupArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRocketmqGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRocketmqGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRocketmqGroupResultOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRocketmqGroupResult) string { return v.NamespaceId }).(pulumi.StringOutput)
}

func (o LookupRocketmqGroupResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRocketmqGroupResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRocketmqGroupResultOutput{})
}
