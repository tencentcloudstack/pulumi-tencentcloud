// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tdmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tdmq professionalCluster
//
// ## Example Usage
// ### single-zone Professional Cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tdmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tdmq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tdmq.NewProfessionalCluster(ctx, "professionalCluster", &Tdmq.ProfessionalClusterArgs{
//				AutoRenewFlag: pulumi.Int(1),
//				ClusterName:   pulumi.String("single_zone_cluster"),
//				ProductName:   pulumi.String("PULSAR.P1.MINI2"),
//				StorageSize:   pulumi.Int(600),
//				Tags: pulumi.AnyMap{
//					"createby": pulumi.Any("terrafrom"),
//				},
//				Vpc: &tdmq.ProfessionalClusterVpcArgs{
//					SubnetId: pulumi.String("subnet-xxxx"),
//					VpcId:    pulumi.String("vpc-xxxx"),
//				},
//				ZoneIds: pulumi.IntArray{
//					pulumi.Int(100004),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Multi-zone Professional Cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tdmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tdmq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tdmq.NewProfessionalCluster(ctx, "professionalCluster", &Tdmq.ProfessionalClusterArgs{
//				AutoRenewFlag: pulumi.Int(1),
//				ClusterName:   pulumi.String("multi_zone_cluster"),
//				ProductName:   pulumi.String("PULSAR.P1.MINI2"),
//				StorageSize:   pulumi.Int(200),
//				Tags: pulumi.AnyMap{
//					"key":  pulumi.Any("value1"),
//					"key2": pulumi.Any("value2"),
//				},
//				Vpc: &tdmq.ProfessionalClusterVpcArgs{
//					SubnetId: pulumi.String("subnet-xxxx"),
//					VpcId:    pulumi.String("vpc-xxxx"),
//				},
//				ZoneIds: pulumi.IntArray{
//					pulumi.Int(330001),
//					pulumi.Int(330002),
//					pulumi.Int(330003),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tdmq professional_cluster can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tdmq/professionalCluster:ProfessionalCluster professional_cluster professional_cluster_id
//
// ```
type ProfessionalCluster struct {
	pulumi.CustomResourceState

	// Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
	AutoRenewFlag pulumi.IntOutput `pulumi:"autoRenewFlag"`
	// Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
	AutoVoucher pulumi.IntOutput `pulumi:"autoVoucher"`
	// Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
	ProductName pulumi.StringOutput `pulumi:"productName"`
	// Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
	StorageSize pulumi.IntOutput `pulumi:"storageSize"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// Purchase duration, value range: 1~50. Default: 1.
	TimeSpan pulumi.IntOutput `pulumi:"timeSpan"`
	// Label of VPC network.
	Vpc ProfessionalClusterVpcPtrOutput `pulumi:"vpc"`
	// Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
	ZoneIds pulumi.IntArrayOutput `pulumi:"zoneIds"`
}

// NewProfessionalCluster registers a new resource with the given unique name, arguments, and options.
func NewProfessionalCluster(ctx *pulumi.Context,
	name string, args *ProfessionalClusterArgs, opts ...pulumi.ResourceOption) (*ProfessionalCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoRenewFlag == nil {
		return nil, errors.New("invalid value for required argument 'AutoRenewFlag'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ProductName == nil {
		return nil, errors.New("invalid value for required argument 'ProductName'")
	}
	if args.StorageSize == nil {
		return nil, errors.New("invalid value for required argument 'StorageSize'")
	}
	if args.ZoneIds == nil {
		return nil, errors.New("invalid value for required argument 'ZoneIds'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ProfessionalCluster
	err := ctx.RegisterResource("tencentcloud:Tdmq/professionalCluster:ProfessionalCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfessionalCluster gets an existing ProfessionalCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfessionalCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfessionalClusterState, opts ...pulumi.ResourceOption) (*ProfessionalCluster, error) {
	var resource ProfessionalCluster
	err := ctx.ReadResource("tencentcloud:Tdmq/professionalCluster:ProfessionalCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfessionalCluster resources.
type professionalClusterState struct {
	// Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
	AutoVoucher *int `pulumi:"autoVoucher"`
	// Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
	ClusterName *string `pulumi:"clusterName"`
	// Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
	ProductName *string `pulumi:"productName"`
	// Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
	StorageSize *int `pulumi:"storageSize"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// Purchase duration, value range: 1~50. Default: 1.
	TimeSpan *int `pulumi:"timeSpan"`
	// Label of VPC network.
	Vpc *ProfessionalClusterVpc `pulumi:"vpc"`
	// Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
	ZoneIds []int `pulumi:"zoneIds"`
}

type ProfessionalClusterState struct {
	// Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
	AutoRenewFlag pulumi.IntPtrInput
	// Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
	AutoVoucher pulumi.IntPtrInput
	// Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
	ClusterName pulumi.StringPtrInput
	// Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
	ProductName pulumi.StringPtrInput
	// Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
	StorageSize pulumi.IntPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// Purchase duration, value range: 1~50. Default: 1.
	TimeSpan pulumi.IntPtrInput
	// Label of VPC network.
	Vpc ProfessionalClusterVpcPtrInput
	// Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
	ZoneIds pulumi.IntArrayInput
}

func (ProfessionalClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*professionalClusterState)(nil)).Elem()
}

type professionalClusterArgs struct {
	// Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
	AutoRenewFlag int `pulumi:"autoRenewFlag"`
	// Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
	AutoVoucher *int `pulumi:"autoVoucher"`
	// Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
	ClusterName string `pulumi:"clusterName"`
	// Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
	ProductName string `pulumi:"productName"`
	// Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
	StorageSize int `pulumi:"storageSize"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// Purchase duration, value range: 1~50. Default: 1.
	TimeSpan *int `pulumi:"timeSpan"`
	// Label of VPC network.
	Vpc *ProfessionalClusterVpc `pulumi:"vpc"`
	// Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
	ZoneIds []int `pulumi:"zoneIds"`
}

// The set of arguments for constructing a ProfessionalCluster resource.
type ProfessionalClusterArgs struct {
	// Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
	AutoRenewFlag pulumi.IntInput
	// Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
	AutoVoucher pulumi.IntPtrInput
	// Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
	ClusterName pulumi.StringInput
	// Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
	ProductName pulumi.StringInput
	// Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
	StorageSize pulumi.IntInput
	// Tag description list.
	Tags pulumi.MapInput
	// Purchase duration, value range: 1~50. Default: 1.
	TimeSpan pulumi.IntPtrInput
	// Label of VPC network.
	Vpc ProfessionalClusterVpcPtrInput
	// Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
	ZoneIds pulumi.IntArrayInput
}

func (ProfessionalClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*professionalClusterArgs)(nil)).Elem()
}

type ProfessionalClusterInput interface {
	pulumi.Input

	ToProfessionalClusterOutput() ProfessionalClusterOutput
	ToProfessionalClusterOutputWithContext(ctx context.Context) ProfessionalClusterOutput
}

func (*ProfessionalCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfessionalCluster)(nil)).Elem()
}

func (i *ProfessionalCluster) ToProfessionalClusterOutput() ProfessionalClusterOutput {
	return i.ToProfessionalClusterOutputWithContext(context.Background())
}

func (i *ProfessionalCluster) ToProfessionalClusterOutputWithContext(ctx context.Context) ProfessionalClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfessionalClusterOutput)
}

// ProfessionalClusterArrayInput is an input type that accepts ProfessionalClusterArray and ProfessionalClusterArrayOutput values.
// You can construct a concrete instance of `ProfessionalClusterArrayInput` via:
//
//	ProfessionalClusterArray{ ProfessionalClusterArgs{...} }
type ProfessionalClusterArrayInput interface {
	pulumi.Input

	ToProfessionalClusterArrayOutput() ProfessionalClusterArrayOutput
	ToProfessionalClusterArrayOutputWithContext(context.Context) ProfessionalClusterArrayOutput
}

type ProfessionalClusterArray []ProfessionalClusterInput

func (ProfessionalClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfessionalCluster)(nil)).Elem()
}

func (i ProfessionalClusterArray) ToProfessionalClusterArrayOutput() ProfessionalClusterArrayOutput {
	return i.ToProfessionalClusterArrayOutputWithContext(context.Background())
}

func (i ProfessionalClusterArray) ToProfessionalClusterArrayOutputWithContext(ctx context.Context) ProfessionalClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfessionalClusterArrayOutput)
}

// ProfessionalClusterMapInput is an input type that accepts ProfessionalClusterMap and ProfessionalClusterMapOutput values.
// You can construct a concrete instance of `ProfessionalClusterMapInput` via:
//
//	ProfessionalClusterMap{ "key": ProfessionalClusterArgs{...} }
type ProfessionalClusterMapInput interface {
	pulumi.Input

	ToProfessionalClusterMapOutput() ProfessionalClusterMapOutput
	ToProfessionalClusterMapOutputWithContext(context.Context) ProfessionalClusterMapOutput
}

type ProfessionalClusterMap map[string]ProfessionalClusterInput

func (ProfessionalClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfessionalCluster)(nil)).Elem()
}

func (i ProfessionalClusterMap) ToProfessionalClusterMapOutput() ProfessionalClusterMapOutput {
	return i.ToProfessionalClusterMapOutputWithContext(context.Background())
}

func (i ProfessionalClusterMap) ToProfessionalClusterMapOutputWithContext(ctx context.Context) ProfessionalClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfessionalClusterMapOutput)
}

type ProfessionalClusterOutput struct{ *pulumi.OutputState }

func (ProfessionalClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfessionalCluster)(nil)).Elem()
}

func (o ProfessionalClusterOutput) ToProfessionalClusterOutput() ProfessionalClusterOutput {
	return o
}

func (o ProfessionalClusterOutput) ToProfessionalClusterOutputWithContext(ctx context.Context) ProfessionalClusterOutput {
	return o
}

// Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
func (o ProfessionalClusterOutput) AutoRenewFlag() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfessionalCluster) pulumi.IntOutput { return v.AutoRenewFlag }).(pulumi.IntOutput)
}

// Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
func (o ProfessionalClusterOutput) AutoVoucher() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfessionalCluster) pulumi.IntOutput { return v.AutoVoucher }).(pulumi.IntOutput)
}

// Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
func (o ProfessionalClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfessionalCluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
func (o ProfessionalClusterOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfessionalCluster) pulumi.StringOutput { return v.ProductName }).(pulumi.StringOutput)
}

// Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
func (o ProfessionalClusterOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfessionalCluster) pulumi.IntOutput { return v.StorageSize }).(pulumi.IntOutput)
}

// Tag description list.
func (o ProfessionalClusterOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *ProfessionalCluster) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// Purchase duration, value range: 1~50. Default: 1.
func (o ProfessionalClusterOutput) TimeSpan() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfessionalCluster) pulumi.IntOutput { return v.TimeSpan }).(pulumi.IntOutput)
}

// Label of VPC network.
func (o ProfessionalClusterOutput) Vpc() ProfessionalClusterVpcPtrOutput {
	return o.ApplyT(func(v *ProfessionalCluster) ProfessionalClusterVpcPtrOutput { return v.Vpc }).(ProfessionalClusterVpcPtrOutput)
}

// Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
func (o ProfessionalClusterOutput) ZoneIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ProfessionalCluster) pulumi.IntArrayOutput { return v.ZoneIds }).(pulumi.IntArrayOutput)
}

type ProfessionalClusterArrayOutput struct{ *pulumi.OutputState }

func (ProfessionalClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfessionalCluster)(nil)).Elem()
}

func (o ProfessionalClusterArrayOutput) ToProfessionalClusterArrayOutput() ProfessionalClusterArrayOutput {
	return o
}

func (o ProfessionalClusterArrayOutput) ToProfessionalClusterArrayOutputWithContext(ctx context.Context) ProfessionalClusterArrayOutput {
	return o
}

func (o ProfessionalClusterArrayOutput) Index(i pulumi.IntInput) ProfessionalClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProfessionalCluster {
		return vs[0].([]*ProfessionalCluster)[vs[1].(int)]
	}).(ProfessionalClusterOutput)
}

type ProfessionalClusterMapOutput struct{ *pulumi.OutputState }

func (ProfessionalClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfessionalCluster)(nil)).Elem()
}

func (o ProfessionalClusterMapOutput) ToProfessionalClusterMapOutput() ProfessionalClusterMapOutput {
	return o
}

func (o ProfessionalClusterMapOutput) ToProfessionalClusterMapOutputWithContext(ctx context.Context) ProfessionalClusterMapOutput {
	return o
}

func (o ProfessionalClusterMapOutput) MapIndex(k pulumi.StringInput) ProfessionalClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProfessionalCluster {
		return vs[0].(map[string]*ProfessionalCluster)[vs[1].(string)]
	}).(ProfessionalClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfessionalClusterInput)(nil)).Elem(), &ProfessionalCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfessionalClusterArrayInput)(nil)).Elem(), ProfessionalClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfessionalClusterMapInput)(nil)).Elem(), ProfessionalClusterMap{})
	pulumi.RegisterOutputType(ProfessionalClusterOutput{})
	pulumi.RegisterOutputType(ProfessionalClusterArrayOutput{})
	pulumi.RegisterOutputType(ProfessionalClusterMapOutput{})
}
