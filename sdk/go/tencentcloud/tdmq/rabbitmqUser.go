// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tdmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tdmq rabbitmqUser
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tdmq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tdmq.NewRabbitmqUser(ctx, "rabbitmqUser", &Tdmq.RabbitmqUserArgs{
//				Description:    pulumi.String("test user"),
//				InstanceId:     pulumi.String("amqp-kzbe8p3n"),
//				MaxChannels:    pulumi.Int(3),
//				MaxConnections: pulumi.Int(3),
//				Password:       pulumi.String("asdf1234"),
//				Tags: pulumi.StringArray{
//					pulumi.String("management"),
//					pulumi.String("monitoring"),
//				},
//				User: pulumi.String("keep-user"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RabbitmqUser struct {
	pulumi.CustomResourceState

	// Describe.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Cluster instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The maximum number of channels for this user, if not filled in, there is no limit.
	MaxChannels pulumi.IntPtrOutput `pulumi:"maxChannels"`
	// The maximum number of connections for this user, if not filled in, there is no limit.
	MaxConnections pulumi.IntPtrOutput `pulumi:"maxConnections"`
	// Password, used when logging in.
	Password pulumi.StringOutput `pulumi:"password"`
	// User tag, used to determine the permission range for changing user access to RabbitMQ Management. Management: regular console user, monitoring: management console user, other values: non console user.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Username, used when logging in.
	User pulumi.StringOutput `pulumi:"user"`
}

// NewRabbitmqUser registers a new resource with the given unique name, arguments, and options.
func NewRabbitmqUser(ctx *pulumi.Context,
	name string, args *RabbitmqUserArgs, opts ...pulumi.ResourceOption) (*RabbitmqUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RabbitmqUser
	err := ctx.RegisterResource("tencentcloud:Tdmq/rabbitmqUser:RabbitmqUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRabbitmqUser gets an existing RabbitmqUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRabbitmqUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RabbitmqUserState, opts ...pulumi.ResourceOption) (*RabbitmqUser, error) {
	var resource RabbitmqUser
	err := ctx.ReadResource("tencentcloud:Tdmq/rabbitmqUser:RabbitmqUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RabbitmqUser resources.
type rabbitmqUserState struct {
	// Describe.
	Description *string `pulumi:"description"`
	// Cluster instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// The maximum number of channels for this user, if not filled in, there is no limit.
	MaxChannels *int `pulumi:"maxChannels"`
	// The maximum number of connections for this user, if not filled in, there is no limit.
	MaxConnections *int `pulumi:"maxConnections"`
	// Password, used when logging in.
	Password *string `pulumi:"password"`
	// User tag, used to determine the permission range for changing user access to RabbitMQ Management. Management: regular console user, monitoring: management console user, other values: non console user.
	Tags []string `pulumi:"tags"`
	// Username, used when logging in.
	User *string `pulumi:"user"`
}

type RabbitmqUserState struct {
	// Describe.
	Description pulumi.StringPtrInput
	// Cluster instance ID.
	InstanceId pulumi.StringPtrInput
	// The maximum number of channels for this user, if not filled in, there is no limit.
	MaxChannels pulumi.IntPtrInput
	// The maximum number of connections for this user, if not filled in, there is no limit.
	MaxConnections pulumi.IntPtrInput
	// Password, used when logging in.
	Password pulumi.StringPtrInput
	// User tag, used to determine the permission range for changing user access to RabbitMQ Management. Management: regular console user, monitoring: management console user, other values: non console user.
	Tags pulumi.StringArrayInput
	// Username, used when logging in.
	User pulumi.StringPtrInput
}

func (RabbitmqUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqUserState)(nil)).Elem()
}

type rabbitmqUserArgs struct {
	// Describe.
	Description *string `pulumi:"description"`
	// Cluster instance ID.
	InstanceId string `pulumi:"instanceId"`
	// The maximum number of channels for this user, if not filled in, there is no limit.
	MaxChannels *int `pulumi:"maxChannels"`
	// The maximum number of connections for this user, if not filled in, there is no limit.
	MaxConnections *int `pulumi:"maxConnections"`
	// Password, used when logging in.
	Password string `pulumi:"password"`
	// User tag, used to determine the permission range for changing user access to RabbitMQ Management. Management: regular console user, monitoring: management console user, other values: non console user.
	Tags []string `pulumi:"tags"`
	// Username, used when logging in.
	User string `pulumi:"user"`
}

// The set of arguments for constructing a RabbitmqUser resource.
type RabbitmqUserArgs struct {
	// Describe.
	Description pulumi.StringPtrInput
	// Cluster instance ID.
	InstanceId pulumi.StringInput
	// The maximum number of channels for this user, if not filled in, there is no limit.
	MaxChannels pulumi.IntPtrInput
	// The maximum number of connections for this user, if not filled in, there is no limit.
	MaxConnections pulumi.IntPtrInput
	// Password, used when logging in.
	Password pulumi.StringInput
	// User tag, used to determine the permission range for changing user access to RabbitMQ Management. Management: regular console user, monitoring: management console user, other values: non console user.
	Tags pulumi.StringArrayInput
	// Username, used when logging in.
	User pulumi.StringInput
}

func (RabbitmqUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqUserArgs)(nil)).Elem()
}

type RabbitmqUserInput interface {
	pulumi.Input

	ToRabbitmqUserOutput() RabbitmqUserOutput
	ToRabbitmqUserOutputWithContext(ctx context.Context) RabbitmqUserOutput
}

func (*RabbitmqUser) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqUser)(nil)).Elem()
}

func (i *RabbitmqUser) ToRabbitmqUserOutput() RabbitmqUserOutput {
	return i.ToRabbitmqUserOutputWithContext(context.Background())
}

func (i *RabbitmqUser) ToRabbitmqUserOutputWithContext(ctx context.Context) RabbitmqUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqUserOutput)
}

// RabbitmqUserArrayInput is an input type that accepts RabbitmqUserArray and RabbitmqUserArrayOutput values.
// You can construct a concrete instance of `RabbitmqUserArrayInput` via:
//
//	RabbitmqUserArray{ RabbitmqUserArgs{...} }
type RabbitmqUserArrayInput interface {
	pulumi.Input

	ToRabbitmqUserArrayOutput() RabbitmqUserArrayOutput
	ToRabbitmqUserArrayOutputWithContext(context.Context) RabbitmqUserArrayOutput
}

type RabbitmqUserArray []RabbitmqUserInput

func (RabbitmqUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqUser)(nil)).Elem()
}

func (i RabbitmqUserArray) ToRabbitmqUserArrayOutput() RabbitmqUserArrayOutput {
	return i.ToRabbitmqUserArrayOutputWithContext(context.Background())
}

func (i RabbitmqUserArray) ToRabbitmqUserArrayOutputWithContext(ctx context.Context) RabbitmqUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqUserArrayOutput)
}

// RabbitmqUserMapInput is an input type that accepts RabbitmqUserMap and RabbitmqUserMapOutput values.
// You can construct a concrete instance of `RabbitmqUserMapInput` via:
//
//	RabbitmqUserMap{ "key": RabbitmqUserArgs{...} }
type RabbitmqUserMapInput interface {
	pulumi.Input

	ToRabbitmqUserMapOutput() RabbitmqUserMapOutput
	ToRabbitmqUserMapOutputWithContext(context.Context) RabbitmqUserMapOutput
}

type RabbitmqUserMap map[string]RabbitmqUserInput

func (RabbitmqUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqUser)(nil)).Elem()
}

func (i RabbitmqUserMap) ToRabbitmqUserMapOutput() RabbitmqUserMapOutput {
	return i.ToRabbitmqUserMapOutputWithContext(context.Background())
}

func (i RabbitmqUserMap) ToRabbitmqUserMapOutputWithContext(ctx context.Context) RabbitmqUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqUserMapOutput)
}

type RabbitmqUserOutput struct{ *pulumi.OutputState }

func (RabbitmqUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqUser)(nil)).Elem()
}

func (o RabbitmqUserOutput) ToRabbitmqUserOutput() RabbitmqUserOutput {
	return o
}

func (o RabbitmqUserOutput) ToRabbitmqUserOutputWithContext(ctx context.Context) RabbitmqUserOutput {
	return o
}

// Describe.
func (o RabbitmqUserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqUser) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Cluster instance ID.
func (o RabbitmqUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The maximum number of channels for this user, if not filled in, there is no limit.
func (o RabbitmqUserOutput) MaxChannels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RabbitmqUser) pulumi.IntPtrOutput { return v.MaxChannels }).(pulumi.IntPtrOutput)
}

// The maximum number of connections for this user, if not filled in, there is no limit.
func (o RabbitmqUserOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RabbitmqUser) pulumi.IntPtrOutput { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// Password, used when logging in.
func (o RabbitmqUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// User tag, used to determine the permission range for changing user access to RabbitMQ Management. Management: regular console user, monitoring: management console user, other values: non console user.
func (o RabbitmqUserOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RabbitmqUser) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Username, used when logging in.
func (o RabbitmqUserOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqUser) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type RabbitmqUserArrayOutput struct{ *pulumi.OutputState }

func (RabbitmqUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqUser)(nil)).Elem()
}

func (o RabbitmqUserArrayOutput) ToRabbitmqUserArrayOutput() RabbitmqUserArrayOutput {
	return o
}

func (o RabbitmqUserArrayOutput) ToRabbitmqUserArrayOutputWithContext(ctx context.Context) RabbitmqUserArrayOutput {
	return o
}

func (o RabbitmqUserArrayOutput) Index(i pulumi.IntInput) RabbitmqUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RabbitmqUser {
		return vs[0].([]*RabbitmqUser)[vs[1].(int)]
	}).(RabbitmqUserOutput)
}

type RabbitmqUserMapOutput struct{ *pulumi.OutputState }

func (RabbitmqUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqUser)(nil)).Elem()
}

func (o RabbitmqUserMapOutput) ToRabbitmqUserMapOutput() RabbitmqUserMapOutput {
	return o
}

func (o RabbitmqUserMapOutput) ToRabbitmqUserMapOutputWithContext(ctx context.Context) RabbitmqUserMapOutput {
	return o
}

func (o RabbitmqUserMapOutput) MapIndex(k pulumi.StringInput) RabbitmqUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RabbitmqUser {
		return vs[0].(map[string]*RabbitmqUser)[vs[1].(string)]
	}).(RabbitmqUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqUserInput)(nil)).Elem(), &RabbitmqUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqUserArrayInput)(nil)).Elem(), RabbitmqUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqUserMapInput)(nil)).Elem(), RabbitmqUserMap{})
	pulumi.RegisterOutputType(RabbitmqUserOutput{})
	pulumi.RegisterOutputType(RabbitmqUserArrayOutput{})
	pulumi.RegisterOutputType(RabbitmqUserMapOutput{})
}
