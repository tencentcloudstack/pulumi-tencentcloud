// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tdmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tdmqRocketmq role
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tdmq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleRocketmqCluster, err := Tdmq.NewRocketmqCluster(ctx, "exampleRocketmqCluster", &Tdmq.RocketmqClusterArgs{
//				ClusterName: pulumi.String("tf_example"),
//				Remark:      pulumi.String("remark."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tdmq.NewRocketmqRole(ctx, "exampleRocketmqRole", &Tdmq.RocketmqRoleArgs{
//				ClusterId: exampleRocketmqCluster.ClusterId,
//				RoleName:  pulumi.String("tf_example"),
//				Remark:    pulumi.String("remark."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tdmqRocketmq role can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tdmq/rocketmqRole:RocketmqRole role role_id
//
// ```
type RocketmqRole struct {
	pulumi.CustomResourceState

	// Cluster ID (required).
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Remarks (up to 128 characters).
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Role name, which can contain up to 32 letters, digits, hyphens, and underscores.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// Value of the role token.
	Token pulumi.StringOutput `pulumi:"token"`
	// Update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRocketmqRole registers a new resource with the given unique name, arguments, and options.
func NewRocketmqRole(ctx *pulumi.Context,
	name string, args *RocketmqRoleArgs, opts ...pulumi.ResourceOption) (*RocketmqRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocketmqRole
	err := ctx.RegisterResource("tencentcloud:Tdmq/rocketmqRole:RocketmqRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketmqRole gets an existing RocketmqRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketmqRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketmqRoleState, opts ...pulumi.ResourceOption) (*RocketmqRole, error) {
	var resource RocketmqRole
	err := ctx.ReadResource("tencentcloud:Tdmq/rocketmqRole:RocketmqRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketmqRole resources.
type rocketmqRoleState struct {
	// Cluster ID (required).
	ClusterId *string `pulumi:"clusterId"`
	// Creation time.
	CreateTime *string `pulumi:"createTime"`
	// Remarks (up to 128 characters).
	Remark *string `pulumi:"remark"`
	// Role name, which can contain up to 32 letters, digits, hyphens, and underscores.
	RoleName *string `pulumi:"roleName"`
	// Value of the role token.
	Token *string `pulumi:"token"`
	// Update time.
	UpdateTime *string `pulumi:"updateTime"`
}

type RocketmqRoleState struct {
	// Cluster ID (required).
	ClusterId pulumi.StringPtrInput
	// Creation time.
	CreateTime pulumi.StringPtrInput
	// Remarks (up to 128 characters).
	Remark pulumi.StringPtrInput
	// Role name, which can contain up to 32 letters, digits, hyphens, and underscores.
	RoleName pulumi.StringPtrInput
	// Value of the role token.
	Token pulumi.StringPtrInput
	// Update time.
	UpdateTime pulumi.StringPtrInput
}

func (RocketmqRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketmqRoleState)(nil)).Elem()
}

type rocketmqRoleArgs struct {
	// Cluster ID (required).
	ClusterId string `pulumi:"clusterId"`
	// Remarks (up to 128 characters).
	Remark *string `pulumi:"remark"`
	// Role name, which can contain up to 32 letters, digits, hyphens, and underscores.
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a RocketmqRole resource.
type RocketmqRoleArgs struct {
	// Cluster ID (required).
	ClusterId pulumi.StringInput
	// Remarks (up to 128 characters).
	Remark pulumi.StringPtrInput
	// Role name, which can contain up to 32 letters, digits, hyphens, and underscores.
	RoleName pulumi.StringInput
}

func (RocketmqRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketmqRoleArgs)(nil)).Elem()
}

type RocketmqRoleInput interface {
	pulumi.Input

	ToRocketmqRoleOutput() RocketmqRoleOutput
	ToRocketmqRoleOutputWithContext(ctx context.Context) RocketmqRoleOutput
}

func (*RocketmqRole) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketmqRole)(nil)).Elem()
}

func (i *RocketmqRole) ToRocketmqRoleOutput() RocketmqRoleOutput {
	return i.ToRocketmqRoleOutputWithContext(context.Background())
}

func (i *RocketmqRole) ToRocketmqRoleOutputWithContext(ctx context.Context) RocketmqRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqRoleOutput)
}

// RocketmqRoleArrayInput is an input type that accepts RocketmqRoleArray and RocketmqRoleArrayOutput values.
// You can construct a concrete instance of `RocketmqRoleArrayInput` via:
//
//	RocketmqRoleArray{ RocketmqRoleArgs{...} }
type RocketmqRoleArrayInput interface {
	pulumi.Input

	ToRocketmqRoleArrayOutput() RocketmqRoleArrayOutput
	ToRocketmqRoleArrayOutputWithContext(context.Context) RocketmqRoleArrayOutput
}

type RocketmqRoleArray []RocketmqRoleInput

func (RocketmqRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketmqRole)(nil)).Elem()
}

func (i RocketmqRoleArray) ToRocketmqRoleArrayOutput() RocketmqRoleArrayOutput {
	return i.ToRocketmqRoleArrayOutputWithContext(context.Background())
}

func (i RocketmqRoleArray) ToRocketmqRoleArrayOutputWithContext(ctx context.Context) RocketmqRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqRoleArrayOutput)
}

// RocketmqRoleMapInput is an input type that accepts RocketmqRoleMap and RocketmqRoleMapOutput values.
// You can construct a concrete instance of `RocketmqRoleMapInput` via:
//
//	RocketmqRoleMap{ "key": RocketmqRoleArgs{...} }
type RocketmqRoleMapInput interface {
	pulumi.Input

	ToRocketmqRoleMapOutput() RocketmqRoleMapOutput
	ToRocketmqRoleMapOutputWithContext(context.Context) RocketmqRoleMapOutput
}

type RocketmqRoleMap map[string]RocketmqRoleInput

func (RocketmqRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketmqRole)(nil)).Elem()
}

func (i RocketmqRoleMap) ToRocketmqRoleMapOutput() RocketmqRoleMapOutput {
	return i.ToRocketmqRoleMapOutputWithContext(context.Background())
}

func (i RocketmqRoleMap) ToRocketmqRoleMapOutputWithContext(ctx context.Context) RocketmqRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketmqRoleMapOutput)
}

type RocketmqRoleOutput struct{ *pulumi.OutputState }

func (RocketmqRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketmqRole)(nil)).Elem()
}

func (o RocketmqRoleOutput) ToRocketmqRoleOutput() RocketmqRoleOutput {
	return o
}

func (o RocketmqRoleOutput) ToRocketmqRoleOutputWithContext(ctx context.Context) RocketmqRoleOutput {
	return o
}

// Cluster ID (required).
func (o RocketmqRoleOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqRole) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Creation time.
func (o RocketmqRoleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqRole) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Remarks (up to 128 characters).
func (o RocketmqRoleOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketmqRole) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Role name, which can contain up to 32 letters, digits, hyphens, and underscores.
func (o RocketmqRoleOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqRole) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

// Value of the role token.
func (o RocketmqRoleOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqRole) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Update time.
func (o RocketmqRoleOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketmqRole) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type RocketmqRoleArrayOutput struct{ *pulumi.OutputState }

func (RocketmqRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketmqRole)(nil)).Elem()
}

func (o RocketmqRoleArrayOutput) ToRocketmqRoleArrayOutput() RocketmqRoleArrayOutput {
	return o
}

func (o RocketmqRoleArrayOutput) ToRocketmqRoleArrayOutputWithContext(ctx context.Context) RocketmqRoleArrayOutput {
	return o
}

func (o RocketmqRoleArrayOutput) Index(i pulumi.IntInput) RocketmqRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketmqRole {
		return vs[0].([]*RocketmqRole)[vs[1].(int)]
	}).(RocketmqRoleOutput)
}

type RocketmqRoleMapOutput struct{ *pulumi.OutputState }

func (RocketmqRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketmqRole)(nil)).Elem()
}

func (o RocketmqRoleMapOutput) ToRocketmqRoleMapOutput() RocketmqRoleMapOutput {
	return o
}

func (o RocketmqRoleMapOutput) ToRocketmqRoleMapOutputWithContext(ctx context.Context) RocketmqRoleMapOutput {
	return o
}

func (o RocketmqRoleMapOutput) MapIndex(k pulumi.StringInput) RocketmqRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketmqRole {
		return vs[0].(map[string]*RocketmqRole)[vs[1].(string)]
	}).(RocketmqRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqRoleInput)(nil)).Elem(), &RocketmqRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqRoleArrayInput)(nil)).Elem(), RocketmqRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketmqRoleMapInput)(nil)).Elem(), RocketmqRoleMap{})
	pulumi.RegisterOutputType(RocketmqRoleOutput{})
	pulumi.RegisterOutputType(RocketmqRoleArrayOutput{})
	pulumi.RegisterOutputType(RocketmqRoleMapOutput{})
}
