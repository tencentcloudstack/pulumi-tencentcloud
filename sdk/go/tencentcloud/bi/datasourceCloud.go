// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bi

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a bi datasourceCloud
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Bi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Bi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Bi.NewDatasourceCloud(ctx, "datasourceCloud", &Bi.DatasourceCloudArgs{
//				Charset:   pulumi.String("utf8"),
//				DbName:    pulumi.String("bi_dev"),
//				DbPwd:     pulumi.String("xxxxxx"),
//				DbType:    pulumi.String("MYSQL"),
//				DbUser:    pulumi.String("root"),
//				ProjectId: pulumi.String("11015056"),
//				RegionId:  pulumi.String("gz"),
//				ServiceType: &bi.DatasourceCloudServiceTypeArgs{
//					InstanceId: pulumi.String("cdb-12viotu5"),
//					Region:     pulumi.String("ap-guangzhou"),
//					Type:       pulumi.String("Cloud"),
//				},
//				SourceName: pulumi.String("tf-test1"),
//				Vip:        pulumi.String("10.0.0.4"),
//				VpcId:      pulumi.String("5292713"),
//				Vport:      pulumi.String("3306"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DatasourceCloud struct {
	pulumi.CustomResourceState

	// Charset.
	Charset pulumi.StringOutput `pulumi:"charset"`
	// Cluster id.
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// Third-party datasource identification, this parameter can be ignored.
	DataOrigin pulumi.StringPtrOutput `pulumi:"dataOrigin"`
	// Third-party datasource project id, this parameter can be ignored.
	DataOriginDatasourceId pulumi.StringPtrOutput `pulumi:"dataOriginDatasourceId"`
	// Third-party datasource project id, this parameter can be ignored.
	DataOriginProjectId pulumi.StringPtrOutput `pulumi:"dataOriginProjectId"`
	// Database name.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// Password.
	DbPwd pulumi.StringOutput `pulumi:"dbPwd"`
	// `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
	DbType pulumi.StringOutput `pulumi:"dbType"`
	// User name.
	DbUser pulumi.StringOutput `pulumi:"dbUser"`
	// Extended parameters.
	ExtraParam pulumi.StringOutput `pulumi:"extraParam"`
	// Project id.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Region identifier.
	RegionId pulumi.StringPtrOutput `pulumi:"regionId"`
	// Service type, Own or Cloud.
	ServiceType DatasourceCloudServiceTypeOutput `pulumi:"serviceType"`
	// Datasource name in BI.
	SourceName pulumi.StringOutput `pulumi:"sourceName"`
	// Unified vpc identification.
	UniqVpcId pulumi.StringPtrOutput `pulumi:"uniqVpcId"`
	// Public cloud intranet ip.
	Vip pulumi.StringPtrOutput `pulumi:"vip"`
	// Vpc identification.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Public cloud intranet port.
	Vport pulumi.StringPtrOutput `pulumi:"vport"`
}

// NewDatasourceCloud registers a new resource with the given unique name, arguments, and options.
func NewDatasourceCloud(ctx *pulumi.Context,
	name string, args *DatasourceCloudArgs, opts ...pulumi.ResourceOption) (*DatasourceCloud, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Charset == nil {
		return nil, errors.New("invalid value for required argument 'Charset'")
	}
	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	if args.DbPwd == nil {
		return nil, errors.New("invalid value for required argument 'DbPwd'")
	}
	if args.DbType == nil {
		return nil, errors.New("invalid value for required argument 'DbType'")
	}
	if args.DbUser == nil {
		return nil, errors.New("invalid value for required argument 'DbUser'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ServiceType == nil {
		return nil, errors.New("invalid value for required argument 'ServiceType'")
	}
	if args.SourceName == nil {
		return nil, errors.New("invalid value for required argument 'SourceName'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DatasourceCloud
	err := ctx.RegisterResource("tencentcloud:Bi/datasourceCloud:DatasourceCloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasourceCloud gets an existing DatasourceCloud resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasourceCloud(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasourceCloudState, opts ...pulumi.ResourceOption) (*DatasourceCloud, error) {
	var resource DatasourceCloud
	err := ctx.ReadResource("tencentcloud:Bi/datasourceCloud:DatasourceCloud", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasourceCloud resources.
type datasourceCloudState struct {
	// Charset.
	Charset *string `pulumi:"charset"`
	// Cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// Third-party datasource identification, this parameter can be ignored.
	DataOrigin *string `pulumi:"dataOrigin"`
	// Third-party datasource project id, this parameter can be ignored.
	DataOriginDatasourceId *string `pulumi:"dataOriginDatasourceId"`
	// Third-party datasource project id, this parameter can be ignored.
	DataOriginProjectId *string `pulumi:"dataOriginProjectId"`
	// Database name.
	DbName *string `pulumi:"dbName"`
	// Password.
	DbPwd *string `pulumi:"dbPwd"`
	// `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
	DbType *string `pulumi:"dbType"`
	// User name.
	DbUser *string `pulumi:"dbUser"`
	// Extended parameters.
	ExtraParam *string `pulumi:"extraParam"`
	// Project id.
	ProjectId *string `pulumi:"projectId"`
	// Region identifier.
	RegionId *string `pulumi:"regionId"`
	// Service type, Own or Cloud.
	ServiceType *DatasourceCloudServiceType `pulumi:"serviceType"`
	// Datasource name in BI.
	SourceName *string `pulumi:"sourceName"`
	// Unified vpc identification.
	UniqVpcId *string `pulumi:"uniqVpcId"`
	// Public cloud intranet ip.
	Vip *string `pulumi:"vip"`
	// Vpc identification.
	VpcId *string `pulumi:"vpcId"`
	// Public cloud intranet port.
	Vport *string `pulumi:"vport"`
}

type DatasourceCloudState struct {
	// Charset.
	Charset pulumi.StringPtrInput
	// Cluster id.
	ClusterId pulumi.StringPtrInput
	// Third-party datasource identification, this parameter can be ignored.
	DataOrigin pulumi.StringPtrInput
	// Third-party datasource project id, this parameter can be ignored.
	DataOriginDatasourceId pulumi.StringPtrInput
	// Third-party datasource project id, this parameter can be ignored.
	DataOriginProjectId pulumi.StringPtrInput
	// Database name.
	DbName pulumi.StringPtrInput
	// Password.
	DbPwd pulumi.StringPtrInput
	// `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
	DbType pulumi.StringPtrInput
	// User name.
	DbUser pulumi.StringPtrInput
	// Extended parameters.
	ExtraParam pulumi.StringPtrInput
	// Project id.
	ProjectId pulumi.StringPtrInput
	// Region identifier.
	RegionId pulumi.StringPtrInput
	// Service type, Own or Cloud.
	ServiceType DatasourceCloudServiceTypePtrInput
	// Datasource name in BI.
	SourceName pulumi.StringPtrInput
	// Unified vpc identification.
	UniqVpcId pulumi.StringPtrInput
	// Public cloud intranet ip.
	Vip pulumi.StringPtrInput
	// Vpc identification.
	VpcId pulumi.StringPtrInput
	// Public cloud intranet port.
	Vport pulumi.StringPtrInput
}

func (DatasourceCloudState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasourceCloudState)(nil)).Elem()
}

type datasourceCloudArgs struct {
	// Charset.
	Charset string `pulumi:"charset"`
	// Cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// Third-party datasource identification, this parameter can be ignored.
	DataOrigin *string `pulumi:"dataOrigin"`
	// Third-party datasource project id, this parameter can be ignored.
	DataOriginDatasourceId *string `pulumi:"dataOriginDatasourceId"`
	// Third-party datasource project id, this parameter can be ignored.
	DataOriginProjectId *string `pulumi:"dataOriginProjectId"`
	// Database name.
	DbName string `pulumi:"dbName"`
	// Password.
	DbPwd string `pulumi:"dbPwd"`
	// `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
	DbType string `pulumi:"dbType"`
	// User name.
	DbUser string `pulumi:"dbUser"`
	// Extended parameters.
	ExtraParam *string `pulumi:"extraParam"`
	// Project id.
	ProjectId string `pulumi:"projectId"`
	// Region identifier.
	RegionId *string `pulumi:"regionId"`
	// Service type, Own or Cloud.
	ServiceType DatasourceCloudServiceType `pulumi:"serviceType"`
	// Datasource name in BI.
	SourceName string `pulumi:"sourceName"`
	// Unified vpc identification.
	UniqVpcId *string `pulumi:"uniqVpcId"`
	// Public cloud intranet ip.
	Vip *string `pulumi:"vip"`
	// Vpc identification.
	VpcId string `pulumi:"vpcId"`
	// Public cloud intranet port.
	Vport *string `pulumi:"vport"`
}

// The set of arguments for constructing a DatasourceCloud resource.
type DatasourceCloudArgs struct {
	// Charset.
	Charset pulumi.StringInput
	// Cluster id.
	ClusterId pulumi.StringPtrInput
	// Third-party datasource identification, this parameter can be ignored.
	DataOrigin pulumi.StringPtrInput
	// Third-party datasource project id, this parameter can be ignored.
	DataOriginDatasourceId pulumi.StringPtrInput
	// Third-party datasource project id, this parameter can be ignored.
	DataOriginProjectId pulumi.StringPtrInput
	// Database name.
	DbName pulumi.StringInput
	// Password.
	DbPwd pulumi.StringInput
	// `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
	DbType pulumi.StringInput
	// User name.
	DbUser pulumi.StringInput
	// Extended parameters.
	ExtraParam pulumi.StringPtrInput
	// Project id.
	ProjectId pulumi.StringInput
	// Region identifier.
	RegionId pulumi.StringPtrInput
	// Service type, Own or Cloud.
	ServiceType DatasourceCloudServiceTypeInput
	// Datasource name in BI.
	SourceName pulumi.StringInput
	// Unified vpc identification.
	UniqVpcId pulumi.StringPtrInput
	// Public cloud intranet ip.
	Vip pulumi.StringPtrInput
	// Vpc identification.
	VpcId pulumi.StringInput
	// Public cloud intranet port.
	Vport pulumi.StringPtrInput
}

func (DatasourceCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasourceCloudArgs)(nil)).Elem()
}

type DatasourceCloudInput interface {
	pulumi.Input

	ToDatasourceCloudOutput() DatasourceCloudOutput
	ToDatasourceCloudOutputWithContext(ctx context.Context) DatasourceCloudOutput
}

func (*DatasourceCloud) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasourceCloud)(nil)).Elem()
}

func (i *DatasourceCloud) ToDatasourceCloudOutput() DatasourceCloudOutput {
	return i.ToDatasourceCloudOutputWithContext(context.Background())
}

func (i *DatasourceCloud) ToDatasourceCloudOutputWithContext(ctx context.Context) DatasourceCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasourceCloudOutput)
}

// DatasourceCloudArrayInput is an input type that accepts DatasourceCloudArray and DatasourceCloudArrayOutput values.
// You can construct a concrete instance of `DatasourceCloudArrayInput` via:
//
//	DatasourceCloudArray{ DatasourceCloudArgs{...} }
type DatasourceCloudArrayInput interface {
	pulumi.Input

	ToDatasourceCloudArrayOutput() DatasourceCloudArrayOutput
	ToDatasourceCloudArrayOutputWithContext(context.Context) DatasourceCloudArrayOutput
}

type DatasourceCloudArray []DatasourceCloudInput

func (DatasourceCloudArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasourceCloud)(nil)).Elem()
}

func (i DatasourceCloudArray) ToDatasourceCloudArrayOutput() DatasourceCloudArrayOutput {
	return i.ToDatasourceCloudArrayOutputWithContext(context.Background())
}

func (i DatasourceCloudArray) ToDatasourceCloudArrayOutputWithContext(ctx context.Context) DatasourceCloudArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasourceCloudArrayOutput)
}

// DatasourceCloudMapInput is an input type that accepts DatasourceCloudMap and DatasourceCloudMapOutput values.
// You can construct a concrete instance of `DatasourceCloudMapInput` via:
//
//	DatasourceCloudMap{ "key": DatasourceCloudArgs{...} }
type DatasourceCloudMapInput interface {
	pulumi.Input

	ToDatasourceCloudMapOutput() DatasourceCloudMapOutput
	ToDatasourceCloudMapOutputWithContext(context.Context) DatasourceCloudMapOutput
}

type DatasourceCloudMap map[string]DatasourceCloudInput

func (DatasourceCloudMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasourceCloud)(nil)).Elem()
}

func (i DatasourceCloudMap) ToDatasourceCloudMapOutput() DatasourceCloudMapOutput {
	return i.ToDatasourceCloudMapOutputWithContext(context.Background())
}

func (i DatasourceCloudMap) ToDatasourceCloudMapOutputWithContext(ctx context.Context) DatasourceCloudMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasourceCloudMapOutput)
}

type DatasourceCloudOutput struct{ *pulumi.OutputState }

func (DatasourceCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasourceCloud)(nil)).Elem()
}

func (o DatasourceCloudOutput) ToDatasourceCloudOutput() DatasourceCloudOutput {
	return o
}

func (o DatasourceCloudOutput) ToDatasourceCloudOutputWithContext(ctx context.Context) DatasourceCloudOutput {
	return o
}

// Charset.
func (o DatasourceCloudOutput) Charset() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringOutput { return v.Charset }).(pulumi.StringOutput)
}

// Cluster id.
func (o DatasourceCloudOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringPtrOutput { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// Third-party datasource identification, this parameter can be ignored.
func (o DatasourceCloudOutput) DataOrigin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringPtrOutput { return v.DataOrigin }).(pulumi.StringPtrOutput)
}

// Third-party datasource project id, this parameter can be ignored.
func (o DatasourceCloudOutput) DataOriginDatasourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringPtrOutput { return v.DataOriginDatasourceId }).(pulumi.StringPtrOutput)
}

// Third-party datasource project id, this parameter can be ignored.
func (o DatasourceCloudOutput) DataOriginProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringPtrOutput { return v.DataOriginProjectId }).(pulumi.StringPtrOutput)
}

// Database name.
func (o DatasourceCloudOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// Password.
func (o DatasourceCloudOutput) DbPwd() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringOutput { return v.DbPwd }).(pulumi.StringOutput)
}

// `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
func (o DatasourceCloudOutput) DbType() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringOutput { return v.DbType }).(pulumi.StringOutput)
}

// User name.
func (o DatasourceCloudOutput) DbUser() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringOutput { return v.DbUser }).(pulumi.StringOutput)
}

// Extended parameters.
func (o DatasourceCloudOutput) ExtraParam() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringOutput { return v.ExtraParam }).(pulumi.StringOutput)
}

// Project id.
func (o DatasourceCloudOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Region identifier.
func (o DatasourceCloudOutput) RegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringPtrOutput { return v.RegionId }).(pulumi.StringPtrOutput)
}

// Service type, Own or Cloud.
func (o DatasourceCloudOutput) ServiceType() DatasourceCloudServiceTypeOutput {
	return o.ApplyT(func(v *DatasourceCloud) DatasourceCloudServiceTypeOutput { return v.ServiceType }).(DatasourceCloudServiceTypeOutput)
}

// Datasource name in BI.
func (o DatasourceCloudOutput) SourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringOutput { return v.SourceName }).(pulumi.StringOutput)
}

// Unified vpc identification.
func (o DatasourceCloudOutput) UniqVpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringPtrOutput { return v.UniqVpcId }).(pulumi.StringPtrOutput)
}

// Public cloud intranet ip.
func (o DatasourceCloudOutput) Vip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringPtrOutput { return v.Vip }).(pulumi.StringPtrOutput)
}

// Vpc identification.
func (o DatasourceCloudOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Public cloud intranet port.
func (o DatasourceCloudOutput) Vport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasourceCloud) pulumi.StringPtrOutput { return v.Vport }).(pulumi.StringPtrOutput)
}

type DatasourceCloudArrayOutput struct{ *pulumi.OutputState }

func (DatasourceCloudArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasourceCloud)(nil)).Elem()
}

func (o DatasourceCloudArrayOutput) ToDatasourceCloudArrayOutput() DatasourceCloudArrayOutput {
	return o
}

func (o DatasourceCloudArrayOutput) ToDatasourceCloudArrayOutputWithContext(ctx context.Context) DatasourceCloudArrayOutput {
	return o
}

func (o DatasourceCloudArrayOutput) Index(i pulumi.IntInput) DatasourceCloudOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatasourceCloud {
		return vs[0].([]*DatasourceCloud)[vs[1].(int)]
	}).(DatasourceCloudOutput)
}

type DatasourceCloudMapOutput struct{ *pulumi.OutputState }

func (DatasourceCloudMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasourceCloud)(nil)).Elem()
}

func (o DatasourceCloudMapOutput) ToDatasourceCloudMapOutput() DatasourceCloudMapOutput {
	return o
}

func (o DatasourceCloudMapOutput) ToDatasourceCloudMapOutputWithContext(ctx context.Context) DatasourceCloudMapOutput {
	return o
}

func (o DatasourceCloudMapOutput) MapIndex(k pulumi.StringInput) DatasourceCloudOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatasourceCloud {
		return vs[0].(map[string]*DatasourceCloud)[vs[1].(string)]
	}).(DatasourceCloudOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasourceCloudInput)(nil)).Elem(), &DatasourceCloud{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasourceCloudArrayInput)(nil)).Elem(), DatasourceCloudArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasourceCloudMapInput)(nil)).Elem(), DatasourceCloudMap{})
	pulumi.RegisterOutputType(DatasourceCloudOutput{})
	pulumi.RegisterOutputType(DatasourceCloudArrayOutput{})
	pulumi.RegisterOutputType(DatasourceCloudMapOutput{})
}
