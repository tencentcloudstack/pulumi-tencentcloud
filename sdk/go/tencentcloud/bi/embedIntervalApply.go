// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a bi embedInterval
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Bi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Bi.NewEmbedIntervalApply(ctx, "embedInterval", &Bi.EmbedIntervalApplyArgs{
//				BiToken:   pulumi.String("4192d65b-d674-4117-9a59-xxxxxxxxx"),
//				PageId:    pulumi.Int(10520483),
//				ProjectId: pulumi.Int(11015030),
//				Scope:     pulumi.String("page"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type EmbedIntervalApply struct {
	pulumi.CustomResourceState

	// Token that needs to be applied for extension.
	BiToken pulumi.StringPtrOutput `pulumi:"biToken"`
	// Sharing page id, this is empty value 0 when embedding the board.
	PageId pulumi.IntPtrOutput `pulumi:"pageId"`
	// Sharing project id, required.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// Choose panel or page.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
}

// NewEmbedIntervalApply registers a new resource with the given unique name, arguments, and options.
func NewEmbedIntervalApply(ctx *pulumi.Context,
	name string, args *EmbedIntervalApplyArgs, opts ...pulumi.ResourceOption) (*EmbedIntervalApply, error) {
	if args == nil {
		args = &EmbedIntervalApplyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource EmbedIntervalApply
	err := ctx.RegisterResource("tencentcloud:Bi/embedIntervalApply:EmbedIntervalApply", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmbedIntervalApply gets an existing EmbedIntervalApply resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmbedIntervalApply(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmbedIntervalApplyState, opts ...pulumi.ResourceOption) (*EmbedIntervalApply, error) {
	var resource EmbedIntervalApply
	err := ctx.ReadResource("tencentcloud:Bi/embedIntervalApply:EmbedIntervalApply", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmbedIntervalApply resources.
type embedIntervalApplyState struct {
	// Token that needs to be applied for extension.
	BiToken *string `pulumi:"biToken"`
	// Sharing page id, this is empty value 0 when embedding the board.
	PageId *int `pulumi:"pageId"`
	// Sharing project id, required.
	ProjectId *int `pulumi:"projectId"`
	// Choose panel or page.
	Scope *string `pulumi:"scope"`
}

type EmbedIntervalApplyState struct {
	// Token that needs to be applied for extension.
	BiToken pulumi.StringPtrInput
	// Sharing page id, this is empty value 0 when embedding the board.
	PageId pulumi.IntPtrInput
	// Sharing project id, required.
	ProjectId pulumi.IntPtrInput
	// Choose panel or page.
	Scope pulumi.StringPtrInput
}

func (EmbedIntervalApplyState) ElementType() reflect.Type {
	return reflect.TypeOf((*embedIntervalApplyState)(nil)).Elem()
}

type embedIntervalApplyArgs struct {
	// Token that needs to be applied for extension.
	BiToken *string `pulumi:"biToken"`
	// Sharing page id, this is empty value 0 when embedding the board.
	PageId *int `pulumi:"pageId"`
	// Sharing project id, required.
	ProjectId *int `pulumi:"projectId"`
	// Choose panel or page.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a EmbedIntervalApply resource.
type EmbedIntervalApplyArgs struct {
	// Token that needs to be applied for extension.
	BiToken pulumi.StringPtrInput
	// Sharing page id, this is empty value 0 when embedding the board.
	PageId pulumi.IntPtrInput
	// Sharing project id, required.
	ProjectId pulumi.IntPtrInput
	// Choose panel or page.
	Scope pulumi.StringPtrInput
}

func (EmbedIntervalApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*embedIntervalApplyArgs)(nil)).Elem()
}

type EmbedIntervalApplyInput interface {
	pulumi.Input

	ToEmbedIntervalApplyOutput() EmbedIntervalApplyOutput
	ToEmbedIntervalApplyOutputWithContext(ctx context.Context) EmbedIntervalApplyOutput
}

func (*EmbedIntervalApply) ElementType() reflect.Type {
	return reflect.TypeOf((**EmbedIntervalApply)(nil)).Elem()
}

func (i *EmbedIntervalApply) ToEmbedIntervalApplyOutput() EmbedIntervalApplyOutput {
	return i.ToEmbedIntervalApplyOutputWithContext(context.Background())
}

func (i *EmbedIntervalApply) ToEmbedIntervalApplyOutputWithContext(ctx context.Context) EmbedIntervalApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmbedIntervalApplyOutput)
}

// EmbedIntervalApplyArrayInput is an input type that accepts EmbedIntervalApplyArray and EmbedIntervalApplyArrayOutput values.
// You can construct a concrete instance of `EmbedIntervalApplyArrayInput` via:
//
//	EmbedIntervalApplyArray{ EmbedIntervalApplyArgs{...} }
type EmbedIntervalApplyArrayInput interface {
	pulumi.Input

	ToEmbedIntervalApplyArrayOutput() EmbedIntervalApplyArrayOutput
	ToEmbedIntervalApplyArrayOutputWithContext(context.Context) EmbedIntervalApplyArrayOutput
}

type EmbedIntervalApplyArray []EmbedIntervalApplyInput

func (EmbedIntervalApplyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmbedIntervalApply)(nil)).Elem()
}

func (i EmbedIntervalApplyArray) ToEmbedIntervalApplyArrayOutput() EmbedIntervalApplyArrayOutput {
	return i.ToEmbedIntervalApplyArrayOutputWithContext(context.Background())
}

func (i EmbedIntervalApplyArray) ToEmbedIntervalApplyArrayOutputWithContext(ctx context.Context) EmbedIntervalApplyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmbedIntervalApplyArrayOutput)
}

// EmbedIntervalApplyMapInput is an input type that accepts EmbedIntervalApplyMap and EmbedIntervalApplyMapOutput values.
// You can construct a concrete instance of `EmbedIntervalApplyMapInput` via:
//
//	EmbedIntervalApplyMap{ "key": EmbedIntervalApplyArgs{...} }
type EmbedIntervalApplyMapInput interface {
	pulumi.Input

	ToEmbedIntervalApplyMapOutput() EmbedIntervalApplyMapOutput
	ToEmbedIntervalApplyMapOutputWithContext(context.Context) EmbedIntervalApplyMapOutput
}

type EmbedIntervalApplyMap map[string]EmbedIntervalApplyInput

func (EmbedIntervalApplyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmbedIntervalApply)(nil)).Elem()
}

func (i EmbedIntervalApplyMap) ToEmbedIntervalApplyMapOutput() EmbedIntervalApplyMapOutput {
	return i.ToEmbedIntervalApplyMapOutputWithContext(context.Background())
}

func (i EmbedIntervalApplyMap) ToEmbedIntervalApplyMapOutputWithContext(ctx context.Context) EmbedIntervalApplyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmbedIntervalApplyMapOutput)
}

type EmbedIntervalApplyOutput struct{ *pulumi.OutputState }

func (EmbedIntervalApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmbedIntervalApply)(nil)).Elem()
}

func (o EmbedIntervalApplyOutput) ToEmbedIntervalApplyOutput() EmbedIntervalApplyOutput {
	return o
}

func (o EmbedIntervalApplyOutput) ToEmbedIntervalApplyOutputWithContext(ctx context.Context) EmbedIntervalApplyOutput {
	return o
}

// Token that needs to be applied for extension.
func (o EmbedIntervalApplyOutput) BiToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmbedIntervalApply) pulumi.StringPtrOutput { return v.BiToken }).(pulumi.StringPtrOutput)
}

// Sharing page id, this is empty value 0 when embedding the board.
func (o EmbedIntervalApplyOutput) PageId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EmbedIntervalApply) pulumi.IntPtrOutput { return v.PageId }).(pulumi.IntPtrOutput)
}

// Sharing project id, required.
func (o EmbedIntervalApplyOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EmbedIntervalApply) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// Choose panel or page.
func (o EmbedIntervalApplyOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmbedIntervalApply) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

type EmbedIntervalApplyArrayOutput struct{ *pulumi.OutputState }

func (EmbedIntervalApplyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmbedIntervalApply)(nil)).Elem()
}

func (o EmbedIntervalApplyArrayOutput) ToEmbedIntervalApplyArrayOutput() EmbedIntervalApplyArrayOutput {
	return o
}

func (o EmbedIntervalApplyArrayOutput) ToEmbedIntervalApplyArrayOutputWithContext(ctx context.Context) EmbedIntervalApplyArrayOutput {
	return o
}

func (o EmbedIntervalApplyArrayOutput) Index(i pulumi.IntInput) EmbedIntervalApplyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmbedIntervalApply {
		return vs[0].([]*EmbedIntervalApply)[vs[1].(int)]
	}).(EmbedIntervalApplyOutput)
}

type EmbedIntervalApplyMapOutput struct{ *pulumi.OutputState }

func (EmbedIntervalApplyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmbedIntervalApply)(nil)).Elem()
}

func (o EmbedIntervalApplyMapOutput) ToEmbedIntervalApplyMapOutput() EmbedIntervalApplyMapOutput {
	return o
}

func (o EmbedIntervalApplyMapOutput) ToEmbedIntervalApplyMapOutputWithContext(ctx context.Context) EmbedIntervalApplyMapOutput {
	return o
}

func (o EmbedIntervalApplyMapOutput) MapIndex(k pulumi.StringInput) EmbedIntervalApplyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmbedIntervalApply {
		return vs[0].(map[string]*EmbedIntervalApply)[vs[1].(string)]
	}).(EmbedIntervalApplyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmbedIntervalApplyInput)(nil)).Elem(), &EmbedIntervalApply{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmbedIntervalApplyArrayInput)(nil)).Elem(), EmbedIntervalApplyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmbedIntervalApplyMapInput)(nil)).Elem(), EmbedIntervalApplyMap{})
	pulumi.RegisterOutputType(EmbedIntervalApplyOutput{})
	pulumi.RegisterOutputType(EmbedIntervalApplyArrayOutput{})
	pulumi.RegisterOutputType(EmbedIntervalApplyMapOutput{})
}
