// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package image

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an available image for the user.
//
// The Images data source fetch proper image, which could be one of the private images of the user and images of system resources provided by TencentCloud, as well as other public images and those available on the image market.
//
// > **NOTE:** This data source will be deprecated, please use `Images.getInstance` instead.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Image"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Image"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Image.GetInstance(ctx, &image.GetInstanceArgs{
//				Filters: []image.GetInstanceFilter{
//					image.GetInstanceFilter{
//						Name: "image-type",
//						Values: []string{
//							"PUBLIC_IMAGE",
//						},
//					},
//				},
//				OsName: pulumi.StringRef("centos"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInstance(ctx *pulumi.Context, args *LookupInstanceArgs, opts ...pulumi.InvokeOption) (*LookupInstanceResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupInstanceResult
	err := ctx.Invoke("tencentcloud:Image/getInstance:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstance.
type LookupInstanceArgs struct {
	// One or more name/value pairs to filter.
	Filters []GetInstanceFilter `pulumi:"filters"`
	// A regex string to apply to the image list returned by TencentCloud. **NOTE**: it is not wildcard, should look like `imageNameRegex = "^CentOS\s+6\.8\s+64\w*"`.
	ImageNameRegex *string `pulumi:"imageNameRegex"`
	// A string to apply with fuzzy match to the osName attribute on the image list returned by TencentCloud. **NOTE**: when osName is provided, highest priority is applied in this field instead of `imageNameRegex`.
	OsName *string `pulumi:"osName"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getInstance.
type LookupInstanceResult struct {
	Filters []GetInstanceFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An image id indicate the uniqueness of a certain image,  which can be used for instance creation or resetting.
	ImageId string `pulumi:"imageId"`
	// Name of this image.
	ImageName        string  `pulumi:"imageName"`
	ImageNameRegex   *string `pulumi:"imageNameRegex"`
	OsName           *string `pulumi:"osName"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func LookupInstanceOutput(ctx *pulumi.Context, args LookupInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInstanceResult, error) {
			args := v.(LookupInstanceArgs)
			r, err := LookupInstance(ctx, &args, opts...)
			var s LookupInstanceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInstanceResultOutput)
}

// A collection of arguments for invoking getInstance.
type LookupInstanceOutputArgs struct {
	// One or more name/value pairs to filter.
	Filters GetInstanceFilterArrayInput `pulumi:"filters"`
	// A regex string to apply to the image list returned by TencentCloud. **NOTE**: it is not wildcard, should look like `imageNameRegex = "^CentOS\s+6\.8\s+64\w*"`.
	ImageNameRegex pulumi.StringPtrInput `pulumi:"imageNameRegex"`
	// A string to apply with fuzzy match to the osName attribute on the image list returned by TencentCloud. **NOTE**: when osName is provided, highest priority is applied in this field instead of `imageNameRegex`.
	OsName pulumi.StringPtrInput `pulumi:"osName"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (LookupInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getInstance.
type LookupInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceResult)(nil)).Elem()
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutput() LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutputWithContext(ctx context.Context) LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) Filters() GetInstanceFilterArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceFilter { return v.Filters }).(GetInstanceFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// An image id indicate the uniqueness of a certain image,  which can be used for instance creation or resetting.
func (o LookupInstanceResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ImageId }).(pulumi.StringOutput)
}

// Name of this image.
func (o LookupInstanceResultOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ImageName }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) ImageNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.ImageNameRegex }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) OsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.OsName }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstanceResultOutput{})
}
