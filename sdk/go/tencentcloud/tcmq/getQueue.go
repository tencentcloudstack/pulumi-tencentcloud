// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of tcmq queue
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tcmq"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcmq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tcmq.GetQueue(ctx, &tcmq.GetQueueArgs{
//				QueueName: pulumi.StringRef("queue_name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupQueue(ctx *pulumi.Context, args *LookupQueueArgs, opts ...pulumi.InvokeOption) (*LookupQueueResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupQueueResult
	err := ctx.Invoke("tencentcloud:Tcmq/getQueue:getQueue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQueue.
type LookupQueueArgs struct {
	// Filter. Currently, you can filter by tag. The tag name must be prefixed with `tag:`, such as `tag: owner`, `tag: environment`, or `tag: business`.
	Filters []GetQueueFilter `pulumi:"filters"`
	// For filtering by tag, this parameter must be set to `true`.
	IsTagFilter *bool `pulumi:"isTagFilter"`
	// The number of queues to be returned per page in case of paginated return. If this parameter is not passed in, 20 will be used by default. Maximum value: 50.
	Limit *int `pulumi:"limit"`
	// Starting position of a queue list to be returned on the current page in case of paginated return. If a value is entered, limit must be specified. If this parameter is left empty, 0 will be used by default.
	Offset *int `pulumi:"offset"`
	// Filter by QueueName.
	QueueName *string `pulumi:"queueName"`
	// Filter by CMQ queue name.
	QueueNameLists []string `pulumi:"queueNameLists"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getQueue.
type LookupQueueResult struct {
	Filters []GetQueueFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id          string `pulumi:"id"`
	IsTagFilter *bool  `pulumi:"isTagFilter"`
	Limit       *int   `pulumi:"limit"`
	Offset      *int   `pulumi:"offset"`
	// Queue list.
	QueueLists []GetQueueQueueList `pulumi:"queueLists"`
	// Message queue name.
	QueueName        *string  `pulumi:"queueName"`
	QueueNameLists   []string `pulumi:"queueNameLists"`
	ResultOutputFile *string  `pulumi:"resultOutputFile"`
}

func LookupQueueOutput(ctx *pulumi.Context, args LookupQueueOutputArgs, opts ...pulumi.InvokeOption) LookupQueueResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupQueueResult, error) {
			args := v.(LookupQueueArgs)
			r, err := LookupQueue(ctx, &args, opts...)
			var s LookupQueueResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupQueueResultOutput)
}

// A collection of arguments for invoking getQueue.
type LookupQueueOutputArgs struct {
	// Filter. Currently, you can filter by tag. The tag name must be prefixed with `tag:`, such as `tag: owner`, `tag: environment`, or `tag: business`.
	Filters GetQueueFilterArrayInput `pulumi:"filters"`
	// For filtering by tag, this parameter must be set to `true`.
	IsTagFilter pulumi.BoolPtrInput `pulumi:"isTagFilter"`
	// The number of queues to be returned per page in case of paginated return. If this parameter is not passed in, 20 will be used by default. Maximum value: 50.
	Limit pulumi.IntPtrInput `pulumi:"limit"`
	// Starting position of a queue list to be returned on the current page in case of paginated return. If a value is entered, limit must be specified. If this parameter is left empty, 0 will be used by default.
	Offset pulumi.IntPtrInput `pulumi:"offset"`
	// Filter by QueueName.
	QueueName pulumi.StringPtrInput `pulumi:"queueName"`
	// Filter by CMQ queue name.
	QueueNameLists pulumi.StringArrayInput `pulumi:"queueNameLists"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (LookupQueueOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueArgs)(nil)).Elem()
}

// A collection of values returned by getQueue.
type LookupQueueResultOutput struct{ *pulumi.OutputState }

func (LookupQueueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupQueueResult)(nil)).Elem()
}

func (o LookupQueueResultOutput) ToLookupQueueResultOutput() LookupQueueResultOutput {
	return o
}

func (o LookupQueueResultOutput) ToLookupQueueResultOutputWithContext(ctx context.Context) LookupQueueResultOutput {
	return o
}

func (o LookupQueueResultOutput) Filters() GetQueueFilterArrayOutput {
	return o.ApplyT(func(v LookupQueueResult) []GetQueueFilter { return v.Filters }).(GetQueueFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupQueueResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupQueueResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupQueueResultOutput) IsTagFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *bool { return v.IsTagFilter }).(pulumi.BoolPtrOutput)
}

func (o LookupQueueResultOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o LookupQueueResultOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

// Queue list.
func (o LookupQueueResultOutput) QueueLists() GetQueueQueueListArrayOutput {
	return o.ApplyT(func(v LookupQueueResult) []GetQueueQueueList { return v.QueueLists }).(GetQueueQueueListArrayOutput)
}

// Message queue name.
func (o LookupQueueResultOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

func (o LookupQueueResultOutput) QueueNameLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupQueueResult) []string { return v.QueueNameLists }).(pulumi.StringArrayOutput)
}

func (o LookupQueueResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupQueueResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupQueueResultOutput{})
}
