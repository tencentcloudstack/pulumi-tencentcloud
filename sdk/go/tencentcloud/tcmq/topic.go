// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tcmq topic
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcmq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tcmq.NewTopic(ctx, "topic", &Tcmq.TopicArgs{
//				TopicName: pulumi.String("topic_name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tcmq topic can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tcmq/topic:Topic topic topic_id
//
// ```
type Topic struct {
	pulumi.CustomResourceState

	// Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
	FilterType pulumi.IntPtrOutput `pulumi:"filterType"`
	// Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
	MaxMsgSize pulumi.IntPtrOutput `pulumi:"maxMsgSize"`
	// Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
	MsgRetentionSeconds pulumi.IntPtrOutput `pulumi:"msgRetentionSeconds"`
	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
	// Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
	Trace pulumi.BoolPtrOutput `pulumi:"trace"`
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOption) (*Topic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Topic
	err := ctx.RegisterResource("tencentcloud:Tcmq/topic:Topic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicState, opts ...pulumi.ResourceOption) (*Topic, error) {
	var resource Topic
	err := ctx.ReadResource("tencentcloud:Tcmq/topic:Topic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Topic resources.
type topicState struct {
	// Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
	FilterType *int `pulumi:"filterType"`
	// Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
	MaxMsgSize *int `pulumi:"maxMsgSize"`
	// Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
	MsgRetentionSeconds *int `pulumi:"msgRetentionSeconds"`
	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	TopicName *string `pulumi:"topicName"`
	// Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
	Trace *bool `pulumi:"trace"`
}

type TopicState struct {
	// Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
	FilterType pulumi.IntPtrInput
	// Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
	MaxMsgSize pulumi.IntPtrInput
	// Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
	MsgRetentionSeconds pulumi.IntPtrInput
	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	TopicName pulumi.StringPtrInput
	// Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
	Trace pulumi.BoolPtrInput
}

func (TopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicState)(nil)).Elem()
}

type topicArgs struct {
	// Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
	FilterType *int `pulumi:"filterType"`
	// Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
	MaxMsgSize *int `pulumi:"maxMsgSize"`
	// Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
	MsgRetentionSeconds *int `pulumi:"msgRetentionSeconds"`
	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	TopicName string `pulumi:"topicName"`
	// Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
	Trace *bool `pulumi:"trace"`
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
	FilterType pulumi.IntPtrInput
	// Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
	MaxMsgSize pulumi.IntPtrInput
	// Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
	MsgRetentionSeconds pulumi.IntPtrInput
	// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
	TopicName pulumi.StringInput
	// Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
	Trace pulumi.BoolPtrInput
}

func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicArgs)(nil)).Elem()
}

type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(ctx context.Context) TopicOutput
}

func (*Topic) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (i *Topic) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i *Topic) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

// TopicArrayInput is an input type that accepts TopicArray and TopicArrayOutput values.
// You can construct a concrete instance of `TopicArrayInput` via:
//
//	TopicArray{ TopicArgs{...} }
type TopicArrayInput interface {
	pulumi.Input

	ToTopicArrayOutput() TopicArrayOutput
	ToTopicArrayOutputWithContext(context.Context) TopicArrayOutput
}

type TopicArray []TopicInput

func (TopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Topic)(nil)).Elem()
}

func (i TopicArray) ToTopicArrayOutput() TopicArrayOutput {
	return i.ToTopicArrayOutputWithContext(context.Background())
}

func (i TopicArray) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicArrayOutput)
}

// TopicMapInput is an input type that accepts TopicMap and TopicMapOutput values.
// You can construct a concrete instance of `TopicMapInput` via:
//
//	TopicMap{ "key": TopicArgs{...} }
type TopicMapInput interface {
	pulumi.Input

	ToTopicMapOutput() TopicMapOutput
	ToTopicMapOutputWithContext(context.Context) TopicMapOutput
}

type TopicMap map[string]TopicInput

func (TopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Topic)(nil)).Elem()
}

func (i TopicMap) ToTopicMapOutput() TopicMapOutput {
	return i.ToTopicMapOutputWithContext(context.Background())
}

func (i TopicMap) ToTopicMapOutputWithContext(ctx context.Context) TopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMapOutput)
}

type TopicOutput struct{ *pulumi.OutputState }

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

// Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
func (o TopicOutput) FilterType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.IntPtrOutput { return v.FilterType }).(pulumi.IntPtrOutput)
}

// Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
func (o TopicOutput) MaxMsgSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.IntPtrOutput { return v.MaxMsgSize }).(pulumi.IntPtrOutput)
}

// Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
func (o TopicOutput) MsgRetentionSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.IntPtrOutput { return v.MsgRetentionSeconds }).(pulumi.IntPtrOutput)
}

// Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
func (o TopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

// Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
func (o TopicOutput) Trace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Topic) pulumi.BoolPtrOutput { return v.Trace }).(pulumi.BoolPtrOutput)
}

type TopicArrayOutput struct{ *pulumi.OutputState }

func (TopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Topic)(nil)).Elem()
}

func (o TopicArrayOutput) ToTopicArrayOutput() TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) Index(i pulumi.IntInput) TopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Topic {
		return vs[0].([]*Topic)[vs[1].(int)]
	}).(TopicOutput)
}

type TopicMapOutput struct{ *pulumi.OutputState }

func (TopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Topic)(nil)).Elem()
}

func (o TopicMapOutput) ToTopicMapOutput() TopicMapOutput {
	return o
}

func (o TopicMapOutput) ToTopicMapOutputWithContext(ctx context.Context) TopicMapOutput {
	return o
}

func (o TopicMapOutput) MapIndex(k pulumi.StringInput) TopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Topic {
		return vs[0].(map[string]*Topic)[vs[1].(string)]
	}).(TopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicInput)(nil)).Elem(), &Topic{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicArrayInput)(nil)).Elem(), TopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicMapInput)(nil)).Elem(), TopicMap{})
	pulumi.RegisterOutputType(TopicOutput{})
	pulumi.RegisterOutputType(TopicArrayOutput{})
	pulumi.RegisterOutputType(TopicMapOutput{})
}
