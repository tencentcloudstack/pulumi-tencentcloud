// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cfs userQuota
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cfs.NewUserQuota(ctx, "userQuota", &Cfs.UserQuotaArgs{
//				CapacityHardLimit: pulumi.Int(10),
//				FileHardLimit:     pulumi.Int(10000),
//				FileSystemId:      pulumi.String("cfs-4636029bc"),
//				UserId:            pulumi.String("2159973417"),
//				UserType:          pulumi.String("Uid"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cfs user_quota can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cfs/userQuota:UserQuota user_quota user_quota_id
//
// ```
type UserQuota struct {
	pulumi.CustomResourceState

	// Capacity Limit(GB).
	CapacityHardLimit pulumi.IntPtrOutput `pulumi:"capacityHardLimit"`
	// File limit.
	FileHardLimit pulumi.IntPtrOutput `pulumi:"fileHardLimit"`
	// File system ID.
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`
	// Info of UID/GID.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// Quota type. Valid value: `Uid`, `Gid`.
	UserType pulumi.StringOutput `pulumi:"userType"`
}

// NewUserQuota registers a new resource with the given unique name, arguments, and options.
func NewUserQuota(ctx *pulumi.Context,
	name string, args *UserQuotaArgs, opts ...pulumi.ResourceOption) (*UserQuota, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.UserType == nil {
		return nil, errors.New("invalid value for required argument 'UserType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UserQuota
	err := ctx.RegisterResource("tencentcloud:Cfs/userQuota:UserQuota", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserQuota gets an existing UserQuota resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserQuota(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserQuotaState, opts ...pulumi.ResourceOption) (*UserQuota, error) {
	var resource UserQuota
	err := ctx.ReadResource("tencentcloud:Cfs/userQuota:UserQuota", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserQuota resources.
type userQuotaState struct {
	// Capacity Limit(GB).
	CapacityHardLimit *int `pulumi:"capacityHardLimit"`
	// File limit.
	FileHardLimit *int `pulumi:"fileHardLimit"`
	// File system ID.
	FileSystemId *string `pulumi:"fileSystemId"`
	// Info of UID/GID.
	UserId *string `pulumi:"userId"`
	// Quota type. Valid value: `Uid`, `Gid`.
	UserType *string `pulumi:"userType"`
}

type UserQuotaState struct {
	// Capacity Limit(GB).
	CapacityHardLimit pulumi.IntPtrInput
	// File limit.
	FileHardLimit pulumi.IntPtrInput
	// File system ID.
	FileSystemId pulumi.StringPtrInput
	// Info of UID/GID.
	UserId pulumi.StringPtrInput
	// Quota type. Valid value: `Uid`, `Gid`.
	UserType pulumi.StringPtrInput
}

func (UserQuotaState) ElementType() reflect.Type {
	return reflect.TypeOf((*userQuotaState)(nil)).Elem()
}

type userQuotaArgs struct {
	// Capacity Limit(GB).
	CapacityHardLimit *int `pulumi:"capacityHardLimit"`
	// File limit.
	FileHardLimit *int `pulumi:"fileHardLimit"`
	// File system ID.
	FileSystemId string `pulumi:"fileSystemId"`
	// Info of UID/GID.
	UserId string `pulumi:"userId"`
	// Quota type. Valid value: `Uid`, `Gid`.
	UserType string `pulumi:"userType"`
}

// The set of arguments for constructing a UserQuota resource.
type UserQuotaArgs struct {
	// Capacity Limit(GB).
	CapacityHardLimit pulumi.IntPtrInput
	// File limit.
	FileHardLimit pulumi.IntPtrInput
	// File system ID.
	FileSystemId pulumi.StringInput
	// Info of UID/GID.
	UserId pulumi.StringInput
	// Quota type. Valid value: `Uid`, `Gid`.
	UserType pulumi.StringInput
}

func (UserQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userQuotaArgs)(nil)).Elem()
}

type UserQuotaInput interface {
	pulumi.Input

	ToUserQuotaOutput() UserQuotaOutput
	ToUserQuotaOutputWithContext(ctx context.Context) UserQuotaOutput
}

func (*UserQuota) ElementType() reflect.Type {
	return reflect.TypeOf((**UserQuota)(nil)).Elem()
}

func (i *UserQuota) ToUserQuotaOutput() UserQuotaOutput {
	return i.ToUserQuotaOutputWithContext(context.Background())
}

func (i *UserQuota) ToUserQuotaOutputWithContext(ctx context.Context) UserQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserQuotaOutput)
}

// UserQuotaArrayInput is an input type that accepts UserQuotaArray and UserQuotaArrayOutput values.
// You can construct a concrete instance of `UserQuotaArrayInput` via:
//
//	UserQuotaArray{ UserQuotaArgs{...} }
type UserQuotaArrayInput interface {
	pulumi.Input

	ToUserQuotaArrayOutput() UserQuotaArrayOutput
	ToUserQuotaArrayOutputWithContext(context.Context) UserQuotaArrayOutput
}

type UserQuotaArray []UserQuotaInput

func (UserQuotaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserQuota)(nil)).Elem()
}

func (i UserQuotaArray) ToUserQuotaArrayOutput() UserQuotaArrayOutput {
	return i.ToUserQuotaArrayOutputWithContext(context.Background())
}

func (i UserQuotaArray) ToUserQuotaArrayOutputWithContext(ctx context.Context) UserQuotaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserQuotaArrayOutput)
}

// UserQuotaMapInput is an input type that accepts UserQuotaMap and UserQuotaMapOutput values.
// You can construct a concrete instance of `UserQuotaMapInput` via:
//
//	UserQuotaMap{ "key": UserQuotaArgs{...} }
type UserQuotaMapInput interface {
	pulumi.Input

	ToUserQuotaMapOutput() UserQuotaMapOutput
	ToUserQuotaMapOutputWithContext(context.Context) UserQuotaMapOutput
}

type UserQuotaMap map[string]UserQuotaInput

func (UserQuotaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserQuota)(nil)).Elem()
}

func (i UserQuotaMap) ToUserQuotaMapOutput() UserQuotaMapOutput {
	return i.ToUserQuotaMapOutputWithContext(context.Background())
}

func (i UserQuotaMap) ToUserQuotaMapOutputWithContext(ctx context.Context) UserQuotaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserQuotaMapOutput)
}

type UserQuotaOutput struct{ *pulumi.OutputState }

func (UserQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserQuota)(nil)).Elem()
}

func (o UserQuotaOutput) ToUserQuotaOutput() UserQuotaOutput {
	return o
}

func (o UserQuotaOutput) ToUserQuotaOutputWithContext(ctx context.Context) UserQuotaOutput {
	return o
}

// Capacity Limit(GB).
func (o UserQuotaOutput) CapacityHardLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserQuota) pulumi.IntPtrOutput { return v.CapacityHardLimit }).(pulumi.IntPtrOutput)
}

// File limit.
func (o UserQuotaOutput) FileHardLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserQuota) pulumi.IntPtrOutput { return v.FileHardLimit }).(pulumi.IntPtrOutput)
}

// File system ID.
func (o UserQuotaOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserQuota) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

// Info of UID/GID.
func (o UserQuotaOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserQuota) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// Quota type. Valid value: `Uid`, `Gid`.
func (o UserQuotaOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserQuota) pulumi.StringOutput { return v.UserType }).(pulumi.StringOutput)
}

type UserQuotaArrayOutput struct{ *pulumi.OutputState }

func (UserQuotaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserQuota)(nil)).Elem()
}

func (o UserQuotaArrayOutput) ToUserQuotaArrayOutput() UserQuotaArrayOutput {
	return o
}

func (o UserQuotaArrayOutput) ToUserQuotaArrayOutputWithContext(ctx context.Context) UserQuotaArrayOutput {
	return o
}

func (o UserQuotaArrayOutput) Index(i pulumi.IntInput) UserQuotaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserQuota {
		return vs[0].([]*UserQuota)[vs[1].(int)]
	}).(UserQuotaOutput)
}

type UserQuotaMapOutput struct{ *pulumi.OutputState }

func (UserQuotaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserQuota)(nil)).Elem()
}

func (o UserQuotaMapOutput) ToUserQuotaMapOutput() UserQuotaMapOutput {
	return o
}

func (o UserQuotaMapOutput) ToUserQuotaMapOutputWithContext(ctx context.Context) UserQuotaMapOutput {
	return o
}

func (o UserQuotaMapOutput) MapIndex(k pulumi.StringInput) UserQuotaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserQuota {
		return vs[0].(map[string]*UserQuota)[vs[1].(string)]
	}).(UserQuotaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserQuotaInput)(nil)).Elem(), &UserQuota{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserQuotaArrayInput)(nil)).Elem(), UserQuotaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserQuotaMapInput)(nil)).Elem(), UserQuotaMap{})
	pulumi.RegisterOutputType(UserQuotaOutput{})
	pulumi.RegisterOutputType(UserQuotaArrayOutput{})
	pulumi.RegisterOutputType(UserQuotaMapOutput{})
}
