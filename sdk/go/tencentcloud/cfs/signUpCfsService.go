// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cfs signUpCfsService
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cfs.NewSignUpCfsService(ctx, "signUpCfsService", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SignUpCfsService struct {
	pulumi.CustomResourceState

	// Current status of the CFS service for this user. Valid values: creating (activating); created (activated).
	CfsServiceStatus pulumi.StringOutput `pulumi:"cfsServiceStatus"`
}

// NewSignUpCfsService registers a new resource with the given unique name, arguments, and options.
func NewSignUpCfsService(ctx *pulumi.Context,
	name string, args *SignUpCfsServiceArgs, opts ...pulumi.ResourceOption) (*SignUpCfsService, error) {
	if args == nil {
		args = &SignUpCfsServiceArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SignUpCfsService
	err := ctx.RegisterResource("tencentcloud:Cfs/signUpCfsService:SignUpCfsService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSignUpCfsService gets an existing SignUpCfsService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSignUpCfsService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SignUpCfsServiceState, opts ...pulumi.ResourceOption) (*SignUpCfsService, error) {
	var resource SignUpCfsService
	err := ctx.ReadResource("tencentcloud:Cfs/signUpCfsService:SignUpCfsService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SignUpCfsService resources.
type signUpCfsServiceState struct {
	// Current status of the CFS service for this user. Valid values: creating (activating); created (activated).
	CfsServiceStatus *string `pulumi:"cfsServiceStatus"`
}

type SignUpCfsServiceState struct {
	// Current status of the CFS service for this user. Valid values: creating (activating); created (activated).
	CfsServiceStatus pulumi.StringPtrInput
}

func (SignUpCfsServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*signUpCfsServiceState)(nil)).Elem()
}

type signUpCfsServiceArgs struct {
}

// The set of arguments for constructing a SignUpCfsService resource.
type SignUpCfsServiceArgs struct {
}

func (SignUpCfsServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*signUpCfsServiceArgs)(nil)).Elem()
}

type SignUpCfsServiceInput interface {
	pulumi.Input

	ToSignUpCfsServiceOutput() SignUpCfsServiceOutput
	ToSignUpCfsServiceOutputWithContext(ctx context.Context) SignUpCfsServiceOutput
}

func (*SignUpCfsService) ElementType() reflect.Type {
	return reflect.TypeOf((**SignUpCfsService)(nil)).Elem()
}

func (i *SignUpCfsService) ToSignUpCfsServiceOutput() SignUpCfsServiceOutput {
	return i.ToSignUpCfsServiceOutputWithContext(context.Background())
}

func (i *SignUpCfsService) ToSignUpCfsServiceOutputWithContext(ctx context.Context) SignUpCfsServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignUpCfsServiceOutput)
}

// SignUpCfsServiceArrayInput is an input type that accepts SignUpCfsServiceArray and SignUpCfsServiceArrayOutput values.
// You can construct a concrete instance of `SignUpCfsServiceArrayInput` via:
//
//	SignUpCfsServiceArray{ SignUpCfsServiceArgs{...} }
type SignUpCfsServiceArrayInput interface {
	pulumi.Input

	ToSignUpCfsServiceArrayOutput() SignUpCfsServiceArrayOutput
	ToSignUpCfsServiceArrayOutputWithContext(context.Context) SignUpCfsServiceArrayOutput
}

type SignUpCfsServiceArray []SignUpCfsServiceInput

func (SignUpCfsServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SignUpCfsService)(nil)).Elem()
}

func (i SignUpCfsServiceArray) ToSignUpCfsServiceArrayOutput() SignUpCfsServiceArrayOutput {
	return i.ToSignUpCfsServiceArrayOutputWithContext(context.Background())
}

func (i SignUpCfsServiceArray) ToSignUpCfsServiceArrayOutputWithContext(ctx context.Context) SignUpCfsServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignUpCfsServiceArrayOutput)
}

// SignUpCfsServiceMapInput is an input type that accepts SignUpCfsServiceMap and SignUpCfsServiceMapOutput values.
// You can construct a concrete instance of `SignUpCfsServiceMapInput` via:
//
//	SignUpCfsServiceMap{ "key": SignUpCfsServiceArgs{...} }
type SignUpCfsServiceMapInput interface {
	pulumi.Input

	ToSignUpCfsServiceMapOutput() SignUpCfsServiceMapOutput
	ToSignUpCfsServiceMapOutputWithContext(context.Context) SignUpCfsServiceMapOutput
}

type SignUpCfsServiceMap map[string]SignUpCfsServiceInput

func (SignUpCfsServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SignUpCfsService)(nil)).Elem()
}

func (i SignUpCfsServiceMap) ToSignUpCfsServiceMapOutput() SignUpCfsServiceMapOutput {
	return i.ToSignUpCfsServiceMapOutputWithContext(context.Background())
}

func (i SignUpCfsServiceMap) ToSignUpCfsServiceMapOutputWithContext(ctx context.Context) SignUpCfsServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignUpCfsServiceMapOutput)
}

type SignUpCfsServiceOutput struct{ *pulumi.OutputState }

func (SignUpCfsServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignUpCfsService)(nil)).Elem()
}

func (o SignUpCfsServiceOutput) ToSignUpCfsServiceOutput() SignUpCfsServiceOutput {
	return o
}

func (o SignUpCfsServiceOutput) ToSignUpCfsServiceOutputWithContext(ctx context.Context) SignUpCfsServiceOutput {
	return o
}

// Current status of the CFS service for this user. Valid values: creating (activating); created (activated).
func (o SignUpCfsServiceOutput) CfsServiceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SignUpCfsService) pulumi.StringOutput { return v.CfsServiceStatus }).(pulumi.StringOutput)
}

type SignUpCfsServiceArrayOutput struct{ *pulumi.OutputState }

func (SignUpCfsServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SignUpCfsService)(nil)).Elem()
}

func (o SignUpCfsServiceArrayOutput) ToSignUpCfsServiceArrayOutput() SignUpCfsServiceArrayOutput {
	return o
}

func (o SignUpCfsServiceArrayOutput) ToSignUpCfsServiceArrayOutputWithContext(ctx context.Context) SignUpCfsServiceArrayOutput {
	return o
}

func (o SignUpCfsServiceArrayOutput) Index(i pulumi.IntInput) SignUpCfsServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SignUpCfsService {
		return vs[0].([]*SignUpCfsService)[vs[1].(int)]
	}).(SignUpCfsServiceOutput)
}

type SignUpCfsServiceMapOutput struct{ *pulumi.OutputState }

func (SignUpCfsServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SignUpCfsService)(nil)).Elem()
}

func (o SignUpCfsServiceMapOutput) ToSignUpCfsServiceMapOutput() SignUpCfsServiceMapOutput {
	return o
}

func (o SignUpCfsServiceMapOutput) ToSignUpCfsServiceMapOutputWithContext(ctx context.Context) SignUpCfsServiceMapOutput {
	return o
}

func (o SignUpCfsServiceMapOutput) MapIndex(k pulumi.StringInput) SignUpCfsServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SignUpCfsService {
		return vs[0].(map[string]*SignUpCfsService)[vs[1].(string)]
	}).(SignUpCfsServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SignUpCfsServiceInput)(nil)).Elem(), &SignUpCfsService{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignUpCfsServiceArrayInput)(nil)).Elem(), SignUpCfsServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignUpCfsServiceMapInput)(nil)).Elem(), SignUpCfsServiceMap{})
	pulumi.RegisterOutputType(SignUpCfsServiceOutput{})
	pulumi.RegisterOutputType(SignUpCfsServiceArrayOutput{})
	pulumi.RegisterOutputType(SignUpCfsServiceMapOutput{})
}
