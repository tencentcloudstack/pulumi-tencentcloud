// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package key

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a key pair resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Key"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Key.NewPair(ctx, "foo", &Key.PairArgs{
//				KeyName: pulumi.String("terraform_test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Key.NewPair(ctx, "foo1", &Key.PairArgs{
//				KeyName:   pulumi.String("terraform_test"),
//				PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDjd8fTnp7Dcuj4mLaQxf9Zs/ORgUL9fQxRCNKkPgP1paTy1I513maMX126i36Lxxl3+FUB52oVbo/FgwlIfX8hyCnv8MCxqnuSDozf1CD0/wRYHcTWAtgHQHBPCC2nJtod6cVC3kB18KeV4U7zsxmwFeBIxojMOOmcOBuh7+trRw=="),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Key pair can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Key/pair:Pair foo skey-17634f05
//
// ```
type Pair struct {
	pulumi.CustomResourceState

	// The key pair's name. It is the only in one TencentCloud account.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// Specifys to which project the key pair belongs.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// You can import an existing public key and using TencentCloud key pair to manage it.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// Tags of the key pair.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewPair registers a new resource with the given unique name, arguments, and options.
func NewPair(ctx *pulumi.Context,
	name string, args *PairArgs, opts ...pulumi.ResourceOption) (*Pair, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Pair
	err := ctx.RegisterResource("tencentcloud:Key/pair:Pair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPair gets an existing Pair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PairState, opts ...pulumi.ResourceOption) (*Pair, error) {
	var resource Pair
	err := ctx.ReadResource("tencentcloud:Key/pair:Pair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pair resources.
type pairState struct {
	// The key pair's name. It is the only in one TencentCloud account.
	KeyName *string `pulumi:"keyName"`
	// Specifys to which project the key pair belongs.
	ProjectId *int `pulumi:"projectId"`
	// You can import an existing public key and using TencentCloud key pair to manage it.
	PublicKey *string `pulumi:"publicKey"`
	// Tags of the key pair.
	Tags map[string]interface{} `pulumi:"tags"`
}

type PairState struct {
	// The key pair's name. It is the only in one TencentCloud account.
	KeyName pulumi.StringPtrInput
	// Specifys to which project the key pair belongs.
	ProjectId pulumi.IntPtrInput
	// You can import an existing public key and using TencentCloud key pair to manage it.
	PublicKey pulumi.StringPtrInput
	// Tags of the key pair.
	Tags pulumi.MapInput
}

func (PairState) ElementType() reflect.Type {
	return reflect.TypeOf((*pairState)(nil)).Elem()
}

type pairArgs struct {
	// The key pair's name. It is the only in one TencentCloud account.
	KeyName string `pulumi:"keyName"`
	// Specifys to which project the key pair belongs.
	ProjectId *int `pulumi:"projectId"`
	// You can import an existing public key and using TencentCloud key pair to manage it.
	PublicKey *string `pulumi:"publicKey"`
	// Tags of the key pair.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Pair resource.
type PairArgs struct {
	// The key pair's name. It is the only in one TencentCloud account.
	KeyName pulumi.StringInput
	// Specifys to which project the key pair belongs.
	ProjectId pulumi.IntPtrInput
	// You can import an existing public key and using TencentCloud key pair to manage it.
	PublicKey pulumi.StringPtrInput
	// Tags of the key pair.
	Tags pulumi.MapInput
}

func (PairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pairArgs)(nil)).Elem()
}

type PairInput interface {
	pulumi.Input

	ToPairOutput() PairOutput
	ToPairOutputWithContext(ctx context.Context) PairOutput
}

func (*Pair) ElementType() reflect.Type {
	return reflect.TypeOf((**Pair)(nil)).Elem()
}

func (i *Pair) ToPairOutput() PairOutput {
	return i.ToPairOutputWithContext(context.Background())
}

func (i *Pair) ToPairOutputWithContext(ctx context.Context) PairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PairOutput)
}

// PairArrayInput is an input type that accepts PairArray and PairArrayOutput values.
// You can construct a concrete instance of `PairArrayInput` via:
//
//	PairArray{ PairArgs{...} }
type PairArrayInput interface {
	pulumi.Input

	ToPairArrayOutput() PairArrayOutput
	ToPairArrayOutputWithContext(context.Context) PairArrayOutput
}

type PairArray []PairInput

func (PairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pair)(nil)).Elem()
}

func (i PairArray) ToPairArrayOutput() PairArrayOutput {
	return i.ToPairArrayOutputWithContext(context.Background())
}

func (i PairArray) ToPairArrayOutputWithContext(ctx context.Context) PairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PairArrayOutput)
}

// PairMapInput is an input type that accepts PairMap and PairMapOutput values.
// You can construct a concrete instance of `PairMapInput` via:
//
//	PairMap{ "key": PairArgs{...} }
type PairMapInput interface {
	pulumi.Input

	ToPairMapOutput() PairMapOutput
	ToPairMapOutputWithContext(context.Context) PairMapOutput
}

type PairMap map[string]PairInput

func (PairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pair)(nil)).Elem()
}

func (i PairMap) ToPairMapOutput() PairMapOutput {
	return i.ToPairMapOutputWithContext(context.Background())
}

func (i PairMap) ToPairMapOutputWithContext(ctx context.Context) PairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PairMapOutput)
}

type PairOutput struct{ *pulumi.OutputState }

func (PairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pair)(nil)).Elem()
}

func (o PairOutput) ToPairOutput() PairOutput {
	return o
}

func (o PairOutput) ToPairOutputWithContext(ctx context.Context) PairOutput {
	return o
}

// The key pair's name. It is the only in one TencentCloud account.
func (o PairOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Pair) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

// Specifys to which project the key pair belongs.
func (o PairOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pair) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// You can import an existing public key and using TencentCloud key pair to manage it.
func (o PairOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Pair) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// Tags of the key pair.
func (o PairOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Pair) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type PairArrayOutput struct{ *pulumi.OutputState }

func (PairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pair)(nil)).Elem()
}

func (o PairArrayOutput) ToPairArrayOutput() PairArrayOutput {
	return o
}

func (o PairArrayOutput) ToPairArrayOutputWithContext(ctx context.Context) PairArrayOutput {
	return o
}

func (o PairArrayOutput) Index(i pulumi.IntInput) PairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pair {
		return vs[0].([]*Pair)[vs[1].(int)]
	}).(PairOutput)
}

type PairMapOutput struct{ *pulumi.OutputState }

func (PairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pair)(nil)).Elem()
}

func (o PairMapOutput) ToPairMapOutput() PairMapOutput {
	return o
}

func (o PairMapOutput) ToPairMapOutputWithContext(ctx context.Context) PairMapOutput {
	return o
}

func (o PairMapOutput) MapIndex(k pulumi.StringInput) PairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pair {
		return vs[0].(map[string]*Pair)[vs[1].(string)]
	}).(PairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PairInput)(nil)).Elem(), &Pair{})
	pulumi.RegisterInputType(reflect.TypeOf((*PairArrayInput)(nil)).Elem(), PairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PairMapInput)(nil)).Elem(), PairMap{})
	pulumi.RegisterOutputType(PairOutput{})
	pulumi.RegisterOutputType(PairArrayOutput{})
	pulumi.RegisterOutputType(PairMapOutput{})
}
