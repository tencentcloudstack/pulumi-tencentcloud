// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a rum project
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Rum"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTawInstance, err := Rum.NewTawInstance(ctx, "exampleTawInstance", &Rum.TawInstanceArgs{
//				AreaId:            pulumi.Int(1),
//				ChargeType:        pulumi.Int(1),
//				DataRetentionDays: pulumi.Int(30),
//				InstanceName:      pulumi.String("tf-example"),
//				InstanceDesc:      pulumi.String("desc."),
//				Tags: pulumi.Map{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Rum.NewProject(ctx, "exampleProject", &Rum.ProjectArgs{
//				InstanceId:     exampleTawInstance.ID(),
//				Rate:           pulumi.String("100"),
//				EnableUrlGroup: pulumi.Int(0),
//				Type:           pulumi.String("web"),
//				Repo:           pulumi.String("https://github.com/xxx"),
//				Url:            pulumi.String("iac-tf.com"),
//				Desc:           pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// rum project can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Rum/project:Project example 139422
// ```
type Project struct {
	pulumi.CustomResourceState

	// Create Time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Creator ID.
	Creator pulumi.StringOutput `pulumi:"creator"`
	// Description of the created project (optional and up to 1,000 characters).
	Desc pulumi.StringPtrOutput `pulumi:"desc"`
	// Whether to enable aggregation.
	EnableUrlGroup pulumi.IntOutput `pulumi:"enableUrlGroup"`
	// Business system ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance key.
	InstanceKey pulumi.StringOutput `pulumi:"instanceKey"`
	// Instance name.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Starred status. `1`: yes; `0`: no.
	IsStar pulumi.IntOutput `pulumi:"isStar"`
	// Unique project key (12 characters).
	Key pulumi.StringOutput `pulumi:"key"`
	// Name of the created project (required and up to 200 characters).
	Name pulumi.StringOutput `pulumi:"name"`
	// Project status (`1`: Creating; `2`: Running; `3`: Abnormal; `4`: Restarting; `5`: Stopping; `6`: Stopped; `7`: Terminating; `8`: Terminated).
	ProjectStatus pulumi.IntOutput `pulumi:"projectStatus"`
	// Project sampling rate (greater than or equal to 0).
	Rate pulumi.StringOutput `pulumi:"rate"`
	// Repository address of the project (optional and up to 256 characters).
	Repo pulumi.StringPtrOutput `pulumi:"repo"`
	// Project type (valid values: `web`, `mp`, `android`, `ios`, `node`, `hippy`, `weex`, `viola`, `rn`).
	Type pulumi.StringOutput `pulumi:"type"`
	// Webpage address of the project (optional and up to 256 characters).
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableUrlGroup == nil {
		return nil, errors.New("invalid value for required argument 'EnableUrlGroup'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Rate == nil {
		return nil, errors.New("invalid value for required argument 'Rate'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("tencentcloud:Rum/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("tencentcloud:Rum/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Create Time.
	CreateTime *string `pulumi:"createTime"`
	// Creator ID.
	Creator *string `pulumi:"creator"`
	// Description of the created project (optional and up to 1,000 characters).
	Desc *string `pulumi:"desc"`
	// Whether to enable aggregation.
	EnableUrlGroup *int `pulumi:"enableUrlGroup"`
	// Business system ID.
	InstanceId *string `pulumi:"instanceId"`
	// Instance key.
	InstanceKey *string `pulumi:"instanceKey"`
	// Instance name.
	InstanceName *string `pulumi:"instanceName"`
	// Starred status. `1`: yes; `0`: no.
	IsStar *int `pulumi:"isStar"`
	// Unique project key (12 characters).
	Key *string `pulumi:"key"`
	// Name of the created project (required and up to 200 characters).
	Name *string `pulumi:"name"`
	// Project status (`1`: Creating; `2`: Running; `3`: Abnormal; `4`: Restarting; `5`: Stopping; `6`: Stopped; `7`: Terminating; `8`: Terminated).
	ProjectStatus *int `pulumi:"projectStatus"`
	// Project sampling rate (greater than or equal to 0).
	Rate *string `pulumi:"rate"`
	// Repository address of the project (optional and up to 256 characters).
	Repo *string `pulumi:"repo"`
	// Project type (valid values: `web`, `mp`, `android`, `ios`, `node`, `hippy`, `weex`, `viola`, `rn`).
	Type *string `pulumi:"type"`
	// Webpage address of the project (optional and up to 256 characters).
	Url *string `pulumi:"url"`
}

type ProjectState struct {
	// Create Time.
	CreateTime pulumi.StringPtrInput
	// Creator ID.
	Creator pulumi.StringPtrInput
	// Description of the created project (optional and up to 1,000 characters).
	Desc pulumi.StringPtrInput
	// Whether to enable aggregation.
	EnableUrlGroup pulumi.IntPtrInput
	// Business system ID.
	InstanceId pulumi.StringPtrInput
	// Instance key.
	InstanceKey pulumi.StringPtrInput
	// Instance name.
	InstanceName pulumi.StringPtrInput
	// Starred status. `1`: yes; `0`: no.
	IsStar pulumi.IntPtrInput
	// Unique project key (12 characters).
	Key pulumi.StringPtrInput
	// Name of the created project (required and up to 200 characters).
	Name pulumi.StringPtrInput
	// Project status (`1`: Creating; `2`: Running; `3`: Abnormal; `4`: Restarting; `5`: Stopping; `6`: Stopped; `7`: Terminating; `8`: Terminated).
	ProjectStatus pulumi.IntPtrInput
	// Project sampling rate (greater than or equal to 0).
	Rate pulumi.StringPtrInput
	// Repository address of the project (optional and up to 256 characters).
	Repo pulumi.StringPtrInput
	// Project type (valid values: `web`, `mp`, `android`, `ios`, `node`, `hippy`, `weex`, `viola`, `rn`).
	Type pulumi.StringPtrInput
	// Webpage address of the project (optional and up to 256 characters).
	Url pulumi.StringPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Description of the created project (optional and up to 1,000 characters).
	Desc *string `pulumi:"desc"`
	// Whether to enable aggregation.
	EnableUrlGroup int `pulumi:"enableUrlGroup"`
	// Business system ID.
	InstanceId string `pulumi:"instanceId"`
	// Name of the created project (required and up to 200 characters).
	Name *string `pulumi:"name"`
	// Project sampling rate (greater than or equal to 0).
	Rate string `pulumi:"rate"`
	// Repository address of the project (optional and up to 256 characters).
	Repo *string `pulumi:"repo"`
	// Project type (valid values: `web`, `mp`, `android`, `ios`, `node`, `hippy`, `weex`, `viola`, `rn`).
	Type string `pulumi:"type"`
	// Webpage address of the project (optional and up to 256 characters).
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Description of the created project (optional and up to 1,000 characters).
	Desc pulumi.StringPtrInput
	// Whether to enable aggregation.
	EnableUrlGroup pulumi.IntInput
	// Business system ID.
	InstanceId pulumi.StringInput
	// Name of the created project (required and up to 200 characters).
	Name pulumi.StringPtrInput
	// Project sampling rate (greater than or equal to 0).
	Rate pulumi.StringInput
	// Repository address of the project (optional and up to 256 characters).
	Repo pulumi.StringPtrInput
	// Project type (valid values: `web`, `mp`, `android`, `ios`, `node`, `hippy`, `weex`, `viola`, `rn`).
	Type pulumi.StringInput
	// Webpage address of the project (optional and up to 256 characters).
	Url pulumi.StringPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Create Time.
func (o ProjectOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Creator ID.
func (o ProjectOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Creator }).(pulumi.StringOutput)
}

// Description of the created project (optional and up to 1,000 characters).
func (o ProjectOutput) Desc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Desc }).(pulumi.StringPtrOutput)
}

// Whether to enable aggregation.
func (o ProjectOutput) EnableUrlGroup() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.EnableUrlGroup }).(pulumi.IntOutput)
}

// Business system ID.
func (o ProjectOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance key.
func (o ProjectOutput) InstanceKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.InstanceKey }).(pulumi.StringOutput)
}

// Instance name.
func (o ProjectOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Starred status. `1`: yes; `0`: no.
func (o ProjectOutput) IsStar() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.IsStar }).(pulumi.IntOutput)
}

// Unique project key (12 characters).
func (o ProjectOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Name of the created project (required and up to 200 characters).
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Project status (`1`: Creating; `2`: Running; `3`: Abnormal; `4`: Restarting; `5`: Stopping; `6`: Stopped; `7`: Terminating; `8`: Terminated).
func (o ProjectOutput) ProjectStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.ProjectStatus }).(pulumi.IntOutput)
}

// Project sampling rate (greater than or equal to 0).
func (o ProjectOutput) Rate() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Rate }).(pulumi.StringOutput)
}

// Repository address of the project (optional and up to 256 characters).
func (o ProjectOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Repo }).(pulumi.StringPtrOutput)
}

// Project type (valid values: `web`, `mp`, `android`, `ios`, `node`, `hippy`, `weex`, `viola`, `rn`).
func (o ProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Webpage address of the project (optional and up to 256 characters).
func (o ProjectOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
