// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of rum sign
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Rum"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Rum"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Rum.GetSign(ctx, &rum.GetSignArgs{
//				FileType: pulumi.IntRef(1),
//				Timeout:  pulumi.IntRef(1800),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSign(ctx *pulumi.Context, args *GetSignArgs, opts ...pulumi.InvokeOption) (*GetSignResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetSignResult
	err := ctx.Invoke("tencentcloud:Rum/getSign:getSign", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSign.
type GetSignArgs struct {
	// Bucket type. `1`:web project; `2`:app project.
	FileType *int `pulumi:"fileType"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Timeout duration.
	Timeout *int `pulumi:"timeout"`
}

// A collection of values returned by getSign.
type GetSignResult struct {
	// Expiration timestamp.
	ExpiredTime int  `pulumi:"expiredTime"`
	FileType    *int `pulumi:"fileType"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Temporary access key ID.
	SecretId string `pulumi:"secretId"`
	// Temporary access key.
	SecretKey string `pulumi:"secretKey"`
	// Temporary access key token.
	SessionToken string `pulumi:"sessionToken"`
	// Start timestamp.
	StartTime int  `pulumi:"startTime"`
	Timeout   *int `pulumi:"timeout"`
}

func GetSignOutput(ctx *pulumi.Context, args GetSignOutputArgs, opts ...pulumi.InvokeOption) GetSignResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSignResult, error) {
			args := v.(GetSignArgs)
			r, err := GetSign(ctx, &args, opts...)
			var s GetSignResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSignResultOutput)
}

// A collection of arguments for invoking getSign.
type GetSignOutputArgs struct {
	// Bucket type. `1`:web project; `2`:app project.
	FileType pulumi.IntPtrInput `pulumi:"fileType"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Timeout duration.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

func (GetSignOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSignArgs)(nil)).Elem()
}

// A collection of values returned by getSign.
type GetSignResultOutput struct{ *pulumi.OutputState }

func (GetSignResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSignResult)(nil)).Elem()
}

func (o GetSignResultOutput) ToGetSignResultOutput() GetSignResultOutput {
	return o
}

func (o GetSignResultOutput) ToGetSignResultOutputWithContext(ctx context.Context) GetSignResultOutput {
	return o
}

// Expiration timestamp.
func (o GetSignResultOutput) ExpiredTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetSignResult) int { return v.ExpiredTime }).(pulumi.IntOutput)
}

func (o GetSignResultOutput) FileType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSignResult) *int { return v.FileType }).(pulumi.IntPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSignResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSignResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSignResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSignResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Temporary access key ID.
func (o GetSignResultOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSignResult) string { return v.SecretId }).(pulumi.StringOutput)
}

// Temporary access key.
func (o GetSignResultOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSignResult) string { return v.SecretKey }).(pulumi.StringOutput)
}

// Temporary access key token.
func (o GetSignResultOutput) SessionToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetSignResult) string { return v.SessionToken }).(pulumi.StringOutput)
}

// Start timestamp.
func (o GetSignResultOutput) StartTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetSignResult) int { return v.StartTime }).(pulumi.IntOutput)
}

func (o GetSignResultOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSignResult) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSignResultOutput{})
}
