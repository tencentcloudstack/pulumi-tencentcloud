// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a rum offlineLogConfigAttachment
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Rum"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Rum.NewOfflineLogConfigAttachment(ctx, "offlineLogConfigAttachment", &Rum.OfflineLogConfigAttachmentArgs{
//				ProjectKey: pulumi.String("ZEYrYfvaYQ30jRdmPx"),
//				UniqueId:   pulumi.String("100027012454"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// rum offline_log_config_attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Rum/offlineLogConfigAttachment:OfflineLogConfigAttachment offline_log_config_attachment ZEYrYfvaYQ30jRdmPx#100027012454
//
// ```
type OfflineLogConfigAttachment struct {
	pulumi.CustomResourceState

	// Interface call information.
	Msg pulumi.StringOutput `pulumi:"msg"`
	// Unique project key for reporting.
	ProjectKey pulumi.StringOutput `pulumi:"projectKey"`
	// Unique identifier of the user to be listened on(aid or uin).
	UniqueId pulumi.StringOutput `pulumi:"uniqueId"`
}

// NewOfflineLogConfigAttachment registers a new resource with the given unique name, arguments, and options.
func NewOfflineLogConfigAttachment(ctx *pulumi.Context,
	name string, args *OfflineLogConfigAttachmentArgs, opts ...pulumi.ResourceOption) (*OfflineLogConfigAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectKey == nil {
		return nil, errors.New("invalid value for required argument 'ProjectKey'")
	}
	if args.UniqueId == nil {
		return nil, errors.New("invalid value for required argument 'UniqueId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource OfflineLogConfigAttachment
	err := ctx.RegisterResource("tencentcloud:Rum/offlineLogConfigAttachment:OfflineLogConfigAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOfflineLogConfigAttachment gets an existing OfflineLogConfigAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOfflineLogConfigAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OfflineLogConfigAttachmentState, opts ...pulumi.ResourceOption) (*OfflineLogConfigAttachment, error) {
	var resource OfflineLogConfigAttachment
	err := ctx.ReadResource("tencentcloud:Rum/offlineLogConfigAttachment:OfflineLogConfigAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OfflineLogConfigAttachment resources.
type offlineLogConfigAttachmentState struct {
	// Interface call information.
	Msg *string `pulumi:"msg"`
	// Unique project key for reporting.
	ProjectKey *string `pulumi:"projectKey"`
	// Unique identifier of the user to be listened on(aid or uin).
	UniqueId *string `pulumi:"uniqueId"`
}

type OfflineLogConfigAttachmentState struct {
	// Interface call information.
	Msg pulumi.StringPtrInput
	// Unique project key for reporting.
	ProjectKey pulumi.StringPtrInput
	// Unique identifier of the user to be listened on(aid or uin).
	UniqueId pulumi.StringPtrInput
}

func (OfflineLogConfigAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*offlineLogConfigAttachmentState)(nil)).Elem()
}

type offlineLogConfigAttachmentArgs struct {
	// Unique project key for reporting.
	ProjectKey string `pulumi:"projectKey"`
	// Unique identifier of the user to be listened on(aid or uin).
	UniqueId string `pulumi:"uniqueId"`
}

// The set of arguments for constructing a OfflineLogConfigAttachment resource.
type OfflineLogConfigAttachmentArgs struct {
	// Unique project key for reporting.
	ProjectKey pulumi.StringInput
	// Unique identifier of the user to be listened on(aid or uin).
	UniqueId pulumi.StringInput
}

func (OfflineLogConfigAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*offlineLogConfigAttachmentArgs)(nil)).Elem()
}

type OfflineLogConfigAttachmentInput interface {
	pulumi.Input

	ToOfflineLogConfigAttachmentOutput() OfflineLogConfigAttachmentOutput
	ToOfflineLogConfigAttachmentOutputWithContext(ctx context.Context) OfflineLogConfigAttachmentOutput
}

func (*OfflineLogConfigAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**OfflineLogConfigAttachment)(nil)).Elem()
}

func (i *OfflineLogConfigAttachment) ToOfflineLogConfigAttachmentOutput() OfflineLogConfigAttachmentOutput {
	return i.ToOfflineLogConfigAttachmentOutputWithContext(context.Background())
}

func (i *OfflineLogConfigAttachment) ToOfflineLogConfigAttachmentOutputWithContext(ctx context.Context) OfflineLogConfigAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfflineLogConfigAttachmentOutput)
}

// OfflineLogConfigAttachmentArrayInput is an input type that accepts OfflineLogConfigAttachmentArray and OfflineLogConfigAttachmentArrayOutput values.
// You can construct a concrete instance of `OfflineLogConfigAttachmentArrayInput` via:
//
//	OfflineLogConfigAttachmentArray{ OfflineLogConfigAttachmentArgs{...} }
type OfflineLogConfigAttachmentArrayInput interface {
	pulumi.Input

	ToOfflineLogConfigAttachmentArrayOutput() OfflineLogConfigAttachmentArrayOutput
	ToOfflineLogConfigAttachmentArrayOutputWithContext(context.Context) OfflineLogConfigAttachmentArrayOutput
}

type OfflineLogConfigAttachmentArray []OfflineLogConfigAttachmentInput

func (OfflineLogConfigAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OfflineLogConfigAttachment)(nil)).Elem()
}

func (i OfflineLogConfigAttachmentArray) ToOfflineLogConfigAttachmentArrayOutput() OfflineLogConfigAttachmentArrayOutput {
	return i.ToOfflineLogConfigAttachmentArrayOutputWithContext(context.Background())
}

func (i OfflineLogConfigAttachmentArray) ToOfflineLogConfigAttachmentArrayOutputWithContext(ctx context.Context) OfflineLogConfigAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfflineLogConfigAttachmentArrayOutput)
}

// OfflineLogConfigAttachmentMapInput is an input type that accepts OfflineLogConfigAttachmentMap and OfflineLogConfigAttachmentMapOutput values.
// You can construct a concrete instance of `OfflineLogConfigAttachmentMapInput` via:
//
//	OfflineLogConfigAttachmentMap{ "key": OfflineLogConfigAttachmentArgs{...} }
type OfflineLogConfigAttachmentMapInput interface {
	pulumi.Input

	ToOfflineLogConfigAttachmentMapOutput() OfflineLogConfigAttachmentMapOutput
	ToOfflineLogConfigAttachmentMapOutputWithContext(context.Context) OfflineLogConfigAttachmentMapOutput
}

type OfflineLogConfigAttachmentMap map[string]OfflineLogConfigAttachmentInput

func (OfflineLogConfigAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OfflineLogConfigAttachment)(nil)).Elem()
}

func (i OfflineLogConfigAttachmentMap) ToOfflineLogConfigAttachmentMapOutput() OfflineLogConfigAttachmentMapOutput {
	return i.ToOfflineLogConfigAttachmentMapOutputWithContext(context.Background())
}

func (i OfflineLogConfigAttachmentMap) ToOfflineLogConfigAttachmentMapOutputWithContext(ctx context.Context) OfflineLogConfigAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfflineLogConfigAttachmentMapOutput)
}

type OfflineLogConfigAttachmentOutput struct{ *pulumi.OutputState }

func (OfflineLogConfigAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OfflineLogConfigAttachment)(nil)).Elem()
}

func (o OfflineLogConfigAttachmentOutput) ToOfflineLogConfigAttachmentOutput() OfflineLogConfigAttachmentOutput {
	return o
}

func (o OfflineLogConfigAttachmentOutput) ToOfflineLogConfigAttachmentOutputWithContext(ctx context.Context) OfflineLogConfigAttachmentOutput {
	return o
}

// Interface call information.
func (o OfflineLogConfigAttachmentOutput) Msg() pulumi.StringOutput {
	return o.ApplyT(func(v *OfflineLogConfigAttachment) pulumi.StringOutput { return v.Msg }).(pulumi.StringOutput)
}

// Unique project key for reporting.
func (o OfflineLogConfigAttachmentOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v *OfflineLogConfigAttachment) pulumi.StringOutput { return v.ProjectKey }).(pulumi.StringOutput)
}

// Unique identifier of the user to be listened on(aid or uin).
func (o OfflineLogConfigAttachmentOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v *OfflineLogConfigAttachment) pulumi.StringOutput { return v.UniqueId }).(pulumi.StringOutput)
}

type OfflineLogConfigAttachmentArrayOutput struct{ *pulumi.OutputState }

func (OfflineLogConfigAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OfflineLogConfigAttachment)(nil)).Elem()
}

func (o OfflineLogConfigAttachmentArrayOutput) ToOfflineLogConfigAttachmentArrayOutput() OfflineLogConfigAttachmentArrayOutput {
	return o
}

func (o OfflineLogConfigAttachmentArrayOutput) ToOfflineLogConfigAttachmentArrayOutputWithContext(ctx context.Context) OfflineLogConfigAttachmentArrayOutput {
	return o
}

func (o OfflineLogConfigAttachmentArrayOutput) Index(i pulumi.IntInput) OfflineLogConfigAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OfflineLogConfigAttachment {
		return vs[0].([]*OfflineLogConfigAttachment)[vs[1].(int)]
	}).(OfflineLogConfigAttachmentOutput)
}

type OfflineLogConfigAttachmentMapOutput struct{ *pulumi.OutputState }

func (OfflineLogConfigAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OfflineLogConfigAttachment)(nil)).Elem()
}

func (o OfflineLogConfigAttachmentMapOutput) ToOfflineLogConfigAttachmentMapOutput() OfflineLogConfigAttachmentMapOutput {
	return o
}

func (o OfflineLogConfigAttachmentMapOutput) ToOfflineLogConfigAttachmentMapOutputWithContext(ctx context.Context) OfflineLogConfigAttachmentMapOutput {
	return o
}

func (o OfflineLogConfigAttachmentMapOutput) MapIndex(k pulumi.StringInput) OfflineLogConfigAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OfflineLogConfigAttachment {
		return vs[0].(map[string]*OfflineLogConfigAttachment)[vs[1].(string)]
	}).(OfflineLogConfigAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OfflineLogConfigAttachmentInput)(nil)).Elem(), &OfflineLogConfigAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*OfflineLogConfigAttachmentArrayInput)(nil)).Elem(), OfflineLogConfigAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OfflineLogConfigAttachmentMapInput)(nil)).Elem(), OfflineLogConfigAttachmentMap{})
	pulumi.RegisterOutputType(OfflineLogConfigAttachmentOutput{})
	pulumi.RegisterOutputType(OfflineLogConfigAttachmentArrayOutput{})
	pulumi.RegisterOutputType(OfflineLogConfigAttachmentMapOutput{})
}
