// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rum

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a rum instanceStatusConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Rum"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Rum.NewInstanceStatusConfig(ctx, "instanceStatusConfig", &Rum.InstanceStatusConfigArgs{
//				InstanceId: pulumi.String("rum-pasZKEI3RLgakj"),
//				Operate:    pulumi.String("stop"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// rum instance_status_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Rum/instanceStatusConfig:InstanceStatusConfig instance_status_config instance_id
//
// ```
type InstanceStatusConfig struct {
	pulumi.CustomResourceState

	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance status (`1`=creating, `2`=running, `3`=abnormal, `4`=restarting, `5`=stopping, `6`=stopped, `7`=deleted).
	InstanceStatus pulumi.IntOutput `pulumi:"instanceStatus"`
	// `resume`, `stop`.
	Operate pulumi.StringOutput `pulumi:"operate"`
}

// NewInstanceStatusConfig registers a new resource with the given unique name, arguments, and options.
func NewInstanceStatusConfig(ctx *pulumi.Context,
	name string, args *InstanceStatusConfigArgs, opts ...pulumi.ResourceOption) (*InstanceStatusConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Operate == nil {
		return nil, errors.New("invalid value for required argument 'Operate'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InstanceStatusConfig
	err := ctx.RegisterResource("tencentcloud:Rum/instanceStatusConfig:InstanceStatusConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceStatusConfig gets an existing InstanceStatusConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceStatusConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceStatusConfigState, opts ...pulumi.ResourceOption) (*InstanceStatusConfig, error) {
	var resource InstanceStatusConfig
	err := ctx.ReadResource("tencentcloud:Rum/instanceStatusConfig:InstanceStatusConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceStatusConfig resources.
type instanceStatusConfigState struct {
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Instance status (`1`=creating, `2`=running, `3`=abnormal, `4`=restarting, `5`=stopping, `6`=stopped, `7`=deleted).
	InstanceStatus *int `pulumi:"instanceStatus"`
	// `resume`, `stop`.
	Operate *string `pulumi:"operate"`
}

type InstanceStatusConfigState struct {
	// Instance ID.
	InstanceId pulumi.StringPtrInput
	// Instance status (`1`=creating, `2`=running, `3`=abnormal, `4`=restarting, `5`=stopping, `6`=stopped, `7`=deleted).
	InstanceStatus pulumi.IntPtrInput
	// `resume`, `stop`.
	Operate pulumi.StringPtrInput
}

func (InstanceStatusConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceStatusConfigState)(nil)).Elem()
}

type instanceStatusConfigArgs struct {
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// `resume`, `stop`.
	Operate string `pulumi:"operate"`
}

// The set of arguments for constructing a InstanceStatusConfig resource.
type InstanceStatusConfigArgs struct {
	// Instance ID.
	InstanceId pulumi.StringInput
	// `resume`, `stop`.
	Operate pulumi.StringInput
}

func (InstanceStatusConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceStatusConfigArgs)(nil)).Elem()
}

type InstanceStatusConfigInput interface {
	pulumi.Input

	ToInstanceStatusConfigOutput() InstanceStatusConfigOutput
	ToInstanceStatusConfigOutputWithContext(ctx context.Context) InstanceStatusConfigOutput
}

func (*InstanceStatusConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceStatusConfig)(nil)).Elem()
}

func (i *InstanceStatusConfig) ToInstanceStatusConfigOutput() InstanceStatusConfigOutput {
	return i.ToInstanceStatusConfigOutputWithContext(context.Background())
}

func (i *InstanceStatusConfig) ToInstanceStatusConfigOutputWithContext(ctx context.Context) InstanceStatusConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStatusConfigOutput)
}

// InstanceStatusConfigArrayInput is an input type that accepts InstanceStatusConfigArray and InstanceStatusConfigArrayOutput values.
// You can construct a concrete instance of `InstanceStatusConfigArrayInput` via:
//
//	InstanceStatusConfigArray{ InstanceStatusConfigArgs{...} }
type InstanceStatusConfigArrayInput interface {
	pulumi.Input

	ToInstanceStatusConfigArrayOutput() InstanceStatusConfigArrayOutput
	ToInstanceStatusConfigArrayOutputWithContext(context.Context) InstanceStatusConfigArrayOutput
}

type InstanceStatusConfigArray []InstanceStatusConfigInput

func (InstanceStatusConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceStatusConfig)(nil)).Elem()
}

func (i InstanceStatusConfigArray) ToInstanceStatusConfigArrayOutput() InstanceStatusConfigArrayOutput {
	return i.ToInstanceStatusConfigArrayOutputWithContext(context.Background())
}

func (i InstanceStatusConfigArray) ToInstanceStatusConfigArrayOutputWithContext(ctx context.Context) InstanceStatusConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStatusConfigArrayOutput)
}

// InstanceStatusConfigMapInput is an input type that accepts InstanceStatusConfigMap and InstanceStatusConfigMapOutput values.
// You can construct a concrete instance of `InstanceStatusConfigMapInput` via:
//
//	InstanceStatusConfigMap{ "key": InstanceStatusConfigArgs{...} }
type InstanceStatusConfigMapInput interface {
	pulumi.Input

	ToInstanceStatusConfigMapOutput() InstanceStatusConfigMapOutput
	ToInstanceStatusConfigMapOutputWithContext(context.Context) InstanceStatusConfigMapOutput
}

type InstanceStatusConfigMap map[string]InstanceStatusConfigInput

func (InstanceStatusConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceStatusConfig)(nil)).Elem()
}

func (i InstanceStatusConfigMap) ToInstanceStatusConfigMapOutput() InstanceStatusConfigMapOutput {
	return i.ToInstanceStatusConfigMapOutputWithContext(context.Background())
}

func (i InstanceStatusConfigMap) ToInstanceStatusConfigMapOutputWithContext(ctx context.Context) InstanceStatusConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceStatusConfigMapOutput)
}

type InstanceStatusConfigOutput struct{ *pulumi.OutputState }

func (InstanceStatusConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceStatusConfig)(nil)).Elem()
}

func (o InstanceStatusConfigOutput) ToInstanceStatusConfigOutput() InstanceStatusConfigOutput {
	return o
}

func (o InstanceStatusConfigOutput) ToInstanceStatusConfigOutputWithContext(ctx context.Context) InstanceStatusConfigOutput {
	return o
}

// Instance ID.
func (o InstanceStatusConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceStatusConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance status (`1`=creating, `2`=running, `3`=abnormal, `4`=restarting, `5`=stopping, `6`=stopped, `7`=deleted).
func (o InstanceStatusConfigOutput) InstanceStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceStatusConfig) pulumi.IntOutput { return v.InstanceStatus }).(pulumi.IntOutput)
}

// `resume`, `stop`.
func (o InstanceStatusConfigOutput) Operate() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceStatusConfig) pulumi.StringOutput { return v.Operate }).(pulumi.StringOutput)
}

type InstanceStatusConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceStatusConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceStatusConfig)(nil)).Elem()
}

func (o InstanceStatusConfigArrayOutput) ToInstanceStatusConfigArrayOutput() InstanceStatusConfigArrayOutput {
	return o
}

func (o InstanceStatusConfigArrayOutput) ToInstanceStatusConfigArrayOutputWithContext(ctx context.Context) InstanceStatusConfigArrayOutput {
	return o
}

func (o InstanceStatusConfigArrayOutput) Index(i pulumi.IntInput) InstanceStatusConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceStatusConfig {
		return vs[0].([]*InstanceStatusConfig)[vs[1].(int)]
	}).(InstanceStatusConfigOutput)
}

type InstanceStatusConfigMapOutput struct{ *pulumi.OutputState }

func (InstanceStatusConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceStatusConfig)(nil)).Elem()
}

func (o InstanceStatusConfigMapOutput) ToInstanceStatusConfigMapOutput() InstanceStatusConfigMapOutput {
	return o
}

func (o InstanceStatusConfigMapOutput) ToInstanceStatusConfigMapOutputWithContext(ctx context.Context) InstanceStatusConfigMapOutput {
	return o
}

func (o InstanceStatusConfigMapOutput) MapIndex(k pulumi.StringInput) InstanceStatusConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceStatusConfig {
		return vs[0].(map[string]*InstanceStatusConfig)[vs[1].(string)]
	}).(InstanceStatusConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStatusConfigInput)(nil)).Elem(), &InstanceStatusConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStatusConfigArrayInput)(nil)).Elem(), InstanceStatusConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceStatusConfigMapInput)(nil)).Elem(), InstanceStatusConfigMap{})
	pulumi.RegisterOutputType(InstanceStatusConfigOutput{})
	pulumi.RegisterOutputType(InstanceStatusConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceStatusConfigMapOutput{})
}
