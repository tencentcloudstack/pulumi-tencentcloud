// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dts compareTask
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dts.NewCompareTask(ctx, "compareTask", &Dts.CompareTaskArgs{
//				JobId:      pulumi.String(""),
//				ObjectMode: pulumi.String(""),
//				Objects: &dts.CompareTaskObjectsArgs{
//					ObjectItems: dts.CompareTaskObjectsObjectItemArray{
//						&dts.CompareTaskObjectsObjectItemArgs{
//							DbMode:     pulumi.String(""),
//							DbName:     pulumi.String(""),
//							SchemaName: pulumi.String(""),
//							TableMode:  pulumi.String(""),
//							Tables: dts.CompareTaskObjectsObjectItemTableArray{
//								&dts.CompareTaskObjectsObjectItemTableArgs{
//									TableName: pulumi.String(""),
//								},
//							},
//							ViewMode: pulumi.String(""),
//							Views: dts.CompareTaskObjectsObjectItemViewArray{
//								&dts.CompareTaskObjectsObjectItemViewArgs{
//									ViewName: pulumi.String(""),
//								},
//							},
//						},
//					},
//					ObjectMode: pulumi.String(""),
//				},
//				TaskName: pulumi.String(""),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CompareTask struct {
	pulumi.CustomResourceState

	// compare task id.
	CompareTaskId pulumi.StringOutput `pulumi:"compareTaskId"`
	// job id.
	JobId pulumi.StringOutput `pulumi:"jobId"`
	// object mode.
	ObjectMode pulumi.StringPtrOutput `pulumi:"objectMode"`
	// objects.
	Objects CompareTaskObjectsPtrOutput `pulumi:"objects"`
	// task name.
	TaskName pulumi.StringPtrOutput `pulumi:"taskName"`
}

// NewCompareTask registers a new resource with the given unique name, arguments, and options.
func NewCompareTask(ctx *pulumi.Context,
	name string, args *CompareTaskArgs, opts ...pulumi.ResourceOption) (*CompareTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobId == nil {
		return nil, errors.New("invalid value for required argument 'JobId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CompareTask
	err := ctx.RegisterResource("tencentcloud:Dts/compareTask:CompareTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCompareTask gets an existing CompareTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCompareTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CompareTaskState, opts ...pulumi.ResourceOption) (*CompareTask, error) {
	var resource CompareTask
	err := ctx.ReadResource("tencentcloud:Dts/compareTask:CompareTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CompareTask resources.
type compareTaskState struct {
	// compare task id.
	CompareTaskId *string `pulumi:"compareTaskId"`
	// job id.
	JobId *string `pulumi:"jobId"`
	// object mode.
	ObjectMode *string `pulumi:"objectMode"`
	// objects.
	Objects *CompareTaskObjects `pulumi:"objects"`
	// task name.
	TaskName *string `pulumi:"taskName"`
}

type CompareTaskState struct {
	// compare task id.
	CompareTaskId pulumi.StringPtrInput
	// job id.
	JobId pulumi.StringPtrInput
	// object mode.
	ObjectMode pulumi.StringPtrInput
	// objects.
	Objects CompareTaskObjectsPtrInput
	// task name.
	TaskName pulumi.StringPtrInput
}

func (CompareTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*compareTaskState)(nil)).Elem()
}

type compareTaskArgs struct {
	// job id.
	JobId string `pulumi:"jobId"`
	// object mode.
	ObjectMode *string `pulumi:"objectMode"`
	// objects.
	Objects *CompareTaskObjects `pulumi:"objects"`
	// task name.
	TaskName *string `pulumi:"taskName"`
}

// The set of arguments for constructing a CompareTask resource.
type CompareTaskArgs struct {
	// job id.
	JobId pulumi.StringInput
	// object mode.
	ObjectMode pulumi.StringPtrInput
	// objects.
	Objects CompareTaskObjectsPtrInput
	// task name.
	TaskName pulumi.StringPtrInput
}

func (CompareTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*compareTaskArgs)(nil)).Elem()
}

type CompareTaskInput interface {
	pulumi.Input

	ToCompareTaskOutput() CompareTaskOutput
	ToCompareTaskOutputWithContext(ctx context.Context) CompareTaskOutput
}

func (*CompareTask) ElementType() reflect.Type {
	return reflect.TypeOf((**CompareTask)(nil)).Elem()
}

func (i *CompareTask) ToCompareTaskOutput() CompareTaskOutput {
	return i.ToCompareTaskOutputWithContext(context.Background())
}

func (i *CompareTask) ToCompareTaskOutputWithContext(ctx context.Context) CompareTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompareTaskOutput)
}

// CompareTaskArrayInput is an input type that accepts CompareTaskArray and CompareTaskArrayOutput values.
// You can construct a concrete instance of `CompareTaskArrayInput` via:
//
//	CompareTaskArray{ CompareTaskArgs{...} }
type CompareTaskArrayInput interface {
	pulumi.Input

	ToCompareTaskArrayOutput() CompareTaskArrayOutput
	ToCompareTaskArrayOutputWithContext(context.Context) CompareTaskArrayOutput
}

type CompareTaskArray []CompareTaskInput

func (CompareTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CompareTask)(nil)).Elem()
}

func (i CompareTaskArray) ToCompareTaskArrayOutput() CompareTaskArrayOutput {
	return i.ToCompareTaskArrayOutputWithContext(context.Background())
}

func (i CompareTaskArray) ToCompareTaskArrayOutputWithContext(ctx context.Context) CompareTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompareTaskArrayOutput)
}

// CompareTaskMapInput is an input type that accepts CompareTaskMap and CompareTaskMapOutput values.
// You can construct a concrete instance of `CompareTaskMapInput` via:
//
//	CompareTaskMap{ "key": CompareTaskArgs{...} }
type CompareTaskMapInput interface {
	pulumi.Input

	ToCompareTaskMapOutput() CompareTaskMapOutput
	ToCompareTaskMapOutputWithContext(context.Context) CompareTaskMapOutput
}

type CompareTaskMap map[string]CompareTaskInput

func (CompareTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CompareTask)(nil)).Elem()
}

func (i CompareTaskMap) ToCompareTaskMapOutput() CompareTaskMapOutput {
	return i.ToCompareTaskMapOutputWithContext(context.Background())
}

func (i CompareTaskMap) ToCompareTaskMapOutputWithContext(ctx context.Context) CompareTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompareTaskMapOutput)
}

type CompareTaskOutput struct{ *pulumi.OutputState }

func (CompareTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompareTask)(nil)).Elem()
}

func (o CompareTaskOutput) ToCompareTaskOutput() CompareTaskOutput {
	return o
}

func (o CompareTaskOutput) ToCompareTaskOutputWithContext(ctx context.Context) CompareTaskOutput {
	return o
}

// compare task id.
func (o CompareTaskOutput) CompareTaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *CompareTask) pulumi.StringOutput { return v.CompareTaskId }).(pulumi.StringOutput)
}

// job id.
func (o CompareTaskOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *CompareTask) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

// object mode.
func (o CompareTaskOutput) ObjectMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompareTask) pulumi.StringPtrOutput { return v.ObjectMode }).(pulumi.StringPtrOutput)
}

// objects.
func (o CompareTaskOutput) Objects() CompareTaskObjectsPtrOutput {
	return o.ApplyT(func(v *CompareTask) CompareTaskObjectsPtrOutput { return v.Objects }).(CompareTaskObjectsPtrOutput)
}

// task name.
func (o CompareTaskOutput) TaskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompareTask) pulumi.StringPtrOutput { return v.TaskName }).(pulumi.StringPtrOutput)
}

type CompareTaskArrayOutput struct{ *pulumi.OutputState }

func (CompareTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CompareTask)(nil)).Elem()
}

func (o CompareTaskArrayOutput) ToCompareTaskArrayOutput() CompareTaskArrayOutput {
	return o
}

func (o CompareTaskArrayOutput) ToCompareTaskArrayOutputWithContext(ctx context.Context) CompareTaskArrayOutput {
	return o
}

func (o CompareTaskArrayOutput) Index(i pulumi.IntInput) CompareTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CompareTask {
		return vs[0].([]*CompareTask)[vs[1].(int)]
	}).(CompareTaskOutput)
}

type CompareTaskMapOutput struct{ *pulumi.OutputState }

func (CompareTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CompareTask)(nil)).Elem()
}

func (o CompareTaskMapOutput) ToCompareTaskMapOutput() CompareTaskMapOutput {
	return o
}

func (o CompareTaskMapOutput) ToCompareTaskMapOutputWithContext(ctx context.Context) CompareTaskMapOutput {
	return o
}

func (o CompareTaskMapOutput) MapIndex(k pulumi.StringInput) CompareTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CompareTask {
		return vs[0].(map[string]*CompareTask)[vs[1].(string)]
	}).(CompareTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CompareTaskInput)(nil)).Elem(), &CompareTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompareTaskArrayInput)(nil)).Elem(), CompareTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CompareTaskMapInput)(nil)).Elem(), CompareTaskMap{})
	pulumi.RegisterOutputType(CompareTaskOutput{})
	pulumi.RegisterOutputType(CompareTaskArrayOutput{})
	pulumi.RegisterOutputType(CompareTaskMapOutput{})
}
