// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dts migrateService
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dts.NewMigrateService(ctx, "migrateService", &Dts.MigrateServiceArgs{
//				DstDatabaseType: pulumi.String("cynosdbmysql"),
//				DstRegion:       pulumi.String("ap-guangzhou"),
//				InstanceClass:   pulumi.String("small"),
//				JobName:         pulumi.String("tf_test_migration_job"),
//				SrcDatabaseType: pulumi.String("mysql"),
//				SrcRegion:       pulumi.String("ap-guangzhou"),
//				Tags: dts.MigrateServiceTagArray{
//					&dts.MigrateServiceTagArgs{
//						TagKey:   pulumi.String("aaa"),
//						TagValue: pulumi.String("bbb"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dts migrate_service can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dts/migrateService:MigrateService migrate_service migrateService_id
//
// ```
type MigrateService struct {
	pulumi.CustomResourceState

	// destination database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
	DstDatabaseType pulumi.StringOutput `pulumi:"dstDatabaseType"`
	// destination region.
	DstRegion pulumi.StringOutput `pulumi:"dstRegion"`
	// instance class, optional value is small/medium/large/xlarge/2xlarge.
	InstanceClass pulumi.StringOutput `pulumi:"instanceClass"`
	// job name.
	JobName pulumi.StringPtrOutput `pulumi:"jobName"`
	// source database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
	SrcDatabaseType pulumi.StringOutput `pulumi:"srcDatabaseType"`
	// source region.
	SrcRegion pulumi.StringOutput `pulumi:"srcRegion"`
	// tags.
	Tags MigrateServiceTagArrayOutput `pulumi:"tags"`
}

// NewMigrateService registers a new resource with the given unique name, arguments, and options.
func NewMigrateService(ctx *pulumi.Context,
	name string, args *MigrateServiceArgs, opts ...pulumi.ResourceOption) (*MigrateService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DstDatabaseType == nil {
		return nil, errors.New("invalid value for required argument 'DstDatabaseType'")
	}
	if args.DstRegion == nil {
		return nil, errors.New("invalid value for required argument 'DstRegion'")
	}
	if args.InstanceClass == nil {
		return nil, errors.New("invalid value for required argument 'InstanceClass'")
	}
	if args.SrcDatabaseType == nil {
		return nil, errors.New("invalid value for required argument 'SrcDatabaseType'")
	}
	if args.SrcRegion == nil {
		return nil, errors.New("invalid value for required argument 'SrcRegion'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MigrateService
	err := ctx.RegisterResource("tencentcloud:Dts/migrateService:MigrateService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMigrateService gets an existing MigrateService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMigrateService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MigrateServiceState, opts ...pulumi.ResourceOption) (*MigrateService, error) {
	var resource MigrateService
	err := ctx.ReadResource("tencentcloud:Dts/migrateService:MigrateService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MigrateService resources.
type migrateServiceState struct {
	// destination database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
	DstDatabaseType *string `pulumi:"dstDatabaseType"`
	// destination region.
	DstRegion *string `pulumi:"dstRegion"`
	// instance class, optional value is small/medium/large/xlarge/2xlarge.
	InstanceClass *string `pulumi:"instanceClass"`
	// job name.
	JobName *string `pulumi:"jobName"`
	// source database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
	SrcDatabaseType *string `pulumi:"srcDatabaseType"`
	// source region.
	SrcRegion *string `pulumi:"srcRegion"`
	// tags.
	Tags []MigrateServiceTag `pulumi:"tags"`
}

type MigrateServiceState struct {
	// destination database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
	DstDatabaseType pulumi.StringPtrInput
	// destination region.
	DstRegion pulumi.StringPtrInput
	// instance class, optional value is small/medium/large/xlarge/2xlarge.
	InstanceClass pulumi.StringPtrInput
	// job name.
	JobName pulumi.StringPtrInput
	// source database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
	SrcDatabaseType pulumi.StringPtrInput
	// source region.
	SrcRegion pulumi.StringPtrInput
	// tags.
	Tags MigrateServiceTagArrayInput
}

func (MigrateServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*migrateServiceState)(nil)).Elem()
}

type migrateServiceArgs struct {
	// destination database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
	DstDatabaseType string `pulumi:"dstDatabaseType"`
	// destination region.
	DstRegion string `pulumi:"dstRegion"`
	// instance class, optional value is small/medium/large/xlarge/2xlarge.
	InstanceClass string `pulumi:"instanceClass"`
	// job name.
	JobName *string `pulumi:"jobName"`
	// source database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
	SrcDatabaseType string `pulumi:"srcDatabaseType"`
	// source region.
	SrcRegion string `pulumi:"srcRegion"`
	// tags.
	Tags []MigrateServiceTag `pulumi:"tags"`
}

// The set of arguments for constructing a MigrateService resource.
type MigrateServiceArgs struct {
	// destination database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
	DstDatabaseType pulumi.StringInput
	// destination region.
	DstRegion pulumi.StringInput
	// instance class, optional value is small/medium/large/xlarge/2xlarge.
	InstanceClass pulumi.StringInput
	// job name.
	JobName pulumi.StringPtrInput
	// source database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
	SrcDatabaseType pulumi.StringInput
	// source region.
	SrcRegion pulumi.StringInput
	// tags.
	Tags MigrateServiceTagArrayInput
}

func (MigrateServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*migrateServiceArgs)(nil)).Elem()
}

type MigrateServiceInput interface {
	pulumi.Input

	ToMigrateServiceOutput() MigrateServiceOutput
	ToMigrateServiceOutputWithContext(ctx context.Context) MigrateServiceOutput
}

func (*MigrateService) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateService)(nil)).Elem()
}

func (i *MigrateService) ToMigrateServiceOutput() MigrateServiceOutput {
	return i.ToMigrateServiceOutputWithContext(context.Background())
}

func (i *MigrateService) ToMigrateServiceOutputWithContext(ctx context.Context) MigrateServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateServiceOutput)
}

// MigrateServiceArrayInput is an input type that accepts MigrateServiceArray and MigrateServiceArrayOutput values.
// You can construct a concrete instance of `MigrateServiceArrayInput` via:
//
//	MigrateServiceArray{ MigrateServiceArgs{...} }
type MigrateServiceArrayInput interface {
	pulumi.Input

	ToMigrateServiceArrayOutput() MigrateServiceArrayOutput
	ToMigrateServiceArrayOutputWithContext(context.Context) MigrateServiceArrayOutput
}

type MigrateServiceArray []MigrateServiceInput

func (MigrateServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MigrateService)(nil)).Elem()
}

func (i MigrateServiceArray) ToMigrateServiceArrayOutput() MigrateServiceArrayOutput {
	return i.ToMigrateServiceArrayOutputWithContext(context.Background())
}

func (i MigrateServiceArray) ToMigrateServiceArrayOutputWithContext(ctx context.Context) MigrateServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateServiceArrayOutput)
}

// MigrateServiceMapInput is an input type that accepts MigrateServiceMap and MigrateServiceMapOutput values.
// You can construct a concrete instance of `MigrateServiceMapInput` via:
//
//	MigrateServiceMap{ "key": MigrateServiceArgs{...} }
type MigrateServiceMapInput interface {
	pulumi.Input

	ToMigrateServiceMapOutput() MigrateServiceMapOutput
	ToMigrateServiceMapOutputWithContext(context.Context) MigrateServiceMapOutput
}

type MigrateServiceMap map[string]MigrateServiceInput

func (MigrateServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MigrateService)(nil)).Elem()
}

func (i MigrateServiceMap) ToMigrateServiceMapOutput() MigrateServiceMapOutput {
	return i.ToMigrateServiceMapOutputWithContext(context.Background())
}

func (i MigrateServiceMap) ToMigrateServiceMapOutputWithContext(ctx context.Context) MigrateServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateServiceMapOutput)
}

type MigrateServiceOutput struct{ *pulumi.OutputState }

func (MigrateServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateService)(nil)).Elem()
}

func (o MigrateServiceOutput) ToMigrateServiceOutput() MigrateServiceOutput {
	return o
}

func (o MigrateServiceOutput) ToMigrateServiceOutputWithContext(ctx context.Context) MigrateServiceOutput {
	return o
}

// destination database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
func (o MigrateServiceOutput) DstDatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrateService) pulumi.StringOutput { return v.DstDatabaseType }).(pulumi.StringOutput)
}

// destination region.
func (o MigrateServiceOutput) DstRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrateService) pulumi.StringOutput { return v.DstRegion }).(pulumi.StringOutput)
}

// instance class, optional value is small/medium/large/xlarge/2xlarge.
func (o MigrateServiceOutput) InstanceClass() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrateService) pulumi.StringOutput { return v.InstanceClass }).(pulumi.StringOutput)
}

// job name.
func (o MigrateServiceOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrateService) pulumi.StringPtrOutput { return v.JobName }).(pulumi.StringPtrOutput)
}

// source database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
func (o MigrateServiceOutput) SrcDatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrateService) pulumi.StringOutput { return v.SrcDatabaseType }).(pulumi.StringOutput)
}

// source region.
func (o MigrateServiceOutput) SrcRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrateService) pulumi.StringOutput { return v.SrcRegion }).(pulumi.StringOutput)
}

// tags.
func (o MigrateServiceOutput) Tags() MigrateServiceTagArrayOutput {
	return o.ApplyT(func(v *MigrateService) MigrateServiceTagArrayOutput { return v.Tags }).(MigrateServiceTagArrayOutput)
}

type MigrateServiceArrayOutput struct{ *pulumi.OutputState }

func (MigrateServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MigrateService)(nil)).Elem()
}

func (o MigrateServiceArrayOutput) ToMigrateServiceArrayOutput() MigrateServiceArrayOutput {
	return o
}

func (o MigrateServiceArrayOutput) ToMigrateServiceArrayOutputWithContext(ctx context.Context) MigrateServiceArrayOutput {
	return o
}

func (o MigrateServiceArrayOutput) Index(i pulumi.IntInput) MigrateServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MigrateService {
		return vs[0].([]*MigrateService)[vs[1].(int)]
	}).(MigrateServiceOutput)
}

type MigrateServiceMapOutput struct{ *pulumi.OutputState }

func (MigrateServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MigrateService)(nil)).Elem()
}

func (o MigrateServiceMapOutput) ToMigrateServiceMapOutput() MigrateServiceMapOutput {
	return o
}

func (o MigrateServiceMapOutput) ToMigrateServiceMapOutputWithContext(ctx context.Context) MigrateServiceMapOutput {
	return o
}

func (o MigrateServiceMapOutput) MapIndex(k pulumi.StringInput) MigrateServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MigrateService {
		return vs[0].(map[string]*MigrateService)[vs[1].(string)]
	}).(MigrateServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MigrateServiceInput)(nil)).Elem(), &MigrateService{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrateServiceArrayInput)(nil)).Elem(), MigrateServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrateServiceMapInput)(nil)).Elem(), MigrateServiceMap{})
	pulumi.RegisterOutputType(MigrateServiceOutput{})
	pulumi.RegisterOutputType(MigrateServiceArrayOutput{})
	pulumi.RegisterOutputType(MigrateServiceMapOutput{})
}
