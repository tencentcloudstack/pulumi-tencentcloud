// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dts syncJobPauseOperation
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dts.NewSyncJobPauseOperation(ctx, "syncJobPauseOperation", &Dts.SyncJobPauseOperationArgs{
//				JobId: pulumi.String("sync-werwfs23"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SyncJobPauseOperation struct {
	pulumi.CustomResourceState

	// Synchronization instance id (i.e. identifies a synchronization job).
	JobId pulumi.StringOutput `pulumi:"jobId"`
}

// NewSyncJobPauseOperation registers a new resource with the given unique name, arguments, and options.
func NewSyncJobPauseOperation(ctx *pulumi.Context,
	name string, args *SyncJobPauseOperationArgs, opts ...pulumi.ResourceOption) (*SyncJobPauseOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobId == nil {
		return nil, errors.New("invalid value for required argument 'JobId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SyncJobPauseOperation
	err := ctx.RegisterResource("tencentcloud:Dts/syncJobPauseOperation:SyncJobPauseOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyncJobPauseOperation gets an existing SyncJobPauseOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyncJobPauseOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncJobPauseOperationState, opts ...pulumi.ResourceOption) (*SyncJobPauseOperation, error) {
	var resource SyncJobPauseOperation
	err := ctx.ReadResource("tencentcloud:Dts/syncJobPauseOperation:SyncJobPauseOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyncJobPauseOperation resources.
type syncJobPauseOperationState struct {
	// Synchronization instance id (i.e. identifies a synchronization job).
	JobId *string `pulumi:"jobId"`
}

type SyncJobPauseOperationState struct {
	// Synchronization instance id (i.e. identifies a synchronization job).
	JobId pulumi.StringPtrInput
}

func (SyncJobPauseOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncJobPauseOperationState)(nil)).Elem()
}

type syncJobPauseOperationArgs struct {
	// Synchronization instance id (i.e. identifies a synchronization job).
	JobId string `pulumi:"jobId"`
}

// The set of arguments for constructing a SyncJobPauseOperation resource.
type SyncJobPauseOperationArgs struct {
	// Synchronization instance id (i.e. identifies a synchronization job).
	JobId pulumi.StringInput
}

func (SyncJobPauseOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncJobPauseOperationArgs)(nil)).Elem()
}

type SyncJobPauseOperationInput interface {
	pulumi.Input

	ToSyncJobPauseOperationOutput() SyncJobPauseOperationOutput
	ToSyncJobPauseOperationOutputWithContext(ctx context.Context) SyncJobPauseOperationOutput
}

func (*SyncJobPauseOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncJobPauseOperation)(nil)).Elem()
}

func (i *SyncJobPauseOperation) ToSyncJobPauseOperationOutput() SyncJobPauseOperationOutput {
	return i.ToSyncJobPauseOperationOutputWithContext(context.Background())
}

func (i *SyncJobPauseOperation) ToSyncJobPauseOperationOutputWithContext(ctx context.Context) SyncJobPauseOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncJobPauseOperationOutput)
}

// SyncJobPauseOperationArrayInput is an input type that accepts SyncJobPauseOperationArray and SyncJobPauseOperationArrayOutput values.
// You can construct a concrete instance of `SyncJobPauseOperationArrayInput` via:
//
//	SyncJobPauseOperationArray{ SyncJobPauseOperationArgs{...} }
type SyncJobPauseOperationArrayInput interface {
	pulumi.Input

	ToSyncJobPauseOperationArrayOutput() SyncJobPauseOperationArrayOutput
	ToSyncJobPauseOperationArrayOutputWithContext(context.Context) SyncJobPauseOperationArrayOutput
}

type SyncJobPauseOperationArray []SyncJobPauseOperationInput

func (SyncJobPauseOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncJobPauseOperation)(nil)).Elem()
}

func (i SyncJobPauseOperationArray) ToSyncJobPauseOperationArrayOutput() SyncJobPauseOperationArrayOutput {
	return i.ToSyncJobPauseOperationArrayOutputWithContext(context.Background())
}

func (i SyncJobPauseOperationArray) ToSyncJobPauseOperationArrayOutputWithContext(ctx context.Context) SyncJobPauseOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncJobPauseOperationArrayOutput)
}

// SyncJobPauseOperationMapInput is an input type that accepts SyncJobPauseOperationMap and SyncJobPauseOperationMapOutput values.
// You can construct a concrete instance of `SyncJobPauseOperationMapInput` via:
//
//	SyncJobPauseOperationMap{ "key": SyncJobPauseOperationArgs{...} }
type SyncJobPauseOperationMapInput interface {
	pulumi.Input

	ToSyncJobPauseOperationMapOutput() SyncJobPauseOperationMapOutput
	ToSyncJobPauseOperationMapOutputWithContext(context.Context) SyncJobPauseOperationMapOutput
}

type SyncJobPauseOperationMap map[string]SyncJobPauseOperationInput

func (SyncJobPauseOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncJobPauseOperation)(nil)).Elem()
}

func (i SyncJobPauseOperationMap) ToSyncJobPauseOperationMapOutput() SyncJobPauseOperationMapOutput {
	return i.ToSyncJobPauseOperationMapOutputWithContext(context.Background())
}

func (i SyncJobPauseOperationMap) ToSyncJobPauseOperationMapOutputWithContext(ctx context.Context) SyncJobPauseOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncJobPauseOperationMapOutput)
}

type SyncJobPauseOperationOutput struct{ *pulumi.OutputState }

func (SyncJobPauseOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncJobPauseOperation)(nil)).Elem()
}

func (o SyncJobPauseOperationOutput) ToSyncJobPauseOperationOutput() SyncJobPauseOperationOutput {
	return o
}

func (o SyncJobPauseOperationOutput) ToSyncJobPauseOperationOutputWithContext(ctx context.Context) SyncJobPauseOperationOutput {
	return o
}

// Synchronization instance id (i.e. identifies a synchronization job).
func (o SyncJobPauseOperationOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJobPauseOperation) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

type SyncJobPauseOperationArrayOutput struct{ *pulumi.OutputState }

func (SyncJobPauseOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncJobPauseOperation)(nil)).Elem()
}

func (o SyncJobPauseOperationArrayOutput) ToSyncJobPauseOperationArrayOutput() SyncJobPauseOperationArrayOutput {
	return o
}

func (o SyncJobPauseOperationArrayOutput) ToSyncJobPauseOperationArrayOutputWithContext(ctx context.Context) SyncJobPauseOperationArrayOutput {
	return o
}

func (o SyncJobPauseOperationArrayOutput) Index(i pulumi.IntInput) SyncJobPauseOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyncJobPauseOperation {
		return vs[0].([]*SyncJobPauseOperation)[vs[1].(int)]
	}).(SyncJobPauseOperationOutput)
}

type SyncJobPauseOperationMapOutput struct{ *pulumi.OutputState }

func (SyncJobPauseOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncJobPauseOperation)(nil)).Elem()
}

func (o SyncJobPauseOperationMapOutput) ToSyncJobPauseOperationMapOutput() SyncJobPauseOperationMapOutput {
	return o
}

func (o SyncJobPauseOperationMapOutput) ToSyncJobPauseOperationMapOutputWithContext(ctx context.Context) SyncJobPauseOperationMapOutput {
	return o
}

func (o SyncJobPauseOperationMapOutput) MapIndex(k pulumi.StringInput) SyncJobPauseOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyncJobPauseOperation {
		return vs[0].(map[string]*SyncJobPauseOperation)[vs[1].(string)]
	}).(SyncJobPauseOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyncJobPauseOperationInput)(nil)).Elem(), &SyncJobPauseOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncJobPauseOperationArrayInput)(nil)).Elem(), SyncJobPauseOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncJobPauseOperationMapInput)(nil)).Elem(), SyncJobPauseOperationMap{})
	pulumi.RegisterOutputType(SyncJobPauseOperationOutput{})
	pulumi.RegisterOutputType(SyncJobPauseOperationArrayOutput{})
	pulumi.RegisterOutputType(SyncJobPauseOperationMapOutput{})
}
