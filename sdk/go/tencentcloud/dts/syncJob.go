// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dts syncJob
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dts.NewSyncJob(ctx, "syncJob", &Dts.SyncJobArgs{
//				AutoRenew:       pulumi.Int(0),
//				DstDatabaseType: pulumi.String("cynosdbmysql"),
//				DstRegion:       pulumi.String("ap-guangzhou"),
//				InstanceClass:   pulumi.String("micro"),
//				PayMode:         pulumi.String("PostPay"),
//				SrcDatabaseType: pulumi.String("mysql"),
//				SrcRegion:       pulumi.String("ap-guangzhou"),
//				Tags: dts.SyncJobTagArray{
//					&dts.SyncJobTagArgs{
//						TagKey:   pulumi.String("aaa"),
//						TagValue: pulumi.String("bbb"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SyncJob struct {
	pulumi.CustomResourceState

	// auto renew.
	AutoRenew pulumi.IntOutput `pulumi:"autoRenew"`
	// destination database type.
	DstDatabaseType pulumi.StringOutput `pulumi:"dstDatabaseType"`
	// destination region.
	DstRegion pulumi.StringOutput `pulumi:"dstRegion"`
	// existed job id.
	ExistedJobId pulumi.StringOutput `pulumi:"existedJobId"`
	// instance class.
	InstanceClass pulumi.StringOutput `pulumi:"instanceClass"`
	// job id.
	JobId pulumi.StringOutput `pulumi:"jobId"`
	// job name.
	JobName pulumi.StringOutput `pulumi:"jobName"`
	// pay mode, optional value is PrePay or PostPay.
	PayMode pulumi.StringOutput `pulumi:"payMode"`
	// specification.
	Specification pulumi.StringOutput `pulumi:"specification"`
	// source database type.
	SrcDatabaseType pulumi.StringOutput `pulumi:"srcDatabaseType"`
	// source region.
	SrcRegion pulumi.StringOutput `pulumi:"srcRegion"`
	// tags.
	Tags SyncJobTagArrayOutput `pulumi:"tags"`
}

// NewSyncJob registers a new resource with the given unique name, arguments, and options.
func NewSyncJob(ctx *pulumi.Context,
	name string, args *SyncJobArgs, opts ...pulumi.ResourceOption) (*SyncJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DstDatabaseType == nil {
		return nil, errors.New("invalid value for required argument 'DstDatabaseType'")
	}
	if args.DstRegion == nil {
		return nil, errors.New("invalid value for required argument 'DstRegion'")
	}
	if args.PayMode == nil {
		return nil, errors.New("invalid value for required argument 'PayMode'")
	}
	if args.SrcDatabaseType == nil {
		return nil, errors.New("invalid value for required argument 'SrcDatabaseType'")
	}
	if args.SrcRegion == nil {
		return nil, errors.New("invalid value for required argument 'SrcRegion'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SyncJob
	err := ctx.RegisterResource("tencentcloud:Dts/syncJob:SyncJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyncJob gets an existing SyncJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyncJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncJobState, opts ...pulumi.ResourceOption) (*SyncJob, error) {
	var resource SyncJob
	err := ctx.ReadResource("tencentcloud:Dts/syncJob:SyncJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyncJob resources.
type syncJobState struct {
	// auto renew.
	AutoRenew *int `pulumi:"autoRenew"`
	// destination database type.
	DstDatabaseType *string `pulumi:"dstDatabaseType"`
	// destination region.
	DstRegion *string `pulumi:"dstRegion"`
	// existed job id.
	ExistedJobId *string `pulumi:"existedJobId"`
	// instance class.
	InstanceClass *string `pulumi:"instanceClass"`
	// job id.
	JobId *string `pulumi:"jobId"`
	// job name.
	JobName *string `pulumi:"jobName"`
	// pay mode, optional value is PrePay or PostPay.
	PayMode *string `pulumi:"payMode"`
	// specification.
	Specification *string `pulumi:"specification"`
	// source database type.
	SrcDatabaseType *string `pulumi:"srcDatabaseType"`
	// source region.
	SrcRegion *string `pulumi:"srcRegion"`
	// tags.
	Tags []SyncJobTag `pulumi:"tags"`
}

type SyncJobState struct {
	// auto renew.
	AutoRenew pulumi.IntPtrInput
	// destination database type.
	DstDatabaseType pulumi.StringPtrInput
	// destination region.
	DstRegion pulumi.StringPtrInput
	// existed job id.
	ExistedJobId pulumi.StringPtrInput
	// instance class.
	InstanceClass pulumi.StringPtrInput
	// job id.
	JobId pulumi.StringPtrInput
	// job name.
	JobName pulumi.StringPtrInput
	// pay mode, optional value is PrePay or PostPay.
	PayMode pulumi.StringPtrInput
	// specification.
	Specification pulumi.StringPtrInput
	// source database type.
	SrcDatabaseType pulumi.StringPtrInput
	// source region.
	SrcRegion pulumi.StringPtrInput
	// tags.
	Tags SyncJobTagArrayInput
}

func (SyncJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncJobState)(nil)).Elem()
}

type syncJobArgs struct {
	// auto renew.
	AutoRenew *int `pulumi:"autoRenew"`
	// destination database type.
	DstDatabaseType string `pulumi:"dstDatabaseType"`
	// destination region.
	DstRegion string `pulumi:"dstRegion"`
	// existed job id.
	ExistedJobId *string `pulumi:"existedJobId"`
	// instance class.
	InstanceClass *string `pulumi:"instanceClass"`
	// job name.
	JobName *string `pulumi:"jobName"`
	// pay mode, optional value is PrePay or PostPay.
	PayMode string `pulumi:"payMode"`
	// specification.
	Specification *string `pulumi:"specification"`
	// source database type.
	SrcDatabaseType string `pulumi:"srcDatabaseType"`
	// source region.
	SrcRegion string `pulumi:"srcRegion"`
	// tags.
	Tags []SyncJobTag `pulumi:"tags"`
}

// The set of arguments for constructing a SyncJob resource.
type SyncJobArgs struct {
	// auto renew.
	AutoRenew pulumi.IntPtrInput
	// destination database type.
	DstDatabaseType pulumi.StringInput
	// destination region.
	DstRegion pulumi.StringInput
	// existed job id.
	ExistedJobId pulumi.StringPtrInput
	// instance class.
	InstanceClass pulumi.StringPtrInput
	// job name.
	JobName pulumi.StringPtrInput
	// pay mode, optional value is PrePay or PostPay.
	PayMode pulumi.StringInput
	// specification.
	Specification pulumi.StringPtrInput
	// source database type.
	SrcDatabaseType pulumi.StringInput
	// source region.
	SrcRegion pulumi.StringInput
	// tags.
	Tags SyncJobTagArrayInput
}

func (SyncJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncJobArgs)(nil)).Elem()
}

type SyncJobInput interface {
	pulumi.Input

	ToSyncJobOutput() SyncJobOutput
	ToSyncJobOutputWithContext(ctx context.Context) SyncJobOutput
}

func (*SyncJob) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncJob)(nil)).Elem()
}

func (i *SyncJob) ToSyncJobOutput() SyncJobOutput {
	return i.ToSyncJobOutputWithContext(context.Background())
}

func (i *SyncJob) ToSyncJobOutputWithContext(ctx context.Context) SyncJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncJobOutput)
}

// SyncJobArrayInput is an input type that accepts SyncJobArray and SyncJobArrayOutput values.
// You can construct a concrete instance of `SyncJobArrayInput` via:
//
//	SyncJobArray{ SyncJobArgs{...} }
type SyncJobArrayInput interface {
	pulumi.Input

	ToSyncJobArrayOutput() SyncJobArrayOutput
	ToSyncJobArrayOutputWithContext(context.Context) SyncJobArrayOutput
}

type SyncJobArray []SyncJobInput

func (SyncJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncJob)(nil)).Elem()
}

func (i SyncJobArray) ToSyncJobArrayOutput() SyncJobArrayOutput {
	return i.ToSyncJobArrayOutputWithContext(context.Background())
}

func (i SyncJobArray) ToSyncJobArrayOutputWithContext(ctx context.Context) SyncJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncJobArrayOutput)
}

// SyncJobMapInput is an input type that accepts SyncJobMap and SyncJobMapOutput values.
// You can construct a concrete instance of `SyncJobMapInput` via:
//
//	SyncJobMap{ "key": SyncJobArgs{...} }
type SyncJobMapInput interface {
	pulumi.Input

	ToSyncJobMapOutput() SyncJobMapOutput
	ToSyncJobMapOutputWithContext(context.Context) SyncJobMapOutput
}

type SyncJobMap map[string]SyncJobInput

func (SyncJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncJob)(nil)).Elem()
}

func (i SyncJobMap) ToSyncJobMapOutput() SyncJobMapOutput {
	return i.ToSyncJobMapOutputWithContext(context.Background())
}

func (i SyncJobMap) ToSyncJobMapOutputWithContext(ctx context.Context) SyncJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncJobMapOutput)
}

type SyncJobOutput struct{ *pulumi.OutputState }

func (SyncJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncJob)(nil)).Elem()
}

func (o SyncJobOutput) ToSyncJobOutput() SyncJobOutput {
	return o
}

func (o SyncJobOutput) ToSyncJobOutputWithContext(ctx context.Context) SyncJobOutput {
	return o
}

// auto renew.
func (o SyncJobOutput) AutoRenew() pulumi.IntOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.IntOutput { return v.AutoRenew }).(pulumi.IntOutput)
}

// destination database type.
func (o SyncJobOutput) DstDatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.DstDatabaseType }).(pulumi.StringOutput)
}

// destination region.
func (o SyncJobOutput) DstRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.DstRegion }).(pulumi.StringOutput)
}

// existed job id.
func (o SyncJobOutput) ExistedJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.ExistedJobId }).(pulumi.StringOutput)
}

// instance class.
func (o SyncJobOutput) InstanceClass() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.InstanceClass }).(pulumi.StringOutput)
}

// job id.
func (o SyncJobOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

// job name.
func (o SyncJobOutput) JobName() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.JobName }).(pulumi.StringOutput)
}

// pay mode, optional value is PrePay or PostPay.
func (o SyncJobOutput) PayMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.PayMode }).(pulumi.StringOutput)
}

// specification.
func (o SyncJobOutput) Specification() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.Specification }).(pulumi.StringOutput)
}

// source database type.
func (o SyncJobOutput) SrcDatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.SrcDatabaseType }).(pulumi.StringOutput)
}

// source region.
func (o SyncJobOutput) SrcRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncJob) pulumi.StringOutput { return v.SrcRegion }).(pulumi.StringOutput)
}

// tags.
func (o SyncJobOutput) Tags() SyncJobTagArrayOutput {
	return o.ApplyT(func(v *SyncJob) SyncJobTagArrayOutput { return v.Tags }).(SyncJobTagArrayOutput)
}

type SyncJobArrayOutput struct{ *pulumi.OutputState }

func (SyncJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncJob)(nil)).Elem()
}

func (o SyncJobArrayOutput) ToSyncJobArrayOutput() SyncJobArrayOutput {
	return o
}

func (o SyncJobArrayOutput) ToSyncJobArrayOutputWithContext(ctx context.Context) SyncJobArrayOutput {
	return o
}

func (o SyncJobArrayOutput) Index(i pulumi.IntInput) SyncJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyncJob {
		return vs[0].([]*SyncJob)[vs[1].(int)]
	}).(SyncJobOutput)
}

type SyncJobMapOutput struct{ *pulumi.OutputState }

func (SyncJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncJob)(nil)).Elem()
}

func (o SyncJobMapOutput) ToSyncJobMapOutput() SyncJobMapOutput {
	return o
}

func (o SyncJobMapOutput) ToSyncJobMapOutputWithContext(ctx context.Context) SyncJobMapOutput {
	return o
}

func (o SyncJobMapOutput) MapIndex(k pulumi.StringInput) SyncJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyncJob {
		return vs[0].(map[string]*SyncJob)[vs[1].(string)]
	}).(SyncJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyncJobInput)(nil)).Elem(), &SyncJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncJobArrayInput)(nil)).Elem(), SyncJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncJobMapInput)(nil)).Elem(), SyncJobMap{})
	pulumi.RegisterOutputType(SyncJobOutput{})
	pulumi.RegisterOutputType(SyncJobArrayOutput{})
	pulumi.RegisterOutputType(SyncJobMapOutput{})
}
