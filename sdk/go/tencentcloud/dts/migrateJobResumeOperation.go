// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dts migrateJobResumeOperation
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dts.NewMigrateJobResumeOperation(ctx, "resume", &Dts.MigrateJobResumeOperationArgs{
//				JobId:        pulumi.String("job_id"),
//				ResumeOption: pulumi.String("normal"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MigrateJobResumeOperation struct {
	pulumi.CustomResourceState

	// job id.
	JobId pulumi.StringOutput `pulumi:"jobId"`
	// resume mode: 1.clearData-Clear target data; 2.overwrite-The task is executed in overwrite mode; 3.normal-No extra action. Note that clearData and overwrite are valid only for redis links, normal is valid only for non-Redis links.
	ResumeOption pulumi.StringOutput `pulumi:"resumeOption"`
}

// NewMigrateJobResumeOperation registers a new resource with the given unique name, arguments, and options.
func NewMigrateJobResumeOperation(ctx *pulumi.Context,
	name string, args *MigrateJobResumeOperationArgs, opts ...pulumi.ResourceOption) (*MigrateJobResumeOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobId == nil {
		return nil, errors.New("invalid value for required argument 'JobId'")
	}
	if args.ResumeOption == nil {
		return nil, errors.New("invalid value for required argument 'ResumeOption'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MigrateJobResumeOperation
	err := ctx.RegisterResource("tencentcloud:Dts/migrateJobResumeOperation:MigrateJobResumeOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMigrateJobResumeOperation gets an existing MigrateJobResumeOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMigrateJobResumeOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MigrateJobResumeOperationState, opts ...pulumi.ResourceOption) (*MigrateJobResumeOperation, error) {
	var resource MigrateJobResumeOperation
	err := ctx.ReadResource("tencentcloud:Dts/migrateJobResumeOperation:MigrateJobResumeOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MigrateJobResumeOperation resources.
type migrateJobResumeOperationState struct {
	// job id.
	JobId *string `pulumi:"jobId"`
	// resume mode: 1.clearData-Clear target data; 2.overwrite-The task is executed in overwrite mode; 3.normal-No extra action. Note that clearData and overwrite are valid only for redis links, normal is valid only for non-Redis links.
	ResumeOption *string `pulumi:"resumeOption"`
}

type MigrateJobResumeOperationState struct {
	// job id.
	JobId pulumi.StringPtrInput
	// resume mode: 1.clearData-Clear target data; 2.overwrite-The task is executed in overwrite mode; 3.normal-No extra action. Note that clearData and overwrite are valid only for redis links, normal is valid only for non-Redis links.
	ResumeOption pulumi.StringPtrInput
}

func (MigrateJobResumeOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*migrateJobResumeOperationState)(nil)).Elem()
}

type migrateJobResumeOperationArgs struct {
	// job id.
	JobId string `pulumi:"jobId"`
	// resume mode: 1.clearData-Clear target data; 2.overwrite-The task is executed in overwrite mode; 3.normal-No extra action. Note that clearData and overwrite are valid only for redis links, normal is valid only for non-Redis links.
	ResumeOption string `pulumi:"resumeOption"`
}

// The set of arguments for constructing a MigrateJobResumeOperation resource.
type MigrateJobResumeOperationArgs struct {
	// job id.
	JobId pulumi.StringInput
	// resume mode: 1.clearData-Clear target data; 2.overwrite-The task is executed in overwrite mode; 3.normal-No extra action. Note that clearData and overwrite are valid only for redis links, normal is valid only for non-Redis links.
	ResumeOption pulumi.StringInput
}

func (MigrateJobResumeOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*migrateJobResumeOperationArgs)(nil)).Elem()
}

type MigrateJobResumeOperationInput interface {
	pulumi.Input

	ToMigrateJobResumeOperationOutput() MigrateJobResumeOperationOutput
	ToMigrateJobResumeOperationOutputWithContext(ctx context.Context) MigrateJobResumeOperationOutput
}

func (*MigrateJobResumeOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateJobResumeOperation)(nil)).Elem()
}

func (i *MigrateJobResumeOperation) ToMigrateJobResumeOperationOutput() MigrateJobResumeOperationOutput {
	return i.ToMigrateJobResumeOperationOutputWithContext(context.Background())
}

func (i *MigrateJobResumeOperation) ToMigrateJobResumeOperationOutputWithContext(ctx context.Context) MigrateJobResumeOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateJobResumeOperationOutput)
}

// MigrateJobResumeOperationArrayInput is an input type that accepts MigrateJobResumeOperationArray and MigrateJobResumeOperationArrayOutput values.
// You can construct a concrete instance of `MigrateJobResumeOperationArrayInput` via:
//
//	MigrateJobResumeOperationArray{ MigrateJobResumeOperationArgs{...} }
type MigrateJobResumeOperationArrayInput interface {
	pulumi.Input

	ToMigrateJobResumeOperationArrayOutput() MigrateJobResumeOperationArrayOutput
	ToMigrateJobResumeOperationArrayOutputWithContext(context.Context) MigrateJobResumeOperationArrayOutput
}

type MigrateJobResumeOperationArray []MigrateJobResumeOperationInput

func (MigrateJobResumeOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MigrateJobResumeOperation)(nil)).Elem()
}

func (i MigrateJobResumeOperationArray) ToMigrateJobResumeOperationArrayOutput() MigrateJobResumeOperationArrayOutput {
	return i.ToMigrateJobResumeOperationArrayOutputWithContext(context.Background())
}

func (i MigrateJobResumeOperationArray) ToMigrateJobResumeOperationArrayOutputWithContext(ctx context.Context) MigrateJobResumeOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateJobResumeOperationArrayOutput)
}

// MigrateJobResumeOperationMapInput is an input type that accepts MigrateJobResumeOperationMap and MigrateJobResumeOperationMapOutput values.
// You can construct a concrete instance of `MigrateJobResumeOperationMapInput` via:
//
//	MigrateJobResumeOperationMap{ "key": MigrateJobResumeOperationArgs{...} }
type MigrateJobResumeOperationMapInput interface {
	pulumi.Input

	ToMigrateJobResumeOperationMapOutput() MigrateJobResumeOperationMapOutput
	ToMigrateJobResumeOperationMapOutputWithContext(context.Context) MigrateJobResumeOperationMapOutput
}

type MigrateJobResumeOperationMap map[string]MigrateJobResumeOperationInput

func (MigrateJobResumeOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MigrateJobResumeOperation)(nil)).Elem()
}

func (i MigrateJobResumeOperationMap) ToMigrateJobResumeOperationMapOutput() MigrateJobResumeOperationMapOutput {
	return i.ToMigrateJobResumeOperationMapOutputWithContext(context.Background())
}

func (i MigrateJobResumeOperationMap) ToMigrateJobResumeOperationMapOutputWithContext(ctx context.Context) MigrateJobResumeOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrateJobResumeOperationMapOutput)
}

type MigrateJobResumeOperationOutput struct{ *pulumi.OutputState }

func (MigrateJobResumeOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrateJobResumeOperation)(nil)).Elem()
}

func (o MigrateJobResumeOperationOutput) ToMigrateJobResumeOperationOutput() MigrateJobResumeOperationOutput {
	return o
}

func (o MigrateJobResumeOperationOutput) ToMigrateJobResumeOperationOutputWithContext(ctx context.Context) MigrateJobResumeOperationOutput {
	return o
}

// job id.
func (o MigrateJobResumeOperationOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrateJobResumeOperation) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

// resume mode: 1.clearData-Clear target data; 2.overwrite-The task is executed in overwrite mode; 3.normal-No extra action. Note that clearData and overwrite are valid only for redis links, normal is valid only for non-Redis links.
func (o MigrateJobResumeOperationOutput) ResumeOption() pulumi.StringOutput {
	return o.ApplyT(func(v *MigrateJobResumeOperation) pulumi.StringOutput { return v.ResumeOption }).(pulumi.StringOutput)
}

type MigrateJobResumeOperationArrayOutput struct{ *pulumi.OutputState }

func (MigrateJobResumeOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MigrateJobResumeOperation)(nil)).Elem()
}

func (o MigrateJobResumeOperationArrayOutput) ToMigrateJobResumeOperationArrayOutput() MigrateJobResumeOperationArrayOutput {
	return o
}

func (o MigrateJobResumeOperationArrayOutput) ToMigrateJobResumeOperationArrayOutputWithContext(ctx context.Context) MigrateJobResumeOperationArrayOutput {
	return o
}

func (o MigrateJobResumeOperationArrayOutput) Index(i pulumi.IntInput) MigrateJobResumeOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MigrateJobResumeOperation {
		return vs[0].([]*MigrateJobResumeOperation)[vs[1].(int)]
	}).(MigrateJobResumeOperationOutput)
}

type MigrateJobResumeOperationMapOutput struct{ *pulumi.OutputState }

func (MigrateJobResumeOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MigrateJobResumeOperation)(nil)).Elem()
}

func (o MigrateJobResumeOperationMapOutput) ToMigrateJobResumeOperationMapOutput() MigrateJobResumeOperationMapOutput {
	return o
}

func (o MigrateJobResumeOperationMapOutput) ToMigrateJobResumeOperationMapOutputWithContext(ctx context.Context) MigrateJobResumeOperationMapOutput {
	return o
}

func (o MigrateJobResumeOperationMapOutput) MapIndex(k pulumi.StringInput) MigrateJobResumeOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MigrateJobResumeOperation {
		return vs[0].(map[string]*MigrateJobResumeOperation)[vs[1].(string)]
	}).(MigrateJobResumeOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MigrateJobResumeOperationInput)(nil)).Elem(), &MigrateJobResumeOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrateJobResumeOperationArrayInput)(nil)).Elem(), MigrateJobResumeOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MigrateJobResumeOperationMapInput)(nil)).Elem(), MigrateJobResumeOperationMap{})
	pulumi.RegisterOutputType(MigrateJobResumeOperationOutput{})
	pulumi.RegisterOutputType(MigrateJobResumeOperationArrayOutput{})
	pulumi.RegisterOutputType(MigrateJobResumeOperationMapOutput{})
}
