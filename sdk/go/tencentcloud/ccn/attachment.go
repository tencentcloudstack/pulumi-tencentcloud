// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ccn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CCN attaching resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			region := "ap-guangzhou"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			otheruin := "123353"
//			if param := cfg.Get("otheruin"); param != "" {
//				otheruin = param
//			}
//			otherccn := "ccn-151ssaga"
//			if param := cfg.Get("otherccn"); param != "" {
//				otherccn = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//				DnsServers: pulumi.StringArray{
//					pulumi.String("119.29.29.29"),
//					pulumi.String("8.8.8.8"),
//				},
//				IsMulticast: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			main, err := Ccn.NewInstance(ctx, "main", &Ccn.InstanceArgs{
//				Description: pulumi.String("ci-temp-test-ccn-des"),
//				Qos:         pulumi.String("AG"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ccn.NewAttachment(ctx, "attachment", &Ccn.AttachmentArgs{
//				CcnId:          main.ID(),
//				InstanceType:   pulumi.String("VPC"),
//				InstanceId:     vpc.ID(),
//				InstanceRegion: pulumi.String(region),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ccn.NewAttachment(ctx, "otherAccount", &Ccn.AttachmentArgs{
//				CcnId:          pulumi.String(otherccn),
//				InstanceType:   pulumi.String("VPC"),
//				InstanceId:     vpc.ID(),
//				InstanceRegion: pulumi.String(region),
//				CcnUin:         pulumi.String(otheruin),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Attachment struct {
	pulumi.CustomResourceState

	// Time of attaching.
	AttachedTime pulumi.StringOutput `pulumi:"attachedTime"`
	// ID of the CCN.
	CcnId pulumi.StringOutput `pulumi:"ccnId"`
	// Uin of the ccn attached. Default is ``, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type `VPC`.
	CcnUin pulumi.StringOutput `pulumi:"ccnUin"`
	// A network address block of the instance that is attached.
	CidrBlocks pulumi.StringArrayOutput `pulumi:"cidrBlocks"`
	// Remark of attachment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ID of instance is attached.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The region that the instance locates at.
	InstanceRegion pulumi.StringOutput `pulumi:"instanceRegion"`
	// Type of attached instance network, and available values include `VPC`, `DIRECTCONNECT`, `BMVPC` and `VPNGW`. Note: `VPNGW` type is only for whitelist customer now.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// Route id list.
	RouteIds pulumi.StringArrayOutput `pulumi:"routeIds"`
	// States of instance is attached. Valid values: `PENDING`, `ACTIVE`, `EXPIRED`, `REJECTED`, `DELETED`, `FAILED`, `ATTACHING`, `DETACHING` and `DETACHFAILED`. `FAILED` means asynchronous forced disassociation after 2 hours. `DETACHFAILED` means asynchronous forced disassociation after 2 hours.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewAttachment registers a new resource with the given unique name, arguments, and options.
func NewAttachment(ctx *pulumi.Context,
	name string, args *AttachmentArgs, opts ...pulumi.ResourceOption) (*Attachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CcnId == nil {
		return nil, errors.New("invalid value for required argument 'CcnId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.InstanceRegion == nil {
		return nil, errors.New("invalid value for required argument 'InstanceRegion'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Attachment
	err := ctx.RegisterResource("tencentcloud:Ccn/attachment:Attachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachment gets an existing Attachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachmentState, opts ...pulumi.ResourceOption) (*Attachment, error) {
	var resource Attachment
	err := ctx.ReadResource("tencentcloud:Ccn/attachment:Attachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Attachment resources.
type attachmentState struct {
	// Time of attaching.
	AttachedTime *string `pulumi:"attachedTime"`
	// ID of the CCN.
	CcnId *string `pulumi:"ccnId"`
	// Uin of the ccn attached. Default is ``, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type `VPC`.
	CcnUin *string `pulumi:"ccnUin"`
	// A network address block of the instance that is attached.
	CidrBlocks []string `pulumi:"cidrBlocks"`
	// Remark of attachment.
	Description *string `pulumi:"description"`
	// ID of instance is attached.
	InstanceId *string `pulumi:"instanceId"`
	// The region that the instance locates at.
	InstanceRegion *string `pulumi:"instanceRegion"`
	// Type of attached instance network, and available values include `VPC`, `DIRECTCONNECT`, `BMVPC` and `VPNGW`. Note: `VPNGW` type is only for whitelist customer now.
	InstanceType *string `pulumi:"instanceType"`
	// Route id list.
	RouteIds []string `pulumi:"routeIds"`
	// States of instance is attached. Valid values: `PENDING`, `ACTIVE`, `EXPIRED`, `REJECTED`, `DELETED`, `FAILED`, `ATTACHING`, `DETACHING` and `DETACHFAILED`. `FAILED` means asynchronous forced disassociation after 2 hours. `DETACHFAILED` means asynchronous forced disassociation after 2 hours.
	State *string `pulumi:"state"`
}

type AttachmentState struct {
	// Time of attaching.
	AttachedTime pulumi.StringPtrInput
	// ID of the CCN.
	CcnId pulumi.StringPtrInput
	// Uin of the ccn attached. Default is ``, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type `VPC`.
	CcnUin pulumi.StringPtrInput
	// A network address block of the instance that is attached.
	CidrBlocks pulumi.StringArrayInput
	// Remark of attachment.
	Description pulumi.StringPtrInput
	// ID of instance is attached.
	InstanceId pulumi.StringPtrInput
	// The region that the instance locates at.
	InstanceRegion pulumi.StringPtrInput
	// Type of attached instance network, and available values include `VPC`, `DIRECTCONNECT`, `BMVPC` and `VPNGW`. Note: `VPNGW` type is only for whitelist customer now.
	InstanceType pulumi.StringPtrInput
	// Route id list.
	RouteIds pulumi.StringArrayInput
	// States of instance is attached. Valid values: `PENDING`, `ACTIVE`, `EXPIRED`, `REJECTED`, `DELETED`, `FAILED`, `ATTACHING`, `DETACHING` and `DETACHFAILED`. `FAILED` means asynchronous forced disassociation after 2 hours. `DETACHFAILED` means asynchronous forced disassociation after 2 hours.
	State pulumi.StringPtrInput
}

func (AttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentState)(nil)).Elem()
}

type attachmentArgs struct {
	// ID of the CCN.
	CcnId string `pulumi:"ccnId"`
	// Uin of the ccn attached. Default is ``, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type `VPC`.
	CcnUin *string `pulumi:"ccnUin"`
	// Remark of attachment.
	Description *string `pulumi:"description"`
	// ID of instance is attached.
	InstanceId string `pulumi:"instanceId"`
	// The region that the instance locates at.
	InstanceRegion string `pulumi:"instanceRegion"`
	// Type of attached instance network, and available values include `VPC`, `DIRECTCONNECT`, `BMVPC` and `VPNGW`. Note: `VPNGW` type is only for whitelist customer now.
	InstanceType string `pulumi:"instanceType"`
}

// The set of arguments for constructing a Attachment resource.
type AttachmentArgs struct {
	// ID of the CCN.
	CcnId pulumi.StringInput
	// Uin of the ccn attached. Default is ``, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type `VPC`.
	CcnUin pulumi.StringPtrInput
	// Remark of attachment.
	Description pulumi.StringPtrInput
	// ID of instance is attached.
	InstanceId pulumi.StringInput
	// The region that the instance locates at.
	InstanceRegion pulumi.StringInput
	// Type of attached instance network, and available values include `VPC`, `DIRECTCONNECT`, `BMVPC` and `VPNGW`. Note: `VPNGW` type is only for whitelist customer now.
	InstanceType pulumi.StringInput
}

func (AttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentArgs)(nil)).Elem()
}

type AttachmentInput interface {
	pulumi.Input

	ToAttachmentOutput() AttachmentOutput
	ToAttachmentOutputWithContext(ctx context.Context) AttachmentOutput
}

func (*Attachment) ElementType() reflect.Type {
	return reflect.TypeOf((**Attachment)(nil)).Elem()
}

func (i *Attachment) ToAttachmentOutput() AttachmentOutput {
	return i.ToAttachmentOutputWithContext(context.Background())
}

func (i *Attachment) ToAttachmentOutputWithContext(ctx context.Context) AttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentOutput)
}

// AttachmentArrayInput is an input type that accepts AttachmentArray and AttachmentArrayOutput values.
// You can construct a concrete instance of `AttachmentArrayInput` via:
//
//	AttachmentArray{ AttachmentArgs{...} }
type AttachmentArrayInput interface {
	pulumi.Input

	ToAttachmentArrayOutput() AttachmentArrayOutput
	ToAttachmentArrayOutputWithContext(context.Context) AttachmentArrayOutput
}

type AttachmentArray []AttachmentInput

func (AttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Attachment)(nil)).Elem()
}

func (i AttachmentArray) ToAttachmentArrayOutput() AttachmentArrayOutput {
	return i.ToAttachmentArrayOutputWithContext(context.Background())
}

func (i AttachmentArray) ToAttachmentArrayOutputWithContext(ctx context.Context) AttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentArrayOutput)
}

// AttachmentMapInput is an input type that accepts AttachmentMap and AttachmentMapOutput values.
// You can construct a concrete instance of `AttachmentMapInput` via:
//
//	AttachmentMap{ "key": AttachmentArgs{...} }
type AttachmentMapInput interface {
	pulumi.Input

	ToAttachmentMapOutput() AttachmentMapOutput
	ToAttachmentMapOutputWithContext(context.Context) AttachmentMapOutput
}

type AttachmentMap map[string]AttachmentInput

func (AttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Attachment)(nil)).Elem()
}

func (i AttachmentMap) ToAttachmentMapOutput() AttachmentMapOutput {
	return i.ToAttachmentMapOutputWithContext(context.Background())
}

func (i AttachmentMap) ToAttachmentMapOutputWithContext(ctx context.Context) AttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentMapOutput)
}

type AttachmentOutput struct{ *pulumi.OutputState }

func (AttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Attachment)(nil)).Elem()
}

func (o AttachmentOutput) ToAttachmentOutput() AttachmentOutput {
	return o
}

func (o AttachmentOutput) ToAttachmentOutputWithContext(ctx context.Context) AttachmentOutput {
	return o
}

// Time of attaching.
func (o AttachmentOutput) AttachedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringOutput { return v.AttachedTime }).(pulumi.StringOutput)
}

// ID of the CCN.
func (o AttachmentOutput) CcnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringOutput { return v.CcnId }).(pulumi.StringOutput)
}

// Uin of the ccn attached. Default is “, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type `VPC`.
func (o AttachmentOutput) CcnUin() pulumi.StringOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringOutput { return v.CcnUin }).(pulumi.StringOutput)
}

// A network address block of the instance that is attached.
func (o AttachmentOutput) CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringArrayOutput { return v.CidrBlocks }).(pulumi.StringArrayOutput)
}

// Remark of attachment.
func (o AttachmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ID of instance is attached.
func (o AttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The region that the instance locates at.
func (o AttachmentOutput) InstanceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringOutput { return v.InstanceRegion }).(pulumi.StringOutput)
}

// Type of attached instance network, and available values include `VPC`, `DIRECTCONNECT`, `BMVPC` and `VPNGW`. Note: `VPNGW` type is only for whitelist customer now.
func (o AttachmentOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// Route id list.
func (o AttachmentOutput) RouteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringArrayOutput { return v.RouteIds }).(pulumi.StringArrayOutput)
}

// States of instance is attached. Valid values: `PENDING`, `ACTIVE`, `EXPIRED`, `REJECTED`, `DELETED`, `FAILED`, `ATTACHING`, `DETACHING` and `DETACHFAILED`. `FAILED` means asynchronous forced disassociation after 2 hours. `DETACHFAILED` means asynchronous forced disassociation after 2 hours.
func (o AttachmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Attachment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type AttachmentArrayOutput struct{ *pulumi.OutputState }

func (AttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Attachment)(nil)).Elem()
}

func (o AttachmentArrayOutput) ToAttachmentArrayOutput() AttachmentArrayOutput {
	return o
}

func (o AttachmentArrayOutput) ToAttachmentArrayOutputWithContext(ctx context.Context) AttachmentArrayOutput {
	return o
}

func (o AttachmentArrayOutput) Index(i pulumi.IntInput) AttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Attachment {
		return vs[0].([]*Attachment)[vs[1].(int)]
	}).(AttachmentOutput)
}

type AttachmentMapOutput struct{ *pulumi.OutputState }

func (AttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Attachment)(nil)).Elem()
}

func (o AttachmentMapOutput) ToAttachmentMapOutput() AttachmentMapOutput {
	return o
}

func (o AttachmentMapOutput) ToAttachmentMapOutputWithContext(ctx context.Context) AttachmentMapOutput {
	return o
}

func (o AttachmentMapOutput) MapIndex(k pulumi.StringInput) AttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Attachment {
		return vs[0].(map[string]*Attachment)[vs[1].(string)]
	}).(AttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentInput)(nil)).Elem(), &Attachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentArrayInput)(nil)).Elem(), AttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentMapInput)(nil)).Elem(), AttachmentMap{})
	pulumi.RegisterOutputType(AttachmentOutput{})
	pulumi.RegisterOutputType(AttachmentArrayOutput{})
	pulumi.RegisterOutputType(AttachmentMapOutput{})
}
