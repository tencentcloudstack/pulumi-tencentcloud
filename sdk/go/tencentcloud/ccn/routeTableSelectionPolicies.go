// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ccn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a CCN Route table selection policies.
//
// > **NOTE:** Use this resource to manage all selection policies under the routing table of CCN instances.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			region := "ap-guangzhou"
//			if param := cfg.Get("region"); param != "" {
//				region = param
//			}
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			_, err = Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(availabilityZone),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("172.16.0.0/24"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create ccn
//			exampleInstance, err := Ccn.NewInstance(ctx, "exampleInstance", &Ccn.InstanceArgs{
//				Description:        pulumi.String("desc."),
//				Qos:                pulumi.String("AG"),
//				ChargeType:         pulumi.String("PREPAID"),
//				BandwidthLimitType: pulumi.String("INTER_REGION_LIMIT"),
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create ccn route table
//			exampleRouteTable, err := Ccn.NewRouteTable(ctx, "exampleRouteTable", &Ccn.RouteTableArgs{
//				CcnId:       exampleInstance.ID(),
//				Description: pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			// attachment instance
//			_, err = Ccn.NewAttachment(ctx, "attachment", &Ccn.AttachmentArgs{
//				CcnId:          exampleInstance.ID(),
//				InstanceId:     vpc.ID(),
//				InstanceType:   pulumi.String("VPC"),
//				InstanceRegion: pulumi.String(region),
//				RouteTableId:   exampleRouteTable.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// create route table selection policy
//			_, err = Ccn.NewRouteTableSelectionPolicies(ctx, "exampleRouteTableSelectionPolicies", &Ccn.RouteTableSelectionPoliciesArgs{
//				CcnId: exampleInstance.ID(),
//				SelectionPolicies: ccn.RouteTableSelectionPoliciesSelectionPolicyArray{
//					&ccn.RouteTableSelectionPoliciesSelectionPolicyArgs{
//						InstanceType:    pulumi.String("VPC"),
//						InstanceId:      vpc.ID(),
//						SourceCidrBlock: pulumi.String("192.168.100.0/24"),
//						RouteTableId:    exampleRouteTable.ID(),
//						Description:     pulumi.String("desc."),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Ccn instance can be imported, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Ccn/routeTableSelectionPolicies:RouteTableSelectionPolicies example ccn-gr7nynbd
// ```
type RouteTableSelectionPolicies struct {
	pulumi.CustomResourceState

	// CCN Instance ID.
	CcnId pulumi.StringOutput `pulumi:"ccnId"`
	// Select strategy information set.
	SelectionPolicies RouteTableSelectionPoliciesSelectionPolicyArrayOutput `pulumi:"selectionPolicies"`
}

// NewRouteTableSelectionPolicies registers a new resource with the given unique name, arguments, and options.
func NewRouteTableSelectionPolicies(ctx *pulumi.Context,
	name string, args *RouteTableSelectionPoliciesArgs, opts ...pulumi.ResourceOption) (*RouteTableSelectionPolicies, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CcnId == nil {
		return nil, errors.New("invalid value for required argument 'CcnId'")
	}
	if args.SelectionPolicies == nil {
		return nil, errors.New("invalid value for required argument 'SelectionPolicies'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTableSelectionPolicies
	err := ctx.RegisterResource("tencentcloud:Ccn/routeTableSelectionPolicies:RouteTableSelectionPolicies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTableSelectionPolicies gets an existing RouteTableSelectionPolicies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTableSelectionPolicies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableSelectionPoliciesState, opts ...pulumi.ResourceOption) (*RouteTableSelectionPolicies, error) {
	var resource RouteTableSelectionPolicies
	err := ctx.ReadResource("tencentcloud:Ccn/routeTableSelectionPolicies:RouteTableSelectionPolicies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTableSelectionPolicies resources.
type routeTableSelectionPoliciesState struct {
	// CCN Instance ID.
	CcnId *string `pulumi:"ccnId"`
	// Select strategy information set.
	SelectionPolicies []RouteTableSelectionPoliciesSelectionPolicy `pulumi:"selectionPolicies"`
}

type RouteTableSelectionPoliciesState struct {
	// CCN Instance ID.
	CcnId pulumi.StringPtrInput
	// Select strategy information set.
	SelectionPolicies RouteTableSelectionPoliciesSelectionPolicyArrayInput
}

func (RouteTableSelectionPoliciesState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableSelectionPoliciesState)(nil)).Elem()
}

type routeTableSelectionPoliciesArgs struct {
	// CCN Instance ID.
	CcnId string `pulumi:"ccnId"`
	// Select strategy information set.
	SelectionPolicies []RouteTableSelectionPoliciesSelectionPolicy `pulumi:"selectionPolicies"`
}

// The set of arguments for constructing a RouteTableSelectionPolicies resource.
type RouteTableSelectionPoliciesArgs struct {
	// CCN Instance ID.
	CcnId pulumi.StringInput
	// Select strategy information set.
	SelectionPolicies RouteTableSelectionPoliciesSelectionPolicyArrayInput
}

func (RouteTableSelectionPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableSelectionPoliciesArgs)(nil)).Elem()
}

type RouteTableSelectionPoliciesInput interface {
	pulumi.Input

	ToRouteTableSelectionPoliciesOutput() RouteTableSelectionPoliciesOutput
	ToRouteTableSelectionPoliciesOutputWithContext(ctx context.Context) RouteTableSelectionPoliciesOutput
}

func (*RouteTableSelectionPolicies) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableSelectionPolicies)(nil)).Elem()
}

func (i *RouteTableSelectionPolicies) ToRouteTableSelectionPoliciesOutput() RouteTableSelectionPoliciesOutput {
	return i.ToRouteTableSelectionPoliciesOutputWithContext(context.Background())
}

func (i *RouteTableSelectionPolicies) ToRouteTableSelectionPoliciesOutputWithContext(ctx context.Context) RouteTableSelectionPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableSelectionPoliciesOutput)
}

// RouteTableSelectionPoliciesArrayInput is an input type that accepts RouteTableSelectionPoliciesArray and RouteTableSelectionPoliciesArrayOutput values.
// You can construct a concrete instance of `RouteTableSelectionPoliciesArrayInput` via:
//
//	RouteTableSelectionPoliciesArray{ RouteTableSelectionPoliciesArgs{...} }
type RouteTableSelectionPoliciesArrayInput interface {
	pulumi.Input

	ToRouteTableSelectionPoliciesArrayOutput() RouteTableSelectionPoliciesArrayOutput
	ToRouteTableSelectionPoliciesArrayOutputWithContext(context.Context) RouteTableSelectionPoliciesArrayOutput
}

type RouteTableSelectionPoliciesArray []RouteTableSelectionPoliciesInput

func (RouteTableSelectionPoliciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableSelectionPolicies)(nil)).Elem()
}

func (i RouteTableSelectionPoliciesArray) ToRouteTableSelectionPoliciesArrayOutput() RouteTableSelectionPoliciesArrayOutput {
	return i.ToRouteTableSelectionPoliciesArrayOutputWithContext(context.Background())
}

func (i RouteTableSelectionPoliciesArray) ToRouteTableSelectionPoliciesArrayOutputWithContext(ctx context.Context) RouteTableSelectionPoliciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableSelectionPoliciesArrayOutput)
}

// RouteTableSelectionPoliciesMapInput is an input type that accepts RouteTableSelectionPoliciesMap and RouteTableSelectionPoliciesMapOutput values.
// You can construct a concrete instance of `RouteTableSelectionPoliciesMapInput` via:
//
//	RouteTableSelectionPoliciesMap{ "key": RouteTableSelectionPoliciesArgs{...} }
type RouteTableSelectionPoliciesMapInput interface {
	pulumi.Input

	ToRouteTableSelectionPoliciesMapOutput() RouteTableSelectionPoliciesMapOutput
	ToRouteTableSelectionPoliciesMapOutputWithContext(context.Context) RouteTableSelectionPoliciesMapOutput
}

type RouteTableSelectionPoliciesMap map[string]RouteTableSelectionPoliciesInput

func (RouteTableSelectionPoliciesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableSelectionPolicies)(nil)).Elem()
}

func (i RouteTableSelectionPoliciesMap) ToRouteTableSelectionPoliciesMapOutput() RouteTableSelectionPoliciesMapOutput {
	return i.ToRouteTableSelectionPoliciesMapOutputWithContext(context.Background())
}

func (i RouteTableSelectionPoliciesMap) ToRouteTableSelectionPoliciesMapOutputWithContext(ctx context.Context) RouteTableSelectionPoliciesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableSelectionPoliciesMapOutput)
}

type RouteTableSelectionPoliciesOutput struct{ *pulumi.OutputState }

func (RouteTableSelectionPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableSelectionPolicies)(nil)).Elem()
}

func (o RouteTableSelectionPoliciesOutput) ToRouteTableSelectionPoliciesOutput() RouteTableSelectionPoliciesOutput {
	return o
}

func (o RouteTableSelectionPoliciesOutput) ToRouteTableSelectionPoliciesOutputWithContext(ctx context.Context) RouteTableSelectionPoliciesOutput {
	return o
}

// CCN Instance ID.
func (o RouteTableSelectionPoliciesOutput) CcnId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableSelectionPolicies) pulumi.StringOutput { return v.CcnId }).(pulumi.StringOutput)
}

// Select strategy information set.
func (o RouteTableSelectionPoliciesOutput) SelectionPolicies() RouteTableSelectionPoliciesSelectionPolicyArrayOutput {
	return o.ApplyT(func(v *RouteTableSelectionPolicies) RouteTableSelectionPoliciesSelectionPolicyArrayOutput {
		return v.SelectionPolicies
	}).(RouteTableSelectionPoliciesSelectionPolicyArrayOutput)
}

type RouteTableSelectionPoliciesArrayOutput struct{ *pulumi.OutputState }

func (RouteTableSelectionPoliciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableSelectionPolicies)(nil)).Elem()
}

func (o RouteTableSelectionPoliciesArrayOutput) ToRouteTableSelectionPoliciesArrayOutput() RouteTableSelectionPoliciesArrayOutput {
	return o
}

func (o RouteTableSelectionPoliciesArrayOutput) ToRouteTableSelectionPoliciesArrayOutputWithContext(ctx context.Context) RouteTableSelectionPoliciesArrayOutput {
	return o
}

func (o RouteTableSelectionPoliciesArrayOutput) Index(i pulumi.IntInput) RouteTableSelectionPoliciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTableSelectionPolicies {
		return vs[0].([]*RouteTableSelectionPolicies)[vs[1].(int)]
	}).(RouteTableSelectionPoliciesOutput)
}

type RouteTableSelectionPoliciesMapOutput struct{ *pulumi.OutputState }

func (RouteTableSelectionPoliciesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableSelectionPolicies)(nil)).Elem()
}

func (o RouteTableSelectionPoliciesMapOutput) ToRouteTableSelectionPoliciesMapOutput() RouteTableSelectionPoliciesMapOutput {
	return o
}

func (o RouteTableSelectionPoliciesMapOutput) ToRouteTableSelectionPoliciesMapOutputWithContext(ctx context.Context) RouteTableSelectionPoliciesMapOutput {
	return o
}

func (o RouteTableSelectionPoliciesMapOutput) MapIndex(k pulumi.StringInput) RouteTableSelectionPoliciesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTableSelectionPolicies {
		return vs[0].(map[string]*RouteTableSelectionPolicies)[vs[1].(string)]
	}).(RouteTableSelectionPoliciesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableSelectionPoliciesInput)(nil)).Elem(), &RouteTableSelectionPolicies{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableSelectionPoliciesArrayInput)(nil)).Elem(), RouteTableSelectionPoliciesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableSelectionPoliciesMapInput)(nil)).Elem(), RouteTableSelectionPoliciesMap{})
	pulumi.RegisterOutputType(RouteTableSelectionPoliciesOutput{})
	pulumi.RegisterOutputType(RouteTableSelectionPoliciesArrayOutput{})
	pulumi.RegisterOutputType(RouteTableSelectionPoliciesMapOutput{})
}
