// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ccn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc ccn_instances_accept_attach, you can use this resource to approve cross-region attachment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ccn.NewInstancesAcceptAttach(ctx, "ccnInstancesAcceptAttach", &Ccn.InstancesAcceptAttachArgs{
//				CcnId: pulumi.String("ccn-39lqkygf"),
//				Instances: ccn.InstancesAcceptAttachInstanceArray{
//					&ccn.InstancesAcceptAttachInstanceArgs{
//						InstanceId:     pulumi.String("vpc-j9yhbzpn"),
//						InstanceRegion: pulumi.String("ap-guangzhou"),
//						InstanceType:   pulumi.String("VPC"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InstancesAcceptAttach struct {
	pulumi.CustomResourceState

	// CCN Instance ID.
	CcnId pulumi.StringOutput `pulumi:"ccnId"`
	// Accept List Of Attachment Instances.
	Instances InstancesAcceptAttachInstanceArrayOutput `pulumi:"instances"`
}

// NewInstancesAcceptAttach registers a new resource with the given unique name, arguments, and options.
func NewInstancesAcceptAttach(ctx *pulumi.Context,
	name string, args *InstancesAcceptAttachArgs, opts ...pulumi.ResourceOption) (*InstancesAcceptAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CcnId == nil {
		return nil, errors.New("invalid value for required argument 'CcnId'")
	}
	if args.Instances == nil {
		return nil, errors.New("invalid value for required argument 'Instances'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InstancesAcceptAttach
	err := ctx.RegisterResource("tencentcloud:Ccn/instancesAcceptAttach:InstancesAcceptAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstancesAcceptAttach gets an existing InstancesAcceptAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstancesAcceptAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstancesAcceptAttachState, opts ...pulumi.ResourceOption) (*InstancesAcceptAttach, error) {
	var resource InstancesAcceptAttach
	err := ctx.ReadResource("tencentcloud:Ccn/instancesAcceptAttach:InstancesAcceptAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstancesAcceptAttach resources.
type instancesAcceptAttachState struct {
	// CCN Instance ID.
	CcnId *string `pulumi:"ccnId"`
	// Accept List Of Attachment Instances.
	Instances []InstancesAcceptAttachInstance `pulumi:"instances"`
}

type InstancesAcceptAttachState struct {
	// CCN Instance ID.
	CcnId pulumi.StringPtrInput
	// Accept List Of Attachment Instances.
	Instances InstancesAcceptAttachInstanceArrayInput
}

func (InstancesAcceptAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*instancesAcceptAttachState)(nil)).Elem()
}

type instancesAcceptAttachArgs struct {
	// CCN Instance ID.
	CcnId string `pulumi:"ccnId"`
	// Accept List Of Attachment Instances.
	Instances []InstancesAcceptAttachInstance `pulumi:"instances"`
}

// The set of arguments for constructing a InstancesAcceptAttach resource.
type InstancesAcceptAttachArgs struct {
	// CCN Instance ID.
	CcnId pulumi.StringInput
	// Accept List Of Attachment Instances.
	Instances InstancesAcceptAttachInstanceArrayInput
}

func (InstancesAcceptAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instancesAcceptAttachArgs)(nil)).Elem()
}

type InstancesAcceptAttachInput interface {
	pulumi.Input

	ToInstancesAcceptAttachOutput() InstancesAcceptAttachOutput
	ToInstancesAcceptAttachOutputWithContext(ctx context.Context) InstancesAcceptAttachOutput
}

func (*InstancesAcceptAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancesAcceptAttach)(nil)).Elem()
}

func (i *InstancesAcceptAttach) ToInstancesAcceptAttachOutput() InstancesAcceptAttachOutput {
	return i.ToInstancesAcceptAttachOutputWithContext(context.Background())
}

func (i *InstancesAcceptAttach) ToInstancesAcceptAttachOutputWithContext(ctx context.Context) InstancesAcceptAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesAcceptAttachOutput)
}

// InstancesAcceptAttachArrayInput is an input type that accepts InstancesAcceptAttachArray and InstancesAcceptAttachArrayOutput values.
// You can construct a concrete instance of `InstancesAcceptAttachArrayInput` via:
//
//	InstancesAcceptAttachArray{ InstancesAcceptAttachArgs{...} }
type InstancesAcceptAttachArrayInput interface {
	pulumi.Input

	ToInstancesAcceptAttachArrayOutput() InstancesAcceptAttachArrayOutput
	ToInstancesAcceptAttachArrayOutputWithContext(context.Context) InstancesAcceptAttachArrayOutput
}

type InstancesAcceptAttachArray []InstancesAcceptAttachInput

func (InstancesAcceptAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstancesAcceptAttach)(nil)).Elem()
}

func (i InstancesAcceptAttachArray) ToInstancesAcceptAttachArrayOutput() InstancesAcceptAttachArrayOutput {
	return i.ToInstancesAcceptAttachArrayOutputWithContext(context.Background())
}

func (i InstancesAcceptAttachArray) ToInstancesAcceptAttachArrayOutputWithContext(ctx context.Context) InstancesAcceptAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesAcceptAttachArrayOutput)
}

// InstancesAcceptAttachMapInput is an input type that accepts InstancesAcceptAttachMap and InstancesAcceptAttachMapOutput values.
// You can construct a concrete instance of `InstancesAcceptAttachMapInput` via:
//
//	InstancesAcceptAttachMap{ "key": InstancesAcceptAttachArgs{...} }
type InstancesAcceptAttachMapInput interface {
	pulumi.Input

	ToInstancesAcceptAttachMapOutput() InstancesAcceptAttachMapOutput
	ToInstancesAcceptAttachMapOutputWithContext(context.Context) InstancesAcceptAttachMapOutput
}

type InstancesAcceptAttachMap map[string]InstancesAcceptAttachInput

func (InstancesAcceptAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstancesAcceptAttach)(nil)).Elem()
}

func (i InstancesAcceptAttachMap) ToInstancesAcceptAttachMapOutput() InstancesAcceptAttachMapOutput {
	return i.ToInstancesAcceptAttachMapOutputWithContext(context.Background())
}

func (i InstancesAcceptAttachMap) ToInstancesAcceptAttachMapOutputWithContext(ctx context.Context) InstancesAcceptAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesAcceptAttachMapOutput)
}

type InstancesAcceptAttachOutput struct{ *pulumi.OutputState }

func (InstancesAcceptAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancesAcceptAttach)(nil)).Elem()
}

func (o InstancesAcceptAttachOutput) ToInstancesAcceptAttachOutput() InstancesAcceptAttachOutput {
	return o
}

func (o InstancesAcceptAttachOutput) ToInstancesAcceptAttachOutputWithContext(ctx context.Context) InstancesAcceptAttachOutput {
	return o
}

// CCN Instance ID.
func (o InstancesAcceptAttachOutput) CcnId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancesAcceptAttach) pulumi.StringOutput { return v.CcnId }).(pulumi.StringOutput)
}

// Accept List Of Attachment Instances.
func (o InstancesAcceptAttachOutput) Instances() InstancesAcceptAttachInstanceArrayOutput {
	return o.ApplyT(func(v *InstancesAcceptAttach) InstancesAcceptAttachInstanceArrayOutput { return v.Instances }).(InstancesAcceptAttachInstanceArrayOutput)
}

type InstancesAcceptAttachArrayOutput struct{ *pulumi.OutputState }

func (InstancesAcceptAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstancesAcceptAttach)(nil)).Elem()
}

func (o InstancesAcceptAttachArrayOutput) ToInstancesAcceptAttachArrayOutput() InstancesAcceptAttachArrayOutput {
	return o
}

func (o InstancesAcceptAttachArrayOutput) ToInstancesAcceptAttachArrayOutputWithContext(ctx context.Context) InstancesAcceptAttachArrayOutput {
	return o
}

func (o InstancesAcceptAttachArrayOutput) Index(i pulumi.IntInput) InstancesAcceptAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstancesAcceptAttach {
		return vs[0].([]*InstancesAcceptAttach)[vs[1].(int)]
	}).(InstancesAcceptAttachOutput)
}

type InstancesAcceptAttachMapOutput struct{ *pulumi.OutputState }

func (InstancesAcceptAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstancesAcceptAttach)(nil)).Elem()
}

func (o InstancesAcceptAttachMapOutput) ToInstancesAcceptAttachMapOutput() InstancesAcceptAttachMapOutput {
	return o
}

func (o InstancesAcceptAttachMapOutput) ToInstancesAcceptAttachMapOutputWithContext(ctx context.Context) InstancesAcceptAttachMapOutput {
	return o
}

func (o InstancesAcceptAttachMapOutput) MapIndex(k pulumi.StringInput) InstancesAcceptAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstancesAcceptAttach {
		return vs[0].(map[string]*InstancesAcceptAttach)[vs[1].(string)]
	}).(InstancesAcceptAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesAcceptAttachInput)(nil)).Elem(), &InstancesAcceptAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesAcceptAttachArrayInput)(nil)).Elem(), InstancesAcceptAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesAcceptAttachMapInput)(nil)).Elem(), InstancesAcceptAttachMap{})
	pulumi.RegisterOutputType(InstancesAcceptAttachOutput{})
	pulumi.RegisterOutputType(InstancesAcceptAttachArrayOutput{})
	pulumi.RegisterOutputType(InstancesAcceptAttachMapOutput{})
}
