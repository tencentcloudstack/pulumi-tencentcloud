// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ccn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of ccnCrossBorderRegionBandwidthLimits
//
// > **NOTE:** This resource is dedicated to Unicom.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ccn.GetCrossBorderRegionBandwidthLimits(ctx, &ccn.GetCrossBorderRegionBandwidthLimitsArgs{
//				Filters: []ccn.GetCrossBorderRegionBandwidthLimitsFilter{
//					ccn.GetCrossBorderRegionBandwidthLimitsFilter{
//						Name: "source-region",
//						Values: []string{
//							"ap-guangzhou",
//						},
//					},
//					ccn.GetCrossBorderRegionBandwidthLimitsFilter{
//						Name: "destination-region",
//						Values: []string{
//							"ap-shanghai",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCrossBorderRegionBandwidthLimits(ctx *pulumi.Context, args *GetCrossBorderRegionBandwidthLimitsArgs, opts ...pulumi.InvokeOption) (*GetCrossBorderRegionBandwidthLimitsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetCrossBorderRegionBandwidthLimitsResult
	err := ctx.Invoke("tencentcloud:Ccn/getCrossBorderRegionBandwidthLimits:getCrossBorderRegionBandwidthLimits", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCrossBorderRegionBandwidthLimits.
type GetCrossBorderRegionBandwidthLimitsArgs struct {
	// Filter condition. Currently, only one value is supported. The supported fields, 1)source-region, the value is like ap-guangzhou; 2)destination-region, the value is like ap-shanghai; 3)ccn-ids,cloud network ID array, the value is like ccn-12345678; 4)user-account-id,user account ID, the value is like 12345678.
	Filters []GetCrossBorderRegionBandwidthLimitsFilter `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getCrossBorderRegionBandwidthLimits.
type GetCrossBorderRegionBandwidthLimitsResult struct {
	// Info of cross region ccn instance.
	CcnBandwidthSets []GetCrossBorderRegionBandwidthLimitsCcnBandwidthSet `pulumi:"ccnBandwidthSets"`
	Filters          []GetCrossBorderRegionBandwidthLimitsFilter          `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func GetCrossBorderRegionBandwidthLimitsOutput(ctx *pulumi.Context, args GetCrossBorderRegionBandwidthLimitsOutputArgs, opts ...pulumi.InvokeOption) GetCrossBorderRegionBandwidthLimitsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCrossBorderRegionBandwidthLimitsResult, error) {
			args := v.(GetCrossBorderRegionBandwidthLimitsArgs)
			r, err := GetCrossBorderRegionBandwidthLimits(ctx, &args, opts...)
			var s GetCrossBorderRegionBandwidthLimitsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCrossBorderRegionBandwidthLimitsResultOutput)
}

// A collection of arguments for invoking getCrossBorderRegionBandwidthLimits.
type GetCrossBorderRegionBandwidthLimitsOutputArgs struct {
	// Filter condition. Currently, only one value is supported. The supported fields, 1)source-region, the value is like ap-guangzhou; 2)destination-region, the value is like ap-shanghai; 3)ccn-ids,cloud network ID array, the value is like ccn-12345678; 4)user-account-id,user account ID, the value is like 12345678.
	Filters GetCrossBorderRegionBandwidthLimitsFilterArrayInput `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetCrossBorderRegionBandwidthLimitsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCrossBorderRegionBandwidthLimitsArgs)(nil)).Elem()
}

// A collection of values returned by getCrossBorderRegionBandwidthLimits.
type GetCrossBorderRegionBandwidthLimitsResultOutput struct{ *pulumi.OutputState }

func (GetCrossBorderRegionBandwidthLimitsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCrossBorderRegionBandwidthLimitsResult)(nil)).Elem()
}

func (o GetCrossBorderRegionBandwidthLimitsResultOutput) ToGetCrossBorderRegionBandwidthLimitsResultOutput() GetCrossBorderRegionBandwidthLimitsResultOutput {
	return o
}

func (o GetCrossBorderRegionBandwidthLimitsResultOutput) ToGetCrossBorderRegionBandwidthLimitsResultOutputWithContext(ctx context.Context) GetCrossBorderRegionBandwidthLimitsResultOutput {
	return o
}

// Info of cross region ccn instance.
func (o GetCrossBorderRegionBandwidthLimitsResultOutput) CcnBandwidthSets() GetCrossBorderRegionBandwidthLimitsCcnBandwidthSetArrayOutput {
	return o.ApplyT(func(v GetCrossBorderRegionBandwidthLimitsResult) []GetCrossBorderRegionBandwidthLimitsCcnBandwidthSet {
		return v.CcnBandwidthSets
	}).(GetCrossBorderRegionBandwidthLimitsCcnBandwidthSetArrayOutput)
}

func (o GetCrossBorderRegionBandwidthLimitsResultOutput) Filters() GetCrossBorderRegionBandwidthLimitsFilterArrayOutput {
	return o.ApplyT(func(v GetCrossBorderRegionBandwidthLimitsResult) []GetCrossBorderRegionBandwidthLimitsFilter {
		return v.Filters
	}).(GetCrossBorderRegionBandwidthLimitsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCrossBorderRegionBandwidthLimitsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossBorderRegionBandwidthLimitsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCrossBorderRegionBandwidthLimitsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCrossBorderRegionBandwidthLimitsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCrossBorderRegionBandwidthLimitsResultOutput{})
}
