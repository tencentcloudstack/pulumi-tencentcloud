// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ccn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a vpc ccnRoutes switch
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ccn.NewRoutes(ctx, "example", &Ccn.RoutesArgs{
//				CcnId:   pulumi.String("ccn-gr7nynbd"),
//				RouteId: pulumi.String("ccnr-5uhewx1s"),
//				Switch:  pulumi.String("off"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// vpc ccn_routes can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Ccn/routes:Routes ccn_routes ccn-gr7nynbd#ccnr-5uhewx1s
// ```
type Routes struct {
	pulumi.CustomResourceState

	// CCN Instance ID.
	CcnId pulumi.StringOutput `pulumi:"ccnId"`
	// CCN Route Id List.
	RouteId pulumi.StringOutput `pulumi:"routeId"`
	// `on`: Enable, `off`: Disable.
	Switch pulumi.StringOutput `pulumi:"switch"`
}

// NewRoutes registers a new resource with the given unique name, arguments, and options.
func NewRoutes(ctx *pulumi.Context,
	name string, args *RoutesArgs, opts ...pulumi.ResourceOption) (*Routes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CcnId == nil {
		return nil, errors.New("invalid value for required argument 'CcnId'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	if args.Switch == nil {
		return nil, errors.New("invalid value for required argument 'Switch'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Routes
	err := ctx.RegisterResource("tencentcloud:Ccn/routes:Routes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutes gets an existing Routes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutesState, opts ...pulumi.ResourceOption) (*Routes, error) {
	var resource Routes
	err := ctx.ReadResource("tencentcloud:Ccn/routes:Routes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Routes resources.
type routesState struct {
	// CCN Instance ID.
	CcnId *string `pulumi:"ccnId"`
	// CCN Route Id List.
	RouteId *string `pulumi:"routeId"`
	// `on`: Enable, `off`: Disable.
	Switch *string `pulumi:"switch"`
}

type RoutesState struct {
	// CCN Instance ID.
	CcnId pulumi.StringPtrInput
	// CCN Route Id List.
	RouteId pulumi.StringPtrInput
	// `on`: Enable, `off`: Disable.
	Switch pulumi.StringPtrInput
}

func (RoutesState) ElementType() reflect.Type {
	return reflect.TypeOf((*routesState)(nil)).Elem()
}

type routesArgs struct {
	// CCN Instance ID.
	CcnId string `pulumi:"ccnId"`
	// CCN Route Id List.
	RouteId string `pulumi:"routeId"`
	// `on`: Enable, `off`: Disable.
	Switch string `pulumi:"switch"`
}

// The set of arguments for constructing a Routes resource.
type RoutesArgs struct {
	// CCN Instance ID.
	CcnId pulumi.StringInput
	// CCN Route Id List.
	RouteId pulumi.StringInput
	// `on`: Enable, `off`: Disable.
	Switch pulumi.StringInput
}

func (RoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routesArgs)(nil)).Elem()
}

type RoutesInput interface {
	pulumi.Input

	ToRoutesOutput() RoutesOutput
	ToRoutesOutputWithContext(ctx context.Context) RoutesOutput
}

func (*Routes) ElementType() reflect.Type {
	return reflect.TypeOf((**Routes)(nil)).Elem()
}

func (i *Routes) ToRoutesOutput() RoutesOutput {
	return i.ToRoutesOutputWithContext(context.Background())
}

func (i *Routes) ToRoutesOutputWithContext(ctx context.Context) RoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutesOutput)
}

// RoutesArrayInput is an input type that accepts RoutesArray and RoutesArrayOutput values.
// You can construct a concrete instance of `RoutesArrayInput` via:
//
//	RoutesArray{ RoutesArgs{...} }
type RoutesArrayInput interface {
	pulumi.Input

	ToRoutesArrayOutput() RoutesArrayOutput
	ToRoutesArrayOutputWithContext(context.Context) RoutesArrayOutput
}

type RoutesArray []RoutesInput

func (RoutesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Routes)(nil)).Elem()
}

func (i RoutesArray) ToRoutesArrayOutput() RoutesArrayOutput {
	return i.ToRoutesArrayOutputWithContext(context.Background())
}

func (i RoutesArray) ToRoutesArrayOutputWithContext(ctx context.Context) RoutesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutesArrayOutput)
}

// RoutesMapInput is an input type that accepts RoutesMap and RoutesMapOutput values.
// You can construct a concrete instance of `RoutesMapInput` via:
//
//	RoutesMap{ "key": RoutesArgs{...} }
type RoutesMapInput interface {
	pulumi.Input

	ToRoutesMapOutput() RoutesMapOutput
	ToRoutesMapOutputWithContext(context.Context) RoutesMapOutput
}

type RoutesMap map[string]RoutesInput

func (RoutesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Routes)(nil)).Elem()
}

func (i RoutesMap) ToRoutesMapOutput() RoutesMapOutput {
	return i.ToRoutesMapOutputWithContext(context.Background())
}

func (i RoutesMap) ToRoutesMapOutputWithContext(ctx context.Context) RoutesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutesMapOutput)
}

type RoutesOutput struct{ *pulumi.OutputState }

func (RoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Routes)(nil)).Elem()
}

func (o RoutesOutput) ToRoutesOutput() RoutesOutput {
	return o
}

func (o RoutesOutput) ToRoutesOutputWithContext(ctx context.Context) RoutesOutput {
	return o
}

// CCN Instance ID.
func (o RoutesOutput) CcnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Routes) pulumi.StringOutput { return v.CcnId }).(pulumi.StringOutput)
}

// CCN Route Id List.
func (o RoutesOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *Routes) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

// `on`: Enable, `off`: Disable.
func (o RoutesOutput) Switch() pulumi.StringOutput {
	return o.ApplyT(func(v *Routes) pulumi.StringOutput { return v.Switch }).(pulumi.StringOutput)
}

type RoutesArrayOutput struct{ *pulumi.OutputState }

func (RoutesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Routes)(nil)).Elem()
}

func (o RoutesArrayOutput) ToRoutesArrayOutput() RoutesArrayOutput {
	return o
}

func (o RoutesArrayOutput) ToRoutesArrayOutputWithContext(ctx context.Context) RoutesArrayOutput {
	return o
}

func (o RoutesArrayOutput) Index(i pulumi.IntInput) RoutesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Routes {
		return vs[0].([]*Routes)[vs[1].(int)]
	}).(RoutesOutput)
}

type RoutesMapOutput struct{ *pulumi.OutputState }

func (RoutesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Routes)(nil)).Elem()
}

func (o RoutesMapOutput) ToRoutesMapOutput() RoutesMapOutput {
	return o
}

func (o RoutesMapOutput) ToRoutesMapOutputWithContext(ctx context.Context) RoutesMapOutput {
	return o
}

func (o RoutesMapOutput) MapIndex(k pulumi.StringInput) RoutesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Routes {
		return vs[0].(map[string]*Routes)[vs[1].(string)]
	}).(RoutesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutesInput)(nil)).Elem(), &Routes{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutesArrayInput)(nil)).Elem(), RoutesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutesMapInput)(nil)).Elem(), RoutesMap{})
	pulumi.RegisterOutputType(RoutesOutput{})
	pulumi.RegisterOutputType(RoutesArrayOutput{})
	pulumi.RegisterOutputType(RoutesMapOutput{})
}
