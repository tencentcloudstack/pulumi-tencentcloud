// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ccn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of vpc crossBorderFlowMonitor
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ccn.GetCrossBorderFlowMonitor(ctx, &ccn.GetCrossBorderFlowMonitorArgs{
//				CcnId:             "ccn-39lqkygf",
//				CcnUin:            "979137",
//				DestinationRegion: "ap-singapore",
//				EndTime:           "2023-01-01 01:00:00",
//				Period:            60,
//				SourceRegion:      "ap-guangzhou",
//				StartTime:         "2023-01-01 00:00:00",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCrossBorderFlowMonitor(ctx *pulumi.Context, args *GetCrossBorderFlowMonitorArgs, opts ...pulumi.InvokeOption) (*GetCrossBorderFlowMonitorResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetCrossBorderFlowMonitorResult
	err := ctx.Invoke("tencentcloud:Ccn/getCrossBorderFlowMonitor:getCrossBorderFlowMonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCrossBorderFlowMonitor.
type GetCrossBorderFlowMonitorArgs struct {
	// CcnId.
	CcnId string `pulumi:"ccnId"`
	// CcnUin.
	CcnUin string `pulumi:"ccnUin"`
	// DestinationRegion.
	DestinationRegion string `pulumi:"destinationRegion"`
	// EndTime.
	EndTime string `pulumi:"endTime"`
	// TimePeriod.
	Period int `pulumi:"period"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// SourceRegion.
	SourceRegion string `pulumi:"sourceRegion"`
	// StartTime.
	StartTime string `pulumi:"startTime"`
}

// A collection of values returned by getCrossBorderFlowMonitor.
type GetCrossBorderFlowMonitorResult struct {
	CcnId  string `pulumi:"ccnId"`
	CcnUin string `pulumi:"ccnUin"`
	// monitor data of cross border.
	CrossBorderFlowMonitorDatas []GetCrossBorderFlowMonitorCrossBorderFlowMonitorData `pulumi:"crossBorderFlowMonitorDatas"`
	DestinationRegion           string                                                `pulumi:"destinationRegion"`
	EndTime                     string                                                `pulumi:"endTime"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	Period           int     `pulumi:"period"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	SourceRegion     string  `pulumi:"sourceRegion"`
	StartTime        string  `pulumi:"startTime"`
}

func GetCrossBorderFlowMonitorOutput(ctx *pulumi.Context, args GetCrossBorderFlowMonitorOutputArgs, opts ...pulumi.InvokeOption) GetCrossBorderFlowMonitorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCrossBorderFlowMonitorResult, error) {
			args := v.(GetCrossBorderFlowMonitorArgs)
			r, err := GetCrossBorderFlowMonitor(ctx, &args, opts...)
			var s GetCrossBorderFlowMonitorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCrossBorderFlowMonitorResultOutput)
}

// A collection of arguments for invoking getCrossBorderFlowMonitor.
type GetCrossBorderFlowMonitorOutputArgs struct {
	// CcnId.
	CcnId pulumi.StringInput `pulumi:"ccnId"`
	// CcnUin.
	CcnUin pulumi.StringInput `pulumi:"ccnUin"`
	// DestinationRegion.
	DestinationRegion pulumi.StringInput `pulumi:"destinationRegion"`
	// EndTime.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// TimePeriod.
	Period pulumi.IntInput `pulumi:"period"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// SourceRegion.
	SourceRegion pulumi.StringInput `pulumi:"sourceRegion"`
	// StartTime.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (GetCrossBorderFlowMonitorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCrossBorderFlowMonitorArgs)(nil)).Elem()
}

// A collection of values returned by getCrossBorderFlowMonitor.
type GetCrossBorderFlowMonitorResultOutput struct{ *pulumi.OutputState }

func (GetCrossBorderFlowMonitorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCrossBorderFlowMonitorResult)(nil)).Elem()
}

func (o GetCrossBorderFlowMonitorResultOutput) ToGetCrossBorderFlowMonitorResultOutput() GetCrossBorderFlowMonitorResultOutput {
	return o
}

func (o GetCrossBorderFlowMonitorResultOutput) ToGetCrossBorderFlowMonitorResultOutputWithContext(ctx context.Context) GetCrossBorderFlowMonitorResultOutput {
	return o
}

func (o GetCrossBorderFlowMonitorResultOutput) CcnId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossBorderFlowMonitorResult) string { return v.CcnId }).(pulumi.StringOutput)
}

func (o GetCrossBorderFlowMonitorResultOutput) CcnUin() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossBorderFlowMonitorResult) string { return v.CcnUin }).(pulumi.StringOutput)
}

// monitor data of cross border.
func (o GetCrossBorderFlowMonitorResultOutput) CrossBorderFlowMonitorDatas() GetCrossBorderFlowMonitorCrossBorderFlowMonitorDataArrayOutput {
	return o.ApplyT(func(v GetCrossBorderFlowMonitorResult) []GetCrossBorderFlowMonitorCrossBorderFlowMonitorData {
		return v.CrossBorderFlowMonitorDatas
	}).(GetCrossBorderFlowMonitorCrossBorderFlowMonitorDataArrayOutput)
}

func (o GetCrossBorderFlowMonitorResultOutput) DestinationRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossBorderFlowMonitorResult) string { return v.DestinationRegion }).(pulumi.StringOutput)
}

func (o GetCrossBorderFlowMonitorResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossBorderFlowMonitorResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCrossBorderFlowMonitorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossBorderFlowMonitorResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCrossBorderFlowMonitorResultOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v GetCrossBorderFlowMonitorResult) int { return v.Period }).(pulumi.IntOutput)
}

func (o GetCrossBorderFlowMonitorResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCrossBorderFlowMonitorResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetCrossBorderFlowMonitorResultOutput) SourceRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossBorderFlowMonitorResult) string { return v.SourceRegion }).(pulumi.StringOutput)
}

func (o GetCrossBorderFlowMonitorResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetCrossBorderFlowMonitorResult) string { return v.StartTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCrossBorderFlowMonitorResultOutput{})
}
