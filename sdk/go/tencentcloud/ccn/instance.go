// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ccn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a CCN instance.
//
// ## Example Usage
//
// ### Create a prepaid CCN
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ccn.NewInstance(ctx, "example", &Ccn.InstanceArgs{
//				BandwidthLimitType: pulumi.String("INTER_REGION_LIMIT"),
//				ChargeType:         pulumi.String("PREPAID"),
//				Description:        pulumi.String("desc."),
//				Qos:                pulumi.String("AG"),
//				RouteEcmpFlag:      pulumi.Bool(true),
//				RouteOverlapFlag:   pulumi.Bool(true),
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create a post-paid regional export speed limit type CCN
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ccn.NewInstance(ctx, "example", &Ccn.InstanceArgs{
//				BandwidthLimitType: pulumi.String("OUTER_REGION_LIMIT"),
//				ChargeType:         pulumi.String("POSTPAID"),
//				Description:        pulumi.String("desc."),
//				Qos:                pulumi.String("AG"),
//				RouteEcmpFlag:      pulumi.Bool(false),
//				RouteOverlapFlag:   pulumi.Bool(false),
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create a post-paid inter-regional rate limit type CNN
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ccn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ccn.NewInstance(ctx, "example", &Ccn.InstanceArgs{
//				BandwidthLimitType: pulumi.String("INTER_REGION_LIMIT"),
//				ChargeType:         pulumi.String("POSTPAID"),
//				Description:        pulumi.String("desc."),
//				Qos:                pulumi.String("AG"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Ccn instance can be imported, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Ccn/instance:Instance example ccn-al70jo89
// ```
type Instance struct {
	pulumi.CustomResourceState

	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is `OUTER_REGION_LIMIT`.
	BandwidthLimitType pulumi.StringPtrOutput `pulumi:"bandwidthLimitType"`
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription, `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType pulumi.StringPtrOutput `pulumi:"chargeType"`
	// Creation time of resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Number of attached instances.
	InstanceCount pulumi.IntOutput `pulumi:"instanceCount"`
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name pulumi.StringOutput `pulumi:"name"`
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos pulumi.StringPtrOutput `pulumi:"qos"`
	// Whether to enable the equivalent routing function. `true`: enabled, `false`: disabled.
	RouteEcmpFlag pulumi.BoolPtrOutput `pulumi:"routeEcmpFlag"`
	// Whether to enable the routing overlap function. `true`: enabled, `false`: disabled.
	RouteOverlapFlag pulumi.BoolPtrOutput `pulumi:"routeOverlapFlag"`
	// States of instance. Valid values: `ISOLATED`(arrears) and `AVAILABLE`.
	State pulumi.StringOutput `pulumi:"state"`
	// Instance tag.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		args = &InstanceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("tencentcloud:Ccn/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("tencentcloud:Ccn/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is `OUTER_REGION_LIMIT`.
	BandwidthLimitType *string `pulumi:"bandwidthLimitType"`
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription, `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType *string `pulumi:"chargeType"`
	// Creation time of resource.
	CreateTime *string `pulumi:"createTime"`
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description *string `pulumi:"description"`
	// Number of attached instances.
	InstanceCount *int `pulumi:"instanceCount"`
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name *string `pulumi:"name"`
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos *string `pulumi:"qos"`
	// Whether to enable the equivalent routing function. `true`: enabled, `false`: disabled.
	RouteEcmpFlag *bool `pulumi:"routeEcmpFlag"`
	// Whether to enable the routing overlap function. `true`: enabled, `false`: disabled.
	RouteOverlapFlag *bool `pulumi:"routeOverlapFlag"`
	// States of instance. Valid values: `ISOLATED`(arrears) and `AVAILABLE`.
	State *string `pulumi:"state"`
	// Instance tag.
	Tags map[string]interface{} `pulumi:"tags"`
}

type InstanceState struct {
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is `OUTER_REGION_LIMIT`.
	BandwidthLimitType pulumi.StringPtrInput
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription, `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType pulumi.StringPtrInput
	// Creation time of resource.
	CreateTime pulumi.StringPtrInput
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description pulumi.StringPtrInput
	// Number of attached instances.
	InstanceCount pulumi.IntPtrInput
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name pulumi.StringPtrInput
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos pulumi.StringPtrInput
	// Whether to enable the equivalent routing function. `true`: enabled, `false`: disabled.
	RouteEcmpFlag pulumi.BoolPtrInput
	// Whether to enable the routing overlap function. `true`: enabled, `false`: disabled.
	RouteOverlapFlag pulumi.BoolPtrInput
	// States of instance. Valid values: `ISOLATED`(arrears) and `AVAILABLE`.
	State pulumi.StringPtrInput
	// Instance tag.
	Tags pulumi.MapInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is `OUTER_REGION_LIMIT`.
	BandwidthLimitType *string `pulumi:"bandwidthLimitType"`
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription, `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType *string `pulumi:"chargeType"`
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description *string `pulumi:"description"`
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name *string `pulumi:"name"`
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos *string `pulumi:"qos"`
	// Whether to enable the equivalent routing function. `true`: enabled, `false`: disabled.
	RouteEcmpFlag *bool `pulumi:"routeEcmpFlag"`
	// Whether to enable the routing overlap function. `true`: enabled, `false`: disabled.
	RouteOverlapFlag *bool `pulumi:"routeOverlapFlag"`
	// Instance tag.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is `OUTER_REGION_LIMIT`.
	BandwidthLimitType pulumi.StringPtrInput
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription, `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType pulumi.StringPtrInput
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description pulumi.StringPtrInput
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name pulumi.StringPtrInput
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos pulumi.StringPtrInput
	// Whether to enable the equivalent routing function. `true`: enabled, `false`: disabled.
	RouteEcmpFlag pulumi.BoolPtrInput
	// Whether to enable the routing overlap function. `true`: enabled, `false`: disabled.
	RouteOverlapFlag pulumi.BoolPtrInput
	// Instance tag.
	Tags pulumi.MapInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is `OUTER_REGION_LIMIT`.
func (o InstanceOutput) BandwidthLimitType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.BandwidthLimitType }).(pulumi.StringPtrOutput)
}

// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription, `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
func (o InstanceOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// Creation time of resource.
func (o InstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of CCN, and maximum length does not exceed 100 bytes.
func (o InstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Number of attached instances.
func (o InstanceOutput) InstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.InstanceCount }).(pulumi.IntOutput)
}

// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
func (o InstanceOutput) Qos() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.Qos }).(pulumi.StringPtrOutput)
}

// Whether to enable the equivalent routing function. `true`: enabled, `false`: disabled.
func (o InstanceOutput) RouteEcmpFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.RouteEcmpFlag }).(pulumi.BoolPtrOutput)
}

// Whether to enable the routing overlap function. `true`: enabled, `false`: disabled.
func (o InstanceOutput) RouteOverlapFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.RouteOverlapFlag }).(pulumi.BoolPtrOutput)
}

// States of instance. Valid values: `ISOLATED`(arrears) and `AVAILABLE`.
func (o InstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Instance tag.
func (o InstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Instance) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
