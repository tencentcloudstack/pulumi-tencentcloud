// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chdfs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a chdfs mountPointAttachment
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Chdfs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Chdfs.NewMountPointAttachment(ctx, "mountPointAttachment", &Chdfs.MountPointAttachmentArgs{
//				AccessGroupIds: pulumi.StringArray{
//					pulumi.String("ag-bvmzrbsm"),
//					pulumi.String("ag-lairqrgr"),
//				},
//				MountPointId: pulumi.String("f14mpfy5lh4e-KuiL"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// chdfs mount_point_attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Chdfs/mountPointAttachment:MountPointAttachment mount_point_attachment mount_point_id
//
// ```
type MountPointAttachment struct {
	pulumi.CustomResourceState

	// associate access group id.
	AccessGroupIds pulumi.StringArrayOutput `pulumi:"accessGroupIds"`
	// associate mount point.
	MountPointId pulumi.StringOutput `pulumi:"mountPointId"`
}

// NewMountPointAttachment registers a new resource with the given unique name, arguments, and options.
func NewMountPointAttachment(ctx *pulumi.Context,
	name string, args *MountPointAttachmentArgs, opts ...pulumi.ResourceOption) (*MountPointAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'AccessGroupIds'")
	}
	if args.MountPointId == nil {
		return nil, errors.New("invalid value for required argument 'MountPointId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MountPointAttachment
	err := ctx.RegisterResource("tencentcloud:Chdfs/mountPointAttachment:MountPointAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMountPointAttachment gets an existing MountPointAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMountPointAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MountPointAttachmentState, opts ...pulumi.ResourceOption) (*MountPointAttachment, error) {
	var resource MountPointAttachment
	err := ctx.ReadResource("tencentcloud:Chdfs/mountPointAttachment:MountPointAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MountPointAttachment resources.
type mountPointAttachmentState struct {
	// associate access group id.
	AccessGroupIds []string `pulumi:"accessGroupIds"`
	// associate mount point.
	MountPointId *string `pulumi:"mountPointId"`
}

type MountPointAttachmentState struct {
	// associate access group id.
	AccessGroupIds pulumi.StringArrayInput
	// associate mount point.
	MountPointId pulumi.StringPtrInput
}

func (MountPointAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*mountPointAttachmentState)(nil)).Elem()
}

type mountPointAttachmentArgs struct {
	// associate access group id.
	AccessGroupIds []string `pulumi:"accessGroupIds"`
	// associate mount point.
	MountPointId string `pulumi:"mountPointId"`
}

// The set of arguments for constructing a MountPointAttachment resource.
type MountPointAttachmentArgs struct {
	// associate access group id.
	AccessGroupIds pulumi.StringArrayInput
	// associate mount point.
	MountPointId pulumi.StringInput
}

func (MountPointAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mountPointAttachmentArgs)(nil)).Elem()
}

type MountPointAttachmentInput interface {
	pulumi.Input

	ToMountPointAttachmentOutput() MountPointAttachmentOutput
	ToMountPointAttachmentOutputWithContext(ctx context.Context) MountPointAttachmentOutput
}

func (*MountPointAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**MountPointAttachment)(nil)).Elem()
}

func (i *MountPointAttachment) ToMountPointAttachmentOutput() MountPointAttachmentOutput {
	return i.ToMountPointAttachmentOutputWithContext(context.Background())
}

func (i *MountPointAttachment) ToMountPointAttachmentOutputWithContext(ctx context.Context) MountPointAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountPointAttachmentOutput)
}

// MountPointAttachmentArrayInput is an input type that accepts MountPointAttachmentArray and MountPointAttachmentArrayOutput values.
// You can construct a concrete instance of `MountPointAttachmentArrayInput` via:
//
//	MountPointAttachmentArray{ MountPointAttachmentArgs{...} }
type MountPointAttachmentArrayInput interface {
	pulumi.Input

	ToMountPointAttachmentArrayOutput() MountPointAttachmentArrayOutput
	ToMountPointAttachmentArrayOutputWithContext(context.Context) MountPointAttachmentArrayOutput
}

type MountPointAttachmentArray []MountPointAttachmentInput

func (MountPointAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MountPointAttachment)(nil)).Elem()
}

func (i MountPointAttachmentArray) ToMountPointAttachmentArrayOutput() MountPointAttachmentArrayOutput {
	return i.ToMountPointAttachmentArrayOutputWithContext(context.Background())
}

func (i MountPointAttachmentArray) ToMountPointAttachmentArrayOutputWithContext(ctx context.Context) MountPointAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountPointAttachmentArrayOutput)
}

// MountPointAttachmentMapInput is an input type that accepts MountPointAttachmentMap and MountPointAttachmentMapOutput values.
// You can construct a concrete instance of `MountPointAttachmentMapInput` via:
//
//	MountPointAttachmentMap{ "key": MountPointAttachmentArgs{...} }
type MountPointAttachmentMapInput interface {
	pulumi.Input

	ToMountPointAttachmentMapOutput() MountPointAttachmentMapOutput
	ToMountPointAttachmentMapOutputWithContext(context.Context) MountPointAttachmentMapOutput
}

type MountPointAttachmentMap map[string]MountPointAttachmentInput

func (MountPointAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MountPointAttachment)(nil)).Elem()
}

func (i MountPointAttachmentMap) ToMountPointAttachmentMapOutput() MountPointAttachmentMapOutput {
	return i.ToMountPointAttachmentMapOutputWithContext(context.Background())
}

func (i MountPointAttachmentMap) ToMountPointAttachmentMapOutputWithContext(ctx context.Context) MountPointAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountPointAttachmentMapOutput)
}

type MountPointAttachmentOutput struct{ *pulumi.OutputState }

func (MountPointAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MountPointAttachment)(nil)).Elem()
}

func (o MountPointAttachmentOutput) ToMountPointAttachmentOutput() MountPointAttachmentOutput {
	return o
}

func (o MountPointAttachmentOutput) ToMountPointAttachmentOutputWithContext(ctx context.Context) MountPointAttachmentOutput {
	return o
}

// associate access group id.
func (o MountPointAttachmentOutput) AccessGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MountPointAttachment) pulumi.StringArrayOutput { return v.AccessGroupIds }).(pulumi.StringArrayOutput)
}

// associate mount point.
func (o MountPointAttachmentOutput) MountPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountPointAttachment) pulumi.StringOutput { return v.MountPointId }).(pulumi.StringOutput)
}

type MountPointAttachmentArrayOutput struct{ *pulumi.OutputState }

func (MountPointAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MountPointAttachment)(nil)).Elem()
}

func (o MountPointAttachmentArrayOutput) ToMountPointAttachmentArrayOutput() MountPointAttachmentArrayOutput {
	return o
}

func (o MountPointAttachmentArrayOutput) ToMountPointAttachmentArrayOutputWithContext(ctx context.Context) MountPointAttachmentArrayOutput {
	return o
}

func (o MountPointAttachmentArrayOutput) Index(i pulumi.IntInput) MountPointAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MountPointAttachment {
		return vs[0].([]*MountPointAttachment)[vs[1].(int)]
	}).(MountPointAttachmentOutput)
}

type MountPointAttachmentMapOutput struct{ *pulumi.OutputState }

func (MountPointAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MountPointAttachment)(nil)).Elem()
}

func (o MountPointAttachmentMapOutput) ToMountPointAttachmentMapOutput() MountPointAttachmentMapOutput {
	return o
}

func (o MountPointAttachmentMapOutput) ToMountPointAttachmentMapOutputWithContext(ctx context.Context) MountPointAttachmentMapOutput {
	return o
}

func (o MountPointAttachmentMapOutput) MapIndex(k pulumi.StringInput) MountPointAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MountPointAttachment {
		return vs[0].(map[string]*MountPointAttachment)[vs[1].(string)]
	}).(MountPointAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MountPointAttachmentInput)(nil)).Elem(), &MountPointAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*MountPointAttachmentArrayInput)(nil)).Elem(), MountPointAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MountPointAttachmentMapInput)(nil)).Elem(), MountPointAttachmentMap{})
	pulumi.RegisterOutputType(MountPointAttachmentOutput{})
	pulumi.RegisterOutputType(MountPointAttachmentArrayOutput{})
	pulumi.RegisterOutputType(MountPointAttachmentMapOutput{})
}
