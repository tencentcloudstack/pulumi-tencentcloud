// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssl

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ssl deployCertificateInstance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ssl"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ssl.NewDeployCertificateInstanceOperation(ctx, "deployCertificateInstance", &Ssl.DeployCertificateInstanceOperationArgs{
//				CertificateId: pulumi.String("8x1eUSSl"),
//				InstanceIdLists: pulumi.StringArray{
//					pulumi.String("cdndomain1.example.com|on"),
//					pulumi.String("cdndomain1.example.com|off"),
//				},
//				ResourceType: pulumi.String("cdn"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ssl deploy_certificate_instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ssl/deployCertificateInstanceOperation:DeployCertificateInstanceOperation deploy_certificate_instance deploy_certificate_instance_id
//
// ```
type DeployCertificateInstanceOperation struct {
	pulumi.CustomResourceState

	// ID of the certificate to be deployed.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// Need to deploy instance list.
	InstanceIdLists pulumi.StringArrayOutput `pulumi:"instanceIdLists"`
	// Deployed cloud resource type.
	ResourceType pulumi.StringPtrOutput `pulumi:"resourceType"`
	// Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
	Status pulumi.IntPtrOutput `pulumi:"status"`
}

// NewDeployCertificateInstanceOperation registers a new resource with the given unique name, arguments, and options.
func NewDeployCertificateInstanceOperation(ctx *pulumi.Context,
	name string, args *DeployCertificateInstanceOperationArgs, opts ...pulumi.ResourceOption) (*DeployCertificateInstanceOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	if args.InstanceIdLists == nil {
		return nil, errors.New("invalid value for required argument 'InstanceIdLists'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DeployCertificateInstanceOperation
	err := ctx.RegisterResource("tencentcloud:Ssl/deployCertificateInstanceOperation:DeployCertificateInstanceOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployCertificateInstanceOperation gets an existing DeployCertificateInstanceOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployCertificateInstanceOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeployCertificateInstanceOperationState, opts ...pulumi.ResourceOption) (*DeployCertificateInstanceOperation, error) {
	var resource DeployCertificateInstanceOperation
	err := ctx.ReadResource("tencentcloud:Ssl/deployCertificateInstanceOperation:DeployCertificateInstanceOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeployCertificateInstanceOperation resources.
type deployCertificateInstanceOperationState struct {
	// ID of the certificate to be deployed.
	CertificateId *string `pulumi:"certificateId"`
	// Need to deploy instance list.
	InstanceIdLists []string `pulumi:"instanceIdLists"`
	// Deployed cloud resource type.
	ResourceType *string `pulumi:"resourceType"`
	// Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
	Status *int `pulumi:"status"`
}

type DeployCertificateInstanceOperationState struct {
	// ID of the certificate to be deployed.
	CertificateId pulumi.StringPtrInput
	// Need to deploy instance list.
	InstanceIdLists pulumi.StringArrayInput
	// Deployed cloud resource type.
	ResourceType pulumi.StringPtrInput
	// Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
	Status pulumi.IntPtrInput
}

func (DeployCertificateInstanceOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*deployCertificateInstanceOperationState)(nil)).Elem()
}

type deployCertificateInstanceOperationArgs struct {
	// ID of the certificate to be deployed.
	CertificateId string `pulumi:"certificateId"`
	// Need to deploy instance list.
	InstanceIdLists []string `pulumi:"instanceIdLists"`
	// Deployed cloud resource type.
	ResourceType *string `pulumi:"resourceType"`
	// Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
	Status *int `pulumi:"status"`
}

// The set of arguments for constructing a DeployCertificateInstanceOperation resource.
type DeployCertificateInstanceOperationArgs struct {
	// ID of the certificate to be deployed.
	CertificateId pulumi.StringInput
	// Need to deploy instance list.
	InstanceIdLists pulumi.StringArrayInput
	// Deployed cloud resource type.
	ResourceType pulumi.StringPtrInput
	// Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
	Status pulumi.IntPtrInput
}

func (DeployCertificateInstanceOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deployCertificateInstanceOperationArgs)(nil)).Elem()
}

type DeployCertificateInstanceOperationInput interface {
	pulumi.Input

	ToDeployCertificateInstanceOperationOutput() DeployCertificateInstanceOperationOutput
	ToDeployCertificateInstanceOperationOutputWithContext(ctx context.Context) DeployCertificateInstanceOperationOutput
}

func (*DeployCertificateInstanceOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployCertificateInstanceOperation)(nil)).Elem()
}

func (i *DeployCertificateInstanceOperation) ToDeployCertificateInstanceOperationOutput() DeployCertificateInstanceOperationOutput {
	return i.ToDeployCertificateInstanceOperationOutputWithContext(context.Background())
}

func (i *DeployCertificateInstanceOperation) ToDeployCertificateInstanceOperationOutputWithContext(ctx context.Context) DeployCertificateInstanceOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployCertificateInstanceOperationOutput)
}

// DeployCertificateInstanceOperationArrayInput is an input type that accepts DeployCertificateInstanceOperationArray and DeployCertificateInstanceOperationArrayOutput values.
// You can construct a concrete instance of `DeployCertificateInstanceOperationArrayInput` via:
//
//	DeployCertificateInstanceOperationArray{ DeployCertificateInstanceOperationArgs{...} }
type DeployCertificateInstanceOperationArrayInput interface {
	pulumi.Input

	ToDeployCertificateInstanceOperationArrayOutput() DeployCertificateInstanceOperationArrayOutput
	ToDeployCertificateInstanceOperationArrayOutputWithContext(context.Context) DeployCertificateInstanceOperationArrayOutput
}

type DeployCertificateInstanceOperationArray []DeployCertificateInstanceOperationInput

func (DeployCertificateInstanceOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeployCertificateInstanceOperation)(nil)).Elem()
}

func (i DeployCertificateInstanceOperationArray) ToDeployCertificateInstanceOperationArrayOutput() DeployCertificateInstanceOperationArrayOutput {
	return i.ToDeployCertificateInstanceOperationArrayOutputWithContext(context.Background())
}

func (i DeployCertificateInstanceOperationArray) ToDeployCertificateInstanceOperationArrayOutputWithContext(ctx context.Context) DeployCertificateInstanceOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployCertificateInstanceOperationArrayOutput)
}

// DeployCertificateInstanceOperationMapInput is an input type that accepts DeployCertificateInstanceOperationMap and DeployCertificateInstanceOperationMapOutput values.
// You can construct a concrete instance of `DeployCertificateInstanceOperationMapInput` via:
//
//	DeployCertificateInstanceOperationMap{ "key": DeployCertificateInstanceOperationArgs{...} }
type DeployCertificateInstanceOperationMapInput interface {
	pulumi.Input

	ToDeployCertificateInstanceOperationMapOutput() DeployCertificateInstanceOperationMapOutput
	ToDeployCertificateInstanceOperationMapOutputWithContext(context.Context) DeployCertificateInstanceOperationMapOutput
}

type DeployCertificateInstanceOperationMap map[string]DeployCertificateInstanceOperationInput

func (DeployCertificateInstanceOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeployCertificateInstanceOperation)(nil)).Elem()
}

func (i DeployCertificateInstanceOperationMap) ToDeployCertificateInstanceOperationMapOutput() DeployCertificateInstanceOperationMapOutput {
	return i.ToDeployCertificateInstanceOperationMapOutputWithContext(context.Background())
}

func (i DeployCertificateInstanceOperationMap) ToDeployCertificateInstanceOperationMapOutputWithContext(ctx context.Context) DeployCertificateInstanceOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployCertificateInstanceOperationMapOutput)
}

type DeployCertificateInstanceOperationOutput struct{ *pulumi.OutputState }

func (DeployCertificateInstanceOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployCertificateInstanceOperation)(nil)).Elem()
}

func (o DeployCertificateInstanceOperationOutput) ToDeployCertificateInstanceOperationOutput() DeployCertificateInstanceOperationOutput {
	return o
}

func (o DeployCertificateInstanceOperationOutput) ToDeployCertificateInstanceOperationOutputWithContext(ctx context.Context) DeployCertificateInstanceOperationOutput {
	return o
}

// ID of the certificate to be deployed.
func (o DeployCertificateInstanceOperationOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployCertificateInstanceOperation) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// Need to deploy instance list.
func (o DeployCertificateInstanceOperationOutput) InstanceIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeployCertificateInstanceOperation) pulumi.StringArrayOutput { return v.InstanceIdLists }).(pulumi.StringArrayOutput)
}

// Deployed cloud resource type.
func (o DeployCertificateInstanceOperationOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeployCertificateInstanceOperation) pulumi.StringPtrOutput { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
func (o DeployCertificateInstanceOperationOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeployCertificateInstanceOperation) pulumi.IntPtrOutput { return v.Status }).(pulumi.IntPtrOutput)
}

type DeployCertificateInstanceOperationArrayOutput struct{ *pulumi.OutputState }

func (DeployCertificateInstanceOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeployCertificateInstanceOperation)(nil)).Elem()
}

func (o DeployCertificateInstanceOperationArrayOutput) ToDeployCertificateInstanceOperationArrayOutput() DeployCertificateInstanceOperationArrayOutput {
	return o
}

func (o DeployCertificateInstanceOperationArrayOutput) ToDeployCertificateInstanceOperationArrayOutputWithContext(ctx context.Context) DeployCertificateInstanceOperationArrayOutput {
	return o
}

func (o DeployCertificateInstanceOperationArrayOutput) Index(i pulumi.IntInput) DeployCertificateInstanceOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeployCertificateInstanceOperation {
		return vs[0].([]*DeployCertificateInstanceOperation)[vs[1].(int)]
	}).(DeployCertificateInstanceOperationOutput)
}

type DeployCertificateInstanceOperationMapOutput struct{ *pulumi.OutputState }

func (DeployCertificateInstanceOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeployCertificateInstanceOperation)(nil)).Elem()
}

func (o DeployCertificateInstanceOperationMapOutput) ToDeployCertificateInstanceOperationMapOutput() DeployCertificateInstanceOperationMapOutput {
	return o
}

func (o DeployCertificateInstanceOperationMapOutput) ToDeployCertificateInstanceOperationMapOutputWithContext(ctx context.Context) DeployCertificateInstanceOperationMapOutput {
	return o
}

func (o DeployCertificateInstanceOperationMapOutput) MapIndex(k pulumi.StringInput) DeployCertificateInstanceOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeployCertificateInstanceOperation {
		return vs[0].(map[string]*DeployCertificateInstanceOperation)[vs[1].(string)]
	}).(DeployCertificateInstanceOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeployCertificateInstanceOperationInput)(nil)).Elem(), &DeployCertificateInstanceOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployCertificateInstanceOperationArrayInput)(nil)).Elem(), DeployCertificateInstanceOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployCertificateInstanceOperationMapInput)(nil)).Elem(), DeployCertificateInstanceOperationMap{})
	pulumi.RegisterOutputType(DeployCertificateInstanceOperationOutput{})
	pulumi.RegisterOutputType(DeployCertificateInstanceOperationArrayOutput{})
	pulumi.RegisterOutputType(DeployCertificateInstanceOperationMapOutput{})
}
