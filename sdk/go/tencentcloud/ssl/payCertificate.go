// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssl

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to create a payment SSL.
//
// > **NOTE:** Provides the creation of a paid certificate, including the submission of certificate information and order functions;
// currently, it does not support re-issuing certificates, revoking certificates, and deleting certificates; the certificate remarks
// and belonging items can be updated. The Destroy operation will only cancel the certificate order, and will not delete the
// certificate and refund the fee. If you need a refund, you need to check the current certificate status in the console
// as `Review Cancel`, and then you can click `Request a refund` to refund the fee. To update the information of a certificate,
// we will automatically roll back your certificate if this certificate is already in the validation stage. This process may take
// some time because the CA callback is time-consuming. Please be patient and follow the prompt message. Or, feel free to contact
// Tencent Cloud Support.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ssl"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ssl"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ssl.NewPayCertificate(ctx, "example", &Ssl.PayCertificateArgs{
//				Alias:     pulumi.String("ssl desc."),
//				DomainNum: pulumi.Int(1),
//				Information: &ssl.PayCertificateInformationArgs{
//					AdminEmail:           pulumi.String("test@tencent.com"),
//					AdminFirstName:       pulumi.String("test"),
//					AdminLastName:        pulumi.String("test"),
//					AdminPhoneNum:        pulumi.String("12345678901"),
//					AdminPosition:        pulumi.String("developer"),
//					CertificateDomain:    pulumi.String("www.example.com"),
//					ContactEmail:         pulumi.String("test@tencent.com"),
//					ContactFirstName:     pulumi.String("test"),
//					ContactLastName:      pulumi.String("test"),
//					ContactNumber:        pulumi.String("12345678901"),
//					ContactPosition:      pulumi.String("developer"),
//					CsrType:              pulumi.String("online"),
//					OrganizationAddress:  pulumi.String("广东省深圳市南山区腾讯大厦1000号"),
//					OrganizationCity:     pulumi.String("深圳市"),
//					OrganizationCountry:  pulumi.String("CN"),
//					OrganizationDivision: pulumi.String("Qcloud"),
//					OrganizationName:     pulumi.String("Tencent"),
//					OrganizationRegion:   pulumi.String("广东省"),
//					PhoneAreaCode:        pulumi.String("0755"),
//					PhoneNumber:          pulumi.String("86013388"),
//					PostalCode:           pulumi.String("0755"),
//					VerifyType:           pulumi.String("DNS"),
//				},
//				ProductId: pulumi.Int(33),
//				ProjectId: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// payment SSL instance can be imported, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ssl/payCertificate:PayCertificate ssl iPQNn61x#33#1#1
//
// ```
type PayCertificate struct {
	pulumi.CustomResourceState

	// Remark name.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// Returned certificate ID.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// The base64-encoded certificate confirmation file should be in jpg, jpeg, png, pdf, and the size should be between 1kb and 1.4M. Note: it only works when productId is set to 8, 9 or 10.
	ConfirmLetter pulumi.StringPtrOutput `pulumi:"confirmLetter"`
	// Number of domain names included in the certificate.
	DomainNum pulumi.IntOutput `pulumi:"domainNum"`
	// DV certification information.
	DvAuths PayCertificateDvAuthArrayOutput `pulumi:"dvAuths"`
	// Certificate information.
	Information PayCertificateInformationOutput `pulumi:"information"`
	// Order ID returned.
	OrderId pulumi.StringOutput `pulumi:"orderId"`
	// Certificate commodity ID. Valid value ranges: (3~42). `3` means SecureSite enhanced Enterprise Edition (EV Pro), `4` means SecureSite enhanced (EV), `5` means SecureSite Enterprise Professional Edition (OV Pro), `6` means SecureSite Enterprise (OV), `7` means SecureSite Enterprise Type (OV) wildcard, `8` means Geotrust enhanced (EV), `9` means Geotrust enterprise (OV), `10` means Geotrust enterprise (OV) wildcard, `11` means TrustAsia domain type multi-domain SSL certificate, `12` means TrustAsia domain type ( DV) wildcard, `13` means TrustAsia enterprise wildcard (OV) SSL certificate (D3), `14` means TrustAsia enterprise (OV) SSL certificate (D3), `15` means TrustAsia enterprise multi-domain (OV) SSL certificate (D3), `16` means TrustAsia Enhanced (EV) SSL Certificate (D3), `17` means TrustAsia Enhanced Multiple Domain (EV) SSL Certificate (D3), `18` means GlobalSign Enterprise (OV) SSL Certificate, `19` means GlobalSign Enterprise Wildcard (OV) SSL Certificate, `20` means GlobalSign Enhanced (EV) SSL Certificate, `21` means TrustAsia Enterprise Wildcard Multiple Domain (OV) SSL Certificate (D3), `22` means GlobalSign Enterprise Multiple Domain (OV) SSL Certificate, `23` means GlobalSign Enterprise Multiple Wildcard Domain name (OV) SSL certificate, `24` means GlobalSign enhanced multi-domain (EV) SSL certificate, `25` means Wotrus domain type certificate, `26` means Wotrus domain type multi-domain certificate, `27` means Wotrus domain type wildcard certificate, `28` means Wotrus enterprise type certificate, `29` means Wotrus enterprise multi-domain certificate, `30` means Wotrus enterprise wildcard certificate, `31` means Wotrus enhanced certificate, `32` means Wotrus enhanced multi-domain certificate, `33` means WoTrus National Secret Domain name Certificate, `34` means WoTrus National Secret Domain name Certificate (multiple domain names), `35` WoTrus National Secret Domain name Certificate (wildcard), `37` means WoTrus State Secret Enterprise Certificate, `38` means WoTrus State Secret Enterprise Certificate (multiple domain names), `39` means WoTrus State Secret Enterprise Certificate (wildcard), `40` means WoTrus National secret enhanced certificate, `41` means WoTrus National Secret enhanced Certificate (multiple domain names), `42` means TrustAsia- Domain name Certificate (wildcard multiple domain names), `43` means DNSPod Enterprise (OV) SSL Certificate, `44` means DNSPod- Enterprise (OV) wildcard SSL certificate, `45` means DNSPod Enterprise (OV) Multi-domain name SSL Certificate, `46` means DNSPod enhanced (EV) SSL certificate, `47` means DNSPod enhanced (EV) multi-domain name SSL certificate, `48` means DNSPod Domain name Type (DV) SSL Certificate, `49` means DNSPod Domain name Type (DV) wildcard SSL certificate, `50` means DNSPod domain name type (DV) multi-domain name SSL certificate, `51` means DNSPod (State Secret) Enterprise (OV) SSL certificate, `52` DNSPod (National Secret) Enterprise (OV) wildcard SSL certificate, `53` means DNSPod (National Secret) Enterprise (OV) multi-domain SSL certificate, `54` means DNSPod (National Secret) Domain Name (DV) SSL certificate, `55` means DNSPod (National Secret) Domain Name Type (DV) wildcard SSL certificate, `56` means DNSPod (National Secret) Domain Name Type (DV) multi-domain SSL certificate.
	ProductId pulumi.IntOutput `pulumi:"productId"`
	// The ID of project.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// SSL certificate status.
	Status pulumi.IntOutput `pulumi:"status"`
	// Certificate period, currently only supports 1 year certificate purchase.
	TimeSpan pulumi.IntPtrOutput `pulumi:"timeSpan"`
}

// NewPayCertificate registers a new resource with the given unique name, arguments, and options.
func NewPayCertificate(ctx *pulumi.Context,
	name string, args *PayCertificateArgs, opts ...pulumi.ResourceOption) (*PayCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainNum == nil {
		return nil, errors.New("invalid value for required argument 'DomainNum'")
	}
	if args.Information == nil {
		return nil, errors.New("invalid value for required argument 'Information'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PayCertificate
	err := ctx.RegisterResource("tencentcloud:Ssl/payCertificate:PayCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPayCertificate gets an existing PayCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPayCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PayCertificateState, opts ...pulumi.ResourceOption) (*PayCertificate, error) {
	var resource PayCertificate
	err := ctx.ReadResource("tencentcloud:Ssl/payCertificate:PayCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PayCertificate resources.
type payCertificateState struct {
	// Remark name.
	Alias *string `pulumi:"alias"`
	// Returned certificate ID.
	CertificateId *string `pulumi:"certificateId"`
	// The base64-encoded certificate confirmation file should be in jpg, jpeg, png, pdf, and the size should be between 1kb and 1.4M. Note: it only works when productId is set to 8, 9 or 10.
	ConfirmLetter *string `pulumi:"confirmLetter"`
	// Number of domain names included in the certificate.
	DomainNum *int `pulumi:"domainNum"`
	// DV certification information.
	DvAuths []PayCertificateDvAuth `pulumi:"dvAuths"`
	// Certificate information.
	Information *PayCertificateInformation `pulumi:"information"`
	// Order ID returned.
	OrderId *string `pulumi:"orderId"`
	// Certificate commodity ID. Valid value ranges: (3~42). `3` means SecureSite enhanced Enterprise Edition (EV Pro), `4` means SecureSite enhanced (EV), `5` means SecureSite Enterprise Professional Edition (OV Pro), `6` means SecureSite Enterprise (OV), `7` means SecureSite Enterprise Type (OV) wildcard, `8` means Geotrust enhanced (EV), `9` means Geotrust enterprise (OV), `10` means Geotrust enterprise (OV) wildcard, `11` means TrustAsia domain type multi-domain SSL certificate, `12` means TrustAsia domain type ( DV) wildcard, `13` means TrustAsia enterprise wildcard (OV) SSL certificate (D3), `14` means TrustAsia enterprise (OV) SSL certificate (D3), `15` means TrustAsia enterprise multi-domain (OV) SSL certificate (D3), `16` means TrustAsia Enhanced (EV) SSL Certificate (D3), `17` means TrustAsia Enhanced Multiple Domain (EV) SSL Certificate (D3), `18` means GlobalSign Enterprise (OV) SSL Certificate, `19` means GlobalSign Enterprise Wildcard (OV) SSL Certificate, `20` means GlobalSign Enhanced (EV) SSL Certificate, `21` means TrustAsia Enterprise Wildcard Multiple Domain (OV) SSL Certificate (D3), `22` means GlobalSign Enterprise Multiple Domain (OV) SSL Certificate, `23` means GlobalSign Enterprise Multiple Wildcard Domain name (OV) SSL certificate, `24` means GlobalSign enhanced multi-domain (EV) SSL certificate, `25` means Wotrus domain type certificate, `26` means Wotrus domain type multi-domain certificate, `27` means Wotrus domain type wildcard certificate, `28` means Wotrus enterprise type certificate, `29` means Wotrus enterprise multi-domain certificate, `30` means Wotrus enterprise wildcard certificate, `31` means Wotrus enhanced certificate, `32` means Wotrus enhanced multi-domain certificate, `33` means WoTrus National Secret Domain name Certificate, `34` means WoTrus National Secret Domain name Certificate (multiple domain names), `35` WoTrus National Secret Domain name Certificate (wildcard), `37` means WoTrus State Secret Enterprise Certificate, `38` means WoTrus State Secret Enterprise Certificate (multiple domain names), `39` means WoTrus State Secret Enterprise Certificate (wildcard), `40` means WoTrus National secret enhanced certificate, `41` means WoTrus National Secret enhanced Certificate (multiple domain names), `42` means TrustAsia- Domain name Certificate (wildcard multiple domain names), `43` means DNSPod Enterprise (OV) SSL Certificate, `44` means DNSPod- Enterprise (OV) wildcard SSL certificate, `45` means DNSPod Enterprise (OV) Multi-domain name SSL Certificate, `46` means DNSPod enhanced (EV) SSL certificate, `47` means DNSPod enhanced (EV) multi-domain name SSL certificate, `48` means DNSPod Domain name Type (DV) SSL Certificate, `49` means DNSPod Domain name Type (DV) wildcard SSL certificate, `50` means DNSPod domain name type (DV) multi-domain name SSL certificate, `51` means DNSPod (State Secret) Enterprise (OV) SSL certificate, `52` DNSPod (National Secret) Enterprise (OV) wildcard SSL certificate, `53` means DNSPod (National Secret) Enterprise (OV) multi-domain SSL certificate, `54` means DNSPod (National Secret) Domain Name (DV) SSL certificate, `55` means DNSPod (National Secret) Domain Name Type (DV) wildcard SSL certificate, `56` means DNSPod (National Secret) Domain Name Type (DV) multi-domain SSL certificate.
	ProductId *int `pulumi:"productId"`
	// The ID of project.
	ProjectId *int `pulumi:"projectId"`
	// SSL certificate status.
	Status *int `pulumi:"status"`
	// Certificate period, currently only supports 1 year certificate purchase.
	TimeSpan *int `pulumi:"timeSpan"`
}

type PayCertificateState struct {
	// Remark name.
	Alias pulumi.StringPtrInput
	// Returned certificate ID.
	CertificateId pulumi.StringPtrInput
	// The base64-encoded certificate confirmation file should be in jpg, jpeg, png, pdf, and the size should be between 1kb and 1.4M. Note: it only works when productId is set to 8, 9 or 10.
	ConfirmLetter pulumi.StringPtrInput
	// Number of domain names included in the certificate.
	DomainNum pulumi.IntPtrInput
	// DV certification information.
	DvAuths PayCertificateDvAuthArrayInput
	// Certificate information.
	Information PayCertificateInformationPtrInput
	// Order ID returned.
	OrderId pulumi.StringPtrInput
	// Certificate commodity ID. Valid value ranges: (3~42). `3` means SecureSite enhanced Enterprise Edition (EV Pro), `4` means SecureSite enhanced (EV), `5` means SecureSite Enterprise Professional Edition (OV Pro), `6` means SecureSite Enterprise (OV), `7` means SecureSite Enterprise Type (OV) wildcard, `8` means Geotrust enhanced (EV), `9` means Geotrust enterprise (OV), `10` means Geotrust enterprise (OV) wildcard, `11` means TrustAsia domain type multi-domain SSL certificate, `12` means TrustAsia domain type ( DV) wildcard, `13` means TrustAsia enterprise wildcard (OV) SSL certificate (D3), `14` means TrustAsia enterprise (OV) SSL certificate (D3), `15` means TrustAsia enterprise multi-domain (OV) SSL certificate (D3), `16` means TrustAsia Enhanced (EV) SSL Certificate (D3), `17` means TrustAsia Enhanced Multiple Domain (EV) SSL Certificate (D3), `18` means GlobalSign Enterprise (OV) SSL Certificate, `19` means GlobalSign Enterprise Wildcard (OV) SSL Certificate, `20` means GlobalSign Enhanced (EV) SSL Certificate, `21` means TrustAsia Enterprise Wildcard Multiple Domain (OV) SSL Certificate (D3), `22` means GlobalSign Enterprise Multiple Domain (OV) SSL Certificate, `23` means GlobalSign Enterprise Multiple Wildcard Domain name (OV) SSL certificate, `24` means GlobalSign enhanced multi-domain (EV) SSL certificate, `25` means Wotrus domain type certificate, `26` means Wotrus domain type multi-domain certificate, `27` means Wotrus domain type wildcard certificate, `28` means Wotrus enterprise type certificate, `29` means Wotrus enterprise multi-domain certificate, `30` means Wotrus enterprise wildcard certificate, `31` means Wotrus enhanced certificate, `32` means Wotrus enhanced multi-domain certificate, `33` means WoTrus National Secret Domain name Certificate, `34` means WoTrus National Secret Domain name Certificate (multiple domain names), `35` WoTrus National Secret Domain name Certificate (wildcard), `37` means WoTrus State Secret Enterprise Certificate, `38` means WoTrus State Secret Enterprise Certificate (multiple domain names), `39` means WoTrus State Secret Enterprise Certificate (wildcard), `40` means WoTrus National secret enhanced certificate, `41` means WoTrus National Secret enhanced Certificate (multiple domain names), `42` means TrustAsia- Domain name Certificate (wildcard multiple domain names), `43` means DNSPod Enterprise (OV) SSL Certificate, `44` means DNSPod- Enterprise (OV) wildcard SSL certificate, `45` means DNSPod Enterprise (OV) Multi-domain name SSL Certificate, `46` means DNSPod enhanced (EV) SSL certificate, `47` means DNSPod enhanced (EV) multi-domain name SSL certificate, `48` means DNSPod Domain name Type (DV) SSL Certificate, `49` means DNSPod Domain name Type (DV) wildcard SSL certificate, `50` means DNSPod domain name type (DV) multi-domain name SSL certificate, `51` means DNSPod (State Secret) Enterprise (OV) SSL certificate, `52` DNSPod (National Secret) Enterprise (OV) wildcard SSL certificate, `53` means DNSPod (National Secret) Enterprise (OV) multi-domain SSL certificate, `54` means DNSPod (National Secret) Domain Name (DV) SSL certificate, `55` means DNSPod (National Secret) Domain Name Type (DV) wildcard SSL certificate, `56` means DNSPod (National Secret) Domain Name Type (DV) multi-domain SSL certificate.
	ProductId pulumi.IntPtrInput
	// The ID of project.
	ProjectId pulumi.IntPtrInput
	// SSL certificate status.
	Status pulumi.IntPtrInput
	// Certificate period, currently only supports 1 year certificate purchase.
	TimeSpan pulumi.IntPtrInput
}

func (PayCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*payCertificateState)(nil)).Elem()
}

type payCertificateArgs struct {
	// Remark name.
	Alias *string `pulumi:"alias"`
	// The base64-encoded certificate confirmation file should be in jpg, jpeg, png, pdf, and the size should be between 1kb and 1.4M. Note: it only works when productId is set to 8, 9 or 10.
	ConfirmLetter *string `pulumi:"confirmLetter"`
	// Number of domain names included in the certificate.
	DomainNum int `pulumi:"domainNum"`
	// DV certification information.
	DvAuths []PayCertificateDvAuth `pulumi:"dvAuths"`
	// Certificate information.
	Information PayCertificateInformation `pulumi:"information"`
	// Certificate commodity ID. Valid value ranges: (3~42). `3` means SecureSite enhanced Enterprise Edition (EV Pro), `4` means SecureSite enhanced (EV), `5` means SecureSite Enterprise Professional Edition (OV Pro), `6` means SecureSite Enterprise (OV), `7` means SecureSite Enterprise Type (OV) wildcard, `8` means Geotrust enhanced (EV), `9` means Geotrust enterprise (OV), `10` means Geotrust enterprise (OV) wildcard, `11` means TrustAsia domain type multi-domain SSL certificate, `12` means TrustAsia domain type ( DV) wildcard, `13` means TrustAsia enterprise wildcard (OV) SSL certificate (D3), `14` means TrustAsia enterprise (OV) SSL certificate (D3), `15` means TrustAsia enterprise multi-domain (OV) SSL certificate (D3), `16` means TrustAsia Enhanced (EV) SSL Certificate (D3), `17` means TrustAsia Enhanced Multiple Domain (EV) SSL Certificate (D3), `18` means GlobalSign Enterprise (OV) SSL Certificate, `19` means GlobalSign Enterprise Wildcard (OV) SSL Certificate, `20` means GlobalSign Enhanced (EV) SSL Certificate, `21` means TrustAsia Enterprise Wildcard Multiple Domain (OV) SSL Certificate (D3), `22` means GlobalSign Enterprise Multiple Domain (OV) SSL Certificate, `23` means GlobalSign Enterprise Multiple Wildcard Domain name (OV) SSL certificate, `24` means GlobalSign enhanced multi-domain (EV) SSL certificate, `25` means Wotrus domain type certificate, `26` means Wotrus domain type multi-domain certificate, `27` means Wotrus domain type wildcard certificate, `28` means Wotrus enterprise type certificate, `29` means Wotrus enterprise multi-domain certificate, `30` means Wotrus enterprise wildcard certificate, `31` means Wotrus enhanced certificate, `32` means Wotrus enhanced multi-domain certificate, `33` means WoTrus National Secret Domain name Certificate, `34` means WoTrus National Secret Domain name Certificate (multiple domain names), `35` WoTrus National Secret Domain name Certificate (wildcard), `37` means WoTrus State Secret Enterprise Certificate, `38` means WoTrus State Secret Enterprise Certificate (multiple domain names), `39` means WoTrus State Secret Enterprise Certificate (wildcard), `40` means WoTrus National secret enhanced certificate, `41` means WoTrus National Secret enhanced Certificate (multiple domain names), `42` means TrustAsia- Domain name Certificate (wildcard multiple domain names), `43` means DNSPod Enterprise (OV) SSL Certificate, `44` means DNSPod- Enterprise (OV) wildcard SSL certificate, `45` means DNSPod Enterprise (OV) Multi-domain name SSL Certificate, `46` means DNSPod enhanced (EV) SSL certificate, `47` means DNSPod enhanced (EV) multi-domain name SSL certificate, `48` means DNSPod Domain name Type (DV) SSL Certificate, `49` means DNSPod Domain name Type (DV) wildcard SSL certificate, `50` means DNSPod domain name type (DV) multi-domain name SSL certificate, `51` means DNSPod (State Secret) Enterprise (OV) SSL certificate, `52` DNSPod (National Secret) Enterprise (OV) wildcard SSL certificate, `53` means DNSPod (National Secret) Enterprise (OV) multi-domain SSL certificate, `54` means DNSPod (National Secret) Domain Name (DV) SSL certificate, `55` means DNSPod (National Secret) Domain Name Type (DV) wildcard SSL certificate, `56` means DNSPod (National Secret) Domain Name Type (DV) multi-domain SSL certificate.
	ProductId int `pulumi:"productId"`
	// The ID of project.
	ProjectId *int `pulumi:"projectId"`
	// Certificate period, currently only supports 1 year certificate purchase.
	TimeSpan *int `pulumi:"timeSpan"`
}

// The set of arguments for constructing a PayCertificate resource.
type PayCertificateArgs struct {
	// Remark name.
	Alias pulumi.StringPtrInput
	// The base64-encoded certificate confirmation file should be in jpg, jpeg, png, pdf, and the size should be between 1kb and 1.4M. Note: it only works when productId is set to 8, 9 or 10.
	ConfirmLetter pulumi.StringPtrInput
	// Number of domain names included in the certificate.
	DomainNum pulumi.IntInput
	// DV certification information.
	DvAuths PayCertificateDvAuthArrayInput
	// Certificate information.
	Information PayCertificateInformationInput
	// Certificate commodity ID. Valid value ranges: (3~42). `3` means SecureSite enhanced Enterprise Edition (EV Pro), `4` means SecureSite enhanced (EV), `5` means SecureSite Enterprise Professional Edition (OV Pro), `6` means SecureSite Enterprise (OV), `7` means SecureSite Enterprise Type (OV) wildcard, `8` means Geotrust enhanced (EV), `9` means Geotrust enterprise (OV), `10` means Geotrust enterprise (OV) wildcard, `11` means TrustAsia domain type multi-domain SSL certificate, `12` means TrustAsia domain type ( DV) wildcard, `13` means TrustAsia enterprise wildcard (OV) SSL certificate (D3), `14` means TrustAsia enterprise (OV) SSL certificate (D3), `15` means TrustAsia enterprise multi-domain (OV) SSL certificate (D3), `16` means TrustAsia Enhanced (EV) SSL Certificate (D3), `17` means TrustAsia Enhanced Multiple Domain (EV) SSL Certificate (D3), `18` means GlobalSign Enterprise (OV) SSL Certificate, `19` means GlobalSign Enterprise Wildcard (OV) SSL Certificate, `20` means GlobalSign Enhanced (EV) SSL Certificate, `21` means TrustAsia Enterprise Wildcard Multiple Domain (OV) SSL Certificate (D3), `22` means GlobalSign Enterprise Multiple Domain (OV) SSL Certificate, `23` means GlobalSign Enterprise Multiple Wildcard Domain name (OV) SSL certificate, `24` means GlobalSign enhanced multi-domain (EV) SSL certificate, `25` means Wotrus domain type certificate, `26` means Wotrus domain type multi-domain certificate, `27` means Wotrus domain type wildcard certificate, `28` means Wotrus enterprise type certificate, `29` means Wotrus enterprise multi-domain certificate, `30` means Wotrus enterprise wildcard certificate, `31` means Wotrus enhanced certificate, `32` means Wotrus enhanced multi-domain certificate, `33` means WoTrus National Secret Domain name Certificate, `34` means WoTrus National Secret Domain name Certificate (multiple domain names), `35` WoTrus National Secret Domain name Certificate (wildcard), `37` means WoTrus State Secret Enterprise Certificate, `38` means WoTrus State Secret Enterprise Certificate (multiple domain names), `39` means WoTrus State Secret Enterprise Certificate (wildcard), `40` means WoTrus National secret enhanced certificate, `41` means WoTrus National Secret enhanced Certificate (multiple domain names), `42` means TrustAsia- Domain name Certificate (wildcard multiple domain names), `43` means DNSPod Enterprise (OV) SSL Certificate, `44` means DNSPod- Enterprise (OV) wildcard SSL certificate, `45` means DNSPod Enterprise (OV) Multi-domain name SSL Certificate, `46` means DNSPod enhanced (EV) SSL certificate, `47` means DNSPod enhanced (EV) multi-domain name SSL certificate, `48` means DNSPod Domain name Type (DV) SSL Certificate, `49` means DNSPod Domain name Type (DV) wildcard SSL certificate, `50` means DNSPod domain name type (DV) multi-domain name SSL certificate, `51` means DNSPod (State Secret) Enterprise (OV) SSL certificate, `52` DNSPod (National Secret) Enterprise (OV) wildcard SSL certificate, `53` means DNSPod (National Secret) Enterprise (OV) multi-domain SSL certificate, `54` means DNSPod (National Secret) Domain Name (DV) SSL certificate, `55` means DNSPod (National Secret) Domain Name Type (DV) wildcard SSL certificate, `56` means DNSPod (National Secret) Domain Name Type (DV) multi-domain SSL certificate.
	ProductId pulumi.IntInput
	// The ID of project.
	ProjectId pulumi.IntPtrInput
	// Certificate period, currently only supports 1 year certificate purchase.
	TimeSpan pulumi.IntPtrInput
}

func (PayCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*payCertificateArgs)(nil)).Elem()
}

type PayCertificateInput interface {
	pulumi.Input

	ToPayCertificateOutput() PayCertificateOutput
	ToPayCertificateOutputWithContext(ctx context.Context) PayCertificateOutput
}

func (*PayCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**PayCertificate)(nil)).Elem()
}

func (i *PayCertificate) ToPayCertificateOutput() PayCertificateOutput {
	return i.ToPayCertificateOutputWithContext(context.Background())
}

func (i *PayCertificate) ToPayCertificateOutputWithContext(ctx context.Context) PayCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PayCertificateOutput)
}

// PayCertificateArrayInput is an input type that accepts PayCertificateArray and PayCertificateArrayOutput values.
// You can construct a concrete instance of `PayCertificateArrayInput` via:
//
//	PayCertificateArray{ PayCertificateArgs{...} }
type PayCertificateArrayInput interface {
	pulumi.Input

	ToPayCertificateArrayOutput() PayCertificateArrayOutput
	ToPayCertificateArrayOutputWithContext(context.Context) PayCertificateArrayOutput
}

type PayCertificateArray []PayCertificateInput

func (PayCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PayCertificate)(nil)).Elem()
}

func (i PayCertificateArray) ToPayCertificateArrayOutput() PayCertificateArrayOutput {
	return i.ToPayCertificateArrayOutputWithContext(context.Background())
}

func (i PayCertificateArray) ToPayCertificateArrayOutputWithContext(ctx context.Context) PayCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PayCertificateArrayOutput)
}

// PayCertificateMapInput is an input type that accepts PayCertificateMap and PayCertificateMapOutput values.
// You can construct a concrete instance of `PayCertificateMapInput` via:
//
//	PayCertificateMap{ "key": PayCertificateArgs{...} }
type PayCertificateMapInput interface {
	pulumi.Input

	ToPayCertificateMapOutput() PayCertificateMapOutput
	ToPayCertificateMapOutputWithContext(context.Context) PayCertificateMapOutput
}

type PayCertificateMap map[string]PayCertificateInput

func (PayCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PayCertificate)(nil)).Elem()
}

func (i PayCertificateMap) ToPayCertificateMapOutput() PayCertificateMapOutput {
	return i.ToPayCertificateMapOutputWithContext(context.Background())
}

func (i PayCertificateMap) ToPayCertificateMapOutputWithContext(ctx context.Context) PayCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PayCertificateMapOutput)
}

type PayCertificateOutput struct{ *pulumi.OutputState }

func (PayCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PayCertificate)(nil)).Elem()
}

func (o PayCertificateOutput) ToPayCertificateOutput() PayCertificateOutput {
	return o
}

func (o PayCertificateOutput) ToPayCertificateOutputWithContext(ctx context.Context) PayCertificateOutput {
	return o
}

// Remark name.
func (o PayCertificateOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *PayCertificate) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// Returned certificate ID.
func (o PayCertificateOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *PayCertificate) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// The base64-encoded certificate confirmation file should be in jpg, jpeg, png, pdf, and the size should be between 1kb and 1.4M. Note: it only works when productId is set to 8, 9 or 10.
func (o PayCertificateOutput) ConfirmLetter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PayCertificate) pulumi.StringPtrOutput { return v.ConfirmLetter }).(pulumi.StringPtrOutput)
}

// Number of domain names included in the certificate.
func (o PayCertificateOutput) DomainNum() pulumi.IntOutput {
	return o.ApplyT(func(v *PayCertificate) pulumi.IntOutput { return v.DomainNum }).(pulumi.IntOutput)
}

// DV certification information.
func (o PayCertificateOutput) DvAuths() PayCertificateDvAuthArrayOutput {
	return o.ApplyT(func(v *PayCertificate) PayCertificateDvAuthArrayOutput { return v.DvAuths }).(PayCertificateDvAuthArrayOutput)
}

// Certificate information.
func (o PayCertificateOutput) Information() PayCertificateInformationOutput {
	return o.ApplyT(func(v *PayCertificate) PayCertificateInformationOutput { return v.Information }).(PayCertificateInformationOutput)
}

// Order ID returned.
func (o PayCertificateOutput) OrderId() pulumi.StringOutput {
	return o.ApplyT(func(v *PayCertificate) pulumi.StringOutput { return v.OrderId }).(pulumi.StringOutput)
}

// Certificate commodity ID. Valid value ranges: (3~42). `3` means SecureSite enhanced Enterprise Edition (EV Pro), `4` means SecureSite enhanced (EV), `5` means SecureSite Enterprise Professional Edition (OV Pro), `6` means SecureSite Enterprise (OV), `7` means SecureSite Enterprise Type (OV) wildcard, `8` means Geotrust enhanced (EV), `9` means Geotrust enterprise (OV), `10` means Geotrust enterprise (OV) wildcard, `11` means TrustAsia domain type multi-domain SSL certificate, `12` means TrustAsia domain type ( DV) wildcard, `13` means TrustAsia enterprise wildcard (OV) SSL certificate (D3), `14` means TrustAsia enterprise (OV) SSL certificate (D3), `15` means TrustAsia enterprise multi-domain (OV) SSL certificate (D3), `16` means TrustAsia Enhanced (EV) SSL Certificate (D3), `17` means TrustAsia Enhanced Multiple Domain (EV) SSL Certificate (D3), `18` means GlobalSign Enterprise (OV) SSL Certificate, `19` means GlobalSign Enterprise Wildcard (OV) SSL Certificate, `20` means GlobalSign Enhanced (EV) SSL Certificate, `21` means TrustAsia Enterprise Wildcard Multiple Domain (OV) SSL Certificate (D3), `22` means GlobalSign Enterprise Multiple Domain (OV) SSL Certificate, `23` means GlobalSign Enterprise Multiple Wildcard Domain name (OV) SSL certificate, `24` means GlobalSign enhanced multi-domain (EV) SSL certificate, `25` means Wotrus domain type certificate, `26` means Wotrus domain type multi-domain certificate, `27` means Wotrus domain type wildcard certificate, `28` means Wotrus enterprise type certificate, `29` means Wotrus enterprise multi-domain certificate, `30` means Wotrus enterprise wildcard certificate, `31` means Wotrus enhanced certificate, `32` means Wotrus enhanced multi-domain certificate, `33` means WoTrus National Secret Domain name Certificate, `34` means WoTrus National Secret Domain name Certificate (multiple domain names), `35` WoTrus National Secret Domain name Certificate (wildcard), `37` means WoTrus State Secret Enterprise Certificate, `38` means WoTrus State Secret Enterprise Certificate (multiple domain names), `39` means WoTrus State Secret Enterprise Certificate (wildcard), `40` means WoTrus National secret enhanced certificate, `41` means WoTrus National Secret enhanced Certificate (multiple domain names), `42` means TrustAsia- Domain name Certificate (wildcard multiple domain names), `43` means DNSPod Enterprise (OV) SSL Certificate, `44` means DNSPod- Enterprise (OV) wildcard SSL certificate, `45` means DNSPod Enterprise (OV) Multi-domain name SSL Certificate, `46` means DNSPod enhanced (EV) SSL certificate, `47` means DNSPod enhanced (EV) multi-domain name SSL certificate, `48` means DNSPod Domain name Type (DV) SSL Certificate, `49` means DNSPod Domain name Type (DV) wildcard SSL certificate, `50` means DNSPod domain name type (DV) multi-domain name SSL certificate, `51` means DNSPod (State Secret) Enterprise (OV) SSL certificate, `52` DNSPod (National Secret) Enterprise (OV) wildcard SSL certificate, `53` means DNSPod (National Secret) Enterprise (OV) multi-domain SSL certificate, `54` means DNSPod (National Secret) Domain Name (DV) SSL certificate, `55` means DNSPod (National Secret) Domain Name Type (DV) wildcard SSL certificate, `56` means DNSPod (National Secret) Domain Name Type (DV) multi-domain SSL certificate.
func (o PayCertificateOutput) ProductId() pulumi.IntOutput {
	return o.ApplyT(func(v *PayCertificate) pulumi.IntOutput { return v.ProductId }).(pulumi.IntOutput)
}

// The ID of project.
func (o PayCertificateOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *PayCertificate) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// SSL certificate status.
func (o PayCertificateOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *PayCertificate) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Certificate period, currently only supports 1 year certificate purchase.
func (o PayCertificateOutput) TimeSpan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PayCertificate) pulumi.IntPtrOutput { return v.TimeSpan }).(pulumi.IntPtrOutput)
}

type PayCertificateArrayOutput struct{ *pulumi.OutputState }

func (PayCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PayCertificate)(nil)).Elem()
}

func (o PayCertificateArrayOutput) ToPayCertificateArrayOutput() PayCertificateArrayOutput {
	return o
}

func (o PayCertificateArrayOutput) ToPayCertificateArrayOutputWithContext(ctx context.Context) PayCertificateArrayOutput {
	return o
}

func (o PayCertificateArrayOutput) Index(i pulumi.IntInput) PayCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PayCertificate {
		return vs[0].([]*PayCertificate)[vs[1].(int)]
	}).(PayCertificateOutput)
}

type PayCertificateMapOutput struct{ *pulumi.OutputState }

func (PayCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PayCertificate)(nil)).Elem()
}

func (o PayCertificateMapOutput) ToPayCertificateMapOutput() PayCertificateMapOutput {
	return o
}

func (o PayCertificateMapOutput) ToPayCertificateMapOutputWithContext(ctx context.Context) PayCertificateMapOutput {
	return o
}

func (o PayCertificateMapOutput) MapIndex(k pulumi.StringInput) PayCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PayCertificate {
		return vs[0].(map[string]*PayCertificate)[vs[1].(string)]
	}).(PayCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PayCertificateInput)(nil)).Elem(), &PayCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*PayCertificateArrayInput)(nil)).Elem(), PayCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PayCertificateMapInput)(nil)).Elem(), PayCertificateMap{})
	pulumi.RegisterOutputType(PayCertificateOutput{})
	pulumi.RegisterOutputType(PayCertificateArrayOutput{})
	pulumi.RegisterOutputType(PayCertificateMapOutput{})
}
