// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a CDC site
//
// ## Example Usage
//
// ### Create a basic CDC site
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cdc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cdc.NewSite(ctx, "example", &Cdc.SiteArgs{
//				AddressLine: pulumi.String("Tencent Building"),
//				City:        pulumi.String("Guangzhou"),
//				Country:     pulumi.String("China"),
//				Description: pulumi.String("desc."),
//				Province:    pulumi.String("Guangdong Province"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create a complete CDC site
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cdc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cdc.NewSite(ctx, "example", &Cdc.SiteArgs{
//				AddressLine:          pulumi.String("Shenzhen Tencent Building"),
//				BreakerRequirement:   pulumi.Bool(true),
//				City:                 pulumi.String("Guangzhou"),
//				ConditionRequirement: pulumi.Bool(true),
//				Country:              pulumi.String("China"),
//				Description:          pulumi.String("desc."),
//				DimensionRequirement: pulumi.Bool(true),
//				FiberType:            pulumi.String("MM"),
//				MaxWeight:            pulumi.Int(100),
//				NeedHelp:             pulumi.Bool(true),
//				OpticalStandard:      pulumi.String("MM"),
//				OptionalAddressLine:  pulumi.String("Shenzhen Tencent Building of Binhai"),
//				PowerConnectors:      pulumi.String("380VAC3P"),
//				PowerDrawKva:         pulumi.Int(10),
//				PowerFeedDrop:        pulumi.String("DOWN"),
//				Province:             pulumi.String("Guangdong Province"),
//				RedundantNetworking:  pulumi.Bool(true),
//				RedundantPower:       pulumi.Bool(true),
//				UplinkCount:          pulumi.Int(2),
//				UplinkSpeedGbps:      pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// CDC site can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Cdc/site:Site example site-43qcf1ag
// ```
type Site struct {
	pulumi.CustomResourceState

	// Site Detail Address.
	AddressLine pulumi.StringOutput `pulumi:"addressLine"`
	// Whether there is an upstream circuit breaker.
	BreakerRequirement pulumi.BoolOutput `pulumi:"breakerRequirement"`
	// Site City.
	City pulumi.StringOutput `pulumi:"city"`
	// Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
	ConditionRequirement pulumi.BoolOutput `pulumi:"conditionRequirement"`
	// Site Country.
	Country pulumi.StringOutput `pulumi:"country"`
	// Site Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
	DimensionRequirement pulumi.BoolOutput `pulumi:"dimensionRequirement"`
	// Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
	FiberType pulumi.StringPtrOutput `pulumi:"fiberType"`
	// Site Max Weight capacity (KG).
	MaxWeight pulumi.IntOutput `pulumi:"maxWeight"`
	// Site Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether you need help from Tencent Cloud for rack installation.
	NeedHelp pulumi.BoolOutput `pulumi:"needHelp"`
	// Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
	OpticalStandard pulumi.StringPtrOutput `pulumi:"opticalStandard"`
	// Detailed address of the site area (to be added).
	OptionalAddressLine pulumi.StringPtrOutput `pulumi:"optionalAddressLine"`
	// Site Power Connectors. Example: 380VAC3P.
	PowerConnectors pulumi.StringPtrOutput `pulumi:"powerConnectors"`
	// Site Power DrawKva (KW).
	PowerDrawKva pulumi.IntOutput `pulumi:"powerDrawKva"`
	// Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
	PowerFeedDrop pulumi.StringPtrOutput `pulumi:"powerFeedDrop"`
	// Site Province.
	Province pulumi.StringOutput `pulumi:"province"`
	// Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
	RedundantNetworking pulumi.BoolOutput `pulumi:"redundantNetworking"`
	// Whether there is power redundancy.
	RedundantPower pulumi.BoolOutput `pulumi:"redundantPower"`
	// Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
	UplinkCount pulumi.IntOutput `pulumi:"uplinkCount"`
	// Uplink speed from the network to Tencent Cloud Region.
	UplinkSpeedGbps pulumi.IntOutput `pulumi:"uplinkSpeedGbps"`
}

// NewSite registers a new resource with the given unique name, arguments, and options.
func NewSite(ctx *pulumi.Context,
	name string, args *SiteArgs, opts ...pulumi.ResourceOption) (*Site, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressLine == nil {
		return nil, errors.New("invalid value for required argument 'AddressLine'")
	}
	if args.City == nil {
		return nil, errors.New("invalid value for required argument 'City'")
	}
	if args.Country == nil {
		return nil, errors.New("invalid value for required argument 'Country'")
	}
	if args.Province == nil {
		return nil, errors.New("invalid value for required argument 'Province'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Site
	err := ctx.RegisterResource("tencentcloud:Cdc/site:Site", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSite gets an existing Site resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteState, opts ...pulumi.ResourceOption) (*Site, error) {
	var resource Site
	err := ctx.ReadResource("tencentcloud:Cdc/site:Site", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Site resources.
type siteState struct {
	// Site Detail Address.
	AddressLine *string `pulumi:"addressLine"`
	// Whether there is an upstream circuit breaker.
	BreakerRequirement *bool `pulumi:"breakerRequirement"`
	// Site City.
	City *string `pulumi:"city"`
	// Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
	ConditionRequirement *bool `pulumi:"conditionRequirement"`
	// Site Country.
	Country *string `pulumi:"country"`
	// Site Description.
	Description *string `pulumi:"description"`
	// Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
	DimensionRequirement *bool `pulumi:"dimensionRequirement"`
	// Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
	FiberType *string `pulumi:"fiberType"`
	// Site Max Weight capacity (KG).
	MaxWeight *int `pulumi:"maxWeight"`
	// Site Name.
	Name *string `pulumi:"name"`
	// Whether you need help from Tencent Cloud for rack installation.
	NeedHelp *bool `pulumi:"needHelp"`
	// Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
	OpticalStandard *string `pulumi:"opticalStandard"`
	// Detailed address of the site area (to be added).
	OptionalAddressLine *string `pulumi:"optionalAddressLine"`
	// Site Power Connectors. Example: 380VAC3P.
	PowerConnectors *string `pulumi:"powerConnectors"`
	// Site Power DrawKva (KW).
	PowerDrawKva *int `pulumi:"powerDrawKva"`
	// Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
	PowerFeedDrop *string `pulumi:"powerFeedDrop"`
	// Site Province.
	Province *string `pulumi:"province"`
	// Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
	RedundantNetworking *bool `pulumi:"redundantNetworking"`
	// Whether there is power redundancy.
	RedundantPower *bool `pulumi:"redundantPower"`
	// Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
	UplinkCount *int `pulumi:"uplinkCount"`
	// Uplink speed from the network to Tencent Cloud Region.
	UplinkSpeedGbps *int `pulumi:"uplinkSpeedGbps"`
}

type SiteState struct {
	// Site Detail Address.
	AddressLine pulumi.StringPtrInput
	// Whether there is an upstream circuit breaker.
	BreakerRequirement pulumi.BoolPtrInput
	// Site City.
	City pulumi.StringPtrInput
	// Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
	ConditionRequirement pulumi.BoolPtrInput
	// Site Country.
	Country pulumi.StringPtrInput
	// Site Description.
	Description pulumi.StringPtrInput
	// Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
	DimensionRequirement pulumi.BoolPtrInput
	// Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
	FiberType pulumi.StringPtrInput
	// Site Max Weight capacity (KG).
	MaxWeight pulumi.IntPtrInput
	// Site Name.
	Name pulumi.StringPtrInput
	// Whether you need help from Tencent Cloud for rack installation.
	NeedHelp pulumi.BoolPtrInput
	// Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
	OpticalStandard pulumi.StringPtrInput
	// Detailed address of the site area (to be added).
	OptionalAddressLine pulumi.StringPtrInput
	// Site Power Connectors. Example: 380VAC3P.
	PowerConnectors pulumi.StringPtrInput
	// Site Power DrawKva (KW).
	PowerDrawKva pulumi.IntPtrInput
	// Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
	PowerFeedDrop pulumi.StringPtrInput
	// Site Province.
	Province pulumi.StringPtrInput
	// Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
	RedundantNetworking pulumi.BoolPtrInput
	// Whether there is power redundancy.
	RedundantPower pulumi.BoolPtrInput
	// Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
	UplinkCount pulumi.IntPtrInput
	// Uplink speed from the network to Tencent Cloud Region.
	UplinkSpeedGbps pulumi.IntPtrInput
}

func (SiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteState)(nil)).Elem()
}

type siteArgs struct {
	// Site Detail Address.
	AddressLine string `pulumi:"addressLine"`
	// Whether there is an upstream circuit breaker.
	BreakerRequirement *bool `pulumi:"breakerRequirement"`
	// Site City.
	City string `pulumi:"city"`
	// Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
	ConditionRequirement *bool `pulumi:"conditionRequirement"`
	// Site Country.
	Country string `pulumi:"country"`
	// Site Description.
	Description *string `pulumi:"description"`
	// Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
	DimensionRequirement *bool `pulumi:"dimensionRequirement"`
	// Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
	FiberType *string `pulumi:"fiberType"`
	// Site Max Weight capacity (KG).
	MaxWeight *int `pulumi:"maxWeight"`
	// Site Name.
	Name *string `pulumi:"name"`
	// Whether you need help from Tencent Cloud for rack installation.
	NeedHelp *bool `pulumi:"needHelp"`
	// Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
	OpticalStandard *string `pulumi:"opticalStandard"`
	// Detailed address of the site area (to be added).
	OptionalAddressLine *string `pulumi:"optionalAddressLine"`
	// Site Power Connectors. Example: 380VAC3P.
	PowerConnectors *string `pulumi:"powerConnectors"`
	// Site Power DrawKva (KW).
	PowerDrawKva *int `pulumi:"powerDrawKva"`
	// Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
	PowerFeedDrop *string `pulumi:"powerFeedDrop"`
	// Site Province.
	Province string `pulumi:"province"`
	// Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
	RedundantNetworking *bool `pulumi:"redundantNetworking"`
	// Whether there is power redundancy.
	RedundantPower *bool `pulumi:"redundantPower"`
	// Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
	UplinkCount *int `pulumi:"uplinkCount"`
	// Uplink speed from the network to Tencent Cloud Region.
	UplinkSpeedGbps *int `pulumi:"uplinkSpeedGbps"`
}

// The set of arguments for constructing a Site resource.
type SiteArgs struct {
	// Site Detail Address.
	AddressLine pulumi.StringInput
	// Whether there is an upstream circuit breaker.
	BreakerRequirement pulumi.BoolPtrInput
	// Site City.
	City pulumi.StringInput
	// Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
	ConditionRequirement pulumi.BoolPtrInput
	// Site Country.
	Country pulumi.StringInput
	// Site Description.
	Description pulumi.StringPtrInput
	// Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
	DimensionRequirement pulumi.BoolPtrInput
	// Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
	FiberType pulumi.StringPtrInput
	// Site Max Weight capacity (KG).
	MaxWeight pulumi.IntPtrInput
	// Site Name.
	Name pulumi.StringPtrInput
	// Whether you need help from Tencent Cloud for rack installation.
	NeedHelp pulumi.BoolPtrInput
	// Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
	OpticalStandard pulumi.StringPtrInput
	// Detailed address of the site area (to be added).
	OptionalAddressLine pulumi.StringPtrInput
	// Site Power Connectors. Example: 380VAC3P.
	PowerConnectors pulumi.StringPtrInput
	// Site Power DrawKva (KW).
	PowerDrawKva pulumi.IntPtrInput
	// Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
	PowerFeedDrop pulumi.StringPtrInput
	// Site Province.
	Province pulumi.StringInput
	// Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
	RedundantNetworking pulumi.BoolPtrInput
	// Whether there is power redundancy.
	RedundantPower pulumi.BoolPtrInput
	// Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
	UplinkCount pulumi.IntPtrInput
	// Uplink speed from the network to Tencent Cloud Region.
	UplinkSpeedGbps pulumi.IntPtrInput
}

func (SiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteArgs)(nil)).Elem()
}

type SiteInput interface {
	pulumi.Input

	ToSiteOutput() SiteOutput
	ToSiteOutputWithContext(ctx context.Context) SiteOutput
}

func (*Site) ElementType() reflect.Type {
	return reflect.TypeOf((**Site)(nil)).Elem()
}

func (i *Site) ToSiteOutput() SiteOutput {
	return i.ToSiteOutputWithContext(context.Background())
}

func (i *Site) ToSiteOutputWithContext(ctx context.Context) SiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteOutput)
}

// SiteArrayInput is an input type that accepts SiteArray and SiteArrayOutput values.
// You can construct a concrete instance of `SiteArrayInput` via:
//
//	SiteArray{ SiteArgs{...} }
type SiteArrayInput interface {
	pulumi.Input

	ToSiteArrayOutput() SiteArrayOutput
	ToSiteArrayOutputWithContext(context.Context) SiteArrayOutput
}

type SiteArray []SiteInput

func (SiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Site)(nil)).Elem()
}

func (i SiteArray) ToSiteArrayOutput() SiteArrayOutput {
	return i.ToSiteArrayOutputWithContext(context.Background())
}

func (i SiteArray) ToSiteArrayOutputWithContext(ctx context.Context) SiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteArrayOutput)
}

// SiteMapInput is an input type that accepts SiteMap and SiteMapOutput values.
// You can construct a concrete instance of `SiteMapInput` via:
//
//	SiteMap{ "key": SiteArgs{...} }
type SiteMapInput interface {
	pulumi.Input

	ToSiteMapOutput() SiteMapOutput
	ToSiteMapOutputWithContext(context.Context) SiteMapOutput
}

type SiteMap map[string]SiteInput

func (SiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Site)(nil)).Elem()
}

func (i SiteMap) ToSiteMapOutput() SiteMapOutput {
	return i.ToSiteMapOutputWithContext(context.Background())
}

func (i SiteMap) ToSiteMapOutputWithContext(ctx context.Context) SiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteMapOutput)
}

type SiteOutput struct{ *pulumi.OutputState }

func (SiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Site)(nil)).Elem()
}

func (o SiteOutput) ToSiteOutput() SiteOutput {
	return o
}

func (o SiteOutput) ToSiteOutputWithContext(ctx context.Context) SiteOutput {
	return o
}

// Site Detail Address.
func (o SiteOutput) AddressLine() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.AddressLine }).(pulumi.StringOutput)
}

// Whether there is an upstream circuit breaker.
func (o SiteOutput) BreakerRequirement() pulumi.BoolOutput {
	return o.ApplyT(func(v *Site) pulumi.BoolOutput { return v.BreakerRequirement }).(pulumi.BoolOutput)
}

// Site City.
func (o SiteOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.City }).(pulumi.StringOutput)
}

// Whether the following environmental conditions are met: n1. There are no material requirements or the acceptance standard on site that will affect the delivery and installation of the CDC device. n2. The following conditions are met for finalized rack positions: Temperature ranges from 41 to 104 degrees F (5 to 40 degrees C). Humidity ranges from 10 degrees F (-12 degrees C) to 70 degrees F (21 degrees C) and relative humidity ranges from 8% RH to 80% RH. Air flows from front to back at the rack position and there is sufficient air in CFM (cubic feet per minute). The air quantity in CFM must be 145.8 times the power consumption (in KVA) of CDC.
func (o SiteOutput) ConditionRequirement() pulumi.BoolOutput {
	return o.ApplyT(func(v *Site) pulumi.BoolOutput { return v.ConditionRequirement }).(pulumi.BoolOutput)
}

// Site Country.
func (o SiteOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.Country }).(pulumi.StringOutput)
}

// Site Description.
func (o SiteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the following dimension conditions are met: Your loading dock can accommodate one rack container (H x W x D = 94 x 54 x 48). You can provide a clear route from the delivery point of your rack (H x W x D = 80 x 24 x 48) to its final installation location. You should consider platforms, corridors, doors, turns, ramps, freight elevators as well as other access restrictions when measuring the depth. There shall be a 48 or greater front clearance and a 24 or greater rear clearance where the CDC is finally installed.
func (o SiteOutput) DimensionRequirement() pulumi.BoolOutput {
	return o.ApplyT(func(v *Site) pulumi.BoolOutput { return v.DimensionRequirement }).(pulumi.BoolOutput)
}

// Site Fiber Type. Using optical fiber type to connect the CDC device to the network SM(Single-Mode) or MM(Multi-Mode) fibers are available.
func (o SiteOutput) FiberType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.FiberType }).(pulumi.StringPtrOutput)
}

// Site Max Weight capacity (KG).
func (o SiteOutput) MaxWeight() pulumi.IntOutput {
	return o.ApplyT(func(v *Site) pulumi.IntOutput { return v.MaxWeight }).(pulumi.IntOutput)
}

// Site Name.
func (o SiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether you need help from Tencent Cloud for rack installation.
func (o SiteOutput) NeedHelp() pulumi.BoolOutput {
	return o.ApplyT(func(v *Site) pulumi.BoolOutput { return v.NeedHelp }).(pulumi.BoolOutput)
}

// Site Optical Standard. Optical standard used to connect the CDC device to the network This field depends on the uplink speed, optical fiber type, and distance to upstream equipment. Allow value: `SM`, `MM`.
func (o SiteOutput) OpticalStandard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.OpticalStandard }).(pulumi.StringPtrOutput)
}

// Detailed address of the site area (to be added).
func (o SiteOutput) OptionalAddressLine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.OptionalAddressLine }).(pulumi.StringPtrOutput)
}

// Site Power Connectors. Example: 380VAC3P.
func (o SiteOutput) PowerConnectors() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.PowerConnectors }).(pulumi.StringPtrOutput)
}

// Site Power DrawKva (KW).
func (o SiteOutput) PowerDrawKva() pulumi.IntOutput {
	return o.ApplyT(func(v *Site) pulumi.IntOutput { return v.PowerDrawKva }).(pulumi.IntOutput)
}

// Site Power Feed Drop. Whether power is supplied from above or below the rack. Allow value: `UP`, `DOWN`.
func (o SiteOutput) PowerFeedDrop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.PowerFeedDrop }).(pulumi.StringPtrOutput)
}

// Site Province.
func (o SiteOutput) Province() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.Province }).(pulumi.StringOutput)
}

// Whether redundant upstream equipment (switch or router) is provided so that both network devices can be connected to the network.
func (o SiteOutput) RedundantNetworking() pulumi.BoolOutput {
	return o.ApplyT(func(v *Site) pulumi.BoolOutput { return v.RedundantNetworking }).(pulumi.BoolOutput)
}

// Whether there is power redundancy.
func (o SiteOutput) RedundantPower() pulumi.BoolOutput {
	return o.ApplyT(func(v *Site) pulumi.BoolOutput { return v.RedundantPower }).(pulumi.BoolOutput)
}

// Number of uplinks used by each CDC device (2 devices per rack) when connected to the network.
func (o SiteOutput) UplinkCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Site) pulumi.IntOutput { return v.UplinkCount }).(pulumi.IntOutput)
}

// Uplink speed from the network to Tencent Cloud Region.
func (o SiteOutput) UplinkSpeedGbps() pulumi.IntOutput {
	return o.ApplyT(func(v *Site) pulumi.IntOutput { return v.UplinkSpeedGbps }).(pulumi.IntOutput)
}

type SiteArrayOutput struct{ *pulumi.OutputState }

func (SiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Site)(nil)).Elem()
}

func (o SiteArrayOutput) ToSiteArrayOutput() SiteArrayOutput {
	return o
}

func (o SiteArrayOutput) ToSiteArrayOutputWithContext(ctx context.Context) SiteArrayOutput {
	return o
}

func (o SiteArrayOutput) Index(i pulumi.IntInput) SiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Site {
		return vs[0].([]*Site)[vs[1].(int)]
	}).(SiteOutput)
}

type SiteMapOutput struct{ *pulumi.OutputState }

func (SiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Site)(nil)).Elem()
}

func (o SiteMapOutput) ToSiteMapOutput() SiteMapOutput {
	return o
}

func (o SiteMapOutput) ToSiteMapOutputWithContext(ctx context.Context) SiteMapOutput {
	return o
}

func (o SiteMapOutput) MapIndex(k pulumi.StringInput) SiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Site {
		return vs[0].(map[string]*Site)[vs[1].(string)]
	}).(SiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SiteInput)(nil)).Elem(), &Site{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteArrayInput)(nil)).Elem(), SiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteMapInput)(nil)).Elem(), SiteMap{})
	pulumi.RegisterOutputType(SiteOutput{})
	pulumi.RegisterOutputType(SiteArrayOutput{})
	pulumi.RegisterOutputType(SiteMapOutput{})
}
