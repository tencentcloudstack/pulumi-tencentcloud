// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a CDC dedicated cluster
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cdc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create cdc site
//			exampleSite, err := Cdc.NewSite(ctx, "exampleSite", &Cdc.SiteArgs{
//				Country:     pulumi.String("China"),
//				Province:    pulumi.String("Guangdong Province"),
//				City:        pulumi.String("Guangzhou"),
//				AddressLine: pulumi.String("Tencent Building"),
//				Description: pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			// create cdc dedicated cluster
//			_, err = Cdc.NewDedicatedCluster(ctx, "exampleDedicatedCluster", &Cdc.DedicatedClusterArgs{
//				SiteId:      exampleSite.ID(),
//				Zone:        pulumi.String("ap-guangzhou-6"),
//				Description: pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// CDC dedicated cluster can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Cdc/dedicatedCluster:DedicatedCluster example cluster-d574omhk
// ```
type DedicatedCluster struct {
	pulumi.CustomResourceState

	// Dedicated Cluster Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Dedicated Cluster Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Dedicated Cluster Site ID.
	SiteId pulumi.StringOutput `pulumi:"siteId"`
	// Dedicated Cluster Zone.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDedicatedCluster registers a new resource with the given unique name, arguments, and options.
func NewDedicatedCluster(ctx *pulumi.Context,
	name string, args *DedicatedClusterArgs, opts ...pulumi.ResourceOption) (*DedicatedCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DedicatedCluster
	err := ctx.RegisterResource("tencentcloud:Cdc/dedicatedCluster:DedicatedCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedCluster gets an existing DedicatedCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedClusterState, opts ...pulumi.ResourceOption) (*DedicatedCluster, error) {
	var resource DedicatedCluster
	err := ctx.ReadResource("tencentcloud:Cdc/dedicatedCluster:DedicatedCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedCluster resources.
type dedicatedClusterState struct {
	// Dedicated Cluster Description.
	Description *string `pulumi:"description"`
	// Dedicated Cluster Name.
	Name *string `pulumi:"name"`
	// Dedicated Cluster Site ID.
	SiteId *string `pulumi:"siteId"`
	// Dedicated Cluster Zone.
	Zone *string `pulumi:"zone"`
}

type DedicatedClusterState struct {
	// Dedicated Cluster Description.
	Description pulumi.StringPtrInput
	// Dedicated Cluster Name.
	Name pulumi.StringPtrInput
	// Dedicated Cluster Site ID.
	SiteId pulumi.StringPtrInput
	// Dedicated Cluster Zone.
	Zone pulumi.StringPtrInput
}

func (DedicatedClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedClusterState)(nil)).Elem()
}

type dedicatedClusterArgs struct {
	// Dedicated Cluster Description.
	Description *string `pulumi:"description"`
	// Dedicated Cluster Name.
	Name *string `pulumi:"name"`
	// Dedicated Cluster Site ID.
	SiteId string `pulumi:"siteId"`
	// Dedicated Cluster Zone.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a DedicatedCluster resource.
type DedicatedClusterArgs struct {
	// Dedicated Cluster Description.
	Description pulumi.StringPtrInput
	// Dedicated Cluster Name.
	Name pulumi.StringPtrInput
	// Dedicated Cluster Site ID.
	SiteId pulumi.StringInput
	// Dedicated Cluster Zone.
	Zone pulumi.StringInput
}

func (DedicatedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedClusterArgs)(nil)).Elem()
}

type DedicatedClusterInput interface {
	pulumi.Input

	ToDedicatedClusterOutput() DedicatedClusterOutput
	ToDedicatedClusterOutputWithContext(ctx context.Context) DedicatedClusterOutput
}

func (*DedicatedCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedCluster)(nil)).Elem()
}

func (i *DedicatedCluster) ToDedicatedClusterOutput() DedicatedClusterOutput {
	return i.ToDedicatedClusterOutputWithContext(context.Background())
}

func (i *DedicatedCluster) ToDedicatedClusterOutputWithContext(ctx context.Context) DedicatedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedClusterOutput)
}

// DedicatedClusterArrayInput is an input type that accepts DedicatedClusterArray and DedicatedClusterArrayOutput values.
// You can construct a concrete instance of `DedicatedClusterArrayInput` via:
//
//	DedicatedClusterArray{ DedicatedClusterArgs{...} }
type DedicatedClusterArrayInput interface {
	pulumi.Input

	ToDedicatedClusterArrayOutput() DedicatedClusterArrayOutput
	ToDedicatedClusterArrayOutputWithContext(context.Context) DedicatedClusterArrayOutput
}

type DedicatedClusterArray []DedicatedClusterInput

func (DedicatedClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedCluster)(nil)).Elem()
}

func (i DedicatedClusterArray) ToDedicatedClusterArrayOutput() DedicatedClusterArrayOutput {
	return i.ToDedicatedClusterArrayOutputWithContext(context.Background())
}

func (i DedicatedClusterArray) ToDedicatedClusterArrayOutputWithContext(ctx context.Context) DedicatedClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedClusterArrayOutput)
}

// DedicatedClusterMapInput is an input type that accepts DedicatedClusterMap and DedicatedClusterMapOutput values.
// You can construct a concrete instance of `DedicatedClusterMapInput` via:
//
//	DedicatedClusterMap{ "key": DedicatedClusterArgs{...} }
type DedicatedClusterMapInput interface {
	pulumi.Input

	ToDedicatedClusterMapOutput() DedicatedClusterMapOutput
	ToDedicatedClusterMapOutputWithContext(context.Context) DedicatedClusterMapOutput
}

type DedicatedClusterMap map[string]DedicatedClusterInput

func (DedicatedClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedCluster)(nil)).Elem()
}

func (i DedicatedClusterMap) ToDedicatedClusterMapOutput() DedicatedClusterMapOutput {
	return i.ToDedicatedClusterMapOutputWithContext(context.Background())
}

func (i DedicatedClusterMap) ToDedicatedClusterMapOutputWithContext(ctx context.Context) DedicatedClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedClusterMapOutput)
}

type DedicatedClusterOutput struct{ *pulumi.OutputState }

func (DedicatedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedCluster)(nil)).Elem()
}

func (o DedicatedClusterOutput) ToDedicatedClusterOutput() DedicatedClusterOutput {
	return o
}

func (o DedicatedClusterOutput) ToDedicatedClusterOutputWithContext(ctx context.Context) DedicatedClusterOutput {
	return o
}

// Dedicated Cluster Description.
func (o DedicatedClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DedicatedCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Dedicated Cluster Name.
func (o DedicatedClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Dedicated Cluster Site ID.
func (o DedicatedClusterOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedCluster) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

// Dedicated Cluster Zone.
func (o DedicatedClusterOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedCluster) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type DedicatedClusterArrayOutput struct{ *pulumi.OutputState }

func (DedicatedClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedCluster)(nil)).Elem()
}

func (o DedicatedClusterArrayOutput) ToDedicatedClusterArrayOutput() DedicatedClusterArrayOutput {
	return o
}

func (o DedicatedClusterArrayOutput) ToDedicatedClusterArrayOutputWithContext(ctx context.Context) DedicatedClusterArrayOutput {
	return o
}

func (o DedicatedClusterArrayOutput) Index(i pulumi.IntInput) DedicatedClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DedicatedCluster {
		return vs[0].([]*DedicatedCluster)[vs[1].(int)]
	}).(DedicatedClusterOutput)
}

type DedicatedClusterMapOutput struct{ *pulumi.OutputState }

func (DedicatedClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedCluster)(nil)).Elem()
}

func (o DedicatedClusterMapOutput) ToDedicatedClusterMapOutput() DedicatedClusterMapOutput {
	return o
}

func (o DedicatedClusterMapOutput) ToDedicatedClusterMapOutputWithContext(ctx context.Context) DedicatedClusterMapOutput {
	return o
}

func (o DedicatedClusterMapOutput) MapIndex(k pulumi.StringInput) DedicatedClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DedicatedCluster {
		return vs[0].(map[string]*DedicatedCluster)[vs[1].(string)]
	}).(DedicatedClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedClusterInput)(nil)).Elem(), &DedicatedCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedClusterArrayInput)(nil)).Elem(), DedicatedClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedClusterMapInput)(nil)).Elem(), DedicatedClusterMap{})
	pulumi.RegisterOutputType(DedicatedClusterOutput{})
	pulumi.RegisterOutputType(DedicatedClusterArrayOutput{})
	pulumi.RegisterOutputType(DedicatedClusterMapOutput{})
}
