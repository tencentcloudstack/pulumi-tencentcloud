// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnspod

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dnspod recordGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dnspod.NewRecordGroup(ctx, "recordGroup", &Dnspod.RecordGroupArgs{
//				Domain:    pulumi.String("dnspod.cn"),
//				GroupName: pulumi.String("group_demo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dnspod record_group can be imported using the domain#groupId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dnspod/recordGroup:RecordGroup record_group domain#groupId
//
// ```
type RecordGroup struct {
	pulumi.CustomResourceState

	// Domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Group ID.
	GroupId pulumi.IntOutput `pulumi:"groupId"`
	// Record Group Name.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
}

// NewRecordGroup registers a new resource with the given unique name, arguments, and options.
func NewRecordGroup(ctx *pulumi.Context,
	name string, args *RecordGroupArgs, opts ...pulumi.ResourceOption) (*RecordGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RecordGroup
	err := ctx.RegisterResource("tencentcloud:Dnspod/recordGroup:RecordGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecordGroup gets an existing RecordGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecordGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordGroupState, opts ...pulumi.ResourceOption) (*RecordGroup, error) {
	var resource RecordGroup
	err := ctx.ReadResource("tencentcloud:Dnspod/recordGroup:RecordGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecordGroup resources.
type recordGroupState struct {
	// Domain.
	Domain *string `pulumi:"domain"`
	// Group ID.
	GroupId *int `pulumi:"groupId"`
	// Record Group Name.
	GroupName *string `pulumi:"groupName"`
}

type RecordGroupState struct {
	// Domain.
	Domain pulumi.StringPtrInput
	// Group ID.
	GroupId pulumi.IntPtrInput
	// Record Group Name.
	GroupName pulumi.StringPtrInput
}

func (RecordGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordGroupState)(nil)).Elem()
}

type recordGroupArgs struct {
	// Domain.
	Domain string `pulumi:"domain"`
	// Record Group Name.
	GroupName string `pulumi:"groupName"`
}

// The set of arguments for constructing a RecordGroup resource.
type RecordGroupArgs struct {
	// Domain.
	Domain pulumi.StringInput
	// Record Group Name.
	GroupName pulumi.StringInput
}

func (RecordGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordGroupArgs)(nil)).Elem()
}

type RecordGroupInput interface {
	pulumi.Input

	ToRecordGroupOutput() RecordGroupOutput
	ToRecordGroupOutputWithContext(ctx context.Context) RecordGroupOutput
}

func (*RecordGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordGroup)(nil)).Elem()
}

func (i *RecordGroup) ToRecordGroupOutput() RecordGroupOutput {
	return i.ToRecordGroupOutputWithContext(context.Background())
}

func (i *RecordGroup) ToRecordGroupOutputWithContext(ctx context.Context) RecordGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGroupOutput)
}

// RecordGroupArrayInput is an input type that accepts RecordGroupArray and RecordGroupArrayOutput values.
// You can construct a concrete instance of `RecordGroupArrayInput` via:
//
//	RecordGroupArray{ RecordGroupArgs{...} }
type RecordGroupArrayInput interface {
	pulumi.Input

	ToRecordGroupArrayOutput() RecordGroupArrayOutput
	ToRecordGroupArrayOutputWithContext(context.Context) RecordGroupArrayOutput
}

type RecordGroupArray []RecordGroupInput

func (RecordGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordGroup)(nil)).Elem()
}

func (i RecordGroupArray) ToRecordGroupArrayOutput() RecordGroupArrayOutput {
	return i.ToRecordGroupArrayOutputWithContext(context.Background())
}

func (i RecordGroupArray) ToRecordGroupArrayOutputWithContext(ctx context.Context) RecordGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGroupArrayOutput)
}

// RecordGroupMapInput is an input type that accepts RecordGroupMap and RecordGroupMapOutput values.
// You can construct a concrete instance of `RecordGroupMapInput` via:
//
//	RecordGroupMap{ "key": RecordGroupArgs{...} }
type RecordGroupMapInput interface {
	pulumi.Input

	ToRecordGroupMapOutput() RecordGroupMapOutput
	ToRecordGroupMapOutputWithContext(context.Context) RecordGroupMapOutput
}

type RecordGroupMap map[string]RecordGroupInput

func (RecordGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordGroup)(nil)).Elem()
}

func (i RecordGroupMap) ToRecordGroupMapOutput() RecordGroupMapOutput {
	return i.ToRecordGroupMapOutputWithContext(context.Background())
}

func (i RecordGroupMap) ToRecordGroupMapOutputWithContext(ctx context.Context) RecordGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordGroupMapOutput)
}

type RecordGroupOutput struct{ *pulumi.OutputState }

func (RecordGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordGroup)(nil)).Elem()
}

func (o RecordGroupOutput) ToRecordGroupOutput() RecordGroupOutput {
	return o
}

func (o RecordGroupOutput) ToRecordGroupOutputWithContext(ctx context.Context) RecordGroupOutput {
	return o
}

// Domain.
func (o RecordGroupOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordGroup) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Group ID.
func (o RecordGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *RecordGroup) pulumi.IntOutput { return v.GroupId }).(pulumi.IntOutput)
}

// Record Group Name.
func (o RecordGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordGroup) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

type RecordGroupArrayOutput struct{ *pulumi.OutputState }

func (RecordGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordGroup)(nil)).Elem()
}

func (o RecordGroupArrayOutput) ToRecordGroupArrayOutput() RecordGroupArrayOutput {
	return o
}

func (o RecordGroupArrayOutput) ToRecordGroupArrayOutputWithContext(ctx context.Context) RecordGroupArrayOutput {
	return o
}

func (o RecordGroupArrayOutput) Index(i pulumi.IntInput) RecordGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecordGroup {
		return vs[0].([]*RecordGroup)[vs[1].(int)]
	}).(RecordGroupOutput)
}

type RecordGroupMapOutput struct{ *pulumi.OutputState }

func (RecordGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordGroup)(nil)).Elem()
}

func (o RecordGroupMapOutput) ToRecordGroupMapOutput() RecordGroupMapOutput {
	return o
}

func (o RecordGroupMapOutput) ToRecordGroupMapOutputWithContext(ctx context.Context) RecordGroupMapOutput {
	return o
}

func (o RecordGroupMapOutput) MapIndex(k pulumi.StringInput) RecordGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecordGroup {
		return vs[0].(map[string]*RecordGroup)[vs[1].(string)]
	}).(RecordGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGroupInput)(nil)).Elem(), &RecordGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGroupArrayInput)(nil)).Elem(), RecordGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordGroupMapInput)(nil)).Elem(), RecordGroupMap{})
	pulumi.RegisterOutputType(RecordGroupOutput{})
	pulumi.RegisterOutputType(RecordGroupArrayOutput{})
	pulumi.RegisterOutputType(RecordGroupMapOutput{})
}
