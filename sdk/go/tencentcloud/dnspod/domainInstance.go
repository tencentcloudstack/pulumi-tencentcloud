// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnspod

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to create a DnsPod Domain instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dnspod.NewDomainInstance(ctx, "foo", &Dnspod.DomainInstanceArgs{
//				Domain: pulumi.String("hello.com"),
//				Remark: pulumi.String("this is demo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DnsPod Domain instance can be imported, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dnspod/domainInstance:DomainInstance foo domain
//
// ```
type DomainInstance struct {
	pulumi.CustomResourceState

	// Create time of the domain.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The Domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The Group Id of Domain.
	GroupId pulumi.IntPtrOutput `pulumi:"groupId"`
	// Whether to Mark the Domain.
	IsMark pulumi.StringOutput `pulumi:"isMark"`
	// The remark of Domain.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Is secondary DNS enabled.
	SlaveDns pulumi.StringOutput `pulumi:"slaveDns"`
	// The status of Domain.
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewDomainInstance registers a new resource with the given unique name, arguments, and options.
func NewDomainInstance(ctx *pulumi.Context,
	name string, args *DomainInstanceArgs, opts ...pulumi.ResourceOption) (*DomainInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DomainInstance
	err := ctx.RegisterResource("tencentcloud:Dnspod/domainInstance:DomainInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainInstance gets an existing DomainInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainInstanceState, opts ...pulumi.ResourceOption) (*DomainInstance, error) {
	var resource DomainInstance
	err := ctx.ReadResource("tencentcloud:Dnspod/domainInstance:DomainInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainInstance resources.
type domainInstanceState struct {
	// Create time of the domain.
	CreateTime *string `pulumi:"createTime"`
	// The Domain.
	Domain *string `pulumi:"domain"`
	// The Group Id of Domain.
	GroupId *int `pulumi:"groupId"`
	// Whether to Mark the Domain.
	IsMark *string `pulumi:"isMark"`
	// The remark of Domain.
	Remark *string `pulumi:"remark"`
	// Is secondary DNS enabled.
	SlaveDns *string `pulumi:"slaveDns"`
	// The status of Domain.
	Status *string `pulumi:"status"`
}

type DomainInstanceState struct {
	// Create time of the domain.
	CreateTime pulumi.StringPtrInput
	// The Domain.
	Domain pulumi.StringPtrInput
	// The Group Id of Domain.
	GroupId pulumi.IntPtrInput
	// Whether to Mark the Domain.
	IsMark pulumi.StringPtrInput
	// The remark of Domain.
	Remark pulumi.StringPtrInput
	// Is secondary DNS enabled.
	SlaveDns pulumi.StringPtrInput
	// The status of Domain.
	Status pulumi.StringPtrInput
}

func (DomainInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainInstanceState)(nil)).Elem()
}

type domainInstanceArgs struct {
	// The Domain.
	Domain string `pulumi:"domain"`
	// The Group Id of Domain.
	GroupId *int `pulumi:"groupId"`
	// Whether to Mark the Domain.
	IsMark *string `pulumi:"isMark"`
	// The remark of Domain.
	Remark *string `pulumi:"remark"`
	// The status of Domain.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a DomainInstance resource.
type DomainInstanceArgs struct {
	// The Domain.
	Domain pulumi.StringInput
	// The Group Id of Domain.
	GroupId pulumi.IntPtrInput
	// Whether to Mark the Domain.
	IsMark pulumi.StringPtrInput
	// The remark of Domain.
	Remark pulumi.StringPtrInput
	// The status of Domain.
	Status pulumi.StringPtrInput
}

func (DomainInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainInstanceArgs)(nil)).Elem()
}

type DomainInstanceInput interface {
	pulumi.Input

	ToDomainInstanceOutput() DomainInstanceOutput
	ToDomainInstanceOutputWithContext(ctx context.Context) DomainInstanceOutput
}

func (*DomainInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInstance)(nil)).Elem()
}

func (i *DomainInstance) ToDomainInstanceOutput() DomainInstanceOutput {
	return i.ToDomainInstanceOutputWithContext(context.Background())
}

func (i *DomainInstance) ToDomainInstanceOutputWithContext(ctx context.Context) DomainInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInstanceOutput)
}

// DomainInstanceArrayInput is an input type that accepts DomainInstanceArray and DomainInstanceArrayOutput values.
// You can construct a concrete instance of `DomainInstanceArrayInput` via:
//
//	DomainInstanceArray{ DomainInstanceArgs{...} }
type DomainInstanceArrayInput interface {
	pulumi.Input

	ToDomainInstanceArrayOutput() DomainInstanceArrayOutput
	ToDomainInstanceArrayOutputWithContext(context.Context) DomainInstanceArrayOutput
}

type DomainInstanceArray []DomainInstanceInput

func (DomainInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainInstance)(nil)).Elem()
}

func (i DomainInstanceArray) ToDomainInstanceArrayOutput() DomainInstanceArrayOutput {
	return i.ToDomainInstanceArrayOutputWithContext(context.Background())
}

func (i DomainInstanceArray) ToDomainInstanceArrayOutputWithContext(ctx context.Context) DomainInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInstanceArrayOutput)
}

// DomainInstanceMapInput is an input type that accepts DomainInstanceMap and DomainInstanceMapOutput values.
// You can construct a concrete instance of `DomainInstanceMapInput` via:
//
//	DomainInstanceMap{ "key": DomainInstanceArgs{...} }
type DomainInstanceMapInput interface {
	pulumi.Input

	ToDomainInstanceMapOutput() DomainInstanceMapOutput
	ToDomainInstanceMapOutputWithContext(context.Context) DomainInstanceMapOutput
}

type DomainInstanceMap map[string]DomainInstanceInput

func (DomainInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainInstance)(nil)).Elem()
}

func (i DomainInstanceMap) ToDomainInstanceMapOutput() DomainInstanceMapOutput {
	return i.ToDomainInstanceMapOutputWithContext(context.Background())
}

func (i DomainInstanceMap) ToDomainInstanceMapOutputWithContext(ctx context.Context) DomainInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInstanceMapOutput)
}

type DomainInstanceOutput struct{ *pulumi.OutputState }

func (DomainInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInstance)(nil)).Elem()
}

func (o DomainInstanceOutput) ToDomainInstanceOutput() DomainInstanceOutput {
	return o
}

func (o DomainInstanceOutput) ToDomainInstanceOutputWithContext(ctx context.Context) DomainInstanceOutput {
	return o
}

// Create time of the domain.
func (o DomainInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainInstance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The Domain.
func (o DomainInstanceOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainInstance) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The Group Id of Domain.
func (o DomainInstanceOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainInstance) pulumi.IntPtrOutput { return v.GroupId }).(pulumi.IntPtrOutput)
}

// Whether to Mark the Domain.
func (o DomainInstanceOutput) IsMark() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainInstance) pulumi.StringOutput { return v.IsMark }).(pulumi.StringOutput)
}

// The remark of Domain.
func (o DomainInstanceOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInstance) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Is secondary DNS enabled.
func (o DomainInstanceOutput) SlaveDns() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainInstance) pulumi.StringOutput { return v.SlaveDns }).(pulumi.StringOutput)
}

// The status of Domain.
func (o DomainInstanceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInstance) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type DomainInstanceArrayOutput struct{ *pulumi.OutputState }

func (DomainInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainInstance)(nil)).Elem()
}

func (o DomainInstanceArrayOutput) ToDomainInstanceArrayOutput() DomainInstanceArrayOutput {
	return o
}

func (o DomainInstanceArrayOutput) ToDomainInstanceArrayOutputWithContext(ctx context.Context) DomainInstanceArrayOutput {
	return o
}

func (o DomainInstanceArrayOutput) Index(i pulumi.IntInput) DomainInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainInstance {
		return vs[0].([]*DomainInstance)[vs[1].(int)]
	}).(DomainInstanceOutput)
}

type DomainInstanceMapOutput struct{ *pulumi.OutputState }

func (DomainInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainInstance)(nil)).Elem()
}

func (o DomainInstanceMapOutput) ToDomainInstanceMapOutput() DomainInstanceMapOutput {
	return o
}

func (o DomainInstanceMapOutput) ToDomainInstanceMapOutputWithContext(ctx context.Context) DomainInstanceMapOutput {
	return o
}

func (o DomainInstanceMapOutput) MapIndex(k pulumi.StringInput) DomainInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainInstance {
		return vs[0].(map[string]*DomainInstance)[vs[1].(string)]
	}).(DomainInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInstanceInput)(nil)).Elem(), &DomainInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInstanceArrayInput)(nil)).Elem(), DomainInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInstanceMapInput)(nil)).Elem(), DomainInstanceMap{})
	pulumi.RegisterOutputType(DomainInstanceOutput{})
	pulumi.RegisterOutputType(DomainInstanceArrayOutput{})
	pulumi.RegisterOutputType(DomainInstanceMapOutput{})
}
