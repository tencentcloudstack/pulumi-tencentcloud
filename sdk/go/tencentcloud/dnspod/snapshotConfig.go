// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnspod

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dnspod snapshotConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dnspod.NewSnapshotConfig(ctx, "snapshotConfig", &Dnspod.SnapshotConfigArgs{
//				Domain: pulumi.String("dnspod.cn"),
//				Period: pulumi.String("hourly"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dnspod snapshot_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dnspod/snapshotConfig:SnapshotConfig snapshot_config domain
//
// ```
type SnapshotConfig struct {
	pulumi.CustomResourceState

	// Domain name.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Backup interval: empty string - no backup, halfHour - every half hour, hourly - every hour, daily - every day, monthly - every month.
	Period pulumi.StringOutput `pulumi:"period"`
}

// NewSnapshotConfig registers a new resource with the given unique name, arguments, and options.
func NewSnapshotConfig(ctx *pulumi.Context,
	name string, args *SnapshotConfigArgs, opts ...pulumi.ResourceOption) (*SnapshotConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Period == nil {
		return nil, errors.New("invalid value for required argument 'Period'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SnapshotConfig
	err := ctx.RegisterResource("tencentcloud:Dnspod/snapshotConfig:SnapshotConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotConfig gets an existing SnapshotConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotConfigState, opts ...pulumi.ResourceOption) (*SnapshotConfig, error) {
	var resource SnapshotConfig
	err := ctx.ReadResource("tencentcloud:Dnspod/snapshotConfig:SnapshotConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotConfig resources.
type snapshotConfigState struct {
	// Domain name.
	Domain *string `pulumi:"domain"`
	// Backup interval: empty string - no backup, halfHour - every half hour, hourly - every hour, daily - every day, monthly - every month.
	Period *string `pulumi:"period"`
}

type SnapshotConfigState struct {
	// Domain name.
	Domain pulumi.StringPtrInput
	// Backup interval: empty string - no backup, halfHour - every half hour, hourly - every hour, daily - every day, monthly - every month.
	Period pulumi.StringPtrInput
}

func (SnapshotConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotConfigState)(nil)).Elem()
}

type snapshotConfigArgs struct {
	// Domain name.
	Domain string `pulumi:"domain"`
	// Backup interval: empty string - no backup, halfHour - every half hour, hourly - every hour, daily - every day, monthly - every month.
	Period string `pulumi:"period"`
}

// The set of arguments for constructing a SnapshotConfig resource.
type SnapshotConfigArgs struct {
	// Domain name.
	Domain pulumi.StringInput
	// Backup interval: empty string - no backup, halfHour - every half hour, hourly - every hour, daily - every day, monthly - every month.
	Period pulumi.StringInput
}

func (SnapshotConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotConfigArgs)(nil)).Elem()
}

type SnapshotConfigInput interface {
	pulumi.Input

	ToSnapshotConfigOutput() SnapshotConfigOutput
	ToSnapshotConfigOutputWithContext(ctx context.Context) SnapshotConfigOutput
}

func (*SnapshotConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotConfig)(nil)).Elem()
}

func (i *SnapshotConfig) ToSnapshotConfigOutput() SnapshotConfigOutput {
	return i.ToSnapshotConfigOutputWithContext(context.Background())
}

func (i *SnapshotConfig) ToSnapshotConfigOutputWithContext(ctx context.Context) SnapshotConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotConfigOutput)
}

// SnapshotConfigArrayInput is an input type that accepts SnapshotConfigArray and SnapshotConfigArrayOutput values.
// You can construct a concrete instance of `SnapshotConfigArrayInput` via:
//
//	SnapshotConfigArray{ SnapshotConfigArgs{...} }
type SnapshotConfigArrayInput interface {
	pulumi.Input

	ToSnapshotConfigArrayOutput() SnapshotConfigArrayOutput
	ToSnapshotConfigArrayOutputWithContext(context.Context) SnapshotConfigArrayOutput
}

type SnapshotConfigArray []SnapshotConfigInput

func (SnapshotConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotConfig)(nil)).Elem()
}

func (i SnapshotConfigArray) ToSnapshotConfigArrayOutput() SnapshotConfigArrayOutput {
	return i.ToSnapshotConfigArrayOutputWithContext(context.Background())
}

func (i SnapshotConfigArray) ToSnapshotConfigArrayOutputWithContext(ctx context.Context) SnapshotConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotConfigArrayOutput)
}

// SnapshotConfigMapInput is an input type that accepts SnapshotConfigMap and SnapshotConfigMapOutput values.
// You can construct a concrete instance of `SnapshotConfigMapInput` via:
//
//	SnapshotConfigMap{ "key": SnapshotConfigArgs{...} }
type SnapshotConfigMapInput interface {
	pulumi.Input

	ToSnapshotConfigMapOutput() SnapshotConfigMapOutput
	ToSnapshotConfigMapOutputWithContext(context.Context) SnapshotConfigMapOutput
}

type SnapshotConfigMap map[string]SnapshotConfigInput

func (SnapshotConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotConfig)(nil)).Elem()
}

func (i SnapshotConfigMap) ToSnapshotConfigMapOutput() SnapshotConfigMapOutput {
	return i.ToSnapshotConfigMapOutputWithContext(context.Background())
}

func (i SnapshotConfigMap) ToSnapshotConfigMapOutputWithContext(ctx context.Context) SnapshotConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotConfigMapOutput)
}

type SnapshotConfigOutput struct{ *pulumi.OutputState }

func (SnapshotConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotConfig)(nil)).Elem()
}

func (o SnapshotConfigOutput) ToSnapshotConfigOutput() SnapshotConfigOutput {
	return o
}

func (o SnapshotConfigOutput) ToSnapshotConfigOutputWithContext(ctx context.Context) SnapshotConfigOutput {
	return o
}

// Domain name.
func (o SnapshotConfigOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotConfig) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Backup interval: empty string - no backup, halfHour - every half hour, hourly - every hour, daily - every day, monthly - every month.
func (o SnapshotConfigOutput) Period() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotConfig) pulumi.StringOutput { return v.Period }).(pulumi.StringOutput)
}

type SnapshotConfigArrayOutput struct{ *pulumi.OutputState }

func (SnapshotConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotConfig)(nil)).Elem()
}

func (o SnapshotConfigArrayOutput) ToSnapshotConfigArrayOutput() SnapshotConfigArrayOutput {
	return o
}

func (o SnapshotConfigArrayOutput) ToSnapshotConfigArrayOutputWithContext(ctx context.Context) SnapshotConfigArrayOutput {
	return o
}

func (o SnapshotConfigArrayOutput) Index(i pulumi.IntInput) SnapshotConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotConfig {
		return vs[0].([]*SnapshotConfig)[vs[1].(int)]
	}).(SnapshotConfigOutput)
}

type SnapshotConfigMapOutput struct{ *pulumi.OutputState }

func (SnapshotConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotConfig)(nil)).Elem()
}

func (o SnapshotConfigMapOutput) ToSnapshotConfigMapOutput() SnapshotConfigMapOutput {
	return o
}

func (o SnapshotConfigMapOutput) ToSnapshotConfigMapOutputWithContext(ctx context.Context) SnapshotConfigMapOutput {
	return o
}

func (o SnapshotConfigMapOutput) MapIndex(k pulumi.StringInput) SnapshotConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotConfig {
		return vs[0].(map[string]*SnapshotConfig)[vs[1].(string)]
	}).(SnapshotConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotConfigInput)(nil)).Elem(), &SnapshotConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotConfigArrayInput)(nil)).Elem(), SnapshotConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotConfigMapInput)(nil)).Elem(), SnapshotConfigMap{})
	pulumi.RegisterOutputType(SnapshotConfigOutput{})
	pulumi.RegisterOutputType(SnapshotConfigArrayOutput{})
	pulumi.RegisterOutputType(SnapshotConfigMapOutput{})
}
