// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnspod

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of dnspod recordList
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dnspod.GetRecordList(ctx, &dnspod.GetRecordListArgs{
//				Domain:           "iac-tf.cloud",
//				GroupIds:         []interface{}{},
//				IsExactSubDomain: pulumi.BoolRef(true),
//				Keyword:          pulumi.StringRef(""),
//				MxBegin:          pulumi.IntRef(0),
//				MxEnd:            pulumi.IntRef(10),
//				RecordStatuses: []string{
//					"ENABLE",
//				},
//				RecordTypes: []string{
//					"A",
//					"NS",
//					"CNAME",
//					"NS",
//					"AAAA",
//				},
//				RecordValue:    pulumi.StringRef("bicycle.dnspod.net"),
//				Remark:         pulumi.StringRef(""),
//				SortField:      pulumi.StringRef("UPDATED_ON"),
//				SortType:       pulumi.StringRef("DESC"),
//				TtlBegin:       pulumi.IntRef(1),
//				TtlEnd:         pulumi.IntRef(864000),
//				UpdatedAtBegin: pulumi.StringRef("2021-09-07"),
//				UpdatedAtEnd:   pulumi.StringRef("2023-12-07"),
//				WeightBegin:    pulumi.IntRef(0),
//				WeightEnd:      pulumi.IntRef(100),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRecordList(ctx *pulumi.Context, args *GetRecordListArgs, opts ...pulumi.InvokeOption) (*GetRecordListResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetRecordListResult
	err := ctx.Invoke("tencentcloud:Dnspod/getRecordList:getRecordList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRecordList.
type GetRecordListArgs struct {
	// The domain to which the resolution record belongs.
	Domain string `pulumi:"domain"`
	// The domain ID to which the resolution record belongs. If DomainId is provided, the system will ignore the Domain parameter. You can find all Domain and DomainId through the DescribeDomainList interface.
	DomainId *int `pulumi:"domainId"`
	// When retrieving resolution records under certain groups, pass this group ID. You can obtain the GroupId field through the DescribeRecordGroupList interface.
	GroupIds []int `pulumi:"groupIds"`
	// Whether to perform an exact search based on the SubDomain parameter.
	IsExactSubDomain *bool `pulumi:"isExactSubDomain"`
	// Search for resolution records by keyword, currently supporting searching host headers and record values.
	Keyword *string `pulumi:"keyword"`
	// The starting point of the resolution record MX priority query interval.
	MxBegin *int `pulumi:"mxBegin"`
	// The endpoint of the resolution record MX priority query interval.
	MxEnd *int `pulumi:"mxEnd"`
	// Project ID.
	ProjectId *int `pulumi:"projectId"`
	// Retrieve resolution records for certain line IDs. You can view the allowed line information for the current domain through the DescribeRecordLineList interface.
	RecordLines []string `pulumi:"recordLines"`
	// Get the resolution record based on the resolution record status. The possible values are ENABLE and DISABLE. ENABLE: Normal DISABLE: Paused.
	RecordStatuses []string `pulumi:"recordStatuses"`
	// Retrieve certain types of resolution records, such as A, CNAME, NS, AAAA, explicit URL, implicit URL, CAA, SPF, etc.
	RecordTypes []string `pulumi:"recordTypes"`
	// Get the resolution record based on the resolution record value.
	RecordValue *string `pulumi:"recordValue"`
	// Get the resolution record based on the resolution record remark.
	Remark *string `pulumi:"remark"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Sorting field, supporting NAME, LINE, TYPE, VALUE, WEIGHT, MX, TTL, UPDATED_ON fields. NAME: The host header of the resolution record LINE: The resolution record line TYPE: The resolution record type VALUE: The resolution record value WEIGHT: The weight MX: MX priority TTL: The resolution record cache time UPDATED_ON: The resolution record update time.
	SortField *string `pulumi:"sortField"`
	// Sorting method, ascending: ASC, descending: DESC. The default value is ASC.
	SortType *string `pulumi:"sortType"`
	// Retrieve resolution records based on the host header of the resolution record. Fuzzy matching is used by default. You can set the IsExactSubdomain parameter to true for precise searching.
	SubDomain *string `pulumi:"subDomain"`
	// The starting point of the resolution record TTL query interval.
	TtlBegin *int `pulumi:"ttlBegin"`
	// The endpoint of the resolution record TTL query interval.
	TtlEnd *int `pulumi:"ttlEnd"`
	// The starting point of the resolution record update time query interval.
	UpdatedAtBegin *string `pulumi:"updatedAtBegin"`
	// The endpoint of the resolution record update time query interval.
	UpdatedAtEnd *string `pulumi:"updatedAtEnd"`
	// The starting point of the resolution record weight query interval.
	WeightBegin *int `pulumi:"weightBegin"`
	// The endpoint of the resolution record weight query interval.
	WeightEnd *int `pulumi:"weightEnd"`
}

// A collection of values returned by getRecordList.
type GetRecordListResult struct {
	Domain   string `pulumi:"domain"`
	DomainId *int   `pulumi:"domainId"`
	GroupIds []int  `pulumi:"groupIds"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	IsExactSubDomain *bool   `pulumi:"isExactSubDomain"`
	Keyword          *string `pulumi:"keyword"`
	MxBegin          *int    `pulumi:"mxBegin"`
	MxEnd            *int    `pulumi:"mxEnd"`
	ProjectId        *int    `pulumi:"projectId"`
	// Statistics of the number of records.
	RecordCountInfos []GetRecordListRecordCountInfo `pulumi:"recordCountInfos"`
	RecordLines      []string                       `pulumi:"recordLines"`
	// List of records.
	RecordLists    []GetRecordListRecordList `pulumi:"recordLists"`
	RecordStatuses []string                  `pulumi:"recordStatuses"`
	RecordTypes    []string                  `pulumi:"recordTypes"`
	RecordValue    *string                   `pulumi:"recordValue"`
	// Record remark description.
	Remark           *string `pulumi:"remark"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	SortField        *string `pulumi:"sortField"`
	SortType         *string `pulumi:"sortType"`
	SubDomain        *string `pulumi:"subDomain"`
	TtlBegin         *int    `pulumi:"ttlBegin"`
	TtlEnd           *int    `pulumi:"ttlEnd"`
	UpdatedAtBegin   *string `pulumi:"updatedAtBegin"`
	UpdatedAtEnd     *string `pulumi:"updatedAtEnd"`
	WeightBegin      *int    `pulumi:"weightBegin"`
	WeightEnd        *int    `pulumi:"weightEnd"`
}

func GetRecordListOutput(ctx *pulumi.Context, args GetRecordListOutputArgs, opts ...pulumi.InvokeOption) GetRecordListResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRecordListResult, error) {
			args := v.(GetRecordListArgs)
			r, err := GetRecordList(ctx, &args, opts...)
			var s GetRecordListResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRecordListResultOutput)
}

// A collection of arguments for invoking getRecordList.
type GetRecordListOutputArgs struct {
	// The domain to which the resolution record belongs.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The domain ID to which the resolution record belongs. If DomainId is provided, the system will ignore the Domain parameter. You can find all Domain and DomainId through the DescribeDomainList interface.
	DomainId pulumi.IntPtrInput `pulumi:"domainId"`
	// When retrieving resolution records under certain groups, pass this group ID. You can obtain the GroupId field through the DescribeRecordGroupList interface.
	GroupIds pulumi.IntArrayInput `pulumi:"groupIds"`
	// Whether to perform an exact search based on the SubDomain parameter.
	IsExactSubDomain pulumi.BoolPtrInput `pulumi:"isExactSubDomain"`
	// Search for resolution records by keyword, currently supporting searching host headers and record values.
	Keyword pulumi.StringPtrInput `pulumi:"keyword"`
	// The starting point of the resolution record MX priority query interval.
	MxBegin pulumi.IntPtrInput `pulumi:"mxBegin"`
	// The endpoint of the resolution record MX priority query interval.
	MxEnd pulumi.IntPtrInput `pulumi:"mxEnd"`
	// Project ID.
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// Retrieve resolution records for certain line IDs. You can view the allowed line information for the current domain through the DescribeRecordLineList interface.
	RecordLines pulumi.StringArrayInput `pulumi:"recordLines"`
	// Get the resolution record based on the resolution record status. The possible values are ENABLE and DISABLE. ENABLE: Normal DISABLE: Paused.
	RecordStatuses pulumi.StringArrayInput `pulumi:"recordStatuses"`
	// Retrieve certain types of resolution records, such as A, CNAME, NS, AAAA, explicit URL, implicit URL, CAA, SPF, etc.
	RecordTypes pulumi.StringArrayInput `pulumi:"recordTypes"`
	// Get the resolution record based on the resolution record value.
	RecordValue pulumi.StringPtrInput `pulumi:"recordValue"`
	// Get the resolution record based on the resolution record remark.
	Remark pulumi.StringPtrInput `pulumi:"remark"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Sorting field, supporting NAME, LINE, TYPE, VALUE, WEIGHT, MX, TTL, UPDATED_ON fields. NAME: The host header of the resolution record LINE: The resolution record line TYPE: The resolution record type VALUE: The resolution record value WEIGHT: The weight MX: MX priority TTL: The resolution record cache time UPDATED_ON: The resolution record update time.
	SortField pulumi.StringPtrInput `pulumi:"sortField"`
	// Sorting method, ascending: ASC, descending: DESC. The default value is ASC.
	SortType pulumi.StringPtrInput `pulumi:"sortType"`
	// Retrieve resolution records based on the host header of the resolution record. Fuzzy matching is used by default. You can set the IsExactSubdomain parameter to true for precise searching.
	SubDomain pulumi.StringPtrInput `pulumi:"subDomain"`
	// The starting point of the resolution record TTL query interval.
	TtlBegin pulumi.IntPtrInput `pulumi:"ttlBegin"`
	// The endpoint of the resolution record TTL query interval.
	TtlEnd pulumi.IntPtrInput `pulumi:"ttlEnd"`
	// The starting point of the resolution record update time query interval.
	UpdatedAtBegin pulumi.StringPtrInput `pulumi:"updatedAtBegin"`
	// The endpoint of the resolution record update time query interval.
	UpdatedAtEnd pulumi.StringPtrInput `pulumi:"updatedAtEnd"`
	// The starting point of the resolution record weight query interval.
	WeightBegin pulumi.IntPtrInput `pulumi:"weightBegin"`
	// The endpoint of the resolution record weight query interval.
	WeightEnd pulumi.IntPtrInput `pulumi:"weightEnd"`
}

func (GetRecordListOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordListArgs)(nil)).Elem()
}

// A collection of values returned by getRecordList.
type GetRecordListResultOutput struct{ *pulumi.OutputState }

func (GetRecordListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordListResult)(nil)).Elem()
}

func (o GetRecordListResultOutput) ToGetRecordListResultOutput() GetRecordListResultOutput {
	return o
}

func (o GetRecordListResultOutput) ToGetRecordListResultOutputWithContext(ctx context.Context) GetRecordListResultOutput {
	return o
}

func (o GetRecordListResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordListResult) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetRecordListResultOutput) DomainId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *int { return v.DomainId }).(pulumi.IntPtrOutput)
}

func (o GetRecordListResultOutput) GroupIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetRecordListResult) []int { return v.GroupIds }).(pulumi.IntArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRecordListResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordListResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRecordListResultOutput) IsExactSubDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *bool { return v.IsExactSubDomain }).(pulumi.BoolPtrOutput)
}

func (o GetRecordListResultOutput) Keyword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *string { return v.Keyword }).(pulumi.StringPtrOutput)
}

func (o GetRecordListResultOutput) MxBegin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *int { return v.MxBegin }).(pulumi.IntPtrOutput)
}

func (o GetRecordListResultOutput) MxEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *int { return v.MxEnd }).(pulumi.IntPtrOutput)
}

func (o GetRecordListResultOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// Statistics of the number of records.
func (o GetRecordListResultOutput) RecordCountInfos() GetRecordListRecordCountInfoArrayOutput {
	return o.ApplyT(func(v GetRecordListResult) []GetRecordListRecordCountInfo { return v.RecordCountInfos }).(GetRecordListRecordCountInfoArrayOutput)
}

func (o GetRecordListResultOutput) RecordLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRecordListResult) []string { return v.RecordLines }).(pulumi.StringArrayOutput)
}

// List of records.
func (o GetRecordListResultOutput) RecordLists() GetRecordListRecordListArrayOutput {
	return o.ApplyT(func(v GetRecordListResult) []GetRecordListRecordList { return v.RecordLists }).(GetRecordListRecordListArrayOutput)
}

func (o GetRecordListResultOutput) RecordStatuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRecordListResult) []string { return v.RecordStatuses }).(pulumi.StringArrayOutput)
}

func (o GetRecordListResultOutput) RecordTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRecordListResult) []string { return v.RecordTypes }).(pulumi.StringArrayOutput)
}

func (o GetRecordListResultOutput) RecordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *string { return v.RecordValue }).(pulumi.StringPtrOutput)
}

// Record remark description.
func (o GetRecordListResultOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *string { return v.Remark }).(pulumi.StringPtrOutput)
}

func (o GetRecordListResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetRecordListResultOutput) SortField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *string { return v.SortField }).(pulumi.StringPtrOutput)
}

func (o GetRecordListResultOutput) SortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *string { return v.SortType }).(pulumi.StringPtrOutput)
}

func (o GetRecordListResultOutput) SubDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *string { return v.SubDomain }).(pulumi.StringPtrOutput)
}

func (o GetRecordListResultOutput) TtlBegin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *int { return v.TtlBegin }).(pulumi.IntPtrOutput)
}

func (o GetRecordListResultOutput) TtlEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *int { return v.TtlEnd }).(pulumi.IntPtrOutput)
}

func (o GetRecordListResultOutput) UpdatedAtBegin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *string { return v.UpdatedAtBegin }).(pulumi.StringPtrOutput)
}

func (o GetRecordListResultOutput) UpdatedAtEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *string { return v.UpdatedAtEnd }).(pulumi.StringPtrOutput)
}

func (o GetRecordListResultOutput) WeightBegin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *int { return v.WeightBegin }).(pulumi.IntPtrOutput)
}

func (o GetRecordListResultOutput) WeightEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRecordListResult) *int { return v.WeightEnd }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRecordListResultOutput{})
}
