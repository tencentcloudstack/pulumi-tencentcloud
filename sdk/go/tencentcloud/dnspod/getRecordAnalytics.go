// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnspod

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of dnspod recordAnalytics
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dnspod.GetRecordAnalytics(ctx, &dnspod.GetRecordAnalyticsArgs{
//				DnsFormat: pulumi.StringRef("HOUR"),
//				Domain:    "iac-tf.cloud",
//				EndDate:   "2023-11-07",
//				StartDate: "2023-09-07",
//				Subdomain: "www",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRecordAnalytics(ctx *pulumi.Context, args *GetRecordAnalyticsArgs, opts ...pulumi.InvokeOption) (*GetRecordAnalyticsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetRecordAnalyticsResult
	err := ctx.Invoke("tencentcloud:Dnspod/getRecordAnalytics:getRecordAnalytics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRecordAnalytics.
type GetRecordAnalyticsArgs struct {
	// DATE: Statistics by day dimension, HOUR: Statistics by hour dimension.
	DnsFormat *string `pulumi:"dnsFormat"`
	// The domain to query for resolution volume.
	Domain string `pulumi:"domain"`
	// Domain ID. The parameter DomainId has a higher priority than the parameter Domain. If the parameter DomainId is passed, the parameter Domain will be ignored. You can find all Domains and DomainIds through the DescribeDomainList interface.
	DomainId *int `pulumi:"domainId"`
	// The end date of the query, format: YYYY-MM-DD.
	EndDate string `pulumi:"endDate"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// The start date of the query, format: YYYY-MM-DD.
	StartDate string `pulumi:"startDate"`
	// The subdomain to query for resolution volume.
	Subdomain string `pulumi:"subdomain"`
}

// A collection of values returned by getRecordAnalytics.
type GetRecordAnalyticsResult struct {
	// Subdomain alias resolution statistics information.
	AliasDatas []GetRecordAnalyticsAliasData `pulumi:"aliasDatas"`
	// The subtotal of the resolution volume for the current statistical dimension.
	Datas []GetRecordAnalyticsData `pulumi:"datas"`
	// DATE: Daily statistics, HOUR: Hourly statistics.
	DnsFormat *string `pulumi:"dnsFormat"`
	// The domain currently being queried.
	Domain   string `pulumi:"domain"`
	DomainId *int   `pulumi:"domainId"`
	// End date of the current statistical period.
	EndDate string `pulumi:"endDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Subdomain resolution statistics query information.
	Infos            []GetRecordAnalyticsInfo `pulumi:"infos"`
	ResultOutputFile *string                  `pulumi:"resultOutputFile"`
	// Start date of the current statistical period.
	StartDate string `pulumi:"startDate"`
	// The subdomain currently being analyzed.
	Subdomain string `pulumi:"subdomain"`
}

func GetRecordAnalyticsOutput(ctx *pulumi.Context, args GetRecordAnalyticsOutputArgs, opts ...pulumi.InvokeOption) GetRecordAnalyticsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRecordAnalyticsResult, error) {
			args := v.(GetRecordAnalyticsArgs)
			r, err := GetRecordAnalytics(ctx, &args, opts...)
			var s GetRecordAnalyticsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRecordAnalyticsResultOutput)
}

// A collection of arguments for invoking getRecordAnalytics.
type GetRecordAnalyticsOutputArgs struct {
	// DATE: Statistics by day dimension, HOUR: Statistics by hour dimension.
	DnsFormat pulumi.StringPtrInput `pulumi:"dnsFormat"`
	// The domain to query for resolution volume.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Domain ID. The parameter DomainId has a higher priority than the parameter Domain. If the parameter DomainId is passed, the parameter Domain will be ignored. You can find all Domains and DomainIds through the DescribeDomainList interface.
	DomainId pulumi.IntPtrInput `pulumi:"domainId"`
	// The end date of the query, format: YYYY-MM-DD.
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// The start date of the query, format: YYYY-MM-DD.
	StartDate pulumi.StringInput `pulumi:"startDate"`
	// The subdomain to query for resolution volume.
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
}

func (GetRecordAnalyticsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordAnalyticsArgs)(nil)).Elem()
}

// A collection of values returned by getRecordAnalytics.
type GetRecordAnalyticsResultOutput struct{ *pulumi.OutputState }

func (GetRecordAnalyticsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordAnalyticsResult)(nil)).Elem()
}

func (o GetRecordAnalyticsResultOutput) ToGetRecordAnalyticsResultOutput() GetRecordAnalyticsResultOutput {
	return o
}

func (o GetRecordAnalyticsResultOutput) ToGetRecordAnalyticsResultOutputWithContext(ctx context.Context) GetRecordAnalyticsResultOutput {
	return o
}

// Subdomain alias resolution statistics information.
func (o GetRecordAnalyticsResultOutput) AliasDatas() GetRecordAnalyticsAliasDataArrayOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) []GetRecordAnalyticsAliasData { return v.AliasDatas }).(GetRecordAnalyticsAliasDataArrayOutput)
}

// The subtotal of the resolution volume for the current statistical dimension.
func (o GetRecordAnalyticsResultOutput) Datas() GetRecordAnalyticsDataArrayOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) []GetRecordAnalyticsData { return v.Datas }).(GetRecordAnalyticsDataArrayOutput)
}

// DATE: Daily statistics, HOUR: Hourly statistics.
func (o GetRecordAnalyticsResultOutput) DnsFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) *string { return v.DnsFormat }).(pulumi.StringPtrOutput)
}

// The domain currently being queried.
func (o GetRecordAnalyticsResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetRecordAnalyticsResultOutput) DomainId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) *int { return v.DomainId }).(pulumi.IntPtrOutput)
}

// End date of the current statistical period.
func (o GetRecordAnalyticsResultOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) string { return v.EndDate }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRecordAnalyticsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Subdomain resolution statistics query information.
func (o GetRecordAnalyticsResultOutput) Infos() GetRecordAnalyticsInfoArrayOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) []GetRecordAnalyticsInfo { return v.Infos }).(GetRecordAnalyticsInfoArrayOutput)
}

func (o GetRecordAnalyticsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Start date of the current statistical period.
func (o GetRecordAnalyticsResultOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) string { return v.StartDate }).(pulumi.StringOutput)
}

// The subdomain currently being analyzed.
func (o GetRecordAnalyticsResultOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordAnalyticsResult) string { return v.Subdomain }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRecordAnalyticsResultOutput{})
}
