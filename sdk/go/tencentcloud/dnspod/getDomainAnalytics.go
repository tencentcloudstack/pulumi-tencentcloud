// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnspod

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of dnspod domainAnalytics
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dnspod.GetDomainAnalytics(ctx, &dnspod.GetDomainAnalyticsArgs{
//				DnsFormat: pulumi.StringRef("HOUR"),
//				Domain:    "dnspod.cn",
//				EndDate:   "2023-10-12",
//				StartDate: "2023-10-07",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDomainAnalytics(ctx *pulumi.Context, args *GetDomainAnalyticsArgs, opts ...pulumi.InvokeOption) (*GetDomainAnalyticsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetDomainAnalyticsResult
	err := ctx.Invoke("tencentcloud:Dnspod/getDomainAnalytics:getDomainAnalytics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomainAnalytics.
type GetDomainAnalyticsArgs struct {
	// DATE: Statistics by day dimension HOUR: Statistics by hour dimension.
	DnsFormat *string `pulumi:"dnsFormat"`
	// The domain name to query for resolution volume.
	Domain string `pulumi:"domain"`
	// Domain ID. The parameter DomainId has a higher priority than the parameter Domain. If the parameter DomainId is passed, the parameter Domain will be ignored. You can find all Domains and DomainIds through the DescribeDomainList interface.
	DomainId *int `pulumi:"domainId"`
	// The end date of the query, format: YYYY-MM-DD.
	EndDate string `pulumi:"endDate"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// The start date of the query, format: YYYY-MM-DD.
	StartDate string `pulumi:"startDate"`
}

// A collection of values returned by getDomainAnalytics.
type GetDomainAnalyticsResult struct {
	// Domain alias resolution volume statistics information.
	AliasDatas []GetDomainAnalyticsAliasData `pulumi:"aliasDatas"`
	// Subtotal of resolution volume for the current statistical dimension.
	Datas []GetDomainAnalyticsData `pulumi:"datas"`
	// DATE: Statistics by day dimension HOUR: Statistics by hour dimension.
	DnsFormat *string `pulumi:"dnsFormat"`
	// The domain name currently being queried.
	Domain   string `pulumi:"domain"`
	DomainId *int   `pulumi:"domainId"`
	// End time of the current statistical period.
	EndDate string `pulumi:"endDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Domain resolution volume statistics query information.
	Infos            []GetDomainAnalyticsInfo `pulumi:"infos"`
	ResultOutputFile *string                  `pulumi:"resultOutputFile"`
	// Start time of the current statistical period.
	StartDate string `pulumi:"startDate"`
}

func GetDomainAnalyticsOutput(ctx *pulumi.Context, args GetDomainAnalyticsOutputArgs, opts ...pulumi.InvokeOption) GetDomainAnalyticsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDomainAnalyticsResult, error) {
			args := v.(GetDomainAnalyticsArgs)
			r, err := GetDomainAnalytics(ctx, &args, opts...)
			var s GetDomainAnalyticsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDomainAnalyticsResultOutput)
}

// A collection of arguments for invoking getDomainAnalytics.
type GetDomainAnalyticsOutputArgs struct {
	// DATE: Statistics by day dimension HOUR: Statistics by hour dimension.
	DnsFormat pulumi.StringPtrInput `pulumi:"dnsFormat"`
	// The domain name to query for resolution volume.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Domain ID. The parameter DomainId has a higher priority than the parameter Domain. If the parameter DomainId is passed, the parameter Domain will be ignored. You can find all Domains and DomainIds through the DescribeDomainList interface.
	DomainId pulumi.IntPtrInput `pulumi:"domainId"`
	// The end date of the query, format: YYYY-MM-DD.
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// The start date of the query, format: YYYY-MM-DD.
	StartDate pulumi.StringInput `pulumi:"startDate"`
}

func (GetDomainAnalyticsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainAnalyticsArgs)(nil)).Elem()
}

// A collection of values returned by getDomainAnalytics.
type GetDomainAnalyticsResultOutput struct{ *pulumi.OutputState }

func (GetDomainAnalyticsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainAnalyticsResult)(nil)).Elem()
}

func (o GetDomainAnalyticsResultOutput) ToGetDomainAnalyticsResultOutput() GetDomainAnalyticsResultOutput {
	return o
}

func (o GetDomainAnalyticsResultOutput) ToGetDomainAnalyticsResultOutputWithContext(ctx context.Context) GetDomainAnalyticsResultOutput {
	return o
}

// Domain alias resolution volume statistics information.
func (o GetDomainAnalyticsResultOutput) AliasDatas() GetDomainAnalyticsAliasDataArrayOutput {
	return o.ApplyT(func(v GetDomainAnalyticsResult) []GetDomainAnalyticsAliasData { return v.AliasDatas }).(GetDomainAnalyticsAliasDataArrayOutput)
}

// Subtotal of resolution volume for the current statistical dimension.
func (o GetDomainAnalyticsResultOutput) Datas() GetDomainAnalyticsDataArrayOutput {
	return o.ApplyT(func(v GetDomainAnalyticsResult) []GetDomainAnalyticsData { return v.Datas }).(GetDomainAnalyticsDataArrayOutput)
}

// DATE: Statistics by day dimension HOUR: Statistics by hour dimension.
func (o GetDomainAnalyticsResultOutput) DnsFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainAnalyticsResult) *string { return v.DnsFormat }).(pulumi.StringPtrOutput)
}

// The domain name currently being queried.
func (o GetDomainAnalyticsResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainAnalyticsResult) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetDomainAnalyticsResultOutput) DomainId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDomainAnalyticsResult) *int { return v.DomainId }).(pulumi.IntPtrOutput)
}

// End time of the current statistical period.
func (o GetDomainAnalyticsResultOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainAnalyticsResult) string { return v.EndDate }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDomainAnalyticsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainAnalyticsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Domain resolution volume statistics query information.
func (o GetDomainAnalyticsResultOutput) Infos() GetDomainAnalyticsInfoArrayOutput {
	return o.ApplyT(func(v GetDomainAnalyticsResult) []GetDomainAnalyticsInfo { return v.Infos }).(GetDomainAnalyticsInfoArrayOutput)
}

func (o GetDomainAnalyticsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainAnalyticsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Start time of the current statistical period.
func (o GetDomainAnalyticsResultOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainAnalyticsResult) string { return v.StartDate }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDomainAnalyticsResultOutput{})
}
