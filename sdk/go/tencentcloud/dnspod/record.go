// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnspod

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to create a DnsPod record.
//
// > **NOTE:** Versions before v1.81.43 (including v1.81.43) do not support modifying remark or modifying remark has bug.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dnspod.NewRecord(ctx, "demo", &Dnspod.RecordArgs{
//				Domain:     pulumi.String("mikatong.com"),
//				RecordLine: pulumi.String("默认"),
//				RecordType: pulumi.String("A"),
//				SubDomain:  pulumi.String("demo"),
//				Value:      pulumi.String("1.2.3.9"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DnsPod Domain record can be imported using the Domain#RecordId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dnspod/record:Record demo arunma.com#1194109872
//
// ```
type Record struct {
	pulumi.CustomResourceState

	// The Domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The monitoring status of the record.
	MonitorStatus pulumi.StringOutput `pulumi:"monitorStatus"`
	// MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
	Mx pulumi.IntPtrOutput `pulumi:"mx"`
	// The record line.
	RecordLine pulumi.StringOutput `pulumi:"recordLine"`
	// The record type.
	RecordType pulumi.StringOutput `pulumi:"recordType"`
	// The Remark of record.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The host records, default value is `@`.
	SubDomain pulumi.StringPtrOutput `pulumi:"subDomain"`
	// TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// The record value.
	Value pulumi.StringOutput `pulumi:"value"`
	// Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewRecord registers a new resource with the given unique name, arguments, and options.
func NewRecord(ctx *pulumi.Context,
	name string, args *RecordArgs, opts ...pulumi.ResourceOption) (*Record, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.RecordLine == nil {
		return nil, errors.New("invalid value for required argument 'RecordLine'")
	}
	if args.RecordType == nil {
		return nil, errors.New("invalid value for required argument 'RecordType'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Record
	err := ctx.RegisterResource("tencentcloud:Dnspod/record:Record", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecord gets an existing Record resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordState, opts ...pulumi.ResourceOption) (*Record, error) {
	var resource Record
	err := ctx.ReadResource("tencentcloud:Dnspod/record:Record", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Record resources.
type recordState struct {
	// The Domain.
	Domain *string `pulumi:"domain"`
	// The monitoring status of the record.
	MonitorStatus *string `pulumi:"monitorStatus"`
	// MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
	Mx *int `pulumi:"mx"`
	// The record line.
	RecordLine *string `pulumi:"recordLine"`
	// The record type.
	RecordType *string `pulumi:"recordType"`
	// The Remark of record.
	Remark *string `pulumi:"remark"`
	// Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
	Status *string `pulumi:"status"`
	// The host records, default value is `@`.
	SubDomain *string `pulumi:"subDomain"`
	// TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
	Ttl *int `pulumi:"ttl"`
	// The record value.
	Value *string `pulumi:"value"`
	// Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
	Weight *int `pulumi:"weight"`
}

type RecordState struct {
	// The Domain.
	Domain pulumi.StringPtrInput
	// The monitoring status of the record.
	MonitorStatus pulumi.StringPtrInput
	// MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
	Mx pulumi.IntPtrInput
	// The record line.
	RecordLine pulumi.StringPtrInput
	// The record type.
	RecordType pulumi.StringPtrInput
	// The Remark of record.
	Remark pulumi.StringPtrInput
	// Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
	Status pulumi.StringPtrInput
	// The host records, default value is `@`.
	SubDomain pulumi.StringPtrInput
	// TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
	Ttl pulumi.IntPtrInput
	// The record value.
	Value pulumi.StringPtrInput
	// Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
	Weight pulumi.IntPtrInput
}

func (RecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordState)(nil)).Elem()
}

type recordArgs struct {
	// The Domain.
	Domain string `pulumi:"domain"`
	// MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
	Mx *int `pulumi:"mx"`
	// The record line.
	RecordLine string `pulumi:"recordLine"`
	// The record type.
	RecordType string `pulumi:"recordType"`
	// The Remark of record.
	Remark *string `pulumi:"remark"`
	// Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
	Status *string `pulumi:"status"`
	// The host records, default value is `@`.
	SubDomain *string `pulumi:"subDomain"`
	// TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
	Ttl *int `pulumi:"ttl"`
	// The record value.
	Value string `pulumi:"value"`
	// Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a Record resource.
type RecordArgs struct {
	// The Domain.
	Domain pulumi.StringInput
	// MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
	Mx pulumi.IntPtrInput
	// The record line.
	RecordLine pulumi.StringInput
	// The record type.
	RecordType pulumi.StringInput
	// The Remark of record.
	Remark pulumi.StringPtrInput
	// Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
	Status pulumi.StringPtrInput
	// The host records, default value is `@`.
	SubDomain pulumi.StringPtrInput
	// TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
	Ttl pulumi.IntPtrInput
	// The record value.
	Value pulumi.StringInput
	// Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
	Weight pulumi.IntPtrInput
}

func (RecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordArgs)(nil)).Elem()
}

type RecordInput interface {
	pulumi.Input

	ToRecordOutput() RecordOutput
	ToRecordOutputWithContext(ctx context.Context) RecordOutput
}

func (*Record) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (i *Record) ToRecordOutput() RecordOutput {
	return i.ToRecordOutputWithContext(context.Background())
}

func (i *Record) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordOutput)
}

// RecordArrayInput is an input type that accepts RecordArray and RecordArrayOutput values.
// You can construct a concrete instance of `RecordArrayInput` via:
//
//	RecordArray{ RecordArgs{...} }
type RecordArrayInput interface {
	pulumi.Input

	ToRecordArrayOutput() RecordArrayOutput
	ToRecordArrayOutputWithContext(context.Context) RecordArrayOutput
}

type RecordArray []RecordInput

func (RecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (i RecordArray) ToRecordArrayOutput() RecordArrayOutput {
	return i.ToRecordArrayOutputWithContext(context.Background())
}

func (i RecordArray) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordArrayOutput)
}

// RecordMapInput is an input type that accepts RecordMap and RecordMapOutput values.
// You can construct a concrete instance of `RecordMapInput` via:
//
//	RecordMap{ "key": RecordArgs{...} }
type RecordMapInput interface {
	pulumi.Input

	ToRecordMapOutput() RecordMapOutput
	ToRecordMapOutputWithContext(context.Context) RecordMapOutput
}

type RecordMap map[string]RecordInput

func (RecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (i RecordMap) ToRecordMapOutput() RecordMapOutput {
	return i.ToRecordMapOutputWithContext(context.Background())
}

func (i RecordMap) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapOutput)
}

type RecordOutput struct{ *pulumi.OutputState }

func (RecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (o RecordOutput) ToRecordOutput() RecordOutput {
	return o
}

func (o RecordOutput) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return o
}

// The Domain.
func (o RecordOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The monitoring status of the record.
func (o RecordOutput) MonitorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.MonitorStatus }).(pulumi.StringOutput)
}

// MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
func (o RecordOutput) Mx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.IntPtrOutput { return v.Mx }).(pulumi.IntPtrOutput)
}

// The record line.
func (o RecordOutput) RecordLine() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.RecordLine }).(pulumi.StringOutput)
}

// The record type.
func (o RecordOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.RecordType }).(pulumi.StringOutput)
}

// The Remark of record.
func (o RecordOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
func (o RecordOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The host records, default value is `@`.
func (o RecordOutput) SubDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.StringPtrOutput { return v.SubDomain }).(pulumi.StringPtrOutput)
}

// TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
func (o RecordOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The record value.
func (o RecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
func (o RecordOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

type RecordArrayOutput struct{ *pulumi.OutputState }

func (RecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (o RecordArrayOutput) ToRecordArrayOutput() RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) Index(i pulumi.IntInput) RecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Record {
		return vs[0].([]*Record)[vs[1].(int)]
	}).(RecordOutput)
}

type RecordMapOutput struct{ *pulumi.OutputState }

func (RecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (o RecordMapOutput) ToRecordMapOutput() RecordMapOutput {
	return o
}

func (o RecordMapOutput) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return o
}

func (o RecordMapOutput) MapIndex(k pulumi.StringInput) RecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Record {
		return vs[0].(map[string]*Record)[vs[1].(string)]
	}).(RecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordInput)(nil)).Elem(), &Record{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordArrayInput)(nil)).Elem(), RecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordMapInput)(nil)).Elem(), RecordMap{})
	pulumi.RegisterOutputType(RecordOutput{})
	pulumi.RegisterOutputType(RecordArrayOutput{})
	pulumi.RegisterOutputType(RecordMapOutput{})
}
