// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnspod

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dnspod domainLock
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dnspod"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dnspod.NewDomainLock(ctx, "domainLock", &Dnspod.DomainLockArgs{
//				Domain:   pulumi.String("dnspod.cn"),
//				LockDays: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DomainLock struct {
	pulumi.CustomResourceState

	// Domain name.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Domain unlock code, can be obtained through the ModifyDomainLock interface.
	LockCode pulumi.StringOutput `pulumi:"lockCode"`
	// The number of max days to lock the domain+ Old packages: D_FREE 30 days, D_PLUS 90 days, D_EXTRA 30 days, D_EXPERT 60 days, D_ULTRA 365 days+ New packages: DP_FREE 365 days, DP_PLUS 365 days, DP_EXTRA 365 days, DP_EXPERT 365 days, DP_ULTRA 365 days.
	LockDays pulumi.IntOutput `pulumi:"lockDays"`
}

// NewDomainLock registers a new resource with the given unique name, arguments, and options.
func NewDomainLock(ctx *pulumi.Context,
	name string, args *DomainLockArgs, opts ...pulumi.ResourceOption) (*DomainLock, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.LockDays == nil {
		return nil, errors.New("invalid value for required argument 'LockDays'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DomainLock
	err := ctx.RegisterResource("tencentcloud:Dnspod/domainLock:DomainLock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainLock gets an existing DomainLock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainLock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainLockState, opts ...pulumi.ResourceOption) (*DomainLock, error) {
	var resource DomainLock
	err := ctx.ReadResource("tencentcloud:Dnspod/domainLock:DomainLock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainLock resources.
type domainLockState struct {
	// Domain name.
	Domain *string `pulumi:"domain"`
	// Domain unlock code, can be obtained through the ModifyDomainLock interface.
	LockCode *string `pulumi:"lockCode"`
	// The number of max days to lock the domain+ Old packages: D_FREE 30 days, D_PLUS 90 days, D_EXTRA 30 days, D_EXPERT 60 days, D_ULTRA 365 days+ New packages: DP_FREE 365 days, DP_PLUS 365 days, DP_EXTRA 365 days, DP_EXPERT 365 days, DP_ULTRA 365 days.
	LockDays *int `pulumi:"lockDays"`
}

type DomainLockState struct {
	// Domain name.
	Domain pulumi.StringPtrInput
	// Domain unlock code, can be obtained through the ModifyDomainLock interface.
	LockCode pulumi.StringPtrInput
	// The number of max days to lock the domain+ Old packages: D_FREE 30 days, D_PLUS 90 days, D_EXTRA 30 days, D_EXPERT 60 days, D_ULTRA 365 days+ New packages: DP_FREE 365 days, DP_PLUS 365 days, DP_EXTRA 365 days, DP_EXPERT 365 days, DP_ULTRA 365 days.
	LockDays pulumi.IntPtrInput
}

func (DomainLockState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainLockState)(nil)).Elem()
}

type domainLockArgs struct {
	// Domain name.
	Domain string `pulumi:"domain"`
	// The number of max days to lock the domain+ Old packages: D_FREE 30 days, D_PLUS 90 days, D_EXTRA 30 days, D_EXPERT 60 days, D_ULTRA 365 days+ New packages: DP_FREE 365 days, DP_PLUS 365 days, DP_EXTRA 365 days, DP_EXPERT 365 days, DP_ULTRA 365 days.
	LockDays int `pulumi:"lockDays"`
}

// The set of arguments for constructing a DomainLock resource.
type DomainLockArgs struct {
	// Domain name.
	Domain pulumi.StringInput
	// The number of max days to lock the domain+ Old packages: D_FREE 30 days, D_PLUS 90 days, D_EXTRA 30 days, D_EXPERT 60 days, D_ULTRA 365 days+ New packages: DP_FREE 365 days, DP_PLUS 365 days, DP_EXTRA 365 days, DP_EXPERT 365 days, DP_ULTRA 365 days.
	LockDays pulumi.IntInput
}

func (DomainLockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainLockArgs)(nil)).Elem()
}

type DomainLockInput interface {
	pulumi.Input

	ToDomainLockOutput() DomainLockOutput
	ToDomainLockOutputWithContext(ctx context.Context) DomainLockOutput
}

func (*DomainLock) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainLock)(nil)).Elem()
}

func (i *DomainLock) ToDomainLockOutput() DomainLockOutput {
	return i.ToDomainLockOutputWithContext(context.Background())
}

func (i *DomainLock) ToDomainLockOutputWithContext(ctx context.Context) DomainLockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainLockOutput)
}

// DomainLockArrayInput is an input type that accepts DomainLockArray and DomainLockArrayOutput values.
// You can construct a concrete instance of `DomainLockArrayInput` via:
//
//	DomainLockArray{ DomainLockArgs{...} }
type DomainLockArrayInput interface {
	pulumi.Input

	ToDomainLockArrayOutput() DomainLockArrayOutput
	ToDomainLockArrayOutputWithContext(context.Context) DomainLockArrayOutput
}

type DomainLockArray []DomainLockInput

func (DomainLockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainLock)(nil)).Elem()
}

func (i DomainLockArray) ToDomainLockArrayOutput() DomainLockArrayOutput {
	return i.ToDomainLockArrayOutputWithContext(context.Background())
}

func (i DomainLockArray) ToDomainLockArrayOutputWithContext(ctx context.Context) DomainLockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainLockArrayOutput)
}

// DomainLockMapInput is an input type that accepts DomainLockMap and DomainLockMapOutput values.
// You can construct a concrete instance of `DomainLockMapInput` via:
//
//	DomainLockMap{ "key": DomainLockArgs{...} }
type DomainLockMapInput interface {
	pulumi.Input

	ToDomainLockMapOutput() DomainLockMapOutput
	ToDomainLockMapOutputWithContext(context.Context) DomainLockMapOutput
}

type DomainLockMap map[string]DomainLockInput

func (DomainLockMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainLock)(nil)).Elem()
}

func (i DomainLockMap) ToDomainLockMapOutput() DomainLockMapOutput {
	return i.ToDomainLockMapOutputWithContext(context.Background())
}

func (i DomainLockMap) ToDomainLockMapOutputWithContext(ctx context.Context) DomainLockMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainLockMapOutput)
}

type DomainLockOutput struct{ *pulumi.OutputState }

func (DomainLockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainLock)(nil)).Elem()
}

func (o DomainLockOutput) ToDomainLockOutput() DomainLockOutput {
	return o
}

func (o DomainLockOutput) ToDomainLockOutputWithContext(ctx context.Context) DomainLockOutput {
	return o
}

// Domain name.
func (o DomainLockOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainLock) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Domain unlock code, can be obtained through the ModifyDomainLock interface.
func (o DomainLockOutput) LockCode() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainLock) pulumi.StringOutput { return v.LockCode }).(pulumi.StringOutput)
}

// The number of max days to lock the domain+ Old packages: D_FREE 30 days, D_PLUS 90 days, D_EXTRA 30 days, D_EXPERT 60 days, D_ULTRA 365 days+ New packages: DP_FREE 365 days, DP_PLUS 365 days, DP_EXTRA 365 days, DP_EXPERT 365 days, DP_ULTRA 365 days.
func (o DomainLockOutput) LockDays() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainLock) pulumi.IntOutput { return v.LockDays }).(pulumi.IntOutput)
}

type DomainLockArrayOutput struct{ *pulumi.OutputState }

func (DomainLockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainLock)(nil)).Elem()
}

func (o DomainLockArrayOutput) ToDomainLockArrayOutput() DomainLockArrayOutput {
	return o
}

func (o DomainLockArrayOutput) ToDomainLockArrayOutputWithContext(ctx context.Context) DomainLockArrayOutput {
	return o
}

func (o DomainLockArrayOutput) Index(i pulumi.IntInput) DomainLockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainLock {
		return vs[0].([]*DomainLock)[vs[1].(int)]
	}).(DomainLockOutput)
}

type DomainLockMapOutput struct{ *pulumi.OutputState }

func (DomainLockMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainLock)(nil)).Elem()
}

func (o DomainLockMapOutput) ToDomainLockMapOutput() DomainLockMapOutput {
	return o
}

func (o DomainLockMapOutput) ToDomainLockMapOutputWithContext(ctx context.Context) DomainLockMapOutput {
	return o
}

func (o DomainLockMapOutput) MapIndex(k pulumi.StringInput) DomainLockOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainLock {
		return vs[0].(map[string]*DomainLock)[vs[1].(string)]
	}).(DomainLockOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainLockInput)(nil)).Elem(), &DomainLock{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainLockArrayInput)(nil)).Elem(), DomainLockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainLockMapInput)(nil)).Elem(), DomainLockMap{})
	pulumi.RegisterOutputType(DomainLockOutput{})
	pulumi.RegisterOutputType(DomainLockArrayOutput{})
	pulumi.RegisterOutputType(DomainLockMapOutput{})
}
