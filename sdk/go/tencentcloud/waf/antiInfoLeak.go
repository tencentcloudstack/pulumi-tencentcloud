// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a waf antiInfoLeak
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewAntiInfoLeak(ctx, "example", &Waf.AntiInfoLeakArgs{
//				ActionType: pulumi.Int(0),
//				Domain:     pulumi.String("tf.example.com"),
//				Status:     pulumi.Int(1),
//				Strategies: waf.AntiInfoLeakStrategyArray{
//					&waf.AntiInfoLeakStrategyArgs{
//						Content: pulumi.String("phone"),
//						Field:   pulumi.String("information"),
//					},
//				},
//				Uri: pulumi.String("/anti_info_leak_url"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// waf anti_info_leak can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Waf/antiInfoLeak:AntiInfoLeak example 3100077499#tf.example.com
//
// ```
type AntiInfoLeak struct {
	pulumi.CustomResourceState

	// Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
	ActionType pulumi.IntOutput `pulumi:"actionType"`
	// Domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Rule Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// status.
	Status pulumi.IntPtrOutput `pulumi:"status"`
	// Strategies detail.
	Strategies AntiInfoLeakStrategyArrayOutput `pulumi:"strategies"`
	// Uri.
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewAntiInfoLeak registers a new resource with the given unique name, arguments, and options.
func NewAntiInfoLeak(ctx *pulumi.Context,
	name string, args *AntiInfoLeakArgs, opts ...pulumi.ResourceOption) (*AntiInfoLeak, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionType == nil {
		return nil, errors.New("invalid value for required argument 'ActionType'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Strategies == nil {
		return nil, errors.New("invalid value for required argument 'Strategies'")
	}
	if args.Uri == nil {
		return nil, errors.New("invalid value for required argument 'Uri'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AntiInfoLeak
	err := ctx.RegisterResource("tencentcloud:Waf/antiInfoLeak:AntiInfoLeak", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAntiInfoLeak gets an existing AntiInfoLeak resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAntiInfoLeak(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AntiInfoLeakState, opts ...pulumi.ResourceOption) (*AntiInfoLeak, error) {
	var resource AntiInfoLeak
	err := ctx.ReadResource("tencentcloud:Waf/antiInfoLeak:AntiInfoLeak", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AntiInfoLeak resources.
type antiInfoLeakState struct {
	// Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
	ActionType *int `pulumi:"actionType"`
	// Domain.
	Domain *string `pulumi:"domain"`
	// Rule Name.
	Name *string `pulumi:"name"`
	// status.
	Status *int `pulumi:"status"`
	// Strategies detail.
	Strategies []AntiInfoLeakStrategy `pulumi:"strategies"`
	// Uri.
	Uri *string `pulumi:"uri"`
}

type AntiInfoLeakState struct {
	// Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
	ActionType pulumi.IntPtrInput
	// Domain.
	Domain pulumi.StringPtrInput
	// Rule Name.
	Name pulumi.StringPtrInput
	// status.
	Status pulumi.IntPtrInput
	// Strategies detail.
	Strategies AntiInfoLeakStrategyArrayInput
	// Uri.
	Uri pulumi.StringPtrInput
}

func (AntiInfoLeakState) ElementType() reflect.Type {
	return reflect.TypeOf((*antiInfoLeakState)(nil)).Elem()
}

type antiInfoLeakArgs struct {
	// Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
	ActionType int `pulumi:"actionType"`
	// Domain.
	Domain string `pulumi:"domain"`
	// Rule Name.
	Name *string `pulumi:"name"`
	// status.
	Status *int `pulumi:"status"`
	// Strategies detail.
	Strategies []AntiInfoLeakStrategy `pulumi:"strategies"`
	// Uri.
	Uri string `pulumi:"uri"`
}

// The set of arguments for constructing a AntiInfoLeak resource.
type AntiInfoLeakArgs struct {
	// Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
	ActionType pulumi.IntInput
	// Domain.
	Domain pulumi.StringInput
	// Rule Name.
	Name pulumi.StringPtrInput
	// status.
	Status pulumi.IntPtrInput
	// Strategies detail.
	Strategies AntiInfoLeakStrategyArrayInput
	// Uri.
	Uri pulumi.StringInput
}

func (AntiInfoLeakArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*antiInfoLeakArgs)(nil)).Elem()
}

type AntiInfoLeakInput interface {
	pulumi.Input

	ToAntiInfoLeakOutput() AntiInfoLeakOutput
	ToAntiInfoLeakOutputWithContext(ctx context.Context) AntiInfoLeakOutput
}

func (*AntiInfoLeak) ElementType() reflect.Type {
	return reflect.TypeOf((**AntiInfoLeak)(nil)).Elem()
}

func (i *AntiInfoLeak) ToAntiInfoLeakOutput() AntiInfoLeakOutput {
	return i.ToAntiInfoLeakOutputWithContext(context.Background())
}

func (i *AntiInfoLeak) ToAntiInfoLeakOutputWithContext(ctx context.Context) AntiInfoLeakOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiInfoLeakOutput)
}

// AntiInfoLeakArrayInput is an input type that accepts AntiInfoLeakArray and AntiInfoLeakArrayOutput values.
// You can construct a concrete instance of `AntiInfoLeakArrayInput` via:
//
//	AntiInfoLeakArray{ AntiInfoLeakArgs{...} }
type AntiInfoLeakArrayInput interface {
	pulumi.Input

	ToAntiInfoLeakArrayOutput() AntiInfoLeakArrayOutput
	ToAntiInfoLeakArrayOutputWithContext(context.Context) AntiInfoLeakArrayOutput
}

type AntiInfoLeakArray []AntiInfoLeakInput

func (AntiInfoLeakArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AntiInfoLeak)(nil)).Elem()
}

func (i AntiInfoLeakArray) ToAntiInfoLeakArrayOutput() AntiInfoLeakArrayOutput {
	return i.ToAntiInfoLeakArrayOutputWithContext(context.Background())
}

func (i AntiInfoLeakArray) ToAntiInfoLeakArrayOutputWithContext(ctx context.Context) AntiInfoLeakArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiInfoLeakArrayOutput)
}

// AntiInfoLeakMapInput is an input type that accepts AntiInfoLeakMap and AntiInfoLeakMapOutput values.
// You can construct a concrete instance of `AntiInfoLeakMapInput` via:
//
//	AntiInfoLeakMap{ "key": AntiInfoLeakArgs{...} }
type AntiInfoLeakMapInput interface {
	pulumi.Input

	ToAntiInfoLeakMapOutput() AntiInfoLeakMapOutput
	ToAntiInfoLeakMapOutputWithContext(context.Context) AntiInfoLeakMapOutput
}

type AntiInfoLeakMap map[string]AntiInfoLeakInput

func (AntiInfoLeakMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AntiInfoLeak)(nil)).Elem()
}

func (i AntiInfoLeakMap) ToAntiInfoLeakMapOutput() AntiInfoLeakMapOutput {
	return i.ToAntiInfoLeakMapOutputWithContext(context.Background())
}

func (i AntiInfoLeakMap) ToAntiInfoLeakMapOutputWithContext(ctx context.Context) AntiInfoLeakMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiInfoLeakMapOutput)
}

type AntiInfoLeakOutput struct{ *pulumi.OutputState }

func (AntiInfoLeakOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AntiInfoLeak)(nil)).Elem()
}

func (o AntiInfoLeakOutput) ToAntiInfoLeakOutput() AntiInfoLeakOutput {
	return o
}

func (o AntiInfoLeakOutput) ToAntiInfoLeakOutputWithContext(ctx context.Context) AntiInfoLeakOutput {
	return o
}

// Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
func (o AntiInfoLeakOutput) ActionType() pulumi.IntOutput {
	return o.ApplyT(func(v *AntiInfoLeak) pulumi.IntOutput { return v.ActionType }).(pulumi.IntOutput)
}

// Domain.
func (o AntiInfoLeakOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiInfoLeak) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Rule Name.
func (o AntiInfoLeakOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiInfoLeak) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// status.
func (o AntiInfoLeakOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AntiInfoLeak) pulumi.IntPtrOutput { return v.Status }).(pulumi.IntPtrOutput)
}

// Strategies detail.
func (o AntiInfoLeakOutput) Strategies() AntiInfoLeakStrategyArrayOutput {
	return o.ApplyT(func(v *AntiInfoLeak) AntiInfoLeakStrategyArrayOutput { return v.Strategies }).(AntiInfoLeakStrategyArrayOutput)
}

// Uri.
func (o AntiInfoLeakOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiInfoLeak) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type AntiInfoLeakArrayOutput struct{ *pulumi.OutputState }

func (AntiInfoLeakArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AntiInfoLeak)(nil)).Elem()
}

func (o AntiInfoLeakArrayOutput) ToAntiInfoLeakArrayOutput() AntiInfoLeakArrayOutput {
	return o
}

func (o AntiInfoLeakArrayOutput) ToAntiInfoLeakArrayOutputWithContext(ctx context.Context) AntiInfoLeakArrayOutput {
	return o
}

func (o AntiInfoLeakArrayOutput) Index(i pulumi.IntInput) AntiInfoLeakOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AntiInfoLeak {
		return vs[0].([]*AntiInfoLeak)[vs[1].(int)]
	}).(AntiInfoLeakOutput)
}

type AntiInfoLeakMapOutput struct{ *pulumi.OutputState }

func (AntiInfoLeakMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AntiInfoLeak)(nil)).Elem()
}

func (o AntiInfoLeakMapOutput) ToAntiInfoLeakMapOutput() AntiInfoLeakMapOutput {
	return o
}

func (o AntiInfoLeakMapOutput) ToAntiInfoLeakMapOutputWithContext(ctx context.Context) AntiInfoLeakMapOutput {
	return o
}

func (o AntiInfoLeakMapOutput) MapIndex(k pulumi.StringInput) AntiInfoLeakOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AntiInfoLeak {
		return vs[0].(map[string]*AntiInfoLeak)[vs[1].(string)]
	}).(AntiInfoLeakOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AntiInfoLeakInput)(nil)).Elem(), &AntiInfoLeak{})
	pulumi.RegisterInputType(reflect.TypeOf((*AntiInfoLeakArrayInput)(nil)).Elem(), AntiInfoLeakArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AntiInfoLeakMapInput)(nil)).Elem(), AntiInfoLeakMap{})
	pulumi.RegisterOutputType(AntiInfoLeakOutput{})
	pulumi.RegisterOutputType(AntiInfoLeakArrayOutput{})
	pulumi.RegisterOutputType(AntiInfoLeakMapOutput{})
}
