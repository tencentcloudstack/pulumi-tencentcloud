// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a waf moduleStatus
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewModuleStatus(ctx, "example", &Waf.ModuleStatusArgs{
//				AccessControl: pulumi.Int(0),
//				AntiLeakage:   pulumi.Int(0),
//				AntiTamper:    pulumi.Int(1),
//				ApiProtection: pulumi.Int(1),
//				CcProtection:  pulumi.Int(1),
//				Domain:        pulumi.String("demo.waf.com"),
//				WebSecurity:   pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// waf module_status can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Waf/moduleStatus:ModuleStatus example demo.waf.com
//
// ```
type ModuleStatus struct {
	pulumi.CustomResourceState

	// ACL module status, 0:closed, 1:opened.
	AccessControl pulumi.IntOutput `pulumi:"accessControl"`
	// Anti leakage module status, 0:closed, 1:opened.
	AntiLeakage pulumi.IntPtrOutput `pulumi:"antiLeakage"`
	// Anti tamper module status, 0:closed, 1:opened.
	AntiTamper pulumi.IntPtrOutput `pulumi:"antiTamper"`
	// API security module status, 0:closed, 1:opened.
	ApiProtection pulumi.IntOutput `pulumi:"apiProtection"`
	// CC module status, 0:closed, 1:opened.
	CcProtection pulumi.IntOutput `pulumi:"ccProtection"`
	// Domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// WEB security module status, 0:closed, 1:opened.
	WebSecurity pulumi.IntOutput `pulumi:"webSecurity"`
}

// NewModuleStatus registers a new resource with the given unique name, arguments, and options.
func NewModuleStatus(ctx *pulumi.Context,
	name string, args *ModuleStatusArgs, opts ...pulumi.ResourceOption) (*ModuleStatus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessControl == nil {
		return nil, errors.New("invalid value for required argument 'AccessControl'")
	}
	if args.ApiProtection == nil {
		return nil, errors.New("invalid value for required argument 'ApiProtection'")
	}
	if args.CcProtection == nil {
		return nil, errors.New("invalid value for required argument 'CcProtection'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.WebSecurity == nil {
		return nil, errors.New("invalid value for required argument 'WebSecurity'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ModuleStatus
	err := ctx.RegisterResource("tencentcloud:Waf/moduleStatus:ModuleStatus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModuleStatus gets an existing ModuleStatus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModuleStatus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModuleStatusState, opts ...pulumi.ResourceOption) (*ModuleStatus, error) {
	var resource ModuleStatus
	err := ctx.ReadResource("tencentcloud:Waf/moduleStatus:ModuleStatus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModuleStatus resources.
type moduleStatusState struct {
	// ACL module status, 0:closed, 1:opened.
	AccessControl *int `pulumi:"accessControl"`
	// Anti leakage module status, 0:closed, 1:opened.
	AntiLeakage *int `pulumi:"antiLeakage"`
	// Anti tamper module status, 0:closed, 1:opened.
	AntiTamper *int `pulumi:"antiTamper"`
	// API security module status, 0:closed, 1:opened.
	ApiProtection *int `pulumi:"apiProtection"`
	// CC module status, 0:closed, 1:opened.
	CcProtection *int `pulumi:"ccProtection"`
	// Domain.
	Domain *string `pulumi:"domain"`
	// WEB security module status, 0:closed, 1:opened.
	WebSecurity *int `pulumi:"webSecurity"`
}

type ModuleStatusState struct {
	// ACL module status, 0:closed, 1:opened.
	AccessControl pulumi.IntPtrInput
	// Anti leakage module status, 0:closed, 1:opened.
	AntiLeakage pulumi.IntPtrInput
	// Anti tamper module status, 0:closed, 1:opened.
	AntiTamper pulumi.IntPtrInput
	// API security module status, 0:closed, 1:opened.
	ApiProtection pulumi.IntPtrInput
	// CC module status, 0:closed, 1:opened.
	CcProtection pulumi.IntPtrInput
	// Domain.
	Domain pulumi.StringPtrInput
	// WEB security module status, 0:closed, 1:opened.
	WebSecurity pulumi.IntPtrInput
}

func (ModuleStatusState) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleStatusState)(nil)).Elem()
}

type moduleStatusArgs struct {
	// ACL module status, 0:closed, 1:opened.
	AccessControl int `pulumi:"accessControl"`
	// Anti leakage module status, 0:closed, 1:opened.
	AntiLeakage *int `pulumi:"antiLeakage"`
	// Anti tamper module status, 0:closed, 1:opened.
	AntiTamper *int `pulumi:"antiTamper"`
	// API security module status, 0:closed, 1:opened.
	ApiProtection int `pulumi:"apiProtection"`
	// CC module status, 0:closed, 1:opened.
	CcProtection int `pulumi:"ccProtection"`
	// Domain.
	Domain string `pulumi:"domain"`
	// WEB security module status, 0:closed, 1:opened.
	WebSecurity int `pulumi:"webSecurity"`
}

// The set of arguments for constructing a ModuleStatus resource.
type ModuleStatusArgs struct {
	// ACL module status, 0:closed, 1:opened.
	AccessControl pulumi.IntInput
	// Anti leakage module status, 0:closed, 1:opened.
	AntiLeakage pulumi.IntPtrInput
	// Anti tamper module status, 0:closed, 1:opened.
	AntiTamper pulumi.IntPtrInput
	// API security module status, 0:closed, 1:opened.
	ApiProtection pulumi.IntInput
	// CC module status, 0:closed, 1:opened.
	CcProtection pulumi.IntInput
	// Domain.
	Domain pulumi.StringInput
	// WEB security module status, 0:closed, 1:opened.
	WebSecurity pulumi.IntInput
}

func (ModuleStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleStatusArgs)(nil)).Elem()
}

type ModuleStatusInput interface {
	pulumi.Input

	ToModuleStatusOutput() ModuleStatusOutput
	ToModuleStatusOutputWithContext(ctx context.Context) ModuleStatusOutput
}

func (*ModuleStatus) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleStatus)(nil)).Elem()
}

func (i *ModuleStatus) ToModuleStatusOutput() ModuleStatusOutput {
	return i.ToModuleStatusOutputWithContext(context.Background())
}

func (i *ModuleStatus) ToModuleStatusOutputWithContext(ctx context.Context) ModuleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleStatusOutput)
}

// ModuleStatusArrayInput is an input type that accepts ModuleStatusArray and ModuleStatusArrayOutput values.
// You can construct a concrete instance of `ModuleStatusArrayInput` via:
//
//	ModuleStatusArray{ ModuleStatusArgs{...} }
type ModuleStatusArrayInput interface {
	pulumi.Input

	ToModuleStatusArrayOutput() ModuleStatusArrayOutput
	ToModuleStatusArrayOutputWithContext(context.Context) ModuleStatusArrayOutput
}

type ModuleStatusArray []ModuleStatusInput

func (ModuleStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModuleStatus)(nil)).Elem()
}

func (i ModuleStatusArray) ToModuleStatusArrayOutput() ModuleStatusArrayOutput {
	return i.ToModuleStatusArrayOutputWithContext(context.Background())
}

func (i ModuleStatusArray) ToModuleStatusArrayOutputWithContext(ctx context.Context) ModuleStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleStatusArrayOutput)
}

// ModuleStatusMapInput is an input type that accepts ModuleStatusMap and ModuleStatusMapOutput values.
// You can construct a concrete instance of `ModuleStatusMapInput` via:
//
//	ModuleStatusMap{ "key": ModuleStatusArgs{...} }
type ModuleStatusMapInput interface {
	pulumi.Input

	ToModuleStatusMapOutput() ModuleStatusMapOutput
	ToModuleStatusMapOutputWithContext(context.Context) ModuleStatusMapOutput
}

type ModuleStatusMap map[string]ModuleStatusInput

func (ModuleStatusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModuleStatus)(nil)).Elem()
}

func (i ModuleStatusMap) ToModuleStatusMapOutput() ModuleStatusMapOutput {
	return i.ToModuleStatusMapOutputWithContext(context.Background())
}

func (i ModuleStatusMap) ToModuleStatusMapOutputWithContext(ctx context.Context) ModuleStatusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleStatusMapOutput)
}

type ModuleStatusOutput struct{ *pulumi.OutputState }

func (ModuleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleStatus)(nil)).Elem()
}

func (o ModuleStatusOutput) ToModuleStatusOutput() ModuleStatusOutput {
	return o
}

func (o ModuleStatusOutput) ToModuleStatusOutputWithContext(ctx context.Context) ModuleStatusOutput {
	return o
}

// ACL module status, 0:closed, 1:opened.
func (o ModuleStatusOutput) AccessControl() pulumi.IntOutput {
	return o.ApplyT(func(v *ModuleStatus) pulumi.IntOutput { return v.AccessControl }).(pulumi.IntOutput)
}

// Anti leakage module status, 0:closed, 1:opened.
func (o ModuleStatusOutput) AntiLeakage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ModuleStatus) pulumi.IntPtrOutput { return v.AntiLeakage }).(pulumi.IntPtrOutput)
}

// Anti tamper module status, 0:closed, 1:opened.
func (o ModuleStatusOutput) AntiTamper() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ModuleStatus) pulumi.IntPtrOutput { return v.AntiTamper }).(pulumi.IntPtrOutput)
}

// API security module status, 0:closed, 1:opened.
func (o ModuleStatusOutput) ApiProtection() pulumi.IntOutput {
	return o.ApplyT(func(v *ModuleStatus) pulumi.IntOutput { return v.ApiProtection }).(pulumi.IntOutput)
}

// CC module status, 0:closed, 1:opened.
func (o ModuleStatusOutput) CcProtection() pulumi.IntOutput {
	return o.ApplyT(func(v *ModuleStatus) pulumi.IntOutput { return v.CcProtection }).(pulumi.IntOutput)
}

// Domain.
func (o ModuleStatusOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *ModuleStatus) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// WEB security module status, 0:closed, 1:opened.
func (o ModuleStatusOutput) WebSecurity() pulumi.IntOutput {
	return o.ApplyT(func(v *ModuleStatus) pulumi.IntOutput { return v.WebSecurity }).(pulumi.IntOutput)
}

type ModuleStatusArrayOutput struct{ *pulumi.OutputState }

func (ModuleStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModuleStatus)(nil)).Elem()
}

func (o ModuleStatusArrayOutput) ToModuleStatusArrayOutput() ModuleStatusArrayOutput {
	return o
}

func (o ModuleStatusArrayOutput) ToModuleStatusArrayOutputWithContext(ctx context.Context) ModuleStatusArrayOutput {
	return o
}

func (o ModuleStatusArrayOutput) Index(i pulumi.IntInput) ModuleStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ModuleStatus {
		return vs[0].([]*ModuleStatus)[vs[1].(int)]
	}).(ModuleStatusOutput)
}

type ModuleStatusMapOutput struct{ *pulumi.OutputState }

func (ModuleStatusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModuleStatus)(nil)).Elem()
}

func (o ModuleStatusMapOutput) ToModuleStatusMapOutput() ModuleStatusMapOutput {
	return o
}

func (o ModuleStatusMapOutput) ToModuleStatusMapOutputWithContext(ctx context.Context) ModuleStatusMapOutput {
	return o
}

func (o ModuleStatusMapOutput) MapIndex(k pulumi.StringInput) ModuleStatusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ModuleStatus {
		return vs[0].(map[string]*ModuleStatus)[vs[1].(string)]
	}).(ModuleStatusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleStatusInput)(nil)).Elem(), &ModuleStatus{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleStatusArrayInput)(nil)).Elem(), ModuleStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleStatusMapInput)(nil)).Elem(), ModuleStatusMap{})
	pulumi.RegisterOutputType(ModuleStatusOutput{})
	pulumi.RegisterOutputType(ModuleStatusArrayOutput{})
	pulumi.RegisterOutputType(ModuleStatusMapOutput{})
}
