// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a waf antiFake
//
// > **NOTE:** Uri: Please configure static resources such as. html,. shtml,. txt,. js,. css,. jpg,. png, or access paths for static resources..
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewAntiFake(ctx, "example", &Waf.AntiFakeArgs{
//				Domain: pulumi.String("www.waf.com"),
//				Status: pulumi.Int(1),
//				Uri:    pulumi.String("/anti_fake_url.html"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// waf anti_fake can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Waf/antiFake:AntiFake example 3200035516#www.waf.com
//
// ```
type AntiFake struct {
	pulumi.CustomResourceState

	// Domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// protocol.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// rule id.
	RuleId pulumi.IntOutput `pulumi:"ruleId"`
	// status. 0: Turn off rules and log switches, 1: Turn on the rule switch and Turn off the log switch; 2: Turn off the rule switch and turn on the log switch;3: Turn on the log switch.
	Status pulumi.IntPtrOutput `pulumi:"status"`
	// Uri.
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewAntiFake registers a new resource with the given unique name, arguments, and options.
func NewAntiFake(ctx *pulumi.Context,
	name string, args *AntiFakeArgs, opts ...pulumi.ResourceOption) (*AntiFake, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Uri == nil {
		return nil, errors.New("invalid value for required argument 'Uri'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AntiFake
	err := ctx.RegisterResource("tencentcloud:Waf/antiFake:AntiFake", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAntiFake gets an existing AntiFake resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAntiFake(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AntiFakeState, opts ...pulumi.ResourceOption) (*AntiFake, error) {
	var resource AntiFake
	err := ctx.ReadResource("tencentcloud:Waf/antiFake:AntiFake", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AntiFake resources.
type antiFakeState struct {
	// Domain.
	Domain *string `pulumi:"domain"`
	// Name.
	Name *string `pulumi:"name"`
	// protocol.
	Protocol *string `pulumi:"protocol"`
	// rule id.
	RuleId *int `pulumi:"ruleId"`
	// status. 0: Turn off rules and log switches, 1: Turn on the rule switch and Turn off the log switch; 2: Turn off the rule switch and turn on the log switch;3: Turn on the log switch.
	Status *int `pulumi:"status"`
	// Uri.
	Uri *string `pulumi:"uri"`
}

type AntiFakeState struct {
	// Domain.
	Domain pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// protocol.
	Protocol pulumi.StringPtrInput
	// rule id.
	RuleId pulumi.IntPtrInput
	// status. 0: Turn off rules and log switches, 1: Turn on the rule switch and Turn off the log switch; 2: Turn off the rule switch and turn on the log switch;3: Turn on the log switch.
	Status pulumi.IntPtrInput
	// Uri.
	Uri pulumi.StringPtrInput
}

func (AntiFakeState) ElementType() reflect.Type {
	return reflect.TypeOf((*antiFakeState)(nil)).Elem()
}

type antiFakeArgs struct {
	// Domain.
	Domain string `pulumi:"domain"`
	// Name.
	Name *string `pulumi:"name"`
	// status. 0: Turn off rules and log switches, 1: Turn on the rule switch and Turn off the log switch; 2: Turn off the rule switch and turn on the log switch;3: Turn on the log switch.
	Status *int `pulumi:"status"`
	// Uri.
	Uri string `pulumi:"uri"`
}

// The set of arguments for constructing a AntiFake resource.
type AntiFakeArgs struct {
	// Domain.
	Domain pulumi.StringInput
	// Name.
	Name pulumi.StringPtrInput
	// status. 0: Turn off rules and log switches, 1: Turn on the rule switch and Turn off the log switch; 2: Turn off the rule switch and turn on the log switch;3: Turn on the log switch.
	Status pulumi.IntPtrInput
	// Uri.
	Uri pulumi.StringInput
}

func (AntiFakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*antiFakeArgs)(nil)).Elem()
}

type AntiFakeInput interface {
	pulumi.Input

	ToAntiFakeOutput() AntiFakeOutput
	ToAntiFakeOutputWithContext(ctx context.Context) AntiFakeOutput
}

func (*AntiFake) ElementType() reflect.Type {
	return reflect.TypeOf((**AntiFake)(nil)).Elem()
}

func (i *AntiFake) ToAntiFakeOutput() AntiFakeOutput {
	return i.ToAntiFakeOutputWithContext(context.Background())
}

func (i *AntiFake) ToAntiFakeOutputWithContext(ctx context.Context) AntiFakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiFakeOutput)
}

// AntiFakeArrayInput is an input type that accepts AntiFakeArray and AntiFakeArrayOutput values.
// You can construct a concrete instance of `AntiFakeArrayInput` via:
//
//	AntiFakeArray{ AntiFakeArgs{...} }
type AntiFakeArrayInput interface {
	pulumi.Input

	ToAntiFakeArrayOutput() AntiFakeArrayOutput
	ToAntiFakeArrayOutputWithContext(context.Context) AntiFakeArrayOutput
}

type AntiFakeArray []AntiFakeInput

func (AntiFakeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AntiFake)(nil)).Elem()
}

func (i AntiFakeArray) ToAntiFakeArrayOutput() AntiFakeArrayOutput {
	return i.ToAntiFakeArrayOutputWithContext(context.Background())
}

func (i AntiFakeArray) ToAntiFakeArrayOutputWithContext(ctx context.Context) AntiFakeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiFakeArrayOutput)
}

// AntiFakeMapInput is an input type that accepts AntiFakeMap and AntiFakeMapOutput values.
// You can construct a concrete instance of `AntiFakeMapInput` via:
//
//	AntiFakeMap{ "key": AntiFakeArgs{...} }
type AntiFakeMapInput interface {
	pulumi.Input

	ToAntiFakeMapOutput() AntiFakeMapOutput
	ToAntiFakeMapOutputWithContext(context.Context) AntiFakeMapOutput
}

type AntiFakeMap map[string]AntiFakeInput

func (AntiFakeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AntiFake)(nil)).Elem()
}

func (i AntiFakeMap) ToAntiFakeMapOutput() AntiFakeMapOutput {
	return i.ToAntiFakeMapOutputWithContext(context.Background())
}

func (i AntiFakeMap) ToAntiFakeMapOutputWithContext(ctx context.Context) AntiFakeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AntiFakeMapOutput)
}

type AntiFakeOutput struct{ *pulumi.OutputState }

func (AntiFakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AntiFake)(nil)).Elem()
}

func (o AntiFakeOutput) ToAntiFakeOutput() AntiFakeOutput {
	return o
}

func (o AntiFakeOutput) ToAntiFakeOutputWithContext(ctx context.Context) AntiFakeOutput {
	return o
}

// Domain.
func (o AntiFakeOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiFake) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Name.
func (o AntiFakeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiFake) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// protocol.
func (o AntiFakeOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiFake) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// rule id.
func (o AntiFakeOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *AntiFake) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

// status. 0: Turn off rules and log switches, 1: Turn on the rule switch and Turn off the log switch; 2: Turn off the rule switch and turn on the log switch;3: Turn on the log switch.
func (o AntiFakeOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AntiFake) pulumi.IntPtrOutput { return v.Status }).(pulumi.IntPtrOutput)
}

// Uri.
func (o AntiFakeOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *AntiFake) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

type AntiFakeArrayOutput struct{ *pulumi.OutputState }

func (AntiFakeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AntiFake)(nil)).Elem()
}

func (o AntiFakeArrayOutput) ToAntiFakeArrayOutput() AntiFakeArrayOutput {
	return o
}

func (o AntiFakeArrayOutput) ToAntiFakeArrayOutputWithContext(ctx context.Context) AntiFakeArrayOutput {
	return o
}

func (o AntiFakeArrayOutput) Index(i pulumi.IntInput) AntiFakeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AntiFake {
		return vs[0].([]*AntiFake)[vs[1].(int)]
	}).(AntiFakeOutput)
}

type AntiFakeMapOutput struct{ *pulumi.OutputState }

func (AntiFakeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AntiFake)(nil)).Elem()
}

func (o AntiFakeMapOutput) ToAntiFakeMapOutput() AntiFakeMapOutput {
	return o
}

func (o AntiFakeMapOutput) ToAntiFakeMapOutputWithContext(ctx context.Context) AntiFakeMapOutput {
	return o
}

func (o AntiFakeMapOutput) MapIndex(k pulumi.StringInput) AntiFakeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AntiFake {
		return vs[0].(map[string]*AntiFake)[vs[1].(string)]
	}).(AntiFakeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AntiFakeInput)(nil)).Elem(), &AntiFake{})
	pulumi.RegisterInputType(reflect.TypeOf((*AntiFakeArrayInput)(nil)).Elem(), AntiFakeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AntiFakeMapInput)(nil)).Elem(), AntiFakeMap{})
	pulumi.RegisterOutputType(AntiFakeOutput{})
	pulumi.RegisterOutputType(AntiFakeArrayOutput{})
	pulumi.RegisterOutputType(AntiFakeMapOutput{})
}
