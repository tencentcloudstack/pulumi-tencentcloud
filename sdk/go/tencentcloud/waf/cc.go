// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a waf cc
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewCc(ctx, "example", &Waf.CcArgs{
//				ActionType: pulumi.String("22"),
//				Advance:    pulumi.String("0"),
//				Domain:     pulumi.String("www.demo.com"),
//				Edition:    pulumi.String("sparta-waf"),
//				Interval:   pulumi.String("60"),
//				Limit:      pulumi.String("60"),
//				MatchFunc:  pulumi.Int(0),
//				Priority:   pulumi.Int(50),
//				Status:     pulumi.Int(1),
//				Type:       pulumi.Int(1),
//				Url:        pulumi.String("/cc_demo"),
//				ValidTime:  pulumi.Int(600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Cc struct {
	pulumi.CustomResourceState

	// Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
	ActionType pulumi.StringOutput `pulumi:"actionType"`
	// Session match mode, 0 use session, 1 use ip.
	Advance pulumi.StringOutput `pulumi:"advance"`
	// Domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
	Edition pulumi.StringOutput `pulumi:"edition"`
	// Event ID.
	EventId pulumi.StringPtrOutput `pulumi:"eventId"`
	// Interval.
	Interval pulumi.StringOutput `pulumi:"interval"`
	// CC detection threshold.
	Limit pulumi.StringOutput `pulumi:"limit"`
	// Match method, 0 equal, 1 contains, 2 prefix.
	MatchFunc pulumi.IntOutput `pulumi:"matchFunc"`
	// Rule Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Rule Priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Rule ID.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// Advance mode use session id.
	SessionApplieds pulumi.IntArrayOutput `pulumi:"sessionApplieds"`
	// Rule Status, 0 rule close, 1 rule open.
	Status pulumi.IntOutput `pulumi:"status"`
	// Operate Type.
	Type pulumi.IntPtrOutput `pulumi:"type"`
	// Check URL.
	Url pulumi.StringOutput `pulumi:"url"`
	// Action ValidTime, minute unit. Min: 60, Max: 604800.
	ValidTime pulumi.IntOutput `pulumi:"validTime"`
}

// NewCc registers a new resource with the given unique name, arguments, and options.
func NewCc(ctx *pulumi.Context,
	name string, args *CcArgs, opts ...pulumi.ResourceOption) (*Cc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionType == nil {
		return nil, errors.New("invalid value for required argument 'ActionType'")
	}
	if args.Advance == nil {
		return nil, errors.New("invalid value for required argument 'Advance'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Edition == nil {
		return nil, errors.New("invalid value for required argument 'Edition'")
	}
	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.Limit == nil {
		return nil, errors.New("invalid value for required argument 'Limit'")
	}
	if args.MatchFunc == nil {
		return nil, errors.New("invalid value for required argument 'MatchFunc'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.ValidTime == nil {
		return nil, errors.New("invalid value for required argument 'ValidTime'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Cc
	err := ctx.RegisterResource("tencentcloud:Waf/cc:Cc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCc gets an existing Cc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CcState, opts ...pulumi.ResourceOption) (*Cc, error) {
	var resource Cc
	err := ctx.ReadResource("tencentcloud:Waf/cc:Cc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cc resources.
type ccState struct {
	// Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
	ActionType *string `pulumi:"actionType"`
	// Session match mode, 0 use session, 1 use ip.
	Advance *string `pulumi:"advance"`
	// Domain.
	Domain *string `pulumi:"domain"`
	// WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
	Edition *string `pulumi:"edition"`
	// Event ID.
	EventId *string `pulumi:"eventId"`
	// Interval.
	Interval *string `pulumi:"interval"`
	// CC detection threshold.
	Limit *string `pulumi:"limit"`
	// Match method, 0 equal, 1 contains, 2 prefix.
	MatchFunc *int `pulumi:"matchFunc"`
	// Rule Name.
	Name *string `pulumi:"name"`
	// Rule Priority.
	Priority *int `pulumi:"priority"`
	// Rule ID.
	RuleId *string `pulumi:"ruleId"`
	// Advance mode use session id.
	SessionApplieds []int `pulumi:"sessionApplieds"`
	// Rule Status, 0 rule close, 1 rule open.
	Status *int `pulumi:"status"`
	// Operate Type.
	Type *int `pulumi:"type"`
	// Check URL.
	Url *string `pulumi:"url"`
	// Action ValidTime, minute unit. Min: 60, Max: 604800.
	ValidTime *int `pulumi:"validTime"`
}

type CcState struct {
	// Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
	ActionType pulumi.StringPtrInput
	// Session match mode, 0 use session, 1 use ip.
	Advance pulumi.StringPtrInput
	// Domain.
	Domain pulumi.StringPtrInput
	// WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
	Edition pulumi.StringPtrInput
	// Event ID.
	EventId pulumi.StringPtrInput
	// Interval.
	Interval pulumi.StringPtrInput
	// CC detection threshold.
	Limit pulumi.StringPtrInput
	// Match method, 0 equal, 1 contains, 2 prefix.
	MatchFunc pulumi.IntPtrInput
	// Rule Name.
	Name pulumi.StringPtrInput
	// Rule Priority.
	Priority pulumi.IntPtrInput
	// Rule ID.
	RuleId pulumi.StringPtrInput
	// Advance mode use session id.
	SessionApplieds pulumi.IntArrayInput
	// Rule Status, 0 rule close, 1 rule open.
	Status pulumi.IntPtrInput
	// Operate Type.
	Type pulumi.IntPtrInput
	// Check URL.
	Url pulumi.StringPtrInput
	// Action ValidTime, minute unit. Min: 60, Max: 604800.
	ValidTime pulumi.IntPtrInput
}

func (CcState) ElementType() reflect.Type {
	return reflect.TypeOf((*ccState)(nil)).Elem()
}

type ccArgs struct {
	// Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
	ActionType string `pulumi:"actionType"`
	// Session match mode, 0 use session, 1 use ip.
	Advance string `pulumi:"advance"`
	// Domain.
	Domain string `pulumi:"domain"`
	// WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
	Edition string `pulumi:"edition"`
	// Event ID.
	EventId *string `pulumi:"eventId"`
	// Interval.
	Interval string `pulumi:"interval"`
	// CC detection threshold.
	Limit string `pulumi:"limit"`
	// Match method, 0 equal, 1 contains, 2 prefix.
	MatchFunc int `pulumi:"matchFunc"`
	// Rule Name.
	Name *string `pulumi:"name"`
	// Rule Priority.
	Priority int `pulumi:"priority"`
	// Advance mode use session id.
	SessionApplieds []int `pulumi:"sessionApplieds"`
	// Rule Status, 0 rule close, 1 rule open.
	Status int `pulumi:"status"`
	// Operate Type.
	Type *int `pulumi:"type"`
	// Check URL.
	Url string `pulumi:"url"`
	// Action ValidTime, minute unit. Min: 60, Max: 604800.
	ValidTime int `pulumi:"validTime"`
}

// The set of arguments for constructing a Cc resource.
type CcArgs struct {
	// Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
	ActionType pulumi.StringInput
	// Session match mode, 0 use session, 1 use ip.
	Advance pulumi.StringInput
	// Domain.
	Domain pulumi.StringInput
	// WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
	Edition pulumi.StringInput
	// Event ID.
	EventId pulumi.StringPtrInput
	// Interval.
	Interval pulumi.StringInput
	// CC detection threshold.
	Limit pulumi.StringInput
	// Match method, 0 equal, 1 contains, 2 prefix.
	MatchFunc pulumi.IntInput
	// Rule Name.
	Name pulumi.StringPtrInput
	// Rule Priority.
	Priority pulumi.IntInput
	// Advance mode use session id.
	SessionApplieds pulumi.IntArrayInput
	// Rule Status, 0 rule close, 1 rule open.
	Status pulumi.IntInput
	// Operate Type.
	Type pulumi.IntPtrInput
	// Check URL.
	Url pulumi.StringInput
	// Action ValidTime, minute unit. Min: 60, Max: 604800.
	ValidTime pulumi.IntInput
}

func (CcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ccArgs)(nil)).Elem()
}

type CcInput interface {
	pulumi.Input

	ToCcOutput() CcOutput
	ToCcOutputWithContext(ctx context.Context) CcOutput
}

func (*Cc) ElementType() reflect.Type {
	return reflect.TypeOf((**Cc)(nil)).Elem()
}

func (i *Cc) ToCcOutput() CcOutput {
	return i.ToCcOutputWithContext(context.Background())
}

func (i *Cc) ToCcOutputWithContext(ctx context.Context) CcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcOutput)
}

// CcArrayInput is an input type that accepts CcArray and CcArrayOutput values.
// You can construct a concrete instance of `CcArrayInput` via:
//
//	CcArray{ CcArgs{...} }
type CcArrayInput interface {
	pulumi.Input

	ToCcArrayOutput() CcArrayOutput
	ToCcArrayOutputWithContext(context.Context) CcArrayOutput
}

type CcArray []CcInput

func (CcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cc)(nil)).Elem()
}

func (i CcArray) ToCcArrayOutput() CcArrayOutput {
	return i.ToCcArrayOutputWithContext(context.Background())
}

func (i CcArray) ToCcArrayOutputWithContext(ctx context.Context) CcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcArrayOutput)
}

// CcMapInput is an input type that accepts CcMap and CcMapOutput values.
// You can construct a concrete instance of `CcMapInput` via:
//
//	CcMap{ "key": CcArgs{...} }
type CcMapInput interface {
	pulumi.Input

	ToCcMapOutput() CcMapOutput
	ToCcMapOutputWithContext(context.Context) CcMapOutput
}

type CcMap map[string]CcInput

func (CcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cc)(nil)).Elem()
}

func (i CcMap) ToCcMapOutput() CcMapOutput {
	return i.ToCcMapOutputWithContext(context.Background())
}

func (i CcMap) ToCcMapOutputWithContext(ctx context.Context) CcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcMapOutput)
}

type CcOutput struct{ *pulumi.OutputState }

func (CcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cc)(nil)).Elem()
}

func (o CcOutput) ToCcOutput() CcOutput {
	return o
}

func (o CcOutput) ToCcOutputWithContext(ctx context.Context) CcOutput {
	return o
}

// Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
func (o CcOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cc) pulumi.StringOutput { return v.ActionType }).(pulumi.StringOutput)
}

// Session match mode, 0 use session, 1 use ip.
func (o CcOutput) Advance() pulumi.StringOutput {
	return o.ApplyT(func(v *Cc) pulumi.StringOutput { return v.Advance }).(pulumi.StringOutput)
}

// Domain.
func (o CcOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Cc) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
func (o CcOutput) Edition() pulumi.StringOutput {
	return o.ApplyT(func(v *Cc) pulumi.StringOutput { return v.Edition }).(pulumi.StringOutput)
}

// Event ID.
func (o CcOutput) EventId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cc) pulumi.StringPtrOutput { return v.EventId }).(pulumi.StringPtrOutput)
}

// Interval.
func (o CcOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v *Cc) pulumi.StringOutput { return v.Interval }).(pulumi.StringOutput)
}

// CC detection threshold.
func (o CcOutput) Limit() pulumi.StringOutput {
	return o.ApplyT(func(v *Cc) pulumi.StringOutput { return v.Limit }).(pulumi.StringOutput)
}

// Match method, 0 equal, 1 contains, 2 prefix.
func (o CcOutput) MatchFunc() pulumi.IntOutput {
	return o.ApplyT(func(v *Cc) pulumi.IntOutput { return v.MatchFunc }).(pulumi.IntOutput)
}

// Rule Name.
func (o CcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Rule Priority.
func (o CcOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Cc) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Rule ID.
func (o CcOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cc) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

// Advance mode use session id.
func (o CcOutput) SessionApplieds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Cc) pulumi.IntArrayOutput { return v.SessionApplieds }).(pulumi.IntArrayOutput)
}

// Rule Status, 0 rule close, 1 rule open.
func (o CcOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *Cc) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Operate Type.
func (o CcOutput) Type() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cc) pulumi.IntPtrOutput { return v.Type }).(pulumi.IntPtrOutput)
}

// Check URL.
func (o CcOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Cc) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Action ValidTime, minute unit. Min: 60, Max: 604800.
func (o CcOutput) ValidTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Cc) pulumi.IntOutput { return v.ValidTime }).(pulumi.IntOutput)
}

type CcArrayOutput struct{ *pulumi.OutputState }

func (CcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cc)(nil)).Elem()
}

func (o CcArrayOutput) ToCcArrayOutput() CcArrayOutput {
	return o
}

func (o CcArrayOutput) ToCcArrayOutputWithContext(ctx context.Context) CcArrayOutput {
	return o
}

func (o CcArrayOutput) Index(i pulumi.IntInput) CcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cc {
		return vs[0].([]*Cc)[vs[1].(int)]
	}).(CcOutput)
}

type CcMapOutput struct{ *pulumi.OutputState }

func (CcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cc)(nil)).Elem()
}

func (o CcMapOutput) ToCcMapOutput() CcMapOutput {
	return o
}

func (o CcMapOutput) ToCcMapOutputWithContext(ctx context.Context) CcMapOutput {
	return o
}

func (o CcMapOutput) MapIndex(k pulumi.StringInput) CcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cc {
		return vs[0].(map[string]*Cc)[vs[1].(string)]
	}).(CcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CcInput)(nil)).Elem(), &Cc{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcArrayInput)(nil)).Elem(), CcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcMapInput)(nil)).Elem(), CcMap{})
	pulumi.RegisterOutputType(CcOutput{})
	pulumi.RegisterOutputType(CcArrayOutput{})
	pulumi.RegisterOutputType(CcMapOutput{})
}
