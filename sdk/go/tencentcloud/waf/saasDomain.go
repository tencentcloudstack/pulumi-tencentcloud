// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a waf saasDomain
//
// ## Example Usage
// ### If upstreamType is 0
//
// # Create a basic waf saas domain
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewSaasDomain(ctx, "example", &Waf.SaasDomainArgs{
//				Domain:     pulumi.String("tf.example.com"),
//				InstanceId: pulumi.String("waf_2kxtlbky01b3wceb"),
//				Ports: waf.SaasDomainPortArray{
//					&waf.SaasDomainPortArgs{
//						Port:             pulumi.String("80"),
//						Protocol:         pulumi.String("http"),
//						UpstreamPort:     pulumi.String("80"),
//						UpstreamProtocol: pulumi.String("http"),
//					},
//				},
//				SrcLists: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a load balancing strategy is weighted polling saas domain
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewSaasDomain(ctx, "example", &Waf.SaasDomainArgs{
//				Domain:      pulumi.String("tf.example.com"),
//				InstanceId:  pulumi.String("waf_2kxtlbky01b3wceb"),
//				LoadBalance: pulumi.String("2"),
//				Ports: waf.SaasDomainPortArray{
//					&waf.SaasDomainPortArgs{
//						Port:             pulumi.String("80"),
//						Protocol:         pulumi.String("http"),
//						UpstreamPort:     pulumi.String("80"),
//						UpstreamProtocol: pulumi.String("http"),
//					},
//				},
//				SrcLists: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//					pulumi.String("2.2.2.2"),
//				},
//				Weights: pulumi.IntArray{
//					pulumi.Int(30),
//					pulumi.Int(50),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### If upstreamType is 1
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewSaasDomain(ctx, "example", &Waf.SaasDomainArgs{
//				Domain:     pulumi.String("tf.example.com"),
//				InstanceId: pulumi.String("waf_2kxtlbky01b3wceb"),
//				Ports: waf.SaasDomainPortArray{
//					&waf.SaasDomainPortArgs{
//						Port:             pulumi.String("80"),
//						Protocol:         pulumi.String("http"),
//						UpstreamPort:     pulumi.String("80"),
//						UpstreamProtocol: pulumi.String("http"),
//					},
//				},
//				UpstreamDomain: pulumi.String("test.com"),
//				UpstreamType:   pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a waf saas domain with set Http&Https
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewSaasDomain(ctx, "example", &Waf.SaasDomainArgs{
//				CertType:     pulumi.Int(2),
//				Domain:       pulumi.String("tf.example.com"),
//				HttpsRewrite: pulumi.Int(1),
//				InstanceId:   pulumi.String("waf_2kxtlbky01b3wceb"),
//				IpHeaders: pulumi.StringArray{
//					pulumi.String("headers_1"),
//					pulumi.String("headers_2"),
//					pulumi.String("headers_3"),
//				},
//				IsCdn:       pulumi.Int(3),
//				LoadBalance: pulumi.String("2"),
//				Ports: waf.SaasDomainPortArray{
//					&waf.SaasDomainPortArgs{
//						Port:             pulumi.String("80"),
//						Protocol:         pulumi.String("http"),
//						UpstreamPort:     pulumi.String("80"),
//						UpstreamProtocol: pulumi.String("http"),
//					},
//					&waf.SaasDomainPortArgs{
//						Port:             pulumi.String("443"),
//						Protocol:         pulumi.String("https"),
//						UpstreamPort:     pulumi.String("443"),
//						UpstreamProtocol: pulumi.String("https"),
//					},
//				},
//				SrcLists: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//					pulumi.String("2.2.2.2"),
//				},
//				SslId:          pulumi.String("3a6B5y8v"),
//				UpstreamScheme: pulumi.String("https"),
//				Weights: pulumi.IntArray{
//					pulumi.Int(50),
//					pulumi.Int(60),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a complete waf saas domain
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewSaasDomain(ctx, "example", &Waf.SaasDomainArgs{
//				ActiveCheck:    pulumi.Int(1),
//				ApiSafeStatus:  pulumi.Int(1),
//				BotStatus:      pulumi.Int(1),
//				CertType:       pulumi.Int(2),
//				CipherTemplate: pulumi.Int(1),
//				Domain:         pulumi.String("tf.example.com"),
//				HttpsRewrite:   pulumi.Int(1),
//				InstanceId:     pulumi.String("waf_2kxtlbky01b3wceb"),
//				IpHeaders: pulumi.StringArray{
//					pulumi.String("headers_1"),
//					pulumi.String("headers_2"),
//					pulumi.String("headers_3"),
//				},
//				IsCdn:       pulumi.Int(3),
//				IsHttp2:     pulumi.Int(1),
//				IsKeepAlive: pulumi.String("1"),
//				LoadBalance: pulumi.String("2"),
//				Ports: waf.SaasDomainPortArray{
//					&waf.SaasDomainPortArgs{
//						Port:             pulumi.String("80"),
//						Protocol:         pulumi.String("http"),
//						UpstreamPort:     pulumi.String("80"),
//						UpstreamProtocol: pulumi.String("http"),
//					},
//					&waf.SaasDomainPortArgs{
//						Port:             pulumi.String("443"),
//						Protocol:         pulumi.String("https"),
//						UpstreamPort:     pulumi.String("443"),
//						UpstreamProtocol: pulumi.String("https"),
//					},
//				},
//				ProxyReadTimeout: pulumi.Int(500),
//				ProxySendTimeout: pulumi.Int(500),
//				SniHost:          pulumi.String("3.3.3.3"),
//				SniType:          pulumi.Int(3),
//				SrcLists: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//					pulumi.String("2.2.2.2"),
//				},
//				SslId:          pulumi.String("3a6B5y8v"),
//				TlsVersion:     pulumi.Int(3),
//				UpstreamScheme: pulumi.String("https"),
//				Weights: pulumi.IntArray{
//					pulumi.Int(50),
//					pulumi.Int(60),
//				},
//				XffReset: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// waf saas_domain can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Waf/saasDomain:SaasDomain example waf_2kxtlbky01b3wceb#tf.example.com#9647c91da0aa5f5aaa49d0ca40e2af24
//
// ```
type SaasDomain struct {
	pulumi.CustomResourceState

	// Whether to enable active health detection, 0 represents disable and 1 represents enable.
	ActiveCheck pulumi.IntPtrOutput `pulumi:"activeCheck"`
	// Whether to enable api safe, 1 enable, 0 disable.
	ApiSafeStatus pulumi.IntPtrOutput `pulumi:"apiSafeStatus"`
	// Whether to enable bot, 1 enable, 0 disable.
	BotStatus pulumi.IntPtrOutput `pulumi:"botStatus"`
	// Certificate content, When CertType=1, this parameter needs to be filled.
	Cert pulumi.StringPtrOutput `pulumi:"cert"`
	// Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
	CertType pulumi.IntPtrOutput `pulumi:"certType"`
	// Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
	CipherTemplate pulumi.IntPtrOutput `pulumi:"cipherTemplate"`
	// Encryption Suite Information.
	Ciphers pulumi.IntArrayOutput `pulumi:"ciphers"`
	// Whether to enable access logs, 1 enable, 0 disable.
	ClsStatus pulumi.IntPtrOutput `pulumi:"clsStatus"`
	// Domain names that require defense.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Domain id.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// Whether redirect to https, 1 will redirect and 0 will not.
	HttpsRewrite pulumi.IntPtrOutput `pulumi:"httpsRewrite"`
	// Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
	HttpsUpstreamPort pulumi.StringPtrOutput `pulumi:"httpsUpstreamPort"`
	// Unique ID of Instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
	IpHeaders pulumi.StringArrayOutput `pulumi:"ipHeaders"`
	// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remoteAddr as client IP, 3 deployment and use values of custom headers as client IP.
	IsCdn pulumi.IntPtrOutput `pulumi:"isCdn"`
	// Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
	IsHttp2 pulumi.IntPtrOutput `pulumi:"isHttp2"`
	// Whether to enable keep-alive, 0 disable, 1 enable.
	IsKeepAlive pulumi.StringPtrOutput `pulumi:"isKeepAlive"`
	// Is WebSocket support enabled. 1 means enabled, 0 does not.
	IsWebsocket pulumi.IntPtrOutput `pulumi:"isWebsocket"`
	// Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
	LoadBalance pulumi.StringPtrOutput `pulumi:"loadBalance"`
	// This field needs to be set for multiple ports in the upstream server.
	Ports SaasDomainPortArrayOutput `pulumi:"ports"`
	// Certificate key, When CertType=1, this parameter needs to be filled.
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// 300s.
	ProxyReadTimeout pulumi.IntPtrOutput `pulumi:"proxyReadTimeout"`
	// 300s.
	ProxySendTimeout pulumi.IntPtrOutput `pulumi:"proxySendTimeout"`
	// When SniType=3, this parameter needs to be filled in to represent a custom host.
	SniHost pulumi.StringPtrOutput `pulumi:"sniHost"`
	// Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
	SniType pulumi.IntPtrOutput `pulumi:"sniType"`
	// Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
	SrcLists pulumi.StringArrayOutput `pulumi:"srcLists"`
	// Certificate ID, When CertType=2, this parameter needs to be filled.
	SslId pulumi.StringPtrOutput `pulumi:"sslId"`
	// Binding status between waf and LB, 0:not bind, 1:binding.
	Status pulumi.IntPtrOutput `pulumi:"status"`
	// Version of TLS Protocol.
	TlsVersion pulumi.IntPtrOutput `pulumi:"tlsVersion"`
	// Upstream domain, When UpstreamType=1, this parameter needs to be filled.
	UpstreamDomain pulumi.StringPtrOutput `pulumi:"upstreamDomain"`
	// Upstream scheme for https, http or https.
	UpstreamScheme pulumi.StringPtrOutput `pulumi:"upstreamScheme"`
	// Upstream type, 0 represents IP, 1 represents domain name.
	UpstreamType pulumi.IntPtrOutput `pulumi:"upstreamType"`
	// Weight of each upstream.
	Weights pulumi.IntArrayOutput `pulumi:"weights"`
	// 0:disable xff reset; 1:enable xff reset.
	XffReset pulumi.IntPtrOutput `pulumi:"xffReset"`
}

// NewSaasDomain registers a new resource with the given unique name, arguments, and options.
func NewSaasDomain(ctx *pulumi.Context,
	name string, args *SaasDomainArgs, opts ...pulumi.ResourceOption) (*SaasDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Ports == nil {
		return nil, errors.New("invalid value for required argument 'Ports'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SaasDomain
	err := ctx.RegisterResource("tencentcloud:Waf/saasDomain:SaasDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSaasDomain gets an existing SaasDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaasDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SaasDomainState, opts ...pulumi.ResourceOption) (*SaasDomain, error) {
	var resource SaasDomain
	err := ctx.ReadResource("tencentcloud:Waf/saasDomain:SaasDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SaasDomain resources.
type saasDomainState struct {
	// Whether to enable active health detection, 0 represents disable and 1 represents enable.
	ActiveCheck *int `pulumi:"activeCheck"`
	// Whether to enable api safe, 1 enable, 0 disable.
	ApiSafeStatus *int `pulumi:"apiSafeStatus"`
	// Whether to enable bot, 1 enable, 0 disable.
	BotStatus *int `pulumi:"botStatus"`
	// Certificate content, When CertType=1, this parameter needs to be filled.
	Cert *string `pulumi:"cert"`
	// Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
	CertType *int `pulumi:"certType"`
	// Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
	CipherTemplate *int `pulumi:"cipherTemplate"`
	// Encryption Suite Information.
	Ciphers []int `pulumi:"ciphers"`
	// Whether to enable access logs, 1 enable, 0 disable.
	ClsStatus *int `pulumi:"clsStatus"`
	// Domain names that require defense.
	Domain *string `pulumi:"domain"`
	// Domain id.
	DomainId *string `pulumi:"domainId"`
	// Whether redirect to https, 1 will redirect and 0 will not.
	HttpsRewrite *int `pulumi:"httpsRewrite"`
	// Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
	HttpsUpstreamPort *string `pulumi:"httpsUpstreamPort"`
	// Unique ID of Instance.
	InstanceId *string `pulumi:"instanceId"`
	// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
	IpHeaders []string `pulumi:"ipHeaders"`
	// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remoteAddr as client IP, 3 deployment and use values of custom headers as client IP.
	IsCdn *int `pulumi:"isCdn"`
	// Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
	IsHttp2 *int `pulumi:"isHttp2"`
	// Whether to enable keep-alive, 0 disable, 1 enable.
	IsKeepAlive *string `pulumi:"isKeepAlive"`
	// Is WebSocket support enabled. 1 means enabled, 0 does not.
	IsWebsocket *int `pulumi:"isWebsocket"`
	// Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
	LoadBalance *string `pulumi:"loadBalance"`
	// This field needs to be set for multiple ports in the upstream server.
	Ports []SaasDomainPort `pulumi:"ports"`
	// Certificate key, When CertType=1, this parameter needs to be filled.
	PrivateKey *string `pulumi:"privateKey"`
	// 300s.
	ProxyReadTimeout *int `pulumi:"proxyReadTimeout"`
	// 300s.
	ProxySendTimeout *int `pulumi:"proxySendTimeout"`
	// When SniType=3, this parameter needs to be filled in to represent a custom host.
	SniHost *string `pulumi:"sniHost"`
	// Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
	SniType *int `pulumi:"sniType"`
	// Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
	SrcLists []string `pulumi:"srcLists"`
	// Certificate ID, When CertType=2, this parameter needs to be filled.
	SslId *string `pulumi:"sslId"`
	// Binding status between waf and LB, 0:not bind, 1:binding.
	Status *int `pulumi:"status"`
	// Version of TLS Protocol.
	TlsVersion *int `pulumi:"tlsVersion"`
	// Upstream domain, When UpstreamType=1, this parameter needs to be filled.
	UpstreamDomain *string `pulumi:"upstreamDomain"`
	// Upstream scheme for https, http or https.
	UpstreamScheme *string `pulumi:"upstreamScheme"`
	// Upstream type, 0 represents IP, 1 represents domain name.
	UpstreamType *int `pulumi:"upstreamType"`
	// Weight of each upstream.
	Weights []int `pulumi:"weights"`
	// 0:disable xff reset; 1:enable xff reset.
	XffReset *int `pulumi:"xffReset"`
}

type SaasDomainState struct {
	// Whether to enable active health detection, 0 represents disable and 1 represents enable.
	ActiveCheck pulumi.IntPtrInput
	// Whether to enable api safe, 1 enable, 0 disable.
	ApiSafeStatus pulumi.IntPtrInput
	// Whether to enable bot, 1 enable, 0 disable.
	BotStatus pulumi.IntPtrInput
	// Certificate content, When CertType=1, this parameter needs to be filled.
	Cert pulumi.StringPtrInput
	// Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
	CertType pulumi.IntPtrInput
	// Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
	CipherTemplate pulumi.IntPtrInput
	// Encryption Suite Information.
	Ciphers pulumi.IntArrayInput
	// Whether to enable access logs, 1 enable, 0 disable.
	ClsStatus pulumi.IntPtrInput
	// Domain names that require defense.
	Domain pulumi.StringPtrInput
	// Domain id.
	DomainId pulumi.StringPtrInput
	// Whether redirect to https, 1 will redirect and 0 will not.
	HttpsRewrite pulumi.IntPtrInput
	// Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
	HttpsUpstreamPort pulumi.StringPtrInput
	// Unique ID of Instance.
	InstanceId pulumi.StringPtrInput
	// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
	IpHeaders pulumi.StringArrayInput
	// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remoteAddr as client IP, 3 deployment and use values of custom headers as client IP.
	IsCdn pulumi.IntPtrInput
	// Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
	IsHttp2 pulumi.IntPtrInput
	// Whether to enable keep-alive, 0 disable, 1 enable.
	IsKeepAlive pulumi.StringPtrInput
	// Is WebSocket support enabled. 1 means enabled, 0 does not.
	IsWebsocket pulumi.IntPtrInput
	// Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
	LoadBalance pulumi.StringPtrInput
	// This field needs to be set for multiple ports in the upstream server.
	Ports SaasDomainPortArrayInput
	// Certificate key, When CertType=1, this parameter needs to be filled.
	PrivateKey pulumi.StringPtrInput
	// 300s.
	ProxyReadTimeout pulumi.IntPtrInput
	// 300s.
	ProxySendTimeout pulumi.IntPtrInput
	// When SniType=3, this parameter needs to be filled in to represent a custom host.
	SniHost pulumi.StringPtrInput
	// Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
	SniType pulumi.IntPtrInput
	// Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
	SrcLists pulumi.StringArrayInput
	// Certificate ID, When CertType=2, this parameter needs to be filled.
	SslId pulumi.StringPtrInput
	// Binding status between waf and LB, 0:not bind, 1:binding.
	Status pulumi.IntPtrInput
	// Version of TLS Protocol.
	TlsVersion pulumi.IntPtrInput
	// Upstream domain, When UpstreamType=1, this parameter needs to be filled.
	UpstreamDomain pulumi.StringPtrInput
	// Upstream scheme for https, http or https.
	UpstreamScheme pulumi.StringPtrInput
	// Upstream type, 0 represents IP, 1 represents domain name.
	UpstreamType pulumi.IntPtrInput
	// Weight of each upstream.
	Weights pulumi.IntArrayInput
	// 0:disable xff reset; 1:enable xff reset.
	XffReset pulumi.IntPtrInput
}

func (SaasDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*saasDomainState)(nil)).Elem()
}

type saasDomainArgs struct {
	// Whether to enable active health detection, 0 represents disable and 1 represents enable.
	ActiveCheck *int `pulumi:"activeCheck"`
	// Whether to enable api safe, 1 enable, 0 disable.
	ApiSafeStatus *int `pulumi:"apiSafeStatus"`
	// Whether to enable bot, 1 enable, 0 disable.
	BotStatus *int `pulumi:"botStatus"`
	// Certificate content, When CertType=1, this parameter needs to be filled.
	Cert *string `pulumi:"cert"`
	// Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
	CertType *int `pulumi:"certType"`
	// Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
	CipherTemplate *int `pulumi:"cipherTemplate"`
	// Encryption Suite Information.
	Ciphers []int `pulumi:"ciphers"`
	// Whether to enable access logs, 1 enable, 0 disable.
	ClsStatus *int `pulumi:"clsStatus"`
	// Domain names that require defense.
	Domain string `pulumi:"domain"`
	// Whether redirect to https, 1 will redirect and 0 will not.
	HttpsRewrite *int `pulumi:"httpsRewrite"`
	// Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
	HttpsUpstreamPort *string `pulumi:"httpsUpstreamPort"`
	// Unique ID of Instance.
	InstanceId string `pulumi:"instanceId"`
	// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
	IpHeaders []string `pulumi:"ipHeaders"`
	// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remoteAddr as client IP, 3 deployment and use values of custom headers as client IP.
	IsCdn *int `pulumi:"isCdn"`
	// Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
	IsHttp2 *int `pulumi:"isHttp2"`
	// Whether to enable keep-alive, 0 disable, 1 enable.
	IsKeepAlive *string `pulumi:"isKeepAlive"`
	// Is WebSocket support enabled. 1 means enabled, 0 does not.
	IsWebsocket *int `pulumi:"isWebsocket"`
	// Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
	LoadBalance *string `pulumi:"loadBalance"`
	// This field needs to be set for multiple ports in the upstream server.
	Ports []SaasDomainPort `pulumi:"ports"`
	// Certificate key, When CertType=1, this parameter needs to be filled.
	PrivateKey *string `pulumi:"privateKey"`
	// 300s.
	ProxyReadTimeout *int `pulumi:"proxyReadTimeout"`
	// 300s.
	ProxySendTimeout *int `pulumi:"proxySendTimeout"`
	// When SniType=3, this parameter needs to be filled in to represent a custom host.
	SniHost *string `pulumi:"sniHost"`
	// Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
	SniType *int `pulumi:"sniType"`
	// Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
	SrcLists []string `pulumi:"srcLists"`
	// Certificate ID, When CertType=2, this parameter needs to be filled.
	SslId *string `pulumi:"sslId"`
	// Binding status between waf and LB, 0:not bind, 1:binding.
	Status *int `pulumi:"status"`
	// Version of TLS Protocol.
	TlsVersion *int `pulumi:"tlsVersion"`
	// Upstream domain, When UpstreamType=1, this parameter needs to be filled.
	UpstreamDomain *string `pulumi:"upstreamDomain"`
	// Upstream scheme for https, http or https.
	UpstreamScheme *string `pulumi:"upstreamScheme"`
	// Upstream type, 0 represents IP, 1 represents domain name.
	UpstreamType *int `pulumi:"upstreamType"`
	// Weight of each upstream.
	Weights []int `pulumi:"weights"`
	// 0:disable xff reset; 1:enable xff reset.
	XffReset *int `pulumi:"xffReset"`
}

// The set of arguments for constructing a SaasDomain resource.
type SaasDomainArgs struct {
	// Whether to enable active health detection, 0 represents disable and 1 represents enable.
	ActiveCheck pulumi.IntPtrInput
	// Whether to enable api safe, 1 enable, 0 disable.
	ApiSafeStatus pulumi.IntPtrInput
	// Whether to enable bot, 1 enable, 0 disable.
	BotStatus pulumi.IntPtrInput
	// Certificate content, When CertType=1, this parameter needs to be filled.
	Cert pulumi.StringPtrInput
	// Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
	CertType pulumi.IntPtrInput
	// Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
	CipherTemplate pulumi.IntPtrInput
	// Encryption Suite Information.
	Ciphers pulumi.IntArrayInput
	// Whether to enable access logs, 1 enable, 0 disable.
	ClsStatus pulumi.IntPtrInput
	// Domain names that require defense.
	Domain pulumi.StringInput
	// Whether redirect to https, 1 will redirect and 0 will not.
	HttpsRewrite pulumi.IntPtrInput
	// Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
	HttpsUpstreamPort pulumi.StringPtrInput
	// Unique ID of Instance.
	InstanceId pulumi.StringInput
	// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
	IpHeaders pulumi.StringArrayInput
	// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remoteAddr as client IP, 3 deployment and use values of custom headers as client IP.
	IsCdn pulumi.IntPtrInput
	// Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
	IsHttp2 pulumi.IntPtrInput
	// Whether to enable keep-alive, 0 disable, 1 enable.
	IsKeepAlive pulumi.StringPtrInput
	// Is WebSocket support enabled. 1 means enabled, 0 does not.
	IsWebsocket pulumi.IntPtrInput
	// Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
	LoadBalance pulumi.StringPtrInput
	// This field needs to be set for multiple ports in the upstream server.
	Ports SaasDomainPortArrayInput
	// Certificate key, When CertType=1, this parameter needs to be filled.
	PrivateKey pulumi.StringPtrInput
	// 300s.
	ProxyReadTimeout pulumi.IntPtrInput
	// 300s.
	ProxySendTimeout pulumi.IntPtrInput
	// When SniType=3, this parameter needs to be filled in to represent a custom host.
	SniHost pulumi.StringPtrInput
	// Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
	SniType pulumi.IntPtrInput
	// Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
	SrcLists pulumi.StringArrayInput
	// Certificate ID, When CertType=2, this parameter needs to be filled.
	SslId pulumi.StringPtrInput
	// Binding status between waf and LB, 0:not bind, 1:binding.
	Status pulumi.IntPtrInput
	// Version of TLS Protocol.
	TlsVersion pulumi.IntPtrInput
	// Upstream domain, When UpstreamType=1, this parameter needs to be filled.
	UpstreamDomain pulumi.StringPtrInput
	// Upstream scheme for https, http or https.
	UpstreamScheme pulumi.StringPtrInput
	// Upstream type, 0 represents IP, 1 represents domain name.
	UpstreamType pulumi.IntPtrInput
	// Weight of each upstream.
	Weights pulumi.IntArrayInput
	// 0:disable xff reset; 1:enable xff reset.
	XffReset pulumi.IntPtrInput
}

func (SaasDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*saasDomainArgs)(nil)).Elem()
}

type SaasDomainInput interface {
	pulumi.Input

	ToSaasDomainOutput() SaasDomainOutput
	ToSaasDomainOutputWithContext(ctx context.Context) SaasDomainOutput
}

func (*SaasDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**SaasDomain)(nil)).Elem()
}

func (i *SaasDomain) ToSaasDomainOutput() SaasDomainOutput {
	return i.ToSaasDomainOutputWithContext(context.Background())
}

func (i *SaasDomain) ToSaasDomainOutputWithContext(ctx context.Context) SaasDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaasDomainOutput)
}

// SaasDomainArrayInput is an input type that accepts SaasDomainArray and SaasDomainArrayOutput values.
// You can construct a concrete instance of `SaasDomainArrayInput` via:
//
//	SaasDomainArray{ SaasDomainArgs{...} }
type SaasDomainArrayInput interface {
	pulumi.Input

	ToSaasDomainArrayOutput() SaasDomainArrayOutput
	ToSaasDomainArrayOutputWithContext(context.Context) SaasDomainArrayOutput
}

type SaasDomainArray []SaasDomainInput

func (SaasDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SaasDomain)(nil)).Elem()
}

func (i SaasDomainArray) ToSaasDomainArrayOutput() SaasDomainArrayOutput {
	return i.ToSaasDomainArrayOutputWithContext(context.Background())
}

func (i SaasDomainArray) ToSaasDomainArrayOutputWithContext(ctx context.Context) SaasDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaasDomainArrayOutput)
}

// SaasDomainMapInput is an input type that accepts SaasDomainMap and SaasDomainMapOutput values.
// You can construct a concrete instance of `SaasDomainMapInput` via:
//
//	SaasDomainMap{ "key": SaasDomainArgs{...} }
type SaasDomainMapInput interface {
	pulumi.Input

	ToSaasDomainMapOutput() SaasDomainMapOutput
	ToSaasDomainMapOutputWithContext(context.Context) SaasDomainMapOutput
}

type SaasDomainMap map[string]SaasDomainInput

func (SaasDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SaasDomain)(nil)).Elem()
}

func (i SaasDomainMap) ToSaasDomainMapOutput() SaasDomainMapOutput {
	return i.ToSaasDomainMapOutputWithContext(context.Background())
}

func (i SaasDomainMap) ToSaasDomainMapOutputWithContext(ctx context.Context) SaasDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaasDomainMapOutput)
}

type SaasDomainOutput struct{ *pulumi.OutputState }

func (SaasDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SaasDomain)(nil)).Elem()
}

func (o SaasDomainOutput) ToSaasDomainOutput() SaasDomainOutput {
	return o
}

func (o SaasDomainOutput) ToSaasDomainOutputWithContext(ctx context.Context) SaasDomainOutput {
	return o
}

// Whether to enable active health detection, 0 represents disable and 1 represents enable.
func (o SaasDomainOutput) ActiveCheck() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.ActiveCheck }).(pulumi.IntPtrOutput)
}

// Whether to enable api safe, 1 enable, 0 disable.
func (o SaasDomainOutput) ApiSafeStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.ApiSafeStatus }).(pulumi.IntPtrOutput)
}

// Whether to enable bot, 1 enable, 0 disable.
func (o SaasDomainOutput) BotStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.BotStatus }).(pulumi.IntPtrOutput)
}

// Certificate content, When CertType=1, this parameter needs to be filled.
func (o SaasDomainOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringPtrOutput { return v.Cert }).(pulumi.StringPtrOutput)
}

// Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
func (o SaasDomainOutput) CertType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.CertType }).(pulumi.IntPtrOutput)
}

// Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
func (o SaasDomainOutput) CipherTemplate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.CipherTemplate }).(pulumi.IntPtrOutput)
}

// Encryption Suite Information.
func (o SaasDomainOutput) Ciphers() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntArrayOutput { return v.Ciphers }).(pulumi.IntArrayOutput)
}

// Whether to enable access logs, 1 enable, 0 disable.
func (o SaasDomainOutput) ClsStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.ClsStatus }).(pulumi.IntPtrOutput)
}

// Domain names that require defense.
func (o SaasDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Domain id.
func (o SaasDomainOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// Whether redirect to https, 1 will redirect and 0 will not.
func (o SaasDomainOutput) HttpsRewrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.HttpsRewrite }).(pulumi.IntPtrOutput)
}

// Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
func (o SaasDomainOutput) HttpsUpstreamPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringPtrOutput { return v.HttpsUpstreamPort }).(pulumi.StringPtrOutput)
}

// Unique ID of Instance.
func (o SaasDomainOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
func (o SaasDomainOutput) IpHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringArrayOutput { return v.IpHeaders }).(pulumi.StringArrayOutput)
}

// Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remoteAddr as client IP, 3 deployment and use values of custom headers as client IP.
func (o SaasDomainOutput) IsCdn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.IsCdn }).(pulumi.IntPtrOutput)
}

// Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
func (o SaasDomainOutput) IsHttp2() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.IsHttp2 }).(pulumi.IntPtrOutput)
}

// Whether to enable keep-alive, 0 disable, 1 enable.
func (o SaasDomainOutput) IsKeepAlive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringPtrOutput { return v.IsKeepAlive }).(pulumi.StringPtrOutput)
}

// Is WebSocket support enabled. 1 means enabled, 0 does not.
func (o SaasDomainOutput) IsWebsocket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.IsWebsocket }).(pulumi.IntPtrOutput)
}

// Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
func (o SaasDomainOutput) LoadBalance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringPtrOutput { return v.LoadBalance }).(pulumi.StringPtrOutput)
}

// This field needs to be set for multiple ports in the upstream server.
func (o SaasDomainOutput) Ports() SaasDomainPortArrayOutput {
	return o.ApplyT(func(v *SaasDomain) SaasDomainPortArrayOutput { return v.Ports }).(SaasDomainPortArrayOutput)
}

// Certificate key, When CertType=1, this parameter needs to be filled.
func (o SaasDomainOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// 300s.
func (o SaasDomainOutput) ProxyReadTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.ProxyReadTimeout }).(pulumi.IntPtrOutput)
}

// 300s.
func (o SaasDomainOutput) ProxySendTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.ProxySendTimeout }).(pulumi.IntPtrOutput)
}

// When SniType=3, this parameter needs to be filled in to represent a custom host.
func (o SaasDomainOutput) SniHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringPtrOutput { return v.SniHost }).(pulumi.StringPtrOutput)
}

// Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
func (o SaasDomainOutput) SniType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.SniType }).(pulumi.IntPtrOutput)
}

// Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
func (o SaasDomainOutput) SrcLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringArrayOutput { return v.SrcLists }).(pulumi.StringArrayOutput)
}

// Certificate ID, When CertType=2, this parameter needs to be filled.
func (o SaasDomainOutput) SslId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringPtrOutput { return v.SslId }).(pulumi.StringPtrOutput)
}

// Binding status between waf and LB, 0:not bind, 1:binding.
func (o SaasDomainOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.Status }).(pulumi.IntPtrOutput)
}

// Version of TLS Protocol.
func (o SaasDomainOutput) TlsVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.TlsVersion }).(pulumi.IntPtrOutput)
}

// Upstream domain, When UpstreamType=1, this parameter needs to be filled.
func (o SaasDomainOutput) UpstreamDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringPtrOutput { return v.UpstreamDomain }).(pulumi.StringPtrOutput)
}

// Upstream scheme for https, http or https.
func (o SaasDomainOutput) UpstreamScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.StringPtrOutput { return v.UpstreamScheme }).(pulumi.StringPtrOutput)
}

// Upstream type, 0 represents IP, 1 represents domain name.
func (o SaasDomainOutput) UpstreamType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.UpstreamType }).(pulumi.IntPtrOutput)
}

// Weight of each upstream.
func (o SaasDomainOutput) Weights() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntArrayOutput { return v.Weights }).(pulumi.IntArrayOutput)
}

// 0:disable xff reset; 1:enable xff reset.
func (o SaasDomainOutput) XffReset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SaasDomain) pulumi.IntPtrOutput { return v.XffReset }).(pulumi.IntPtrOutput)
}

type SaasDomainArrayOutput struct{ *pulumi.OutputState }

func (SaasDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SaasDomain)(nil)).Elem()
}

func (o SaasDomainArrayOutput) ToSaasDomainArrayOutput() SaasDomainArrayOutput {
	return o
}

func (o SaasDomainArrayOutput) ToSaasDomainArrayOutputWithContext(ctx context.Context) SaasDomainArrayOutput {
	return o
}

func (o SaasDomainArrayOutput) Index(i pulumi.IntInput) SaasDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SaasDomain {
		return vs[0].([]*SaasDomain)[vs[1].(int)]
	}).(SaasDomainOutput)
}

type SaasDomainMapOutput struct{ *pulumi.OutputState }

func (SaasDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SaasDomain)(nil)).Elem()
}

func (o SaasDomainMapOutput) ToSaasDomainMapOutput() SaasDomainMapOutput {
	return o
}

func (o SaasDomainMapOutput) ToSaasDomainMapOutputWithContext(ctx context.Context) SaasDomainMapOutput {
	return o
}

func (o SaasDomainMapOutput) MapIndex(k pulumi.StringInput) SaasDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SaasDomain {
		return vs[0].(map[string]*SaasDomain)[vs[1].(string)]
	}).(SaasDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SaasDomainInput)(nil)).Elem(), &SaasDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaasDomainArrayInput)(nil)).Elem(), SaasDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaasDomainMapInput)(nil)).Elem(), SaasDomainMap{})
	pulumi.RegisterOutputType(SaasDomainOutput{})
	pulumi.RegisterOutputType(SaasDomainArrayOutput{})
	pulumi.RegisterOutputType(SaasDomainMapOutput{})
}
