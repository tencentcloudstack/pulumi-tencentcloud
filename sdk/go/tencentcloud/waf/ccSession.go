// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a waf ccSession
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewCcSession(ctx, "example", &Waf.CcSessionArgs{
//				Category:      pulumi.String("match"),
//				Domain:        pulumi.String("www.demo.com"),
//				Edition:       pulumi.String("sparta-waf"),
//				EndMat:        pulumi.String("&"),
//				EndOffset:     pulumi.String("-1"),
//				KeyOrStartMat: pulumi.String("key_a=123"),
//				SessionName:   pulumi.String("terraformDemo"),
//				Source:        pulumi.String("get"),
//				StartOffset:   pulumi.String("-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// waf cc_session can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Waf/ccSession:CcSession example www.demo.com#sparta-waf#2000000253
//
// ```
type CcSession struct {
	pulumi.CustomResourceState

	// Session match pattern, Optional patterns are match, location.
	Category pulumi.StringOutput `pulumi:"category"`
	// Domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Waf edition. clb-waf means clb-waf, sparta-waf means saas-waf.
	Edition pulumi.StringOutput `pulumi:"edition"`
	// Session end identifier, when Category is match.
	EndMat pulumi.StringOutput `pulumi:"endMat"`
	// End offset position, when Category is location.
	EndOffset pulumi.StringOutput `pulumi:"endOffset"`
	// Session identifier.
	KeyOrStartMat pulumi.StringOutput `pulumi:"keyOrStartMat"`
	// Session ID.
	SessionId pulumi.IntOutput `pulumi:"sessionId"`
	// Session Name.
	SessionName pulumi.StringOutput `pulumi:"sessionName"`
	// Session matching position, Optional locations are get, post, header, cookie.
	Source pulumi.StringOutput `pulumi:"source"`
	// Starting offset position, when Category is location.
	StartOffset pulumi.StringOutput `pulumi:"startOffset"`
}

// NewCcSession registers a new resource with the given unique name, arguments, and options.
func NewCcSession(ctx *pulumi.Context,
	name string, args *CcSessionArgs, opts ...pulumi.ResourceOption) (*CcSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Edition == nil {
		return nil, errors.New("invalid value for required argument 'Edition'")
	}
	if args.EndMat == nil {
		return nil, errors.New("invalid value for required argument 'EndMat'")
	}
	if args.EndOffset == nil {
		return nil, errors.New("invalid value for required argument 'EndOffset'")
	}
	if args.KeyOrStartMat == nil {
		return nil, errors.New("invalid value for required argument 'KeyOrStartMat'")
	}
	if args.SessionName == nil {
		return nil, errors.New("invalid value for required argument 'SessionName'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.StartOffset == nil {
		return nil, errors.New("invalid value for required argument 'StartOffset'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CcSession
	err := ctx.RegisterResource("tencentcloud:Waf/ccSession:CcSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCcSession gets an existing CcSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCcSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CcSessionState, opts ...pulumi.ResourceOption) (*CcSession, error) {
	var resource CcSession
	err := ctx.ReadResource("tencentcloud:Waf/ccSession:CcSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CcSession resources.
type ccSessionState struct {
	// Session match pattern, Optional patterns are match, location.
	Category *string `pulumi:"category"`
	// Domain.
	Domain *string `pulumi:"domain"`
	// Waf edition. clb-waf means clb-waf, sparta-waf means saas-waf.
	Edition *string `pulumi:"edition"`
	// Session end identifier, when Category is match.
	EndMat *string `pulumi:"endMat"`
	// End offset position, when Category is location.
	EndOffset *string `pulumi:"endOffset"`
	// Session identifier.
	KeyOrStartMat *string `pulumi:"keyOrStartMat"`
	// Session ID.
	SessionId *int `pulumi:"sessionId"`
	// Session Name.
	SessionName *string `pulumi:"sessionName"`
	// Session matching position, Optional locations are get, post, header, cookie.
	Source *string `pulumi:"source"`
	// Starting offset position, when Category is location.
	StartOffset *string `pulumi:"startOffset"`
}

type CcSessionState struct {
	// Session match pattern, Optional patterns are match, location.
	Category pulumi.StringPtrInput
	// Domain.
	Domain pulumi.StringPtrInput
	// Waf edition. clb-waf means clb-waf, sparta-waf means saas-waf.
	Edition pulumi.StringPtrInput
	// Session end identifier, when Category is match.
	EndMat pulumi.StringPtrInput
	// End offset position, when Category is location.
	EndOffset pulumi.StringPtrInput
	// Session identifier.
	KeyOrStartMat pulumi.StringPtrInput
	// Session ID.
	SessionId pulumi.IntPtrInput
	// Session Name.
	SessionName pulumi.StringPtrInput
	// Session matching position, Optional locations are get, post, header, cookie.
	Source pulumi.StringPtrInput
	// Starting offset position, when Category is location.
	StartOffset pulumi.StringPtrInput
}

func (CcSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ccSessionState)(nil)).Elem()
}

type ccSessionArgs struct {
	// Session match pattern, Optional patterns are match, location.
	Category string `pulumi:"category"`
	// Domain.
	Domain string `pulumi:"domain"`
	// Waf edition. clb-waf means clb-waf, sparta-waf means saas-waf.
	Edition string `pulumi:"edition"`
	// Session end identifier, when Category is match.
	EndMat string `pulumi:"endMat"`
	// End offset position, when Category is location.
	EndOffset string `pulumi:"endOffset"`
	// Session identifier.
	KeyOrStartMat string `pulumi:"keyOrStartMat"`
	// Session Name.
	SessionName string `pulumi:"sessionName"`
	// Session matching position, Optional locations are get, post, header, cookie.
	Source string `pulumi:"source"`
	// Starting offset position, when Category is location.
	StartOffset string `pulumi:"startOffset"`
}

// The set of arguments for constructing a CcSession resource.
type CcSessionArgs struct {
	// Session match pattern, Optional patterns are match, location.
	Category pulumi.StringInput
	// Domain.
	Domain pulumi.StringInput
	// Waf edition. clb-waf means clb-waf, sparta-waf means saas-waf.
	Edition pulumi.StringInput
	// Session end identifier, when Category is match.
	EndMat pulumi.StringInput
	// End offset position, when Category is location.
	EndOffset pulumi.StringInput
	// Session identifier.
	KeyOrStartMat pulumi.StringInput
	// Session Name.
	SessionName pulumi.StringInput
	// Session matching position, Optional locations are get, post, header, cookie.
	Source pulumi.StringInput
	// Starting offset position, when Category is location.
	StartOffset pulumi.StringInput
}

func (CcSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ccSessionArgs)(nil)).Elem()
}

type CcSessionInput interface {
	pulumi.Input

	ToCcSessionOutput() CcSessionOutput
	ToCcSessionOutputWithContext(ctx context.Context) CcSessionOutput
}

func (*CcSession) ElementType() reflect.Type {
	return reflect.TypeOf((**CcSession)(nil)).Elem()
}

func (i *CcSession) ToCcSessionOutput() CcSessionOutput {
	return i.ToCcSessionOutputWithContext(context.Background())
}

func (i *CcSession) ToCcSessionOutputWithContext(ctx context.Context) CcSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcSessionOutput)
}

// CcSessionArrayInput is an input type that accepts CcSessionArray and CcSessionArrayOutput values.
// You can construct a concrete instance of `CcSessionArrayInput` via:
//
//	CcSessionArray{ CcSessionArgs{...} }
type CcSessionArrayInput interface {
	pulumi.Input

	ToCcSessionArrayOutput() CcSessionArrayOutput
	ToCcSessionArrayOutputWithContext(context.Context) CcSessionArrayOutput
}

type CcSessionArray []CcSessionInput

func (CcSessionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcSession)(nil)).Elem()
}

func (i CcSessionArray) ToCcSessionArrayOutput() CcSessionArrayOutput {
	return i.ToCcSessionArrayOutputWithContext(context.Background())
}

func (i CcSessionArray) ToCcSessionArrayOutputWithContext(ctx context.Context) CcSessionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcSessionArrayOutput)
}

// CcSessionMapInput is an input type that accepts CcSessionMap and CcSessionMapOutput values.
// You can construct a concrete instance of `CcSessionMapInput` via:
//
//	CcSessionMap{ "key": CcSessionArgs{...} }
type CcSessionMapInput interface {
	pulumi.Input

	ToCcSessionMapOutput() CcSessionMapOutput
	ToCcSessionMapOutputWithContext(context.Context) CcSessionMapOutput
}

type CcSessionMap map[string]CcSessionInput

func (CcSessionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcSession)(nil)).Elem()
}

func (i CcSessionMap) ToCcSessionMapOutput() CcSessionMapOutput {
	return i.ToCcSessionMapOutputWithContext(context.Background())
}

func (i CcSessionMap) ToCcSessionMapOutputWithContext(ctx context.Context) CcSessionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcSessionMapOutput)
}

type CcSessionOutput struct{ *pulumi.OutputState }

func (CcSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CcSession)(nil)).Elem()
}

func (o CcSessionOutput) ToCcSessionOutput() CcSessionOutput {
	return o
}

func (o CcSessionOutput) ToCcSessionOutputWithContext(ctx context.Context) CcSessionOutput {
	return o
}

// Session match pattern, Optional patterns are match, location.
func (o CcSessionOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *CcSession) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Domain.
func (o CcSessionOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *CcSession) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Waf edition. clb-waf means clb-waf, sparta-waf means saas-waf.
func (o CcSessionOutput) Edition() pulumi.StringOutput {
	return o.ApplyT(func(v *CcSession) pulumi.StringOutput { return v.Edition }).(pulumi.StringOutput)
}

// Session end identifier, when Category is match.
func (o CcSessionOutput) EndMat() pulumi.StringOutput {
	return o.ApplyT(func(v *CcSession) pulumi.StringOutput { return v.EndMat }).(pulumi.StringOutput)
}

// End offset position, when Category is location.
func (o CcSessionOutput) EndOffset() pulumi.StringOutput {
	return o.ApplyT(func(v *CcSession) pulumi.StringOutput { return v.EndOffset }).(pulumi.StringOutput)
}

// Session identifier.
func (o CcSessionOutput) KeyOrStartMat() pulumi.StringOutput {
	return o.ApplyT(func(v *CcSession) pulumi.StringOutput { return v.KeyOrStartMat }).(pulumi.StringOutput)
}

// Session ID.
func (o CcSessionOutput) SessionId() pulumi.IntOutput {
	return o.ApplyT(func(v *CcSession) pulumi.IntOutput { return v.SessionId }).(pulumi.IntOutput)
}

// Session Name.
func (o CcSessionOutput) SessionName() pulumi.StringOutput {
	return o.ApplyT(func(v *CcSession) pulumi.StringOutput { return v.SessionName }).(pulumi.StringOutput)
}

// Session matching position, Optional locations are get, post, header, cookie.
func (o CcSessionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *CcSession) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// Starting offset position, when Category is location.
func (o CcSessionOutput) StartOffset() pulumi.StringOutput {
	return o.ApplyT(func(v *CcSession) pulumi.StringOutput { return v.StartOffset }).(pulumi.StringOutput)
}

type CcSessionArrayOutput struct{ *pulumi.OutputState }

func (CcSessionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcSession)(nil)).Elem()
}

func (o CcSessionArrayOutput) ToCcSessionArrayOutput() CcSessionArrayOutput {
	return o
}

func (o CcSessionArrayOutput) ToCcSessionArrayOutputWithContext(ctx context.Context) CcSessionArrayOutput {
	return o
}

func (o CcSessionArrayOutput) Index(i pulumi.IntInput) CcSessionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CcSession {
		return vs[0].([]*CcSession)[vs[1].(int)]
	}).(CcSessionOutput)
}

type CcSessionMapOutput struct{ *pulumi.OutputState }

func (CcSessionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcSession)(nil)).Elem()
}

func (o CcSessionMapOutput) ToCcSessionMapOutput() CcSessionMapOutput {
	return o
}

func (o CcSessionMapOutput) ToCcSessionMapOutputWithContext(ctx context.Context) CcSessionMapOutput {
	return o
}

func (o CcSessionMapOutput) MapIndex(k pulumi.StringInput) CcSessionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CcSession {
		return vs[0].(map[string]*CcSession)[vs[1].(string)]
	}).(CcSessionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CcSessionInput)(nil)).Elem(), &CcSession{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcSessionArrayInput)(nil)).Elem(), CcSessionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcSessionMapInput)(nil)).Elem(), CcSessionMap{})
	pulumi.RegisterOutputType(CcSessionOutput{})
	pulumi.RegisterOutputType(CcSessionArrayOutput{})
	pulumi.RegisterOutputType(CcSessionMapOutput{})
}
