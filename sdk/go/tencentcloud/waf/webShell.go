// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a waf webShell
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Waf.NewWebShell(ctx, "example", &Waf.WebShellArgs{
//				Domain: pulumi.String("demo.waf.com"),
//				Status: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// waf web_shell can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Waf/webShell:WebShell example demo.waf.com
//
// ```
type WebShell struct {
	pulumi.CustomResourceState

	// Domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Webshell status, 1: open; 0: closed; 2: log.
	Status pulumi.IntOutput `pulumi:"status"`
}

// NewWebShell registers a new resource with the given unique name, arguments, and options.
func NewWebShell(ctx *pulumi.Context,
	name string, args *WebShellArgs, opts ...pulumi.ResourceOption) (*WebShell, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WebShell
	err := ctx.RegisterResource("tencentcloud:Waf/webShell:WebShell", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebShell gets an existing WebShell resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebShell(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebShellState, opts ...pulumi.ResourceOption) (*WebShell, error) {
	var resource WebShell
	err := ctx.ReadResource("tencentcloud:Waf/webShell:WebShell", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebShell resources.
type webShellState struct {
	// Domain.
	Domain *string `pulumi:"domain"`
	// Webshell status, 1: open; 0: closed; 2: log.
	Status *int `pulumi:"status"`
}

type WebShellState struct {
	// Domain.
	Domain pulumi.StringPtrInput
	// Webshell status, 1: open; 0: closed; 2: log.
	Status pulumi.IntPtrInput
}

func (WebShellState) ElementType() reflect.Type {
	return reflect.TypeOf((*webShellState)(nil)).Elem()
}

type webShellArgs struct {
	// Domain.
	Domain string `pulumi:"domain"`
	// Webshell status, 1: open; 0: closed; 2: log.
	Status int `pulumi:"status"`
}

// The set of arguments for constructing a WebShell resource.
type WebShellArgs struct {
	// Domain.
	Domain pulumi.StringInput
	// Webshell status, 1: open; 0: closed; 2: log.
	Status pulumi.IntInput
}

func (WebShellArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webShellArgs)(nil)).Elem()
}

type WebShellInput interface {
	pulumi.Input

	ToWebShellOutput() WebShellOutput
	ToWebShellOutputWithContext(ctx context.Context) WebShellOutput
}

func (*WebShell) ElementType() reflect.Type {
	return reflect.TypeOf((**WebShell)(nil)).Elem()
}

func (i *WebShell) ToWebShellOutput() WebShellOutput {
	return i.ToWebShellOutputWithContext(context.Background())
}

func (i *WebShell) ToWebShellOutputWithContext(ctx context.Context) WebShellOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebShellOutput)
}

// WebShellArrayInput is an input type that accepts WebShellArray and WebShellArrayOutput values.
// You can construct a concrete instance of `WebShellArrayInput` via:
//
//	WebShellArray{ WebShellArgs{...} }
type WebShellArrayInput interface {
	pulumi.Input

	ToWebShellArrayOutput() WebShellArrayOutput
	ToWebShellArrayOutputWithContext(context.Context) WebShellArrayOutput
}

type WebShellArray []WebShellInput

func (WebShellArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebShell)(nil)).Elem()
}

func (i WebShellArray) ToWebShellArrayOutput() WebShellArrayOutput {
	return i.ToWebShellArrayOutputWithContext(context.Background())
}

func (i WebShellArray) ToWebShellArrayOutputWithContext(ctx context.Context) WebShellArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebShellArrayOutput)
}

// WebShellMapInput is an input type that accepts WebShellMap and WebShellMapOutput values.
// You can construct a concrete instance of `WebShellMapInput` via:
//
//	WebShellMap{ "key": WebShellArgs{...} }
type WebShellMapInput interface {
	pulumi.Input

	ToWebShellMapOutput() WebShellMapOutput
	ToWebShellMapOutputWithContext(context.Context) WebShellMapOutput
}

type WebShellMap map[string]WebShellInput

func (WebShellMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebShell)(nil)).Elem()
}

func (i WebShellMap) ToWebShellMapOutput() WebShellMapOutput {
	return i.ToWebShellMapOutputWithContext(context.Background())
}

func (i WebShellMap) ToWebShellMapOutputWithContext(ctx context.Context) WebShellMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebShellMapOutput)
}

type WebShellOutput struct{ *pulumi.OutputState }

func (WebShellOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebShell)(nil)).Elem()
}

func (o WebShellOutput) ToWebShellOutput() WebShellOutput {
	return o
}

func (o WebShellOutput) ToWebShellOutputWithContext(ctx context.Context) WebShellOutput {
	return o
}

// Domain.
func (o WebShellOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *WebShell) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Webshell status, 1: open; 0: closed; 2: log.
func (o WebShellOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *WebShell) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

type WebShellArrayOutput struct{ *pulumi.OutputState }

func (WebShellArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebShell)(nil)).Elem()
}

func (o WebShellArrayOutput) ToWebShellArrayOutput() WebShellArrayOutput {
	return o
}

func (o WebShellArrayOutput) ToWebShellArrayOutputWithContext(ctx context.Context) WebShellArrayOutput {
	return o
}

func (o WebShellArrayOutput) Index(i pulumi.IntInput) WebShellOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebShell {
		return vs[0].([]*WebShell)[vs[1].(int)]
	}).(WebShellOutput)
}

type WebShellMapOutput struct{ *pulumi.OutputState }

func (WebShellMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebShell)(nil)).Elem()
}

func (o WebShellMapOutput) ToWebShellMapOutput() WebShellMapOutput {
	return o
}

func (o WebShellMapOutput) ToWebShellMapOutputWithContext(ctx context.Context) WebShellMapOutput {
	return o
}

func (o WebShellMapOutput) MapIndex(k pulumi.StringInput) WebShellOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebShell {
		return vs[0].(map[string]*WebShell)[vs[1].(string)]
	}).(WebShellOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebShellInput)(nil)).Elem(), &WebShell{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebShellArrayInput)(nil)).Elem(), WebShellArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebShellMapInput)(nil)).Elem(), WebShellMap{})
	pulumi.RegisterOutputType(WebShellOutput{})
	pulumi.RegisterOutputType(WebShellArrayOutput{})
	pulumi.RegisterOutputType(WebShellMapOutput{})
}
