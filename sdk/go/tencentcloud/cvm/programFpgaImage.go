// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cvm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProgramFpgaImage struct {
	pulumi.CustomResourceState

	// The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
	// by the instance by default.
	DbdFs pulumi.StringArrayOutput `pulumi:"dbdFs"`
	// Trial run, will not perform the actual burning action, the default is False.
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// COS URL address of the FPGA image file.
	FpgaUrl pulumi.StringOutput `pulumi:"fpgaUrl"`
	// The ID information of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewProgramFpgaImage registers a new resource with the given unique name, arguments, and options.
func NewProgramFpgaImage(ctx *pulumi.Context,
	name string, args *ProgramFpgaImageArgs, opts ...pulumi.ResourceOption) (*ProgramFpgaImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FpgaUrl == nil {
		return nil, errors.New("invalid value for required argument 'FpgaUrl'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ProgramFpgaImage
	err := ctx.RegisterResource("tencentcloud:Cvm/programFpgaImage:ProgramFpgaImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProgramFpgaImage gets an existing ProgramFpgaImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProgramFpgaImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProgramFpgaImageState, opts ...pulumi.ResourceOption) (*ProgramFpgaImage, error) {
	var resource ProgramFpgaImage
	err := ctx.ReadResource("tencentcloud:Cvm/programFpgaImage:ProgramFpgaImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProgramFpgaImage resources.
type programFpgaImageState struct {
	// The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
	// by the instance by default.
	DbdFs []string `pulumi:"dbdFs"`
	// Trial run, will not perform the actual burning action, the default is False.
	DryRun *bool `pulumi:"dryRun"`
	// COS URL address of the FPGA image file.
	FpgaUrl *string `pulumi:"fpgaUrl"`
	// The ID information of the instance.
	InstanceId *string `pulumi:"instanceId"`
}

type ProgramFpgaImageState struct {
	// The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
	// by the instance by default.
	DbdFs pulumi.StringArrayInput
	// Trial run, will not perform the actual burning action, the default is False.
	DryRun pulumi.BoolPtrInput
	// COS URL address of the FPGA image file.
	FpgaUrl pulumi.StringPtrInput
	// The ID information of the instance.
	InstanceId pulumi.StringPtrInput
}

func (ProgramFpgaImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*programFpgaImageState)(nil)).Elem()
}

type programFpgaImageArgs struct {
	// The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
	// by the instance by default.
	DbdFs []string `pulumi:"dbdFs"`
	// Trial run, will not perform the actual burning action, the default is False.
	DryRun *bool `pulumi:"dryRun"`
	// COS URL address of the FPGA image file.
	FpgaUrl string `pulumi:"fpgaUrl"`
	// The ID information of the instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a ProgramFpgaImage resource.
type ProgramFpgaImageArgs struct {
	// The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
	// by the instance by default.
	DbdFs pulumi.StringArrayInput
	// Trial run, will not perform the actual burning action, the default is False.
	DryRun pulumi.BoolPtrInput
	// COS URL address of the FPGA image file.
	FpgaUrl pulumi.StringInput
	// The ID information of the instance.
	InstanceId pulumi.StringInput
}

func (ProgramFpgaImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*programFpgaImageArgs)(nil)).Elem()
}

type ProgramFpgaImageInput interface {
	pulumi.Input

	ToProgramFpgaImageOutput() ProgramFpgaImageOutput
	ToProgramFpgaImageOutputWithContext(ctx context.Context) ProgramFpgaImageOutput
}

func (*ProgramFpgaImage) ElementType() reflect.Type {
	return reflect.TypeOf((**ProgramFpgaImage)(nil)).Elem()
}

func (i *ProgramFpgaImage) ToProgramFpgaImageOutput() ProgramFpgaImageOutput {
	return i.ToProgramFpgaImageOutputWithContext(context.Background())
}

func (i *ProgramFpgaImage) ToProgramFpgaImageOutputWithContext(ctx context.Context) ProgramFpgaImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProgramFpgaImageOutput)
}

// ProgramFpgaImageArrayInput is an input type that accepts ProgramFpgaImageArray and ProgramFpgaImageArrayOutput values.
// You can construct a concrete instance of `ProgramFpgaImageArrayInput` via:
//
//	ProgramFpgaImageArray{ ProgramFpgaImageArgs{...} }
type ProgramFpgaImageArrayInput interface {
	pulumi.Input

	ToProgramFpgaImageArrayOutput() ProgramFpgaImageArrayOutput
	ToProgramFpgaImageArrayOutputWithContext(context.Context) ProgramFpgaImageArrayOutput
}

type ProgramFpgaImageArray []ProgramFpgaImageInput

func (ProgramFpgaImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProgramFpgaImage)(nil)).Elem()
}

func (i ProgramFpgaImageArray) ToProgramFpgaImageArrayOutput() ProgramFpgaImageArrayOutput {
	return i.ToProgramFpgaImageArrayOutputWithContext(context.Background())
}

func (i ProgramFpgaImageArray) ToProgramFpgaImageArrayOutputWithContext(ctx context.Context) ProgramFpgaImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProgramFpgaImageArrayOutput)
}

// ProgramFpgaImageMapInput is an input type that accepts ProgramFpgaImageMap and ProgramFpgaImageMapOutput values.
// You can construct a concrete instance of `ProgramFpgaImageMapInput` via:
//
//	ProgramFpgaImageMap{ "key": ProgramFpgaImageArgs{...} }
type ProgramFpgaImageMapInput interface {
	pulumi.Input

	ToProgramFpgaImageMapOutput() ProgramFpgaImageMapOutput
	ToProgramFpgaImageMapOutputWithContext(context.Context) ProgramFpgaImageMapOutput
}

type ProgramFpgaImageMap map[string]ProgramFpgaImageInput

func (ProgramFpgaImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProgramFpgaImage)(nil)).Elem()
}

func (i ProgramFpgaImageMap) ToProgramFpgaImageMapOutput() ProgramFpgaImageMapOutput {
	return i.ToProgramFpgaImageMapOutputWithContext(context.Background())
}

func (i ProgramFpgaImageMap) ToProgramFpgaImageMapOutputWithContext(ctx context.Context) ProgramFpgaImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProgramFpgaImageMapOutput)
}

type ProgramFpgaImageOutput struct{ *pulumi.OutputState }

func (ProgramFpgaImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProgramFpgaImage)(nil)).Elem()
}

func (o ProgramFpgaImageOutput) ToProgramFpgaImageOutput() ProgramFpgaImageOutput {
	return o
}

func (o ProgramFpgaImageOutput) ToProgramFpgaImageOutputWithContext(ctx context.Context) ProgramFpgaImageOutput {
	return o
}

// The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
// by the instance by default.
func (o ProgramFpgaImageOutput) DbdFs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProgramFpgaImage) pulumi.StringArrayOutput { return v.DbdFs }).(pulumi.StringArrayOutput)
}

// Trial run, will not perform the actual burning action, the default is False.
func (o ProgramFpgaImageOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProgramFpgaImage) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// COS URL address of the FPGA image file.
func (o ProgramFpgaImageOutput) FpgaUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProgramFpgaImage) pulumi.StringOutput { return v.FpgaUrl }).(pulumi.StringOutput)
}

// The ID information of the instance.
func (o ProgramFpgaImageOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProgramFpgaImage) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type ProgramFpgaImageArrayOutput struct{ *pulumi.OutputState }

func (ProgramFpgaImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProgramFpgaImage)(nil)).Elem()
}

func (o ProgramFpgaImageArrayOutput) ToProgramFpgaImageArrayOutput() ProgramFpgaImageArrayOutput {
	return o
}

func (o ProgramFpgaImageArrayOutput) ToProgramFpgaImageArrayOutputWithContext(ctx context.Context) ProgramFpgaImageArrayOutput {
	return o
}

func (o ProgramFpgaImageArrayOutput) Index(i pulumi.IntInput) ProgramFpgaImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProgramFpgaImage {
		return vs[0].([]*ProgramFpgaImage)[vs[1].(int)]
	}).(ProgramFpgaImageOutput)
}

type ProgramFpgaImageMapOutput struct{ *pulumi.OutputState }

func (ProgramFpgaImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProgramFpgaImage)(nil)).Elem()
}

func (o ProgramFpgaImageMapOutput) ToProgramFpgaImageMapOutput() ProgramFpgaImageMapOutput {
	return o
}

func (o ProgramFpgaImageMapOutput) ToProgramFpgaImageMapOutputWithContext(ctx context.Context) ProgramFpgaImageMapOutput {
	return o
}

func (o ProgramFpgaImageMapOutput) MapIndex(k pulumi.StringInput) ProgramFpgaImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProgramFpgaImage {
		return vs[0].(map[string]*ProgramFpgaImage)[vs[1].(string)]
	}).(ProgramFpgaImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProgramFpgaImageInput)(nil)).Elem(), &ProgramFpgaImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProgramFpgaImageArrayInput)(nil)).Elem(), ProgramFpgaImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProgramFpgaImageMapInput)(nil)).Elem(), ProgramFpgaImageMap{})
	pulumi.RegisterOutputType(ProgramFpgaImageOutput{})
	pulumi.RegisterOutputType(ProgramFpgaImageArrayOutput{})
	pulumi.RegisterOutputType(ProgramFpgaImageMapOutput{})
}
