// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cvm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cvm syncImage
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cvm"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cvm.NewSyncImage(ctx, "syncImage", &Cvm.SyncImageArgs{
//				DestinationRegions: pulumi.StringArray{
//					pulumi.String("ap-guangzhou"),
//					pulumi.String("ap-shanghai"),
//				},
//				ImageId: pulumi.String("img-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SyncImage struct {
	pulumi.CustomResourceState

	// List of destination regions for synchronization. Limits: It must be a valid region. For a custom image, the destination region cannot be the source region. For a shared image, the destination region must be the source region, which indicates to create a copy of the image as a custom image in the same region.
	DestinationRegions pulumi.StringArrayOutput `pulumi:"destinationRegions"`
	// Checks whether image synchronization can be initiated.
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// Image ID. The specified image must meet the following requirement: the images must be in the `NORMAL` state.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// Destination image name.
	ImageName pulumi.StringPtrOutput `pulumi:"imageName"`
	// Whether to return the ID of image created in the destination region.
	ImageSetRequired pulumi.BoolPtrOutput `pulumi:"imageSetRequired"`
}

// NewSyncImage registers a new resource with the given unique name, arguments, and options.
func NewSyncImage(ctx *pulumi.Context,
	name string, args *SyncImageArgs, opts ...pulumi.ResourceOption) (*SyncImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationRegions == nil {
		return nil, errors.New("invalid value for required argument 'DestinationRegions'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SyncImage
	err := ctx.RegisterResource("tencentcloud:Cvm/syncImage:SyncImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyncImage gets an existing SyncImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyncImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncImageState, opts ...pulumi.ResourceOption) (*SyncImage, error) {
	var resource SyncImage
	err := ctx.ReadResource("tencentcloud:Cvm/syncImage:SyncImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyncImage resources.
type syncImageState struct {
	// List of destination regions for synchronization. Limits: It must be a valid region. For a custom image, the destination region cannot be the source region. For a shared image, the destination region must be the source region, which indicates to create a copy of the image as a custom image in the same region.
	DestinationRegions []string `pulumi:"destinationRegions"`
	// Checks whether image synchronization can be initiated.
	DryRun *bool `pulumi:"dryRun"`
	// Image ID. The specified image must meet the following requirement: the images must be in the `NORMAL` state.
	ImageId *string `pulumi:"imageId"`
	// Destination image name.
	ImageName *string `pulumi:"imageName"`
	// Whether to return the ID of image created in the destination region.
	ImageSetRequired *bool `pulumi:"imageSetRequired"`
}

type SyncImageState struct {
	// List of destination regions for synchronization. Limits: It must be a valid region. For a custom image, the destination region cannot be the source region. For a shared image, the destination region must be the source region, which indicates to create a copy of the image as a custom image in the same region.
	DestinationRegions pulumi.StringArrayInput
	// Checks whether image synchronization can be initiated.
	DryRun pulumi.BoolPtrInput
	// Image ID. The specified image must meet the following requirement: the images must be in the `NORMAL` state.
	ImageId pulumi.StringPtrInput
	// Destination image name.
	ImageName pulumi.StringPtrInput
	// Whether to return the ID of image created in the destination region.
	ImageSetRequired pulumi.BoolPtrInput
}

func (SyncImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncImageState)(nil)).Elem()
}

type syncImageArgs struct {
	// List of destination regions for synchronization. Limits: It must be a valid region. For a custom image, the destination region cannot be the source region. For a shared image, the destination region must be the source region, which indicates to create a copy of the image as a custom image in the same region.
	DestinationRegions []string `pulumi:"destinationRegions"`
	// Checks whether image synchronization can be initiated.
	DryRun *bool `pulumi:"dryRun"`
	// Image ID. The specified image must meet the following requirement: the images must be in the `NORMAL` state.
	ImageId string `pulumi:"imageId"`
	// Destination image name.
	ImageName *string `pulumi:"imageName"`
	// Whether to return the ID of image created in the destination region.
	ImageSetRequired *bool `pulumi:"imageSetRequired"`
}

// The set of arguments for constructing a SyncImage resource.
type SyncImageArgs struct {
	// List of destination regions for synchronization. Limits: It must be a valid region. For a custom image, the destination region cannot be the source region. For a shared image, the destination region must be the source region, which indicates to create a copy of the image as a custom image in the same region.
	DestinationRegions pulumi.StringArrayInput
	// Checks whether image synchronization can be initiated.
	DryRun pulumi.BoolPtrInput
	// Image ID. The specified image must meet the following requirement: the images must be in the `NORMAL` state.
	ImageId pulumi.StringInput
	// Destination image name.
	ImageName pulumi.StringPtrInput
	// Whether to return the ID of image created in the destination region.
	ImageSetRequired pulumi.BoolPtrInput
}

func (SyncImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncImageArgs)(nil)).Elem()
}

type SyncImageInput interface {
	pulumi.Input

	ToSyncImageOutput() SyncImageOutput
	ToSyncImageOutputWithContext(ctx context.Context) SyncImageOutput
}

func (*SyncImage) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncImage)(nil)).Elem()
}

func (i *SyncImage) ToSyncImageOutput() SyncImageOutput {
	return i.ToSyncImageOutputWithContext(context.Background())
}

func (i *SyncImage) ToSyncImageOutputWithContext(ctx context.Context) SyncImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncImageOutput)
}

// SyncImageArrayInput is an input type that accepts SyncImageArray and SyncImageArrayOutput values.
// You can construct a concrete instance of `SyncImageArrayInput` via:
//
//	SyncImageArray{ SyncImageArgs{...} }
type SyncImageArrayInput interface {
	pulumi.Input

	ToSyncImageArrayOutput() SyncImageArrayOutput
	ToSyncImageArrayOutputWithContext(context.Context) SyncImageArrayOutput
}

type SyncImageArray []SyncImageInput

func (SyncImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncImage)(nil)).Elem()
}

func (i SyncImageArray) ToSyncImageArrayOutput() SyncImageArrayOutput {
	return i.ToSyncImageArrayOutputWithContext(context.Background())
}

func (i SyncImageArray) ToSyncImageArrayOutputWithContext(ctx context.Context) SyncImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncImageArrayOutput)
}

// SyncImageMapInput is an input type that accepts SyncImageMap and SyncImageMapOutput values.
// You can construct a concrete instance of `SyncImageMapInput` via:
//
//	SyncImageMap{ "key": SyncImageArgs{...} }
type SyncImageMapInput interface {
	pulumi.Input

	ToSyncImageMapOutput() SyncImageMapOutput
	ToSyncImageMapOutputWithContext(context.Context) SyncImageMapOutput
}

type SyncImageMap map[string]SyncImageInput

func (SyncImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncImage)(nil)).Elem()
}

func (i SyncImageMap) ToSyncImageMapOutput() SyncImageMapOutput {
	return i.ToSyncImageMapOutputWithContext(context.Background())
}

func (i SyncImageMap) ToSyncImageMapOutputWithContext(ctx context.Context) SyncImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncImageMapOutput)
}

type SyncImageOutput struct{ *pulumi.OutputState }

func (SyncImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncImage)(nil)).Elem()
}

func (o SyncImageOutput) ToSyncImageOutput() SyncImageOutput {
	return o
}

func (o SyncImageOutput) ToSyncImageOutputWithContext(ctx context.Context) SyncImageOutput {
	return o
}

// List of destination regions for synchronization. Limits: It must be a valid region. For a custom image, the destination region cannot be the source region. For a shared image, the destination region must be the source region, which indicates to create a copy of the image as a custom image in the same region.
func (o SyncImageOutput) DestinationRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyncImage) pulumi.StringArrayOutput { return v.DestinationRegions }).(pulumi.StringArrayOutput)
}

// Checks whether image synchronization can be initiated.
func (o SyncImageOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyncImage) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Image ID. The specified image must meet the following requirement: the images must be in the `NORMAL` state.
func (o SyncImageOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncImage) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// Destination image name.
func (o SyncImageOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncImage) pulumi.StringPtrOutput { return v.ImageName }).(pulumi.StringPtrOutput)
}

// Whether to return the ID of image created in the destination region.
func (o SyncImageOutput) ImageSetRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyncImage) pulumi.BoolPtrOutput { return v.ImageSetRequired }).(pulumi.BoolPtrOutput)
}

type SyncImageArrayOutput struct{ *pulumi.OutputState }

func (SyncImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncImage)(nil)).Elem()
}

func (o SyncImageArrayOutput) ToSyncImageArrayOutput() SyncImageArrayOutput {
	return o
}

func (o SyncImageArrayOutput) ToSyncImageArrayOutputWithContext(ctx context.Context) SyncImageArrayOutput {
	return o
}

func (o SyncImageArrayOutput) Index(i pulumi.IntInput) SyncImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyncImage {
		return vs[0].([]*SyncImage)[vs[1].(int)]
	}).(SyncImageOutput)
}

type SyncImageMapOutput struct{ *pulumi.OutputState }

func (SyncImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncImage)(nil)).Elem()
}

func (o SyncImageMapOutput) ToSyncImageMapOutput() SyncImageMapOutput {
	return o
}

func (o SyncImageMapOutput) ToSyncImageMapOutputWithContext(ctx context.Context) SyncImageMapOutput {
	return o
}

func (o SyncImageMapOutput) MapIndex(k pulumi.StringInput) SyncImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyncImage {
		return vs[0].(map[string]*SyncImage)[vs[1].(string)]
	}).(SyncImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyncImageInput)(nil)).Elem(), &SyncImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncImageArrayInput)(nil)).Elem(), SyncImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncImageMapInput)(nil)).Elem(), SyncImageMap{})
	pulumi.RegisterOutputType(SyncImageOutput{})
	pulumi.RegisterOutputType(SyncImageArrayOutput{})
	pulumi.RegisterOutputType(SyncImageMapOutput{})
}
