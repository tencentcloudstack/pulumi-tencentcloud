// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cvm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cvm exportImages
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cvm"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cvm.NewExportImages(ctx, "exportImages", &Cvm.ExportImagesArgs{
//				BucketName:     pulumi.String("xxxxxx"),
//				FileNamePrefix: pulumi.String("test-"),
//				ImageId:        pulumi.String("img-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ExportImages struct {
	pulumi.CustomResourceState

	// COS bucket name.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// Check whether the image can be exported.
	DryRun pulumi.BoolPtrOutput `pulumi:"dryRun"`
	// Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
	ExportFormat pulumi.StringPtrOutput `pulumi:"exportFormat"`
	// Prefix of exported file.
	FileNamePrefix pulumi.StringOutput `pulumi:"fileNamePrefix"`
	// Image ID.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// Whether to export only the system disk.
	OnlyExportRootDisk pulumi.BoolPtrOutput `pulumi:"onlyExportRootDisk"`
	// Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
	RoleName pulumi.StringPtrOutput `pulumi:"roleName"`
}

// NewExportImages registers a new resource with the given unique name, arguments, and options.
func NewExportImages(ctx *pulumi.Context,
	name string, args *ExportImagesArgs, opts ...pulumi.ResourceOption) (*ExportImages, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.FileNamePrefix == nil {
		return nil, errors.New("invalid value for required argument 'FileNamePrefix'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ExportImages
	err := ctx.RegisterResource("tencentcloud:Cvm/exportImages:ExportImages", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExportImages gets an existing ExportImages resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExportImages(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExportImagesState, opts ...pulumi.ResourceOption) (*ExportImages, error) {
	var resource ExportImages
	err := ctx.ReadResource("tencentcloud:Cvm/exportImages:ExportImages", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExportImages resources.
type exportImagesState struct {
	// COS bucket name.
	BucketName *string `pulumi:"bucketName"`
	// Check whether the image can be exported.
	DryRun *bool `pulumi:"dryRun"`
	// Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
	ExportFormat *string `pulumi:"exportFormat"`
	// Prefix of exported file.
	FileNamePrefix *string `pulumi:"fileNamePrefix"`
	// Image ID.
	ImageId *string `pulumi:"imageId"`
	// Whether to export only the system disk.
	OnlyExportRootDisk *bool `pulumi:"onlyExportRootDisk"`
	// Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
	RoleName *string `pulumi:"roleName"`
}

type ExportImagesState struct {
	// COS bucket name.
	BucketName pulumi.StringPtrInput
	// Check whether the image can be exported.
	DryRun pulumi.BoolPtrInput
	// Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
	ExportFormat pulumi.StringPtrInput
	// Prefix of exported file.
	FileNamePrefix pulumi.StringPtrInput
	// Image ID.
	ImageId pulumi.StringPtrInput
	// Whether to export only the system disk.
	OnlyExportRootDisk pulumi.BoolPtrInput
	// Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
	RoleName pulumi.StringPtrInput
}

func (ExportImagesState) ElementType() reflect.Type {
	return reflect.TypeOf((*exportImagesState)(nil)).Elem()
}

type exportImagesArgs struct {
	// COS bucket name.
	BucketName string `pulumi:"bucketName"`
	// Check whether the image can be exported.
	DryRun *bool `pulumi:"dryRun"`
	// Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
	ExportFormat *string `pulumi:"exportFormat"`
	// Prefix of exported file.
	FileNamePrefix string `pulumi:"fileNamePrefix"`
	// Image ID.
	ImageId string `pulumi:"imageId"`
	// Whether to export only the system disk.
	OnlyExportRootDisk *bool `pulumi:"onlyExportRootDisk"`
	// Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
	RoleName *string `pulumi:"roleName"`
}

// The set of arguments for constructing a ExportImages resource.
type ExportImagesArgs struct {
	// COS bucket name.
	BucketName pulumi.StringInput
	// Check whether the image can be exported.
	DryRun pulumi.BoolPtrInput
	// Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
	ExportFormat pulumi.StringPtrInput
	// Prefix of exported file.
	FileNamePrefix pulumi.StringInput
	// Image ID.
	ImageId pulumi.StringInput
	// Whether to export only the system disk.
	OnlyExportRootDisk pulumi.BoolPtrInput
	// Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
	RoleName pulumi.StringPtrInput
}

func (ExportImagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exportImagesArgs)(nil)).Elem()
}

type ExportImagesInput interface {
	pulumi.Input

	ToExportImagesOutput() ExportImagesOutput
	ToExportImagesOutputWithContext(ctx context.Context) ExportImagesOutput
}

func (*ExportImages) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportImages)(nil)).Elem()
}

func (i *ExportImages) ToExportImagesOutput() ExportImagesOutput {
	return i.ToExportImagesOutputWithContext(context.Background())
}

func (i *ExportImages) ToExportImagesOutputWithContext(ctx context.Context) ExportImagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportImagesOutput)
}

// ExportImagesArrayInput is an input type that accepts ExportImagesArray and ExportImagesArrayOutput values.
// You can construct a concrete instance of `ExportImagesArrayInput` via:
//
//	ExportImagesArray{ ExportImagesArgs{...} }
type ExportImagesArrayInput interface {
	pulumi.Input

	ToExportImagesArrayOutput() ExportImagesArrayOutput
	ToExportImagesArrayOutputWithContext(context.Context) ExportImagesArrayOutput
}

type ExportImagesArray []ExportImagesInput

func (ExportImagesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExportImages)(nil)).Elem()
}

func (i ExportImagesArray) ToExportImagesArrayOutput() ExportImagesArrayOutput {
	return i.ToExportImagesArrayOutputWithContext(context.Background())
}

func (i ExportImagesArray) ToExportImagesArrayOutputWithContext(ctx context.Context) ExportImagesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportImagesArrayOutput)
}

// ExportImagesMapInput is an input type that accepts ExportImagesMap and ExportImagesMapOutput values.
// You can construct a concrete instance of `ExportImagesMapInput` via:
//
//	ExportImagesMap{ "key": ExportImagesArgs{...} }
type ExportImagesMapInput interface {
	pulumi.Input

	ToExportImagesMapOutput() ExportImagesMapOutput
	ToExportImagesMapOutputWithContext(context.Context) ExportImagesMapOutput
}

type ExportImagesMap map[string]ExportImagesInput

func (ExportImagesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExportImages)(nil)).Elem()
}

func (i ExportImagesMap) ToExportImagesMapOutput() ExportImagesMapOutput {
	return i.ToExportImagesMapOutputWithContext(context.Background())
}

func (i ExportImagesMap) ToExportImagesMapOutputWithContext(ctx context.Context) ExportImagesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportImagesMapOutput)
}

type ExportImagesOutput struct{ *pulumi.OutputState }

func (ExportImagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExportImages)(nil)).Elem()
}

func (o ExportImagesOutput) ToExportImagesOutput() ExportImagesOutput {
	return o
}

func (o ExportImagesOutput) ToExportImagesOutputWithContext(ctx context.Context) ExportImagesOutput {
	return o
}

// COS bucket name.
func (o ExportImagesOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *ExportImages) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// Check whether the image can be exported.
func (o ExportImagesOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExportImages) pulumi.BoolPtrOutput { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
func (o ExportImagesOutput) ExportFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportImages) pulumi.StringPtrOutput { return v.ExportFormat }).(pulumi.StringPtrOutput)
}

// Prefix of exported file.
func (o ExportImagesOutput) FileNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *ExportImages) pulumi.StringOutput { return v.FileNamePrefix }).(pulumi.StringOutput)
}

// Image ID.
func (o ExportImagesOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExportImages) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// Whether to export only the system disk.
func (o ExportImagesOutput) OnlyExportRootDisk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExportImages) pulumi.BoolPtrOutput { return v.OnlyExportRootDisk }).(pulumi.BoolPtrOutput)
}

// Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
func (o ExportImagesOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExportImages) pulumi.StringPtrOutput { return v.RoleName }).(pulumi.StringPtrOutput)
}

type ExportImagesArrayOutput struct{ *pulumi.OutputState }

func (ExportImagesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExportImages)(nil)).Elem()
}

func (o ExportImagesArrayOutput) ToExportImagesArrayOutput() ExportImagesArrayOutput {
	return o
}

func (o ExportImagesArrayOutput) ToExportImagesArrayOutputWithContext(ctx context.Context) ExportImagesArrayOutput {
	return o
}

func (o ExportImagesArrayOutput) Index(i pulumi.IntInput) ExportImagesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExportImages {
		return vs[0].([]*ExportImages)[vs[1].(int)]
	}).(ExportImagesOutput)
}

type ExportImagesMapOutput struct{ *pulumi.OutputState }

func (ExportImagesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExportImages)(nil)).Elem()
}

func (o ExportImagesMapOutput) ToExportImagesMapOutput() ExportImagesMapOutput {
	return o
}

func (o ExportImagesMapOutput) ToExportImagesMapOutputWithContext(ctx context.Context) ExportImagesMapOutput {
	return o
}

func (o ExportImagesMapOutput) MapIndex(k pulumi.StringInput) ExportImagesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExportImages {
		return vs[0].(map[string]*ExportImages)[vs[1].(string)]
	}).(ExportImagesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExportImagesInput)(nil)).Elem(), &ExportImages{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExportImagesArrayInput)(nil)).Elem(), ExportImagesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExportImagesMapInput)(nil)).Elem(), ExportImagesMap{})
	pulumi.RegisterOutputType(ExportImagesOutput{})
	pulumi.RegisterOutputType(ExportImagesArrayOutput{})
	pulumi.RegisterOutputType(ExportImagesMapOutput{})
}
