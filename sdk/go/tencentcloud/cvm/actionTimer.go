// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cvm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a CVM instance action timer
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cvm"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Instance"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-6"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			images, err := Images.GetInstance(ctx, &images.GetInstanceArgs{
//				ImageTypes: []string{
//					"PUBLIC_IMAGE",
//				},
//				ImageNameRegex: pulumi.StringRef("TencentOS Server"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create vpc subnet
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.20.0/28"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create cvm
//			exampleInstance, err := Instance.NewInstance(ctx, "exampleInstance", &Instance.InstanceArgs{
//				InstanceName:     pulumi.String("tf_example"),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				ImageId:          pulumi.String(images.Images[0].ImageId),
//				InstanceType:     pulumi.String("SA3.MEDIUM4"),
//				SystemDiskType:   pulumi.String("CLOUD_HSSD"),
//				SystemDiskSize:   pulumi.Int(100),
//				Hostname:         pulumi.String("example"),
//				ProjectId:        pulumi.Int(0),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				DataDisks: instance.InstanceDataDiskArray{
//					&instance.InstanceDataDiskArgs{
//						DataDiskType: pulumi.String("CLOUD_HSSD"),
//						DataDiskSize: pulumi.Int(50),
//						Encrypt:      pulumi.Bool(false),
//					},
//				},
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create cvm action timer
//			_, err = Cvm.NewActionTimer(ctx, "exampleActionTimer", &Cvm.ActionTimerArgs{
//				InstanceId: exampleInstance.ID(),
//				ActionTimer: &cvm.ActionTimerActionTimerArgs{
//					TimerAction: pulumi.String("TerminateInstances"),
//					ActionTime:  pulumi.String("2024-11-11T11:26:40Z"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type ActionTimer struct {
	pulumi.CustomResourceState

	// Scheduled tasks. This parameter can be used to specify scheduled tasks for instances, and currently only supports scheduled destruction.
	ActionTimer ActionTimerActionTimerOutput `pulumi:"actionTimer"`
	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewActionTimer registers a new resource with the given unique name, arguments, and options.
func NewActionTimer(ctx *pulumi.Context,
	name string, args *ActionTimerArgs, opts ...pulumi.ResourceOption) (*ActionTimer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionTimer == nil {
		return nil, errors.New("invalid value for required argument 'ActionTimer'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ActionTimer
	err := ctx.RegisterResource("tencentcloud:Cvm/actionTimer:ActionTimer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActionTimer gets an existing ActionTimer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActionTimer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionTimerState, opts ...pulumi.ResourceOption) (*ActionTimer, error) {
	var resource ActionTimer
	err := ctx.ReadResource("tencentcloud:Cvm/actionTimer:ActionTimer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActionTimer resources.
type actionTimerState struct {
	// Scheduled tasks. This parameter can be used to specify scheduled tasks for instances, and currently only supports scheduled destruction.
	ActionTimer *ActionTimerActionTimer `pulumi:"actionTimer"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type ActionTimerState struct {
	// Scheduled tasks. This parameter can be used to specify scheduled tasks for instances, and currently only supports scheduled destruction.
	ActionTimer ActionTimerActionTimerPtrInput
	// Instance ID.
	InstanceId pulumi.StringPtrInput
}

func (ActionTimerState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionTimerState)(nil)).Elem()
}

type actionTimerArgs struct {
	// Scheduled tasks. This parameter can be used to specify scheduled tasks for instances, and currently only supports scheduled destruction.
	ActionTimer ActionTimerActionTimer `pulumi:"actionTimer"`
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a ActionTimer resource.
type ActionTimerArgs struct {
	// Scheduled tasks. This parameter can be used to specify scheduled tasks for instances, and currently only supports scheduled destruction.
	ActionTimer ActionTimerActionTimerInput
	// Instance ID.
	InstanceId pulumi.StringInput
}

func (ActionTimerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionTimerArgs)(nil)).Elem()
}

type ActionTimerInput interface {
	pulumi.Input

	ToActionTimerOutput() ActionTimerOutput
	ToActionTimerOutputWithContext(ctx context.Context) ActionTimerOutput
}

func (*ActionTimer) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionTimer)(nil)).Elem()
}

func (i *ActionTimer) ToActionTimerOutput() ActionTimerOutput {
	return i.ToActionTimerOutputWithContext(context.Background())
}

func (i *ActionTimer) ToActionTimerOutputWithContext(ctx context.Context) ActionTimerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionTimerOutput)
}

// ActionTimerArrayInput is an input type that accepts ActionTimerArray and ActionTimerArrayOutput values.
// You can construct a concrete instance of `ActionTimerArrayInput` via:
//
//	ActionTimerArray{ ActionTimerArgs{...} }
type ActionTimerArrayInput interface {
	pulumi.Input

	ToActionTimerArrayOutput() ActionTimerArrayOutput
	ToActionTimerArrayOutputWithContext(context.Context) ActionTimerArrayOutput
}

type ActionTimerArray []ActionTimerInput

func (ActionTimerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionTimer)(nil)).Elem()
}

func (i ActionTimerArray) ToActionTimerArrayOutput() ActionTimerArrayOutput {
	return i.ToActionTimerArrayOutputWithContext(context.Background())
}

func (i ActionTimerArray) ToActionTimerArrayOutputWithContext(ctx context.Context) ActionTimerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionTimerArrayOutput)
}

// ActionTimerMapInput is an input type that accepts ActionTimerMap and ActionTimerMapOutput values.
// You can construct a concrete instance of `ActionTimerMapInput` via:
//
//	ActionTimerMap{ "key": ActionTimerArgs{...} }
type ActionTimerMapInput interface {
	pulumi.Input

	ToActionTimerMapOutput() ActionTimerMapOutput
	ToActionTimerMapOutputWithContext(context.Context) ActionTimerMapOutput
}

type ActionTimerMap map[string]ActionTimerInput

func (ActionTimerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionTimer)(nil)).Elem()
}

func (i ActionTimerMap) ToActionTimerMapOutput() ActionTimerMapOutput {
	return i.ToActionTimerMapOutputWithContext(context.Background())
}

func (i ActionTimerMap) ToActionTimerMapOutputWithContext(ctx context.Context) ActionTimerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionTimerMapOutput)
}

type ActionTimerOutput struct{ *pulumi.OutputState }

func (ActionTimerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionTimer)(nil)).Elem()
}

func (o ActionTimerOutput) ToActionTimerOutput() ActionTimerOutput {
	return o
}

func (o ActionTimerOutput) ToActionTimerOutputWithContext(ctx context.Context) ActionTimerOutput {
	return o
}

// Scheduled tasks. This parameter can be used to specify scheduled tasks for instances, and currently only supports scheduled destruction.
func (o ActionTimerOutput) ActionTimer() ActionTimerActionTimerOutput {
	return o.ApplyT(func(v *ActionTimer) ActionTimerActionTimerOutput { return v.ActionTimer }).(ActionTimerActionTimerOutput)
}

// Instance ID.
func (o ActionTimerOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionTimer) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type ActionTimerArrayOutput struct{ *pulumi.OutputState }

func (ActionTimerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionTimer)(nil)).Elem()
}

func (o ActionTimerArrayOutput) ToActionTimerArrayOutput() ActionTimerArrayOutput {
	return o
}

func (o ActionTimerArrayOutput) ToActionTimerArrayOutputWithContext(ctx context.Context) ActionTimerArrayOutput {
	return o
}

func (o ActionTimerArrayOutput) Index(i pulumi.IntInput) ActionTimerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActionTimer {
		return vs[0].([]*ActionTimer)[vs[1].(int)]
	}).(ActionTimerOutput)
}

type ActionTimerMapOutput struct{ *pulumi.OutputState }

func (ActionTimerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionTimer)(nil)).Elem()
}

func (o ActionTimerMapOutput) ToActionTimerMapOutput() ActionTimerMapOutput {
	return o
}

func (o ActionTimerMapOutput) ToActionTimerMapOutputWithContext(ctx context.Context) ActionTimerMapOutput {
	return o
}

func (o ActionTimerMapOutput) MapIndex(k pulumi.StringInput) ActionTimerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActionTimer {
		return vs[0].(map[string]*ActionTimer)[vs[1].(string)]
	}).(ActionTimerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionTimerInput)(nil)).Elem(), &ActionTimer{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionTimerArrayInput)(nil)).Elem(), ActionTimerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionTimerMapInput)(nil)).Elem(), ActionTimerMap{})
	pulumi.RegisterOutputType(ActionTimerOutput{})
	pulumi.RegisterOutputType(ActionTimerArrayOutput{})
	pulumi.RegisterOutputType(ActionTimerMapOutput{})
}
