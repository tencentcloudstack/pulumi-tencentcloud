// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ha

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a HA VIP.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ha"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ha.NewVip(ctx, "foo", &Ha.VipArgs{
//				SubnetId: pulumi.String("subnet-4d4m4cd4s"),
//				Vip:      pulumi.String("10.0.4.16"),
//				VpcId:    pulumi.String("vpc-gzea3dd7"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// HA VIP can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ha/vip:Vip foo havip-kjqwe4ba
//
// ```
type Vip struct {
	pulumi.CustomResourceState

	// EIP that is associated.
	AddressIp pulumi.StringOutput `pulumi:"addressIp"`
	// Create time of the HA VIP.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Instance ID that is associated.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Name of the HA VIP. The length of character is limited to 1-60.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network interface ID that is associated.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// State of the HA VIP. Valid value: `AVAILABLE`, `UNBIND`.
	State pulumi.StringOutput `pulumi:"state"`
	// Subnet ID.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after resource created automatically.
	Vip pulumi.StringOutput `pulumi:"vip"`
	// VPC ID.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVip registers a new resource with the given unique name, arguments, and options.
func NewVip(ctx *pulumi.Context,
	name string, args *VipArgs, opts ...pulumi.ResourceOption) (*Vip, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Vip
	err := ctx.RegisterResource("tencentcloud:Ha/vip:Vip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVip gets an existing Vip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VipState, opts ...pulumi.ResourceOption) (*Vip, error) {
	var resource Vip
	err := ctx.ReadResource("tencentcloud:Ha/vip:Vip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vip resources.
type vipState struct {
	// EIP that is associated.
	AddressIp *string `pulumi:"addressIp"`
	// Create time of the HA VIP.
	CreateTime *string `pulumi:"createTime"`
	// Instance ID that is associated.
	InstanceId *string `pulumi:"instanceId"`
	// Name of the HA VIP. The length of character is limited to 1-60.
	Name *string `pulumi:"name"`
	// Network interface ID that is associated.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// State of the HA VIP. Valid value: `AVAILABLE`, `UNBIND`.
	State *string `pulumi:"state"`
	// Subnet ID.
	SubnetId *string `pulumi:"subnetId"`
	// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after resource created automatically.
	Vip *string `pulumi:"vip"`
	// VPC ID.
	VpcId *string `pulumi:"vpcId"`
}

type VipState struct {
	// EIP that is associated.
	AddressIp pulumi.StringPtrInput
	// Create time of the HA VIP.
	CreateTime pulumi.StringPtrInput
	// Instance ID that is associated.
	InstanceId pulumi.StringPtrInput
	// Name of the HA VIP. The length of character is limited to 1-60.
	Name pulumi.StringPtrInput
	// Network interface ID that is associated.
	NetworkInterfaceId pulumi.StringPtrInput
	// State of the HA VIP. Valid value: `AVAILABLE`, `UNBIND`.
	State pulumi.StringPtrInput
	// Subnet ID.
	SubnetId pulumi.StringPtrInput
	// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after resource created automatically.
	Vip pulumi.StringPtrInput
	// VPC ID.
	VpcId pulumi.StringPtrInput
}

func (VipState) ElementType() reflect.Type {
	return reflect.TypeOf((*vipState)(nil)).Elem()
}

type vipArgs struct {
	// Name of the HA VIP. The length of character is limited to 1-60.
	Name *string `pulumi:"name"`
	// Subnet ID.
	SubnetId string `pulumi:"subnetId"`
	// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after resource created automatically.
	Vip *string `pulumi:"vip"`
	// VPC ID.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Vip resource.
type VipArgs struct {
	// Name of the HA VIP. The length of character is limited to 1-60.
	Name pulumi.StringPtrInput
	// Subnet ID.
	SubnetId pulumi.StringInput
	// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after resource created automatically.
	Vip pulumi.StringPtrInput
	// VPC ID.
	VpcId pulumi.StringInput
}

func (VipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vipArgs)(nil)).Elem()
}

type VipInput interface {
	pulumi.Input

	ToVipOutput() VipOutput
	ToVipOutputWithContext(ctx context.Context) VipOutput
}

func (*Vip) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip)(nil)).Elem()
}

func (i *Vip) ToVipOutput() VipOutput {
	return i.ToVipOutputWithContext(context.Background())
}

func (i *Vip) ToVipOutputWithContext(ctx context.Context) VipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipOutput)
}

// VipArrayInput is an input type that accepts VipArray and VipArrayOutput values.
// You can construct a concrete instance of `VipArrayInput` via:
//
//	VipArray{ VipArgs{...} }
type VipArrayInput interface {
	pulumi.Input

	ToVipArrayOutput() VipArrayOutput
	ToVipArrayOutputWithContext(context.Context) VipArrayOutput
}

type VipArray []VipInput

func (VipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip)(nil)).Elem()
}

func (i VipArray) ToVipArrayOutput() VipArrayOutput {
	return i.ToVipArrayOutputWithContext(context.Background())
}

func (i VipArray) ToVipArrayOutputWithContext(ctx context.Context) VipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipArrayOutput)
}

// VipMapInput is an input type that accepts VipMap and VipMapOutput values.
// You can construct a concrete instance of `VipMapInput` via:
//
//	VipMap{ "key": VipArgs{...} }
type VipMapInput interface {
	pulumi.Input

	ToVipMapOutput() VipMapOutput
	ToVipMapOutputWithContext(context.Context) VipMapOutput
}

type VipMap map[string]VipInput

func (VipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip)(nil)).Elem()
}

func (i VipMap) ToVipMapOutput() VipMapOutput {
	return i.ToVipMapOutputWithContext(context.Background())
}

func (i VipMap) ToVipMapOutputWithContext(ctx context.Context) VipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipMapOutput)
}

type VipOutput struct{ *pulumi.OutputState }

func (VipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip)(nil)).Elem()
}

func (o VipOutput) ToVipOutput() VipOutput {
	return o
}

func (o VipOutput) ToVipOutputWithContext(ctx context.Context) VipOutput {
	return o
}

// EIP that is associated.
func (o VipOutput) AddressIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.AddressIp }).(pulumi.StringOutput)
}

// Create time of the HA VIP.
func (o VipOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Instance ID that is associated.
func (o VipOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Name of the HA VIP. The length of character is limited to 1-60.
func (o VipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network interface ID that is associated.
func (o VipOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// State of the HA VIP. Valid value: `AVAILABLE`, `UNBIND`.
func (o VipOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Subnet ID.
func (o VipOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Virtual IP address, it must not be occupied and in this VPC network segment. If not set, it will be assigned after resource created automatically.
func (o VipOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Vip }).(pulumi.StringOutput)
}

// VPC ID.
func (o VipOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type VipArrayOutput struct{ *pulumi.OutputState }

func (VipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip)(nil)).Elem()
}

func (o VipArrayOutput) ToVipArrayOutput() VipArrayOutput {
	return o
}

func (o VipArrayOutput) ToVipArrayOutputWithContext(ctx context.Context) VipArrayOutput {
	return o
}

func (o VipArrayOutput) Index(i pulumi.IntInput) VipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vip {
		return vs[0].([]*Vip)[vs[1].(int)]
	}).(VipOutput)
}

type VipMapOutput struct{ *pulumi.OutputState }

func (VipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip)(nil)).Elem()
}

func (o VipMapOutput) ToVipMapOutput() VipMapOutput {
	return o
}

func (o VipMapOutput) ToVipMapOutputWithContext(ctx context.Context) VipMapOutput {
	return o
}

func (o VipMapOutput) MapIndex(k pulumi.StringInput) VipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vip {
		return vs[0].(map[string]*Vip)[vs[1].(string)]
	}).(VipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VipInput)(nil)).Elem(), &Vip{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipArrayInput)(nil)).Elem(), VipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipMapInput)(nil)).Elem(), VipMap{})
	pulumi.RegisterOutputType(VipOutput{})
	pulumi.RegisterOutputType(VipArrayOutput{})
	pulumi.RegisterOutputType(VipMapOutput{})
}
