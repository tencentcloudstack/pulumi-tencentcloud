// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ha

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a HA VIP EIP attachment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ha"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ha.NewVipEipAttachment(ctx, "foo", &Ha.VipEipAttachmentArgs{
//				AddressIp: pulumi.String("1.1.1.1"),
//				HavipId:   pulumi.String("havip-kjqwe4ba"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// HA VIP EIP attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ha/vipEipAttachment:VipEipAttachment foo havip-kjqwe4ba#1.1.1.1
//
// ```
type VipEipAttachment struct {
	pulumi.CustomResourceState

	// Public address of the EIP.
	AddressIp pulumi.StringOutput `pulumi:"addressIp"`
	// ID of the attached HA VIP.
	HavipId pulumi.StringOutput `pulumi:"havipId"`
}

// NewVipEipAttachment registers a new resource with the given unique name, arguments, and options.
func NewVipEipAttachment(ctx *pulumi.Context,
	name string, args *VipEipAttachmentArgs, opts ...pulumi.ResourceOption) (*VipEipAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressIp == nil {
		return nil, errors.New("invalid value for required argument 'AddressIp'")
	}
	if args.HavipId == nil {
		return nil, errors.New("invalid value for required argument 'HavipId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VipEipAttachment
	err := ctx.RegisterResource("tencentcloud:Ha/vipEipAttachment:VipEipAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVipEipAttachment gets an existing VipEipAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVipEipAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VipEipAttachmentState, opts ...pulumi.ResourceOption) (*VipEipAttachment, error) {
	var resource VipEipAttachment
	err := ctx.ReadResource("tencentcloud:Ha/vipEipAttachment:VipEipAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VipEipAttachment resources.
type vipEipAttachmentState struct {
	// Public address of the EIP.
	AddressIp *string `pulumi:"addressIp"`
	// ID of the attached HA VIP.
	HavipId *string `pulumi:"havipId"`
}

type VipEipAttachmentState struct {
	// Public address of the EIP.
	AddressIp pulumi.StringPtrInput
	// ID of the attached HA VIP.
	HavipId pulumi.StringPtrInput
}

func (VipEipAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*vipEipAttachmentState)(nil)).Elem()
}

type vipEipAttachmentArgs struct {
	// Public address of the EIP.
	AddressIp string `pulumi:"addressIp"`
	// ID of the attached HA VIP.
	HavipId string `pulumi:"havipId"`
}

// The set of arguments for constructing a VipEipAttachment resource.
type VipEipAttachmentArgs struct {
	// Public address of the EIP.
	AddressIp pulumi.StringInput
	// ID of the attached HA VIP.
	HavipId pulumi.StringInput
}

func (VipEipAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vipEipAttachmentArgs)(nil)).Elem()
}

type VipEipAttachmentInput interface {
	pulumi.Input

	ToVipEipAttachmentOutput() VipEipAttachmentOutput
	ToVipEipAttachmentOutputWithContext(ctx context.Context) VipEipAttachmentOutput
}

func (*VipEipAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**VipEipAttachment)(nil)).Elem()
}

func (i *VipEipAttachment) ToVipEipAttachmentOutput() VipEipAttachmentOutput {
	return i.ToVipEipAttachmentOutputWithContext(context.Background())
}

func (i *VipEipAttachment) ToVipEipAttachmentOutputWithContext(ctx context.Context) VipEipAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipEipAttachmentOutput)
}

// VipEipAttachmentArrayInput is an input type that accepts VipEipAttachmentArray and VipEipAttachmentArrayOutput values.
// You can construct a concrete instance of `VipEipAttachmentArrayInput` via:
//
//	VipEipAttachmentArray{ VipEipAttachmentArgs{...} }
type VipEipAttachmentArrayInput interface {
	pulumi.Input

	ToVipEipAttachmentArrayOutput() VipEipAttachmentArrayOutput
	ToVipEipAttachmentArrayOutputWithContext(context.Context) VipEipAttachmentArrayOutput
}

type VipEipAttachmentArray []VipEipAttachmentInput

func (VipEipAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VipEipAttachment)(nil)).Elem()
}

func (i VipEipAttachmentArray) ToVipEipAttachmentArrayOutput() VipEipAttachmentArrayOutput {
	return i.ToVipEipAttachmentArrayOutputWithContext(context.Background())
}

func (i VipEipAttachmentArray) ToVipEipAttachmentArrayOutputWithContext(ctx context.Context) VipEipAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipEipAttachmentArrayOutput)
}

// VipEipAttachmentMapInput is an input type that accepts VipEipAttachmentMap and VipEipAttachmentMapOutput values.
// You can construct a concrete instance of `VipEipAttachmentMapInput` via:
//
//	VipEipAttachmentMap{ "key": VipEipAttachmentArgs{...} }
type VipEipAttachmentMapInput interface {
	pulumi.Input

	ToVipEipAttachmentMapOutput() VipEipAttachmentMapOutput
	ToVipEipAttachmentMapOutputWithContext(context.Context) VipEipAttachmentMapOutput
}

type VipEipAttachmentMap map[string]VipEipAttachmentInput

func (VipEipAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VipEipAttachment)(nil)).Elem()
}

func (i VipEipAttachmentMap) ToVipEipAttachmentMapOutput() VipEipAttachmentMapOutput {
	return i.ToVipEipAttachmentMapOutputWithContext(context.Background())
}

func (i VipEipAttachmentMap) ToVipEipAttachmentMapOutputWithContext(ctx context.Context) VipEipAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipEipAttachmentMapOutput)
}

type VipEipAttachmentOutput struct{ *pulumi.OutputState }

func (VipEipAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VipEipAttachment)(nil)).Elem()
}

func (o VipEipAttachmentOutput) ToVipEipAttachmentOutput() VipEipAttachmentOutput {
	return o
}

func (o VipEipAttachmentOutput) ToVipEipAttachmentOutputWithContext(ctx context.Context) VipEipAttachmentOutput {
	return o
}

// Public address of the EIP.
func (o VipEipAttachmentOutput) AddressIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VipEipAttachment) pulumi.StringOutput { return v.AddressIp }).(pulumi.StringOutput)
}

// ID of the attached HA VIP.
func (o VipEipAttachmentOutput) HavipId() pulumi.StringOutput {
	return o.ApplyT(func(v *VipEipAttachment) pulumi.StringOutput { return v.HavipId }).(pulumi.StringOutput)
}

type VipEipAttachmentArrayOutput struct{ *pulumi.OutputState }

func (VipEipAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VipEipAttachment)(nil)).Elem()
}

func (o VipEipAttachmentArrayOutput) ToVipEipAttachmentArrayOutput() VipEipAttachmentArrayOutput {
	return o
}

func (o VipEipAttachmentArrayOutput) ToVipEipAttachmentArrayOutputWithContext(ctx context.Context) VipEipAttachmentArrayOutput {
	return o
}

func (o VipEipAttachmentArrayOutput) Index(i pulumi.IntInput) VipEipAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VipEipAttachment {
		return vs[0].([]*VipEipAttachment)[vs[1].(int)]
	}).(VipEipAttachmentOutput)
}

type VipEipAttachmentMapOutput struct{ *pulumi.OutputState }

func (VipEipAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VipEipAttachment)(nil)).Elem()
}

func (o VipEipAttachmentMapOutput) ToVipEipAttachmentMapOutput() VipEipAttachmentMapOutput {
	return o
}

func (o VipEipAttachmentMapOutput) ToVipEipAttachmentMapOutputWithContext(ctx context.Context) VipEipAttachmentMapOutput {
	return o
}

func (o VipEipAttachmentMapOutput) MapIndex(k pulumi.StringInput) VipEipAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VipEipAttachment {
		return vs[0].(map[string]*VipEipAttachment)[vs[1].(string)]
	}).(VipEipAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VipEipAttachmentInput)(nil)).Elem(), &VipEipAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipEipAttachmentArrayInput)(nil)).Elem(), VipEipAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipEipAttachmentMapInput)(nil)).Elem(), VipEipAttachmentMap{})
	pulumi.RegisterOutputType(VipEipAttachmentOutput{})
	pulumi.RegisterOutputType(VipEipAttachmentArrayOutput{})
	pulumi.RegisterOutputType(VipEipAttachmentMapOutput{})
}
