// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a css startStreamMonitor
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewStartStreamMonitor(ctx, "startStreamMonitor", &Css.StartStreamMonitorArgs{
//				AudibleInputIndexLists: pulumi.IntArray{
//					pulumi.Int(1),
//				},
//				MonitorId: pulumi.String("3d5738dd-1ca2-4601-a6e9-004c5ec75c0b"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// css start_stream_monitor can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Css/startStreamMonitor:StartStreamMonitor start_stream_monitor start_stream_monitor_id
//
// ```
type StartStreamMonitor struct {
	pulumi.CustomResourceState

	// The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
	AudibleInputIndexLists pulumi.IntArrayOutput `pulumi:"audibleInputIndexLists"`
	// Monitor id.
	MonitorId pulumi.StringOutput `pulumi:"monitorId"`
}

// NewStartStreamMonitor registers a new resource with the given unique name, arguments, and options.
func NewStartStreamMonitor(ctx *pulumi.Context,
	name string, args *StartStreamMonitorArgs, opts ...pulumi.ResourceOption) (*StartStreamMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorId == nil {
		return nil, errors.New("invalid value for required argument 'MonitorId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StartStreamMonitor
	err := ctx.RegisterResource("tencentcloud:Css/startStreamMonitor:StartStreamMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStartStreamMonitor gets an existing StartStreamMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStartStreamMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StartStreamMonitorState, opts ...pulumi.ResourceOption) (*StartStreamMonitor, error) {
	var resource StartStreamMonitor
	err := ctx.ReadResource("tencentcloud:Css/startStreamMonitor:StartStreamMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StartStreamMonitor resources.
type startStreamMonitorState struct {
	// The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
	AudibleInputIndexLists []int `pulumi:"audibleInputIndexLists"`
	// Monitor id.
	MonitorId *string `pulumi:"monitorId"`
}

type StartStreamMonitorState struct {
	// The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
	AudibleInputIndexLists pulumi.IntArrayInput
	// Monitor id.
	MonitorId pulumi.StringPtrInput
}

func (StartStreamMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*startStreamMonitorState)(nil)).Elem()
}

type startStreamMonitorArgs struct {
	// The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
	AudibleInputIndexLists []int `pulumi:"audibleInputIndexLists"`
	// Monitor id.
	MonitorId string `pulumi:"monitorId"`
}

// The set of arguments for constructing a StartStreamMonitor resource.
type StartStreamMonitorArgs struct {
	// The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
	AudibleInputIndexLists pulumi.IntArrayInput
	// Monitor id.
	MonitorId pulumi.StringInput
}

func (StartStreamMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*startStreamMonitorArgs)(nil)).Elem()
}

type StartStreamMonitorInput interface {
	pulumi.Input

	ToStartStreamMonitorOutput() StartStreamMonitorOutput
	ToStartStreamMonitorOutputWithContext(ctx context.Context) StartStreamMonitorOutput
}

func (*StartStreamMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**StartStreamMonitor)(nil)).Elem()
}

func (i *StartStreamMonitor) ToStartStreamMonitorOutput() StartStreamMonitorOutput {
	return i.ToStartStreamMonitorOutputWithContext(context.Background())
}

func (i *StartStreamMonitor) ToStartStreamMonitorOutputWithContext(ctx context.Context) StartStreamMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartStreamMonitorOutput)
}

// StartStreamMonitorArrayInput is an input type that accepts StartStreamMonitorArray and StartStreamMonitorArrayOutput values.
// You can construct a concrete instance of `StartStreamMonitorArrayInput` via:
//
//	StartStreamMonitorArray{ StartStreamMonitorArgs{...} }
type StartStreamMonitorArrayInput interface {
	pulumi.Input

	ToStartStreamMonitorArrayOutput() StartStreamMonitorArrayOutput
	ToStartStreamMonitorArrayOutputWithContext(context.Context) StartStreamMonitorArrayOutput
}

type StartStreamMonitorArray []StartStreamMonitorInput

func (StartStreamMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartStreamMonitor)(nil)).Elem()
}

func (i StartStreamMonitorArray) ToStartStreamMonitorArrayOutput() StartStreamMonitorArrayOutput {
	return i.ToStartStreamMonitorArrayOutputWithContext(context.Background())
}

func (i StartStreamMonitorArray) ToStartStreamMonitorArrayOutputWithContext(ctx context.Context) StartStreamMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartStreamMonitorArrayOutput)
}

// StartStreamMonitorMapInput is an input type that accepts StartStreamMonitorMap and StartStreamMonitorMapOutput values.
// You can construct a concrete instance of `StartStreamMonitorMapInput` via:
//
//	StartStreamMonitorMap{ "key": StartStreamMonitorArgs{...} }
type StartStreamMonitorMapInput interface {
	pulumi.Input

	ToStartStreamMonitorMapOutput() StartStreamMonitorMapOutput
	ToStartStreamMonitorMapOutputWithContext(context.Context) StartStreamMonitorMapOutput
}

type StartStreamMonitorMap map[string]StartStreamMonitorInput

func (StartStreamMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartStreamMonitor)(nil)).Elem()
}

func (i StartStreamMonitorMap) ToStartStreamMonitorMapOutput() StartStreamMonitorMapOutput {
	return i.ToStartStreamMonitorMapOutputWithContext(context.Background())
}

func (i StartStreamMonitorMap) ToStartStreamMonitorMapOutputWithContext(ctx context.Context) StartStreamMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartStreamMonitorMapOutput)
}

type StartStreamMonitorOutput struct{ *pulumi.OutputState }

func (StartStreamMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StartStreamMonitor)(nil)).Elem()
}

func (o StartStreamMonitorOutput) ToStartStreamMonitorOutput() StartStreamMonitorOutput {
	return o
}

func (o StartStreamMonitorOutput) ToStartStreamMonitorOutputWithContext(ctx context.Context) StartStreamMonitorOutput {
	return o
}

// The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
func (o StartStreamMonitorOutput) AudibleInputIndexLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *StartStreamMonitor) pulumi.IntArrayOutput { return v.AudibleInputIndexLists }).(pulumi.IntArrayOutput)
}

// Monitor id.
func (o StartStreamMonitorOutput) MonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v *StartStreamMonitor) pulumi.StringOutput { return v.MonitorId }).(pulumi.StringOutput)
}

type StartStreamMonitorArrayOutput struct{ *pulumi.OutputState }

func (StartStreamMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartStreamMonitor)(nil)).Elem()
}

func (o StartStreamMonitorArrayOutput) ToStartStreamMonitorArrayOutput() StartStreamMonitorArrayOutput {
	return o
}

func (o StartStreamMonitorArrayOutput) ToStartStreamMonitorArrayOutputWithContext(ctx context.Context) StartStreamMonitorArrayOutput {
	return o
}

func (o StartStreamMonitorArrayOutput) Index(i pulumi.IntInput) StartStreamMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StartStreamMonitor {
		return vs[0].([]*StartStreamMonitor)[vs[1].(int)]
	}).(StartStreamMonitorOutput)
}

type StartStreamMonitorMapOutput struct{ *pulumi.OutputState }

func (StartStreamMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartStreamMonitor)(nil)).Elem()
}

func (o StartStreamMonitorMapOutput) ToStartStreamMonitorMapOutput() StartStreamMonitorMapOutput {
	return o
}

func (o StartStreamMonitorMapOutput) ToStartStreamMonitorMapOutputWithContext(ctx context.Context) StartStreamMonitorMapOutput {
	return o
}

func (o StartStreamMonitorMapOutput) MapIndex(k pulumi.StringInput) StartStreamMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StartStreamMonitor {
		return vs[0].(map[string]*StartStreamMonitor)[vs[1].(string)]
	}).(StartStreamMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StartStreamMonitorInput)(nil)).Elem(), &StartStreamMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartStreamMonitorArrayInput)(nil)).Elem(), StartStreamMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartStreamMonitorMapInput)(nil)).Elem(), StartStreamMonitorMap{})
	pulumi.RegisterOutputType(StartStreamMonitorOutput{})
	pulumi.RegisterOutputType(StartStreamMonitorArrayOutput{})
	pulumi.RegisterOutputType(StartStreamMonitorMapOutput{})
}
