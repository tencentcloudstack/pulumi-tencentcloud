// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a css pullStreamTask
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewPullStreamTask(ctx, "pullStreamTask", &Css.PullStreamTaskArgs{
//				AppName:    pulumi.String("app_name"),
//				Comment:    pulumi.String("comment."),
//				DomainName: pulumi.String("domain_name"),
//				EndTime:    pulumi.String("2022-11-16T22:09:28Z"),
//				Operator:   pulumi.String("admin"),
//				SourceType: pulumi.String("source_type"),
//				SourceUrls: pulumi.StringArray{
//					pulumi.String("source_urls"),
//				},
//				StartTime:  pulumi.String("2022-11-16T22:09:28Z"),
//				StreamName: pulumi.String("stream_name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// css pull_stream_task can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Css/pullStreamTask:PullStreamTask pull_stream_task pullStreamTask_id
//
// ```
type PullStreamTask struct {
	pulumi.CustomResourceState

	// push app name.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// backup pull source type.
	BackupSourceType pulumi.StringPtrOutput `pulumi:"backupSourceType"`
	// backup pull source.
	BackupSourceUrl pulumi.StringPtrOutput `pulumi:"backupSourceUrl"`
	// defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
	CallbackEvents pulumi.StringArrayOutput `pulumi:"callbackEvents"`
	// task event callback url.
	CallbackUrl pulumi.StringPtrOutput `pulumi:"callbackUrl"`
	// desc for pull task.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// desc who create the task.
	CreateBy pulumi.StringOutput `pulumi:"createBy"`
	// create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// push domain name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// task end time.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// ignore_region for ignore the input region and reblance inside the server.
	ExtraCmd pulumi.StringPtrOutput `pulumi:"extraCmd"`
	// task enable or disable.
	FileIndex pulumi.IntPtrOutput `pulumi:"fileIndex"`
	// task enable or disable.
	OffsetTime pulumi.IntPtrOutput `pulumi:"offsetTime"`
	// desc operator user name.
	Operator pulumi.StringPtrOutput `pulumi:"operator"`
	// other pushing args.
	PushArgs pulumi.StringPtrOutput `pulumi:"pushArgs"`
	// task run region.
	Region pulumi.StringOutput `pulumi:"region"`
	// `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
	SourceUrls pulumi.StringArrayOutput `pulumi:"sourceUrls"`
	// task begin time.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// task enable or disable.
	Status pulumi.StringOutput `pulumi:"status"`
	// push stream name.
	StreamName pulumi.StringOutput `pulumi:"streamName"`
	// full target push url, DomainName, AppName, StreamName field must be empty.
	ToUrl pulumi.StringPtrOutput `pulumi:"toUrl"`
	// desc who update the task.
	UpdateBy pulumi.StringOutput `pulumi:"updateBy"`
	// update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// loop time for vod.
	VodLoopTimes pulumi.IntOutput `pulumi:"vodLoopTimes"`
	// vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
	VodRefreshType pulumi.StringOutput `pulumi:"vodRefreshType"`
	// watermark list, max 4 setting.
	WatermarkLists PullStreamTaskWatermarkListArrayOutput `pulumi:"watermarkLists"`
}

// NewPullStreamTask registers a new resource with the given unique name, arguments, and options.
func NewPullStreamTask(ctx *pulumi.Context,
	name string, args *PullStreamTaskArgs, opts ...pulumi.ResourceOption) (*PullStreamTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.EndTime == nil {
		return nil, errors.New("invalid value for required argument 'EndTime'")
	}
	if args.SourceType == nil {
		return nil, errors.New("invalid value for required argument 'SourceType'")
	}
	if args.SourceUrls == nil {
		return nil, errors.New("invalid value for required argument 'SourceUrls'")
	}
	if args.StartTime == nil {
		return nil, errors.New("invalid value for required argument 'StartTime'")
	}
	if args.StreamName == nil {
		return nil, errors.New("invalid value for required argument 'StreamName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PullStreamTask
	err := ctx.RegisterResource("tencentcloud:Css/pullStreamTask:PullStreamTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPullStreamTask gets an existing PullStreamTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPullStreamTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PullStreamTaskState, opts ...pulumi.ResourceOption) (*PullStreamTask, error) {
	var resource PullStreamTask
	err := ctx.ReadResource("tencentcloud:Css/pullStreamTask:PullStreamTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PullStreamTask resources.
type pullStreamTaskState struct {
	// push app name.
	AppName *string `pulumi:"appName"`
	// backup pull source type.
	BackupSourceType *string `pulumi:"backupSourceType"`
	// backup pull source.
	BackupSourceUrl *string `pulumi:"backupSourceUrl"`
	// defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
	CallbackEvents []string `pulumi:"callbackEvents"`
	// task event callback url.
	CallbackUrl *string `pulumi:"callbackUrl"`
	// desc for pull task.
	Comment *string `pulumi:"comment"`
	// desc who create the task.
	CreateBy *string `pulumi:"createBy"`
	// create time.
	CreateTime *string `pulumi:"createTime"`
	// push domain name.
	DomainName *string `pulumi:"domainName"`
	// task end time.
	EndTime *string `pulumi:"endTime"`
	// ignore_region for ignore the input region and reblance inside the server.
	ExtraCmd *string `pulumi:"extraCmd"`
	// task enable or disable.
	FileIndex *int `pulumi:"fileIndex"`
	// task enable or disable.
	OffsetTime *int `pulumi:"offsetTime"`
	// desc operator user name.
	Operator *string `pulumi:"operator"`
	// other pushing args.
	PushArgs *string `pulumi:"pushArgs"`
	// task run region.
	Region *string `pulumi:"region"`
	// `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
	SourceType *string `pulumi:"sourceType"`
	// Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
	SourceUrls []string `pulumi:"sourceUrls"`
	// task begin time.
	StartTime *string `pulumi:"startTime"`
	// task enable or disable.
	Status *string `pulumi:"status"`
	// push stream name.
	StreamName *string `pulumi:"streamName"`
	// full target push url, DomainName, AppName, StreamName field must be empty.
	ToUrl *string `pulumi:"toUrl"`
	// desc who update the task.
	UpdateBy *string `pulumi:"updateBy"`
	// update time.
	UpdateTime *string `pulumi:"updateTime"`
	// loop time for vod.
	VodLoopTimes *int `pulumi:"vodLoopTimes"`
	// vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
	VodRefreshType *string `pulumi:"vodRefreshType"`
	// watermark list, max 4 setting.
	WatermarkLists []PullStreamTaskWatermarkList `pulumi:"watermarkLists"`
}

type PullStreamTaskState struct {
	// push app name.
	AppName pulumi.StringPtrInput
	// backup pull source type.
	BackupSourceType pulumi.StringPtrInput
	// backup pull source.
	BackupSourceUrl pulumi.StringPtrInput
	// defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
	CallbackEvents pulumi.StringArrayInput
	// task event callback url.
	CallbackUrl pulumi.StringPtrInput
	// desc for pull task.
	Comment pulumi.StringPtrInput
	// desc who create the task.
	CreateBy pulumi.StringPtrInput
	// create time.
	CreateTime pulumi.StringPtrInput
	// push domain name.
	DomainName pulumi.StringPtrInput
	// task end time.
	EndTime pulumi.StringPtrInput
	// ignore_region for ignore the input region and reblance inside the server.
	ExtraCmd pulumi.StringPtrInput
	// task enable or disable.
	FileIndex pulumi.IntPtrInput
	// task enable or disable.
	OffsetTime pulumi.IntPtrInput
	// desc operator user name.
	Operator pulumi.StringPtrInput
	// other pushing args.
	PushArgs pulumi.StringPtrInput
	// task run region.
	Region pulumi.StringPtrInput
	// `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
	SourceType pulumi.StringPtrInput
	// Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
	SourceUrls pulumi.StringArrayInput
	// task begin time.
	StartTime pulumi.StringPtrInput
	// task enable or disable.
	Status pulumi.StringPtrInput
	// push stream name.
	StreamName pulumi.StringPtrInput
	// full target push url, DomainName, AppName, StreamName field must be empty.
	ToUrl pulumi.StringPtrInput
	// desc who update the task.
	UpdateBy pulumi.StringPtrInput
	// update time.
	UpdateTime pulumi.StringPtrInput
	// loop time for vod.
	VodLoopTimes pulumi.IntPtrInput
	// vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
	VodRefreshType pulumi.StringPtrInput
	// watermark list, max 4 setting.
	WatermarkLists PullStreamTaskWatermarkListArrayInput
}

func (PullStreamTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*pullStreamTaskState)(nil)).Elem()
}

type pullStreamTaskArgs struct {
	// push app name.
	AppName string `pulumi:"appName"`
	// backup pull source type.
	BackupSourceType *string `pulumi:"backupSourceType"`
	// backup pull source.
	BackupSourceUrl *string `pulumi:"backupSourceUrl"`
	// defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
	CallbackEvents []string `pulumi:"callbackEvents"`
	// task event callback url.
	CallbackUrl *string `pulumi:"callbackUrl"`
	// desc for pull task.
	Comment *string `pulumi:"comment"`
	// push domain name.
	DomainName string `pulumi:"domainName"`
	// task end time.
	EndTime string `pulumi:"endTime"`
	// ignore_region for ignore the input region and reblance inside the server.
	ExtraCmd *string `pulumi:"extraCmd"`
	// task enable or disable.
	FileIndex *int `pulumi:"fileIndex"`
	// task enable or disable.
	OffsetTime *int `pulumi:"offsetTime"`
	// desc operator user name.
	Operator *string `pulumi:"operator"`
	// other pushing args.
	PushArgs *string `pulumi:"pushArgs"`
	// `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
	SourceType string `pulumi:"sourceType"`
	// Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
	SourceUrls []string `pulumi:"sourceUrls"`
	// task begin time.
	StartTime string `pulumi:"startTime"`
	// task enable or disable.
	Status *string `pulumi:"status"`
	// push stream name.
	StreamName string `pulumi:"streamName"`
	// full target push url, DomainName, AppName, StreamName field must be empty.
	ToUrl *string `pulumi:"toUrl"`
	// loop time for vod.
	VodLoopTimes *int `pulumi:"vodLoopTimes"`
	// vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
	VodRefreshType *string `pulumi:"vodRefreshType"`
	// watermark list, max 4 setting.
	WatermarkLists []PullStreamTaskWatermarkList `pulumi:"watermarkLists"`
}

// The set of arguments for constructing a PullStreamTask resource.
type PullStreamTaskArgs struct {
	// push app name.
	AppName pulumi.StringInput
	// backup pull source type.
	BackupSourceType pulumi.StringPtrInput
	// backup pull source.
	BackupSourceUrl pulumi.StringPtrInput
	// defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
	CallbackEvents pulumi.StringArrayInput
	// task event callback url.
	CallbackUrl pulumi.StringPtrInput
	// desc for pull task.
	Comment pulumi.StringPtrInput
	// push domain name.
	DomainName pulumi.StringInput
	// task end time.
	EndTime pulumi.StringInput
	// ignore_region for ignore the input region and reblance inside the server.
	ExtraCmd pulumi.StringPtrInput
	// task enable or disable.
	FileIndex pulumi.IntPtrInput
	// task enable or disable.
	OffsetTime pulumi.IntPtrInput
	// desc operator user name.
	Operator pulumi.StringPtrInput
	// other pushing args.
	PushArgs pulumi.StringPtrInput
	// `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
	SourceType pulumi.StringInput
	// Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
	SourceUrls pulumi.StringArrayInput
	// task begin time.
	StartTime pulumi.StringInput
	// task enable or disable.
	Status pulumi.StringPtrInput
	// push stream name.
	StreamName pulumi.StringInput
	// full target push url, DomainName, AppName, StreamName field must be empty.
	ToUrl pulumi.StringPtrInput
	// loop time for vod.
	VodLoopTimes pulumi.IntPtrInput
	// vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
	VodRefreshType pulumi.StringPtrInput
	// watermark list, max 4 setting.
	WatermarkLists PullStreamTaskWatermarkListArrayInput
}

func (PullStreamTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pullStreamTaskArgs)(nil)).Elem()
}

type PullStreamTaskInput interface {
	pulumi.Input

	ToPullStreamTaskOutput() PullStreamTaskOutput
	ToPullStreamTaskOutputWithContext(ctx context.Context) PullStreamTaskOutput
}

func (*PullStreamTask) ElementType() reflect.Type {
	return reflect.TypeOf((**PullStreamTask)(nil)).Elem()
}

func (i *PullStreamTask) ToPullStreamTaskOutput() PullStreamTaskOutput {
	return i.ToPullStreamTaskOutputWithContext(context.Background())
}

func (i *PullStreamTask) ToPullStreamTaskOutputWithContext(ctx context.Context) PullStreamTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullStreamTaskOutput)
}

// PullStreamTaskArrayInput is an input type that accepts PullStreamTaskArray and PullStreamTaskArrayOutput values.
// You can construct a concrete instance of `PullStreamTaskArrayInput` via:
//
//	PullStreamTaskArray{ PullStreamTaskArgs{...} }
type PullStreamTaskArrayInput interface {
	pulumi.Input

	ToPullStreamTaskArrayOutput() PullStreamTaskArrayOutput
	ToPullStreamTaskArrayOutputWithContext(context.Context) PullStreamTaskArrayOutput
}

type PullStreamTaskArray []PullStreamTaskInput

func (PullStreamTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PullStreamTask)(nil)).Elem()
}

func (i PullStreamTaskArray) ToPullStreamTaskArrayOutput() PullStreamTaskArrayOutput {
	return i.ToPullStreamTaskArrayOutputWithContext(context.Background())
}

func (i PullStreamTaskArray) ToPullStreamTaskArrayOutputWithContext(ctx context.Context) PullStreamTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullStreamTaskArrayOutput)
}

// PullStreamTaskMapInput is an input type that accepts PullStreamTaskMap and PullStreamTaskMapOutput values.
// You can construct a concrete instance of `PullStreamTaskMapInput` via:
//
//	PullStreamTaskMap{ "key": PullStreamTaskArgs{...} }
type PullStreamTaskMapInput interface {
	pulumi.Input

	ToPullStreamTaskMapOutput() PullStreamTaskMapOutput
	ToPullStreamTaskMapOutputWithContext(context.Context) PullStreamTaskMapOutput
}

type PullStreamTaskMap map[string]PullStreamTaskInput

func (PullStreamTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PullStreamTask)(nil)).Elem()
}

func (i PullStreamTaskMap) ToPullStreamTaskMapOutput() PullStreamTaskMapOutput {
	return i.ToPullStreamTaskMapOutputWithContext(context.Background())
}

func (i PullStreamTaskMap) ToPullStreamTaskMapOutputWithContext(ctx context.Context) PullStreamTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullStreamTaskMapOutput)
}

type PullStreamTaskOutput struct{ *pulumi.OutputState }

func (PullStreamTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullStreamTask)(nil)).Elem()
}

func (o PullStreamTaskOutput) ToPullStreamTaskOutput() PullStreamTaskOutput {
	return o
}

func (o PullStreamTaskOutput) ToPullStreamTaskOutputWithContext(ctx context.Context) PullStreamTaskOutput {
	return o
}

// push app name.
func (o PullStreamTaskOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// backup pull source type.
func (o PullStreamTaskOutput) BackupSourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringPtrOutput { return v.BackupSourceType }).(pulumi.StringPtrOutput)
}

// backup pull source.
func (o PullStreamTaskOutput) BackupSourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringPtrOutput { return v.BackupSourceUrl }).(pulumi.StringPtrOutput)
}

// defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
func (o PullStreamTaskOutput) CallbackEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringArrayOutput { return v.CallbackEvents }).(pulumi.StringArrayOutput)
}

// task event callback url.
func (o PullStreamTaskOutput) CallbackUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringPtrOutput { return v.CallbackUrl }).(pulumi.StringPtrOutput)
}

// desc for pull task.
func (o PullStreamTaskOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// desc who create the task.
func (o PullStreamTaskOutput) CreateBy() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.CreateBy }).(pulumi.StringOutput)
}

// create time.
func (o PullStreamTaskOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// push domain name.
func (o PullStreamTaskOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// task end time.
func (o PullStreamTaskOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// ignore_region for ignore the input region and reblance inside the server.
func (o PullStreamTaskOutput) ExtraCmd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringPtrOutput { return v.ExtraCmd }).(pulumi.StringPtrOutput)
}

// task enable or disable.
func (o PullStreamTaskOutput) FileIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.IntPtrOutput { return v.FileIndex }).(pulumi.IntPtrOutput)
}

// task enable or disable.
func (o PullStreamTaskOutput) OffsetTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.IntPtrOutput { return v.OffsetTime }).(pulumi.IntPtrOutput)
}

// desc operator user name.
func (o PullStreamTaskOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringPtrOutput { return v.Operator }).(pulumi.StringPtrOutput)
}

// other pushing args.
func (o PullStreamTaskOutput) PushArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringPtrOutput { return v.PushArgs }).(pulumi.StringPtrOutput)
}

// task run region.
func (o PullStreamTaskOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
func (o PullStreamTaskOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
func (o PullStreamTaskOutput) SourceUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringArrayOutput { return v.SourceUrls }).(pulumi.StringArrayOutput)
}

// task begin time.
func (o PullStreamTaskOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// task enable or disable.
func (o PullStreamTaskOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// push stream name.
func (o PullStreamTaskOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.StreamName }).(pulumi.StringOutput)
}

// full target push url, DomainName, AppName, StreamName field must be empty.
func (o PullStreamTaskOutput) ToUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringPtrOutput { return v.ToUrl }).(pulumi.StringPtrOutput)
}

// desc who update the task.
func (o PullStreamTaskOutput) UpdateBy() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.UpdateBy }).(pulumi.StringOutput)
}

// update time.
func (o PullStreamTaskOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// loop time for vod.
func (o PullStreamTaskOutput) VodLoopTimes() pulumi.IntOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.IntOutput { return v.VodLoopTimes }).(pulumi.IntOutput)
}

// vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
func (o PullStreamTaskOutput) VodRefreshType() pulumi.StringOutput {
	return o.ApplyT(func(v *PullStreamTask) pulumi.StringOutput { return v.VodRefreshType }).(pulumi.StringOutput)
}

// watermark list, max 4 setting.
func (o PullStreamTaskOutput) WatermarkLists() PullStreamTaskWatermarkListArrayOutput {
	return o.ApplyT(func(v *PullStreamTask) PullStreamTaskWatermarkListArrayOutput { return v.WatermarkLists }).(PullStreamTaskWatermarkListArrayOutput)
}

type PullStreamTaskArrayOutput struct{ *pulumi.OutputState }

func (PullStreamTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PullStreamTask)(nil)).Elem()
}

func (o PullStreamTaskArrayOutput) ToPullStreamTaskArrayOutput() PullStreamTaskArrayOutput {
	return o
}

func (o PullStreamTaskArrayOutput) ToPullStreamTaskArrayOutputWithContext(ctx context.Context) PullStreamTaskArrayOutput {
	return o
}

func (o PullStreamTaskArrayOutput) Index(i pulumi.IntInput) PullStreamTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PullStreamTask {
		return vs[0].([]*PullStreamTask)[vs[1].(int)]
	}).(PullStreamTaskOutput)
}

type PullStreamTaskMapOutput struct{ *pulumi.OutputState }

func (PullStreamTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PullStreamTask)(nil)).Elem()
}

func (o PullStreamTaskMapOutput) ToPullStreamTaskMapOutput() PullStreamTaskMapOutput {
	return o
}

func (o PullStreamTaskMapOutput) ToPullStreamTaskMapOutputWithContext(ctx context.Context) PullStreamTaskMapOutput {
	return o
}

func (o PullStreamTaskMapOutput) MapIndex(k pulumi.StringInput) PullStreamTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PullStreamTask {
		return vs[0].(map[string]*PullStreamTask)[vs[1].(string)]
	}).(PullStreamTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PullStreamTaskInput)(nil)).Elem(), &PullStreamTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*PullStreamTaskArrayInput)(nil)).Elem(), PullStreamTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PullStreamTaskMapInput)(nil)).Elem(), PullStreamTaskMap{})
	pulumi.RegisterOutputType(PullStreamTaskOutput{})
	pulumi.RegisterOutputType(PullStreamTaskArrayOutput{})
	pulumi.RegisterOutputType(PullStreamTaskMapOutput{})
}
