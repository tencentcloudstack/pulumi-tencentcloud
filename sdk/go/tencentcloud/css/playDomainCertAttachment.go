// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a css play_domain_cert_attachment. This resource is used for binding the play domain and specified certification together.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ssl"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ssl"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := Ssl.GetCertificates(ctx, &ssl.GetCertificatesArgs{
//				Name: pulumi.StringRef("your_ssl_cert"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Css.NewPlayDomainCertAttachment(ctx, "playDomainCertAttachment", &Css.PlayDomainCertAttachmentArgs{
//				CloudCertId: pulumi.String(foo.Certificates[0].Id),
//				DomainInfo: &css.PlayDomainCertAttachmentDomainInfoArgs{
//					DomainName: pulumi.String("your_domain_name"),
//					Status:     pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// css play_domain_cert_attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Css/playDomainCertAttachment:PlayDomainCertAttachment play_domain_cert_attachment domainName#cloudCertId
//
// ```
type PlayDomainCertAttachment struct {
	pulumi.CustomResourceState

	// certificate expiration time.
	CertExpireTime pulumi.StringOutput `pulumi:"certExpireTime"`
	// certificate ID.
	CertId pulumi.IntOutput `pulumi:"certId"`
	// certificate type. 0: Self-owned certificate, 1: Tencent Cloud ssl managed certificate.
	CertType pulumi.IntOutput `pulumi:"certType"`
	// certificate remarks. Synonymous with CertName.
	CertificateAlias pulumi.StringOutput `pulumi:"certificateAlias"`
	// Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
	CloudCertId pulumi.StringPtrOutput `pulumi:"cloudCertId"`
	// The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
	DomainInfo PlayDomainCertAttachmentDomainInfoOutput `pulumi:"domainInfo"`
	// The time when the rule was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPlayDomainCertAttachment registers a new resource with the given unique name, arguments, and options.
func NewPlayDomainCertAttachment(ctx *pulumi.Context,
	name string, args *PlayDomainCertAttachmentArgs, opts ...pulumi.ResourceOption) (*PlayDomainCertAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainInfo == nil {
		return nil, errors.New("invalid value for required argument 'DomainInfo'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PlayDomainCertAttachment
	err := ctx.RegisterResource("tencentcloud:Css/playDomainCertAttachment:PlayDomainCertAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlayDomainCertAttachment gets an existing PlayDomainCertAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlayDomainCertAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlayDomainCertAttachmentState, opts ...pulumi.ResourceOption) (*PlayDomainCertAttachment, error) {
	var resource PlayDomainCertAttachment
	err := ctx.ReadResource("tencentcloud:Css/playDomainCertAttachment:PlayDomainCertAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlayDomainCertAttachment resources.
type playDomainCertAttachmentState struct {
	// certificate expiration time.
	CertExpireTime *string `pulumi:"certExpireTime"`
	// certificate ID.
	CertId *int `pulumi:"certId"`
	// certificate type. 0: Self-owned certificate, 1: Tencent Cloud ssl managed certificate.
	CertType *int `pulumi:"certType"`
	// certificate remarks. Synonymous with CertName.
	CertificateAlias *string `pulumi:"certificateAlias"`
	// Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
	CloudCertId *string `pulumi:"cloudCertId"`
	// The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
	DomainInfo *PlayDomainCertAttachmentDomainInfo `pulumi:"domainInfo"`
	// The time when the rule was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type PlayDomainCertAttachmentState struct {
	// certificate expiration time.
	CertExpireTime pulumi.StringPtrInput
	// certificate ID.
	CertId pulumi.IntPtrInput
	// certificate type. 0: Self-owned certificate, 1: Tencent Cloud ssl managed certificate.
	CertType pulumi.IntPtrInput
	// certificate remarks. Synonymous with CertName.
	CertificateAlias pulumi.StringPtrInput
	// Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
	CloudCertId pulumi.StringPtrInput
	// The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
	DomainInfo PlayDomainCertAttachmentDomainInfoPtrInput
	// The time when the rule was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (PlayDomainCertAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*playDomainCertAttachmentState)(nil)).Elem()
}

type playDomainCertAttachmentArgs struct {
	// Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
	CloudCertId *string `pulumi:"cloudCertId"`
	// The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
	DomainInfo PlayDomainCertAttachmentDomainInfo `pulumi:"domainInfo"`
}

// The set of arguments for constructing a PlayDomainCertAttachment resource.
type PlayDomainCertAttachmentArgs struct {
	// Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
	CloudCertId pulumi.StringPtrInput
	// The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
	DomainInfo PlayDomainCertAttachmentDomainInfoInput
}

func (PlayDomainCertAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playDomainCertAttachmentArgs)(nil)).Elem()
}

type PlayDomainCertAttachmentInput interface {
	pulumi.Input

	ToPlayDomainCertAttachmentOutput() PlayDomainCertAttachmentOutput
	ToPlayDomainCertAttachmentOutputWithContext(ctx context.Context) PlayDomainCertAttachmentOutput
}

func (*PlayDomainCertAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**PlayDomainCertAttachment)(nil)).Elem()
}

func (i *PlayDomainCertAttachment) ToPlayDomainCertAttachmentOutput() PlayDomainCertAttachmentOutput {
	return i.ToPlayDomainCertAttachmentOutputWithContext(context.Background())
}

func (i *PlayDomainCertAttachment) ToPlayDomainCertAttachmentOutputWithContext(ctx context.Context) PlayDomainCertAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlayDomainCertAttachmentOutput)
}

// PlayDomainCertAttachmentArrayInput is an input type that accepts PlayDomainCertAttachmentArray and PlayDomainCertAttachmentArrayOutput values.
// You can construct a concrete instance of `PlayDomainCertAttachmentArrayInput` via:
//
//	PlayDomainCertAttachmentArray{ PlayDomainCertAttachmentArgs{...} }
type PlayDomainCertAttachmentArrayInput interface {
	pulumi.Input

	ToPlayDomainCertAttachmentArrayOutput() PlayDomainCertAttachmentArrayOutput
	ToPlayDomainCertAttachmentArrayOutputWithContext(context.Context) PlayDomainCertAttachmentArrayOutput
}

type PlayDomainCertAttachmentArray []PlayDomainCertAttachmentInput

func (PlayDomainCertAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlayDomainCertAttachment)(nil)).Elem()
}

func (i PlayDomainCertAttachmentArray) ToPlayDomainCertAttachmentArrayOutput() PlayDomainCertAttachmentArrayOutput {
	return i.ToPlayDomainCertAttachmentArrayOutputWithContext(context.Background())
}

func (i PlayDomainCertAttachmentArray) ToPlayDomainCertAttachmentArrayOutputWithContext(ctx context.Context) PlayDomainCertAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlayDomainCertAttachmentArrayOutput)
}

// PlayDomainCertAttachmentMapInput is an input type that accepts PlayDomainCertAttachmentMap and PlayDomainCertAttachmentMapOutput values.
// You can construct a concrete instance of `PlayDomainCertAttachmentMapInput` via:
//
//	PlayDomainCertAttachmentMap{ "key": PlayDomainCertAttachmentArgs{...} }
type PlayDomainCertAttachmentMapInput interface {
	pulumi.Input

	ToPlayDomainCertAttachmentMapOutput() PlayDomainCertAttachmentMapOutput
	ToPlayDomainCertAttachmentMapOutputWithContext(context.Context) PlayDomainCertAttachmentMapOutput
}

type PlayDomainCertAttachmentMap map[string]PlayDomainCertAttachmentInput

func (PlayDomainCertAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlayDomainCertAttachment)(nil)).Elem()
}

func (i PlayDomainCertAttachmentMap) ToPlayDomainCertAttachmentMapOutput() PlayDomainCertAttachmentMapOutput {
	return i.ToPlayDomainCertAttachmentMapOutputWithContext(context.Background())
}

func (i PlayDomainCertAttachmentMap) ToPlayDomainCertAttachmentMapOutputWithContext(ctx context.Context) PlayDomainCertAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlayDomainCertAttachmentMapOutput)
}

type PlayDomainCertAttachmentOutput struct{ *pulumi.OutputState }

func (PlayDomainCertAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlayDomainCertAttachment)(nil)).Elem()
}

func (o PlayDomainCertAttachmentOutput) ToPlayDomainCertAttachmentOutput() PlayDomainCertAttachmentOutput {
	return o
}

func (o PlayDomainCertAttachmentOutput) ToPlayDomainCertAttachmentOutputWithContext(ctx context.Context) PlayDomainCertAttachmentOutput {
	return o
}

// certificate expiration time.
func (o PlayDomainCertAttachmentOutput) CertExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PlayDomainCertAttachment) pulumi.StringOutput { return v.CertExpireTime }).(pulumi.StringOutput)
}

// certificate ID.
func (o PlayDomainCertAttachmentOutput) CertId() pulumi.IntOutput {
	return o.ApplyT(func(v *PlayDomainCertAttachment) pulumi.IntOutput { return v.CertId }).(pulumi.IntOutput)
}

// certificate type. 0: Self-owned certificate, 1: Tencent Cloud ssl managed certificate.
func (o PlayDomainCertAttachmentOutput) CertType() pulumi.IntOutput {
	return o.ApplyT(func(v *PlayDomainCertAttachment) pulumi.IntOutput { return v.CertType }).(pulumi.IntOutput)
}

// certificate remarks. Synonymous with CertName.
func (o PlayDomainCertAttachmentOutput) CertificateAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *PlayDomainCertAttachment) pulumi.StringOutput { return v.CertificateAlias }).(pulumi.StringOutput)
}

// Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
func (o PlayDomainCertAttachmentOutput) CloudCertId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlayDomainCertAttachment) pulumi.StringPtrOutput { return v.CloudCertId }).(pulumi.StringPtrOutput)
}

// The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
func (o PlayDomainCertAttachmentOutput) DomainInfo() PlayDomainCertAttachmentDomainInfoOutput {
	return o.ApplyT(func(v *PlayDomainCertAttachment) PlayDomainCertAttachmentDomainInfoOutput { return v.DomainInfo }).(PlayDomainCertAttachmentDomainInfoOutput)
}

// The time when the rule was last updated.
func (o PlayDomainCertAttachmentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PlayDomainCertAttachment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type PlayDomainCertAttachmentArrayOutput struct{ *pulumi.OutputState }

func (PlayDomainCertAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlayDomainCertAttachment)(nil)).Elem()
}

func (o PlayDomainCertAttachmentArrayOutput) ToPlayDomainCertAttachmentArrayOutput() PlayDomainCertAttachmentArrayOutput {
	return o
}

func (o PlayDomainCertAttachmentArrayOutput) ToPlayDomainCertAttachmentArrayOutputWithContext(ctx context.Context) PlayDomainCertAttachmentArrayOutput {
	return o
}

func (o PlayDomainCertAttachmentArrayOutput) Index(i pulumi.IntInput) PlayDomainCertAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlayDomainCertAttachment {
		return vs[0].([]*PlayDomainCertAttachment)[vs[1].(int)]
	}).(PlayDomainCertAttachmentOutput)
}

type PlayDomainCertAttachmentMapOutput struct{ *pulumi.OutputState }

func (PlayDomainCertAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlayDomainCertAttachment)(nil)).Elem()
}

func (o PlayDomainCertAttachmentMapOutput) ToPlayDomainCertAttachmentMapOutput() PlayDomainCertAttachmentMapOutput {
	return o
}

func (o PlayDomainCertAttachmentMapOutput) ToPlayDomainCertAttachmentMapOutputWithContext(ctx context.Context) PlayDomainCertAttachmentMapOutput {
	return o
}

func (o PlayDomainCertAttachmentMapOutput) MapIndex(k pulumi.StringInput) PlayDomainCertAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlayDomainCertAttachment {
		return vs[0].(map[string]*PlayDomainCertAttachment)[vs[1].(string)]
	}).(PlayDomainCertAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlayDomainCertAttachmentInput)(nil)).Elem(), &PlayDomainCertAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlayDomainCertAttachmentArrayInput)(nil)).Elem(), PlayDomainCertAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlayDomainCertAttachmentMapInput)(nil)).Elem(), PlayDomainCertAttachmentMap{})
	pulumi.RegisterOutputType(PlayDomainCertAttachmentOutput{})
	pulumi.RegisterOutputType(PlayDomainCertAttachmentArrayOutput{})
	pulumi.RegisterOutputType(PlayDomainCertAttachmentMapOutput{})
}
